"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Applications written in Rust"	"Friends of Rust"	"https://www.rust-lang.org/friends.html"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Rust Programming Language"	"null"	"null"	""	"true"
"Applications written in Rust"	"azerupi/mdBook"	"https://github.com/azerupi/mdBook"	"— a command line utility to create books from markdown files"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"214"	"17"	"31"	"GitHub - azerupi/mdBook: Create book from markdown files. Like Gitbook but implemented in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 214 Fork 31 azerupi/mdBook Code Issues 25 Pull requests 2 Pulse Graphs Create book from markdown files. Like Gitbook but implemented in Rust 293 commits 6 branches 13 releases 15 contributors Rust 67.4% CSS 21.0% JavaScript 5.5% HTML 3.3% Shell 2.8% Rust CSS JavaScript HTML Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags book-struct dev-0.1.0 gh-pages master nom playpen Nothing to show v0.0.12 v0.0.11 v0.0.11-rc1 v0.0.10 v0.0.9 v0.0.8 v0.0.7 v0.0.6 v0.0.5 v0.0.4 v0.0.3 v0.0.2 v0.0.1 Nothing to show New pull request Latest commit a4a277c Jun 15, 2016 azerupi committed on GitHub Merge pull request #145 from onur/light-theme-as-default … Use light theme when javascript is disabled Permalink Failed to load latest commit information. book-example Add documentation and example for description config Feb 25, 2016 ci ci: test without default features May 8, 2016 src Use light theme when javascript is disabled Jun 15, 2016 .gitignore Bumped version that was still set to 0.0.1 + added a bigger top margi… Nov 10, 2015 .travis.yml travis: use rustup instead of Travis built-in Rust support Apr 13, 2016 Cargo.toml Bump version to 0.0.12, version 0.0.11 has been published to crates.io Apr 13, 2016 LICENSE Create LICENSE Jul 29, 2015 README.md Add documentation for Serve feature Apr 2, 2016 appveyor.yml manually package artifact during before_deploy phase Mar 7, 2016 build.rs Only regenerate css when feature regenerate-css is enabled Sep 24, 2015 deploy.sh Travis CI: expand to test and deploy for Linux and Mac Mar 7, 2016 rustfmt.toml Add a rustfmt config and run rustfmt on the code base Mar 17, 2016 README.md mdBook Linux / OS X Windows mdBook is a utility to create modern online books from markdown files. This project is still evolving. For more information, check the issue tracker. What does it look like? The Documentation for mdBook has been written in markdown and is using mdBook to generate the online book-like website you can read. The documentation uses the latest version on github and showcases the available features. Installation There are multiple ways to install mdBook. Binaries Binaries are available for download here. Make sure to put the path to the binary into your PATH. From Crates.io This requires Rust and Cargo to be installed. Once you have installed Rust, type the following in the terminal: cargo install mdbook  This will download and compile mdBook for you, the only thing left to do is to add the Cargo bin directory to your PATH. From Git The version published to Crates.io will ever so slightly be behind the version hosted here on Github. If you need the latest version you can build the git version of mdBook yourself. Cargo makes this super easy! cargo install --git https://github.com/azerupi/mdBook.git  Again, make sure to add the Cargo bin directory to your PATH For Contributions If you want to contribute to mdBook you will have to clone the repository on your local machine: git clone https://github.com/azerupi/mdBook.git  cd into mdBook/ and run cargo build  the resulting binary can be found in mdBook/target/debug/ under the name mdBook or mdBook.exe Usage mdBook will primaraly be used as a command line tool, even though it exposes all its functionality as a Rust crate for integration in other projects. Here are the main commands you will want to run, for a more exhaustive explanation, check out the documentation. mdbook init The init command will create a directory with the minimal boilerplate to start with. book-test/ ├── book └── src     ├── chapter_1.md     └── SUMMARY.md  book and src are both directories. src contains the markdown files that will be used to render the ouput to the book directory. Please, take a look at the Documentation for more information and some neat tricks. mdbook build This is the command you will run to render your book, it reads the SUMMARY.md file to understand the structure of your book, takes the markdown files in the source directory as input and outputs static html pages that you can upload to a server. mdbook watch When you run this command, mdbook will watch your markdown files to rebuild the book on every change. This avoids having to come back to the terminal to type mdbook build over and over again. mdbook serve Does the same thing as mdbook watch but additionally serves the book at http://localhost:3000 (port is changeable) and reloads the browser when a change occures. As a library Aside from the command line interface, this crate can also be used as a library. This means that you could integrate it in an existing project, like a web-app for example. Since the command line interface is just a wrapper around the library functionality, when you use this crate as a library you have full access to all the functionality of the command line interface with and easy to use API and more! See the Documentation and the API docs for more information. Contributions Contributions are highly appreciated and encouraged! Don't hesitate to participate to discussions in the issues, propose new features and ask for help. If you are not very confident with Rust, I will be glad to mentor as best as I can if you decide to tackle an issue or new feature. People who are not familiar with the code can look at issues that are tagged easy. A lot of issues are also related to web development, so people that are not comfortable with Rust can also participate! 😉 You can pick any issue you want to work on. Usually it's a good idea to ask if someone is already working on it and if not to claim the issue. License All the code is released under the Mozilla Public License v2.0, for more information take a look at the LICENSE file Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/azerupi/mdBook"	"— a command line utility to create books from markdown files"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/azerupi/mdBook"	"— a command line utility to create books from markdown files"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a command line utility to create books from markdown files"	"true"
"Applications written in Rust"	"bluejekyll/trust-dns"	"https://github.com/bluejekyll/trust-dns"	"— a DNS-server"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"119"	"15"	"5"	"GitHub - bluejekyll/trust-dns: A Rust based DNS server Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 119 Fork 5 bluejekyll/trust-dns Code Issues 12 Pull requests 0 Pulse Graphs A Rust based DNS server 176 commits 5 branches 11 releases 2 contributors Rust 99.9% Shell 0.1% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags appveyor error-chain gh-pages master with_rustlex Nothing to show 0.7.0 0.6.0 0.5.3 0.5.1 0.5.0 0.4.0 0.3.1 0.3.0 0.2.1 0.2.0 0.1.0 Nothing to show New pull request Latest commit fddafb8 Jul 12, 2016 bluejekyll add osx as a build target on travis Permalink Failed to load latest commit information. scripts update scripts and locations May 19, 2016 src cleaned up Server impl to ease adding new connection handlers Jul 10, 2016 .coveralls.yml trying to get coveralls to work Jan 1, 2016 .editorconfig start of resource records Aug 7, 2015 .gitignore better ignore file Sep 7, 2015 .travis.yml add osx as a build target on travis Jul 12, 2016 CHANGELOG.md cleaned up Server impl to ease adding new connection handlers Jul 11, 2016 Cargo.lock updated to rust 1.10 Jul 8, 2016 Cargo.toml randomize ports and query_id, #23 Jun 28, 2016 Kjqmt7v.csr RRSIG validation back to the root Mar 9, 2016 LICENSE-APACHE Relicense to dual MIT/Apache-2.0 Jan 11, 2016 LICENSE-MIT Relicense to dual MIT/Apache-2.0 Jan 11, 2016 README.md converted all ftests to use ignore annotation Jun 20, 2016 build.rs mio server, has only run_once at the moment Sep 13, 2015 copyright.txt Persistence (#18) Jun 16, 2016 README.md trust-dns A Rust based DNS client and server, built to be safe and secure from the ground up. API documentation Goals Build a safe and secure DNS server and client with modern features. No panics, all code is guarded Use only safe Rust, and avoid all panics with proper Error handling Use only stable Rust Protect against DDOS attacks (to a degree) Support options for Global Load Balancing functions Make it dead simple to operate Status: Client Using the client is safe. The client is currently hardcoded to a 5 second, timeout. I'll make this configurable if people ask for that, please file a request for any features. Please send feedback! It currently does not cache responses, if this is a feature you'd like earlier rather than later, post a request. The validation of DNSSec is complete including NSEC. As of now NSEC3 is broken, and I may never plan to support it. I have some alternative ideas for private data in the zone. Unique client side implementations These are not unique to this client, but are high level functions that hide the details in DNS from the caller secure_query - DNSSec validation create - atomic create of a record, with authenticated request append - verify existence of a record and append to it compare_and_swap - atomic (depends on server) compare and swap delete_by_rdata - delete a specific record delete_rrset - delete an entire record set delete_all - delete all records sets with a given name Server The server code is complete, the daemon supports IPv4 and IPv6, UDP and TCP. There currently is no way to limit TCP and AXFR operations, so it is still not recommended to put into production as TCP can be used to DOS the service. Master file parsing is complete and supported. There is currently no forking option, and the server is not yet threaded. There is still a lot of work to do before a server can be trusted with this externally. Running it behind a firewall on a private network would be safe. Zone signing support is complete, to insert a key store a pem encoded rsa file in the same directory as the initial zone file with the .key suffix. Note: this must be only readable by the current user. If one is not present one will be created and written to the correct location. This also acts as the initial key for dynamic update SIG(0) validation. To get the public key, the DNSKEY record for the zone can be queried. This is needed to provide to other upstream servers to create the DS key. Dynamic DNS is also complete, if enabled, a journal file will be stored next to the zone file with the jrnl suffix. Note: if the key is changed or updated, it is currently the operators responsibility to remove the only public key from the zone, this allows for the DNSKEY to exist for some unspecified period of time during key rotation. Rotating the key currently is not available online and requires a restart of the server process. DNSSec status Currently the root key is hardcoded into the system. This gives validation of DNSKEY and DS records back to the root. NSEC is implemented, but not NSEC3. Because caching is not yet enabled, it has been noticed that some DNS servers appear to rate limit the connections, validating RRSIG records back to the root can require a significant number of additional queries for those records. Zones will be automatically resigned on any record updates via dynamic DNS. RFC's implemented Basic operations RFC 1035: Base DNS spec (partial, caching not yet supported) RFC 3596: IPv6 RFC 2782: Service location RFC 6891: Extension Mechanisms for DNS Update operations RFC 2136: Dynamic Update Secure DNS operations RFC 3007: Secure Dynamic Update RFC 4034: DNSSEC Resource Records RFC 4035: Protocol Modifications for DNSSEC RFC 4509: SHA-256 in DNSSEC Delegation Signer RFC 5702: SHA-2 Algorithms with RSA in DNSKEY and RRSIG for DNSSEC RFC 6840: Clarifications and Implementation Notes for DNSSEC RFC 6944: DNSKEY Algorithm Implementation Status RFC's in progress or not yet implemented Basic operations RFC 2308: Negative Caching of DNS Queries RFC 2317: Classless IN-ADDR.ARPA delegation Update operations RFC 1995: Incremental Zone Transfer RFC 1996: Notify slaves of update Update Leases: Dynamic DNS Update Leases Long-Lived Queries: Notify with bells Secure DNS operations RFC 5155: DNSSEC Hashed Authenticated Denial of Existence RFC 6975: Signaling Cryptographic Algorithm Understanding DNSCrypt: Trusted DNS queries S/MIME: Domain Names For S/MIME Usage This assumes that you have Rust stable installed. These presume that the trust-dns repos have already been synced to the local system: $ git clone https://github.com/bluejekyll/trust-dns.git $ cd trust-dns  Prerequisites openssl development libraries are necessary Mac OS X: using homebrew $ brew install openssl $ brew link --force openssl  Testing Unit tests These are good for running on local systems. They will create sockets for local tests, but will not attempt to access remote systems. $ cargo test  Functional tests These will try to use some local system tools for compatibility testing, and also make some remote requests to verify compatibility with other DNS systems. These can not currently be run on Travis for example. $ cargo test -- --ignored  Benchmarks Waiting on benchmarks to stabilize in mainline Rust. Building Production build $ cargo build --release  Running Warning: Trust-DNS is still under development, running in production is not recommended. The server is currently only single-threaded, it is non-blocking so this should allow it to work with most internal loads. Verify the version $ target/release/named --version  Get help $ target/release/named --help  FAQ Why are you building another DNS server? Because of all the security advisories out there for BIND. Using Rust semantics it should be possible to develop a high performance and safe DNS Server that is more resilient to attacks. License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bluejekyll/trust-dns"	"— a DNS-server"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/bluejekyll/trust-dns"	"— a DNS-server"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a DNS-server"	"true"
"Applications written in Rust"	"BurntSushi/xsv"	"https://github.com/BurntSushi/xsv"	"— a fast CSV command line tool (slicing, indexing, selecting, searching, sampling, etc.)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"683"	"24"	"26"	"GitHub - BurntSushi/xsv: A fast CSV toolkit written in Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 683 Fork 26 BurntSushi/xsv Code Issues 20 Pull requests 0 Pulse Graphs A fast CSV toolkit written in Rust. 332 commits 2 branches 75 releases 5 contributors Rust 97.9% Shell 1.8% Other 0.3% Rust Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master unboxed-broken Nothing to show 0.9.14 0.9.11 0.9.8 0.9.7 0.9.6 0.9.5 0.9.3 0.9.2 0.9.1 0.9.0 0.8.44 0.8.43 0.8.42 0.8.41 0.8.40 0.8.39 0.8.38 0.8.37 0.8.36 0.8.35 0.8.34 0.8.33 0.8.32 0.8.31 0.8.30 0.8.29 0.8.28 0.8.27 0.8.26 0.8.25 0.8.24 0.8.23 0.8.22 0.8.21 0.8.20 0.8.19 0.8.18 0.8.17 0.8.16 0.8.15 0.8.14 0.8.13 0.8.12 0.8.11 0.8.10 0.8.9 0.8.8 0.8.7 0.8.6 0.8.5 0.8.3 0.8.2 0.8.0 0.7.5 0.7.4 0.7.3 0.7.2 0.7.1 0.7.0 0.4.16 0.4.15 0.4.14 0.4.13 0.4.12 0.4.11 0.4.10 0.4.9 0.4.8 0.4.7 0.4.6 0.4.5 0.4.4 0.4.3 0.4.2 0.3.0 Nothing to show New pull request Latest commit 80ae150 Jul 11, 2016 BurntSushi committed on GitHub Merge pull request #39 from kper/master … fix #15 Permalink Failed to load latest commit information. scripts benchmark tweak and dep update Jan 10, 2015 src changing format Jul 11, 2016 tests fix a few warnings from rustc+clippy Jan 21, 2016 .gitignore ignore tsv files too Dec 6, 2014 .travis.yml Remove * deps and move to Rust stable for tests. Aug 30, 2015 BENCHMARKS.md Update benchmarks. Jul 4, 2015 COPYING dual licensed under MIT and UNLICENSE Apr 15, 2015 Cargo.lock 0.9.14 Apr 28, 2016 Cargo.toml 0.9.14 Apr 28, 2016 LICENSE-MIT dual licensed under MIT and UNLICENSE Apr 15, 2015 Makefile rustup on tests and other various odds and ends. Dec 25, 2014 README.md Add Windows CI. Nov 14, 2015 UNLICENSE Initial commit. Sep 1, 2014 appveyor.yml Add Windows CI. Nov 14, 2015 session.vim Initial commit. Sep 2, 2014 README.md xsv is a command line program for indexing, slicing, analyzing, splitting and joining CSV files. Commands should be simple, fast and composable: Simple tasks should be easy. Performance trade offs should be exposed in the CLI interface. Composition should not come at the expense of performance. This README contains information on how to install xsv, in addition to a quick tour of several commands. Dual-licensed under MIT or the UNLICENSE. Available commands cat - Concatenate CSV files by row or by column. count - Count the rows in a CSV file. (Instantaneous with an index.) fixlengths - Force a CSV file to have same-length records by either padding or truncating them. flatten - A flattened view of CSV records. Useful for viewing one record at a time. e.g., xsv slice -i 5 data.csv | xsv flatten. fmt - Reformat CSV data with different delimiters, record terminators or quoting rules. (Supports ASCII delimited data.) frequency - Build frequency tables of each column in CSV data. (Uses parallelism to go faster if an index is present.) headers - Show the headers of CSV data. Or show the intersection of all headers between many CSV files. index - Create an index for a CSV file. This is very quick and provides constant time indexing into the CSV file. input - Read CSV data with exotic quoting/escaping rules. join - Inner, outer and cross joins. Uses a simple hash index to make it fast. sample - Randomly draw rows from CSV data using reservoir sampling (i.e., use memory proportional to the size of the sample). search - Run a regex over CSV data. Applies the regex to each field individually and shows only matching rows. select - Select or re-order columns from CSV data. slice - Slice rows from any part of a CSV file. When an index is present, this only has to parse the rows in the slice (instead of all rows leading up to the start of the slice). sort - Sort CSV data. split - Split one CSV file into many CSV files of N chunks. stats - Show basic types and statistics of each column in the CSV file. (i.e., mean, standard deviation, median, range, etc.) table - Show aligned output of any CSV data using elastic tabstops. A whirlwind tour Let's say you're playing with some of the data from the Data Science Toolkit, which contains several CSV files. Maybe you're interested in the population counts of each city in the world. So grab the data and start examining it: $ curl -LO http://burntsushi.net/stuff/worldcitiespop.csv $ xsv headers worldcitiespop.csv 1   Country 2   City 3   AccentCity 4   Region 5   Population 6   Latitude 7   Longitude The next thing you might want to do is get an overview of the kind of data that appears in each column. The stats command will do this for you: $ xsv stats worldcitiespop.csv --everything | xsv table field       type     min            max            min_length  max_length  mean          stddev         median     mode         cardinality Country     Unicode  ad             zw             2           2                                                   cn           234 City        Unicode   bab el ahmar  Þykkvibaer     1           91                                                  san jose     2351892 AccentCity  Unicode   Bâb el Ahmar  ïn Bou Chella  1           91                                                  San Antonio  2375760 Region      Unicode  00             Z9             0           2                                        13         04           397 Population  Integer  7              31480498       0           8           47719.570634  302885.559204  10779                   28754 Latitude    Float    -54.933333     82.483333      1           12          27.188166     21.952614      32.497222  51.15        1038349 Longitude   Float    -179.983333    180            1           14          37.08886      63.22301       35.28      23.8         1167162 The xsv table command takes any CSV data and formats it into aligned columns using elastic tabstops. You'll notice that it even gets alignment right with respect to Unicode characters. So, this command takes about 12 seconds to run on my machine, but we can speed it up by creating an index and re-running the command: $ xsv index worldcitiespop.csv $ xsv stats worldcitiespop.csv --everything | xsv table ... Which cuts it down to about 8 seconds on my machine. (And creating the index takes less than 2 seconds.) Notably, the same type of ""statistics"" command in another CSV command line toolkit takes about 2 minutes to produce similar statistics on the same data set. Creating an index gives us more than just faster statistics gathering. It also makes slice operations extremely fast because only the sliced portion has to be parsed. For example, let's say you wanted to grab the last 10 records: $ xsv count worldcitiespop.csv 3173958 $ xsv slice worldcitiespop.csv -s 3173948 | xsv table Country  City               AccentCity         Region  Population  Latitude     Longitude zw       zibalonkwe         Zibalonkwe         06                  -19.8333333  27.4666667 zw       zibunkululu        Zibunkululu        06                  -19.6666667  27.6166667 zw       ziga               Ziga               06                  -19.2166667  27.4833333 zw       zikamanas village  Zikamanas Village  00                  -18.2166667  27.95 zw       zimbabwe           Zimbabwe           07                  -20.2666667  30.9166667 zw       zimre park         Zimre Park         04                  -17.8661111  31.2136111 zw       ziyakamanas        Ziyakamanas        00                  -18.2166667  27.95 zw       zizalisari         Zizalisari         04                  -17.7588889  31.0105556 zw       zuzumba            Zuzumba            06                  -20.0333333  27.9333333 zw       zvishavane         Zvishavane         07      79876       -20.3333333  30.0333333 These commands are instantaneous because they run in time and memory proportional to the size of the slice (which means they will scale to arbitrarily large CSV data). Switching gears a little bit, you might not always want to see every column in the CSV data. In this case, maybe we only care about the country, city and population. So let's take a look at 10 random rows: $ xsv select Country,AccentCity,Population worldcitiespop.csv \   | xsv sample 10 \   | xsv table Country  AccentCity       Population cn       Guankoushang za       Klipdrift ma       Ouled Hammou fr       Les Gravues la       Ban Phadèng de       Lüdenscheid      80045 qa       Umm ash Shubrum bd       Panditgoan us       Appleton ua       Lukashenkivske Whoops! It seems some cities don't have population counts. How pervasive is that? $ xsv frequency worldcitiespop.csv --limit 5 field,value,count Country,cn,238985 Country,ru,215938 Country,id,176546 Country,us,141989 Country,ir,123872 City,san jose,328 City,san antonio,320 City,santa rosa,296 City,santa cruz,282 City,san juan,255 AccentCity,San Antonio,317 AccentCity,Santa Rosa,296 AccentCity,Santa Cruz,281 AccentCity,San Juan,254 AccentCity,San Miguel,254 Region,04,159916 Region,02,142158 Region,07,126867 Region,03,122161 Region,05,118441 Population,(NULL),3125978 Population,2310,12 Population,3097,11 Population,983,11 Population,2684,11 Latitude,51.15,777 Latitude,51.083333,772 Latitude,50.933333,769 Latitude,51.116667,769 Latitude,51.133333,767 Longitude,23.8,484 Longitude,23.2,477 Longitude,23.05,476 Longitude,25.3,474 Longitude,23.1,459 (The xsv frequency command builds a frequency table for each column in the CSV data. This one only took 5 seconds.) So it seems that most cities do not have a population count associated with them at all. No matter---we can adjust our previous command so that it only shows rows with a population count: $ xsv search -s Population '[0-9]' worldcitiespop.csv \   | xsv select Country,AccentCity,Population \   | xsv sample 10 \   | xsv table Country  AccentCity       Population es       Barañáin         22264 es       Puerto Real      36946 at       Moosburg         4602 hu       Hejobaba         1949 ru       Polyarnyye Zori  15092 gr       Kandíla          1245 is       Ólafsvík         992 hu       Decs             4210 bg       Sliven           94252 gb       Leatherhead      43544 Erk. Which country is at? No clue, but the Data Science Toolkit has a CSV file called countrynames.csv. Let's grab it and do a join so we can see which countries these are: curl -LO https://gist.githubusercontent.com/anonymous/063cb470e56e64e98cf1/raw/98e2589b801f6ca3ff900b01a87fbb7452eb35c7/countrynames.csv $ xsv headers countrynames.csv 1   Abbrev 2   Country $ xsv join --no-case  Country sample.csv Abbrev countrynames.csv | xsv table Country  AccentCity       Population  Abbrev  Country es       Barañáin         22264       ES      Spain es       Puerto Real      36946       ES      Spain at       Moosburg         4602        AT      Austria hu       Hejobaba         1949        HU      Hungary ru       Polyarnyye Zori  15092       RU      Russian Federation | Russia gr       Kandíla          1245        GR      Greece is       Ólafsvík         992         IS      Iceland hu       Decs             4210        HU      Hungary bg       Sliven           94252       BG      Bulgaria gb       Leatherhead      43544       GB      Great Britain | UK | England | Scotland | Wales | Northern Ireland | United Kingdom Whoops, now we have two columns called Country and an Abbrev column that we no longer need. This is easy to fix by re-ordering columns with the xsv select command: $ xsv join --no-case  Country sample.csv Abbrev countrynames.csv \   | xsv select 'Country[1],AccentCity,Population' \   | xsv table Country                                                                              AccentCity       Population Spain                                                                                Barañáin         22264 Spain                                                                                Puerto Real      36946 Austria                                                                              Moosburg         4602 Hungary                                                                              Hejobaba         1949 Russian Federation | Russia                                                          Polyarnyye Zori  15092 Greece                                                                               Kandíla          1245 Iceland                                                                              Ólafsvík         992 Hungary                                                                              Decs             4210 Bulgaria                                                                             Sliven           94252 Great Britain | UK | England | Scotland | Wales | Northern Ireland | United Kingdom  Leatherhead      43544 Perhaps we can do this with the original CSV data? Indeed we can---because joins in xsv are fast. $ xsv join --no-case Abbrev countrynames.csv Country worldcitiespop.csv \   | xsv select '!Abbrev,Country[1]' \   > worldcitiespop_countrynames.csv $ xsv sample 10 worldcitiespop_countrynames.csv | xsv table Country                      City                   AccentCity             Region  Population  Latitude    Longitude Sri Lanka                    miriswatte             Miriswatte             36                  7.2333333   79.9 Romania                      livezile               Livezile               26      1985        44.512222   22.863333 Indonesia                    tawainalu              Tawainalu              22                  -4.0225     121.9273 Russian Federation | Russia  otar                   Otar                   45                  56.975278   48.305278 France                       le breuil-bois robert  le Breuil-Bois Robert  A8                  48.945567   1.717026 France                       lissac                 Lissac                 B1                  45.103094   1.464927 Albania                      lumalasi               Lumalasi               46                  40.6586111  20.7363889 China                        motzushih              Motzushih              11                  27.65       111.966667 Russian Federation | Russia  svakino                Svakino                69                  55.60211    34.559785 Romania                      tirgu pancesti         Tirgu Pancesti         38                  46.216667   27.1 The !Abbrev,Country[1] syntax means, ""remove the Abbrev column and remove the second occurrence of the Country column."" Since we joined with countrynames.csv first, the first Country name (fully expanded) is now included in the CSV data. This xsv join command takes about 7 seconds on my machine. The performance comes from constructing a very simple hash index of one of the CSV data files given. The join command does an inner join by default, but it also has left, right and full outer join support too. Installation Installing xsv is a bit hokey right now. Ideally, I could release binaries for Linux, Mac and Windows. Currently, I'm only able to release binaries for Linux because I don't know how to cross compile Rust programs. With that said, you can grab the latest release (Linux x86_64 binary) from GitHub: $ curl -sOL https://github.com/BurntSushi/xsv/releases/download/0.0.0/xsv-0.9.8-x86_64-unknown-linux-gnu.tar.gz $ tar xf xsv-0.9.8-x86_64-unknown-linux-gnu.tar.gz $ cd xsv-0.9.8-x86_64-unknown-linux-gnu/ $ ./xsv --version 0.9.8 Alternatively, you can compile from source by installing Cargo (Rust's package manager) and building xsv: git clone git://github.com/BurntSushi/xsv cd xsv cargo build --release Compilation will probably take 1-2 minutes depending on your machine. The binary will end up in ./target/release/xsv. Benchmarks I've compiled some very rough benchmarks of various xsv commands. Motivation Here are several valid criticisms of this project: You shouldn't be working with CSV data because CSV is a terrible format. If your data is gigabytes in size, then CSV is the wrong storage type. Various SQL databases provide all of the operations available in xsv with more sophisticated indexing support. And the performance is a zillion times better. I'm sure there are more criticisms, but the impetus for this project was a 40GB CSV file that was handed to me. I was tasked with figuring out the shape of the data inside of it and coming up with a way to integrate it into our existing system. It was then that I realized that every single CSV tool I knew about was woefully inadequate. They were just too slow or didn't provide enough flexibility. (Another project I had comprised of a few dozen CSV files. They were smaller than 40GB, but they were each supposed to represent the same kind of data. But they all had different column and unintuitive column names. Useful CSV inspection tools were critical here---and they had to be reasonably fast.) The key ingredients for helping me with my task were indexing, random sampling, searching, slicing and selecting columns. All of these things made dealing with 40GB of CSV data a bit more manageable (or dozens of CSV files). Getting handed a large CSV file once was enough to launch me on this quest. From conversations I've had with others, CSV data files this large don't seem to be a rare event. Therefore, I believe there is room for a tool that has a hope of dealing with data that large. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BurntSushi/xsv"	"— a fast CSV command line tool (slicing, indexing, selecting, searching, sampling, etc.)"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/BurntSushi/xsv"	"— a fast CSV command line tool (slicing, indexing, selecting, searching, sampling, etc.)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a fast CSV command line tool (slicing, indexing, selecting, searching, sampling, etc.)"	"true"
"Applications written in Rust"	"gchp/iota"	"https://github.com/gchp/iota"	"— a simple text editor"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"832"	"41"	"46"	"GitHub - gchp/iota: A terminal-based text editor written in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 41 Star 832 Fork 46 gchp/iota Code Issues 20 Pull requests 2 Wiki Pulse Graphs A terminal-based text editor written in Rust 619 commits 7 branches 0 releases Fetching contributors Rust 99.4% Makefile 0.6% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master new-api-migration refactor rewrite rope test-merge Nothing to show Nothing to show New pull request Latest commit fee2145 Jun 20, 2016 Byron-TW committed with gchp Replace Multirust with Rustup in README (#115) … Rustup is the successor of Multirust, the latter is now deprecated. Permalink Failed to load latest commit information. src fixed some clippy warnings Apr 7, 2016 .gitignore Ignore .cargo Jan 16, 2015 .travis.yml Added travis notifications for gitter Feb 18, 2015 Cargo.lock Updated dependencies May 19, 2016 Cargo.toml Updated dependencies Feb 17, 2016 LICENSE Update date Jan 1, 2015 Makefile look for cargo in $PATH before /usr/local/bin May 10, 2015 README.md Replace Multirust with Rustup in README (#115) Jun 20, 2016 screenshot.png Updated screenshot Jan 14, 2015 README.md Iota Iota is a terminal-based text-editor written in Rust. Here's what it looks like right now, editing itself. Motivation Iota was born out of my frustrations with existing text editors. Over the years I've tried combinations of simple text editors, IDEs and everything in between. None of them felt right to me, however. Some were too slow & bulky, others were too difficult to customise and still others were platform specific and I couldn't use them on all my machines. I started building Iota with the view of combining ideas and features from serveral different editors while designing it to work on modern hardware. Why Rust? Because its fun and why not! Goals The goals for Iota are that it would be: 100% open source highly extensible/customisable/scriptable fast & efficient - designed with modern hardware in mind cross platform - it should work anywhere developer friendly - it should just ""get out of the way"" Rust tooling integration (see note below) Iota is still in the very early stages, and is probably not ready for every day use. Right now the focus is on implementing and polishing the basic editing functionality. Windows support is coming, but it's somewhat slow right now. Help with this would be greatly appreciated! Note on Rust integration: The aim is to support code editing in all languages (and of course plain text), with a lean towards Rust and integration with Rust tools. I don't intend it to be a ""Rust IDE"" or ""Rust only"", however I think it would be cool to experiment with integration with Rust tooling. This could also be applied to other languages too. Usage Clone the project and run make or cargo build --release. NOTE: Iota needs to be built using the nightly toolchain for now, not 1.0.0. Rustup is very useful for managing multiple rust versions. Then to start the editor run ./target/release/iota /path/to/file.txt. Or simply ./target/release/iota to open an empty buffer. You can also create buffers from stdin. # open a buffer with the output of `ifconfig` ifconfig | ./target/release/iota You can move the cursor around with the arrow keys. To save, press Ctrl-s. To exit, press Ctrl-q. Iota currently supports both Vi and Emacs style keybindings for simple movement. You can enable Vi style keybindings by using the --vi flag when starting Iota. The vi-style modes are in the early stages, and not all functionality is there just yet. The following works: while in normal mode: k move up j move down l move forwards h move backwards w move one word forward b move one word backward 0 move to start of line $ move to end of line d delete u undo r redo i insert mode :q quit :w save while in insert mode: ESC normal mode Alternatively, you can use the following emacs-style keys: Ctrl-p move up Ctrl-n move down Ctrl-b move backwards Ctrl-f move forwards Ctrl-a move to start of line Ctrl-e move to end of line Ctrl-d delete forwards Ctrl-h delete backwards Ctrl-x Ctrl-c quit Ctrl-x Ctrl-s save Ctrl-z undo Ctrl-y redo Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gchp/iota"	"— a simple text editor"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/gchp/iota"	"— a simple text editor"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a simple text editor"	"true"
"Applications written in Rust"	"dlecan/generic-dns-update"	"https://github.com/dlecan/generic-dns-update"	"— a tool to update DNS zonefiles with your IP address"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"2"	"GitHub - dlecan/generic-dns-update: Cross-platform tool to update DNS such as Gandi.net with your dynamic IP address Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 2 dlecan/generic-dns-update Code Issues 4 Pull requests 0 Pulse Graphs Cross-platform tool to update DNS such as Gandi.net with your dynamic IP address 121 commits 1 branch 2 releases Fetching contributors Rust 89.5% Shell 10.5% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.1.0 1.0.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. scripts src .appveyor.yml .gitignore .travis.yml Cargo.lock Cargo.toml LICENSE README.md README.md GDU | Generic DNS Update A cross-platform tool to update DNS zonefiles (such as Gandi.net) when you have a dynamic public IP address. It's a DynDNS or equivalent alternative, available for several OS and configured by command line parameters. For developpers, it's written in Rust and can be easily extended to add new DNS providers or new ways to detect your public IP address. Features Detect your public IP address By HTTP By DNS lookup Create or update your DNS provider zonefiles to associate to public IP address with an A or AAAA DNS record. Gandi.net Other providers Run on several OS: Linux x86_64 Linux ARMv6 and more, such as Raspberry PI all models, including PI2 Windows 32/64 bits OS X Command line usage $ gdu --help  USAGE:   gdu [FLAGS] [OPTIONS]  FLAGS:     -n, --dry-run    Dry run, don't really update Gandi zone file     -f, --force      Force new zonefile creation even if IP address isn't modified     -h, --help       Prints help information     -V, --version    Prints version information     -v               Verbose mode  OPTIONS:     -a, --apikey <apikey>              Your API key provided by Gandi     -d, --domain <domain>              The domain name whose active zonefile will be updated, e.g. ""domain.com""     -i, --ip-provider <ip_provider>    IP address provider to use to get your own IP address.                                        Available values for <ip-provider>:                                         opendns       : OpenDNS                                         -             : read IP address from stdin                                         sfrlaboxfibre : French 'SFR Labox Fibre' subscribers     -r, --record-name <record_name>    Name of the A record to update or create (without domain)   Installation On Linux: Fedora, Debian, Ubuntu, Raspbian ... GDU is available as a native package (rpm/deb) for your distribution through package.io. Go to package.io project page for installation instructions. Then sudo apt-get install generic-dns-update  Linux cron configuration You can configure GDU to check hourly if your IP address as been updated with cron. Edit as root or sudo the file /etc/cron.hourly/gdu, with the following content: #!/bin/bash  gdu -a YOUR_GANDI_KEY -d YOUR_DOMAIN -r YOUR_RECORD -i opendns >> /var/log/gdu.log 2>&1  Inspiration https://github.com/brianpcurran/gandi-automatic-dns https://github.com/Chralu/gandyn https://github.com/jasontbradshaw/gandi-dyndns https://github.com/lembregtse/gandi-dyndns Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dlecan/generic-dns-update"	"— a tool to update DNS zonefiles with your IP address"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/dlecan/generic-dns-update"	"— a tool to update DNS zonefiles with your IP address"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a tool to update DNS zonefiles with your IP address"	"true"
"Applications written in Rust"	"Factotum"	"https://github.com/snowplow/factotum"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"31"	"6"	"1"	"GitHub - snowplow/factotum: A system to programmatically run data pipelines Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 31 Fork 1 snowplow/factotum Code Issues 36 Pull requests 0 Wiki Pulse Graphs A system to programmatically run data pipelines http://snowplowanalytics.com/blog/2016/04/09/introducing-factotum-data-pipeline-runner/ 7 commits 1 branch 2 releases Fetching contributors Rust 90.3% Shell 9.7% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.2.0 0.1.0 Nothing to show New pull request Latest commit dd882d0 Jun 13, 2016 ninjabear committed with alexanderdean Prepared for release Permalink Failed to load latest commit information. samples Support variable substitution in command and arguments fields using m… Jun 13, 2016 src Add a ""start from task"" command (#4) Jun 13, 2016 tests/resources Initial commit Apr 8, 2016 vagrant Initial commit Apr 8, 2016 .gitignore Initial commit Apr 8, 2016 .travis.yml Initial commit Apr 8, 2016 CHANGELOG Prepared for release Jun 13, 2016 Cargo.toml Improve output to STDERR / STDOUT (#51) Jun 13, 2016 LICENSE-2.0.txt Initial commit Apr 8, 2016 README.md Prepared for release Jun 13, 2016 Vagrantfile Initial commit Apr 8, 2016 README.md Factotum A dag running tool designed for efficiently running complex jobs with non-trivial dependency trees. The zen of Factotum A Turing-complete job is not a job, it's a program A job must be composable from other jobs A job exists independently of any job schedule User quickstart Assuming you're running 64 bit Linux: wget https://bintray.com/artifact/download/snowplow/snowplow-generic/factotum_0.2.0_linux_x86_64.zip unzip factotum_0.2.0_linux_x86_64.zip ./factotum --help Factotum requires one argument, which is a factotum factfile that describes the job to run. For example, to run the sample sleep.factotum: wget https://raw.githubusercontent.com/snowplow/factotum/release/0.2.0/samples/sleep.factotum ./factotum sleep.factotum Specifying variables in the job file can be done using --env JSON (or -e JSON). The JSON here is free-form and needs to correspond to the placeholders you've set in your job. For example, the following will print ""hello world!"": wget https://raw.githubusercontent.com/snowplow/factotum/release/0.2.0/samples/variables.factotum ./factotum variables.factotum --env '{ ""message"": ""hello world!"" }' Starting from an arbitrary task can be done using the --start TASK or -s TASK arguments, where TASK is the name of the task you'd like to start at. For example, to start at the ""echo beta"" task in this job, you can run the following: wget https://raw.githubusercontent.com/snowplow/factotum/release/0.2.0/samples/echo.factotum ./factotum echo.factotum --start ""echo beta"" To get a quick overview of the options provided, you can use the --help or -h argument: ./factotum --help For more information on this file format and how to write your own jobs, see the Factfile format section below. Factfile format Factfiles are self-describing JSON which declare a series of tasks and their dependencies. For example: {     ""schema"": ""iglu:com.snowplowanalytics.factotum/factfile/jsonschema/1-0-0"",     ""data"": {         ""name"": ""Factotum demo"",         ""tasks"": [             {                 ""name"": ""echo alpha"",                 ""executor"": ""shell"",                 ""command"": ""echo"",                 ""arguments"": [ ""alpha"" ],                 ""dependsOn"": [],                 ""onResult"": {                     ""terminateJobWithSuccess"": [],                     ""continueJob"": [ 0 ]                 }             },             {                 ""name"": ""echo beta"",                 ""executor"": ""shell"",                 ""command"": ""echo"",                 ""arguments"": [ ""beta"" ],                 ""dependsOn"": [ ""echo alpha"" ],                 ""onResult"": {                     ""terminateJobWithSuccess"": [],                     ""continueJob"": [ 0 ]                 }             },             {                 ""name"": ""echo omega"",                 ""executor"": ""shell"",                 ""command"": ""echo"",                 ""arguments"": [ ""and omega!"" ],                 ""dependsOn"": [ ""echo beta"" ],                 ""onResult"": {                     ""terminateJobWithSuccess"": [],                     ""continueJob"": [ 0 ]                 }             }         ]     } } This example defines three tasks that run shell commands - echo alpha, echo beta and echo omega. echo alpha has no dependencies - it will run immediately. echo beta depends on the completion of the echo alpha task, and so will wait for echo alpha to complete. echo omega depends on the echo beta task, and so will wait for echo beta to be complete before executing. Given the above, the tasks will be executed in the following sequence: echo alpha, echo beta and finally, echo omega. Tasks can have multiple dependencies in factotum, and tasks that are parallelizable will be run concurrently. Check out the samples for more sample factfiles or the wiki for a more complete description of the factfile format. Developer quickstart Factotum is written in Rust. Using Vagrant Clone this repository - git clone git@github.com:snowplow/factotum.git cd factotum Set up a Vagrant box and ssh into it - vagrant up && vagrant ssh This will take a few minutes cd /vagrant Compile and run a demo - cargo run -- samples/echo.factotum Using stable Rust without Vagrant Install Rust on Linux/Mac - curl -sSf https://static.rust-lang.org/rustup.sh | sh Clone this repository - git clone git@github.com:snowplow/factotum.git cd factotum Compile and run a demo - cargo run -- samples/echo.factotum Copyright and license Snowplow is copyright 2016 Snowplow Analytics Ltd. Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this software except in compliance with the License. Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/snowplow/factotum"	"—"	"true"
"Applications written in Rust"	"A system to programmatically run data pipelines"	"http://snowplowanalytics.com/blog/2016/04/09/introducing-factotum-data-pipeline-runner/"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Introducing Factotum data pipeline runner – Snowplow   Snowplow Menu Product Services Guides Support Blog Free trial 09 April 2016  •  Releases  •  Ed Lewis Introducing Factotum data pipeline runner We are pleased to announce the release of Factotum, a new open-source system for the execution of data pipeline jobs. Pipeline orchestration is a common problem faced by data teams, and one which Snowplow has discussed in the past. As part of the Snowplow Managed Service we operate numerous data pipelines for customers, with many pipelines including with customer-specific event data modeling. As we started to outgrow our existing Make-based solution, we reviewed many job orchestration tools. While each one is great at what it does, they have come up short in key areas that are important to us and our customers. So we created our own, Factotum - read on to find out more: Why Factotum? The Zen of Factotum Factotum 0.1.0 Downloading and running Factotum Writing jobs for Factotum Roadmap Contributing 1. Why Factotum? Let’s take a look at some of the existing data pipeline orchestration options available today: 1.1 Specialised tools (AWS Data Pipeline, Luigi, Chronos, Airflow, Azkaban) These are all great tools, and you could successfully run your data pipeline jobs using any one of them. However, there are some issues with these tools that lead us to think they’re not a great fit for us: Single sponsorship Many awesome people at places like Amazon, LinkedIn and Airbnb have developed jobflow tooling in-house, and have graciously released them as open source software. Unfortunately these tools tend to be shared rather late in their gestation, and are closely tied to the originating companies’ own needs. As a result, simple tasks have become very complicated. Mixing jobs and schedules At Snowplow we believe that executing a job and scheduling it are two separate things. There’s no reason that changing the scheduling of a job should change its output - or the scheduling of other jobs. One of our frustrations with some of these tools is that they link the running of a job to the scheduling of a job. To paraphrase The Wire, “you come at the king [cron], you best not miss”. These tools typically replace cron with proprietary schedulers which are hard to reason about or even unreliable. Complex DSLs and Turing-complete jobs Most of these tools use specialised configurations, DSLs and similar that require an engineer to own and operate. This creates harder to reason about your job, to edit it and to validate it. It also creates lock-in: if you write a series of orchestration jobs in Airflow in Python - how would you switch to Azkaban? What describes how your tasks are run? When you have a DSL or a Turing-complete job, the temptation to add in “job duct tape” is incredibly high. It’s easy for the separation of church and state (orchestration of data flow versus data flow itself) to become blurred too. Build tools Build tools often have features for dealing with complicated task trees built-in, just like data pipelines. This can make them powerful and flexible solutions for dealing with task orchestration as well as building software. However build tools did not evolve specifically to serve data pipelines, and they have some limitations: Inflexible outcomes A software build has a boolean outcome - pass or fail, but that might not be the case for your jobs. A good example of this is if your job is designed to move some data around - if there’s no data, should the job fail? It’s not a failure, but it’s also not really a success. Build tools are not great at handling this kind of “noop” scenario. Composability Composing a jobflow DAG from smaller jobflow DAGs is an important part of making complex jobflows manageable. Unfortunately build tools don’t make this easy. 2. The zen of Factotum After reviewing the existing solutions, we came up with a series of must-have requirements for a job execution tool, which we are calling the “Zen of Factotum”: 1. A Turing-complete job is not a job, it's a program Jobs are a graph (DAG), not a linear path We don’t want Bash or Python or Ruby “duct tape” scripts in the runner - the logic for task execution is the responsibility of the execution tool not the task itself The tasks should be expressed simply, in a human readable format. This format shouldn’t be static, and should grow with the tool 2. A job must be composable from other jobs Factotum jobs can embed other Factotum jobs, allowing some degree of polymorphism while still adhering to the first rule 3. A job exists independently of any job schedule A job is not a schedule, in fact a job has very little to do with its schedule It follows from this that job specification should be completely decoupled from its scheduler Factotum should not mandate a specific scheduler - 3. Factotum 0.1.0 Armed with the “Zen of Factotum”, we have written a tool that executes DAGs. These DAGs are expressed in self-describing JSON, so they can be versioned and remain human-composable. The JSON Schema for these Factotum “factfiles” is available from Iglu Central as com.snowplowanalytics.factotum/factfile/jsonschema/1-0-0, so any JSON Schema validator can validate/lint a Factotum DAG. Factotum is our first project written in Rust, and so while 0.1.0 only officially supports Linux/x86_64, in time Factotum should be runnable on alomst every platform. Crucially, Factotum has no install dependencies and doesn’t require a cluster, root access, a database, port 80 and so on. It executes DAGs and gives you a nice report on what it did. 4. Downloading and running Factotum Currently Factotum is only available for 64 bit Linux. Get it like so: wget https://bintray.com/artifact/download/snowplow/snowplow-generic/factotum_0.1.0_linux_x86_64.zip unzip factotum_0.1.0_linux_x86_64.zip wget https://raw.githubusercontent.com/snowplow/factotum/master/samples/echo.factotum This series of commands will download the 0.1.0 release, unzip it in your current working directory and download a sample job for you to run. You can then run Factotum in the following way: factotum ./echo.factotum 5. Writing jobs for Factotum Factfiles are self-describing JSON which declare a series of tasks and their dependencies. For example: { ""schema"": ""iglu:com.snowplowanalytics.factotum/factfile/jsonschema/1-0-0"", ""data"": { ""name"": ""Factotum demo"", ""tasks"": [ { ""name"": ""echo alpha"", ""executor"": ""shell"", ""command"": ""echo"", ""arguments"": [ ""alpha"" ], ""dependsOn"": [], ""onResult"": { ""terminateJobWithSuccess"": [], ""continueJob"": [ 0 ] } }, { ""name"": ""echo beta"", ""executor"": ""shell"", ""command"": ""echo"", ""arguments"": [ ""beta"" ], ""dependsOn"": [ ""echo alpha"" ], ""onResult"": { ""terminateJobWithSuccess"": [], ""continueJob"": [ 0 ] } }, { ""name"": ""echo omega"", ""executor"": ""shell"", ""command"": ""echo"", ""arguments"": [ ""and omega!"" ], ""dependsOn"": [ ""echo beta"" ], ""onResult"": { ""terminateJobWithSuccess"": [], ""continueJob"": [ 0 ] } } ] } } This example defines three tasks that run shell commands - echo alpha, echo beta and echo omega: echo alpha has no dependencies - it will run immediately echo beta depends on the completion of the echo alpha task, and so will wait for echo alpha to complete echo omega depends on the echo beta task, and so will wait for echo beta to be complete before executing Given the above, the tasks will be executed in the following sequence: echo alpha, echo beta and finally, echo omega. Tasks can have multiple dependencies in Factotum, and tasks that are parallelizable will be run concurrently. Check out the samples for more sample factfiles or the wiki for a more complete description of the factfile format. 6. Roadmap for Factotum We’re taking an iterative approach with Factotum - today Factotum won’t give you an entire stack for monitoring, scheduling and running data pipelines, but we plan on growing it into a set of tools that will. Factotum will continue to be our “job executor”, but a more complete ecosystem will be developed around it - ideas include an optional scheduler, audit logging, user authentication and more. If you have specific features you’d like to suggest, please add a ticket to the GitHub repo. Our plan is to base all development on the principles we’ve laid out here - seperation of concerns, plug-and-play compartmentalization and keeping jobs separate from schedules. 7. Contributing Factotum is completely open source - and has been from the start! If you’d like to get involved, or just try your hand at Rust, please check out the repository. Thoughts or questions? Come join us in our Discourse forum! Ed Lewis Ed is a data engineer at Snowplow. You can find him on GitHub. Subscribe Sign up to our mailinglist to be notified of new releases and related news. Or follow us via RSS. Recent releases Snowplow C++ Tracker 0.1.0 Snowplow 81 Kangaroo Island Emu Factotum 0.2.0 Snowplow 80 Southern Cassowary Iglu 4 Epaulettes Avalanche 0.1.0 Snowplow Python Analytics SDK 0.1.0 Snowplow Scala Tracker 0.3.0 Snowplow 79 Black Swan Snowplow Golang Tracker 0.1.0 Categories Documentation (3) Releases (170) Other (7) Analytics (32) Meetups (41) Inside the Plow (23) Integration (3) Research (11) Recruitment (7) Data Modeling (2) User Stories (1) Company About Events Contact Team Partners Jobs   Snowplow Analytics Limited The Roma Building, 32-38 Scrutton Street London EC2A 4RQ United Kingdom Phone: +44 (0)20 7655 6502 Email: contact@snowplowanalytics.com Mailinglist: Sign up for our mailinglist Twitter: @snowplowdata Copyright © 2012-2016 Snowplow Analytics Ltd. All rights reserved. Privacy policy."	"null"	"null"	"—"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/snowplow/factotum"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Applications written in Rust"	"Fractalide"	"https://github.com/fractalide/fractalide"	"— Flow-based Programming environment."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"33"	"5"	"4"	"GitHub - fractalide/fractalide: Cheapest Disseminations Ever. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 33 Fork 4 fractalide/fractalide Code Pull requests 0 Pulse Graphs Cheapest Disseminations Ever. 461 commits 1 branch 0 releases 3 contributors Rust 57.9% Nix 38.4% Python 1.9% Cap'n Proto 1.3% Other 0.5% Rust Nix Python Cap'n Proto Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 059fe50 Jul 16, 2016 sjmackenzie Problem: crypto-contracts out of scope … Solution: remove it Permalink Failed to load latest commit information. build-support Problem: waste space when copying contracts Jul 16, 2016 components Problem: winapi version bumped upstream Jul 16, 2016 contracts [APP] counter : fix with new version Jul 15, 2016 doc Problem: new dep in rustfbp broke all comps May 29, 2016 fvm Problem: winapi version bumped upstream Jul 15, 2016 rustfbp Problem: winapi version bumped upstream Jul 15, 2016 utils Problem: upstream nix changes broke the build Mar 3, 2016 .gitignore Delete core May 9, 2016 AUTHORS Problem: no changelog and authors file Jul 16, 2016 CHANGELOG Problem: no changelog and authors file Jul 15, 2016 LICENSE Initial commit Dec 6, 2015 README.md Problem: crypto-contracts out of scope Jul 16, 2016 buildCache.sh Incremental Builds for a faster buildsystem. When enabled all 'target… Jul 13, 2016 default.nix Incremental Builds for a faster buildsystem. When enabled all 'target… Jul 13, 2016 fractalide.nix Problem: README doesn't reflect new build env Feb 18, 2016 page.html [UI] ui_js_edit with d3.js Jul 15, 2016 release.nix Problem: Lazy package manager requires nix eval Feb 17, 2016 README.md Fractalide Cheapest Disseminations Ever Welcome Fractalide is a Browser for a Named Data Network. The canonical source of this project is hosted on GitLab, and is the preferred place for contributions, however if you do not wish to use GitLab, feel free to make issues, on the mirror. However pull requests will only be accepted on GitLab, to make it easy to maintain. Problem Disseminations over a point-to-point communications system (TCP/IP) are costly and technically complex, requiring expensive hardware and engineers to overcome the problem. Look at the company valuations of the Internet Giants to get a rough idea of how costly this problem is. Solution Named Data Networking builds the concept of dissemination into the protocol, making disseminations extremely cheap, yet retaining use of the ubiquitous TCP/IP network, as Named Data Networking is an optional TCP/IP overlay. Rationale for a Named Data Network Browser TCP/IP blossomed after the HTTP browser was created, so, it's anticipated, that Named Data Networking will blossom once a Named Data Networking browser is created. Design requirements Our design requirements are: blazingly fast. easy to create applications. application components must be modular and reusable, making it friendly for dissemination. encrypt data, not channels. support multiple architectures. Layers Component Oriented Language built on Rust (completed) HyperCard implementation (in progress) Name Data Networking implementation (in progress) Basic concepts Components: A component is a Rust library with a C ABI. Ports: A component has an arbitrary number of input and output ports. IIP: An Initial Information Packet is a packet of information sent at the start of a component's execution IP: Information Packets are serialized packets of information sent between components. They are Capnproto contracts Easy syntax Example: INTERFACE_IN => component_input INSTANCE_NAME(${COMPONENT_NAME}) component_output => INTERFACE_OUT =>: signifies either an interface input or output. INTERFACE_INPUT_NAME => ... . ... => INTERFACE_OUTPUT_NAME. ->: signifies a message passing activity. ... component_output_port_name -> component_input_port_name ...: indicates a serialized Information Packet is passed from the output port called component_output_port_name to the input port called component_input_port_name. COMPONENT_INSTANCE_NAME(...): signifies the instantiation of a component. Once instantiated, the programmer may refer to the instance COMPONENT_INSTANCE_NAME() without text between the parenthesis. ${...}: resolves the component name to the file system path the component is located at. component_instance_name(${COMPONENT_NAME}): is the name of the component, for example app_counter_add's source code can be found in fractalide/component/app/counter/add. After compilation, either a textual file are a binary will be generated where all ${app_counter_add} symbols resolve to /nix/store/7bpb867x7rvj0i74ahhig5r4h6gampzv-app_counter_add. 'generic_i64:(number=0)' -> ...: represents an IIP, the generic_i64 indicates a contract of type generic_i64 is being used. The number=0 means the field number is being initialized with a 0. A simple counter (we will run the counter in the setup section)    input => input in_dispatch(${ip_dispatcher}) output -> input out_dispatch(${ip_dispatcher}) output => output    model(${app_model}) output -> input view(${app_counter_view}) output -> input out_dispatch()    'generic_i64:(number=0)' -> acc model()    out_dispatch() output[add] -> input model()    out_dispatch() output[minus] -> input model()    out_dispatch() output[delta] -> input model()    in_dispatch() output[create] -> input view()    in_dispatch() output[delete] -> input view()    model() compute[add] -> input add(${app_counter_add}) output -> result model()    model() compute[minus] -> input minus(${app_counter_minus}) output -> result model()    model() compute[delta] -> input delta(${app_counter_delta}) output -> result model()  Setup Please read Don't pipe to your shell, then read the script before you execute it. After you are comfortable with it, let's agree that the below one-liner is convenient. If you insist, there is documentation to type this stuff manually. Fractalide supports whatever platform Nix runs on, with the exception of Mac OS as Rust on Nix on Darwin doesn't work. Run the command below as a user other than root (you will need sudo). Quite possibly your Linux package manager already has the nix package, please check first. $ curl https://nixos.org/nix/install | sh (ignore if on nixos, or if you installed nix via your package manager) $ source ~/.nix-profile/etc/profile.d/nix.sh (ignore if on nixos, or if you installed nix via your package manager) $ git clone https://gitlab.com/fractalide/fractalide.git $ cd fractalide $ nix-build --argstr debug true --argstr subnet app_growtest $ ./result/bin/app_growtest navigate your browser to file:///home/user/path/to/fractalide/page.html To uninstall simply rm -fr /nix (ignore if on nixos, or if you installed nix via your package manager). Happy Hacking! Incremental Builds Fractalide expands the nix-build system for incremental builds. The Incremental Builds only work when debug is enabled. They also need the path to a cache folder. The cache folder can be created from an old result by the buildCache.sh script. Per default the cache folder is saved in the /tmp folder of your system. Here is an example how you can build with the Incremental Build System: nix-build --argstr debug true --argstr cache $(./buildCache.sh) --argstr subnet test_sjm  Contributing to Fractalide The contributors are listed in fractalide/build-support/upkeepers.nix (add yourself). Please read this document BEFORE you send a patch: Fractalide uses the C4.1 (Collective Code Construction Contract) process for contributions. Please read this if you are unfamiliar with it. Fractalide grows by the slow and careful accretion of simple, minimal solutions to real problems faced by many people. Some people seem to not understand this. So in case of doubt: Each patch defines one clear and agreed problem, and one clear, minimal, plausible solution. If you come with a large, complex problem and a large, complex solution, you will provoke a negative reaction from Fractalide maintainers and users. We will usually merge patches aggressively, without a blocking review. If you send us bad patches, without taking the care to read and understand our rules, that reflects on you. Do NOT expect us to do your homework for you. As rapidly we will merge poor quality patches, we will remove them again. If you insist on arguing about this and trying to justify your changes, we will simply ignore you and your patches. If you still insist, we will ban you. Fractalide is not a sandbox where ""anything goes until the next stable release"". If you want to experiment, please work in your own projects. License The project license is specified in LICENSE. Fractalide is free software; you can redistribute it and/or modify it under the terms of the Mozilla Public License Version 2 as approved by the Free Software Foundation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fractalide/fractalide"	"— Flow-based Programming environment."	"true"
"Applications written in Rust"	"imjacobclark/Herd"	"https://github.com/imjacobclark/Herd"	"— an experimental HTTP load testing application"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"58"	"6"	"4"	"GitHub - imjacobclark/Herd: An experimental HTTP load testing application written in Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 58 Fork 4 imjacobclark/Herd Code Issues 2 Pull requests 0 Pulse Graphs An experimental HTTP load testing application written in Rust. 63 commits 1 branch 1 release Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.0.1 Nothing to show New pull request Latest commit f9fda4c May 30, 2016 imjacobclark README update Permalink Failed to load latest commit information. src client does not need to mutable Jul 13, 2015 .gitignore Initial commit May 31, 2015 Cargo.lock README update May 30, 2016 Cargo.toml add initial support for a possible config file Jul 5, 2015 LICENSE GNU GENERAL PUBLIC LICENSE v2 Licence Change Oct 16, 2015 README.md README update May 30, 2016 example-config.yaml add initial support for a possible config file Jul 5, 2015 README.md Herd Herd was a small side project in building a HTTP load testing application in Rust with a main focus on being easy to use and low on OS level dependencies such as the JVM. Herd was developed on a pre-1.0 version of Rust, it is not unit tested and unlikley to compile on later versions of Rust, I intend to revisit this project as the Rust ecosystem matures. Herd can spawn thousands of concurrent requests to HTTP endpoints by making use of unix process forking and multithreadding. Herd is hardware intensive. Per each 1000 virtual users, Herd will fork itself in order to overcome hard limits set by the OS on how many active threads a process can have at any one time. Due to this, it is recomended you run Herd from a disposable machine in the cloud, high levels of virtual users can crash machines if they run out of memory or CPU resources, do not run Herd on a production machine. Download and run As Herd is unlikley to compile out the box, it is recomended you clone this repository and fully build from source, some alterations to the source code may be needed over time as the Rust language changes, I do not intend on continuously maintaining this project. Dependencies: gcc clang libssl rust cargo Compile from source and run: $ git clone git@github.com:imjacobclark/Herd.git && cd Herd $ cargo build --release $ ./target/release/herd -t <THREADS(int)> -r <REQUESTS(int)> <HOST(str)> You can define several hosts to test with a configuration file. See example-config.yaml. $ ./target/release/herd -c config.yaml Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/imjacobclark/Herd"	"— an experimental HTTP load testing application"	"true"
"Applications written in Rust"	"jedisct1/flowgger"	"https://github.com/jedisct1/flowgger"	"— a fast, simple and lightweight data collector"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"123"	"11"	"5"	"GitHub - jedisct1/flowgger: A fast data collector in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 123 Fork 5 jedisct1/flowgger Code Issues 1 Pull requests 0 Wiki Pulse Graphs A fast data collector in Rust 331 commits 1 branch 6 releases Fetching contributors Rust 99.5% Other 0.5% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.1.10 0.1.9 0.1.8 0.1.7 0.1.5 0.1.2 Nothing to show New pull request Latest commit 422c3c3 Jul 13, 2016 jedisct1 Bind sockets within a coio scheduler … Fixes #9 Permalink Failed to load latest commit information. docker Install git Jul 9, 2016 src Bind sockets within a coio scheduler Jul 13, 2016 .gitignore Initial commit Aug 9, 2015 .travis.yml Update Travis requirements Sep 20, 2015 Cargo.lock Update deps Jul 13, 2016 Cargo.toml Flowgger 0.2.0 Jul 11, 2016 LICENSE Initial commit Aug 9, 2015 README.md Slightly improve TLS load balancing Sep 30, 2015 build.rs Do not require capnpc to be installed Sep 28, 2015 flowgger.png Rename the .toml example, add the logo Aug 11, 2015 flowgger.toml Add support for Kafka compression (gzip / snappy) Oct 5, 2015 record.capnp Change the Record capnp ID after ts type change Jul 13, 2016 README.md Flowgger is a fast, simple and lightweight data collector written in Rust. It reads log entries over a given protocol, extracts them, decodes them using a given format, re-encodes them into a different format, and asynchronously pushes the result into a remote data store. Flowgger is designed to be: Paranoid: it carefully validates input data to prevent injection of malformed/incomplete records down the chain. Safe: written in Rust, without any unsafe code. Fast: even though messages are systematically parsed and validated, Flowgger is orders of magnitude faster than Logstash and Fluentd. Standalone: it comes as a single executable file, and doesn't require a JVM. Flowgger supports common input types: stdin, UDP, TCP, TLS and Redis, as well as multiple input formats: JSON (GELF), LTSV, Cap'n Proto and RFC5424. Normalized messages can be sent to Kafka, Graylog, to downstream Flowgger servers, or to other log collectors for further processing. Jump to the Flowgger documentation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jedisct1/flowgger"	"— a fast, simple and lightweight data collector"	"true"
"Applications written in Rust"	"kbknapp/docli"	"https://github.com/kbknapp/docli-rs"	"— a command line utility for managing DigitalOcean infrastructure"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"23"	"3"	"2"	"GitHub - kbknapp/docli-rs: Command-line utility for managing DigitalOcean infrastructure Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 23 Fork 2 kbknapp/docli-rs Code Issues 1 Pull requests 1 Pulse Graphs Command-line utility for managing DigitalOcean infrastructure 126 commits 5 branches 4 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto gh-pages master update-deps updates Nothing to show v0.1.0-beta2 v0.1.0-beta v0.1.0-alpha2 v0.1.0-alpha Nothing to show New pull request Latest commit 4a191a2 Feb 21, 2016 yberreby Merge pull request #19 from kbknapp/update-deps … chore(Cargo.lock): update dependencies Permalink Failed to load latest commit information. pkg/arch_aur chore: updates PKGBUILD hashes Jun 7, 2015 src chore: fix the build Jan 22, 2016 .clog.toml chore: adds docs and build framework Jun 3, 2015 .gitignore style: rustfmt run Oct 29, 2015 .travis.yml chore: adds Rust beta and stable to allowed failures Sep 1, 2015 CHANGELOG.md chore: updates changelog Jun 7, 2015 Cargo.lock chore(Cargo.lock): update dependencies Feb 21, 2016 Cargo.toml chore: fix the build Jan 22, 2016 LICENSE-MIT chore: adds docs and build framework Jun 3, 2015 README.md docs: updates readme with nightly requirements Sep 1, 2015 cmds chore: updates cmds ref Jun 4, 2015 docli.png chore: adds a dep graph Sep 6, 2015 rustfmt.toml style: rustfmt run Oct 29, 2015 README.md docli-rs (pronounced ""dockly"") A command-line utility for managing DigitalOcean infrastructure via the DigitalOcean API v2 Disclaimer This utility is in beta - it may do anything up to, and including, eating your laundry. You can check the request being sent to DigitalOcean without actually sending by using the docli --nosend --verbose <command> (which can be shortened to docli -nv <command>) Installation Linux / OSX If you are on Arch linux, you can install from the AUR via the docli-bin or docli-git (-git requires a nightly Rust compiler and git). Linux or OS X (x86_64) Binaries Download the tar.gz, untar, and copy to somewhere in your $PATH (if on OS X, replace linux with osx) $ wget http://wod.twentyfives.net/bin/docli/docli-0.1.0-beta2-x86_64-linux.tar.gz $ tar xvf docli-0.1.0-beta2-x86_64-linux.tar.gz $ cp docli-0.1.0-beta2-x86_64-linux/bin/docli ~/.bin  In the example ~/.bin is in $PATH Windows (None yet...) I have not tried compiling on Windows [yet]. Feel free to clone the repository and attempt to compile with a nightly Rust compiler. Compile from source If you'd rather compile from source (takes about 2 minutes on a decent machine) use the following: Note: Currently, you must use Rust nightly in order to compile. $ git clone https://github.com/kbknapp/docli-rs $ cd docli-rs $ cargo build --release $ cp target/release/docli ~/.bin  Usage You can run docli from the command line and along with various subcommands to perform actions on your DigitalOcean infrastructure. In order to see what commands are available, run docli --help or docli <command> --help docli v0.1.0 Kevin K. <kbknapp@gmail.com> A utility for managing DigitalOcean infrastructure  USAGE:     docli [FLAGS] [OPTIONS] [SUBCOMMANDS]  FLAGS:     -h, --help       Prints help information     -n, --nosend     Does NOT send request over the network (useful with --verbose)         --version    Prints version information     -v, --verbose    Displays the request being sent to server and JSON reply  OPTIONS:     -t, --token <token>        Digital Ocean Auth Token (Defaults to contents of DO_AUTH_TOKEN env var if omitted)  SUBCOMMANDS:     account     Show account information and actions     dns         Manage DNS records on a specific domain     domains     Manage domains     droplet     Manage a specific droplet     droplets    Manage droplets     help        Prints this message     image       Manage images     list        Get information from DigitalOcean about various sections     ssh-keys    Manage SSH keys  DigitalOcean Personal OAuth Token In order to use the DigitalOcean v2 API (which is what docli uses under the covers, you must generate a Personal Authentication Token. This token can then either be passed to docli directly with --token <token> or you can set a DO_AUTH_TOKEN environmental variable before using docli. To do so using Linux or OSX, open a terminal and run the following (test with docli account which lists your account information): $ export DO_AUTH_TOKEN=<PASTE YOUR TOKEN HERE> $ docli account  Personal Auth Token's can be Read/Write, or Read Only/Write Only. In order to process destructive API calls (i.e. ones that modify existing information) you must have a token with Write priviledges. To generate a new Personal Auth Token see the following DigitalOcean details Contributing Contributions are always welcome! And there is a multitude of ways in which you can help depending on what you like to do, or are good at. Anything from documentation, code cleanup, issue completion, new features, you name it, even filing issues is contributing and greatly appreciated! NOTE: One of the best ways to help right now is to simply use the utility and report issues! Fork docli Clone your fork (git clone https://github.com/$YOUR_USERNAME/docli-rs && cd docli-rs) Create new branch (git checkout -b new-branch) Make your changes, and commit (git commit -am ""your message"") I use a conventional changelog format so I can update my changelog using clog Format your commit subject line using the following format: TYPE(COMPONENT): MESSAGE where TYPE is one of the following: feat - A new feature imp - An improvement to an existing feature perf - A performance improvement docs - Changes to documentation only tests - Changes to the testing framework or tests only fix - A bug fix refactor - Code functionality doesn't change, but underlying structure may style - Stylistic changes only, no functionality changes wip - A work in progress commit (Should typically be git rebase'ed away) chore - Catch all or things that have to do with the build system, etc The COMPONENT is optional, and may be a single file, directory, or logical component. Can be omitted if commit applies globally git rebase into concise commits and remove --fixups (git rebase -i HEAD~NUM where NUM is number of commits back) Push your changes back to your fork (git push origin $your-branch) Create a pull request! (You can also create the pull request first, and we'll merge when ready. This a good way to discuss proposed changes.) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kbknapp/docli-rs"	"— a command line utility for managing DigitalOcean infrastructure"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/kbknapp/docli-rs"	"— a command line utility for managing DigitalOcean infrastructure"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a command line utility for managing DigitalOcean infrastructure"	"true"
"Applications written in Rust"	"MaidSafe"	"http://maidsafe.net/"	"— a decentralized platform."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"MaidSafe - The New Decentralized Internet Features Safecoin Company More Menu Features Safecoin Company Blog Roadmap Contact Welcome to  internet! Welcome to a secure internet! Watch the video A secure home for all your data The SAFE Network is soon to provide access to a world of exciting apps where the security of your data is put above all else. In time, downloading the free SAFE software will provide access to: messaging, apps, email, social networks, data storage, video conferencing, and much more. Read More Crowd sourced internet Rather than using data centres and servers common within today’s internet, which are prone to data theft and surveillance, the SAFE Network uses advanced P2P technology, that joins together the spare computing capacity of all SAFE users, creating a global network. You can think of SAFE as a crowd sourced internet. It is on this network that everyone’s data and applications reside. All you need to join this network is to download the free SAFE software, create your account and tell the network how much space you are going to provide. It’s that simple! The service that pays you! By providing your unused computing resources to SAFE you will be paid in a network token, called safecoin. To start earning, download the free SAFE software, create your account and tell the network how much space you are going to provide. Overtime, your computer (or vault) will start to ﬁll up with network data and as a consequence, your virtual wallet will automatically start receive safecoin. You can use these to pay for other services on the network, or convert to another currency via an SAFE currency exchange. Find out how Decentralised Applications The ecosystem around the SAFE Network is already starting to blossom and a number of exciting apps* are already being built by third party developers using the SAFE APIs. Applications that provide access via the Launcher API ensure that you can access all apps with the same PIN, username and password used when you created your SAFE account. This means that you stay in control of your details at all times. *The projects listed within the link above are built and maintained by independent parties. Features Self-Authentication Self-Encryption Distributed Network Data Availability Deduplication Safecoin Global Distribution Farming Resource Economy Proof of Resource New Marketplace Company Who we are What drives us Join our team Roadmap Brand Assets Contact Disclaimer Privacy Credits"	"null"	"null"	"— a decentralized platform."	"true"
"Applications written in Rust"	"qmx/limonite"	"https://github.com/qmx/limonite"	"— static blog/website generator"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"2"	"1"	"GitHub - qmx/limonite Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 9 Fork 1 qmx/limonite Code Issues 0 Pull requests 1 Pulse Graphs No description or website provided. 134 commits 1 branch 13 releases Fetching contributors Rust 92.7% HTML 6.9% CSS 0.4% Rust HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show limonite-0.2.2-1 limonite-0.2.1-1 limonite-0.2.0-1 limonite-0.1.0-4 limonite-0.1.0-3 limonite-0.1.0-2 limonite-0.1.0-1 limonite-0.0.5-1 limonite-0.0.4-2 limonite-0.0.4-1 limonite-0.0.3-1 limonite-0.0.2-1 limonite-0.0.1-1 Nothing to show New pull request Latest commit 80c29b8 Feb 8, 2016 qmx Automatic commit of package [limonite] minor release [0.2.2-1]. Permalink Failed to load latest commit information. .tito Automatic commit of package [limonite] minor release [0.2.2-1]. Feb 8, 2016 fixtures handlebars rendering complete Jan 21, 2016 src add friendly date Feb 8, 2016 tests add missing fixtures Nov 19, 2015 .gitignore initial Oct 1, 2015 .travis.yml another travis config goof Jan 14, 2016 Cargo.lock bump up version Feb 8, 2016 Cargo.toml bump up version Feb 8, 2016 README.markdown updating readme Jan 21, 2016 build.rs generate serialization for Site Jan 20, 2016 limonite.spec Automatic commit of package [limonite] minor release [0.2.2-1]. Feb 8, 2016 README.markdown limonite yet another highly-opinionated blog and static site generator limonite is a highly-opinionated blog generator: posts are markdown, with front-matter templates are handlebars-based Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/qmx/limonite"	"— static blog/website generator"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/qmx/limonite"	"— static blog/website generator"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— static blog/website generator"	"true"
"Applications written in Rust"	"Servo"	"https://github.com/servo/servo"	"— a prototype web browser engine"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7542"	"408"	"1212"	"GitHub - servo/servo: The Servo Browser Engine Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 408 Star 7,542 Fork 1,212 servo/servo Code Issues 1,542 Pull requests 84 Wiki Pulse Graphs The Servo Browser Engine https://servo.org/ 19,048 commits 27 branches 1 release 539 contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Manishearth-patch-1 auto bindings-crate compositing-traits enyo-demo euclidup fnv font html5ever-bytes htmlcollection-experiment iframe-processing incremental inline jdm-patch-1 lazy-static-host-table master names orbit remote selectors-generic-atom smup string-cache terminate test-issues test-ws try workqueue Nothing to show homu-tmp Nothing to show New pull request Latest commit 90f1e53 Jul 15, 2016 bors-servo committed on GitHub Auto merge of #12464 - aneeshusa:cleanup-start-sending-sniffed, r=Waf… … …flespeanut  Remove fn start_sending_sniffed  <!-- Please describe your changes on the following line: -->  This function was not used, but more importantly encodes the bad practice of a raw `.unwrap()` and therefore should not be used.  --- <!-- Thank you for contributing to Servo! Please replace each `[ ]` by `[X]` when the step is complete, and replace `__` with appropriate data: --> - [x] `./mach build -d` does not report any errors - [x] `./mach test-tidy` does not report any errors - [ ] These changes reference #12462 (github issue number if applicable).  <!-- Either: --> - [ ] There are tests for these changes OR - [x] These changes do not require tests because they are a cleanup  <!-- Pull requests that do not address these steps are welcome, but they will require additional verification as part of the review process. -->  <!-- Reviewable:start --> --- This change is [<img src=""https://reviewable.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.io/reviews/servo/servo/12464) <!-- Reviewable:end --> Permalink Failed to load latest commit information. components Auto merge of #12464 - aneeshusa:cleanup-start-sending-sniffed, r=Waf… Jul 15, 2016 docs Auto merge of #12266 - tshepang:patch-1, r=nox Jul 8, 2016 etc Auto merge of #12200 - aneeshusa:add-linux-dev-yaml, r=larsbergstrom Jul 3, 2016 ports Auto merge of #11841 - asajeffrey:constellation-logging, r=Manishearth Jul 15, 2016 python Auto merge of #12447 - asajeffrey:license-mpl-2.0, r=frewsxcv Jul 14, 2016 resources resource: Remove the duplicated config from pref.json Jul 5, 2016 support All our Cargo.toml files should contain an MPL-2.0 license field. Jul 14, 2016 tests msg: Rename `ReferrerPolicy::NoRefWhenDowngrade` `NoReferrerWhenDowng… Jul 15, 2016 .gitattributes Appease Github's Linguist Jun 11, 2015 .gitignore Move ports/geckolib/target to target/geckolib Jul 8, 2016 .travis.yml Build geckolib on travis. Jul 11, 2016 CONTRIBUTING.md Start collecting documentation, and add an in-tree glossary. Encourag… Apr 18, 2016 Info.plist Don't warn about reopening a crashed Servo window on Mac Jul 6, 2016 LICENSE Add license Apr 3, 2013 PULL_REQUEST_TEMPLATE.md Try to mitigate the risk of unmodified PR descriptions May 25, 2016 README.md the --android flag is now needed for the package command Jul 4, 2016 appveyor.yml Remove auto and try branch from appveyor.yml May 7, 2016 cargo-nightly-build Update Cargo to 2016-05-12 May 13, 2016 mach Redirect stderr to /dev/null May 25, 2016 rust-nightly-date Update Rust to 1.11.0-nightly (ad7fe6521 2016-06-23) Jun 27, 2016 rust-stable-version Add mach build-stable to build with stable rustc Jun 30, 2016 servobuild.example Remove the gonk port May 27, 2016 README.md The Servo Parallel Browser Engine Project Servo is a prototype web browser engine written in the Rust language. It is currently developed on 64bit OS X, 64bit Linux, and Android. Servo welcomes contribution from everyone. See CONTRIBUTING.md and HACKING_QUICKSTART.md for help getting started. Visit the Servo Project page for news and guides. Prerequisites On OS X (homebrew): brew install automake pkg-config python cmake pip install virtualenv On OS X (MacPorts): sudo port install python27 py27-virtualenv cmake On OS X 10.11 (El Capitan), you also have to install openssl: brew install openssl brew link --force openssl On Debian-based Linuxes: sudo apt-get install git curl freeglut3-dev autoconf \     libfreetype6-dev libgl1-mesa-dri libglib2.0-dev xorg-dev \     gperf g++ build-essential cmake virtualenv python-pip \     libssl-dev libbz2-dev libosmesa6-dev libxmu6 libxmu-dev \     libglu1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev If you are on Ubuntu 14.04 and encountered errors on installing these dependencies involving libcheese, see #6158 for a workaround. If virtualenv does not exist, try python-virtualenv. On Fedora: sudo dnf install curl freeglut-devel libtool gcc-c++ libXi-devel \     freetype-devel mesa-libGL-devel mesa-libEGL-devel glib2-devel libX11-devel libXrandr-devel gperf \     fontconfig-devel cabextract ttmkfdir python python-virtualenv python-pip expat-devel \     rpm-build openssl-devel cmake bzip2-devel libXcursor-devel libXmu-devel mesa-libOSMesa-devel \     dbus-devel On Arch Linux: sudo pacman -S --needed base-devel git python2 python2-virtualenv python2-pip mesa cmake bzip2 libxmu glu pkg-config On Gentoo Linux: sudo emerge net-misc/curl media-libs/freeglut \     media-libs/freetype media-libs/mesa dev-util/gperf \     dev-python/virtualenv dev-python/pip dev-libs/openssl \     x11-libs/libXmu media-libs/glu x11-base/xorg-server On Windows: Download Python for Windows here. This is required for the SpiderMonkey build on Windows. Install MSYS2 from here. After you have done so, open an MSYS shell window and update the core libraries and install new packages: pacman -Su pacman -Sy git mingw-w64-x86_64-toolchain mingw-w64-x86_64-freetype \     mingw-w64-x86_64-icu mingw-w64-x86_64-nspr mingw-w64-x86_64-ca-certificates \     mingw-w64-x86_64-expat mingw-w64-x86_64-cmake tar diffutils patch \     patchutils make python2-setuptools easy_install-2.7 pip virtualenv Open a new MSYS shell window as Administrator and remove the Python binaries (they are not compatible with our mach driver script yet, unfortunately): cd /mingw64/bin mv python2.exe python2-mingw64.exe mv python2.7.exe python2.7-mingw64.exe Now, open a MINGW64 (not MSYS!) shell window, and you should be able to build servo as usual! Cross-compilation for Android: Pre-installed Android tools are needed. See wiki for details The Rust compiler Servo's build system automatically downloads a Rust compiler to build itself. This is normally a specific revision of Rust upstream, but sometimes has a backported patch or two. If you'd like to know which nightly build of Rust we use, see rust-nightly-date. Building Servo is built with Cargo, the Rust package manager. We also use Mozilla's Mach tools to orchestrate the build and other tasks. Normal build To build Servo in development mode. This is useful for development, but the resulting binary is very slow. git clone https://github.com/servo/servo cd servo ./mach build --dev ./mach run tests/html/about-mozilla.html For benchmarking, performance testing, or real-world use, add the --release flag to create an optimized build: ./mach build --release ./mach run --release tests/html/about-mozilla.html Building for Android target git clone https://github.com/servo/servo cd servo  export ANDROID_SDK=""/path/to/sdk"" export ANDROID_NDK=""/path/to/ndk"" export ANDROID_TOOLCHAIN=""/path/to/toolchain"" export PATH=""$PATH:/path/to/toolchain/bin""  ./mach build --release --android ./mach package --release --android Rather than setting the ANDROID_* environment variables every time, you can also create a .servobuild file and then edit it to contain the correct paths to the Android SDK/NDK tools: cp servobuild.example .servobuild # edit .servobuild  Running Use ./mach run [url] to run Servo. Also, don't miss the info on the browserhtml page on how to run the Browser.html full tech demo (it provides a more browser-like experience than just browsing a single URL with servo). Commandline Arguments -p INTERVAL turns on the profiler and dumps info to the console every INTERVAL seconds -s SIZE sets the tile size for painting; defaults to 512 -z disables all graphical output; useful for running JS / layout tests Keyboard Shortcuts Ctrl-- zooms out Ctrl-= zooms in Alt+left arrow goes backwards in the history Alt+right arrow goes forwards in the history Esc exits servo Developing There are lots of mach commands you can use. You can list them with ./mach --help. The generated documentation can be found on http://doc.servo.org/servo/index.html Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/servo/servo"	"— a prototype web browser engine"	"true"
"Applications written in Rust"	"tailhook/vagga"	"https://github.com/tailhook/vagga"	"— a containerization tool without daemons"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"875"	"51"	"47"	"GitHub - tailhook/vagga: Vagga is a containerization tool without daemons Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 51 Star 875 Fork 47 tailhook/vagga Code Issues 45 Pull requests 1 Pulse Graphs Vagga is a containerization tool without daemons http://vagga.readthedocs.org 1,212 commits 3 branches 13 releases Fetching contributors Rust 89.0% Shell 10.3% Other 0.7% Rust Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master paralleltravis vagga1 Nothing to show v0.6.1 v0.6.0 v0.5.0 v0.4.1 v0.4.0 v0.3.0 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 4ebd289 Jul 15, 2016 tailhook Also track `last_use` when building container (fixes #303) Permalink Failed to load latest commit information. docs Add a inotify failure message from `nodemon` Jul 12, 2016 examples Add elasticsearch version Jun 15, 2016 src Also track `last_use` when building container (fixes #303) Jul 15, 2016 tests Remove downloaded image file after unpacking Jul 14, 2016 .gitignore Add `_push_image` command and `image-cache-url` option Mar 25, 2016 .gitmodules Remove git submodules (use cargo) Jun 30, 2015 .travis.yml Add mocked implementations of linux stuff to compile on osx Jul 11, 2016 Cargo.lock Add mocked implementations of linux stuff to compile on osx Jul 11, 2016 Cargo.toml Add mocked implementations of linux stuff to compile on osx Jul 11, 2016 EXIT_CODES.rst Added missing exit codes Jan 25, 2016 LICENSE Add Release Notes and few other missing documentation bits for 0.2 Feb 11, 2015 Makefile Add mocked implementations of linux stuff to compile on osx Jul 11, 2016 NETWORK.rst Add some network internals documentation Jan 8, 2015 README.rst Release of v0.3.0 Aug 30, 2015 RELEASE_NOTES.rst Version bumped to v0.6.0 Jun 11, 2016 description-pak Add debian package description Oct 26, 2015 fetch_binaries.sh Add mocked implementations of linux stuff to compile on osx Jul 11, 2016 install.sh Added basic completion Feb 5, 2016 vagga-completion.sh Ignore vagga's stderr in bash completion Mar 31, 2016 vagga.yaml Fixed documentation building (#292) Jul 8, 2016 README.rst Vagga Vagga is a fully-userspace container engine inspired by Vagrant and Docker, specialized for development environments. Note version 0.2 changed format of vagga.yaml see Release Notes and Upgrading for more info. Major Features Are: Running programs in linux containers (not a full virtualization like Vagrant) Fully userspace containers, no need for elevated privileges like for Docker Runs containerized process as a child of current shell, no attach/detach hell Images are automatically rebuilt and versioned Vagga has tools to manage trees of processes (so you run your redis-python-nginx server with one command) Compatibility with Vagrant-LXC and Docker More deep feature description in docs Disclaimer: This is beta quality software. But since it's only used for development environments it's safe to use for most projects. Some incompatible changes in configuration file might be introduced until release of vagga 1.0, but it will never affect your production servers. Documentation Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tailhook/vagga"	"— a containerization tool without daemons"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/tailhook/vagga"	"— a containerization tool without daemons"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a containerization tool without daemons"	"true"
"Applications written in Rust"	"cristianoliveira/funzzy"	"https://github.com/cristianoliveira/funzzy"	"— a configurable watcher inspired in"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"24"	"3"	"2"	"GitHub - cristianoliveira/funzzy: Yet another fancy watcher. (Rust) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 24 Fork 2 cristianoliveira/funzzy Code Issues 6 Pull requests 0 Pulse Graphs Yet another fancy watcher. (Rust) 103 commits 2 branches 8 releases 3 contributors Rust 89.1% Shell 10.3% Makefile 0.6% Rust Shell Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master Nothing to show v0.3.0 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 4bd6969 May 29, 2016 cristianoliveira tests: fix exit of validation Permalink Failed to load latest commit information. ci fix: travis deploy Mar 27, 2016 src tests: fix exit of validation May 29, 2016 tests/cli refact: removing responsability of cli module May 29, 2016 .gitignore chore: ignoring rustfmt backup files Apr 11, 2016 .travis.yml chore: ci generate builds Mar 27, 2016 .watch.yaml refact: fixing some clippy errors May 14, 2016 Cargo.lock version: 0.3.0 May 8, 2016 Cargo.toml version: 0.3.0 May 8, 2016 LICENSE Initial commit Mar 21, 2016 Makefile tests: ci with travis Mar 27, 2016 README.md chore: grammar fixes May 27, 2016 Vagrantfile chore: verion bump Mar 27, 2016 linux-install.sh version: 0.3.0 May 8, 2016 setup_vagrant.sh feat: playground with vagrant Mar 27, 2016 README.md funzzy Yet another fancy watcher. (Inspired by antr / entr) Configure execution of different commands using semantic yaml. # .watch.yaml # list here all the events and the commands that it should execute # TIP: include '.watch.yaml' in your .git/info/exclude to ignore it.  - name: run my tests   run: make test   when:     change: 'tests/**'     ignore: 'tests/integration/**'  - name: fast compile sass   run: compass compile src/static/some.scss   when:     change: ['src/static/**', 'src/assets/*']  - name: Starwars   run: telnet towel.blinkenlights.nl   when:     change: '.watch.yaml' Motivation Create a lightweight watcher to run my tests everytime something in my project change. So I won't forget to keep my tests passing. Funzzy was made with Rust that is why it consumes almost nothing to run. Installing OSX: brew tap cristianoliveira/tap brew update brew install funzzy Linux: curl -s https://raw.githubusercontent.com/cristianoliveira/funzzy/master/linux-install.sh | sh With Cargo cargo install funzzy *Make sure you have $HOME/.cargo/bin in your PATH export $PATH:$HOME/.cargo/bin From source Make sure you have installed the follow dependecies: Rust Clone this repo and do: make install Running Initializing with boilerplate: funzzy init Change the yaml as you want. Then run: funzzy watch or with some arbitrary command funzzy watch -c 'cargo build' Playground It does not work between vm and host machine If you wanna try without installing it in your machine, try the playground vagrant. cd funzzy vagrant up  # Testing vagrant ssh -c ""cd /vagrant && funzzy watch""  # Another shell vagrant ssh -c ""touch /vagrant/.watch.yaml"" It will take some time to be prepared. Tests Running tests: cargo test or simple make tests Code Style We use clippy for lintting the funzzy's source code. Make sure you had validate it before commit. Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request Pull Requests are really welcome! Others support also. Pull Request should have unit tests License This project was made under MIT License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cristianoliveira/funzzy"	"— a configurable watcher inspired in"	"true"
"Applications written in Rust"	"entr"	"http://entrproject.org/"	"— a configurable watcher inspired in"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"entr(1) entr(1) Run arbitrary commands when files change bitbucket/overview | download 3.6 Examples Rebuild project if sources change $ ls -d * | entr make Rebuild project and run tests if the build was successful $ ls -d * | entr sh -c 'make && make test' Theory and Operation The Event Notify Test Runner is a general purpose Unix utility intended to make rapid feedback and automated testing natural and completely ordinary. Some graphical applications such as the PostScript/PDF viewer gv ship with a -watch option with reloads the document whenever the source file is modified. This is useful, but it is even better for applications to provide a programmatic means of refreshing the display. The browser add-on LiveReload has attempted to solve this problem for web developers by injecting JavaScript that listens on a web socket. The should not be this complex, indeed this is all that is required: $ ls *.css *.html | entr reload-browser Firefox reload-browser is a simple script which uses xdotool or AppleScript to send a refresh keystroke to the active tab in your browser. Some lesser known browsers, such as Midori can be controlled from the command line using arguments -e Reload. It is not uncommon for modern web frameworks to continuously hunt for file system changes and auto-reloads when run in single threaded or standalone mode. This functionality is superfluous if the application can respond to signals. The following will instruct mupdf to reload a PDF whenever it is updated: $ ls *.pdf | entr pkill -HUP mupdf entr is a zero-configuration tool with no external build or runtime dependencies. The interface to entr is not only minimal, it aims to be simple enough to create a new category of ad hoc automation. These micro-tests reduce keystrokes, but more importantly they emphasize the utility of automated checks. Tightening the edit-test feedback loop requires a tool that is tuned for one task. inotifywait is lightweight, but it only works on Linux, and does not provide a direct means of saying \“run this command if any of these files change”. In practice scripting with inotify-tools is difficult because there are a number of significant conditions to contend with: Many applications attempt to make the file save operation atomic by writing a new file and then removing the original. entr deals with this by closing the old file descriptor and reopening it using the same pathname. Since there is a small delay while the new file is renamed, we must wait for the new file to appear before running the supplied command and attempting to watch the new file. File change events that occur while the utility is running need to be processed so as to ensure that files that have been replaced are monitored, but these events should not trigger an execution when the child process ends. entr allows you to safely edit files while tests are running without a repeated invocation of the utility. Typically version control software will often update a series of files in rapid succession. Ideally the build is launched when then entire operation is complete. To cope with this behavior entr repeatedly probes for subsequent events, and only executes the utility when the kernel returns with no results after a short timeout. The events reported when saving files on an NFS mount are different than those of a local file system. On Linux an inotify may report IN_MOVE_SELF|IN_DELETE_SELF instead of IN_MODIFY|IN_CLOSE_WRITE and on BSD kqueue may report NOTE_RENAME|NOTE_DELETE instead of NOTE_WRITE|NOTE_EXTEND. A race condition exists when executing a script that is also under watch since a script cannot be executed while another process has it open for write. Rather than allowing the enigmatic error “Text file busy”, entr retries the execution. On Linux editors that use the Gnome's GIO may write to a file and then subsequently delete it. To deal with this entr consolidates events over 50ms before responding. In some cases an editor will rename a file without removing it. This occurs the first time a file is saved in Vim if the backup option is set. To deal with this events must be explicitly unregistered to prevent the kernel from tracking changes to backup files. Reducing Friction entr adheres to the principle of separation of concerns, yet the reload (-r) option was added to solve a common use case that would otherwise require some careful scripting: $ ls *.rb | entr -r ruby main.rb This will, immediately start the server block until any of the listed files change terminate the background process wait for the server to exit before restarting The 3.1 release further tuned this behavior by setting a process group to ensure that all child processes receive a signal. This enables you to use a startup script without having to write custom signal in handlers. Other special-purpose flags were added because they reduce highly repetitive actions or reduce friction. One of the most repetitive actions was to clear the screen before running tests; hence the -c flag: $ ag -l | entr -c ./test.sh The special /_ argument (somewhat analogous to $_ in Perl) provides a quick way to refer to the first file that changed. When a single file is listed this is a handy way to avoid typing a pathname twice: $ echo /tmp/my.sql | entr psql -f /_ Watching for New Files In the 2.9 release, a directory watch option (-d) was added to react to events when a new file is added to a directory. It was determined early on that entr would not implement it's own file search syntax, relying on standard Unix tools instead. The implication of this is that if a new file appears it must exit and allow an external shell loop to rescan the file system. One way to implement this feature would be to simply require the users to list directories: $ while true; do > echo src/*.py src | entr ./setup.py > done This is “correct” from a POSIX point of view, but in addition to forcing the user to spend time thinking about how how options in ls interact with shell globing, using find to accomplish a similar task suddenly becomes difficult. In this instance entr leans heavily on the principle of least surprise. The promise to the user is simply to “run the utility if a new file is added to the project”. The previous example works, and so does this: $ while true; do > echo src/*.py | entr -d ./setup.py > done In directory watch mode the parent directory of each file is implicitly added to the watch list. This behavior is very unusual for a command line tool, but in practice it behaves as most users would expect. Finally, the sharp edges of shell scripting were removed by providing a well-behaved example in the man page. With the help of the treedelta utility it is is also easy to see what files were added or remove from a directory. Feedback Panes I have written as if incorporating automated responses can be accomplished without special demands on the Unix development environment, but in practice the ability to split a window into multiple panes is the key to making this workflow efficient. A window manager such as i3 or the terminal multiplexer tmux enables you to quickly spit the screen so that you can see the results as you work. tmux steps automation up to the next level by enabling you to control applications in other panes via keystrokes. This combination can be wired up in any number of ways to create some very interesting auto-responders. Consider the following vimdiff -R is started in the first pane to compare two files containing similar HTTP headers entr is started in the second pane, and watches for updates to these two files When site1.txt or site2.txt is updated tmux send-keys -t .0 is invoked to send keystrokes to the pane running Vim "":windo e"" is the Vim command for “read the file again in each window” C-m commits this action by sending the Return key With this mechanism in place we can fetch and compare headers using any tool capable of printing output or writing to a file—no plugins or specialized functionality required. News & Discussion January 09, 2016 What is the correct way to auto-preview man pages? » dev @ lists.suckless.org June 24, 2014 Monitor DHCP leases on OpenBSD » misc @ lists.openbsd.org Last updated on July 14, 2016 Send questions or comments to ericshane@eradman.com"	"null"	"null"	"— a configurable watcher inspired in"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/cristianoliveira/funzzy"	"— a configurable watcher inspired in"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a configurable watcher inspired in"	"true"
"Applications written in Rust"	"xi-editor"	"https://github.com/google/xi-editor"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4960"	"239"	"149"	"GitHub - google/xi-editor: A modern editor with a backend written in Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 239 Star 4,960 Fork 149 google/xi-editor Code Issues 28 Pull requests 4 Pulse Graphs A modern editor with a backend written in Rust. 164 commits 2 branches 0 releases 22 contributors Rust 85.1% Swift 10.1% Python 3.5% Other 1.3% Rust Swift Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master plugin-rfc Nothing to show Nothing to show New pull request Latest commit 23c1481 Jul 12, 2016 raphlinus Refactor to make rpc more generic … The refactoring includes threading the RPC peer state rather than it being global, and using a TabCtx struct to thread the state into the editor. Permalink Failed to load latest commit information. XiEditor.xcodeproj Use consistent naming scheme xi-* for xi-core May 7, 2016 XiEditor Begin support for running plugins Jul 12, 2016 XiEditorTests Rename project to xi-editor; add license info Apr 11, 2016 XiEditorUITests Rename project to xi-editor; add license info Apr 12, 2016 doc Remove trailing whitespace to keep code and docs as clean as possible Jun 10, 2016 icons Add App Icon Apr 27, 2016 python Begin support for running plugins Jul 13, 2016 rust Refactor to make rpc more generic Jul 12, 2016 .gitignore Add string-based rope Apr 16, 2016 CONTRIBUTING.md Rename project to xi-editor; add license info Apr 12, 2016 LICENSE Rename project to xi-editor; add license info Apr 12, 2016 README.md typo May 3, 2016 xi-core.sh Use consistent naming scheme xi-* for xi-core May 7, 2016 README.md Xi Editor A modern editor with a backend written in Rust. The xi editor project is an attempt to build a high quality text editor, using modern software engineering techniques. It is initially built for Mac OS X, using Cocoa for the user interface, but other targets are planned. Goals include: Insanely high performance. All editing operations should commit and paint in under 16ms. The editor should never make you wait for anything. Beauty. The editor should fit well on a modern desktop, and not look like a throwback from the ’80s or ’90s. Text drawing should be done with the best technology available (Core Text on Mac, DirectWrite on Windows, etc.), and support Unicode fully. Reliability. Crashing, hanging, or losing work should never happen. Developer friendliness. It should be easy to customize xi editor, whether by adding plug-ins or hacking on the core. Screenshot (will need to be updated as syntax coloring and UI polish is added): Getting started You need Xcode 7.3 (only on Mac) and Rust (version 1.8+ is recommended and supported). You should have cargo in your path. > git clone https://github.com/google/xi-editor > cd xi-editor > xcodebuild > open build/Release/XiEditor.app  Or open XiEditor.xcodeproj and hit the Run button. It will look better if you have InconsolataGo installed, a customized version of Inconsolata tuned for code editing. To choose other fonts, edit the CTFontCreateWithName() call in EditView.swift. Building the core If you’re not on a Mac, you can build just the core like so: > cd rust > cargo build  See the xi_glium project for an experimental front-end in Rust. There are notes (I wouldn’t call it documentation at this point) on the protocol at frontend.md. Design decisions Here are some of the design decisions, and motivation why they should contribute to the above goals: Separation into front-end and back-end modules. The front-end is responsible for presenting the user interface and drawing a screen full of text. The back-end (also known as “core”) holds the file buffers and is responsible for all potentially expensive editing operations. Native UI. Cross-platform UI toolkits never look and feel quite right. The best technology for building a UI is the native framework of the platform. On Mac, that’s Cocoa. Rust. The back-end needs to be extremely performant. In particular, it should use little more memory than the buffers being edited. That level of performance is possible in C++, but Rust offers a much more reliable, and in many ways, higher level programming platform. A persistent rope data structure. Persistent ropes are efficient even for very large files. In addition, they present a simple interface to their clients - conceptually, they're a sequence of characters just like a string, and the client need not be aware of any internal structure. Asynchronous operations. The editor should never, ever block and prevent the user from getting their work done. For example, autosave will spawn a thread with a snapshot of the current editor buffer (the persistent rope data structure is copy-on-write so this operation is nearly free), which can then proceed to write out to disk at its leisure, while the buffer is still fully editable. Plug-ins over scripting. Most text editors have an associated scripting language for extending functionality. However, these languages are usually both more arcane and less powerful than “real” languages. The xi editor will communicate with plugins through pipes, letting them be written in any language, and making it easier to integrate with other systems such as version control, deeper static analyzers of code, etc. JSON. The protocol for front-end / back-end communication, as well as between the back-end and plug-ins, is based on simple JSON messages. I considered binary formats, but the actual improvement in performance would be completely in the noise. Using JSON considerably lowers friction for developing plug-ins, as it’s available out of the box for most modern languages, and there are plenty of the libraries available for the other ones. Current status This is still a project in its early stages. The Mac build has basic editing functionality (it was used to write this README), but looks very spare and is still missing essentials such as syntax highlighting and auto-indent. At the moment, it’s expected that its main community will be developers interested in hacking on a text editor. Authors The main author is Raph Levien. Contributions We gladly accept contributions via GitHub pull requests, as long as the author has signed the Google Contributor License. Please see CONTRIBUTING.md for more details. Disclaimer This is not an official Google product (experimental or otherwise), it is just code that happens to be owned by Google. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/xi-editor"	""	"true"
"Applications written in Rust"	"pingcap/tikv"	"https://github.com/pingcap/tikv"	"— a distributed KV database in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"788"	"62"	"64"	"GitHub - pingcap/tikv: Distributed transactional key value database powered by Rust and Raft Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 62 Star 788 Fork 64 pingcap/tikv Code Issues 24 Pull requests 3 Wiki Pulse Graphs Distributed transactional key value database powered by Rust and Raft 1,503 commits 17 branches 0 releases 18 contributors Rust 99.3% Other 0.7% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags busyjay/concurrent-apply c4pt0r/coveralls gh-pages master ngaut/nightly qiuyesuifeng/add-datum-cmp-test queenypingcap-patch-1 queenypingcap-patch-3 siddontang/cleanup-clippy siddontang/format siddontang/http-framework siddontang/http-server siddontang/split-remove siddontang/store-capacity siddontang/tag-log siddontang/update-usage zhangjinpeng/threadpool_handle_kvreq Nothing to show Nothing to show New pull request Latest commit 537b55f Jul 16, 2016 disksing committed on GitHub engine: fix write empty modifies issue. (#839) Permalink Failed to load latest commit information. .github *: Add issue template. Apr 3, 2016 benches makefile: disable clippy by default (#825) Jul 14, 2016 docker build portable version (eg, not build-host specific) of rocksdb's sha… Jun 1, 2016 etc *: add messages_per_tick config. (#786) Jul 11, 2016 images README: use new stack image (#676) Jun 9, 2016 scripts use etcd v3 binary. (#757) Jul 1, 2016 src engine: fix write empty modifies issue. (#839) Jul 16, 2016 tests engine: fix write empty modifies issue. (#839) Jul 15, 2016 travis-build *: make cleanup reentrant (#836) Jul 15, 2016 .dockerignore use docker ignore to skip git [ci skip] Apr 10, 2016 .gitattributes Address comments Jan 20, 2016 .gitignore *: add install script. (#747) Jun 30, 2016 .travis.yml use etcd v3 binary. (#757) Jul 1, 2016 CONTRIBUTING.md doc: Add contribution guide. Apr 3, 2016 Cargo.lock *: Make clippy happy. (#826) Jul 14, 2016 Cargo.toml *: support set socket send/recv buffer size. (#776) Jul 9, 2016 Dockerfile Dockerfile: use cargo clean instead. Apr 10, 2016 LICENSE *: add license Apr 2, 2016 Makefile makefile: disable clippy by default (#825) Jul 14, 2016 README.md README: fix description of snapshot isolation (#773) Jul 5, 2016 USAGE.md Update USAGE.md (#828) Jul 15, 2016 README.md TiKV is a distributed Key-Value database powered by Rust and Raft TiKV is a distributed Key-Value database which is based on the design of Google Spanner and HBase, but it is much simpler without dependency on any distributed file system. With the implementation of the Raft consensus algorithm in Rust and consensus state stored in RocksDB, it guarantees data consistency. Placement Driver which is introduced to implement sharding enables automatic data migration. The transaction model is similar to Google's Percolator with some performance improvements. TiKV also provides snapshot isolation (SI), snapshot isolation with lock (SQL: select ... for update), and externally consistent reads and writes in distributed transactions. See TiKV-server software stack for more information. TiKV has the following primary features: Geo-Replication TiKV uses Raft and Placement Driver to support Geo-Replication. Horizontal scalability With Placement Driver and carefully designed Raft groups, TiKV excels in horizontal scalability and can easily scale to 100+ TBs of data. Consistent distributed transactions Similar to Google's Spanner, TiKV supports externally-consistent distributed transactions. Coprocessor support Similar to Hbase, TiKV implements the coprocessor framework to support distributed computing. Working with TiDB Thanks to the internal optimization, TiKV and TiDB can work together to be the best database system that specializes in horizontal scalability, support for externally-consistent transactions, as well as a focus on supporting both traditional RDBMS and NoSQL. Required Rust version Rust Nightly is required. Tikv-server software stack This figure represents tikv-server software stack. Placement driver: Placement Driver (PD) is the cluster manager of TiKV. PD periodically checks replication constraints to balance load and data automatically. Store: There is a RocksDB within each Store and it stores data into local disk. Region: Region is the basic unit of Key-Value data movement. Each Region is replicated to multiple Nodes. These multiple replicas form a Raft group. Node: A physical node in the cluster. Within each node, there are one or more Stores. Within each Store, there are many Regions. When a node starts, the metadata of node, store and region are registered into PD. The status of each Region and Store is reported to PD regularly. Usage See Usage for how to install and run TiKV. Contributing See CONTRIBUTING for details on submitting patches and the contribution workflow. License TiKV is under the Apache 2.0 license. See the LICENSE file for details. Acknowledgments Thanks etcd for providing some great open source tools. Thanks RocksDB for their powerful storage engines. Thanks mio for providing metal IO library for Rust. Thanks rust-clippy. We do love the great project. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pingcap/tikv"	"— a distributed KV database in Rust"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/pingcap/tikv"	"— a distributed KV database in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a distributed KV database in Rust"	"true"
"Applications written in Rust"	"seppo0010/rsedis"	"https://github.com/seppo0010/rsedis"	"— a Redis reimplementation in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"967"	"47"	"31"	"GitHub - seppo0010/rsedis: Redis re-implemented in Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 47 Star 967 Fork 31 seppo0010/rsedis Code Issues 0 Pull requests 0 Pulse Graphs Redis re-implemented in Rust. 498 commits 3 branches 0 releases 2 contributors Rust 52.8% Tcl 47.2% Rust Tcl Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags less-memory-maybe master mio Nothing to show Nothing to show New pull request Latest commit a8eb320 Oct 24, 2015 Sebastian Waisbrot Remove stable feature flag Permalink Failed to load latest commit information. command Fix off-by-one in PFCOUNT args Aug 15, 2015 compat Add os to info Aug 8, 2015 config Add log_and_exit macro Aug 11, 2015 database Reduce database lookup upon insertion Sep 2, 2015 logger Add log_and_exit macro Aug 12, 2015 networking Remove stable feature flag Oct 24, 2015 parser Add AOF Aug 8, 2015 persistence Truncate incomplete aof Aug 10, 2015 response Add DEBUG OBJECT Jul 24, 2015 src Add log_and_exit macro Aug 12, 2015 tests Restore some of Redis hll tests Aug 15, 2015 util Read AOF Aug 9, 2015 .gitignore INFO kick off with version and git information Aug 7, 2015 .travis.yml Add string/set tcl tests in travis Jul 31, 2015 Cargo.toml INFO kick off with version and git information Aug 8, 2015 LICENSE Initial commit Apr 10, 2015 README.md Add appveyor build status badge Jul 12, 2015 TODO.md Mark pfadd/pfcount/pfmerge as completed Aug 15, 2015 appveyor.yml Appveyor runs tcl tests Jul 31, 2015 build.rs Add rustc version to info Aug 8, 2015 rsedis.conf Refactoring to remove retry commands and issue a new one instead Jul 21, 2015 README.md rsedis Redis re-implemented in Rust. Why? To learn Rust. Use Cases rsedis does not rely on UNIX-specific features. Windows users can run it as a replacement of Redis. rsedis uses multiple threads which may be more useful in machines with multiple cores. Prerequisites Rust nightly. Current Status See TODO.md. License Copyright (c) 2015, Sebastian Waisbrot All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/seppo0010/rsedis"	"— a Redis reimplementation in Rust"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/seppo0010/rsedis"	"— a Redis reimplementation in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a Redis reimplementation in Rust"	"true"
"Applications written in Rust"	"emulator"	"https://crates.io/keywords/emulator"	"[]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[]"	"true"
"Applications written in Rust"	"Gekkio/mooneye-gb"	"https://github.com/Gekkio/mooneye-gb"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"105"	"19"	"5"	"GitHub - Gekkio/mooneye-gb: A Game Boy research project and emulator written in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 105 Fork 5 Gekkio/mooneye-gb Code Issues 18 Pull requests 0 Pulse Graphs A Game Boy research project and emulator written in Rust 334 commits 1 branch 1 release 4 contributors Rust 57.2% Assembly 37.0% TeX 4.6% GLSL 0.8% Makefile 0.4% Shell 0.0% Rust Assembly TeX GLSL Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 Nothing to show New pull request Latest commit 3b025d5 Jul 12, 2016 Gekkio Update dependencies Permalink Failed to load latest commit information. docs Add HALT tests Jul 9, 2015 roms Initial commit Dec 18, 2014 src Update dependencies Jul 12, 2016 tests New test: STAT IRQ blocking Jun 5, 2016 .gitignore Performance overlay based on imgui-rs Aug 20, 2015 .travis.yml Let's not do wla-dx with Travis...sigh Jul 7, 2016 Cargo.lock Update dependencies Jul 12, 2016 Cargo.toml Update dependencies Jul 12, 2016 LICENSE Apache 2 -> GPLv3+ Aug 8, 2015 README.markdown More test hardware Jun 29, 2016 build_win.bat Add Windows build script Aug 31, 2015 run_acceptance_tests.sh Put debug opcodes behind a flag and reduce build chattiness Apr 12, 2015 README.markdown Mooneye GB Mooneye GB is a Game Boy emulator written in Rust. The main goals of this project are accuracy and documentation. Some existing emulators are very accurate (Gambatte, BGB >= 1.5) but are not documented very clearly, so they are not that good references for emulator developers. I want this project to document as clearly as possible why certain behaviour is emulated in a certain way. This also means writing a lot of test ROMs to figure out corner cases and precise behaviour on real hardware. Non-goals: CGB (Game Boy Color) support. It would be nice, but I want to make the normal Game Boy support extremely robust first. A good debugger. A primitive debugger exists for development purposes, and it is enough. A user interface. Building native UIs with Rust is a bit painful at the moment. Warning: Project is WIP Doesn't work properly without a boot ROM Accuracy This project already passes Blargg's cpu_instrs, instr_timing, and mem_timing-2 tests. Things that need significant work: GPU emulation accuracy APU emulation in general There's tons of documentation and tons of emulators in the internet, but in the end I only trust real hardware. I follow a fairly ""scientific"" process when developing emulation for a feature: Think of different ways how it might behave on real hardware Make a hypothesis based on the most probable behaviour Write a test ROM for such behaviour Run the test ROM on real hardware. If the test ROM made an invalid hypothesis, go back to 1. Replicate the behaviour in the emulator All test ROMs are manually run with these devices: Device Model Mainboard CPU Game Boy DMG-01 DMG-CPU-04 DMG CPU B Game Boy Pocket MGB-001 MGB-ECPU-01 CPU MGB   Game Boy Pocket MGB-001 MGB-LCPU-01 CPU MGB   Super Game Boy SNSP-027 SGB-R-10 SGB-CPU-01 Super Game Boy SHVC-027 SGB-R-10 SGB-CPU-01 Super Game Boy 2 SHVC-042 SHVC-SGB2-01 CPU SGB2 Game Boy Color CGB-001 CGB-CPU-03 CPU CGB C Game Boy Color CGB-001 CGB-CPU-04 CPU CGB D Game Boy Color CGB-001 CGB-CPU-05 CPU CGB D Game Boy Advance AGB-001 AGB-CPU-10 CPU AGB A Game Boy Advance SP AGS-001  C/AGS-CPU-21 CPU AGB B E Game Boy Advance SP AGS-101  C/AGT-CPU-01 CPU AGB B E These devices will also be used, but results for old tests have not yet been verified: Device Model Mainboard CPU Game Boy DMG-01 DMG-CPU-01 DMG CPU Game Boy DMG-01 DMG-CPU-02 DMG CPU A Game Boy DMG-01 DMG-CPU-03 DMG CPU B Game Boy DMG-01 DMG-CPU-05 DMG CPU B Game Boy DMG-01 DMG-CPU-06 DMG CPU B Game Boy DMG-01 DMG-CPU-07 DMG CPU X (blob) Game Boy Pocket MGB-001 MGB-LCPU-02 CPU MGB   Game Boy Color CGB-001 CGB-CPU-01 CPU CGB Game Boy Color CGB-001 CGB-CPU-02 CPU CGB B Game Boy Color CGB-001 CGB-CPU-06 CPU CGB E Game Boy Advance AGB-001 AGB-CPU-01 CPU AGB Game Boy Advance SP AGS-001  C/AGS-CPU-01 CPU AGB B For now, the focus is on DMG/MGB/SGB/SGB2 emulation, so not all tests pass on CGB/AGB/AGS or emulators emulating those devices. Performance Always compile in release mode if you care about performance! On a i7-3770K desktop machine I can usually run ROMs with 2000 - 4000% speed. Without optimizations the speed drops to 150 - 200%, which is still fine for development purposes. Raspberry Pi with X11 desktop works but is too slow because there is no OpenGL acceleration. The emulator is runnable on Android, but cross-compiling and packaging is a huge pain and touch controls would have to be implemented, so I'm not supporting Android at the moment. Running the emulator GUI cargo run --release Follow the instructions Command-line Acquire a Game Boy bootrom, and put it to $HOME/.mooneye-gb/dmg_boot.bin cargo build --release cargo run --release -- PATH_TO_GAMEBOY_ROM On Windows, also download an SDL2 package containing SDL2.dll, and put it to target/debug and target/release. Game Boy keys Game Boy Key Dpad Arrow keys A Z B X Start Return Select Backspace Other keys Function Key Fast forward Shift Toggle performance overlay F2 Accuracy comparison Versions used: mooneye-gb (master) BGB 1.5.2 Gambatte 2015-03-23 (f9fb003) GiiBiiAdvance 2015-05-16 (dbf669a) Higan v098 (in Game Boy mode, except for SGB/SGB2-specific test ROMs) KiGB 2.05 MESS 0.163 Blargg's tests Test mooneye-gb BGB Gambatte GiiBiiAdvance Higan KiGB MESS cpu instrs 👍 👍 👍 👍 👍 ❌ 👍 dmg sound 2 ❌ 👍 👍 ❌ ❌ ❌ ❌ instr timing 👍 👍 👍 👍 👍 ❌ 👍 mem timing 2 👍 👍 👍 👍 👍 ❌ 👍 oam bug 2 ❌ ❌ ❌ ❌ ❌ ❌ ❌ Mooneye GB acceptance tests Test mooneye-gb BGB Gambatte GiiBiiAdvance Higan KiGB MESS add sp e timing 👍 ❌ 👍 ❌ 👍 ❌ ❌ boot hwio G 👍 👍 👍 ❌ 👍 ❌ ❌ boot regs dmg 👍 👍 👍 👍 👍 👍 👍 call timing 👍 ❌ 👍 ❌ 👍 ❌ ❌ call timing2 👍 ❌ 👍 ❌ 👍 ❌ ❌ call cc_timing 👍 ❌ 👍 ❌ 👍 ❌ ❌ call cc_timing2 👍 ❌ 👍 ❌ 👍 ❌ ❌ di timing GS 👍 👍 👍 ❌ 👍 👍 👍 div timing 👍 👍 👍 👍 👍 ❌ 👍 ei timing 👍 👍 👍 👍 👍 👍 👍 halt ime0 ei 👍 👍 👍 👍 👍 👍 👍 halt ime0 nointr_timing 👍 👍 👍 👍 👍 ❌ ❌ halt ime1 timing 👍 👍 👍 👍 👍 ❌ 👍 halt ime1 timing2 GS 👍 👍 👍 ❌ 👍 ❌ 👍 if ie registers 👍 👍 👍 👍 👍 ❌ 👍 intr timing 👍 👍 👍 👍 👍 ❌ 👍 jp timing 👍 ❌ 👍 ❌ 👍 ❌ ❌ jp cc timing 👍 ❌ 👍 ❌ 👍 ❌ ❌ ld hl sp e timing 👍 ❌ 👍 ❌ 👍 ❌ ❌ oam dma_restart 👍 ❌ 👍 ❌ 👍 ❌ ❌ oam dma start 👍 ❌ 👍 ❌ 👍 ❌ ❌ oam dma timing 👍 ❌ 👍 ❌ 👍 ❌ ❌ pop timing 👍 ❌ 👍 👍 👍 ❌ 👍 push timing 👍 ❌ ❌ ❌ 👍 ❌ ❌ rapid di ei 👍 👍 👍 👍 👍 👍 👍 ret timing 👍 ❌ 👍 ❌ 👍 ❌ ❌ ret cc timing 👍 ❌ 👍 ❌ 👍 ❌ ❌ reti timing 👍 ❌ 👍 ❌ 👍 ❌ ❌ reti intr timing 👍 👍 👍 👍 👍 👍 👍 rst timing 👍 ❌ ❌ ❌ 👍 ❌ ❌ Bits (unusable bits in memory and registers) Test mooneye-gb BGB Gambatte GiiBiiAdvance Higan KiGB MESS mem oam 👍 👍 👍 👍 👍 👍 👍 reg f 👍 👍 👍 👍 👍 👍 👍 unused_hwio GS 👍 ❌ 👍 ❌ ❌ ❌ ❌ GPU Test mooneye-gb BGB Gambatte GiiBiiAdvance Higan KiGB MESS hblank ly scx timing GS 👍 ❌ ❌ ❌ ❌ ❌ ❌ intr 1 2 timing GS 👍 👍 👍 ❌ 👍 ❌ 👍 intr 2 0 timing 👍 👍 ❌ ❌ 👍 ❌ ❌ intr 2 mode0 timing 👍 👍 ❌ ❌ ❌ ❌ ❌ intr 2 mode3 timing 👍 👍 ❌ ❌ ❌ ❌ ❌ intr 2 oam ok timing 👍 👍 ❌ ❌ ❌ ❌ ❌ intr 2 mode0 timing sprites ❌ ❌ ❌ ❌ ❌ ❌ ❌ stat irq blocking ❌ ❌ 👍 ❌ ❌ ❌ ❌ vblank stat intr GS 👍 👍 ❌ 👍 👍 ❌   ❌ Timer Test mooneye-gb BGB Gambatte GiiBiiAdvance Higan KiGB MESS div write ❌ 👍 ❌ 👍 👍 ❌ ❌ rapid toggle ❌ ❌ ❌ 👍 ❌ ❌ 👍 tim00 div trigger 👍 ❌ 👍 👍 ❌ ❌ ❌ tim00 ❌ 👍 ❌ 👍 👍 ❌ ❌ tim01 div trigger ❌ 👍 ❌ 👍 ❌ ❌ ❌ tim01  👍 👍 👍 👍 👍 ❌ ❌ tim10 div trigger ❌  👍 ❌ 👍 ❌ ❌ 👍 tim10 ❌  👍 ❌ 👍 👍 ❌ ❌ tim11 div trigger 👍 ❌ ❌ 👍 ❌ ❌ ❌ tim11 ❌  👍 ❌ 👍 👍 ❌ ❌ tima reload ❌ ❌ ❌ 👍 ❌ ❌ ❌ tima write reloading ❌ ❌ ❌ 👍 ❌ ❌ ❌ tma write reloading ❌ ❌ ❌ 👍 ❌ ❌ ❌ Mooneye GB emulator-only tests Test mooneye-gb BGB Gambatte GiiBiiAdvance Higan KiGB MESS mbc1 rom 4banks 👍 ❌ 👍 👍 👍 ❌ 👍 Mooneye GB manual tests Test mooneye-gb BGB Gambatte GiiBiiAdvance Higan KiGB MESS sprite priority 👍 👍 👍 ❌ 👍 ❌ ❌ Mooneye GB misc tests Test mooneye-gb BGB Gambatte GiiBiiAdvance Higan KiGB MESS boot hwio C 👍 ❌ ❌ ❌ boot hwio S ❌   ❌ 👍 ❌ ❌ boot regs A ❌ ❌ ❌ boot regs cgb 👍 ❌ ❌ 👍 boot regs mgb 👍 👍 👍 boot regs sgb ❌ 👍 👍 ❌ 👍 boot regs sgb2 ❌ 👍 ❌ ❌ Bits Test mooneye-gb BGB Gambatte GiiBiiAdvance Higan KiGB MESS unused hwio C ❌ ❌ ❌ ❌ GPU Test mooneye-gb BGB Gambatte GiiBiiAdvance Higan KiGB MESS vblank stat intr C ❌ ❌ ❌ ❌ Test naming Some tests are expected to pass only a single type of hardware: dmg = Game Boy mgb = Game Boy Pocket sgb = Super Game Boy sgb2 = Super Game Boy 2 cgb = Game Boy Color agb = Game Boy Advance ags = Game Boy Advance SP In general, hardware can be divided on to a couple of groups based on their behaviour. Some tests are expected to pass on a single or multiple groups: G = dmg+mgb S = sgb+sgb2 C = cgb+agb+ags A = agb+ags For example, a test with GS in the name is expected to pass on dmg+mgb + sgb+sgb2. License and copyright Mooneye GB is licensed under GPLv3+. Copyright (C) 2014-2016 Joonas Javanainen joonas.javanainen@gmail.com Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Gekkio/mooneye-gb"	"—"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/Gekkio/mooneye-gb"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Applications written in Rust"	"mvdnes/rboy"	"https://github.com/mvdnes/rboy"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"27"	"2"	"1"	"GitHub - mvdnes/rboy: A Gameboy Emulator in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 27 Fork 1 mvdnes/rboy Code Issues 0 Pull requests 0 Pulse Graphs A Gameboy Emulator in Rust 411 commits 1 branch 0 releases Fetching contributors Rust 99.8% Makefile 0.2% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 7b2e9ac May 14, 2016 mvdnes Update Cargo.lock to fix audio on Windows … winapi-rs has a fix in its latest version Permalink Failed to load latest commit information. roms Move all non-source files from src to root Jun 25, 2014 src Use time functions from rust stdlib Apr 14, 2016 .gitignore Update glium and add Cargo.lock Nov 10, 2015 .travis.yml Fix travis for cpal Oct 12, 2015 Cargo.lock Update Cargo.lock to fix audio on Windows May 14, 2016 Cargo.toml Use time functions from rust stdlib Apr 14, 2016 LICENSE Initial commit Jan 24, 2014 Makefile Simplify Makefile, let cargo do dependency checks Jan 13, 2015 README.md Update README.md Oct 27, 2015 README.md RBoy A Gameboy Color Emulator written in Rust Implemented CPU All instructions correct All timings correct Double speed mode GPU Normal mode Color mode Keypad Timer Audio MMU MBC-less MBC1 MBC3 (with RTC) MBC5 save games Special thanks to http://imrannazar.com/GameBoy-Emulation-in-JavaScript:-The-CPU http://nocash.emubase.de/pandocs.htm https://github.com/alexcrichton/jba (The Rust branch) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mvdnes/rboy"	"—"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/mvdnes/rboy"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Applications written in Rust"	"pcwalton/sprocketnes"	"https://github.com/pcwalton/sprocketnes"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"496"	"29"	"41"	"GitHub - pcwalton/sprocketnes: NES emulator written in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 496 Fork 41 pcwalton/sprocketnes Code Issues 3 Pull requests 5 Pulse Graphs NES emulator written in Rust 177 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags audio master Nothing to show Nothing to show New pull request Latest commit 8be11de Feb 23, 2016 pcwalton Merge pull request #20 from aochagavia/lock … Don't ignore Cargo.lock and fix a SDL2 version Permalink Failed to load latest commit information. src Update comment for Xorshift utility Jul 13, 2015 .gitignore Don't ignore Cargo.lock and fix a SDL2 version Dec 21, 2015 COPYING Clean up licenses, add README Feb 7, 2013 Cargo.lock Don't ignore Cargo.lock and fix a SDL2 version Dec 21, 2015 Cargo.toml Don't ignore Cargo.lock and fix a SDL2 version Dec 21, 2015 README.md Use lazy_static instead of static_{mutex,condvar} Jul 13, 2015 README.md sprocketnes is an emulator for the Nintendo Entertainment System written in the Rust programming language. Its purpose is to serve as a technology demonstration to show how the Rust programming language is suitable for systems software such as emulators. It has many shortcomings and is not intended to be a production-quality emulator. sprocketnes is also designed to be a relatively clean example codebase, showing off various Rust idioms. The NES was chosen for this project because: It's familiar to most hackers. It's a reasonably simple system to emulate. Because of its popularity, its workings are relatively well-documented. It's CPU-bound, so it can serve as a benchmark to help optimize Rust code. The audio requires some measure of real-time operation, which tests Rust's real-time capabilities. The main controls are as follows: A: Z B: X Start: Enter Select: Right shift D-Pad: Arrows Other keys: Save state: S Load state: L Quit: Escape If you want to build sprocketnes, you will first need the Speex codec library installed; on the Mac you can install it with brew install speex. To build (add --release if you actually want playable speed): cargo build  There are numerous demos and games available for free for use with this emulator at http://nesdev.com/. Enjoy! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pcwalton/sprocketnes"	"—"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/pcwalton/sprocketnes"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Applications written in Rust"	"simias/rustation"	"https://github.com/simias/rustation"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"266"	"20"	"9"	"GitHub - simias/rustation: Playstation emulator in the Rust programing language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 266 Fork 9 simias/rustation Code Issues 16 Pull requests 0 Wiki Pulse Graphs Playstation emulator in the Rust programing language 272 commits 9 branches 0 releases 3 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags hack_textures hack iso9660 master memcard-hack quad_mapping semi-transparency subpixel textures Nothing to show Nothing to show New pull request Latest commit b2ba2db Jul 14, 2016 simias Remove useless temporary file Permalink Failed to load latest commit information. cdimage @ 3140ff5 Implemented ISO9660 parsing to access the game's serial number Jun 24, 2016 src Remove useless temporary file Jul 14, 2016 .gitignore Convert Rustation into a library, remove all the SDL2 and OpenGL code Jan 27, 2016 .gitmodules Fix the cdimage submodule URL to use https instead Mar 1, 2016 .travis.yml Cleanup travis.yml a bit more Jun 19, 2016 Cargo.toml Added savestate support by implementing Encodable/Decodable Jun 7, 2016 LICENSE License code using the GPL-2.0+ Oct 13, 2015 README.md Convert Rustation into a library, remove all the SDL2 and OpenGL code Jan 27, 2016 README.md Rustation PlayStation emulator PlayStation emulator in the Rust programing language. This repository only contains the source code for the core of the emulator. The OpenGL renderer and the libretro interface is is the rustation-libretro repository. The focus of this emulator is to write code that's clean, accurate and hopefully easy to understand. There's no plugin infrastructure, the emulator is monolithic. Performance is pretty poor at the moment but it should be enough to run close to realtime on a modern CPU. For the time being it can only boot a few games. Crash Bandicoot (Japanese version) is mostly playable, although I've had random crashes. Some other games (like Spyro) freeze after or during the intro. If you have any questions, in particular if something in the code is not clear or properly commented don't hesitate to fill an issue. I also created a /psx/ board on 8chan if you prefer something less formal to discuss this emulator and all things PlayStation. We'll see if this turns out to be a good idea... Currently implemented (even partially) CPU Basic GTE support (ported from mednafen PSX) Instruction cache Interrupts Basic GPU (no semi-transparency or mask bit emulation) Timers (incomplete) DMA Debugger CDROM controller (missing many commands) Gamepad controller (only digital pad for now) Todo list Many things in the GPU MDEC SPU Memory card CPU pipeline emulation More accurate timings Many, many other things... Build You'll need Rust and its package manager Cargo, SDL2 and a PlayStation BIOS. The emulator is mainly tested with BIOS version SCPH1001 whose SHA-1 is 10155d8d6e6e832d6ea66db9bc098321fb5e8ebf. You should then be able to build the emulator with: cargo build --release  Don't forget the --release flag in order to turn optimizations on. Without them the resulting binary will be absurdly slow. If the build is succesful you can run the emulator using: cargo run --release /path/to/SCPH1001.BIN  For Windows check issue #12. Use the Escape key to exit the emulator, Pause/Break to ""break"" into the debugger, the emulator will then listen on TCP port 9001 for a GDB connection. Debugger In order to debug you'll need a GDB targetting mipsel-unknown-elf. Once the emulator is running press the Pause/Break key to trigger the debugger and then connect GDB to it using (at the gdb command prompt): target remote localhost:9001 GDB might complain about not finding symbols or the boundaries of the current function but you can ignore that. From then you should be able to use the familiar GDB commands to debug the live emulator. A few examples: # Dump the CPU registers info registers # Disassemble 20 instructions around PC disassemble $pc-40,+80 # Display word at address 0x1f801814 (GPU status) x/x 0x1f801814 # Add code breakpoint at address 0x00004588 break *0x00004588 # Add write watchpoint at address 0x1f801070 (IRQ ack) watch *0x1f801070 # Step over a single instruction stepi # Continue until a break/watchpoint is reached (or Pause/Break is pressed) continue  The debugger support is pretty experimental and quircky but it works for basic debugging needs. Guide I'm also attempting to document the emulator writing process in a LaTeX document available in the psx-guide repository. It's generally lagging behind the actual code but I'll try to update it as often as possible. Resources I try to cite all of my sources in the guide above but I'm mainly using the priceless No$ PSX specifications as well as mednafen's source code when I feel like cheating. I also run tests on the real hardware and store them in the psx-hardware-tests repository. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/simias/rustation"	"—"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/simias/rustation"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Applications written in Rust"	"pacmancoder/rustzx"	"https://github.com/pacmancoder/rustzx"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"2"	"0"	"GitHub - pacmancoder/rustzx: ZX Spectrum emulator written in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 15 Fork 0 pacmancoder/rustzx Code Issues 3 Pull requests 0 Pulse Graphs ZX Spectrum emulator written in Rust 44 commits 2 branches 1 release Fetching contributors Rust 99.8% GLSL 0.2% Rust GLSL Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show v0.7.1 Nothing to show New pull request Latest commit d3cf33e Jul 15, 2016 pacmancoder Logo Permalink Failed to load latest commit information. assets Logo Jul 15, 2016 screenshots [WIP] Beeper sound implementation Jun 26, 2016 src Kempston Jul 15, 2016 .gitignore 128K implementation phase started Jul 6, 2016 .travis.yml Add Travis CI config Mar 12, 2016 Cargo.lock Kempston Jul 14, 2016 Cargo.toml Kempston Jul 14, 2016 LICENSE.md Full sound implementation, mixer, settings struct Jul 14, 2016 LOG.md Kempston Jul 14, 2016 README.md Logo Jul 14, 2016 README.md rustzx ZX Spectrum emulator which I writing in rust. I develop this project just for fun and for learning the basics of computer architecture. Licensed under MIT License. Features Written in pure rust Cross-platform Documented source Full ZX Spectrum 48K and 128K emulation Perfect emulation of Z80 core Highly precise AY chip emulation with Ayumi library Beeper sound emulation Can handle tap, sna files Fast loading of tap files with standard loader Emulates border Kempston joystick emulation Correct contentons Current status [v0.8.x] Preparing 0.8.x release Download [v0.7.1] At the moment only deb package for amd64 available in releases section. Compiling Before compiling make shure that libportaudio is installed. On Ubuntu/Mint, for example you must to install packages libportaudio2 and portaudio19-dev On Arch/Manjaro you must install portaudio package Then just install it with cargo (~/.cargo/bin must be in your PATH) cargo install For advenced info use --help flag How to use Here some examples of usage: rustzx --help rustzx --fastload --tap test.tap rustzx -f --128k --AY abc --tap test128.tap rustzx --rom tester.rom --scale 3 --volume 50 For loading tape in 48K mode, press j then Ctrl+p twice, as on real Spectrum. You must see LOAD """" on emulator's screen. And then press Enter. If you --fastload option before launching, game will be launched, in other case press Insert to insert tape. Delete can be used for ejecting tape from tape reader. --128k flag launches emulator in 128K mode. For loading tape just press Enter. Use keys F3 - F5 to set speed of emulation - this can be usefull when skipping some boring stuff. Use F6 to display FPS in window title. You can press F2 for 64K memory space dump. Screenshots Log Watch LOG for details and github issues for current plans and help requests. References Of course, I used many resources to find out, how to build my first emulator in life. So there is a list of useful references, from where I dig most information about Z80, ULA and other ZX Spectrum hardware parts: Of course z80.info Decoding Z80 opcodes Opcodes list CPU user manual CPU architecture Interrupt behaviour Z80 undocumented documented Instruction table from ClrHome ""Floating bus explained!"" by Ramsoft 16K / 48K ZX Spectrum Reference 128K ZX Spectrum Reference Z80 hardware organization disassembler.io online disassembler Cool z80 assembler zasm Diagnostic ROM by Phill zx-modules.de - great resource, check it out! speccy.info Harlequin And many other great material, which helped me to make rustzx! FUSE emulator source for finding out correct timings ## ROM's Emulator contains ROM's, created by by Sinclair Research Ltd (now owned by Amstrad plc), Amstrad was given permissions for distributing their ROM's with emulators, so they are included in source of emulator (mod zx::roms). More about this read here Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pacmancoder/rustzx"	"—"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/pacmancoder/rustzx"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Applications written in Rust"	"Games Made With Piston"	"https://github.com/PistonDevelopers/piston/wiki/Games-Made-With-Piston"	", see also."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1347"	"120"	"112"	"Games Made With Piston · PistonDevelopers/piston Wiki · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 120 Star 1,347 Fork 112 PistonDevelopers/piston Code Issues 22 Pull requests 2 Wiki Pulse Graphs Games Made With Piston Joel W Kall edited this page Jul 1, 2016 · 33 revisions Pages 15 Home Add yourself as author API design Backend agnostic design crates.io and semver Games Made With Piston Investigating errors Labels and issues Licenses & patents Piston overview Policy Profiling Thinking User design Using Github and Git Clone this wiki locally Clone in Desktop rust-spin-wheel (Buidling on 1.11.0) rocket (Building on 1.1.0) rust-sudoku (Building on 1.4.0) snake-piston (Building on 1.1.0) rust-2048 (Building on 1.1.0) rust-lightsout rust-pong pong-rs (Building on 1.1.0) rust-snake or ""Sea Snake Escape"" rusty-tetris (as of 2016-06-11 does not have a Cargo.toml file) r_tetris (Updated/Adapted Version as of Nov 16,2014, as of 2016-06-11 depends on moved repos [events,time] and does not build on 1.9) rtetris (Yet another simlest rust writen tetris. Building on 1.1.0, as of 2016-06-11 does not build on 1.9) tetris-piston Another Tetris clone (as of 2016-06-11 does not build on 1.9) game-of-life rust-snake (as in the cell phone game) hematite (a simple Minecraft) (under active development) rustyhex (3d hex-based roguelike) Sea Birds' Breakfast slider (A slider puzzle) colonize (a Dwarf Fortress-alike roguelike) (under active development as of May 4, 2016) minesweeper-rs Puzzle Fighter/Swordfighting clone (under active development) cdb-rust carket (ludum dare 34 entry) Gomoku La Guerra Impresionante de Condenación Final Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PistonDevelopers/piston/wiki/Games-Made-With-Piston"	", see also."	"true"
"Applications written in Rust"	"lifthrasiir/angolmois-rust"	"https://github.com/lifthrasiir/angolmois-rust"	"— a minimalistic music video game which supports the BMS format"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"66"	"3"	"6"	"GitHub - lifthrasiir/angolmois-rust: Angolmois BMS player, Rust edition Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 66 Fork 6 lifthrasiir/angolmois-rust Code Issues 2 Pull requests 1 Pulse Graphs Angolmois BMS player, Rust edition 158 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 1da1bd4 Dec 4, 2014 lifthrasiir okay, I went too far. retain #![crate_*] attrs. Permalink Failed to load latest commit information. .gitignore language changes: mut_* -> *_mut; added Cargo.lock. Sep 20, 2014 .travis.yml simplified .travis.yml. Aug 27, 2014 Cargo.lock updated dependencies. Dec 4, 2014 Cargo.toml updated dependencies. Dec 4, 2014 README.md switches to Cargo, no more Makefile. Aug 7, 2014 angolmois.rs okay, I went too far. retain #![crate_*] attrs. Dec 4, 2014 README.md Angolmois Rust Edition This is a direct, one-to-one translation of Angolmois to Rust programming language. Angolmois is a BM98-like minimalistic music video game which supports the BMS format for playing. Angolmois is a combination of string parsing, path manipulation, two-dimensional graphics and complex game play carefully packed into some thousand lines of code. This translation is intended to provide an example of translating a moderately-sized C code to Rust, and also to investigate additional library supports required for such moderately-sized programs. The resulting translation is certainly one of the largest applications written in Rust to date (most Rust projects are libraries for now), weighing more than 6,000 lines of Rust code. This is partly due to the fact that, unlike the original Angolmois code (which sacrifices most comments due to code size concerns), the Rust version has much more comments which can be beneficial for understanding Angolmois itself too. For more informations (especially the usage), please refer to the README file of the original Angolmois. If you want to learn more about what the BMS format is and how Angolmois is structured, it turns out that I've already written a lot about them. Screenshots Game data credits: ""sunken azure world"", music by maki, courtesy of Daida Three Brothers. All rights reserved. License Angolmois is distributed under GNU GPL version 2+, so is this translation. The portions of it is intended to be sent as a patch to Rust, so those portions are licensed under Apache License 2.0 and MIT license. See the code for specifics. FAQ How to compile? Clone this repo and run the following commands (yes, you need the MinGW shell for Windows): cargo build --release target/release/angolmois --help  You require the most recent Rust master and Cargo. You can install nightlies for both. Why did you put everything to one file? Mainly because this is a direct translation of Angolmois, which consists of a single C file with less than 2,000 lines of code. I tried to keep the entire structure of code while doing some refactoring since this makes the translation much more obvious. This also explains why we have rather big bindings; the original Angolmois was also self-contained besides from SDL libraries. There is now a fork of Angolmois called Sonorous which has outgrown the original to become a full-featured game. If you don't like one big file, please consider taking a look at it. What's a difference between the Rust Edition and the original Angolmois? In theory, Angolmois Rust Edition should be identical to Angolmois 2.0.0 alpha 2. In practice, there are some differences: They behave differently on the files with invalid UTF-8 sequences. The Rust version caches the directory entries in order to avoid the performance penalty due to the different directory listing semantics. The C version is unable to handle 2,000 or more measures in the display. (Fixed in 2.0 alpha 3) The C version allows a non-native path separator in #PATH_WAV; the Rust Edition doesn't. The C version allows ""rewinding"" the movie by repeatedly setting the same alphanumeric key to the BGA layer; the Rust Edition doesn't. I'm not sure that this feature is portable at all. Please also note that the Rust Edition, based on 2.0.0 alpha 2, is also substantially different to 2.0 alpha 3 in the development. Targeting 2.0 alpha 3 is not hard but currently blocked by the immaturity of SDL 2.0 bindings for Rust. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lifthrasiir/angolmois-rust"	"— a minimalistic music video game which supports the BMS format"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/lifthrasiir/angolmois-rust"	"— a minimalistic music video game which supports the BMS format"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a minimalistic music video game which supports the BMS format"	"true"
"Applications written in Rust"	"swatteau/sokoban-rs"	"https://github.com/swatteau/sokoban-rs"	"— a Sokoban implementation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"57"	"4"	"3"	"GitHub - swatteau/sokoban-rs: An implementation of Sokoban in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 57 Fork 3 swatteau/sokoban-rs Code Issues 0 Pull requests 0 Pulse Graphs An implementation of Sokoban in Rust 71 commits 1 branch 12 releases Fetching contributors Rust 94.2% Makefile 5.8% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.1.0 1.0.4 1.0.3 1.0.2 1.0.1 1.0.0 0.3.1 0.3.0 0.2.0 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit a37a2d2 Jul 13, 2016 swatteau Upgraded dependencies Permalink Failed to load latest commit information. assets Deleted README Sep 2, 2015 src Bumped version to 1.1.0 Apr 17, 2016 .gitignore Initial commit Aug 28, 2015 .travis.yml Fixed .travis.yml Aug 31, 2015 Cargo.lock Upgraded dependencies Jul 13, 2016 Cargo.toml Upgraded dependencies Jul 13, 2016 LICENSE Initial commit Aug 28, 2015 README.adoc Bumped version to 1.1.0 Apr 17, 2016 README.adoc This is an implementation of Sokoban in the Rust Programming Language. An example level: Build instructions Before building sokoban-rs, you will need to install the developpement libraries for SDL2, preferably with the package manager that comes with your operating system. Example for Debian/Ubuntu: sudo apt-get install libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev Example for Mac OSX brew install sdl2 brew install sdl2_image brew install sdl2_ttf You might also like to read the README for these projects: https://github.com/AngryLawyer/rust-sdl2 https://github.com/xsleonard/rust-sdl2_image https://github.com/andelf/rust-sdl2_ttf To build sokoban-rs, type the following commands: git clone https://github.com/swatteau/sokoban-rs cd sokoban-rs cargo build --release How to play This game is released without any level. You can download level collections from http://www.sourcecode.se/sokoban/levels in the SLC (XML) format. For a quick start, try this: wget http://www.sourcecode.se/sokoban/download/microban.slc ./target/release/sokoban-rs /path/to/microban.slc Use the arrow keys to move the player. Type R to retry the current level. Type N to skip the current level. Credits ""PlanetCute"" art by Daniel Cook (Lostgarden.com) Ruji’s Handwriting Font by Ruji C. (rujic.net) License Copyright 2015 Sébastien Watteau  Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/swatteau/sokoban-rs"	"— a Sokoban implementation"	"true"
"Applications written in Rust"	"Zone of Control"	"https://github.com/ozkriff/zoc"	"— a turn-based hexagonal strategy game"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"52"	"6"	"4"	"GitHub - ozkriff/zoc: Zone of Control - turn-based hexagonal strategy written in Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 52 Fork 4 ozkriff/zoc Code Issues 83 Pull requests 0 Pulse Graphs Zone of Control - turn-based hexagonal strategy written in Rust. 522 commits 5 branches 0 releases 1 contributor Rust 99.7% Makefile 0.3% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags WIP_blender_mockup WIP_gfx WIP_mit_apache_2 WIP_test_dependencyci master Nothing to show Nothing to show New pull request Latest commit 0a41f15 Jul 13, 2016 ozkriff Closed #186: DependencyCI Permalink Failed to load latest commit information. .cargo Closed #59: Added info about assets_hack to README Dec 22, 2015 src cargo update Jun 11, 2016 .gitignore .gitignore: Removed 'android/*' Feb 23, 2015 .travis.yml .travis.yml: Enabled osx Jul 13, 2016 Cargo.lock cargo update Jun 11, 2016 Cargo.toml Fixed #141: Fixed android build Dec 10, 2015 LICENSE LICENSE: Updated year range Jul 10, 2016 Makefile Removed `-j 1` from Makefile and appveyor.yml Dec 11, 2015 README.rst Closed #186: DependencyCI Jul 13, 2016 appveyor.yml Removed `-j 1` from Makefile and appveyor.yml Dec 11, 2015 README.rst Zone of Control Overview ZoC is turn-based hexagonal strategy game written in Rust. Video: http://www.youtube.com/watch?v=srJAfngSwxk Assets Basic game assets are stored in separate repo: https://github.com/ozkriff/zoc_assets Run make assets to download them. NOTE: If game will not die in early stage of development I'm planning to release actual game resources under proprietary license. Building make or cargo build. Running make run or cargo run or ./target/zoc. (Tested in ubuntu 14.04 and win 8.1.) Android For instructions on setting up your environment see https://github.com/tomaka/android-rs-glue#setting-up-your-environment. Build apk-builder with assets_hack feature: cargo build --features assets_hack Make sure that path in .cargo/config is correct. Then just: make android_run (rust-nightly is required). (Tested on nexus7/android6) Contribute Feel free to report bugs and patches using GitHub's pull requests system on https://github.com/ozkriff/zoc. Any feedback would be much appreciated! NOTE: You must apologize my English level. I'm trying to do my best :) . Please open an issue if anything in docs or comments is strange/unclear/can be improved. License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ozkriff/zoc"	"— a turn-based hexagonal strategy game"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/ozkriff/zoc"	"— a turn-based hexagonal strategy game"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a turn-based hexagonal strategy game"	"true"
"Applications written in Rust"	"rhex"	"https://github.com/dpc/rhex"	"— hexagonal ascii roguelike"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"49"	"9"	"7"	"GitHub - dpc/rhex: ASCII terminal hexagonal map  roguelike written in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 49 Fork 7 dpc/rhex Code Issues 7 Pull requests 0 Wiki Pulse Graphs ASCII terminal hexagonal map roguelike written in Rust 206 commits 8 branches 1 release Fetching contributors Rust 99.1% Makefile 0.9% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags animations broken compiler-error devel issue master test-anim test-ncurses Nothing to show 0.0.1 Nothing to show New pull request Latest commit 7c7248c Jun 7, 2016 dpc Bump versions of everything Permalink Failed to load latest commit information. src Bump versions of everything Jun 7, 2016 .editorconfig Fix UNICODE_DOT, codegen-units=2, add .editorconfig Jan 24, 2016 .gitignore .gitignore: debug.log Jan 23, 2016 .travis.yml Use Rust stable. Jan 22, 2016 Cargo.lock Bump versions of everything Jun 8, 2016 Cargo.toml Bump versions of everything Jun 8, 2016 Makefile Add optional clippy support. Jan 28, 2016 Makefile.defs Initial commit. Feb 11, 2015 README.md Use Rust stable. Jan 22, 2016 README.md rhex Contributors welcome! Rhex is looking for contributors. See Contributing page for details. Introduction Simple ASCII terminal hexagonal map roguelike written in Rust Rust. You can try the game without installing anything. Check rhex demo server instructions. The core goal of the project: ASCI/Unicode pure terminal UI first hexagonal map with tactical positioning It's also intendent to exercise and practice my Rust knowledge. Previous iteration of this idea was/is: Rustyhex . This two project might merge into whole at some point. Rhex is using hex2d-rs - Hexagonal grid map utillity library. Overview Watch rhex gameplay video: Running Game requires terminal with 256 colors support, and Unicode font. git clone https://github.com/dpc/rhex.git cd rhex cargo run --release  Status The game is playable but not feature and gameplay wise complete. rhex is actively seeking collaborators. If you'd like to practice your Rust or/and find roguelikes interesting ping @dpc on rhex gitter channel and we can get your started. Report problems and ideas Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dpc/rhex"	"— hexagonal ascii roguelike"	"true"
"Applications written in Rust"	"A comparison of operating systems written in Rust"	"https://github.com/flosse/rust-os-comparison"	", see also"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"88"	"11"	"5"	"GitHub - flosse/rust-os-comparison: A comparison of operating systems written in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 88 Fork 5 flosse/rust-os-comparison Code Issues 1 Pull requests 0 Pulse Graphs A comparison of operating systems written in Rust 39 commits 1 branch 0 releases 7 contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f79b495 May 19, 2016 flosse add link to Hanno's blog posts Permalink Failed to load latest commit information. .gitignore initial commit Oct 3, 2015 README.md add link to Hanno's blog posts May 19, 2016 README.md Rust OS comparison A comparison of operating systems written in Rust. There are several open source operating systems written in Rust. Most of them are proofs of concepts. The only system that goes a step further is redox. It comes with a window manager as well as basic applications like an editor and a file manager. redox (repository / homepage) reenix (repository) rustboot (repository) RustOS (repository) Tifflin (rust_os) (repository) bkernel (repository) intermezzOS (repository / homepage) Quasar (repository) Name redox reenix rustboot RustOS Tifflin bkernel intermezzOS Quasar Architectures x86 and x86_64 Brown's CS167/9 i386 i386 x86_64/amd64 ARM x86_64 x86_64 Pure Rust implementation yes no ? ? almost yes no ? Active? yes no no ? yes yes yes no Kernel architecture Microkernel Monolithic (current state) None ? Monolithic ? ? ? Target General purpose PoC PoC ? ? Embedded devices PoC ? Userpace? yes no no no ? no no no Optional GUI? yes no no no yes no no no Contributors 40+ 3 9 10 1 3 4 1 Filesystem ZFS/RedoxFS ? no no ISO9660 ? no ? License MIT unknown MIT APL 2 / MIT 2-Clause-BSD GPL with linking exception APL 2 / MIT ? Also worth noting: Robigalia, a sel4 userspace, written in Rust. Blog posts and papers This week in intermezzOS 1 Writing an OS in Rust Allocating Frames Printing to Screen Setup Rust Entering Long Mode A minimal x86 kernel Remap the Kernel Kernel Heap This Week in Redox 1 / Redox News Redox is Serious Reenix: Implementing a Unix-Like Operating System in Rust (PDF) Experiences Building an OS in Rust Writing an OS in Rust in tiny steps (Steps 1-5) My Rust OS will never be finished (and it's a success!) Ownership is Theft: Experiences Building an Embedded OS in Rust (PDF) Using Rust for an Undergraduate OS Course Running Rust on the Rumprun unikernel Making Popcorn: Adding a disk to a Rust Rumprun Unikernel bkernel: a Rust Operating System (x86_64) Why are platform features such as the red zone enabled by default? Operating system development wiki Create a secure POSIX-compatible userland on top of seL4 Betriebssystem Redox in Rust geschrieben (German) Embedded Systems Bare Metal Rust 3: Configure your PIC to handle interrupts correctly 2: Retarget your compiler so interrupts are not evil 1: Low-level CPU I/O ports Rust bare metal on ARM microcontroller Blinking an LED with Rust on a Beaglebone Black Zinc goals redefined and extended Rust on an Arduino Uno Part 1 Part 2 Part 3 Part 4 Rust on Arduino Due http://embedded.hannobraun.de/ Raspberry Pi Bare Metal Programming with Rust Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/flosse/rust-os-comparison"	", see also"	"true"
"Applications written in Rust"	"redox-os/redox"	"https://github.com/redox-os/redox"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4421"	"287"	"240"	"GitHub - redox-os/redox: Redox: A Rust Operating System Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 287 Star 4,421 Fork 240 redox-os/redox Code Issues 51 Pull requests 0 Pulse Graphs Redox: A Rust Operating System http://www.redox-os.org 3,207 commits 6 branches 0 releases 50 contributors Rust 92.3% Shell 3.9% Assembly 2.0% Makefile 1.7% C++ 0.1% Nix 0.0% Rust Shell Assembly Makefile C++ Nix Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dns genesis higher-half master proprietary strace Nothing to show Nothing to show New pull request Latest commit 5b40823 Jul 14, 2016 jackpot51 Update ralloc Permalink Failed to load latest commit information. .github Update the templates Mar 21, 2016 crates Update ralloc Jul 14, 2016 drivers Add reboot command Jul 2, 2016 filesystem Update submodules Jul 13, 2016 img Add start icon Jul 12, 2016 initfs/etc WIP: Switch to new filesystem, in userspace Apr 12, 2016 installer @ 2eb2018 Add a huge amount of debugging, find a deadlock Jun 8, 2016 kernel Update rust, update orb Jul 13, 2016 liballoc_malloc Move allocator for std Apr 13, 2016 liballoc_system fix rustfmt on liballoc_system Jan 9, 2016 libc @ 285345d Update submodules, add binutils Jun 6, 2016 libstd Remove C library completely, update ralloc with shim Jul 5, 2016 rust @ 4a12a70 Update rust, update orb Jul 13, 2016 setup Use fully-qualified name for gcc_cross_compilers May 13, 2016 .gitignore WIP: Investigate execve to see if it is the source of bugs Jun 7, 2016 .gitmodules Move ansi lib into a new repo Jul 2, 2016 .travis.yml Use fully-qualified name for gcc_cross_compilers May 14, 2016 CONTRIBUTING.md Fix CONTRIBUTING.md Jun 7, 2016 LICENSE.md Sorry Charlie, all the original Rustboot code has been gone for sever… Dec 14, 2015 Makefile Autocomplete in ion! Jul 6, 2016 README.md Update README.md Jun 5, 2016 bochs.i386 Fix paths in bochs files, format ASM Jan 12, 2016 bochs.x86_64 Fix paths in bochs files, format ASM Jan 12, 2016 bootstrap.sh fix fuse pkg name on fedora Jul 9, 2016 i386-unknown-redox.json Add data-layout fields to build targets. Apr 23, 2016 rustc-i386.sh Update coreutils, orbutils, fix rusttype build, replace malloc with r… Apr 19, 2016 rustc-x86_64.sh Update coreutils, orbutils, fix rusttype build, replace malloc with r… Apr 19, 2016 x86_64-unknown-redox.json Add data-layout fields to build targets. Apr 23, 2016 README.md Redox is an operating system written in pure Rust, designed to be secure and free. The website can be found at http://www.redox-os.org. Documentation can be found here. Please make sure you use the latest nightly of rustc before building (for more troubleshooting, see ""Help! Redox won't compile!""). Contents What it looks like Help! Redox won't compile Contributing to Redox Cloning, Building and running Quick Setup Manual Setup What it looks like Help! Redox won't compile! Sometimes things go wrong when compiling. Try the following before opening an issue: Run make clean. Run git clean -X -f -d. Make sure you have the latest version of Rust nightly! (multirust is recommended for managing Rust versions). Update GNU Make, NASM and QEMU/VirtualBox. Pull the upstream master branch (git remote add upstream git@github.com:redox-os/redox.git; git pull upstream master). Update submodules (git submodule update --recursive --init). and then rebuild! Contributing to Redox If you're interested in this project, and you'd like to help us out, here is a list of ways you can do just that. Cloning, Building, and Running Redox is big (even compressed)! So cloning Redox takes a lot bandwidth, and (depending on your data plan) can be costly, so clone at your own risk! Quick Setup $ cd path/to/your/projects/folder/  # Run bootstrap setup $ curl -sf https://raw.githubusercontent.com/redox-os/redox/master/bootstrap.sh -o bootstrap.sh && bash -e bootstrap.sh  # Build Redox $ make all  # Launch using QEMU $ make qemu # Launch using QEMU without using KVM (Kernel Virtual Machine). Try if QEMU gives an error. $ make qemu kvm=no QEMU with KVM To use QEMU with KVM (kernel-based virtual Machine), which is faster than without KVM, you need a CPU with Intel® Virtualization Technology (Intel® VT) or AMD Virtualization™ (AMD-V™) support. Most systems have this disabled in the BIOS by default, so you may need to reboot and enable the feature in the BIOS. Manual Setup To manually clone, build and run Redox using a Linux host, run the following commands (with exceptions, be sure to read the comments): $ cd path/to/your/projects/folder/  # HTTPS $ git clone https://github.com/redox-os/redox.git --origin upstream --recursive # SSH $ git clone git@github.com:redox-os/redox.git --origin upstream --recursive  $ cd redox/  # Install/update dependencies $ sudo <your package manager> install make nasm qemu libfuse-dev  # Install multirust $ curl -sf https://raw.githubusercontent.com/brson/multirust/master/quick-install.sh | sh  # Set override toolchain to nightly build $ multirust override nightly  # For successive builds start here. If this is your first build, just continue  # Update git submodules $ git submodule update --recursive --init  # Build Redox $ make all  # Launch using QEMU $ make qemu # Launch using QEMU without using KVM (Kernel Virtual Machine). Try if QEMU gives an error. $ make qemu kvm=no Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/redox-os/redox"	"—"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/redox-os/redox"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Applications written in Rust"	"thepowersgang/rust_os"	"https://github.com/thepowersgang/rust_os"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"163"	"22"	"8"	"GitHub - thepowersgang/rust_os: An OS kernel written in rust. Non POSIX Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 163 Fork 8 thepowersgang/rust_os Code Issues 0 Pull requests 0 Pulse Graphs An OS kernel written in rust. Non POSIX 899 commits 2 branches 0 releases Fetching contributors Rust 93.0% Assembly 3.0% Makefile 2.0% Python 1.5% Other 0.5% Rust Assembly Makefile Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 20160403_ice_unprintable master Nothing to show Nothing to show New pull request Latest commit d502052 Jul 1, 2016 thepowersgang Usermode - Generate and load RLE 24bpp images, add buffered reader Permalink Failed to load latest commit information. Bootloaders Missing file Mar 6, 2016 Graphics Usermode - Generate and load RLE 24bpp images, add buffered reader Jul 1, 2016 Hooks Add the pre-commit hook that validates source sanity Aug 9, 2015 Kernel Syscalls - IPC syscalls stubbing Jun 27, 2016 Notes Usermode - Start work on RPC API and handle server Apr 21, 2016 SystemTest Syscalls - Completed stubbing of RPC Jun 27, 2016 Usermode Usermode - Generate and load RLE 24bpp images, add buffered reader Jul 1, 2016 acpica acpica - use cur to work around broken travis Jun 19, 2016 externals/crates.io externals - Add .repo files for the other externals (not used yet) Jun 20, 2015 .gitignore Various file cleanups Apr 15, 2016 .travis.yml Travis - Use curl instead of wget for https Jun 15, 2016 BuildCrossCompiler BuildCrossCompiler - Use parallel build Oct 17, 2015 COPYING Add licence and readme Sep 7, 2014 CheckSubrepos.sh Add a quick script to check the status of external repositories Jul 20, 2015 LineCount.sh Rough script to do line counts Dec 20, 2015 Makefile Usermode - Work on shell Oct 15, 2015 PushScreenshots Various file cleanups Apr 15, 2016 README.md Updated readme Dec 23, 2015 UnsafeAudit.sh Update UnsafeAudit.sh to correcly handle unsafe blocks with the `{` o… Sep 21, 2015 UpdateSubrepos.sh Fiddling with event waiting support, Add script to run git pull on su… Jul 24, 2015 annotate_backtrace.sh Update annotate_backtrace script so it works with userland dumps Dec 12, 2015 common.mk Usermode - Strip executables before placing in output dir Dec 31, 2015 keycodes.inc.rs Login+wtk - Login prompt renders well, with cursor Aug 10, 2015 libcore_nofp.patch Libcore patch update Mar 24, 2016 syscalls.inc.rs Syscalls - Completed stubbing of RPC Jun 27, 2016 README.md ""Tifflin"" Experimental Kernel (and eventually Operating System) This is an experiment in writing an OS Kernel in rust (http://rust-lang.org). Mostly the architecture is being designed as I go along, but it will be written to be architecture independent (the current verison is x86_64/amd64). Design Features Runtime module initialisation with dependencies Clear user-kernel separation of duties Userland owns the ELF loader, kernel uses a custom format for init. Object-based syscall API Kernel-provided window manager (yes, I know old windows did this) Progress Filesystems ISO9660 FAT12/16/32 Storage (P)ATA SATA (AHCI) ATAPI CDROM VirtIO Block Input PS2 Keyboard/Mouse Graphics Multiboot only GUI Apps Login (Credentials are root/password) ""GUI Shell"" (with background!) Text Terminal app (with basic set of commands) Filesystem viewer Architectures amd64 (aka x86_64) - Boots to limit of implementation armv7 - Loads userland then crashes Build Dependencies nasm imagemagick (for graphics) GNU Binutils (cross-compiled) GCC (for ACPICA) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thepowersgang/rust_os"	"—"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/thepowersgang/rust_os"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Applications written in Rust"	"Aaronepower/tokei"	"https://github.com/Aaronepower/tokei"	"— counts the lines of code"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"90"	"3"	"8"	"GitHub - Aaronepower/tokei: Count Code, Quickly. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 90 Fork 8 Aaronepower/tokei Code Issues 2 Pull requests 1 Pulse Graphs Count Code, Quickly. 160 commits 4 branches 10 releases 7 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages io lib master Nothing to show 3.0.0 2.1.0 2.0.0 1.6.0 1.5.0 1.3.1 1.2.0 1.1.1 1.1.0 1.0.0 Nothing to show New pull request Latest commit 4e671b5 Jun 12, 2016 Aaronepower removed syntex used new serde build process Permalink Failed to load latest commit information. src removed syntex used new serde build process Jun 12, 2016 .gitignore reimplemented comment syntax again, added OCaml, and Standard ML Jan 26, 2016 .travis.yml added files flag fixes: #19 Nov 26, 2015 CHANGELOG.md version bump plus updated readme and changelog Jun 11, 2016 CONTRIBUTING.md reimplemented comment syntax again, added OCaml, and Standard ML Jan 26, 2016 CONTRIBUTORS.md Added Luthaf to CONTRIBUTORS.md Sep 22, 2015 Cargo.lock removed syntex used new serde build process Jun 12, 2016 Cargo.toml removed syntex used new serde build process Jun 12, 2016 LICENCE-APACHE reimplemented comment syntax again, added OCaml, and Standard ML Jan 26, 2016 LICENCE-MIT reimplemented comment syntax again, added OCaml, and Standard ML Jan 26, 2016 README.md updated readme Jun 11, 2016 cli.yml removed syntex used new serde build process Jun 12, 2016 logo.png Added logo. May 24, 2016 logo.psd Added logo. May 24, 2016 README.md Tokei (時計) Tokei is a program that allows you to count code, quickly. Documentation Table of Contents Canonical Source Installation How to use Tokei Options Supported Languages Changelog Common Issues Copyright Canonical Source The canonical source of this repo is hosted on GitHub. If you have a GitHub account, please make your issues, and pull requests there. Installation Automatic If you have cargo 0.6.0>= installed just run the cargo install command. $ cargo install tokei Manual Fedora 64 bit Install rust and cargo from either the official page or use a copr repo such as Rust $ dnf copr enable phnxrbrn/tokei $ dnf install tokei Other $ git clone https://github.com/Aaronepower/tokei.git $ cd tokei $ cargo build --release Linux # sudo mv target/release/tokei /usr/local/bin  OSX # sudo mv target/release/tokei /usr/local/bin/tokei  Windows Create a folder for tokei search for env open ""edit your enviroment variables"" edit PATH append folder path to the end of the string ie: <path_stuff_here>;C:/tokei/; How to use Tokei Basic usage This is the basic way to use tokei. Which will report on the code in ./foo and all subfolders. $ tokei ./foo Multiple folders To have tokei report on multiple folders in the same call simply add a comma followed by another path. $ tokei ./foo, ./bar, ./baz Excluding folders The --exclude option will allow to pass in a sequence of string to exclude any path including those words $ tokei ./foo --exclude node_modules, target Sorting output By default tokei sorts alphabetically by language name, however using --sort tokei can also sort by any of the columns. blanks, code, comments, lines $ tokei ./foo --sort code Outputing file statistics By default tokei only outputs the total of the languages, and using --files flag tokei can also output individual file statistics. $ tokei ./foo --files Outputting into different formats Tokei normally outputs into a nice human readable format designed for the terminal. There is also using the --output option various other formats that are more useful for bringing the data into another program. Current supported formats JSON --output json YAML --output yaml TOML --output toml CBOR --output cbor $ tokei ./foo --output json Reading in stored formats Tokei can also take in the outputted formats added the previous results to it's current run. Tokei can take either a path to a file, the format passed in as a value to the option, or from stdin. $ tokei ./foo --input ./stats.json Options Tokei 3.0.0 Aaron P. <theaaronepower@gmail.com> Count Code, Quickly.  USAGE:     Tokei [FLAGS] [OPTIONS] <input>...  FLAGS:     -f, --files        Will print out statistics on individual files.     -h, --help         Prints help information     -l, --languages    Prints out supported languages and their extensions.     -V, --version      Prints version information  OPTIONS:     -e, --exclude <exclude>     Ignore all files & directories containing the word.     -i, --input <file_input>    Gives statistics from a previous tokei run. Can be given a file path, or ""stdin"" to read from stdin.     -o, --output <output>       Outputs Tokei in a specific format. [values: cbor, json, toml, yaml]     -s, --sort <sort>           Will sort based on column [values: files, lines, blanks, code, comments]  ARGS:     <input>...    The input file(s)/directory(ies)  Supported Languages If there is a language that you want added submit a pull request with the following information Name of language File Extension The comment syntax (Does it have block comments? is it the same as C?) ActionScript Assembly Autoconf BASH Batch C C Header Clojure CoffeeScript ColdFusion ColdFusion CFScript Coq C++ C++ Header C# C Shell CSS D Dart Device Tree Erlang FORTRAN Legacy FORTRAN Modern Go Haskell HTML Idris Isabelle JAI Java JavaScript Julia JSON JSX Kotlin LESS LD Script LISP Lua Makefile Markdown Mustache Nim Objective C Objective C++ OCaml Oz Pascal Perl Polly PHP Protocol Buffers Prolog Python QCL R Ruby Ruby HTML Rust Sass Scala Standard ML SQL Swift TeX Plain Text TOML TypeScript Vim Script Unreal Script Wolfram XML YAML Zsh  Common issues Tokei says I have a lot of D code, but I know there is no D code! This is likely due to gcc generating .d files. Until the D people decide on a different file extension, you can always exclude .d files using the -e --exclude flag like so $ tokei . -e .d  Copyright and License (C) Copyright 2015 by Aaron Power and contributors See CONTRIBUTORS.md for a full list of contributors. Tokei is distributed under the terms of both the MIT license and the Apache License (Version 2.0). See LICENCE-APACHE, LICENCE-MIT for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Aaronepower/tokei"	"— counts the lines of code"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/Aaronepower/tokei"	"— counts the lines of code"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— counts the lines of code"	"true"
"Applications written in Rust"	"buster/rrun"	"https://github.com/buster/rrun"	"— a command launcher for Linux, similar to gmrun"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"35"	"6"	"3"	"GitHub - buster/rrun: minimalistic command launcher in rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 35 Fork 3 buster/rrun Code Issues 6 Pull requests 0 Wiki Pulse Graphs minimalistic command launcher in rust 223 commits 3 branches 8 releases Fetching contributors Rust 87.5% Groff 6.7% Makefile 5.1% Shell 0.7% Rust Groff Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags glade_ui list_completion_cli master Nothing to show v0.2.0 v0.1.0 v0.0.6 v0.0.5 v0.0.3 v0.0.1 debian/0.0.4 0.2.1 Nothing to show New pull request Latest commit b4d9042 Jun 25, 2016 buster Update changelog for 0.2.1 release Permalink Failed to load latest commit information. debian Update changelog for 0.2.1 release Jun 25, 2016 src Update dependencies Jun 25, 2016 .gitignore Initial commit Nov 11, 2014 .travis.yml Remove feature for using Entry instead of SearchEntry Jan 11, 2016 Cargo.lock Update dependencies Jun 25, 2016 Cargo.toml Update changelog for 0.2.1 release Jun 25, 2016 LICENSE Initial commit Nov 11, 2014 Makefile define CARGO_HOME so that the build (hopefully) succeeds in cowbuilder Feb 2, 2016 README.rst Merge branch 'master' of github.com:buster/rrun Jan 9, 2016 install_gtk.sh Another shot at a containerized Travis build Jan 10, 2016 rrun.1 add debian package files Mar 26, 2015 rrun.gif update description and gif May 8, 2015 rustfmt.toml reformatting sourcecode with rustfmt Jan 1, 2016 README.rst rrun rrun is a minimalistic command launcher in rust similar to gmrun. It started as a playground to learn Rust, but since i use it all day for months now, it's probably useful for others as well. It replaced gmrun and gnome-do on my laptop. rrun has few features, it can do bash completion and run commands and that's it. It will also append the commands being run to your bash history. Dependencies GTK3.10+ Installation You have several options: download a Debian package from https://github.com/buster/rrun/releases install from crates.io with ""cargo install rrun"" compile yourself with ""cargo build"" Usage enter a command and press Return to execute it press TAB for tab completion of available commands Press Ctrl + Return to display the command output in the text field Set up rrun as command helper on Capslock I have mapped the unused, needless CapsLock key to some other key and set up Gnome or whatever (i3wm in my case) to launch rrun on keypress. My ~/.Xmodmap: remove Lock = Caps_Lock keysym Caps_Lock = XF86HomePage  Don't forget to run ""xmodmap ~/.Xmodmap"" after login. The relevant parts of ~/.i3/config: bindsym XF86HomePage exec rrun for_window [title=""rrun""] floating enable exec --no-startup-id xmodmap ~/.Xmodmap  How to build the package Creation of a cowbuilder image The build process needs pbuilder/cowbuilder installed in debian (apt-get install cowbuilder pbuilder). A Debian testing buid image can be created with: sudo cowbuilder --create --distribution testing  Eatmydata Installation Install eatmydata (on build machine and in the image) to speeding up dpkg (from https://wiki.debian.org/cowbuilder ): On the build machine: apt-get install eatmydata  In the build image: sudo cowbuilder --login --save apt-get install eatmydata  For eatmydata (>=82-2), add this /etc/pbuilderrc (on the build machine): if [ -z ""$LD_PRELOAD"" ]; then   LD_PRELOAD=libeatmydata.so else   LD_PRELOAD=""$LD_PRELOAD"":libeatmydata.so fi  export LD_PRELOAD  Package Build Process The debian package can be built with the following commands: make deb just creates the .deb file without touching the changelog make snapshot creates a snapshot .deb without incrementing the version number (but updating the changelog) make release creates a new release and bumps the minor version number Contributors @nightscape @tshepang Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/buster/rrun"	"— a command launcher for Linux, similar to gmrun"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/buster/rrun"	"— a command launcher for Linux, similar to gmrun"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a command launcher for Linux, similar to gmrun"	"true"
"Applications written in Rust"	"ogham/exa"	"https://github.com/ogham/exa"	"— a replacement for 'ls' written in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"759"	"24"	"44"	"GitHub - ogham/exa: Replacement for 'ls' written in Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 759 Fork 44 ogham/exa Code Issues 20 Pull requests 1 Pulse Graphs Replacement for 'ls' written in Rust. https://the.exa.website/ 590 commits 2 branches 4 releases 23 contributors Rust 95.1% Shell 2.7% Groff 1.8% Makefile 0.4% Rust Shell Groff Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop master Nothing to show v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 6522337 Jul 2, 2016 ogham committed on GitHub Merge pull request #114 from Lindenk/unix_types … Exa now recognizes pipes, devices, and sockets on unix systems Permalink Failed to load latest commit information. contrib Replace missing man page fields Nov 19, 2015 src Exa now recognizes pipes, devices, and sockets on unix systems. Fixes #… Jun 13, 2016 tests Fix, and add tests for, slashes in link paths Jun 11, 2016 .gitignore Add script to generate awkward testcases Sep 3, 2015 .travis.yml Stop Travis from getting hung up on read Jun 11, 2016 Cargo.lock Use only the time zone data present on the system Mar 31, 2016 Cargo.toml Convert exa into a library Apr 19, 2016 LICENCE Update LICENCE Jul 2, 2014 Makefile Correct Nightly errors in Makefile Feb 10, 2016 README.md Update homepage link May 24, 2016 generate-testcases.sh Make xattr tests optional for Travis Jun 11, 2016 screenshots.png Update screenshots Nov 23, 2015 README.md exa exa is a replacement for ls written in Rust. Works on all recent Rust versions >= 1.4.0. Screenshots Options exa’s options are similar, but not exactly the same, as ls. Display Options -1, --oneline: display one entry per line -G, --grid: display entries in a grid view (default) -l, --long: display extended details and attributes -R, --recurse: recurse into directories -T, --tree: recurse into subdirectories in a tree view -x, --across: sort multi-column view entries across --color, --colour: when to colourise the output Filtering Options -a, --all: show dot files -d, --list-dirs: list directories as regular files -L, --level=(depth): maximum depth of recursion -r, --reverse: reverse sort order -s, --sort=(field): field to sort by --group-directories-first: list directories before other files Long View Options These options are available when running with --long (-l): -b, --binary: use binary (power of two) file sizes -B, --bytes: list file sizes in bytes, without prefixes -g, --group: show group as well as user -h, --header: show a header row -H, --links: show number of hard links column -i, --inode: show inode number column -m, --modified: display timestamp of most recent modification -S, --blocks: show number of file system blocks -t, --time=(field): which timestamp to show for a file -u, --accessed: display timestamp of last access for a file -U, --created: display timestamp of creation of a file -@, --extended: display extended attribute keys and sizes --git: show Git status for a file Accepted --color options are always, automatic, and never. Valid sort fields are name, size, extension, modified, accessed, created, inode, and none. Valid time fields are modified, accessed, and created. Installation exa is written in Rust. Once you have it set up, a simple make install will compile exa and install it into /usr/local/bin. exa depends on libgit2 for certain features. If you’re unable to compile libgit2, you can opt out of Git support by running cargo build --release --no-default-features. Cargo Install If you're using a recent version of Cargo (0.5.0 or higher), you can use the cargo install command: cargo install --git https://github.com/ogham/exa  or: cargo install --no-default-features --git https://github.com/ogham/exa  Cargo will clone the repository to a temporary directory, build it there and place the exa binary to: $HOME/.cargo (and can be overridden by setting the --root option). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ogham/exa"	"— a replacement for 'ls' written in Rust"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/ogham/exa"	"— a replacement for 'ls' written in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a replacement for 'ls' written in Rust"	"true"
"Applications written in Rust"	"mmstick/systemd-manager"	"https://github.com/mmstick/systemd-manager"	"— a systemd service manager written in Rust using GTK-rs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"246"	"24"	"8"	"GitHub - mmstick/systemd-manager: A systemd service manager written in Rust with the GTK-rs wrapper and direct integration with dbus Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 246 Fork 8 mmstick/systemd-manager Code Issues 6 Pull requests 1 Pulse Graphs A systemd service manager written in Rust with the GTK-rs wrapper and direct integration with dbus 122 commits 2 branches 11 releases Fetching contributors Rust 97.0% Makefile 2.9% Shell 0.1% Rust Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 1.0.0 0.4.7 0.4.6 0.4.5 0.4.3 0.4.2 0.3.3 0.3.2 0.3.1 0.3.0 0.2.1 Nothing to show New pull request Latest commit a83a102 Jun 28, 2016 mmstick Version 1.0.0 Release … This signifies that the GTK crates have matured enough that I can finally publish this to Crates.io Permalink Failed to load latest commit information. assets Use LTO & Detect Architecture on Ubuntu May 27, 2016 src Update Libs & Wrap Journal Lines Jun 28, 2016 .gitignore Version 0.4.7 Jun 12, 2016 .travis.yml Add Travis Support May 13, 2016 Cargo.lock Version 1.0.0 Release Jun 28, 2016 Cargo.toml Version 1.0.0 Release Jun 29, 2016 LICENSE MIT License & Makefile Changes Jun 14, 2016 Makefile Use Cargo Deb Jun 16, 2016 README.md Add Fedora RPM Instructions Jun 18, 2016 screenshot-analyze.png Update Screenshots May 24, 2016 screenshot-journal.png Update Screenshots May 25, 2016 screenshot-services.png Update Screenshots May 25, 2016 screenshot-sockets.png Update Screenshots May 25, 2016 screenshot-timers.png Update Screenshots May 25, 2016 README.md Build Status: Systemd Manager This application is a systemd service manager written in the Rust programming language with GTK3 as the graphical user interface of choice. The units are filtered into three separate lists: services, sockets, and timers. As a unit is selected in the left pane, the right pane is updated with information pertaining to that unit, and the right headerbar is updated to reflect the status of the unit where you may disable/enable and start/stop the selected unit. Services are units that are activated immediately, sockets are units that are activated when they are needed, and timers are units that activate on a regular time interval. In addition to display units, the application also provides stats generated by systemd-analyze on the Systemd Analyze view. Install Instructions Arch Linux This is available in the AUR as a git package: systemd-manager-git. Fedora RPM repositories have been made available for Fedora 22, 23 and 24 by Nuno Dias. Ubuntu There are currently no PPAs to provide at this time. However, I am providing Debian packages which should largely be a two or three click install. This package should work on all Debian-based distributions that ship a version of GTK that is newer than GTK 3.16. https://github.com/mmstick/systemd-manager/releases/download/0.4.7/systemd-manager_0.4.7_amd64.deb Building From Source Debian/Ubuntu For Debian-based users, ensure that you have installed the cargo-deb subcommand. The cargo-deb subcommand build and generate a Debian package based on information in the Cargo.toml file automatically. sudo apt install libgtk-3-dev -y cargo install --git https://github.com/mmstick/cargo-deb git clone https://github.com/mmstick/systemd-manager cd systemd-manager cargo deb && sudo dpkg -i systemd-manager*.deb Everyone else This will simply install directly to the /usr prefix. Simply install Rust via rustup.rs and execute make & sudo make install. The installation of Rust software is incredibly simple as the process is largely just cargo build --release, but this installation script will install all the files needed by the application for proper integration with PolicyKit into the correct places in the filesystem, which cargo install does not perform. git clone https://github.com/mmstick/systemd-manager && cd systemd-manager && make && sudo make install In the event that you would like to uninstall the application, simply run the following: sudo make uninstall Screenshots Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mmstick/systemd-manager"	"— a systemd service manager written in Rust using GTK-rs."	"true"
"Applications written in Rust"	"mmstick/tv-renamer"	"https://github.com/mmstick/tv-renamer"	"— a tv series renaming application with an optional GTK3 frontend."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"35"	"4"	"5"	"GitHub - mmstick/tv-renamer: A TV series renaming application written in the Rust programming langauge that supports adding titles to episodes using TVDB and with both a CLI and GTK3 interface Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 35 Fork 5 mmstick/tv-renamer Code Issues 0 Pull requests 0 Pulse Graphs A TV series renaming application written in the Rust programming langauge that supports adding titles to episodes using TVDB and with both a CLI and GTK3 interface 42 commits 1 branch 4 releases 1 contributor Rust 97.0% Makefile 3.0% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.2.6 0.2.5 0.2.4 0.2.3 Nothing to show New pull request Latest commit cf3a0c7 Jun 16, 2016 mmstick Strip Binary for Debian Package Permalink Failed to load latest commit information. assets Utilize Cargo Deb Jun 16, 2016 src Busybox Style & Enable LTO Jun 13, 2016 .gitignore GTK3 GUI Improvements Jun 3, 2016 .travis.yml Attempt to Fix Travis May 9, 2016 Cargo.lock Version Bump to 0.2.6 Jun 12, 2016 Cargo.toml Utilize Cargo Deb Jun 17, 2016 LICENSE MIT License & Support for Building Debian Packages Jun 13, 2016 Makefile Strip Binary for Debian Package Jun 16, 2016 README.md Utilize Cargo Deb Jun 17, 2016 screenshot-cli.png Update CLI Screenshot May 12, 2016 screenshot-gtk3.png GTK3 GUI Improvements Jun 4, 2016 README.md Build Status: Features Written safely in Rust! Detection of video content only via /etc/mime.types Templates to customizing naming schemes TVDB Support for obtaining episode titles from TheTVDB Automatically inferring series titles based on directory path Ability to rename multiple seasons and specials CLI and GTK3 interfaces Busybox-style binary Installation Instructions This project is using a Makefile for generating a busybox-style binary, named tv-renamer, which provides two options: cli and gtk. Ensure that you have a modern stable version of Rust installed via rustup. If you are packaging for Debian, ensure that you have cargo deb installed. The default make option will build the binary with the GTK3 interface feature enabled. To build without the GTK3 interface, use make cli instead of make. With GTK3 Enabled make && sudo make install CLI-only make cli && sudo make install-cli GTK3 Manual The use of this application should be fairly straightforward. The program uses the /etc/mime.types file to only detect videos in a given directory, and does not make a distinction between what is or is not part of the series, so ensure that the only video files in the directory that you are renaming contains the episodes that you are wanting to rename, and ensure that the episodes are in alphabetical order. The application does not derive the episode number from the episode name, but by their alphabetical order in the directory. Season Name: The name of the TV series to be renamed. This will be automatically inferred from the directory path if no name is set. Season Directory: If Automatic is enabled, set this to the base directory of the TV series. Otherwise, set this to the season directory that you are currently renaming. Template: Defines the naming scheme to use when renaming episodes. Season Number and Episode Number: Defines what index to start counting from. These are ignored when Automatic is enabled. Log Changes will simply log changes that have been performed on the disk. Automatic: Rename all seasons within a TV series directory. The directory structure for Automatic should be as follows: Series Title/Specials/{Episodes...} Series Title/Season 1/{Episodes...} Series Title/Season 2/{Episodes...} CLI Manual If you need help with the usage of the CLI application, this manual page is also included in the program and is invokable with the -h and --help flags. The CLI interface is invoked by executing tv-renamer cli, followed by your arguments of choice. NAME: tv-renamer - rename TV series and movies DESCRIPTION: Renames all videos in a directory according to their season number and episode count. Please ensure that all of the files in the directory are files that you want renamed. It is recommended to use the dry-run option first before committing any changes. If no DIRECTORY is given, the default path will be the current working directory. If a target file already exists, the command will skip the file. OPTIONS: -a, --automatic: Automatically infer the season name and number based on the directory structure. -d, --dry-run: Runs through all of the files and prints what would happen without doing anything. -l, --log-changes: Log changes made to the disk to a file in your home directory. -n, --series-name: Sets the name of the series to be renamed. [not optional] -s, --season-number: Sets the season number to use when renaming a file. [default: 1] -t, --template: Sets the template that will define the naming scheme. [default: ""${Series} ${Season}x${Episode} ${TVDB_Title}""] -e, --episode-start: Sets the episode number to start counting from. [default: 1] -p, --pad-length: Sets the number of digits to pad the episode count for. [default: 2] -v, --verbose: Print the changes that are occurring. EXAMPLE: When executed inside of a directory with the name of the TV Series one.mkv two.mkv three.mkv > tv-renamer cli -n ""series name"" ""TV Series 1x01 Episode Title.mkv"" ""TV Series 1x02 Episode Title.mkv"" ""TV Series 1x03 Episode Title.mkv""  You can define your own naming scheme with --template: > one.mkv two.mkv three.mkv > tv-renamer cli -t ""${Series} S${Season}E${Episode} - ${TVDB_Title}"" > ""TV Series S1E01 - Episode Title.mkv"" ""TV Series S1E02 - Episode Title.mkv"" ""TV Series S1E03 - Episode Title.mkv""  The season name can also be automatically inferred: ""$series/Season1"" ""$series/Season2"" > tv-renamer cli ""$series"" -a OR cd $series && tv-renamer cli -a ""TV Series/Season1/TV Series 1x01.mkv"" ... ""TV Series/Season2/TV Series 2x01.mkv"" ...  Episode titles can also be pulled from the TVDB and added to the filenames. > tv-renamer cli -a -t ""${Series} ${Season}x${Episode} ${TVDB_Title}"" ""TV Series/Season1/TV Series 1x01 Episode Title.mkv""  AUTHOR: Written by Michael Aaron Murphy. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mmstick/tv-renamer"	"— a tv series renaming application with an optional GTK3 frontend."	"true"
"Applications written in Rust"	""	"https://travis-ci.org/mmstick/tv-renamer"	"— a tv series renaming application with an optional GTK3 frontend."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a tv series renaming application with an optional GTK3 frontend."	"true"
"Applications written in Rust"	"uutils/coreutils"	"https://github.com/uutils/coreutils"	"— a cross-platform Rust rewrite of the GNU coreutils"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2900"	"142"	"268"	"GitHub - uutils/coreutils: Cross-platform Rust rewrite of the GNU coreutils Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 142 Star 2,900 Fork 268 uutils/coreutils Code Issues 61 Pull requests 6 Pulse Graphs Cross-platform Rust rewrite of the GNU coreutils 1,891 commits 3 branches 0 releases 101 contributors Rust 99.5% Other 0.5% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master revert-805-master Nothing to show Nothing to show New pull request Latest commit 40ae11b Jul 14, 2016 mpkh committed on GitHub Merge pull request #914 from beneills/implement-install … Implement install Permalink Failed to load latest commit information. src Fix type synonym relaiance which breaks some rusts Jul 13, 2016 tests Allow specification of mode strings for install Jul 13, 2016 .busybox-config Fix more bugs to pass Busybox tests Jul 24, 2014 .gitignore Split utility files into separate library. Nov 24, 2015 .travis.yml travis: build/test everything on stable Mar 23, 2016 CONTRIBUTING.md CONTRIBUTING: add guidelines for commit msgs Mar 26, 2016 Cargo.lock Allow specification of mode strings for install Jul 13, 2016 Cargo.toml Implement skeleton install utility Jul 12, 2016 LICENSE Add the first four utils Aug 2, 2013 Makefile Remove tab from Makefile Jul 13, 2016 README.md Remove install utility from README list Jul 12, 2016 appveyor.yml appveyor: don't double build May 22, 2016 build.rs hashsum: add support for SHA-3 functions Apr 16, 2016 README.md uutils coreutils uutils is an attempt at writing universal (as in cross-platform) CLI utils in Rust. This repo is to aggregate the GNU coreutils rewrites. Why? Many GNU, Linux and other utils are pretty awesome, and obviously some effort has been spent in the past to port them to Windows. However, those projects are either old, abandoned, hosted on CVS, written in platform-specific C, etc. Rust provides a good, platform-agnostic way of writing systems utils that are easy to compile anywhere, and this is as good a way as any to try and learn it. Build Instructions To simply build all available utilities: make  (on Windows use MinGW/MSYS or Cygwin make and make sure you have rustc in PATH) To build all but a few of the available utilities: make SKIP_UTILS='UTILITY_1 UTILITY_2'  To build only a few of the available utilities: make UTILS='UTILITY_1 UTILITY_2'  Installation Instructions To install all available utilities: make install  To install all but a few of the available utilities: make SKIP_UTILS='UTILITY_1 UTILITY_2' install  To install only a few of the available utilities: make UTILS='UTILITY_1 UTILITY_2' install  To install every program with a prefix (e.g. uu-echo uu-cat): make PROG_PREFIX=PREFIX_GOES_HERE install  To install the multicall binary: make MULTICALL=y install  Set install parent directory (default value is /usr/local): make PREFIX=/my/path install  Uninstallation Instructions To uninstall all utilities: make uninstall  To uninstall every program with a set prefix: make PROG_PREFIX=PREFIX_GOES_HERE uninstall  To uninstall the multicall binary: make MULTICALL=y uninstall  To uninstall from a custom parent directory: make PREFIX=/my/path uninstall  Test Instructions To simply test all available utilities: make test  To test all but a few of the available utilities: make SKIP_UTILS='UTILITY_1 UTILITY_2' test  To test only a few of the available utilities: make UTILS='UTILITY_1 UTILITY_2' test  To include tests for unimplemented behavior: make UTILS='UTILITY_1 UTILITY_2' SPEC=y test  Run busybox tests This testing functionality is only available on *nix operating systems To run busybox's tests for all utilities for which busybox has tests make busytest  To run busybox's tests for a few of the available utilities make UTILS='UTILITY_1 UTILITY_2' busytest  To pass an argument like ""-v"" to the busybox test runtime make UTILS='UTILITY_1 UTILITY_2' RUNTEST_ARGS='-v' busytest  Contribute To contribute to coreutils, please see CONTRIBUTING. To do chcon chgrp chown copy cp (not much done) csplit date dd df expr (almost done, no regular expressions) getlimits join ls mv (almost done, one more option) numfmt od (in progress, needs lots of work) pinky pr printf remove runcon setuidgid sort (a couple of options implemented) split (a couple of missing options) stty tail (not all features implemented) test (not all features implemented) uniq (a couple of missing options) who License uutils is licensed under the MIT License - see the LICENSE file for details Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/uutils/coreutils"	"— a cross-platform Rust rewrite of the GNU coreutils"	"true"
"Applications written in Rust"	""	"https://travis-ci.org/uutils/coreutils"	"— a cross-platform Rust rewrite of the GNU coreutils"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a cross-platform Rust rewrite of the GNU coreutils"	"true"
"Development tools"	"Clippy"	"https://github.com/Manishearth/rust-clippy"	"[] — Rust lints"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"764"	"26"	"84"	"GitHub - Manishearth/rust-clippy: A bunch of lints to catch common mistakes and improve your Rust code Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 764 Fork 84 Manishearth/rust-clippy Code Issues 217 Pull requests 6 Wiki Pulse Graphs A bunch of lints to catch common mistakes and improve your Rust code 1,679 commits 11 branches 20 releases 58 contributors Rust 98.3% Python 1.7% Rust Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags const_cast cow doc foo fx-1049 ice master rustup-fixed servo shadow unsafe_ptr_arg_deref Nothing to show v0.0.79 v0.0.78 v0.0.77 v0.0.76 v0.0.75 v0.0.74 v0.0.73 v0.0.72 v0.0.71 v0.0.70 v0.0.69 v0.0.68 v0.0.67 v0.0.66 v0.0.65 v0.0.64 v0.0.63 v0.0.62 v0.0.56 v0.0.51 Nothing to show New pull request Latest commit 13a30ae Jul 16, 2016 mcarton Run `./util/update_lints.py` Permalink Failed to load latest commit information. .github Add a issue template and specify a *recent* nightly is needed Jun 10, 2016 clippy_lints Improve docs Jul 16, 2016 mini-macro Rustup to ea0dc9297283daff6486807f43e190b4eb561412 Jul 1, 2016 src don't run clippy on dependencies when running cargo clippy Jul 4, 2016 tests Fix position of mut in toplevel-ref-arg (fixes #1100, again) Jul 15, 2016 util Include restriction lints in the wiki Jun 17, 2016 .gitignore split clippy into lints, plugin and cargo-clippy May 27, 2016 .remarkrc.json use .remarkrc.json for travis May 6, 2016 .travis.yml don't depend on regex_macros anymore Jun 25, 2016 CHANGELOG.md Fix markdown in CHANGELOG Jul 15, 2016 CONTRIBUTING.md Update contributing with new links Mar 28, 2016 Cargo.toml Bump to 0.0.79 Jul 10, 2016 README.md Run `./util/update_lints.py` Jul 16, 2016 rustfmt.toml Rustfmt config Jan 4, 2016 README.md rust-clippy A collection of lints to catch common mistakes and improve your Rust code. Table of contents: Lint list Usage instructions Configuration clippy-service License Lints There are 158 lints included in this crate: name default meaning absurd_extreme_comparisons warn a comparison involving a maximum or minimum value involves a case that is always true or always false almost_swapped warn foo = bar; bar = foo sequence approx_constant warn the approximate of a known float constant (in std::f64::consts or std::f32::consts) is found; suggests to use the constant assign_op_pattern warn assigning the result of an operation on a variable to that same variable assign_ops allow any assignment operation bad_bit_mask warn expressions of the form _ & mask == select that will only ever return true or false (because in the example select containing bits that mask doesn't have) blacklisted_name warn usage of a blacklisted/placeholder name block_in_if_condition_expr warn braces can be eliminated in conditions that are expressions, e.g if { true } ... block_in_if_condition_stmt warn avoid complex blocks in conditions, instead move the block higher and bind it with 'let'; e.g: if { let x = true; x } ... bool_comparison warn comparing a variable to a boolean, e.g. if x == true box_vec warn usage of Box<Vec<T>>, vector elements are already on the heap boxed_local warn using Box<T> where unnecessary cast_possible_truncation allow casts that may cause truncation of the value, e.g x as u8 where x: u32, or x as i32 where x: f32 cast_possible_wrap allow casts that may cause wrapping around the value, e.g x as i32 where x: u32 and x > i32::MAX cast_precision_loss allow casts that cause loss of precision, e.g x as f32 where x: u64 cast_sign_loss allow casts from signed types to unsigned types, e.g x as u32 where x: i32 char_lit_as_u8 warn Casting a character literal to u8 chars_next_cmp warn using .chars().next() to check if a string starts with a char clone_double_ref warn using clone on &&T clone_on_copy warn using clone on a Copy type cmp_nan deny comparisons to NAN (which will always return false, which is probably not intended) cmp_owned warn creating owned instances for comparing with others, e.g. x == ""foo"".to_string() collapsible_if warn ifs that can be collapsed (e.g. if x { if y { … } } and else { if x { … } }) crosspointer_transmute warn transmutes that have to or from types that are a pointer to the other cyclomatic_complexity warn finds functions that should be split up into multiple functions deprecated_semver warn Warn on #[deprecated(since = ""x"")] where x is not semver derive_hash_xor_eq warn deriving Hash but implementing PartialEq explicitly doc_markdown warn checks for the presence of _, :: or camel-case outside ticks in documentation double_neg warn --x is a double negation of x and not a pre-decrement as in C or C++ drop_ref warn call to std::mem::drop with a reference instead of an owned value, which will not call the Drop::drop method on the underlying value duplicate_underscore_argument warn Function arguments having names which only differ by an underscore empty_loop warn empty loop {} detected enum_clike_unportable_variant warn finds C-like enums that are repr(isize/usize) and have values that don't fit into an i32 enum_glob_use allow finds use items that import all variants of an enum enum_variant_names warn finds enums where all variants share a prefix/postfix eq_op warn equal operands on both sides of a comparison or bitwise combination (e.g. x == x) expl_impl_clone_on_copy warn implementing Clone explicitly on Copy types explicit_counter_loop warn for-looping with an explicit counter when _.enumerate() would do explicit_iter_loop warn for-looping over _.iter() or _.iter_mut() when &_ or &mut _ would do extend_from_slice warn .extend_from_slice(_) is a faster way to extend a Vec by a slice filter_map allow using combinations of filter, map, filter_map and flat_map which can usually be written as a single method call filter_next warn using filter(p).next(), which is more succinctly expressed as .find(p) float_arithmetic allow Any floating-point arithmetic statement float_cmp warn using == or != on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds) for_kv_map warn looping on a map using iter when keys or values would do for_loop_over_option warn for-looping over an Option, which is more clearly expressed as an if let for_loop_over_result warn for-looping over a Result, which is more clearly expressed as an if let identity_op warn using identity operations, e.g. x + 0 or y / 1 if_not_else allow finds if branches that could be swapped so no negation operation is necessary on the condition if_same_then_else warn if with the same then and else blocks ifs_same_cond warn consecutive ifs with the same condition indexing_slicing allow indexing/slicing usage ineffective_bit_mask warn expressions where a bit mask will be rendered useless by a comparison, e.g. (x | 1) > 2 inline_always warn #[inline(always)] is a bad idea in most cases integer_arithmetic allow Any integer arithmetic statement invalid_regex deny finds invalid regular expressions invalid_upcast_comparisons allow a comparison involving an upcast which is always true or false items_after_statements allow finds blocks where an item comes after a statement iter_next_loop warn for-looping over _.next() which is probably not intended iter_nth warn using .iter().nth() on a standard library type with O(1) element access len_without_is_empty warn traits and impls that have .len() but not .is_empty() len_zero warn checking .len() == 0 or .len() > 0 (or similar) when .is_empty() could be used instead let_and_return warn creating a let-binding and then immediately returning it like let x = expr; x at the end of a block let_unit_value warn creating a let binding to a value of unit type, which usually can't be used afterwards linkedlist warn usage of LinkedList, usually a vector is faster, or a more specialized data structure like a VecDeque logic_bug warn checks for boolean expressions that contain terminals which can be eliminated manual_swap warn manual swap many_single_char_names warn too many single character bindings map_clone warn using .map(|x| x.clone()) to clone an iterator or option's contents (recommends .cloned() instead) map_entry warn use of contains_key followed by insert on a HashMap or BTreeMap match_bool warn a match on boolean expression; recommends if..else block instead match_overlapping_arm warn a match has overlapping arms match_ref_pats warn a match or if let has all arms prefixed with &; the match expression can be dereferenced instead match_same_arms warn match with identical arm bodies mem_forget allow mem::forget usage on Drop types is likely to cause memory leaks min_max warn min(_, max(_, _)) (or vice versa) with bounds clamping the result to a constant modulo_one warn taking a number modulo 1, which always returns 0 mut_mut allow usage of double-mut refs, e.g. &mut &mut ... mutex_atomic warn using a mutex where an atomic value could be used instead mutex_integer allow using a mutex for an integer type needless_bool warn if-statements with plain booleans in the then- and else-clause, e.g. if p { true } else { false } needless_borrow warn taking a reference that is going to be automatically dereferenced needless_lifetimes warn using explicit lifetimes for references in function arguments when elision rules would allow omitting them needless_range_loop warn for-looping over a range of indices where an iterator over items would do needless_return warn using a return statement like return expr; where an expression would suffice needless_update warn using Foo { ..base } when there are no missing fields neg_multiply warn Warns on multiplying integers with -1 new_ret_no_self warn not returning Self in a new method new_without_default warn fn new() -> Self method without Default implementation new_without_default_derive warn fn new() -> Self without #[derive]able Default implementation no_effect warn statements with no effect non_ascii_literal allow using any literal non-ASCII chars in a string literal; suggests using the \\u escape instead nonminimal_bool allow checks for boolean expressions that can be written more concisely nonsensical_open_options warn nonsensical combination of options for opening a file not_unsafe_ptr_arg_deref warn public functions dereferencing raw pointer arguments but not marked unsafe ok_expect warn using ok().expect(), which gives worse error messages than calling expect directly on the Result option_map_unwrap_or warn using Option.map(f).unwrap_or(a), which is more succinctly expressed as map_or(a, f) option_map_unwrap_or_else warn using Option.map(f).unwrap_or_else(g), which is more succinctly expressed as map_or_else(g, f) option_unwrap_used allow using Option.unwrap(), which should at least get a better message using expect() or_fun_call warn using any *or method when the *or_else would do out_of_bounds_indexing deny out of bound constant indexing overflow_check_conditional warn Using overflow checks which are likely to panic panic_params warn missing parameters in panic! precedence warn catches operations where precedence may be unclear print_stdout allow printing on stdout ptr_arg warn fn arguments of the type &Vec<...> or &String, suggesting to use &[...] or &str instead, respectively range_step_by_zero warn using Range::step_by(0), which produces an infinite iterator range_zip_with_len warn zipping iterator with a range when enumerate() would do redundant_closure warn using redundant closures, i.e. |a| foo(a) (which can be written as just foo) redundant_closure_call warn Closures should not be called in the expression they are defined redundant_pattern warn using name @ _ in a pattern regex_macro warn finds use of regex!(_), suggests Regex::new(_) instead result_unwrap_used allow using Result.unwrap(), which might be better handled reverse_range_loop warn Iterating over an empty range, such as 10..0 or 5..5 search_is_some warn using an iterator search followed by is_some(), which is more succinctly expressed as a call to any() shadow_reuse allow rebinding a name to an expression that re-uses the original value, e.g. let x = x + 1 shadow_same allow rebinding a name to itself, e.g. let mut x = &mut x shadow_unrelated allow The name is re-bound without even using the original value should_implement_trait warn defining a method that should be implementing a std trait similar_names allow similarly named items and bindings single_char_pattern warn using a single-character str where a char could be used, e.g. _.split(""x"") single_match warn a match statement with a single nontrivial arm (i.e, where the other arm is _ => {}) is used; recommends if let instead single_match_else allow a match statement with a two arms where the second arm's pattern is a wildcard; recommends if let instead string_add allow using x + .. where x is a String; suggests using push_str() instead string_add_assign allow using x = x + .. where x is a String; suggests using push_str() instead string_lit_as_bytes warn calling as_bytes on a string literal; suggests using a byte string literal instead stutter allow finds type names prefixed/postfixed with their containing module's name suspicious_assignment_formatting warn suspicious formatting of *=, -= or != suspicious_else_formatting warn suspicious formatting of else if temporary_assignment warn assignments to temporaries temporary_cstring_as_ptr warn getting the inner pointer of a temporary CString too_many_arguments warn functions with too many arguments toplevel_ref_arg warn An entire binding was declared as ref, in a function argument (fn foo(ref x: Bar)), or a let statement (let ref x = foo()). In such cases, it is preferred to take references with &. transmute_ptr_to_ref warn transmutes from a pointer to a reference type trivial_regex warn finds trivial regular expressions type_complexity warn usage of very complex types; recommends factoring out parts into type definitions unicode_not_nfc allow using a unicode literal not in NFC normal form (see unicode tr15 for further information) unit_cmp warn comparing unit values (which is always true or false, respectively) unnecessary_mut_passed warn an argument is passed as a mutable reference although the function/method only demands an immutable reference unnecessary_operation warn outer expressions with no effect unneeded_field_pattern warn Struct fields are bound to a wildcard instead of using .. unsafe_removed_from_name warn unsafe removed from name unused_collect warn collect()ing an iterator without using the result; this is usually better written as a for loop unused_label warn unused label unused_lifetimes warn unused lifetimes in function definitions use_debug allow use Debug-based formatting used_underscore_binding allow using a binding which is prefixed with an underscore useless_format warn useless use of format! useless_let_if_seq warn Checks for unidiomatic let mut declaration followed by initialization in if useless_transmute warn transmutes that have the same to and from types or could be a cast/coercion useless_vec warn useless vec! while_let_loop warn loop { if let { ... } else break } can be written as a while let loop while_let_on_iterator warn using a while-let loop instead of a for loop on an iterator wrong_pub_self_convention allow defining a public method named with an established prefix (like ""into_"") that takes self with the wrong convention wrong_self_convention warn defining a method named with an established prefix (like ""into_"") that takes self with the wrong convention wrong_transmute warn transmutes that are confusing at best, undefined behaviour at worst and always useless zero_divided_by_zero warn usage of 0.0 / 0.0 to obtain NaN instead of std::f32::NaN or std::f64::NaN zero_width_space deny using a zero-width space in a string literal, which is confusing More to come, please file an issue if you have ideas! Usage As a general rule clippy will only work with the latest Rust nightly for now. As a Compiler Plugin Since stable Rust is backwards compatible, you should be able to compile your stable programs with nightly Rust with clippy plugged in to circumvent this. Add in your Cargo.toml: [dependencies] clippy = ""*"" You then need to add #![feature(plugin)] and #![plugin(clippy)] to the top of your crate entry point (main.rs or lib.rs). Sample main.rs: #![feature(plugin)]  #![plugin(clippy)]   fn main(){     let x = Some(1u8);     match x {         Some(y) => println!(""{:?}"", y),         _ => ()     } } Produces this warning: src/main.rs:8:5: 11:6 warning: you seem to be trying to use match for destructuring a single type. Consider using `if let`, #[warn(single_match)] on by default src/main.rs:8     match x { src/main.rs:9         Some(y) => println!(""{:?}"", y), src/main.rs:10         _ => () src/main.rs:11     } src/main.rs:8:5: 11:6 help: Try if let Some(y) = x { println!(""{:?}"", y) }  As a cargo subcommand (cargo clippy) An alternate way to use clippy is by installing clippy through cargo as a cargo subcommand. cargo install clippy  Now you can run clippy by invoking cargo clippy, or multirust run nightly cargo clippy directly from a directory that is usually compiled with stable. In case you are not using multirust, you need to set the environment flag SYSROOT during installation so clippy knows where to find librustc and similar crates. SYSROOT=/path/to/rustc/sysroot cargo install clippy  Running clippy from the command line without installing To have cargo compile your crate with clippy without needing #![plugin(clippy)] in your code, you can use: cargo rustc -- -L /path/to/clippy_so -Z extra-plugins=clippy  Note: Be sure that clippy was compiled with the same version of rustc that cargo invokes here! Optional dependency If you want to make clippy an optional dependency, you can do the following: In your Cargo.toml: [dependencies] clippy = {version = ""*"", optional = true}  [features] default = [] And, in your main.rs or lib.rs: #![cfg_attr(feature=""clippy"", feature(plugin))]  #![cfg_attr(feature=""clippy"", plugin(clippy))] Then build by enabling the feature: cargo build --features ""clippy"" Instead of adding the cfg_attr attributes you can also run clippy on demand: cargo rustc --features clippy -- -Z no-trans -Z extra-plugins=clippy (the -Z no trans, while not neccessary, will stop the compilation process after typechecking (and lints) have completed, which can significantly reduce the runtime). Configuration Some lints can be configured in a clippy.toml file. It contains basic variable = value mapping eg. blacklisted-names = [""toto"", ""tata"", ""titi""] cyclomatic-complexity-threshold = 30 See the wiki for more information about which lints can be configured and the meaning of the variables. You can also specify the path to the configuration file with: #![plugin(clippy(conf_file=""path/to/clippy's/configuration""))] To deactivate the “for further information visit wiki-link” message you can define the CLIPPY_DISABLE_WIKI_LINKS environment variable. Allowing/denying lints You can add options to allow/warn/deny: the whole set of Warn lints using the clippy lint group (#![deny(clippy)]) all lints using both the clippy and clippy_pedantic lint groups (#![deny(clippy)], #![deny(clippy_pedantic)]). Note that clippy_pedantic contains some very aggressive lints prone to false positives. only some lints (#![deny(single_match, box_vec)], etc) allow/warn/deny can be limited to a single function or module using #[allow(...)], etc Note: deny produces errors instead of warnings. Link with clippy service clippy-service is a rust web initiative providing rust-clippy as a web service. Both projects are independent and maintained by different people (even if some clippy-service's contributions are authored by some rust-clippy members). You can check out this great service at clippy.bashy.io. License Licensed under MPL. If you're having issues with the license, let me know and I'll try to change it to something more permissive. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Manishearth/rust-clippy"	"[] — Rust lints"	"true"
"Development tools"	"clippy"	"https://crates.io/crates/clippy"	"[] — Rust lints"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — Rust lints"	"true"
"Development tools"	""	"https://travis-ci.org/Manishearth/rust-clippy"	"[] — Rust lints"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — Rust lints"	"true"
"Development tools"	"clog-tool/clog-cli"	"https://github.com/clog-tool/clog-cli"	"— generates a changelog from git metadata ()"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"214"	"10"	"15"	"GitHub - clog-tool/clog-cli: Generate beautiful changelogs from your Git commit history Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 214 Fork 15 clog-tool/clog-cli Code Issues 14 Pull requests 1 Pulse Graphs Generate beautiful changelogs from your Git commit history 184 commits 14 branches 15 releases Fetching contributors Rust 95.6% Makefile 4.4% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags config-bug imp-regex issue-44 issue-47 issue-54 issue_10 issues-57-and-58 master patch-31 patch-34 rustfmt travis-stable travis-update update Nothing to show 0.9.2 0.9.1 0.9.0 0.8.2 0.8.1 0.8.0 0.7.0 0.6.0 0.5.0 0.4.0 0.3.2 0.3.1 0.3.0 0.2.0 0.0.1 Nothing to show New pull request Latest commit 0160835 Jun 17, 2016 benaryorg committed with cburgdorf docs(README.md): adds instructions for cargo install (#90) … Signed-off-by: benaryorg <binary@benary.org> Permalink Failed to load latest commit information. src chore: dep updates Apr 4, 2016 .clog.toml .gitignore style: another rustfmt run Oct 1, 2015 .travis.yml Cargo.lock Cargo.toml LICENSE Initial commit Sep 13, 2014 Makefile docs: updates docs to new implementations Jul 24, 2015 README.md docs(README.md): adds instructions for cargo install (#90) Jun 17, 2016 changelog.md chore: increase version Apr 4, 2016 rustfmt.toml chore: reformat code using rustfmt Sep 8, 2015 README.md clog-cli A conventional changelog for the rest of us About clog creates a changelog automatically from your local git metadata. See the clogs changelog.md for an example. The way this works, is every time you make a commit, you ensure your commit subject line follows the conventional format. Then when you wish to update your changelog, you simply run clog inside your local repository with any options you'd like to specify. NOTE: clog also supports empty components by making commit messages such as alias: message or alias(): message (i.e. without the component) Usage There are two ways to use clog, as a binary via the command line or as a library in your applications via clog-lib. Binary (Command Line) In order to use clog via the command line you must first obtain a binary by either compiling it yourself, or downlading and installing one of the precompiled binaries. cargo install If you want to both compile and install clog using cargo you can simply run cargo install clog-cli Compiling Follow these instructions to compile clog, then skip down to Installation. Ensure you have current version of cargo and Rust installed Clone the project $ git clone https://github.com/clog-tool/clog-cli && cd clog-cli Build the project $ cargo build --release Once complete, the binary will be located at target/release/clog Using a Precompiled Binary There are several precompiled binaries readily availbe. Browse to http://wod.twentyfives.net/bin/clog/ and download the latest binary for your particular OS. Once you download and extract the tar file (or zip for Windows), the binary will be located at bin/clog Note: The Mac distribution is available on npm via clog-cli. Installation Once you have downloaded, or compiled, clog you simply need to place the binary somewhere in your $PATH. If you are not familiar with $PATH read-on; otherwise skip down to Using clog. Arch Linux You can use clog-bin from the AUR, or follow the instructions for Linux / OS X Linux / OS X You have two options, place clog into a directory that is already located in your $PATH variable (To see which directories those are, open a terminal and type echo ""${PATH//:/\n}"", the quotation marks are important), or you can add a custom directory to your $PATH Option 1 If you have write permission to a directory listed in your $PATH or you have root permission (or via sudo), simply copy the clog to that directory # sudo cp clog /usr/local/bin Option 2 If you do not have root, sudo, or write permission to any directory already in $PATH you can create a directory inside your home directory, and add that. Many people use $HOME/.bin to keep it hidden (and not clutter your home directory), or $HOME/bin if you want it to be always visible. Here is an example to make the directory, add it to $PATH, and copy clog there. Simply change bin to whatever you'd like to name the directory, and .bashrc to whatever your shell startup file is (usually .bashrc, .bash_profile, or .zshrc) $ mkdir ~/bin $ echo ""export PATH=$PATH:$HOME/bin"" >> ~/.bashrc $ cp clog ~/bin $ source ~/.bashrc Windows On Windows 7/8 you can add directory to the PATH variable by opening a command line as an administrator and running C:\> setx path ""%path%;C:\path\to\clog\binary"" Otherwise, ensure you have the clog binary in the directory which you operating in the command line from, because Windows automatically adds your current directory to PATH (i.e. if you open a command line to C:\my_project\ to use clog ensure clog.exe is inside that directory as well). Using clog from the Command Line clog works by reading your git metadata and specially crafted commit messages and subjects to create a changelog. clog has the following options availble. USAGE:     clog [FLAGS] [OPTIONS]  FLAGS:     -F, --from-latest-tag    use latest tag as start (instead of --from)     -h, --help               Prints help information     -M, --major              Increment major version by one (Sets minor and patch to 0)     -m, --minor              Increment minor version by one (Sets patch to 0)     -p, --patch              Increment patch version by one     -V, --version            Prints version information  OPTIONS:     -C, --changelog <changelog>    A previous changelog to prepend new changes to (this is like                                    using the same file for both --infile and --outfile and                                    should not be used in conjuction with either)     -c, --config <config>          The Clog Configuration TOML file to use (Defaults to                                    '.clog.toml')**     -T, --format <format>          The output format, defaults to markdown                                    (valid values: markdown, json)     -f, --from <from>              e.g. 12a8546     -g, --git-dir <gitdir>         Local .git directory (defaults to current dir + '.git')*     -i, --infile <infile>          A changelog to append to, but *NOT* write to (Useful in                                    conjunction with --outfile)     -o, --outfile <outfile>        Where to write the changelog (Defaults to stdout when omitted)     -r, --repository <repo>        Repository used for generating commit and issue links                                    (without the .git, e.g. https://github.com/clog-tool/clog-cli)     -l, --link-style <style>       The style of repository link to generate                                    (Defaults to github) [values: Github Gitlab Stash]     -s, --subtitle <subtitle>      e.g. ""Crazy Release Title""     -t, --to <to>                  e.g. 8057684 (Defaults to HEAD when omitted)         --setversion <ver>         e.g. 1.0.1     -w, --work-tree <workdir>      Local working tree of the git project                                    (defaults to current dir)*  * If your .git directory is a child of your project directory (most common, such as /myproject/.git) AND not in the current working directory (i.e you need to use --work-tree or --git-dir) you only need to specify either the --work-tree (i.e. /myproject) OR --git-dir (i.e. /myproject/.git), you don't need to use both.  ** If using the --config to specify a clog configuration TOML file NOT in the current working directory (meaning you need to use --work-tree or --git-dir) AND the TOML file is inside your project directory (i.e. /myproject/.clog.toml) you do not need to use --work-tree or --git-dir. Try it! In order to see it in action, you'll need a repository that already has some of those specially crafted commit messages in it's history. For this, we'll use the clog repository itself. Clone the repo git clone https://github.com/clog-tool/clog-cli && cd clog-cli Ensure you already clog binary from any of the steps above There are many, many ways to run clog. Note, in these examples we will be typing the same options over and over again, in times like that we could a clog TOML configuration file to specify those options that don't normally change. Also note, all these CLI options have short versions as well, we're using the long version because they're easier to understand. a. Let's start by picking up only new commits since our last release (this may not be a lot...or none) b. Run clog -r https://github.com/clog-tool/clog-cli --outfile only_new.md c. By default, clog outputs to stdout unless you have a file set inside a TOML configuration file. (Note, we could have used the shell > operator instead of --outfile) d. Anything options you set via the CLI will override anything you set the configuration file. e. Let's now tell clog where it can find our old changelog, and prepend any new commits to that old data f. Run clog -r https://github.com/clog-tool/clog-cli --infile changelog.md --outfile new_combined.md g. Finally, let's assume like most projects we just want to use one file, and prepend all new data to our old changelog (most useful) h. First make a backup of the changelog.md so you can compare it later cp changelog.md changelog.md.bak i. Run clog -r https://github.com/clog-tool/clog-cli --changelog changelog.md j. Try viewing any of the only_new.md, new_combined.md, changelog.md.bak, or changelog.md in your favorite markdown viewer to compare them. As a Library See the documentation or clog-lib for information on using clog in your applications. You can also see the clog crates.io page. Default Options clog can also be configured using a default configuration file so that you don't have to specify all the options each time you want to update your changelog. To do this add a .clog.toml file to your repository. [clog] # A repository link with the trailing '.git' which will be used to generate # all commit and issue links repository = ""https://github.com/clog-tool/clog-cli"" # A constant release title subtitle = ""my awesome title""  # specify the style of commit links to generate, defaults to ""github"" if omitted link-style = ""github""  # The preferred way to set a constant changelog. This file will be read for old changelog # data, then prepended to for new changelog data. It's the equivilant to setting # both infile and outfile to the same file. # # Do not use with outfile or infile fields! # # Defaults to stdout when omitted changelog = ""mychangelog.md""  # This sets an output file only! If it exists already, new changelog data will be # prepended, if not it will be created. # # This is useful in conjunction with the infile field if you have a separate file # that you would like to append after newly created clog data # # Defaults to stdout when omitted outfile = ""MyChangelog.md""  # This sets the input file old! Any data inside this file will be appended to any # new data that clog picks up # # This is useful in conjunction with the outfile field where you may wish to read # from one file and append that data to the clog output in another infile = ""My_old_changelog.md""  # This sets the output format. There are two options ""json"" or ""markdown"" and # defaults to ""markdown"" when omitted output-format = ""json""  # If you use tags, you can set the following if you wish to only pick # up changes since your latest tag from-latest-tag = true Now you can update your MyChangelog.md with clog --patch (assuming you want to update from the latest tag version, and increment your patch version by 1). Note: Any options you specify at the command line will override options set in your .clog.toml Custom Sections By default, clog will display three sections in your changelog, Features, Performance, and Bug Fixes. You can add additional sections by using a .clog.toml file. To add more sections, simply add a [sections] table, along with the section name and aliases you'd like to use in your commit messages: [sections] MySection = [""mysec"", ""ms""] Now if you make a commit message such as mysec(Component): some message or ms(Component): some message there will be a new ""MySection"" section along side the ""Features"" and ""Bug Fixes"" areas. NOTE: Sections with spaces are suppported, such as ""My Special Section"" = [""ms"", ""mysec""] Companion Projects Commitizen - A command line tool that helps you writing better commit messages. LICENSE clog is licensed under the MIT Open Source license. For more information, see the LICENSE file in this repository. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/clog-tool/clog-cli"	"— generates a changelog from git metadata ()"	"true"
"Development tools"	"conventional changelog"	"http://blog.thoughtram.io/announcements/tools/2014/09/18/announcing-clog-a-conventional-changelog-generator-for-the-rest-of-us.html"	"— generates a changelog from git metadata ()"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"clog - A conventional changelog generator for the rest of us thoughtram Menu Training Code Review Blog clog - A conventional changelog generator for the rest of us by Christoph Burgdorf on Sep 18, 2014 5 minute read At thoughtram we teach people how to master Git. We also teach them how to maintain a semantic history. That’s a history where each commit groups a logical code change. Like a feature or a bugfix. You can go even further and follow a commit message convention to wrap up valuable meta data in the commit message. Once you follow a commit message convention, you can easily generate a nice changelog without any manual work. Let’s take a look at such a commit message. feat(ngInclude): add template url parameter to events  The `src` (i.e. the url of the template to load) is now provided to the `$includeContentRequested`, `$includeContentLoaded` and `$includeContentError` events.  Closes #8453 Closes #8454 If you look closely, you might notice a pattern behind this commit message. Let’s annotate it to make things more clear.                       component        commit title         commit type       /                /                       \        |                |                  feat(ngInclude): add template url parameter to events                      body ->  The 'src` (i.e. the url of the template to load) is now provided to the `$includeContentRequested`, `$includeContentLoaded` and `$includeContentError` events. referenced -> Closes #8453 issues Closes #8454 Notice how this commit message preserves valuable meta data among the plain message. Namely the commit type that can either be feat, fix, docs, style, refactor, test or chore to indicate the type of the change. What follows is the name of the component that was changed, wrapped in parenthesis. It also contains a short title and an optional body that must have a preceding blank line. References to related issues may follow after another blank line. That’s probably not the one and only commit message convention but it’s one that is battle tested in many high profile projects. It was invented by the smart folks at Google to be used for their AngularJS project. We recommend to check out this guideline to get the full picture of the convention. Also if you like to see how the generated changelog actually looks like, take a look here. Until know there’s only been a Node.js based implementation for the generator. In addition there is a Grunt task to easily integrate it with the popular Grunt task runner. That’s all nice and simple but there’s a problem: We are leaving out a big opportunity to make more developer follow this convention. What’s about all the Java, C#, C++, Haskell, Rust or Go developers out there? They certainly won’t install Node.js or even Grunt to generate their changelog. Having Node.js as a dependency is quite a big technical debt for something as simple as changelog generation. Hello clog! We want changelog generation to be usable for everyone with the most minimal footprint possible. We wanted something that is aligned with the UNIX philosophy of having a small command line tool just like cp or ls. So what should we do? Write a command line tool in C? Well, almost! We’ve written a command line tool called clog in Rust. Rust is a new language by Mozilla that enables you to write low level code in a high level language. Clog is more or less a straight port of the Node.js based generator by Andy Joslin. clogs usage is quite simple. It follows the POSIX standard. Just invoke it with clog --help and you’ll get this output. Usage:   clog [--repository=<link> --setversion=<version> --subtitle=<subtitle>          --from=<from> --to=<to> --from-latest-tag] You can invoke clog without any parameter to generate a nice changelog for the entire history of your project. Provide the --repository parameter to set the URL of the github repository to make the changelog include links to the commits on github. Usually you don’t want to regenerate the entire changelog but instead prepend only the changelog for every commit that happend between now and the previous version. In order to do that you can just run clog with the --from-latest-tag parameter. If you know that you want to generate the changelog for a specific range of commits you can just provide the --from and --to parameters (e.g. --from=c667e1e --to=c7a1f1c). In order to also include a nice header you can provide a version and a subtitle as well (e.g. --setversion=0.11.0 --subtitle=lame-duck). Putting it all together, here is how clog generated clogs latest changelog, it’s clogception! clog --repository=https://github.com/thoughtram/clog --from-latest-tag --setversion=0.2.0 clog is a work in progress and there are some things missing (like exposing a C interface). That said, it’s ready to be used if you don’t mind the missing features. How to get clog? If you happen to use Rust for your project you can simply get clog via Rust’s package manager Cargo. Otherwise you can also just grab the binary and put it somewhere on your machine. Given the small file size you may also directly put clog into your project folder so that everyone on the team has it and changelog generation can be made part of the build process. clog for Mac (binary) (source) Binaries for Windows will follow shortly. Since none of us uses Windows, we first need figure out how to properly set up the build chain there. Angular 2 Master Class in Helsinki Learn Angular 2 in our upcoming public training! Join now Get updates on new articles and trainings. Join over 700 other developers who get our content first. Author Christoph Burgdorf Christoph began programming at the age of 10. He is the creator of the Nickel.rs web framework and a contributor of the AngularJS project. Christoph is also part of the Angular 2 Docs Authoring team. Twitter GitHub Related Posts Updates and announcements Today we like to bring you up to date with all the exciting things that we were working on over... Thomas joins thoughtram Nearly two years passed since we announced thoughtram on this blog. It's been an amazing journey for us. Today we... Updates and announcements It became a little bit quite around us and you might be wondering, what thoughtram is doing these days. Today... A web app with Nickel: From first line to Heroku deployment In this article we will walk through the whole process of writing a simple simple web application with Nickel, the... Anouncing Hanover's second Rust meetup It's been roughly a year ago that we organized the very first Hanover. The meetup was quite a success and... Rust's Ownership model for JavaScript developers Rust is an exciting new system programming language by Mozilla. In this post we explore Rust's concept of ownership that... This website was created in collaboration with Tim Cheung and Tim Hartmann. Code of Conduct • Legal notice © 2014-2016 thoughtram GmbH"	"null"	"null"	"— generates a changelog from git metadata ()"	"true"
"Development tools"	""	"https://travis-ci.org/clog-tool/clog-cli"	"— generates a changelog from git metadata ()"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— generates a changelog from git metadata ()"	"true"
"Development tools"	"dan-t/rusty-tags"	"https://github.com/dan-t/rusty-tags"	"— create ctags/etags for a cargo project and all of its dependencies"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"80"	"3"	"7"	"GitHub - dan-t/rusty-tags: Create ctags/etags for a cargo project and all of its dependencies Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 80 Fork 7 dan-t/rusty-tags Code Issues 0 Pull requests 0 Pulse Graphs Create ctags/etags for a cargo project and all of its dependencies 171 commits 2 branches 31 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master path_dependencies Nothing to show rusty-tags-0.8.2 rusty-tags-0.8.1 rusty-tags-0.8.0 rusty-tags-0.7.1 rusty-tags-0.7.0 rusty-tags-0.6.8 rusty-tags-0.6.7 rusty-tags-0.6.6 rusty-tags-0.6.5 rusty-tags-0.6.4 rusty-tags-0.6.3 rusty-tags-0.6.2 rusty-tags-0.6.1 rusty-tags-0.6 rusty-tags-0.5.1 rusty-tags-0.5.0 rusty-tags-0.4.1 rusty-tags-0.4.0 rusty-tags-0.3.5 rusty-tags-0.3.4 rusty-tags-0.3.3 rusty-tags-0.3.2 rusty-tags-0.3.1 rusty-tags-0.3.0 rusty-tags-0.2.5 rusty-tags-0.2.4 rusty-tags-0.2.3 rusty-tags-0.2.2 rusty-tags-0.2.1 rusty-tags-0.2.0 rusty-tags-0.1.0 Nothing to show New pull request Latest commit f0a7a77 May 5, 2016 dan-t rusty-tags 0.8.2 Permalink Failed to load latest commit information. src Support CARGO_HOME environment variable May 5, 2016 .gitignore rusty-tags 0.4.1 Aug 6, 2015 .travis.yml Update travis config Apr 1, 2016 CHANGELOG rusty-tags 0.8.2 May 5, 2016 Cargo.lock rusty-tags 0.8.2 May 5, 2016 Cargo.toml rusty-tags 0.8.2 May 5, 2016 LICENSE First commit Dec 5, 2014 README.md Show crates.io info Apr 15, 2016 README.md rusty-tags A command line tool that creates tags - for source code navigation by using ctags - for a cargo project and all of its dependencies. Prerequisites ctags installed git installed if git dependencies are used Installation $ cargo install rusty-tags  The build binary will be located at ~/.cargo/bin/rusty-tags. Usage Just calling rusty-tags vi or rusty-tags emacs anywhere inside of the cargo project should just work. After its run a rusty-tags.vi / rusty-tags.emacs file should be beside of the Cargo.toml file. rusty-tags will also put a rusty-tags.vi / rusty-tags.emacs file to the source code of every dependency, so after jumping to a dependency, you're able to jump further to its dependencies. rusty-tags should also correctly handle the case if a dependency reexports parts of its own dependencies. Currently rusty-tags doesn't support dependency overrides and local path dependencies are only supported if they're contained in your projects Cargo.toml. For git dependencies it only searches inside of ~/.cargo/git/checkouts/ and for crates.io dependencies inside of ~/.cargo/registry/src/github.com-*. Rust Standard Library Support rusty-tags will create tags for the standard library if you supply the rust source by defining the environment variable $RUST_SRC_PATH: $ git clone https://github.com/rust-lang/rust.git /home/you/rust $ export RUST_SRC_PATH=/home/you/rust/src/   # should be defined in your ~/.bashrc  Vim Configuration Put this into your ~/.vim/after/ftplugin/rust.vim file: setlocal tags=./rusty-tags.vi;/ autocmd BufWrite *.rs :silent exec ""!rusty-tags vi --start-dir="" . expand('%:p:h') . ""&""  The first line (only supported by vim >= 7.4) ensures that vim will automatically search for a rusty-tags.vi file upwards the directory hierarchy. This tags setting is important if you want to jump to dependencies and then further jump to theirs dependencies. The second line ensures that your projects tag file gets updated if a file is written. If you've supplied the rust source code by defining $RUST_SRC_PATH: setlocal tags=./rusty-tags.vi;/,$RUST_SRC_PATH/rusty-tags.vi  MacOS Issues Mac OS users may encounter problems with the execution of ctags because the shipped version of this program does not support the recursive flag. See this posting for how to install a working version with homebrew. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dan-t/rusty-tags"	"— create ctags/etags for a cargo project and all of its dependencies"	"true"
"Development tools"	""	"https://travis-ci.org/dan-t/rusty-tags"	"— create ctags/etags for a cargo project and all of its dependencies"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— create ctags/etags for a cargo project and all of its dependencies"	"true"
"Development tools"	"frewsxcv/crate-deps"	"https://github.com/frewsxcv/crate-deps"	"— generates images of dependency graphs for crates hosted on crates.io"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13"	"2"	"0"	"GitHub - frewsxcv/crate-deps: A web service that generates images of dependency graphs for crates hosted on crates.io Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 13 Fork 0 frewsxcv/crate-deps Code Issues 2 Pull requests 0 Pulse Graphs A web service that generates images of dependency graphs for crates hosted on crates.io 90 commits 1 branch 1 release Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.1.0 Nothing to show New pull request Latest commit e1c4e67 Nov 1, 2015 frewsxcv Cargo update Permalink Failed to load latest commit information. src Cargo update Nov 1, 2015 .buildpacks Add cmake to buildpack May 26, 2015 .gitignore Ignore crates directory May 25, 2015 Cargo.lock Cargo update Nov 2, 2015 Cargo.toml Use external DOT generation library Jul 20, 2015 LICENSE Add and specify license May 28, 2015 Procfile Update Procfile to match new crate name May 28, 2015 README.md Update primary heading to reflect relatively recent renaming May 29, 2015 RustConfig Attempt to use other build pack May 25, 2015 README.md crate-deps A web service that generates images of dependency graphs for crates hosted on crates.io This project is built entirely in Rust using these libraries: tiny-http rust-crates-index Usage To use, make sure your crate: has at least one dependency is uploaded to crates.io Then, to generate an image, just go to: https://crate-deps.herokuapp.com/<your crate name here> Examples tiny_http crate-deps.herokuapp.com/tiny_http glutin crate-deps.herokuapp.com/glutin geojson crate-deps.herokuapp.com/geojson hyper crate-deps.herokuapp.com/hyper piston crate-deps.herokuapp.com/piston Setup To run the server locally: cargo run  To deploy to Heroku, make sure to set the buildpack as follows: heroku buildpacks:set https://github.com/ddollar/heroku-buildpack-multi.git  License All files found in this repository are licensed under version 2 of the Apache license. All images generated using crate-deps.herokuapp.com are licensed under CC0 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/frewsxcv/crate-deps"	"— generates images of dependency graphs for crates hosted on crates.io"	"true"
"Development tools"	"Racer"	"https://github.com/phildawes/racer"	"— code completion for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1640"	"95"	"170"	"GitHub - phildawes/racer: Rust Code Completion utility Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 95 Star 1,640 Fork 170 phildawes/racer Code Issues 85 Pull requests 4 Pulse Graphs Rust Code Completion utility 917 commits 3 branches 13 releases 94 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master revert-427-clap Nothing to show v1.1.0 v1.0.0 phil old-dev foo3 foo2 foo dev before 1.2.5 1.2.4 1.2.3 1.2.2 Nothing to show New pull request Latest commit 65a6b5f Jul 11, 2016 phildawes committed on GitHub Merge pull request #570 from Jonesey13/late_struct_declare_fixes … Corrected impl lookup to search whole scope and fixed a bug with tuple/unit structs at end of scope Permalink Failed to load latest commit information. images Updating screenshots. Aug 15, 2015 src Merge pull request #570 from Jonesey13/late_struct_declare_fixes Jul 11, 2016 tests Merge pull request #570 from Jonesey13/late_struct_declare_fixes Jul 11, 2016 .gitignore Add deoplete source Jul 4, 2015 .travis.yml Test on the stable channel instead of beta May 16, 2015 CHANGELOG.md [pd] bump version to 1.1.0 Dec 28, 2015 Cargo.lock update cargo.lock Jun 12, 2016 Cargo.toml bump version May 25, 2016 LICENSE-MIT Initial commit Mar 4, 2014 README.md added anaconda_rust to Sublime Text 3 integration May 27, 2016 README.md Racer - code completion for Rust RACER = Rust Auto-Complete-er. A utility intended to provide Rust code completion for editors and IDEs. Maybe one day the 'er' bit will be exploring + refactoring or something. Installation With cargo install This method requires Rust 1.5. Simply run: cargo install racer As mentioned in the command output, don't forget to add the installation directory to your PATH. From sources Clone the repository: git clone https://github.com/phildawes/racer.git cd racer; cargo build --release. The binary will now be in ./target/release/racer Add the binary to your PATH. This can be done by moving it to a directory already in your PATH (i.e. /usr/local/bin) or by adding the ./target/release/ directory to your PATH Configuration Fetch the Rust sourcecode from git, or download from https://www.rust-lang.org/install.html (the 'rustc' source download behind the 'source' link is the right one) Set the RUST_SRC_PATH environment variable to point to the 'src' dir in the Rust source installation (e.g. % export RUST_SRC_PATH=/usr/local/src/rust/src ) Test on the command line: racer complete std::io::B (should show some completions) Note for rustup users This does not apply to multirust! To enable completion for cargo crates, you need to set the CARGO_HOME environment variable to .cargo in your home directory. Editors/IDEs Supported Eclipse integration Racer can be used with Eclipse through the use of RustDT. (User guide is linked in repo description) Emacs integration Emacs integration has been moved to a separate project: emacs-racer. Gedit integration Gedit integration can be found here. Kate integration The Kate community maintains a plugin. It will be bundled with future releases of Kate (read more here). Enable 'Rust code completion' in the plugin list in the Kate config dialog; On the new 'Rust code completion' dialog page, make sure 'Racer command' and 'Rust source tree location' are set correctly. Sublime Text integration The Sublime Text community maintains some packages that integrates Racer RustAutoComplete that offers auto completion and goto definition. AnacondaRUST from the anaconda plugins family that offers auto completion, goto definition and show documentation Vim integration Vim integration has been moved to a separate project: vim-racer. Visual Studio Code extension You can find more info about Visual Studio Code extension here. Atom integration You can find the racer package for Atom here Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phildawes/racer"	"— code completion for Rust"	"true"
"Development tools"	""	"https://travis-ci.org/phildawes/racer"	"— code completion for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— code completion for Rust"	"true"
"Development tools"	"rustfmt"	"https://github.com/rust-lang-nursery/rustfmt"	"— a Rust code formatter"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"783"	"28"	"127"	"GitHub - rust-lang-nursery/rustfmt: Format Rust code Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 783 Fork 127 rust-lang-nursery/rustfmt Code Issues 187 Pull requests 10 Pulse Graphs Format Rust code 1,106 commits 1 branch 3 releases 87 contributors Rust 99.9% Shell 0.1% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.5 v0.4 v0.3 Nothing to show New pull request Latest commit ca2debd Jul 11, 2016 nrc committed on GitHub Merge pull request #1088 from sinkuu/issue_1086 … Fix formatting empty block comments (`/**/`) Permalink Failed to load latest commit information. src Fix formatting empty block comments (`/**/`) Jul 9, 2016 tests Fix formatting empty block comments (`/**/`) Jul 9, 2016 .gitignore gitignore .rs.bk files Feb 1, 2016 .travis.yml Try fixing OSX builds Nov 12, 2015 Cargo.lock rustup Jul 4, 2016 Cargo.toml Include git commit and worktree status in version output (#1060) Jun 12, 2016 Contributing.md Links to the rust-lang-nursery/rustfmt issue list. Jul 2, 2016 Design.md doc: Update Design.md to mention syntex_syntax and config Mar 1, 2016 LICENSE-APACHE Add license stuff Apr 14, 2016 LICENSE-MIT Add license stuff Apr 14, 2016 README.md Fix typo in path: ~/cargo/bin → ~/.cargo/bin Jun 15, 2016 atom.md update atom instructions Nov 17, 2015 bootstrap.sh Add a bootstrap script for running rustfmt on itself. Apr 22, 2016 build.rs Include git commit and worktree status in version output (#1060) Jun 12, 2016 README.md rustfmt A tool for formatting Rust code according to style guidelines. If you'd like to help out (and you should, it's a fun project!), see Contributing.md. Quick start To install: cargo install rustfmt  to run on a cargo project in the current working directory: cargo fmt  Installation Note: this method currently requires you to be running cargo 0.6.0 or newer. cargo install rustfmt  or if you're using multirust multirust run nightly cargo install rustfmt  Usually cargo-fmt, which enables usage of Cargo subcommand cargo fmt, is installed alongside rustfmt. To only install rustfmt run cargo install --no-default-features rustfmt  Installing from source To install from source, first checkout to the tag or branch you want to install, then issue cargo install --path  .  This will install rustfmt in your ~/.cargo/bin. Make sure to add ~/.cargo/bin directory to your PATH variable. Running You can run Rustfmt by just typing rustfmt filename if you used cargo install. This runs rustfmt on the given file, if the file includes out of line modules, then we reformat those too. So to run on a whole module or crate, you just need to run on the root file (usually mod.rs or lib.rs). Rustfmt can also read data from stdin. Alternatively, you can use cargo fmt to format all binary and library targets of your crate. You'll probably want to specify the write mode. Currently, there are modes for diff, replace, overwrite, display, coverage, and checkstyle. replace Is the default and overwrites the original files after creating backups of the files. overwrite Overwrites the original files without creating backups. display Will print the formatted files to stdout. diff Will print a diff between the original files and formatted files to stdout. checkstyle Will output the lines that need to be corrected as a checkstyle XML file, that can be used by tools like Jenkins. The write mode can be set by passing the --write-mode flag on the command line. For example rustfmt --write-mode=display src/filename.rs cargo fmt uses --write-mode=replace by default. If you want to restrict reformatting to specific sets of lines, you can use the --file-lines option. Its argument is a JSON array of objects with file and range properties, where file is a file name, and range is an array representing a range of lines like [7,13]. Ranges are 1-based and inclusive of both end points. Specifying an empty array will result in no files being formatted. For example, rustfmt --file-lines '[     {""file"":""src/lib.rs"",""range"":[7,13]},     {""file"":""src/lib.rs"",""range"":[21,29]},     {""file"":""src/foo.rs"",""range"":[10,11]},     {""file"":""src/foo.rs"",""range"":[15,15]}]'  would format lines 7-13 and 21-29 of src/lib.rs, and lines 10-11, and 15 of src/foo.rs. No other files would be formatted, even if they are included as out of line modules from src/lib.rs. If rustfmt successfully reformatted the code it will exit with 0 exit status. Exit status 1 signals some unexpected error, like an unknown option or a failure to read a file. Exit status 2 is returned if there are syntax errors in the input files. rustfmt can't format syntatically invalid code. Finally, exit status 3 is returned if there are some issues which can't be resolved automatically. For example, if you have a very long comment line rustfmt doesn't split it. Instead it prints a warning and exits with 3. You can run rustfmt --help for more information. Running Rustfmt from your editor Vim Emacs Sublime Text 3 Atom Visual Studio Code using RustyCode or vsc-rustfmt How to build and test cargo build to build. cargo test to run all tests. To run rustfmt after this, use cargo run --bin rustfmt -- filename. See the notes above on running rustfmt. Configuring Rustfmt Rustfmt is designed to be very configurable. You can create a TOML file called rustfmt.toml, place it in the project directory and it will apply the options in that file. See rustfmt --config-help for the options which are available, or if you prefer to see source code, src/config.rs. By default, Rustfmt uses a style which (mostly) conforms to the Rust style guidelines. There are many details which the style guidelines do not cover, and in these cases we try to adhere to a style similar to that used in the Rust repo. Once Rustfmt is more complete, and able to re-format large repositories like Rust, we intend to go through the Rust RFC process to nail down the default style in detail. If there are styling choices you don't agree with, we are usually happy to add options covering different styles. File an issue, or even better, submit a PR. Tips For things you do not want rustfmt to mangle, use one of #[rustfmt_skip]  // requires nightly and #![feature(custom_attribute)] in crate root #[cfg_attr(rustfmt, rustfmt_skip)]  // works in stable When you run rustfmt, place a file named rustfmt.toml in target file directory or its parents to override the default settings of rustfmt. After successful compilation, a rustfmt executable can be found in the target directory. If you're having issues compiling Rustfmt (or compile errors when trying to install), make sure you have the most recent version of Rust installed. License Rustfmt is distributed under the terms of both the MIT license and the Apache License (Version 2.0). See LICENSE-APACHE and LICENSE-MIT for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rust-lang-nursery/rustfmt"	"— a Rust code formatter"	"true"
"Development tools"	""	"https://travis-ci.org/rust-lang-nursery/rustfmt"	"— a Rust code formatter"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a Rust code formatter"	"true"
"Development tools"	"Rustup"	"https://github.com/rust-lang-nursery/rustup.rs"	"— the Rust toolchain installer"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"531"	"34"	"69"	"GitHub - rust-lang-nursery/rustup.rs: The Rust toolchain installer Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 34 Star 531 Fork 69 rust-lang-nursery/rustup.rs Code Issues 131 Pull requests 2 Pulse Graphs The Rust toolchain installer 1,044 commits 8 branches 8 releases 44 contributors Rust 96.2% Shell 1.7% JavaScript 0.5% Python 0.5% HTML 0.5% CSS 0.5% PowerShell 0.1% Rust Shell JavaScript Python HTML CSS PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto gh-pages host-triple master new reduce-margin stable toml-settings Nothing to show 0.2.0 0.1.12 0.1.11 0.1.10 0.1.9 0.1.8 0.1.7 0.1.6 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. ci Merge pull request #534 from brson/powerpc Jul 1, 2016 src Modify rustls downloader to use the CA loader Jul 15, 2016 tests Remove noisy ""rustup is up to date"" message Jun 25, 2016 www Revert ""www: Add a disclaimer about curl | sh"" Jun 27, 2016 .gitattributes Use Unix line endings Jun 3, 2016 .gitignore Adding error handling to telemetry clean up. Apr 21, 2016 .travis.yml Add powerpc builds Jul 2, 2016 CHANGELOG.md Add 0.3.0 changelog Jul 13, 2016 Cargo.lock Modify rustls downloader to use the CA loader Jul 15, 2016 Cargo.toml Actually bump to 0.3 Jul 14, 2016 LICENSE-APACHE Properly update licences in README and elsewhere Feb 2, 2016 LICENSE-MIT Properly update licences in README and elsewhere Feb 2, 2016 README.md Remove uses of subcommand synonyms in the examples Jul 5, 2016 appveyor.yml Pin to old nightly May 12, 2016 build.rs add commit hash to the output of -V Apr 20, 2016 rustup-init.sh rustup-init: remove dependency on `file` command Jun 22, 2016 README.md rustup: the Rust toolchain installer Build Status Travis AppVeyor rustup installs The Rust Programming Language from the official release channels, enabling you to easily switch between stable, beta, and nightly compilers and keep them updated. It makes cross-compiling simpler with binary builds of the standard library for common platforms. And it runs on all platforms Rust supports, including Windows. WARNING: This is beta software. Installation How rustup works Keeping Rust up to date Working with nightly Rust Directory overrides Toolchain specification Cross-compilation Working with Rust on Windows Working with custom toolchains Examples Environment variables Other installation methods Security FAQ License Contributing Installation Follow the instructions at www.rustup.rs. If that doesn't work for you there are other installation methods. rustup installs rustc, cargo, rustup and other standard tools to Cargo's bin directory. On Unix it is located at $HOME/.cargo/bin and on Windows at %USERPROFILE%\.cargo\bin. This is the same directory that cargo install will install Rust programs and Cargo plugins. This directory will be in your $PATH environment variable, which means you can run them from the shell without further configuration. Open a new shell and type the following: rustc --version  If you see something like rustc 1.7.0 (a5d1e7a59 2016-02-29) then you are ready to Rust. If you decide Rust isn't your thing, you can completely remove it from your system by running rustup self uninstall. How rustup works rustup is a toolchain multiplexer. It installs and manages many Rust toolchains and presents them all through a single set of tools installed to ~/.cargo/bin. The rustc and cargo installed to ~/.cargo/bin are proxies that delegate to the real toolchain. rustup then provides mechanisms to easily change the active toolchain by reconfiguring the behavior of the proxies. So when rustup is first installed running rustc will run the proxy in $HOME/.cargo/bin/rustc, which in turn will run the stable compiler. If you later change the default toolchain to nightly with rustup default nightly, then that same proxy will run the nightly compiler instead. This is similar to Ruby's rbenv or Python's pyenv. Keeping Rust up to date Rust is distributed on three different release channels: stable, beta, and nightly. rustup is configured to use the stable channel by default, which represents the latest release of Rust, and is released every six weeks. When a new version of Rust is released, you can type rustup update to update to it: $ rustup update info: syncing channel updates for 'stable' info: downloading component 'rustc' info: downloading component 'rust-std' info: downloading component 'rust-docs' info: downloading component 'cargo' info: installing component 'rustc' info: installing component 'rust-std' info: installing component 'rust-docs' info: installing component 'cargo' info: checking for self-updates info: downloading self-updates    stable updated: rustc 1.7.0 (a5d1e7a59 2016-02-29)   This is the essence of rustup. Working with nightly Rust Rustup gives you easy access to the nightly compiler and its experimental features. To add it just run rustup install nightly: $ rustup install nightly info: syncing channel updates for 'nightly' info: downloading toolchain manifest info: downloading component 'rustc' info: downloading component 'rust-std' info: downloading component 'rust-docs' info: downloading component 'cargo' info: installing component 'rustc' info: installing component 'rust-std' info: installing component 'rust-docs' info: installing component 'cargo'    nightly installed: rustc 1.9.0-nightly (02310fd31 2016-03-19)   Now Rust nightly is installed, but not activated. To test it out you can run a command from the nightly toolchain like $ rustup run nightly rustc --version rustc 1.9.0-nightly (02310fd31 2016-03-19)  But more likely you want to use it for a while. To switch to nightly globally, change the default with rustup default nightly: $ rustup default nightly info: using existing install for 'nightly' info: default toolchain set to 'nightly'    nightly unchanged: rustc 1.9.0-nightly (02310fd31 2016-03-19)   Now any time you run cargo or rustc you will be running the nightly compiler. With nightly installed any time you run rustup update, the nightly channel will be updated in addition to stable: $ rustup update info: syncing channel updates for 'stable' info: syncing channel updates for 'nightly' info: checking for self-updates info: downloading self-updates     stable unchanged: rustc 1.7.0 (a5d1e7a59 2016-02-29)   nightly unchanged: rustc 1.9.0-nightly (02310fd31 2016-03-19)   Directory overrides Directories can be assigned their own Rust toolchain with rustup override. When a directory has an override then any time rustc or cargo is run inside that directory, or one of its child directories, the override toolchain will be invoked. To pin to a specific nightly: rustup override set nightly-2014-12-18  Or a specific stable release: rustup override set 1.0.0  To see the active toolchain use rustup show. To remove the override and use the default toolchain again, rustup override unset. Toolchain specification Many rustup commands deal with toolchains, a single installation of the Rust compiler. rustup supports multiple types of toolchains. The most basic track the official release channels: 'stable', 'beta' and 'nightly'; but rustup can also install toolchains from the official archives, for alternate host platforms, and from local builds. Standard release channel toolchain names have the following form: <channel>[-<date>][-<host>]  <channel>       = stable|beta|nightly|<version> <date>          = YYYY-MM-DD <host>          = <target-triple>  'channel' is either a named release channel or an explicit version number, such as ""1.8.0"". Channel names can be optionally appended with an archive date, as in 'nightly-2014-12-18', in which case the toolchain is downloaded from the archive for that date. Finally, the host may be specified as a target triple. This is most useful for installing a 32-bit compiler on a 64-bit platform, or for installing the MSVC-based toolchain on Windows. For example: $ rustup install stable-x86_64-pc-windows-msvc  For convenience, elements of the target triple that are omitted will be inferred, so the above could be written: $ rustup install stable-msvc  Toolchain names that don't name a channel instead can be used to name custom toolchains. Cross-compilation Rust supports a great number of platforms. For many of these platforms The Rust Project publishes binary releases of the standard library, and for some the full compiler. rustup gives easy access to all of them. When you first install a toolchain, rustup installs only the standard library for your host platform - that is, the architecture and operating system you are presently running. To compile to other platforms you must install other target platforms. This is done with the rustup target add command. For example, to add the Android target: $ rustup target add arm-linux-androideabi info: downloading component 'rust-std' for 'arm-linux-androideabi' info: installing component 'rust-std' for 'arm-linux-androideabi'  With the arm-linux-andoideabi target installed you can then build for Android with Cargo by passing the --target flag, as in cargo build --target=arm-linux-androideabi. Note that rustup target add only installs the Rust standard library for a given target. There are typically other tools necessary to cross-compile, particularly a linker. For example, to cross compile to Android the Android NDK must be installed. In the future, rustup will provide assistance installing the NDK components as well. To see a list of available targets, rustup target list. To remove a previously-added target, rustup target remove. Working with Rust on Windows rustup works the same on Windows as it does on Unix, but there are some special considerations for Rust developers on Windows. As mentioned on the Rust download page, there are two ABIs in use on Windows: the native (MSVC) ABI used by Visual Studio, and the GNU ABI used by the GCC toolchain. Which version of Rust you need depends largely on what C/C++ libraries you want to interoperate with: for interop with software produced by Visual Studio use the MSVC build of Rust; for interop with GNU software built using the MinGW/MSYS2 toolchain use the GNU build. When target the MSVC ABI, Rust additionally require an installation of Visual Studio 2013 (or later) or the Visual C++ Build Tools 2015 so rustc can use its linker. For Visual Studio, make sure to check the ""C++ tools"" option. No additional software installation is necessary for basic use of the GNU build. By default rustup on Windows configures Rust to target the 32-bit GNU ABI, that is the i686-pc-windows-gnu target triple. More specifically, the toolchains that rustup chooses to install, unless told otherwise through the toolchain specification, will be compiled to run on a i686-pc-windows-gnu host, and will target that platform by default. When you write rustup update nightly, rustup interprets it as rustup update nightly-i686-pc-windows-gnu. You can change this behavior with rustup set default-host or during installation. $ rustup set default-host x86_64-pc-windows-msvc  Rust's support for the GNU ABI is more mature, and is recommended for typical uses, so that's what rustup installs by default. The MSVC toolchain is always available, even if you don't use it by default. Just install it with rustup install: $ rustup install stable-msvc  You don't need to switch toolchains to support all windows targets though; a single toolchain supports all four x86 windows targets: $ rustup target add x86_64-pc-windows-msvc $ rustup target add x86_64-pc-windows-gnu $ rustup target add i686-pc-windows-msvc $ rustup target add i686-pc-windows-gnu # this one's installed by default  Working with custom toolchains For convenience of developers working on Rust itself, rustup can manage local builds of the Rust toolchain. To teach rustup about your build just run: $ rustup toolchain link my-toolchain path/to/my/toolchain/sysroot  Now you can name my-toolchain as any other rustup toolchain. Create a rustup toolchain for each of your rust-lang/rust workspaces and test them easily with rustup run my-toolchain rustc. Because the rust-lang/rust tree does not include Cargo, when cargo is invoked for a custom toolchain and it is not available, rustup will attempt to use cargo from one of the release channels, preferring 'nightly', then 'beta' or 'stable'. Examples Command Description rustup default nightly Set the default toolchain to the latest nightly rustup target list List all available targets for the active toolchain rustup target add arm-linux-androideabi Install the Android target rustup target remove arm-linux-androideabi Remove the Android target rustup run nightly rustc foo.rs Run the nightly regardless of the active toolchain rustup run nightly bash Run a shell configured for the nightly compiler rustup default stable-msvc On Windows, use the MSVC toolchain instead of GNU rustup override nightly-2015-04-01 For the current directory, use a nightly from a specific date rustup toolchain link my-toolchain ""C:\RustInstallation"" Install a custom toolchain by symlinking an existing installation rustup show Show which toolchain will be used in the current directory Environment variables RUSTUP_HOME (default: ~/.multirust or %USERPROFILE%/.multirust) Sets the root rustup folder, used for storing installed toolchains and configuration options. (rustup used to be called multirust. Use of .multirust is a holdover from that. See #537.) RUSTUP_TOOLCHAIN (default: none) If set, will override the toolchain used for all rust tool invocations. A toolchain with this name should be installed, or invocations will fail. RUSTUP_DIST_SERVER (default: https://static.rust-lang.org) Sets the root URL for downloading static resources related to Rust. You can change this to instead use a local mirror, or to test the binaries from the staging directory. RUSTUP_DIST_ROOT (default: https://static.rust-lang.org/dist) Deprecated. Use RUSTUP_DIST_SERVER instead. RUSTUP_UPDATE_ROOT (default https://static.rust-lang.org/rustup/dist) Sets the root URL for downloading self-updates. Other installation methods The primary installation method, as described at www.rustup.rs, differs by platform: On Windows, download and run the rustup-init.exe for the i686-pc-windows-gnu target. Although this build of rustup installs compilers targeting the GNU ABI by default, compilers targeting the MSVC ABI can be installed with e.g. rustup install stable-msvc. On Unix, run curl https://sh.rustup.rs -sSf | sh in your shell. This downloads and runs rustup-init.sh, which in turn downloads and runs the correct version of the rustup-init executable for your platform. rustup-init accepts arguments, which can be passed through the shell script. Some examples: $ curl https://sh.rustup.rs -sSf | sh -s -- --help $ curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path $ curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly  If you prefer you can directly download rustup-init for the platform of your choice: aarch64-unknown-linux-gnu arm-unknown-linux-gnueabi arm-unknown-linux-gnueabihf armv7-unknown-linux-gnueabihf i686-apple-darwin i686-pc-windows-gnu i686-pc-windows-msvc† i686-unknown-linux-gnu x86_64-apple-darwin x86_64-pc-windows-gnu x86_64-pc-windows-msvc† x86_64-unknown-freebsd x86_64-unknown-linux-gnu x86_64-unknown-netbsd † MSVC builds of rustup additionally require an installation of Visual Studio 2015 or the Visual C++ Build Tools 2015. For Visual Studio, make sure to check the ""C++ tools"" option. No additional software installation is necessary for basic use of the GNU build. To install from source just run cargo run --release. Note that currently rustup only builds on nightly Rust, and that after installation the rustup toolchains will supersede any pre-existing toolchains by prepending ~/.cargo/bin to the PATH environment variable. Security rustup is secure enough for the non-paranoid, but it still needs work. rustup performs all downloads over HTTPS, but does not yet validate signatures of downloads. FAQ Is this an official Rust project? Yes. rustup is an official Rust project. Once it is complete it will be the recommended way to install Rust and www.rust-lang.org will be updated to reflect that. How is this related to multirust? rustup is the successor to multirust. rustup began as multirust-rs, a rewrite of multirust from shell script to Rust, by Diggory Blake, and is now maintained by The Rust Project. License Copyright Diggory Blake, the Mozilla Corporation, and rustup contributors. Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contributing Fork it! Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request :D Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rust-lang-nursery/rustup.rs"	"— the Rust toolchain installer"	"true"
"Development tools"	""	"https://travis-ci.org/rust-lang-nursery/rustup.rs"	"— the Rust toolchain installer"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— the Rust toolchain installer"	"true"
"Debugging"	"rust-gdb"	"https://github.com/rust-lang/rust/blob/master/src/etc/rust-gdb"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17513"	"1013"	"3334"	"rust/rust-gdb at master · rust-lang/rust · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,013 Star 17,513 Fork 3,334 rust-lang/rust Code Issues 2,463 Pull requests 107 Pulse Graphs Permalink Branch: master Switch branches/tags Branches Tags auto beta master snap-stage3 stable tmp try Nothing to show release-0.7 release-0.6 release-0.5 release-0.4 release-0.3.1 release-0.3 release-0.2 release-0.1 homu-tmp 1.10.0 1.9.0 1.8.0 1.7.0 1.6.0 1.5.0 1.4.0 1.3.0 1.2.0 1.1.0 1.0.0 1.0.0-beta 1.0.0-alpha.2 1.0.0-alpha 0.12.0 0.11.0 0.10 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 Nothing to show Find file Copy path rust/src/etc/rust-gdb 91a0e18 Dec 30, 2014 michaelwoerister debuginfo: Add a rust-gdb shell script that will start GDB with Rust … 1 contributor Users who have contributed to this file michaelwoerister Raw Blame History executable file 24 lines (20 sloc) 893 Bytes #!/bin/sh # Copyright 2014 The Rust Project Developers. See the COPYRIGHT # file at the top-level directory of this distribution and at # http://rust-lang.org/COPYRIGHT. # # Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or # http://www.apache.org/licenses/LICENSE-2.0> or the MIT license # <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your # option. This file may not be copied, modified, or distributed # except according to those terms. # Exit if anything fails set -e # Find out where the pretty printer Python module is RUSTC_SYSROOT=`rustc --print=sysroot` GDB_PYTHON_MODULE_DIRECTORY=""$RUSTC_SYSROOT/lib/rustlib/etc"" # Run GDB with the additional arguments that load the pretty printers PYTHONPATH=""$PYTHONPATH:$GDB_PYTHON_MODULE_DIRECTORY"" gdb \ -d ""$GDB_PYTHON_MODULE_DIRECTORY"" \ -iex ""add-auto-load-safe-path $GDB_PYTHON_MODULE_DIRECTORY"" \ ""$@"" Jump to Line Go Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rust-lang/rust/blob/master/src/etc/rust-gdb"	""	"true"
"Debugging"	"lldb_batchmode.py"	"https://github.com/rust-lang/rust/blob/master/src/etc/lldb_batchmode.py"	"— allows to use LLDB in a way similar to GDB's batch mode."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17513"	"1013"	"3334"	"rust/lldb_batchmode.py at master · rust-lang/rust · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,013 Star 17,513 Fork 3,334 rust-lang/rust Code Issues 2,463 Pull requests 107 Pulse Graphs Permalink Branch: master Switch branches/tags Branches Tags auto beta master snap-stage3 stable tmp try Nothing to show release-0.7 release-0.6 release-0.5 release-0.4 release-0.3.1 release-0.3 release-0.2 release-0.1 homu-tmp 1.10.0 1.9.0 1.8.0 1.7.0 1.6.0 1.5.0 1.4.0 1.3.0 1.2.0 1.1.0 1.0.0 1.0.0-beta 1.0.0-alpha.2 1.0.0-alpha 0.12.0 0.11.0 0.10 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 Nothing to show Find file Copy path rust/src/etc/lldb_batchmode.py Fetching contributors… Cannot retrieve contributors at this time Raw Blame History 221 lines (176 sloc) 7.93 KB # Copyright 2014 The Rust Project Developers. See the COPYRIGHT # file at the top-level directory of this distribution and at # http://rust-lang.org/COPYRIGHT. # # Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or # http://www.apache.org/licenses/LICENSE-2.0> or the MIT license # <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your # option. This file may not be copied, modified, or distributed # except according to those terms. # This script allows to use LLDB in a way similar to GDB's batch mode. That is, given a text file # containing LLDB commands (one command per line), this script will execute the commands one after # the other. # LLDB also has the -s and -S commandline options which also execute a list of commands from a text # file. However, this command are execute `immediately`: a the command of a `run` or `continue` # command will be executed immediately after the `run` or `continue`, without waiting for the next # breakpoint to be hit. This a command sequence like the following will not yield reliable results: # # break 11 # run # print x # # Most of the time the `print` command will be executed while the program is still running will thus # fail. Using this Python script, the above will work as expected. from __future__ import print_function import lldb import os import sys import threading import thread import re import time # Set this to True for additional output DEBUG_OUTPUT = False def print_debug(s): ""Print something if DEBUG_OUTPUT is True"" global DEBUG_OUTPUT if DEBUG_OUTPUT: print(""DEBUG: "" + str(s)) def normalize_whitespace(s): ""Replace newlines, tabs, multiple spaces, etc with exactly one space"" return re.sub(""\s+"", "" "", s) def breakpoint_callback(frame, bp_loc, dict): """"""This callback is registered with every breakpoint and makes sure that the frame containing the breakpoint location is selected"""""" print(""Hit breakpoint "" + str(bp_loc)) # Select the frame and the thread containing it frame.thread.process.SetSelectedThread(frame.thread) frame.thread.SetSelectedFrame(frame.idx) # Returning True means that we actually want to stop at this breakpoint return True # This is a list of breakpoints that are not registered with the breakpoint callback. The list is # populated by the breakpoint listener and checked/emptied whenever a command has been executed new_breakpoints = [] # This set contains all breakpoint ids that have already been registered with a callback, and is # used to avoid hooking callbacks into breakpoints more than once registered_breakpoints = set() def execute_command(command_interpreter, command): ""Executes a single CLI command"" global new_breakpoints global registered_breakpoints res = lldb.SBCommandReturnObject() print(command) command_interpreter.HandleCommand(command, res) if res.Succeeded(): if res.HasResult(): print(normalize_whitespace(res.GetOutput()), end='\n') # If the command introduced any breakpoints, make sure to register # them with the breakpoint # callback while len(new_breakpoints) > 0: res.Clear() breakpoint_id = new_breakpoints.pop() if breakpoint_id in registered_breakpoints: print_debug(""breakpoint with id %s is already registered. Ignoring."" % str(breakpoint_id)) else: print_debug(""registering breakpoint callback, id = "" + str(breakpoint_id)) callback_command = (""breakpoint command add -F breakpoint_callback "" + str(breakpoint_id)) command_interpreter.HandleCommand(callback_command, res) if res.Succeeded(): print_debug(""successfully registered breakpoint callback, id = "" + str(breakpoint_id)) registered_breakpoints.add(breakpoint_id) else: print(""Error while trying to register breakpoint callback, id = "" + str(breakpoint_id)) else: print(res.GetError()) def start_breakpoint_listener(target): """"""Listens for breakpoints being added and adds new ones to the callback registration list"""""" listener = lldb.SBListener(""breakpoint listener"") def listen(): event = lldb.SBEvent() try: while True: if listener.WaitForEvent(120, event): if lldb.SBBreakpoint.EventIsBreakpointEvent(event) and \ lldb.SBBreakpoint.GetBreakpointEventTypeFromEvent(event) == \ lldb.eBreakpointEventTypeAdded: global new_breakpoints breakpoint = lldb.SBBreakpoint.GetBreakpointFromEvent(event) print_debug(""breakpoint added, id = "" + str(breakpoint.id)) new_breakpoints.append(breakpoint.id) except: print_debug(""breakpoint listener shutting down"") # Start the listener and let it run as a daemon listener_thread = threading.Thread(target=listen) listener_thread.daemon = True listener_thread.start() # Register the listener with the target target.GetBroadcaster().AddListener(listener, lldb.SBTarget.eBroadcastBitBreakpointChanged) def start_watchdog(): """"""Starts a watchdog thread that will terminate the process after a certain period of time"""""" watchdog_start_time = time.clock() watchdog_max_time = watchdog_start_time + 30 def watchdog(): while time.clock() < watchdog_max_time: time.sleep(1) print(""TIMEOUT: lldb_batchmode.py has been running for too long. Aborting!"") thread.interrupt_main() # Start the listener and let it run as a daemon watchdog_thread = threading.Thread(target=watchdog) watchdog_thread.daemon = True watchdog_thread.start() #################################################################################################### # ~main #################################################################################################### if len(sys.argv) != 3: print(""usage: python lldb_batchmode.py target-path script-path"") sys.exit(1) target_path = sys.argv[1] script_path = sys.argv[2] print(""LLDB batch-mode script"") print(""----------------------"") print(""Debugger commands script is '%s'."" % script_path) print(""Target executable is '%s'."" % target_path) print(""Current working directory is '%s'"" % os.getcwd()) # Start the timeout watchdog start_watchdog() # Create a new debugger instance debugger = lldb.SBDebugger.Create() # When we step or continue, don't return from the function until the process # stops. We do this by setting the async mode to false. debugger.SetAsync(False) # Create a target from a file and arch print(""Creating a target for '%s'"" % target_path) target_error = lldb.SBError() target = debugger.CreateTarget(target_path, None, None, True, target_error) if not target: print(""Could not create debugging target '"" + target_path + ""': "" + str(target_error) + "". Aborting."", file=sys.stderr) sys.exit(1) # Register the breakpoint callback for every breakpoint start_breakpoint_listener(target) command_interpreter = debugger.GetCommandInterpreter() try: script_file = open(script_path, 'r') for line in script_file: command = line.strip() if command == ""run"" or command == ""r"" or re.match(""^process\s+launch.*"", command): # Before starting to run the program, let the thread sleep a bit, so all # breakpoint added events can be processed time.sleep(0.5) if command != '': execute_command(command_interpreter, command) except IOError as e: print(""Could not read debugging script '%s'."" % script_path, file=sys.stderr) print(e, file=sys.stderr) print(""Aborting."", file=sys.stderr) sys.exit(1) finally: debugger.Terminate() script_file.close() Jump to Line Go Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rust-lang/rust/blob/master/src/etc/lldb_batchmode.py"	"— allows to use LLDB in a way similar to GDB's batch mode."	"true"
"Embedded"	"japaric/rust-cross"	"https://github.com/japaric/rust-cross"	"— everything you need to know about cross compiling Rust programs"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"306"	"28"	"15"	"GitHub - japaric/rust-cross: Everything you need to know about cross compiling Rust programs! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 306 Fork 15 japaric/rust-cross Code Issues 5 Pull requests 0 Pulse Graphs Everything you need to know about cross compiling Rust programs! 57 commits 2 branches 0 releases 5 contributors Shell 100.0% Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto master Nothing to show Nothing to show New pull request Latest commit 33d6a59 Jun 30, 2016 japaric committed on GitHub Merge pull request #23 from Seeker14491/patch-1 … fix typo Permalink Failed to load latest commit information. ci install c toolchain using apt-get Apr 26, 2016 .travis.yml ci: remove an unnecessary 'os' entry Apr 29, 2016 LICENSE-APACHE write, write, write and add licenses Feb 5, 2016 LICENSE-MIT write, write, write and add licenses Feb 5, 2016 README.md fix typo Jun 30, 2016 README.md rust-cross Everything you need to know about cross compiling Rust programs! If you want to set up your Rust toolchain as a cross compiler, you have come to the right place! I have documented all the necessary steps, plus the gotchas and common problems that you may find along the way. Dear reader, if you spot a typo, a broken link, or a poorly worded/confusing sentence/paragraph please open an issue pointing out the problem and I'll update the text. Pull requests fixing typos or broken links are, of course, welcome! TL;DR Ubuntu example Here are the commands necessary to set up a stable Rust toolchain as a cross compiler for ARMv7 (*) devices on a fresh Ubuntu Trusty install. The goal of this example is to show that cross compilation is easy to setup and even easier to perform. (*) ARM v7, these instructions won't work to cross compile for the Raspberry Pi (1), that's an ARM v6 device. # Install Rust. rustup.rs heavily recommended. See https://www.rustup.rs/ for details # Alternatively, you can also use multirust. See https://github.com/brson/multirust for details $ curl https://sh.rustup.rs -sSf | sh  # Step 0: Our target is an ARMv7 device, the triple for this target is `armv7-unknown-linux-gnueabihf`  # Step 1: Install the C cross toolchain $ sudo apt-get install -qq gcc-arm-linux-gnueabihf  # Step 2: Install the cross compiled standard crates $ rustup target add armv7-unknown-linux-gnueabihf  # Step 3: Configure cargo for cross compilation $ mkdir -p ~/.cargo $ cat >>~/.cargo/config <<EOF > [target.armv7-unknown-linux-gnueabihf] > linker = ""arm-linux-gnueabihf-gcc"" > EOF  # Test cross compiling a Cargo project $ cargo new --bin hello $ cd hello $ cargo build --target=armv7-unknown-linux-gnueabihf    Compiling hello v0.1.0 (file:///home/ubuntu/hello) $ file target/armv7-unknown-linux-gnueabihf/debug/hello hello: ELF 32-bit LSB  shared object, ARM, EABI5 version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=67b58f42db4842dafb8a15f8d47de87ca12cc7de, not stripped  # Test the binary $ scp target/armv7-unknown-linux-gnueabihf/debug/hello me@arm:~ $ ssh me@arm:~ ./hello Hello, world!  1. 2. 3. You are now cross compiling! For more examples check the Travis CI builds. The rest of the guide will explain and generalize each step performed in the previous example. Table of Contents This guide is divided in two parts: The ""main text"" and advanced topics. The main text covers the simplest case: cross compiling Rust programs that depend on the std crate to a ""supported target"" where official builds are available. The advanced topics section covers no_std programs, target specification files, how to cross compile the ""standard crates"" and troubleshooting common problems. The advanced topics section builds on top of the information explained in the main text. So, even if your use case is not the same as the one covered by the main text, you should still read the main text before jumping into the advanced topics section. Terminology Requirements The target triple C cross toolchain Cross compiled Rust crates Cross compiling with rustc Cross compiling with cargo Advanced topics Cross compiling the standard crate Installing the cross compiled standard crates Target specification files Cross compiling no_std code Troubleshooting common problems can't find crate crate incompatible with this version of rustc undefined reference can't load library $symbol not found illegal instruction FAQ I want to build binaries for Linux, Mac and Windows. How do I cross compile from Linux to Mac? How do I compile a fully statically linked Rust binary License Contribution Terminology Let's make sure we are talking the same language by defining some terms first! In its most basic form, cross compiling involves two different systems/computers/devices. A host system where the program is compiled, and a target system where the compiled program gets executed. For example, if you cross compile a Rust program on your laptop to execute it on a Raspberry Pi 2 (RPi2). Then your laptop is the host, and the RPi2 is the target. However, a (cross) compiler doesn't produce a binary that only works on a single system (e.g. the RPi2). The produced binary can also be executed on several other systems (e.g. the ODROIDs) that share some characteristics like their architecture (e.g. ARM) and their Operating System (e.g. Linux). To refer to this set of systems with shared characteristics we use a string called a triple. Triples are usually formatted as follows: {arch}-{vendor}-{sys}-{abi}. For example, the triple arm-unknown-linux-gnueabihf refers to the systems that share these characteristics: architecture: arm. vendor: unknown. In this case, no vendor was specified and/or is not important. system: linux. ABI: gnueabihf. gnueabihf indicates that the system uses glibc as its C standard library (libc) implementation and has hardware accelerated floating point arithmetic (i.e. an FPU). And systems like the RPi2, the ODROIDs, and pretty much every ARMv7 dev board that runs GNU/Linux belongs to this triple. Some triples omit the vendor or the abi component so they are actually ""triples"". An example of such a triple is x86_64-apple-darwin, where: architecture: x86_64. vendor: apple. system: darwin. NOTE From now on, I'm going to overload the term target to mean a single target system, and also to refer to a set of systems with shared characteristics specified by some triple. Requirements To compile a Rust program we need 4 things: Find out what's the triple for the target system. A gcc cross compiler, because rustc uses gcc to ""link"" stuff together. C dependencies, usually ""libc"", cross compiled for the target system. Rust dependencies, usually the std crate, cross compiled for the target system. The target triple To find out the triple for your target, you first need to figure out these four bits of information about the target: Architecture: On UNIXy systems, you can find this with the command uname -m. Vendor: On linux: usually unknown. On windows: pc. On OSX/iOS: apple System: On UNIXy systems, you can find this with the command uname -s ABI: On Linux, this refers to the libc implementation which you can find out with ldd --version. Mac and *BSD systems don't provide multiple ABIs, so this field is omitted. On Windows, AFAIK there are only two ABIs: gnu and msvc. Next you need to compare this information against the targets supported by rustc, and check if there's a match. If you have a nightly-2016-02-14, 1.8.0-beta.1 or newer rustc you can use the rustc --print target-list command to get the full list of supported targets. Here's the list of supported targets as of 1.8.0-beta.1: $ rustc --print target-list | pr -tw100 --columns 3 aarch64-apple-ios                i686-pc-windows-gnu              x86_64-apple-darwin aarch64-linux-android            i686-pc-windows-msvc             x86_64-apple-ios aarch64-unknown-linux-gnu        i686-unknown-dragonfly           x86_64-pc-windows-gnu arm-linux-androideabi            i686-unknown-freebsd             x86_64-pc-windows-msvc arm-unknown-linux-gnueabi        i686-unknown-linux-gnu           x86_64-rumprun-netbsd arm-unknown-linux-gnueabihf      i686-unknown-linux-musl          x86_64-sun-solaris armv7-apple-ios                  le32-unknown-nacl                x86_64-unknown-bitrig armv7-unknown-linux-gnueabihf    mips-unknown-linux-gnu           x86_64-unknown-dragonfly armv7s-apple-ios                 mips-unknown-linux-musl          x86_64-unknown-freebsd asmjs-unknown-emscripten         mipsel-unknown-linux-gnu         x86_64-unknown-linux-gnu i386-apple-ios                   mipsel-unknown-linux-musl        x86_64-unknown-linux-musl i586-unknown-linux-gnu           powerpc-unknown-linux-gnu        x86_64-unknown-netbsd i686-apple-darwin                powerpc64-unknown-linux-gnu      x86_64-unknown-openbsd i686-linux-android               powerpc64le-unknown-linux-gnu  NOTE If you are wondering what's the difference between arm-unknown-linux-gnueabihf and armv7-unknown-linux-gnueabihf, the arm triple covers ARMv6 and ARMv7 processors whereas armv7 only supports ARMv7 processors. For this reason, the armv7 triple enables optimizations that are only possible on ARMv7 processors. OTOH, if you use the arm triple you would have to opt-in to these optimizations by passing extra flags like -C target-feature=+neon to rustc. TL;DR For faster binaries, use armv7 if your target has an ARMv7 processor. If you didn't find a triple that matches your target system, then you are going to need to create a target specification file. From this point forwards, I'll use the term $rustc_target to refer to the triple you found in this section. For example, if you found that your target is arm-unknown-linux-gnueabihf, then whenever you see something like --target=$rustc_target mentally expand the $rustc_target bit so you end with --target=arm-unknown-linux-gnueaibhf. Similarly, I'll use the $host term to refer to the host triple. You can find this triple in the rustc -Vv output under the host field. For example, my host system has triple x86_64-unknown-linux-gnu. C cross toolchain Here things get a little confusing. gcc cross compilers only target a single triple. And this triple is used to prefix all the toolchain commands: ar, gcc, etc. This helps to distinguish a tool used for native compilation, e.g. gcc, from a cross compilation tool, e.g. arm-none-eabi-gcc. The confusing part is that triples can be quite arbitrary, so your C cross compiler will most likely be prefixed with a triple that's different from $rustc_target. For example, in Ubuntu the cross compiler for ARM devices is packaged as arm-linux-gnueabihf-gcc, the same cross compiler is prefixed as armv7-unknown-linux-gnueabihf-gcc in Exherbo, and rustc uses the arm-unknown-linux-gnueabihf triple for that target. None of these triple match but they refer to the same set of systems. The best way to confirm that you have the correct cross toolchain for your target system is to cross compile a C program, preferably something not trivial, and test executing it on the target system. As to where to get the C cross toolchain, that will depend on your system. Some Linux distributions provide packaged cross compilers. In other cases, you'll need to compile the cross compiler yourself. Tools like crosstool-ng can help with that endeavor. For Linux to OSX, check the osxcross project. Some examples of packaged cross compilers below: For arm-unknown-linux-gnueabi, Ubuntu and Debian provide the gcc-*-arm-linux-gnueabi packages, where * is gcc version. Example: gcc-4.9-arm-linux-gnueabi For arm-unknown-linux-gnueabihf, same as above but replace gnueabi with gnueabihf For OpenWRT devices, i.e. targets mips-unknown-linux-uclibc (15.05 and older) and mips-unknown-linux-musl (post 15.05), use the OpenWRT SDK For the Raspberry Pi, use the Raspberry tools. Note that the C cross toolchain will ship with a cross compiled libc for your target. Make sure that: The toolchain libc matches the target libc. Example, if your target uses the musl libc, then your toolchain must also use the musl libc. The toolchain libc is ABI compatible with the target libc. This usually means that the toolchain libc must be older than the target libc. Ideally, both the toolchain libc and the target libc should have the exact same version. From this point forwards, I'll use the term $gcc_prefix to refer to the prefix of the cross compilation tools (i.e. the cross toolchain) you installed in this section. Cross compiled Rust crates Most Rust programs link to the std crate, so at the very least you'll need a cross compiled std crate to cross compile your program. The easiest way to get it is from the official builds. If you are using multirust, as of 2016-03-08, you can install these crates with a single command: multirust add-target nightly $rustc_target. If you are using rustup.rs, use the command: rustup target add $rustc_target. And if you are using neither, follow the instructions below to install the crates manually. The tarball you want is $date/rust-std-nightly-$rustc_target.tar.gz. Where $date usually matches with the rustc commit date shown in rustc -V, although on occasion the dates may differ by one or a few days. For example, for a arm-unknown-linux-gnueabihf target and a rustc with version (rustc -V) rustc 1.8.0-nightly (3c9442fc5 2016-02-04) this is the correct tarball: http://static.rust-lang.org/dist/2016-02-04/rust-std-beta-arm-unknown-linux-gnueabihf.tar.gz  To install the tarball use the install.sh script that's inside the tarball: $ tar xzf rust-std-nightly-arm-unknown-linux-gnueabihf.tar.gz $ cd rust-std-nightly-arm-unknown-linux-gnueabihf $ ./install.sh --prefix=$(rustc --print sysroot)  WARNING The above command will output a message that looks like this: ""creating uninstall script at /some/path/lib/rustlib/uninstall.sh"". Do not run that script because it will uninstall the cross compiled standard crates and the native standard crates; leaving you with an unusable Rust installation and you won't be able to compile natively. If for some reason you need to uninstall the crates you just installed, simply remove the following directory: $(rustc --print sysroot)/lib/rustlib/$rustc_target. NOTE If you are using the nightly channel, every time you update your Rust install you'll have to install a new set of cross compiled standard crates. To do so, simply download a new tarball and use the install.sh script as before. AFAICT the script will also take care of removing the old set of crates. Cross compiling with rustc This is the easy part! Cross compiling with rustc only requires passing a few extra flags to its invocation: --target=$rustc_target, tells rustc we are cross compiling for $rustc_target. -C linker=$gcc_prefix-gcc, instructs rustc to use a cross linker instead of the native one (cc). Next, an example to test the cross compilation setup so far: Create a hello world program on the host $ cat hello.rs fn main() {     println!(""Hello, world!""); }  Cross compile the program on the host $ rustc \     --target=arm-unknown-linux-gnueabihf \     -C linker=arm-linux-gnueabihf-gcc \     hello.rs  Run the program on the target $ scp hello me@arm:~ $ ssh me@arm ./hello Hello, world!  Cross compiling with cargo To cross compile with cargo, we must first use its configuration system to set the proper linker and archiver for the target. Once set, we only need to pass the --target flag to cargo commands. Cargo configuration is stored in a TOML file, the key we are interested in is target.$rustc_target.linker. The value to store in this key is the same we passed to rustc in the previous section. It's up to you to decide if you make this configuration global or project specific. Let's go over an example: Create a new binary Cargo project. $ cargo new --bin foo $ cd foo  Add a dependency to the project. $ echo 'clap = ""2.0.4""' >> Cargo.toml $ cat Cargo.toml [package] authors = [""me"", ""myself"", ""I""] name = ""foo"" version = ""0.1.0""  [dependencies] clap = ""2.0.4""  Configure the target linker and archiver only for this project. $ mkdir .cargo $ cat >.cargo/config <<EOF > [target.arm-unknown-linux-gnueabihf] > linker = ""arm-linux-gnueabihf-gcc"" > EOF  Write the application $ cat >src/main.rs <<EOF > extern crate clap; > > use clap::App; > > fn main() { >     let _ = App::new(""foo"").version(""0.1.0"").get_matches(); > } > EOF  Build the project for the target $ cargo build --target=arm-unknown-linux-gnueabihf  Deploy the binary to the target $ scp target/arm-unknown-linux-gnueabihf/debug/foo me@arm:~  Run the binary on the target. $ ssh me@arm ./foo -h foo 0.1.0  USAGE:         foo [FLAGS]  FLAGS:     -h, --help       Prints help information     -V, --version    Prints version information  Advanced topics Cross compiling the standard crates Right now, you can only cross compile the standard crates if your target is supported by the Rust build system (RBS). You can find a list of all the supported targets in the mk/cfg directory (NOTE linked directory is not the latest revision). As of rustc 1.8.0-nightly (3c9442fc5 2016-02-04), I see the following supported targets: $ ls mk/cfg aarch64-apple-ios.mk              i686-pc-windows-msvc.mk           x86_64-pc-windows-gnu.mk aarch64-linux-android.mk          i686-unknown-freebsd.mk           x86_64-pc-windows-msvc.mk aarch64-unknown-linux-gnu.mk      i686-unknown-linux-gnu.mk         x86_64-rumprun-netbsd.mk arm-linux-androideabi.mk          le32-unknown-nacl.mk              x86_64-sun-solaris.mk arm-unknown-linux-gnueabihf.mk    mipsel-unknown-linux-gnu.mk       x86_64-unknown-bitrig.mk arm-unknown-linux-gnueabi.mk      mipsel-unknown-linux-musl.mk      x86_64-unknown-dragonfly.mk armv7-apple-ios.mk                mips-unknown-linux-gnu.mk         x86_64-unknown-freebsd.mk armv7s-apple-ios.mk               mips-unknown-linux-musl.mk        x86_64-unknown-linux-gnu.mk armv7-unknown-linux-gnueabihf.mk  powerpc64le-unknown-linux-gnu.mk  x86_64-unknown-linux-musl.mk i386-apple-ios.mk                 powerpc64-unknown-linux-gnu.mk    x86_64-unknown-netbsd.mk i686-apple-darwin.mk              powerpc-unknown-linux-gnu.mk      x86_64-unknown-openbsd.mk i686-linux-android.mk             x86_64-apple-darwin.mk i686-pc-windows-gnu.mk            x86_64-apple-ios.mk  NOTE If your target is not supported by the RBS, then you'll need to add support for your target to it. I won't go over the details of adding support for a new target, but you can use this PR as a reference. NOTE If you are doing bare metal programming, building your own kernel or, in general, working with #![no_std] code, then you probably don't want to (and probably can't because there is no OS) build all the standard crates, but just the core crate and other freestanding crates. If that's your case, read the Cross compiling no_std code section instead of this one. The steps for cross compiling the standard crates are not complicated, but the process of building them does take a very long time because the RBS will bootstrap a new compiler, and then use that bootstrapped compiler to cross compile the crates. Hopefully, the upcoming cargo-based build system will open the possibility of making this much faster by letting you use your already installed rustc and cargo to cross compile the standard crates. Back to the instructions, first you need to figure out the commit hash of your rustc. This is listed under the output of rustc -Vv. For example, this rustc: $ rustc -Vv rustc 1.8.0-nightly (3c9442fc5 2016-02-04) binary: rustc commit-hash: 3c9442fc503fe397b8d3495d5a7f9e599ad63cf6 commit-date: 2016-02-04 host: x86_64-unknown-linux-gnu release: 1.8.0-nightly  Has commit hash: 3c9442fc503fe397b8d3495d5a7f9e599ad63cf6. Next you need to fetch Rust source and check it out at that exact commit hash. Don't omit the checkout or you'll end with crates that are unusable by your compiler. $ git clone https://github.com/rust-lang/rust $ cd rust $ git checkout $rustc_commit_hash # Triple check the git checkout matches `rustc` commit hash $ git rev-parse HEAD $rustc_commit_hash  Next we prepare a build directory for an out of source build. # Anywhere $ mkdir build $ cd build $ /path/to/rust/configure --target=$rustc_target  configure accepts many other configuration flags, check out configure --help for more information. Do note that by default, i.e. without any flag, configure will prepare a fully optimized build. Next we kick off the build: $ make -j$(nproc)  If you hit this error during the build: make[1]: $rbs_prefix-gcc: Command not found  Don't panic! This happens because the RBS expects a gcc with a certain prefix for each target, but this prefix may not match the prefix of your installed cross compiler. For example, in my system, the installed cross compiler is armv7-unknown-linux-gnueabihf-gcc, but the RBS, when building for the arm-unknown-linux-gnueabihf target, expects the cross compiler to be named arm-none-gnueabihf-gcc. This can be easily fixed with some shim binaries: # In the build directory $ mkdir .shims $ cd .shims $ ln -s $(which $gcc_prefix-ar) $rbs_prefix-ar $ ln -s $(which $gcc_prefix-gcc) $rbs_prefix-gcc $ cd .. $ export PATH=$(pwd)/.shims:$PATH  Now you should be able to call both $gcc_prefix-gcc and $rbs_prefix-gcc. For example: # My installed cross compiler $ armv7-unknown-linux-gnueabihf-gcc -v Using built-in specs. COLLECT_GCC=armv7-unknown-linux-gnueabihf-gcc COLLECT_LTO_WRAPPER=/usr/x86_64-pc-linux-gnu/libexec/gcc/armv7-unknown-linux-gnueabihf/5.3.0/lto-wrapper Target: armv7-unknown-linux-gnueabihf Configured with: (...) Thread model: posix gcc version 5.3.0 (GCC)  # The cross compiler that the RBS expects, which is supplied by the .shims directory $ arm-linux-gnueabihf-gcc -v Using built-in specs. COLLECT_GCC=armv7-unknown-linux-gnueabihf-gcc COLLECT_LTO_WRAPPER=/usr/x86_64-pc-linux-gnu/libexec/gcc/armv7-unknown-linux-gnueabihf/5.3.0/lto-wrapper Target: armv7-unknown-linux-gnueabihf Configured with: (...) Thread model: posix gcc version 5.3.0 (GCC)  You can now resume the build with make -j$(nproc). Hopefully the build will complete successfully and your cross compiled crates will be available in the $host/stage2/lib/rustlib/$rustc_target/lib directory. # In the build directory $ ls x86_64-unknown-linux-gnu/stage2/lib/rustlib/arm-unknown-linux-gnueabihf/lib liballoc-db5a760f.rlib           librand-db5a760f.rlib            stamp.arena liballoc_jemalloc-db5a760f.rlib  librbml-db5a760f.rlib            stamp.collections liballoc_system-db5a760f.rlib    librbml-db5a760f.so              stamp.core libarena-db5a760f.rlib           librustc_bitflags-db5a760f.rlib  stamp.flate libarena-db5a760f.so             librustc_unicode-db5a760f.rlib   stamp.getopts libcollections-db5a760f.rlib     libserialize-db5a760f.rlib       stamp.graphviz libcompiler-rt.a                 libserialize-db5a760f.so         stamp.libc libcore-db5a760f.rlib            libstd-db5a760f.rlib             stamp.log libflate-db5a760f.rlib           libstd-db5a760f.so               stamp.rand libflate-db5a760f.so             libterm-db5a760f.rlib            stamp.rbml libgetopts-db5a760f.rlib         libterm-db5a760f.so              stamp.rustc_bitflags libgetopts-db5a760f.so           libtest-db5a760f.rlib            stamp.rustc_unicode libgraphviz-db5a760f.rlib        libtest-db5a760f.so              stamp.serialize libgraphviz-db5a760f.so          rustlib                          stamp.std liblibc-db5a760f.rlib            stamp.alloc                      stamp.term liblog-db5a760f.rlib             stamp.alloc_jemalloc             stamp.test liblog-db5a760f.so               stamp.alloc_system  The next section will tell you how to install these crates in your Rust installation directory. Installing the cross compiled standard crates First, we need to take a closer look at your Rust installation directory, whose path you can get with rustc --print sysroot: # I'm using rustup.rs, you'll get a different path if you used rustup.sh or your distro package # manager to install Rust $ tree -d $(rustc --print sysroot) ~/.multirust/toolchains/nightly ├── bin ├── etc │   └── bash_completion.d ├── lib │   └── rustlib │       ├── etc │       └── $host │           └── lib └── share     ├── doc     │   └── (...)     ├── man     │   └── man1     └── zsh         └── site-functions  See that lib/rustlib/$host directory? That's where your native crates are stored. The cross compiled crates must be installed right next to that directory. Following the example from the previous section, the following command will copy the standard crates built by the RBS in the right place. # In the 'build' directory $ cp -r \     $host/stage2/lib/rustlib/$target     $(rustc --print sysroot)/lib/rustlib  Finally, we check that the crates are in the right place. $ tree $(rustc --print sysroot)/lib/rustlib /home/japaric/.multirust/toolchains/nightly/lib/rustlib ├── (...) ├── uninstall.sh ├── $host │  └── lib │       ├── liballoc-fd663c41.rlib │       ├── (...) │       ├── libarena-fd663c41.so │       └── (...) └── $target     └── lib         ├── liballoc-fd663c41.rlib         ├── (...)         ├── libarena-fd663c41.so         └── (...)  This way you can install crates for as many targets as you want. To ""uninstall"" the crates simply remove the $target directory. Target specification files A target specification file is a JSON file that provides detailed information about a target to the Rust compiler. This specification file has five required fields and several optional ones. All its keys are strings and its values are either strings or booleans. A minimal target spec file for Cortex M3 microcontrollers is shown below: {   ""0"": ""NOTE: I'll use these 'numeric' fields as comments, but they shouldn't appear in these files"",   ""1"": ""The next five fields are _required_"",   ""arch"": ""arm"",   ""llvm-target"": ""thumbv7m-none-eabi"",   ""os"": ""none"",   ""target-endian"": ""little"",   ""target-pointer-width"": ""32"",    ""2"": ""These fields are optional. Not all the possible optional fields are listed here, though"",   ""cpu"": ""cortex-m3"",   ""morestack"": false } A list of all the possible keys and their effect on compilation can be found in the src/librustc_back/target/mod.rs file (NOTE: the linked file is not the latest revision). There are two ways to pass these target specification files to rustc, the first is pass the full path via the --target flag. $ rustc --target path/to/thumbv7m-none-eabi.json (...)  The other is to simply pass the ""file stem"" of the file to --target, but then the file must be in the working directory or in the directory specified by the RUST_TARGET_PATH variable. # Target specification file is in the working directory $ ls thumbv7m-none-eabi.json thumbv7m-none-eabi.json  # Passing just the ""file stem"" works $ rustc --target thumbv7m-none-eabi (...)  Cross compiling no_std code When working with no_std code you only want a few freestanding crates like core, and you are probably working with a custom target, e.g. a Cortex-M microcontroller, so there are no official builds for your target nor can you build these crates using the RBS. A simple solution to get a cross compiled core crate is to make your program/crate depend on the rust-libcore crate. This will make Cargo build the core crate as part of the cargo build process. However, this approach has two problems: Virality: You can't make your crate depend on another no_std crate unless that crate also depends on rust-libcore. If you want your crate to depend on another standard crate then a new rust-lib$crate crate would need to be created. An alternative solution that doesn't have these problems is to use a ""sysroot"" that holds the cross compiled crates. I'm implementing this approach in xargo. For more details check the repository. Troubleshooting common problems Anything that can go wrong, will go wrong -- Murphy's law This section: What to do when things go wrong. can't find crate Symptom $ cargo build --target $rustc_target error: can't find crate for `$crate`  Cause rustc can't find the cross compiled standard crate $crate in your Rust installation directory. Solution Check the Installing the cross compiled standard crates section and make sure the cross compiled $crate crate is in the right place. crate incompatible with this version of rustc Symptom $ cargo build --target $rustc_target error: the crate `$crate` has been compiled with rustc $version-$channel ($hash $date), which is incompatible with this version of rustc  Cause The version of the cross compiled standard crates that you installed don't match your rustc version. Solution If you are on the nightly channel and installed an official build, you probably got the date of the tarball wrong. Try a different date. If you cross compiled the crates from source, then you checked out the wrong commit of the source. You'll have the build the crates again, but making sure you check out the repository at the right commit (it must match the commit-hash field of rustc -Vv output). undefined reference Symptom $ cargo build --target $rustc_target /path/to/some/file.c:$line: undefined reference to `$symbol`  Cause The scenario goes like this: The standard crates were cross compiled using a C cross toolchain ""A"". Then you cross compile a Rust program using C cross toolchain ""B"", this program was also linked to the standard crates produced in the previous step. The problem occurs when the libc component of toolchain ""A"" is newer than the libc component of toolchain ""B"". In this case, the standard crates cross compiled with ""A"" may depend on libc symbols that are not available in ""B""'s libc. This error will also occur if ""A""'s libc is different from ""B""'s libc. Example: toolchain ""A"" is mips-linux-gnu and toolchain ""B"" is mips-linux-musl. Solution If you observe this with a official build, that's a bug. It indicates that the Rust team must downgrade the libc component of the C cross toolchain they are using to build the standard crates. If you are cross compiling the standard crates yourself, then it would be ideal if you use the same C cross toolchain to build the standard crates and to cross compile Rust programs. can't load library Symptom # On target $ ./hello ./hello: can't load library 'libpthread.so.0'  Cause Your target system is missing a shared library. You can confirm this with ldd: # Or `LD_TRACE_LOADED_OBJECTS=1 ./hello` on uClibc-based OpenWRT devices $ ldd hello         libdl.so.0 => /lib/libdl.so.0 (0x771ba000)         libpthread.so.0 => not found         libgcc_s.so.1 => /lib/libgcc_s.so.1 (0x77196000)         libc.so.0 => /lib/libc.so.0 (0x77129000)         ld-uClibc.so.0 => /lib/ld-uClibc.so.0 (0x771ce000)         libm.so.0 => /lib/libm.so.0 (0x77103000)  All the missing libraries are marked with ""not found"". Solution Install the missing shared libraries in your target system. Continuing the previous example: # target system is an OpenWRT device $ opkg install libpthread $ ./hello Hello, world!  $symbol not found Symptom # On target $ ./hello rustc: /path/to/$c_library.so: version `$symbol' not found (required by /path/to/$rust_library.so).  Cause ABI mismatch between the library that was dynamically linked to the binary during cross compilation and the library that's installed in the target. Solution Update/change the library on either the host or the target to make them both ABI compatible. Ideally, the host and the target should have the same library version. NOTE When I say the library on the host, I'm referring to the cross compiled library that the $prefix_gcc-gcc is linking into your Rust program. I'm not referring to the native library that may be installed in the host. illegal instruction Symptom # on target $ ./hello Illegal instruction  Causes NOTE You can also get an ""illegal instruction"" error if your program reaches an Out Of Memory (OOM) condition. In some systems, you will additionally see an ""fatal runtime error: out of memory"" message when you hit OOM. If you are sure that's not your case, then this is a cross compilation problem. This occurs because your program contains an instruction that's not supported by your target system. Among the possible causes of this problem we have: You are compiling for a hard float target, e.g. arm-unknown-linux-gnueabihf, but your target doesn't support hard float operations and it's actually a soft float target, e.g. arm-unknown-linux-gnueabi. Solution: Use the right triple, in this example: arm-unknown-linux-gnueabi. You are using the right soft float triple, e.g. arm-unknown-linux-gnueabi, for your target system. But your C cross toolchain was compiled with hard float support and is injecting hard float instructions into your binary. Solution: Get the correct toolchain, one that was built with soft float support. Hint: look for the flag --with-float in the output of $gcc_prefix-gcc -v. FAQ I want to build binaries for Linux, Mac and Windows. How do I cross compile from Linux to Mac? Short answer: You don't. It's hard to find a cross C toolchain (and cross compiled C libraries) between different OSes (except perhaps from Linux to Windows). A much simpler and less error prone way is to build natively for these targets because they are tier 1 platforms. You may not have direct access to all these OSes but that's not a problem because you can use CI services like Travis CI and AppVeyor. Check my rust-everywhere project for instructions on how to do that. How do I compile a fully statically linked Rust binaries? Short answer: cargo build --target x86_64-unknown-linux-musl For targets of the form *-*-linux-gnu*, rustc always produces binaries dynamically linked to glibc and other libraries: $ cargo new --bin hello $ cargo build --target x86_64-unknown-linux-gnu $ file target/x86_64-unknown-linux-gnu/debug/hello target/x86_64-unknown-linux-gnu/debug/hello: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /usr/x86_64-pc-linux-gnu/lib/ld-linux-x86-64.so.2, for GNU/Linux 2.6.34, BuildID[sha1]=a3fa7281e9ded30372b5131a2feb6f1e78a6f1cd, not stripped $ ldd target/x86_64-unknown-linux-gnu/debug/hello         linux-vdso.so.1 (0x00007fff58bf4000)         libdl.so.2 => /usr/x86_64-pc-linux-gnu/lib/libdl.so.2 (0x00007fc4b2d3f000)         libpthread.so.0 => /usr/x86_64-pc-linux-gnu/lib/libpthread.so.0 (0x00007fc4b2b22000)         libgcc_s.so.1 => /usr/x86_64-pc-linux-gnu/lib/libgcc_s.so.1 (0x00007fc4b290c000)         libc.so.6 => /usr/x86_64-pc-linux-gnu/lib/libc.so.6 (0x00007fc4b2568000)         /usr/x86_64-pc-linux-gnu/lib/ld-linux-x86-64.so.2 (0x00007fc4b2f43000)         libm.so.6 => /usr/x86_64-pc-linux-gnu/lib/libm.so.6 (0x00007fc4b2272000)  To produce statically linked binaries, Rust provides two targets: x86_64-unknown-linux-musl and i686-unknown-linux-musl. The binaries produced for these targets are statically linked to the MUSL C library. Example below: $ cargo new --bin hello $ cd hello $ rustup target add x86_64-unknown-linux-musl $ cargo build --target x86_64-unknown-linux-musl $ file target/x86_64-unknown-linux-musl/debug/hello target/x86_64-unknown-linux-musl/debug/hello: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=759d41b9a78d86bff9b6529d12c8fd6b934c0088, not stripped $ ldd target/x86_64-unknown-linux-musl/debug/hello         not a dynamic executable  License Licensed under either of Apache License, Version 2.0 (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/japaric/rust-cross"	"— everything you need to know about cross compiling Rust programs"	"true"
"Embedded"	""	"https://travis-ci.org/japaric/rust-cross"	"— everything you need to know about cross compiling Rust programs"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— everything you need to know about cross compiling Rust programs"	"true"
"Embedded"	"Ogeon/rust-on-raspberry-pi"	"https://github.com/Ogeon/rust-on-raspberry-pi"	"— instructions for how to cross compile Rust projects for the Raspberry Pi."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"173"	"13"	"15"	"GitHub - Ogeon/rust-on-raspberry-pi: Instructions for how to cross compile Rust projects for the Raspberry Pi Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 173 Fork 15 Ogeon/rust-on-raspberry-pi Code Issues 7 Pull requests 0 Pulse Graphs Instructions for how to cross compile Rust projects for the Raspberry Pi 15 commits 1 branch 0 releases 4 contributors Shell 100.0% Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit ff546c1 Apr 15, 2016 briansmith committed with Ogeon Add C++ support. (#15) … Export `CXX` analogously to how `CC` is exported.  This is necessary for building crates that have C++ code, such as *ring*, using `cross64` & `cross32`. Permalink Failed to load latest commit information. docker Merge pull request #11 from ravicious/fix-permissions-on-os-x Mar 8, 2016 DOCKER.md auto-detect latest rust stable from git tags Dec 17, 2015 MANUAL.md Add C++ support. (#15) Apr 16, 2016 README.md added some detail in DOCKER.md regarding target platform dependencies… Dec 10, 2015 cross32 Add C++ support. (#15) Apr 15, 2016 cross64 Add C++ support. (#15) Apr 15, 2016 README.md Cross Compiling for Raspberry Pi This guide will show how Rust programs can be cross compiled for the Raspberry Pi using Cargo. These instructions may or may not work for your particular system, so you may have to adjust the procedure to fit your configuration. You can build the cross compiler and your rust project... ...by hand on your host machine -- flexible but also more complex (see MANUAL.md) ...utilizing a docker image and running inside a docker container -- simple but a little less flexible (see DOCKER.md) Pull requests with enhancements, corrections or additional instructions are very much appreciated. Good luck! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Ogeon/rust-on-raspberry-pi"	"— instructions for how to cross compile Rust projects for the Raspberry Pi."	"true"
"FFI"	"Foreign Function Interface"	"https://doc.rust-lang.org/book/ffi.html"	"— instructions for how to cross compile Rust projects for the Raspberry Pi."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Foreign Function Interface Toggle navigation 1. Introduction 2. Getting Started 3. Tutorial: Guessing Game 4. Syntax and Semantics 4.1. Variable Bindings 4.2. Functions 4.3. Primitive Types 4.4. Comments 4.5. if 4.6. Loops 4.7. Vectors 4.8. Ownership 4.9. References and Borrowing 4.10. Lifetimes 4.11. Mutability 4.12. Structs 4.13. Enums 4.14. Match 4.15. Patterns 4.16. Method Syntax 4.17. Strings 4.18. Generics 4.19. Traits 4.20. Drop 4.21. if let 4.22. Trait Objects 4.23. Closures 4.24. Universal Function Call Syntax 4.25. Crates and Modules 4.26. `const` and `static` 4.27. Attributes 4.28. `type` aliases 4.29. Casting between types 4.30. Associated Types 4.31. Unsized Types 4.32. Operators and Overloading 4.33. Deref coercions 4.34. Macros 4.35. Raw Pointers 4.36. `unsafe` 5. Effective Rust 5.1. The Stack and the Heap 5.2. Testing 5.3. Conditional Compilation 5.4. Documentation 5.5. Iterators 5.6. Concurrency 5.7. Error Handling 5.8. Choosing your Guarantees 5.9. FFI 5.10. Borrow and AsRef 5.11. Release Channels 5.12. Using Rust without the standard library 6. Nightly Rust 6.1. Compiler Plugins 6.2. Inline Assembly 6.3. No stdlib 6.4. Intrinsics 6.5. Lang items 6.6. Advanced linking 6.7. Benchmark Tests 6.8. Box Syntax and Patterns 6.9. Slice Patterns 6.10. Associated Constants 6.11. Custom Allocators 7. Glossary 8. Syntax Index 9. Bibliography Foreign Function Interface Introduction This guide will use the snappy compression/decompression library as an introduction to writing bindings for foreign code. Rust is currently unable to call directly into a C++ library, but snappy includes a C interface (documented in snappy-c.h). A note about libc Many of these examples use the libc crate, which provides various type definitions for C types, among other things. If you’re trying these examples yourself, you’ll need to add libc to your Cargo.toml: [dependencies] libc = ""0.2.0""  and add extern crate libc; to your crate root. Calling foreign functions The following is a minimal example of calling a foreign function which will compile if snappy is installed: #![feature(libc)] extern crate libc; use libc::size_t; #[link(name = ""snappy"")] extern { fn snappy_max_compressed_length(source_length: size_t) -> size_t; } fn main() { let x = unsafe { snappy_max_compressed_length(100) }; println!(""max compressed length of a 100 byte buffer: {}"", x); }  extern crate libc; use libc::size_t;  #[link(name = ""snappy"")] extern {     fn snappy_max_compressed_length(source_length: size_t) -> size_t; }  fn main() {     let x = unsafe { snappy_max_compressed_length(100) };     println!(""max compressed length of a 100 byte buffer: {}"", x); } The extern block is a list of function signatures in a foreign library, in this case with the platform's C ABI. The #[link(...)] attribute is used to instruct the linker to link against the snappy library so the symbols are resolved. Foreign functions are assumed to be unsafe so calls to them need to be wrapped with unsafe {} as a promise to the compiler that everything contained within truly is safe. C libraries often expose interfaces that aren't thread-safe, and almost any function that takes a pointer argument isn't valid for all possible inputs since the pointer could be dangling, and raw pointers fall outside of Rust's safe memory model. When declaring the argument types to a foreign function, the Rust compiler can not check if the declaration is correct, so specifying it correctly is part of keeping the binding correct at runtime. The extern block can be extended to cover the entire snappy API: #![feature(libc)] extern crate libc; use libc::{c_int, size_t}; #[link(name = ""snappy"")] extern { fn snappy_compress(input: *const u8, input_length: size_t, compressed: *mut u8, compressed_length: *mut size_t) -> c_int; fn snappy_uncompress(compressed: *const u8, compressed_length: size_t, uncompressed: *mut u8, uncompressed_length: *mut size_t) -> c_int; fn snappy_max_compressed_length(source_length: size_t) -> size_t; fn snappy_uncompressed_length(compressed: *const u8, compressed_length: size_t, result: *mut size_t) -> c_int; fn snappy_validate_compressed_buffer(compressed: *const u8, compressed_length: size_t) -> c_int; } fn main() {}  extern crate libc; use libc::{c_int, size_t};  #[link(name = ""snappy"")] extern {     fn snappy_compress(input: *const u8,                        input_length: size_t,                        compressed: *mut u8,                        compressed_length: *mut size_t) -> c_int;     fn snappy_uncompress(compressed: *const u8,                          compressed_length: size_t,                          uncompressed: *mut u8,                          uncompressed_length: *mut size_t) -> c_int;     fn snappy_max_compressed_length(source_length: size_t) -> size_t;     fn snappy_uncompressed_length(compressed: *const u8,                                   compressed_length: size_t,                                   result: *mut size_t) -> c_int;     fn snappy_validate_compressed_buffer(compressed: *const u8,                                          compressed_length: size_t) -> c_int; } Creating a safe interface The raw C API needs to be wrapped to provide memory safety and make use of higher-level concepts like vectors. A library can choose to expose only the safe, high-level interface and hide the unsafe internal details. Wrapping the functions which expect buffers involves using the slice::raw module to manipulate Rust vectors as pointers to memory. Rust's vectors are guaranteed to be a contiguous block of memory. The length is number of elements currently contained, and the capacity is the total size in elements of the allocated memory. The length is less than or equal to the capacity. #![feature(libc)] extern crate libc; use libc::{c_int, size_t}; unsafe fn snappy_validate_compressed_buffer(_: *const u8, _: size_t) -> c_int { 0 } fn main() {} pub fn validate_compressed_buffer(src: &[u8]) -> bool { unsafe { snappy_validate_compressed_buffer(src.as_ptr(), src.len() as size_t) == 0 } }  pub fn validate_compressed_buffer(src: &[u8]) -> bool {     unsafe {         snappy_validate_compressed_buffer(src.as_ptr(), src.len() as size_t) == 0     } } The validate_compressed_buffer wrapper above makes use of an unsafe block, but it makes the guarantee that calling it is safe for all inputs by leaving off unsafe from the function signature. The snappy_compress and snappy_uncompress functions are more complex, since a buffer has to be allocated to hold the output too. The snappy_max_compressed_length function can be used to allocate a vector with the maximum required capacity to hold the compressed output. The vector can then be passed to the snappy_compress function as an output parameter. An output parameter is also passed to retrieve the true length after compression for setting the length. #![feature(libc)] extern crate libc; use libc::{size_t, c_int}; unsafe fn snappy_compress(a: *const u8, b: size_t, c: *mut u8, d: *mut size_t) -> c_int { 0 } unsafe fn snappy_max_compressed_length(a: size_t) -> size_t { a } fn main() {} pub fn compress(src: &[u8]) -> Vec<u8> { unsafe { let srclen = src.len() as size_t; let psrc = src.as_ptr(); let mut dstlen = snappy_max_compressed_length(srclen); let mut dst = Vec::with_capacity(dstlen as usize); let pdst = dst.as_mut_ptr(); snappy_compress(psrc, srclen, pdst, &mut dstlen); dst.set_len(dstlen as usize); dst } }  pub fn compress(src: &[u8]) -> Vec<u8> {     unsafe {         let srclen = src.len() as size_t;         let psrc = src.as_ptr();          let mut dstlen = snappy_max_compressed_length(srclen);         let mut dst = Vec::with_capacity(dstlen as usize);         let pdst = dst.as_mut_ptr();          snappy_compress(psrc, srclen, pdst, &mut dstlen);         dst.set_len(dstlen as usize);         dst     } } Decompression is similar, because snappy stores the uncompressed size as part of the compression format and snappy_uncompressed_length will retrieve the exact buffer size required. #![feature(libc)] extern crate libc; use libc::{size_t, c_int}; unsafe fn snappy_uncompress(compressed: *const u8, compressed_length: size_t, uncompressed: *mut u8, uncompressed_length: *mut size_t) -> c_int { 0 } unsafe fn snappy_uncompressed_length(compressed: *const u8, compressed_length: size_t, result: *mut size_t) -> c_int { 0 } fn main() {} pub fn uncompress(src: &[u8]) -> Option<Vec<u8>> { unsafe { let srclen = src.len() as size_t; let psrc = src.as_ptr(); let mut dstlen: size_t = 0; snappy_uncompressed_length(psrc, srclen, &mut dstlen); let mut dst = Vec::with_capacity(dstlen as usize); let pdst = dst.as_mut_ptr(); if snappy_uncompress(psrc, srclen, pdst, &mut dstlen) == 0 { dst.set_len(dstlen as usize); Some(dst) } else { None // SNAPPY_INVALID_INPUT } } }  pub fn uncompress(src: &[u8]) -> Option<Vec<u8>> {     unsafe {         let srclen = src.len() as size_t;         let psrc = src.as_ptr();          let mut dstlen: size_t = 0;         snappy_uncompressed_length(psrc, srclen, &mut dstlen);          let mut dst = Vec::with_capacity(dstlen as usize);         let pdst = dst.as_mut_ptr();          if snappy_uncompress(psrc, srclen, pdst, &mut dstlen) == 0 {             dst.set_len(dstlen as usize);             Some(dst)         } else {             None // SNAPPY_INVALID_INPUT         }     } } For reference, the examples used here are also available as a library on GitHub. Destructors Foreign libraries often hand off ownership of resources to the calling code. When this occurs, we must use Rust's destructors to provide safety and guarantee the release of these resources (especially in the case of panic). For more about destructors, see the Drop trait. Callbacks from C code to Rust functions Some external libraries require the usage of callbacks to report back their current state or intermediate data to the caller. It is possible to pass functions defined in Rust to an external library. The requirement for this is that the callback function is marked as extern with the correct calling convention to make it callable from C code. The callback function can then be sent through a registration call to the C library and afterwards be invoked from there. A basic example is: Rust code: extern fn callback(a: i32) { println!(""I'm called from C with value {0}"", a); } #[link(name = ""extlib"")] extern { fn register_callback(cb: extern fn(i32)) -> i32; fn trigger_callback(); } fn main() { unsafe { register_callback(callback); trigger_callback(); // Triggers the callback } }  extern fn callback(a: i32) {     println!(""I'm called from C with value {0}"", a); }  #[link(name = ""extlib"")] extern {    fn register_callback(cb: extern fn(i32)) -> i32;    fn trigger_callback(); }  fn main() {     unsafe {         register_callback(callback);         trigger_callback(); // Triggers the callback     } } C code: typedef void (*rust_callback)(int32_t); rust_callback cb;  int32_t register_callback(rust_callback callback) {     cb = callback;     return 1; }  void trigger_callback() {   cb(7); // Will call callback(7) in Rust }  In this example Rust's main() will call trigger_callback() in C, which would, in turn, call back to callback() in Rust. Targeting callbacks to Rust objects The former example showed how a global function can be called from C code. However it is often desired that the callback is targeted to a special Rust object. This could be the object that represents the wrapper for the respective C object. This can be achieved by passing an raw pointer to the object down to the C library. The C library can then include the pointer to the Rust object in the notification. This will allow the callback to unsafely access the referenced Rust object. Rust code: #[repr(C)] struct RustObject { a: i32, // other members } extern ""C"" fn callback(target: *mut RustObject, a: i32) { println!(""I'm called from C with value {0}"", a); unsafe { // Update the value in RustObject with the value received from the callback (*target).a = a; } } #[link(name = ""extlib"")] extern { fn register_callback(target: *mut RustObject, cb: extern fn(*mut RustObject, i32)) -> i32; fn trigger_callback(); } fn main() { // Create the object that will be referenced in the callback let mut rust_object = Box::new(RustObject { a: 5 }); unsafe { register_callback(&mut *rust_object, callback); trigger_callback(); } }  #[repr(C)] struct RustObject {     a: i32,     // other members }  extern ""C"" fn callback(target: *mut RustObject, a: i32) {     println!(""I'm called from C with value {0}"", a);     unsafe {         // Update the value in RustObject with the value received from the callback         (*target).a = a;     } }  #[link(name = ""extlib"")] extern {    fn register_callback(target: *mut RustObject,                         cb: extern fn(*mut RustObject, i32)) -> i32;    fn trigger_callback(); }  fn main() {     // Create the object that will be referenced in the callback     let mut rust_object = Box::new(RustObject { a: 5 });      unsafe {         register_callback(&mut *rust_object, callback);         trigger_callback();     } } C code: typedef void (*rust_callback)(void*, int32_t); void* cb_target; rust_callback cb;  int32_t register_callback(void* callback_target, rust_callback callback) {     cb_target = callback_target;     cb = callback;     return 1; }  void trigger_callback() {   cb(cb_target, 7); // Will call callback(&rustObject, 7) in Rust }  Asynchronous callbacks In the previously given examples the callbacks are invoked as a direct reaction to a function call to the external C library. The control over the current thread is switched from Rust to C to Rust for the execution of the callback, but in the end the callback is executed on the same thread that called the function which triggered the callback. Things get more complicated when the external library spawns its own threads and invokes callbacks from there. In these cases access to Rust data structures inside the callbacks is especially unsafe and proper synchronization mechanisms must be used. Besides classical synchronization mechanisms like mutexes, one possibility in Rust is to use channels (in std::sync::mpsc) to forward data from the C thread that invoked the callback into a Rust thread. If an asynchronous callback targets a special object in the Rust address space it is also absolutely necessary that no more callbacks are performed by the C library after the respective Rust object gets destroyed. This can be achieved by unregistering the callback in the object's destructor and designing the library in a way that guarantees that no callback will be performed after deregistration. Linking The link attribute on extern blocks provides the basic building block for instructing rustc how it will link to native libraries. There are two accepted forms of the link attribute today: #[link(name = ""foo"")] #[link(name = ""foo"", kind = ""bar"")] In both of these cases, foo is the name of the native library that we're linking to, and in the second case bar is the type of native library that the compiler is linking to. There are currently three known types of native libraries: Dynamic - #[link(name = ""readline"")] Static - #[link(name = ""my_build_dependency"", kind = ""static"")] Frameworks - #[link(name = ""CoreFoundation"", kind = ""framework"")] Note that frameworks are only available on OSX targets. The different kind values are meant to differentiate how the native library participates in linkage. From a linkage perspective, the Rust compiler creates two flavors of artifacts: partial (rlib/staticlib) and final (dylib/binary). Native dynamic library and framework dependencies are propagated to the final artifact boundary, while static library dependencies are not propagated at all, because the static libraries are integrated directly into the subsequent artifact. A few examples of how this model can be used are: A native build dependency. Sometimes some C/C++ glue is needed when writing some Rust code, but distribution of the C/C++ code in a library format is a burden. In this case, the code will be archived into libfoo.a and then the Rust crate would declare a dependency via #[link(name = ""foo"", kind = ""static"")]. Regardless of the flavor of output for the crate, the native static library will be included in the output, meaning that distribution of the native static library is not necessary. A normal dynamic dependency. Common system libraries (like readline) are available on a large number of systems, and often a static copy of these libraries cannot be found. When this dependency is included in a Rust crate, partial targets (like rlibs) will not link to the library, but when the rlib is included in a final target (like a binary), the native library will be linked in. On OSX, frameworks behave with the same semantics as a dynamic library. Unsafe blocks Some operations, like dereferencing raw pointers or calling functions that have been marked unsafe are only allowed inside unsafe blocks. Unsafe blocks isolate unsafety and are a promise to the compiler that the unsafety does not leak out of the block. Unsafe functions, on the other hand, advertise it to the world. An unsafe function is written like this: fn main() { unsafe fn kaboom(ptr: *const i32) -> i32 { *ptr } }  unsafe fn kaboom(ptr: *const i32) -> i32 { *ptr } This function can only be called from an unsafe block or another unsafe function. Accessing foreign globals Foreign APIs often export a global variable which could do something like track global state. In order to access these variables, you declare them in extern blocks with the static keyword: #![feature(libc)] extern crate libc; #[link(name = ""readline"")] extern { static rl_readline_version: libc::c_int; } fn main() { println!(""You have readline version {} installed."", rl_readline_version as i32); }  extern crate libc;  #[link(name = ""readline"")] extern {     static rl_readline_version: libc::c_int; }  fn main() {     println!(""You have readline version {} installed."",              rl_readline_version as i32); } Alternatively, you may need to alter global state provided by a foreign interface. To do this, statics can be declared with mut so we can mutate them. #![feature(libc)] extern crate libc; use std::ffi::CString; use std::ptr; #[link(name = ""readline"")] extern { static mut rl_prompt: *const libc::c_char; } fn main() { let prompt = CString::new(""[my-awesome-shell] $"").unwrap(); unsafe { rl_prompt = prompt.as_ptr(); println!(""{:?}"", rl_prompt); rl_prompt = ptr::null(); } }  extern crate libc;  use std::ffi::CString; use std::ptr;  #[link(name = ""readline"")] extern {     static mut rl_prompt: *const libc::c_char; }  fn main() {     let prompt = CString::new(""[my-awesome-shell] $"").unwrap();     unsafe {         rl_prompt = prompt.as_ptr();          println!(""{:?}"", rl_prompt);          rl_prompt = ptr::null();     } } Note that all interaction with a static mut is unsafe, both reading and writing. Dealing with global mutable state requires a great deal of care. Foreign calling conventions Most foreign code exposes a C ABI, and Rust uses the platform's C calling convention by default when calling foreign functions. Some foreign functions, most notably the Windows API, use other calling conventions. Rust provides a way to tell the compiler which convention to use: #![feature(libc)] extern crate libc; #[cfg(all(target_os = ""win32"", target_arch = ""x86""))] #[link(name = ""kernel32"")] #[allow(non_snake_case)] extern ""stdcall"" { fn SetEnvironmentVariableA(n: *const u8, v: *const u8) -> libc::c_int; } fn main() { }  extern crate libc;  #[cfg(all(target_os = ""win32"", target_arch = ""x86""))] #[link(name = ""kernel32"")] #[allow(non_snake_case)] extern ""stdcall"" {     fn SetEnvironmentVariableA(n: *const u8, v: *const u8) -> libc::c_int; } This applies to the entire extern block. The list of supported ABI constraints are: stdcall aapcs cdecl fastcall vectorcall This is currently hidden behind the abi_vectorcall gate and is subject to change. Rust rust-intrinsic system C win64 Most of the abis in this list are self-explanatory, but the system abi may seem a little odd. This constraint selects whatever the appropriate ABI is for interoperating with the target's libraries. For example, on win32 with a x86 architecture, this means that the abi used would be stdcall. On x86_64, however, windows uses the C calling convention, so C would be used. This means that in our previous example, we could have used extern ""system"" { ... } to define a block for all windows systems, not only x86 ones. Interoperability with foreign code Rust guarantees that the layout of a struct is compatible with the platform's representation in C only if the #[repr(C)] attribute is applied to it. #[repr(C, packed)] can be used to lay out struct members without padding. #[repr(C)] can also be applied to an enum. Rust's owned boxes (Box<T>) use non-nullable pointers as handles which point to the contained object. However, they should not be manually created because they are managed by internal allocators. References can safely be assumed to be non-nullable pointers directly to the type. However, breaking the borrow checking or mutability rules is not guaranteed to be safe, so prefer using raw pointers (*) if that's needed because the compiler can't make as many assumptions about them. Vectors and strings share the same basic memory layout, and utilities are available in the vec and str modules for working with C APIs. However, strings are not terminated with \0. If you need a NUL-terminated string for interoperability with C, you should use the CString type in the std::ffi module. The libc crate on crates.io includes type aliases and function definitions for the C standard library in the libc module, and Rust links against libc and libm by default. The ""nullable pointer optimization"" Certain types are defined to not be null. This includes references (&T, &mut T), boxes (Box<T>), and function pointers (extern ""abi"" fn()). When interfacing with C, pointers that might be null are often used. As a special case, a generic enum that contains exactly two variants, one of which contains no data and the other containing a single field, is eligible for the ""nullable pointer optimization"". When such an enum is instantiated with one of the non-nullable types, it is represented as a single pointer, and the non-data variant is represented as the null pointer. So Option<extern ""C"" fn(c_int) -> c_int> is how one represents a nullable function pointer using the C ABI. Calling Rust code from C You may wish to compile Rust code in a way so that it can be called from C. This is fairly easy, but requires a few things: #[no_mangle] pub extern fn hello_rust() -> *const u8 { ""Hello, world!\0"".as_ptr() } fn main() {}  #[no_mangle] pub extern fn hello_rust() -> *const u8 {     ""Hello, world!\0"".as_ptr() } The extern makes this function adhere to the C calling convention, as discussed above in ""Foreign Calling Conventions"". The no_mangle attribute turns off Rust's name mangling, so that it is easier to link to. FFI and panics It’s important to be mindful of panic!s when working with FFI. A panic! across an FFI boundary is undefined behavior. If you’re writing code that may panic, you should run it in another thread, so that the panic doesn’t bubble up to C: use std::thread; #[no_mangle] pub extern fn oh_no() -> i32 { let h = thread::spawn(|| { panic!(""Oops!""); }); match h.join() { Ok(_) => 1, Err(_) => 0, } } fn main() {}  use std::thread;  #[no_mangle] pub extern fn oh_no() -> i32 {     let h = thread::spawn(|| {         panic!(""Oops!"");     });      match h.join() {         Ok(_) => 1,         Err(_) => 0,     } } Representing opaque structs Sometimes, a C library wants to provide a pointer to something, but not let you know the internal details of the thing it wants. The simplest way is to use a void * argument: void foo(void *arg); void bar(void *arg);  We can represent this in Rust with the c_void type: #![feature(libc)] extern crate libc; extern ""C"" { pub fn foo(arg: *mut libc::c_void); pub fn bar(arg: *mut libc::c_void); } fn main() {}  extern crate libc;  extern ""C"" {     pub fn foo(arg: *mut libc::c_void);     pub fn bar(arg: *mut libc::c_void); } This is a perfectly valid way of handling the situation. However, we can do a bit better. To solve this, some C libraries will instead create a struct, where the details and memory layout of the struct are private. This gives some amount of type safety. These structures are called ‘opaque’. Here’s an example, in C: struct Foo; /* Foo is a structure, but its contents are not part of the public interface */ struct Bar; void foo(struct Foo *arg); void bar(struct Bar *arg);  To do this in Rust, let’s create our own opaque types with enum: pub enum Foo {} pub enum Bar {} extern ""C"" { pub fn foo(arg: *mut Foo); pub fn bar(arg: *mut Bar); } fn main() {}  pub enum Foo {} pub enum Bar {}  extern ""C"" {     pub fn foo(arg: *mut Foo);     pub fn bar(arg: *mut Bar); } By using an enum with no variants, we create an opaque type that we can’t instantiate, as it has no variants. But because our Foo and Bar types are different, we’ll get type safety between the two of them, so we cannot accidentally pass a pointer to Foo to bar()."	"null"	"null"	"— instructions for how to cross compile Rust projects for the Raspberry Pi."	"true"
"FFI"	"The Rust FFI Omnibus"	"http://jakegoulding.com/rust-ffi-omnibus/"	"— instructions for how to cross compile Rust projects for the Raspberry Pi."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"71"	"12"	"9"	"GitHub - shepmaster/rust-ffi-omnibus: A collection of examples of using code written in Rust from other languages Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 71 Fork 9 shepmaster/rust-ffi-omnibus Code Issues 10 Pull requests 0 Pulse Graphs A collection of examples of using code written in Rust from other languages 105 commits 2 branches 0 releases Fetching contributors CSS 39.1% HTML 35.7% Ruby 16.3% JavaScript 6.4% Shell 2.5% CSS HTML Ruby JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 89ba22d Jun 19, 2016 shepmaster committed on GitHub Merge pull request #32 from shepmaster/cstr-tostr … Use CStr::to_str Permalink Failed to load latest commit information. examples site .gitignore .travis.yml CONTRIBUTING.md Add skeleton of common files Jun 27, 2015 Gemfile Gemfile.lock LICENSE.md README.md deploy_gh_pages.sh README.md The Rust FFI Omnibus Visit the site. Contributing Read the contributing guidelines for full information. For this repository, it is acceptable to add ""+1"" comments to vote for a specific issue. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/shepmaster/rust-ffi-omnibus"	"— instructions for how to cross compile Rust projects for the Raspberry Pi."	"true"
"FFI"	"crabtw/rust-bindgen"	"https://github.com/crabtw/rust-bindgen"	"— a Rust bindings generator"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"563"	"29"	"123"	"GitHub - crabtw/rust-bindgen: binding generator for rust language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 563 Fork 123 crabtw/rust-bindgen Code Issues 31 Pull requests 6 Pulse Graphs binding generator for rust language 649 commits 4 branches 13 releases 70 contributors Rust 96.8% C 2.5% Other 0.7% Rust C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bitflags fix-plugin gh-pages master Nothing to show 0.18 0.17 0.16 0.15 0.14 0.12 0.11 0.10 0.9 0.8 0.7 0.6 0.5 Nothing to show New pull request Latest commit 3985688 Jul 14, 2016 Yamakaky committed on GitHub Merge pull request #367 from KyleMayes/fix-travis … [travis] Fix build (#357) Permalink Failed to load latest commit information. bindgen_plugin Made CLI and macro options consistent. May 23, 2016 scripts Force push docs May 29, 2016 src Ignore typedefs if they would result in a cyclic reference in Rust. Jul 9, 2016 tests Add test for cyclic type aliases Jul 9, 2016 .gitignore Add Cargo.lock to .gitignore Nov 18, 2014 .travis.yml Reremove caching Jul 14, 2016 Cargo.toml Update syntex_syntax. Jun 11, 2016 Changelog.md Convert `float` and `double` to `f32` and `f64`. Jun 11, 2016 LICENSE fix build and add license Aug 5, 2013 README.md Improve readme. May 30, 2016 rustfmt.toml Add rustfmt. May 27, 2016 README.md rust-bindgen A native binding generator for the Rust language. rust-bindgen was originally ported from clay's bindgen. Documentation Requirements Clang >= 3.5 Installing $ cargo install bindgen  Bindgen will be dynamically linked to your default clang version. See clang-sys if you want to use an other version or do a static link build. The clang-sys feature static can be activated via the bindgen feature clang_sys/static. Usage Command Line $ bindgen <header> [<bindgen options>] [-- <clang options>]  See --help for a list of the supported options. Plugin     bindgen!(header, options...) The use of this plugin requires the use of a nightly compiler. Options: Option Name Type Default link str match str builtins bool true allow_unknown_types bool false clang_args str Examples Generate a Lua binding with the CLI bindgen --link lua --builtins /usr/include/lua.h -o lua.rs  Generate a Lua binding with the plugin Cargo.toml [dependencies] bindgen = ""*""  main.rs #![feature(plugin)] #![plugin(bindgen)]  mod lua_bindings {     bindgen!(""/usr/include/lua.h"", link=""lua"", builtins=true) }  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/crabtw/rust-bindgen"	"— a Rust bindings generator"	"true"
"FFI"	""	"https://travis-ci.org/crabtw/rust-bindgen"	"— a Rust bindings generator"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a Rust bindings generator"	"true"
"FFI"	"Sean1708/rusty-cheddar"	"https://github.com/Sean1708/rusty-cheddar"	"— generates C header files from Rust source files"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"107"	"4"	"7"	"GitHub - Sean1708/rusty-cheddar: A Rust crate for automatically generating C header files from Rust source file. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 107 Fork 7 Sean1708/rusty-cheddar Code Issues 15 Pull requests 1 Pulse Graphs A Rust crate for automatically generating C header files from Rust source file. http://sean1708.github.io/rusty-cheddar/ 221 commits 6 branches 5 releases 4 contributors Rust 93.9% Python 6.0% Shell 0.1% Rust Python Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags crusader gh-pages iss24 master minor patch Nothing to show v0.3.3 v0.3.1 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 9a0f0eb May 18, 2016 Sean1708 make a note of the rusty-binder overhaul Permalink Failed to load latest commit information. examples Brand spanking new API. Jan 7, 2016 src Add error handling, instead of panicking May 2, 2016 tests Fix all the issues that I need for pcb May 1, 2016 .gitignore Make admin a plugin again. Nov 21, 2015 .travis.yml Revert ""Use rustc instead of clippy."" Jan 4, 2016 CHANGELOG.md update changelog May 3, 2016 Cargo.toml bump version May 3, 2016 README.md make a note of the rusty-binder overhaul May 18, 2016 README.tpl make a note of the rusty-binder overhaul May 18, 2016 on-nightly Revert ""Use rustc instead of clippy."" Jan 4, 2016 README.md Please be aware that version v0.4.0 of rusty-cheddar will be based around the more general rusty-binder framework, though this is still work in progress. rusty-cheddar rusty-cheddar is a library for converting Rust source files into C header files. A note on versioning: While rusty-cheddar is still in a significant flux (i.e. pre-v1.0.0) it will likely go through numerous breaking changes. However, until v1.0.0, any time a breaking change is made the minor version will be bumped and any time a new feature is added the path version will be bumped. rusty-cheddar targets C99 or later (for sane single line comments and use of stdint.h and stdbool.h), if you really really really really really have to use an older standard then please open an issue at the repo and I will begrudgingly figure out how to implement support for it (after arguing with you lots and lots). The most useful way to use rusty-cheddar is in a build script. To do this add the following build-dependencies section to your Cargo.toml (to use it as a normal library simply replace build-dependencies with dependencies): # Cargo.toml  [build-dependencies] rusty-cheddar = ""0.3.0"" Then create the following build.rs: // build.rs  extern crate cheddar;  fn main() {     cheddar::Cheddar::new().expect(""could not read manifest"")         .run_build(""include/my_header.h""); } This should work as is providing you've set up your project correctly. Don't forget to add a build = ... to your [package] section, see the cargo docs for more info. rusty-cheddar will then create a my_header.h file in include/. Note that rusty-cheddar emits very few warnings, it is up to the programmer to write a library which can be correctly called from C. API In a Module You can also place your API in a module to help keep your source code neat. To do this you must supply the name of the module to Cheddar, then ensure that the items are available in the top-level scope: // build.rs  extern crate cheddar;  fn main() {     cheddar::Cheddar::new().expect(""could not read manifest"")         .module(""c_api"").expect(""malformed module path"")         .run_build(""target/include/rusty.h""); } // src/lib.rs  pub use c_api::*;  mod c_api {     // api goes here ... } There is also the .compile() and .compile_code() methods for finer control. Conversions In the examples below, boilerplate has been omitted from the header. Typedefs rusty-cheddar converts pub type A = B into typedef B A;. Types containing generics are ignored. Rust: type UInt32 = u32; pub type UInt64 = u64; pub type MyOption<T> = Option<T> Header: // Some boilerplate omitted. typedef uint64_t UInt64; // Some more boilerplate omitted. Enums rusty-cheddar will convert public enums which are marked #[repr(C)]. If the enum is generic or contains tuple or struct variants then cheddar will fail. rusty-cheddar should correctly handle explicit discriminants. Rust: #[repr(C)] pub enum Colours {     Red = -6,     Blue,     Green = 7,     Yellow, }  // This would fail is it was #[repr(C)]. pub enum Tastes<T> {     Savoury(T),     Sweet, }  // This would fail if it was public. #[repr(C)] enum Units {     Kg(f64),     M(f64),     S(f64),     A(f64),     K(f64),     Mol(f64),     Cd(f64), } Header: // Some boilerplate omitted. typedef enum Colours {         Red = -6,         Blue,         Green = 7,         Yellow, } Colours; // Some more boilerplate omitted. Structs Structs are handled very similarly to enums, they must be public, marked #[repr(C)], and they must not contain generics (this currently only checked at the struct-level, generic fields are not checked). Rust: #[repr(C)] pub struct Person {     age: i32,     height: f64,     weight: f64, } Header: // Some boilerplate omitted. typedef struct Person {         int32_t age;         double height;         double weight; } Person; // Some more boilerplate omitted. Opaque Structs One common C idiom is to hide the implementation of a struct using an opaque struct, which can only be used behind a pointer. This is especially useful in Rust-C interfaces as it allows you to use any arbitrary Rust struct in C. To define an opaque struct you must define a public newtype which is marked as #[repr(C)]. Rust: struct Foo<T> {     bar: i32,     baz: Option<T>, }  #[repr(C)] pub struct MyCrate_Foo(Foo<PathBuf>); Header: // Some boilerplate omitted. typedef struct MyCrate_Foo MyCrate_Foo; // Some boilerplate omitted. Note that the newtype must not be generic but the type that it wraps can be arbitrary. Functions For rusty-cheddar to pick up on a function declaration it must be public, marked #[no_mangle] and have one of the following ABIs: C Cdecl Stdcall Fastcall System I'm not totally up to speed on calling conventions so if you believe one of these has been including in error, or if one has been omitted, then please open an issue at the repo. rusty-cheddar will fail on functions which are marked as diverging (-> !). Rust: use std::ops::Add;  #[no_mangle] pub extern fn hello() {     println!(""Hello!""); }  fn add<O, R, L: Add<R, Output=O>>(l: L, r: R) -> O {     l + r }  #[no_mangle] #[allow(non_snake_case)] pub extern fn MyAdd_add_u8(l: u8, r: u8) -> u8 {     add(l, r) }  #[no_mangle] #[allow(non_snake_case)] pub extern fn MyAdd_add_u16(l: u16, r: u16) -> u16 {     add(l, r) } Header: // Some boilerplate omitted. void hello();  uint8_t MyAdd_add_u8(uint8_t l, uint8_t r);  uint16_t MyAdd_add_u16(uint16_t l, uint16_t r); // Some more boilerplate omitted. Paths You must not put types defined in other modules in an exported type signature without hiding it behind an opaque struct. This is because the C compiler must know the layout of the type and rusty-cheddar can not yet search other modules. The very important exception to this rule are the C ABI types defined in the libc crate and std::os::raw. Types from these two modules must be fully qualified (e.g. libc::c_void or std::os::raw::c_longlong) so that they can be converted properly. Importing them with ause` statement will not work. Contributing Contributions to rusty-cheddar are more than welcome. Bugs If you find a bug or have a feature request please open an issue. I can't guarantee that I'll fix it but I'll give it a damn good go. If you find the source code unclear in any way then I consider that a bug. I try to make my source code as clear as possible but I'm not very good at it, so any help in that regard is appreciated. PRs I love pull requests they tend to make my job much easier, so if you want to fix a bug or implement a feature yourself then that would be great. If you're confused by anything or need some pointers on how to proceed then feel free to open an issue so that I can help, otherwise these docs are a good place to start. Tests The tests require you to have a recent version (> v2.7.2) of CppHeaderParser installed for the version of Python which is installed as python (usually Python 2). Furthermore due to the fact that the tests are a massive pile of wanky hacks, you must be in the same directory as rusty-cheddar's Cargo.toml to successfully run them. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Sean1708/rusty-cheddar"	"— generates C header files from Rust source files"	"true"
"FFI"	""	"https://travis-ci.org/Sean1708/rusty-cheddar"	"— generates C header files from Rust source files"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— generates C header files from Rust source files"	"true"
"FFI"	"hansihe/Rustler"	"https://github.com/hansihe/Rustler"	"— safe Rust bridge for creating Erlang NIF functions"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"243"	"23"	"6"	"GitHub - hansihe/Rustler: Safe Rust bridge for creating Erlang NIF functions Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 243 Fork 6 hansihe/Rustler Code Issues 7 Pull requests 0 Pulse Graphs Safe Rust bridge for creating Erlang NIF functions http://rustler.rustbridge.io/ 73 commits 3 branches 0 releases Fetching contributors Rust 71.5% Elixir 24.7% Erlang 3.8% Rust Elixir Erlang Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master rustup Nothing to show Nothing to show New pull request Latest commit 1b61246 May 11, 2016 hansihe add 'Example' heading to list iterator doc Permalink Failed to load latest commit information. installer change license to MIT/APACHE dual license Apr 8, 2016 rustler_codegen add basic documentation for list iterator and rustler_mix May 11, 2016 rustler_mix add basic documentation for list iterator and rustler_mix May 11, 2016 src add 'Example' heading to list iterator doc May 11, 2016 test add basic test suite, number tests, list tests May 10, 2016 .gitignore some tests, update for nightly Mar 31, 2016 .travis.yml travis: hopefully install eralng from another apt repo.. Jan 21, 2016 Cargo.toml add basic documentation for list iterator and rustler_mix May 11, 2016 FAQ.md Add simple faq for common issues Feb 10, 2016 LICENSE-APACHE change license to MIT/APACHE dual license Apr 8, 2016 LICENSE-MIT change project name in LICENSE-MIT Apr 8, 2016 README.md update to latest nightly May 7, 2016 RELEASE_CHECKLIST.md add basic test suite, number tests, list tests May 10, 2016 README.md Rustler Documentation | Getting Started | Example Rustler is a library for writing Erlang NIFs in safe Rust code. That means there should be no ways to crash the BEAM (Erlang VM). The library provides facilities for generating the boilerplate for interacting with the BEAM, handles encoding and decoding of Erlang terms, and catches rust panics before they unwind into C. The library provides functionality for both Erlang and Elixir, however Elixir is favored as of now. Features: Safety - The code you write in a Rust NIF should never be able to crash the BEAM. Interop - Decoding and encoding rust values into Erlang terms is as easy as a function call. Type composition - Making a Rust struct encodable and decodable to Erlang or Elixir can be done with a single attribute. Resource objects - Enables you to safely pass a reference to a Rust struct into Erlang code. The struct will be automatically dropped when it's no longer referenced. Getting started The easiest way of getting started, is using the Mix project generator. Run mix archive.install https://github.com/hansihe/rustler_archives/raw/master/rustler_installer.ez to install the tool. Run mix rustler.new <path> and follow the instructions. NOTE: At the moment you need Rust nightly-2016-05-07. With multirust, you need to run multirust override nightly-2016-05-07 in the generated project directory for things to work as expected. How it looks like This is the code for a minimal NIF that adds two numbers and returns the result. #![feature(plugin)] #![plugin(rustler_codegen)]  #[macro_use] extern crate rustler; use rustler::{ NifEnv, NifTerm, NifResult, NifEncoder };  rustler_export_nifs!(     ""Elixir.TestNifModule"",     [(""add"", 2, add)],     None );  fn add<'a>(env: &'a NifEnv, args: &Vec<NifTerm>) -> NifResult<NifTerm<'a>> {     let num1: i64 = try!(args[0].decode());     let num2: i64 = try!(args[1].decode());     Ok((num1 + num2).encode(env)) } License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hansihe/Rustler"	"— safe Rust bridge for creating Erlang NIF functions"	"true"
"FFI"	""	"https://travis-ci.org/hansihe/Rustler"	"— safe Rust bridge for creating Erlang NIF functions"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— safe Rust bridge for creating Erlang NIF functions"	"true"
"FFI"	"drrb/java-rust-example"	"https://github.com/drrb/java-rust-example"	"— use Rust from Java"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"133"	"5"	"8"	"GitHub - drrb/java-rust-example: Embedding Rust in Java Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 133 Fork 8 drrb/java-rust-example Code Issues 4 Pull requests 0 Pulse Graphs Embedding Rust in Java 70 commits 1 branch 0 releases Fetching contributors Java 77.8% Rust 20.2% PowerShell 2.0% Java Rust PowerShell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 4d2c216 May 30, 2015 drrb Fixed Rust warning Permalink Failed to load latest commit information. src Fixed Rust warning May 30, 2015 .gitignore Ignore Java memory dump files Oct 18, 2013 .travis.yml Test against stable and nightly on Travis May 30, 2015 LICENSE.txt Set up project Oct 17, 2013 NOTICE Removed unused licenses Oct 18, 2013 NOTICE.template Set up project Oct 17, 2013 README.md Claim support for Windows May 30, 2015 TODO.yml Support building on Windows Feb 14, 2015 appveyor.yml Configured Appveyor build May 30, 2015 pom.xml Added test fix for Appveyor May 30, 2015 README.md Java/Rust Example An example project showing how to call into Rust code from Java. OSX Linux Windows Requirements Java 7+ Rust (tested with 1.0, nightly) Contents So far, the project contains Rust code and Java code A Java interface to the Rust code, using JNA A script to build the Rust code into a library and put it on the classpath where JNA can find it Examples of passing strings, structs, and callback functions between Java and Rust Getting Started The best place to start looking at the examples is in the test code (GreetingsTest.java). The test contains lots of executable examples of calling into Rust code from Java. From the test, you can navigate to the Java code and the Rust code. The implementation is heavily commented to explain it. So far, it contains examples of the following (click the links to see!): Arguments: passing simple arguments from Java to Rust (Java side / Rust side) Return values: returning simple values from Rust to Java (Java side / Rust side) Struct arguments: passing structs to Rust from Java (Java side / Rust side) Returning structs (2 examples): returning structs from Rust by value and by reference (Java side / Rust side) Callbacks (3 examples): passing callbacks to Rust that get called from the Rust code (Java side / Rust side) Freeing memory: freeing memory allocated in Rust (Java side / Rust side) Building and Running the Tests To build the project, and run the tests, use Maven. This will build a jar containing the Rust code and the Java code. This assumes you have Rust installed, and on the path. $ mvn package  You can then run the jar that is produced to see the integration work. $ java -jar target/greeter.jar John Hello from Rust, John  Platform Support This project is tested on OSX, Ubuntu, and Windows. It should also work on any 32 bit or 64 bit Gnu/Linux system. Limitations Some of the examples leak memory. Any memory that is allocated in Rust needs to be freed manually because it's not managed by JNA. Some examples pass objects back into Rust to be dropped for this reason, but we don't clean up everything properly (strings, for example). This is almost certainly not a limitation of Rust, but a limitation of my current understanding of Rust. License Java/Rust Example Copyright (C) 2015 drrb This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/drrb/java-rust-example"	"— use Rust from Java"	"true"
"FFI"	""	"https://travis-ci.org/drrb/java-rust-example"	"— use Rust from Java"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— use Rust from Java"	"true"
"FFI"	"jcmoyer/rust-lua53"	"https://github.com/jcmoyer/rust-lua53"	"— Lua 5.3 bindings for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"35"	"6"	"14"	"GitHub - jcmoyer/rust-lua53: Lua 5.3 bindings for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 35 Fork 14 jcmoyer/rust-lua53 Code Issues 7 Pull requests 5 Pulse Graphs Lua 5.3 bindings for Rust 178 commits 1 branch 0 releases Fetching contributors Rust 92.7% C 7.3% Rust C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 05e12f5 Jul 8, 2016 jcmoyer Bump version to 0.0.9 Permalink Failed to load latest commit information. examples Add missing license text May 31, 2016 src Implement Send for State Jul 1, 2016 .gitignore Rewrite buildscript to support more situations Dec 15, 2015 .travis.yml build.rs now builds a static Lua to link against. Jun 27, 2015 Cargo.toml Bump version to 0.0.9 Jul 8, 2016 LICENSE.md Initial commit Nov 6, 2014 README.md Update to Lua 5.3.3. Jun 8, 2016 build.rs Update to Lua 5.3.3. Jun 8, 2016 README.md rust-lua53 Aims to be complete Rust bindings for Lua 5.3 and beyond. Currently, master is tracking Lua 5.3.3. Requires a Unix-like environment. On Windows, MSYS2 is supported. You will need: wget (fetch on FreeBSD/Dragonfly, curl on MacOS) tar make gcc Using crates.io Add this to your Cargo.toml: [dependencies] lua = ""*""  Using git Add this to your Cargo.toml: [dependencies.lua] git = ""https://github.com/jcmoyer/rust-lua53""  Example extern crate lua;  fn main() {   let mut state = lua::State::new();   state.open_libs();   state.do_string(""print('hello world!')""); } License Licensed under the MIT License, which is the same license Lua is distributed under. Refer to LICENSE.md for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jcmoyer/rust-lua53"	"— Lua 5.3 bindings for Rust"	"true"
"FFI"	""	"https://travis-ci.org/jcmoyer/rust-lua53"	"— Lua 5.3 bindings for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Lua 5.3 bindings for Rust"	"true"
"FFI"	"kballard/rust-lua"	"https://github.com/kballard/rust-lua"	"— Safe Rust bindings to Lua 5.1"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"87"	"7"	"14"	"GitHub - kballard/rust-lua: Safe Rust bindings to Lua 5.1 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 87 Fork 14 kballard/rust-lua Code Issues 6 Pull requests 0 Pulse Graphs Safe Rust bindings to Lua 5.1 174 commits 1 branch 0 releases 4 contributors Rust 98.3% C 1.1% Makefile 0.6% Rust C Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 1fa9735 Apr 9, 2016 kballard Bump version to v0.3.0 … The recent fixes for compilation with the nightly are not backwards-compatible. Permalink Failed to load latest commit information. examples Fix compilation warnings Apr 9, 2016 src Fix compilation warnings Apr 10, 2016 .gitignore Move the generated config.rs into $OUT_DIR Nov 19, 2014 .travis.yml Tell Travis to build using the rust nightly Jun 25, 2015 Cargo.lock Bump the version of the libc dependency Apr 9, 2016 Cargo.toml Bump version to v0.3.0 Apr 9, 2016 LICENSE Reflow LICENSE file to the more conventional formatting Feb 16, 2014 Makefile Fix build on Linux Mar 23, 2015 README.md Add build status to README Sep 11, 2014 build.rs Fix deprecation warnings Mar 12, 2015 README.md rust-lua Copyright 2014 Kevin Ballard Description This is a set of Rust bindings to Lua 5.1. The goal is to provide a (relatively) safe interface to Lua that closely mirrors its C API. The bindings are complete, but largely untested. Every non-unsafe function does its best to enforce safety. Lua 5.1.5 was used as a reference for internal implementation details that affect safety (e.g. stack space needed for auxlib functions). Unfortunately, there are very few tests. It turns out to be complicated to properly test the Lua C API, and there are very few examples that could be used as tests. Please let me know if there are any bugs. Installation make all  To run the tests, use the test make target: make test  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kballard/rust-lua"	"— Safe Rust bindings to Lua 5.1"	"true"
"FFI"	""	"https://travis-ci.org/kballard/rust-lua"	"— Safe Rust bindings to Lua 5.1"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Safe Rust bindings to Lua 5.1"	"true"
"FFI"	"tickbh/td_rlua"	"https://github.com/tickbh/td_rlua"	"— Zero-cost high-level lua 5.3 wrapper for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"1"	"0"	"GitHub - tickbh/td_rlua: Zero-cost high-level lua 5.3 wrapper for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 0 tickbh/td_rlua Code Issues 0 Pull requests 0 Wiki Pulse Graphs Zero-cost high-level lua 5.3 wrapper for Rust 40 commits 1 branch 0 releases Fetching contributors C 84.9% Rust 10.7% C++ 3.5% Makefile 0.9% C Rust C++ Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 1152393 Apr 26, 2016 tickbh add hotfix.rs return value Permalink Failed to load latest commit information. td_clua td_rlua Apr 8, 2016 td_rlua add hotfix.rs return value Apr 26, 2016 .gitignore td_rlua Apr 8, 2016 .travis.yml td_rlua Apr 8, 2016 LICENSE-APACHE init lua status Mar 31, 2016 LICENSE-MIT init lua status Mar 31, 2016 README.md add refer project hlua Apr 17, 2016 README.md td_rlua This library is a high-level binding for Lua 5.3. You don't have access to the Lua stack, all you can do is read/write variables (including callbacks) and execute Lua code. How to install it? Add this to the Cargo.toml file of your project [dependencies] td_rlua = ""0.1.0"" How to use it? extern crate td_rlua; use td_rlua::Lua; The Lua struct is the main element of this library. It represents a context in which you can execute Lua code. let mut lua = Lua::new();     // mutable is mandatory Reading and writing variables lua.set(""x"", 2); let _: () = lua.exec_string(""x = x + 1"").unwrap(); let x: i32 = lua.query(""x"").unwrap(); assert_eq!(x, 3); Reading and writing global variables of the Lua context can be done with set and query. The query function returns an Option<T> and does a copy of the value. The base types that can be read and written are: i8, i16, i32, u8, u16, u32, f32, f64, bool, String. &str can be written but not read. If you wish so, you can also add other types by implementing the LuaPush and LuaRead traits. Executing Lua let x: u32 = lua.exec_string(""return 6 * 2;"").unwrap();    // equals 12 The exec_string function takes a &str and returns a Option<T> where T: LuaRead. Writing functions In order to write a function, you must wrap it around td_rlua::functionX where X is the number of parameters. This is for the moment a limitation of Rust's inferrence system. fn add(a: i32, b: i32) -> i32 {     a + b }  lua.set(""add"", td_rlua::function2(add)); let _: () = lua.exec_string(""c = add(2, 4)"").unwrap();   // calls the `add` function above let c: i32 = lua.query(""c"").unwrap(); assert_eq!(c, 6); In Lua, functions are exactly like regular variables. You can write regular functions as well as closures: lua.set(""mul"", td_rlua::function2(|a: i32, b: i32| a * b)); Note that the lifetime of the Lua context must be equal to or shorter than the lifetime of closures. This is enforced at compile-time. let mut a = 5i;  {     let mut lua = Lua::new();      lua.set(""inc"", || a += 1);    // borrows 'a'     for i in (0 .. 15) {         let _: () = lua.exec_string(""inc()"").unwrap();     } } // unborrows `a`  assert_eq!(a, 20) Error handling extern ""C"" fn error_handle(lua: *mut c_lua::lua_State) -> libc::c_int {     let err = unsafe { c_lua::lua_tostring(lua, -1) };     let err = unsafe { CStr::from_ptr(err) };     let err = String::from_utf8(err.to_bytes().to_vec()).unwrap();     println!(""error:{}"", err);     0 } lua.register(""error_handle"", error_handle); Default in exec_string will call pcall, and set the error_function _G[""error_handle""] so you can reset 'error_handle' function to you custom. Manipulating Lua tables Manipulating a Lua table can be done by reading a LuaTable object. This can be achieved easily by reading a LuaTable object. let _:() = lua.exec_string(""a = { 9, 8, 7 }"").unwrap(); let mut table : LuaTable = lua.query(""a"").unwrap();  let x: i32 = table.query(2).unwrap(); assert_eq!(x, 8);  table.set(3, ""hello""); let y: String = table.query(3).unwrap(); assert_eq!(y, ""hello"");  let z: i32 = table.query(1).unwrap(); assert_eq!(z, 9); You can then iterate through the table with the .iter() function. Note that the value returned by the iterator is an Option<(Key, Value)>, the Option being empty when either the key or the value is not convertible to the requested type. The filter_map function (provided by the standard Iterator trait) is very useful when dealing with this. let _:() = lua.exec_string(""a = { 9, 8, 7 }"").unwrap(); let mut table : LuaTable = lua.query(""a"").unwrap(); for _ in 0 .. 10 {     let table_content: Vec<Option<(u32, u32)>> = table.iter().collect();     assert_eq!(table_content, vec![ Some((1,9)), Some((2,8)), Some((3,7)) ]); } User data When you expose functions to Lua, you may wish to read or write more elaborate objects. This is called a user data. To do so, you should implement the LuaPush for your types. This is usually done by redirecting the call to userdata::push_userdata. it will operate the ref of object if you use userdata::push_userdata the userdata will copy one time, for lua gc manager if you use userdata::push_lightuserdata the userdata life manager by rust, so none copy will occup #[derive(Clone, Debug)] struct Foo {     a : i32, };  impl<'a> td_rlua::LuaPush for &'a mut  Foo {     fn push_to_lua(self, lua: *mut c_lua::lua_State) -> i32 {         td_rlua::userdata::push_userdata(self, lua, |_|{})     } } impl<'a> td_rlua::LuaRead for &'a mut  Foo {     fn lua_read_at_position(lua: *mut c_lua::lua_State, index: i32) -> Option<&'a mut Foo> {         td_rlua::userdata::read_userdata(lua, index)     } }  let xx  = &mut Foo {     a : 10, }; lua.set(""a"", xx); let get: &mut Foo = lua.query(""a"").unwrap(); assert!(get.a == 10); get.a = 100;  let get: &mut Foo = lua.query(""a"").unwrap(); assert!(get.a == 100); use lightuserdata you can change impl<'a> td_rlua::LuaPush for &'a mut  Foo {     fn push_to_lua(self, lua: *mut c_lua::lua_State) -> i32 {         td_rlua::userdata::push_lightuserdata(self, lua, |_|{})     } } custom lua call userdata need impl NewStruct #[derive(Clone, Debug)] struct TestLuaSturct {     index : i32, }  impl NewStruct for TestLuaSturct {     fn new() -> TestLuaSturct {         println!(""new !!!!!!!!!!!!!!"");         TestLuaSturct {             index : 19,         }     }      fn name() -> &'static str {         ""TestLuaSturct""     } }  impl<'a> LuaRead for &'a mut TestLuaSturct {     fn lua_read_at_position(lua: *mut c_lua::lua_State, index: i32) -> Option<&'a mut TestLuaSturct> {         td_rlua::userdata::read_userdata(lua, index)     } } now we can custom function let mut lua = Lua::new(); lua.openlibs(); fn one_arg(obj : &mut TestLuaSturct) -> i32 { obj.index = 10; 5 }; fn two_arg(obj : &mut TestLuaSturct, index : i32) { obj.index = index;};  let mut value = td_rlua::LuaStruct::<TestLuaSturct>::new(lua.state()); value.create().def(""one_arg"", td_rlua::function1(one_arg)).def(""two_arg"", td_rlua::function2(two_arg));  let _ : Option<()> = lua.exec_string(""x = TestLuaSturct()""); let val : Option<i32> = lua.exec_string(""return x:one_arg()""); assert_eq!(val, Some(5)); let obj : Option<&mut TestLuaSturct> = lua.query(""x""); assert_eq!(obj.unwrap().index, 10); let val : Option<i32> = lua.exec_string(""x:two_arg(121)""); assert_eq!(val, None); let obj : Option<&mut TestLuaSturct> = lua.query(""x""); assert_eq!(obj.unwrap().index, 121);  let obj : Option<&mut TestLuaSturct> = lua.exec_string(""return TestLuaSturct()""); assert_eq!(obj.unwrap().index, 19); HotFix in runtime, if we need change some logic, we need restart the process, it may lose some memory data so sometimes we need update the logic, add keep the memory data, so we need hotfix let mut lua = Lua::new(); lua.openlibs(); lua.enable_hotfix(); let _ = lua.exec_func2(""hotfix"", r""     local value = {3, 4}     function get_a()         value[2] = 3         return value[1]     end      function get_b()         return value[2]     end     "", ""hotfix""); Refer the project write refer to hlua, if you use lua5.2, you can use it. Contributing Contributions are welcome! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tickbh/td_rlua"	"— Zero-cost high-level lua 5.3 wrapper for Rust"	"true"
"FFI"	""	"https://travis-ci.org/tickbh/td_rlua"	"— Zero-cost high-level lua 5.3 wrapper for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Zero-cost high-level lua 5.3 wrapper for Rust"	"true"
"FFI"	"tomaka/hlua"	"https://github.com/tomaka/hlua"	"— Rust library to interface with Lua"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"207"	"18"	"29"	"GitHub - tomaka/hlua: Rust library to interface with Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 207 Fork 29 tomaka/hlua Code Issues 16 Pull requests 2 Pulse Graphs Rust library to interface with Lua 347 commits 2 branches 0 releases 12 contributors C 84.3% Rust 13.4% Makefile 1.5% C++ 0.8% C Rust Makefile C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit bc72f4c Jun 11, 2016 tomaka committed on GitHub Merge pull request #80 from tomaka/tomaka-patch-1 … Publish 0.1.9 Permalink Failed to load latest commit information. hlua Publish 0.1.9 Jun 11, 2016 lua52-sys Update bundled Lua to 5.2.4 Jun 1, 2016 rust-hl-lua-modules rustup Apr 7, 2015 .gitattributes Initial commit Jun 5, 2014 .gitignore Add Cargo.lock to the gitignore Aug 25, 2014 .travis.yml Try fixing the compilation for rust stable Jul 21, 2015 LICENSE Add license. Close #33. Feb 27, 2015 README.md Update README URLs based on HTTP redirects Dec 10, 2015 README.md hlua This library is a high-level binding for Lua 5.2. You don't have access to the Lua stack, all you can do is read/write variables (including callbacks) and execute Lua code. How to install it? Add this to the Cargo.toml file of your project [dependencies] hlua = ""0.1"" How to use it? extern crate hlua; use hlua::Lua; The Lua struct is the main element of this library. It represents a context in which you can execute Lua code. let mut lua = Lua::new();     // mutable is mandatory You can check the documentation here. Reading and writing variables lua.set(""x"", 2); lua.execute::<()>(""x = x + 1"").unwrap(); let x: i32 = lua.get(""x"").unwrap();  // x is equal to 3 Reading and writing global variables of the Lua context can be done with set and get. The get function returns an Option<T> and does a copy of the value. The base types that can be read and written are: i8, i16, i32, u8, u16, u32, f32, f64, bool, String. &str can be written but not read. If you wish so, you can also add other types by implementing the Push and LuaRead traits. Executing Lua let x: u32 = lua.execute(""return 6 * 2;"").unwrap();    // equals 12 The execute function takes a &str and returns a Result<T, ExecutionError> where T: LuaRead. You can also call execute_from_reader which takes a std::io::Read as parameter. For example you can easily execute the content of a file like this: lua.execute_from_reader::<()>(File::open(&Path::new(""script.lua"")).unwrap()) Writing functions In order to write a function, you must wrap it around hlua::functionX where X is the number of parameters. This is for the moment a limitation of Rust's inferrence system. fn add(a: i32, b: i32) -> i32 {     a + b }  lua.set(""add"", hlua::function2(add)); lua.execute::<()>(""local c = add(2, 4)"");   // calls the `add` function above let c: i32 = lua.get(""c"").unwrap();   // returns 6 In Lua, functions are exactly like regular variables. You can write regular functions as well as closures: lua.set(""mul"", hlua::function2(|a: i32, b: i32| a * b)); Note that the lifetime of the Lua context must be equal to or shorter than the lifetime of closures. This is enforced at compile-time. let mut a = 5i;  {     let mut lua = Lua::new();      lua.set(""inc"", || a += 1);    // borrows 'a'     for i in (0 .. 15) {         lua.execute::<()>(""inc()"").unwrap();     } } // unborrows `a`  assert_eq!(a, 20) Error handling If your Rust function returns a Result object which contains an error, then a Lua error will be triggered. Manipulating Lua tables Manipulating a Lua table can be done by reading a LuaTable object. This can be achieved easily by reading a LuaTable object. let mut table: hlua::LuaTable<_> = lua.get(""a"").unwrap(); You can then iterate through the table with the .iter() function. Note that the value returned by the iterator is an Option<(Key, Value)>, the Option being empty when either the key or the value is not convertible to the requested type. The filter_map function (provided by the standard Iterator trait) is very useful when dealing with this. for (key, value) in table.iter().filter_map(|e| e) {     ... } You can also retreive and modify individual indices: let x = table.get(""a"").unwrap(); table.set(""b"", ""hello""); Calling Lua functions You can call Lua functions by reading a functions_read::LuaFunction. lua.execute::<()>(""     function get_five()          return 5     end"");  let get_five: functions_read::LuaFunction = lua.get(""get_five"").unwrap(); let value: i32 = get_five.call().unwrap(); assert_eq!(value, 5); This object holds a mutable reference of Lua, so you can't read or modify anything in the Lua context while the get_five variable exists. It is not possible to store the function for the moment, but it may be in the future. Reading and writing Rust containers (note: not yet possible to read containers) It is possible to read and write whole Rust containers at once: lua.set(""a"", [ 12, 13, 14, 15 ]); If the container has single elements, then the indices will be numerical. For example in the code above, the 12 will be at index 1, the 13 at index 2, etc. If the container has tuples of two elements, then the first one will be considered as the key and the second one as the value. This can be useful to create APIs: fn foo() { } fn bar() { }  lua.set(""mylib"", [     (""foo"", hlua::function0(foo)),     (""bar"", hlua::function0(bar)) ]);  lua.execute::<()>(""mylib.foo()""); User data (note: the API here is very unstable for the moment) When you expose functions to Lua, you may wish to read or write more elaborate objects. This is called a user data. To do so, you should implement the Push, CopyRead and ConsumeRead for your types. This is usually done by redirecting the call to userdata::push_userdata. struct Foo;  impl<L> hlua::Push<L> for Foo where L: hlua::AsMutLua {     fn push_to_lua(self, lua: L) -> hlua::PushGuard<L> {         lua::userdata::push_userdata(self, lua,             |mut metatable| {                 // you can define all the member functions of Foo here                 // see the official Lua documentation for metatables                 metatable.set(""__call"", hlua::function0(|| println!(""hello from foo"")))             })     } }  fn main() {     let mut lua = lua::Lua::new();     lua.set(""foo"", Foo);     lua.execute::<()>(""foo()"");       // prints ""hello from foo"" } Creating a Lua module Note: doesn't work for the moment This library also includes a second library named rust-hl-lua-module which allows you to create Lua modules in Rust. To use it, add this to Cargo.toml: [dependencies.rust-hl-lua-modules] git = ""https://github.com/tomaka/hlua"" Then you can use it like this: #![feature(phase)] #[!plugin(rust-hl-lua-modules)]  #[export_lua_module] pub mod mylib {         // <-- must be the name of the Lua module     static PI: f32 = 3.141592;      fn function1(a: int, b: int) -> int {         a + b     }      fn function2(a: int) -> int {         a + 5     }      #[lua_module_init]     fn init() {         println!(""module initialized!"")     } } This module will then be usable by Lua: > mylib = require(""mylib"") module initialized! > return mylib.function1(2, 4) 6 > return mylib.PI 3.141592 Two syntax extensions are defined: #[export_lua_module]: Must be put in front of a module. The name of the module must be the same as the name of your Lua module. #[lua_module_init]: Can be put in front of a function inside the module. This function will be executed when the module is loaded. Restrictions: fail!() will crash the program. If you spawn tasks, they will have to end before the hand is given back to lua. Contributing Contributions are welcome! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tomaka/hlua"	"— Rust library to interface with Lua"	"true"
"FFI"	""	"https://travis-ci.org/tomaka/hlua"	"— Rust library to interface with Lua"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Rust library to interface with Lua"	"true"
"FFI"	"anima-engine/mrusty"	"https://github.com/anima-engine/mrusty"	"— mruby safe bindings for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"133"	"11"	"4"	"GitHub - anima-engine/mrusty: mruby safe bindings for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 133 Fork 4 anima-engine/mrusty Code Issues 10 Pull requests 0 Pulse Graphs mruby safe bindings for Rust 221 commits 1 branch 19 releases Fetching contributors Rust 89.4% Ruby 8.0% C 1.8% Shell 0.8% Rust Ruby C Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.5.1 v0.5.0 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.2 v0.3.1 v0.3.0 v0.2.8 v0.2.7 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.1 Nothing to show New pull request Latest commit 40d12c2 May 4, 2016 dragostis Added pure Rust benchmark example. Permalink Failed to load latest commit information. benches Added pure Rust benchmark example. May 4, 2016 examples Made mrfn macro types explicit. Apr 29, 2016 src Removed mruby.raise because it was interfering with Rust's borrow sys… Apr 29, 2016 tests Improved test naming. Apr 30, 2016 .gitignore Initial commit. Feb 5, 2016 .travis.yml Removed src/tests from coverage. Apr 7, 2016 Cargo.toml Updated to v0.5.1. Apr 29, 2016 LICENSE Changed from LGPL to MPL. Apr 13, 2016 README.md Updated README example. Apr 30, 2016 build.rs Changed from LGPL to MPL. Apr 13, 2016 README.md mrusty. mruby safe bindings for Rust mrusty lets you: run Ruby 1.9 files with a very restricted API (without having to install Ruby) reflect Rust structs and enums in mruby and run them It does all this in a safely neat way while also bringing spec testing and a REPL to the table. Note: Starting with v0.4.0, mrusty will only work with Rust beta (1.9.0). This is caused by a need to capture panics in mruby. Once this features stabilizes (and it will in Rust 1.9.0), mrusty will return to stable Rust. Documentation Example A very simple example of a Container struct which will be passed to mruby and which is perfectly callable. // mrusty_class! #[macro_use] extern crate mrusty;  // Needs some undocumented, hidden calls. use mrusty::*;  let mruby = Mruby::new();  struct Cont {     value: i32 }  // Cont should not flood the current namespace. We will add it with require. mrusty_class!(Cont, ""Container"", {     // Converts mruby types automatically & safely.     def!(""initialize"", |v: i32| {         Cont { value: v }     });      // Converts slf to Cont.     def!(""value"", |mruby, slf: (&Cont)| {         mruby.fixnum(slf.value)     }); });  // Add file to the context, making it requirable. mruby.def_file::<Cont>(""cont"");  // Add spec testing. describe!(Cont, ""   context 'when containing 1' do     it 'returns 1 when calling #value' do       expect(Container.new(1).value).to eql 1     end   end "");  let result = mruby.run(""   require 'cont'    Container.new(3).value "").unwrap(); // Returns Value.  println!(""{}"", result.to_i32().unwrap()); // Prints ""3"". Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/anima-engine/mrusty"	"— mruby safe bindings for Rust"	"true"
"FFI"	""	"https://travis-ci.org/anima-engine/mrusty"	"— mruby safe bindings for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— mruby safe bindings for Rust"	"true"
"FFI"	"rustbridge/neon"	"https://github.com/rustbridge/neon"	"— use Rust from Node.js"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"988"	"49"	"30"	"GitHub - rustbridge/neon: A safe Rust abstraction layer for native Node.js modules. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 49 Star 988 Fork 30 rustbridge/neon Code Issues 34 Pull requests 2 Wiki Pulse Graphs A safe Rust abstraction layer for native Node.js modules. 175 commits 1 branch 8 releases 7 contributors Rust 70.8% C++ 18.8% C 6.4% JavaScript 3.3% Makefile 0.5% Python 0.1% Shell 0.1% Rust C++ C JavaScript Makefile Python Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.1.10 0.1.9 0.1.8 0.1.7 0.1.6 0.1.5 0.1.4 0.1.2 Nothing to show New pull request Latest commit e27e565 Jun 9, 2016 dherman committed on GitHub Merge pull request #92 from rustbridge/generalize-impl-object-for-jsf… … …unction  more generic impl of Object for JsFunction<T> Permalink Failed to load latest commit information. bin Setup compile tests Apr 25, 2016 compile_tests Fix test crate data Apr 25, 2016 crates v0.1.10 May 11, 2016 doc some links for hacking guide Jan 19, 2016 src more generic impl of Object for JsFunction<T> May 31, 2016 tests Fix broken test May 19, 2016 .gitignore Remove index.node and update package author May 2, 2016 .travis.yml Try using trusty for gcc requirement May 10, 2016 AUTHORS.md v0.1.10 May 11, 2016 CONTRIBUTING.md Relicensing! Neon is now dual-licensed under both MIT and Apache 2.0.… Apr 1, 2016 Cargo.toml v0.1.10 May 11, 2016 LICENSE-APACHE Relicensing! Neon is now dual-licensed under both MIT and Apache 2.0.… Apr 1, 2016 LICENSE-MIT Relicensing! Neon is now dual-licensed under both MIT and Apache 2.0.… Apr 1, 2016 Makefile neon-sys docs included in api docs Jan 8, 2016 README.md we support node v4 - latest stable now May 24, 2016 RELEASES.md v0.1.10 May 11, 2016 neon.jpg starting the rename process Dec 17, 2015 README.md Neon A safe Rust abstraction layer for native Node.js modules. Neon protects all handles to the JavaScript heap, even when they're allocated on the Rust stack, ensuring that objects are always safely tracked by the garbage collector. Getting started Install neon-cli as a global npm package: npm install -g neon-cli  To create a new Neon project, use neon new: neon new my-project  This will ask you a few questions and then generate a project skeleton for you. Follow the instructions from there to build and run your project! Requirements You'll need the following on all OSes: Node v4 or later; Rust v1.7 or later; multirust (only required for Neon projects that override the system default Rust). For Mac OS X, you'll need: OS X 10.7 or later; XCode. A Taste... A Neon function takes a Call object and produces a Rust Result that's either a JS value or the Throw constant (meaning a JS exception was thrown). The Call object provides access to a memory management scope, which safely manages the rooting of handles to heap objects: fn make_an_array(call: Call) -> JsResult<JsArray> {     let scope = call.scope; // the current scope for rooting handles     let array: Handle<JsArray> = JsArray::new(scope, 3);     try!(array.set(0, JsInteger::new(scope, 9000)));     try!(array.set(1, JsObject::new(scope)));     try!(array.set(2, JsNumber::new(scope, 3.14159)));     Ok(array) } For a more complete demonstration, try building a hello world with neon new, or check out the slightly bigger word count demo. Get Involved The Neon community is just getting started and there's tons of fun to be had. Come play! :) The Rust Bridge community Slack is open to all; use the Slackin app to receive an invitation. License Licensed under either of Apache License, Version 2.0 (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rustbridge/neon"	"— use Rust from Node.js"	"true"
"FFI"	""	"https://travis-ci.org/rustbridge/neon"	"— use Rust from Node.js"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— use Rust from Node.js"	"true"
"FFI"	"SSheldon/rust-objc"	"https://github.com/SSheldon/rust-objc"	"— Objective-C Runtime bindings and wrapper for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"72"	"14"	"9"	"GitHub - SSheldon/rust-objc: Objective-C Runtime bindings and wrapper for Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 72 Fork 9 SSheldon/rust-objc Code Issues 5 Pull requests 0 Pulse Graphs Objective-C Runtime bindings and wrapper for Rust. https://crates.io/crates/objc 586 commits 6 branches 19 releases 5 contributors Rust 97.8% Shell 2.2% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev_bench enc_specialize gh-pages gnustep_objc1 master verify_specialize Nothing to show 0.2.1 0.2.0 0.1.8 0.1.7 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 0.0.8 0.0.7 0.0.6 0.0.5 0.0.4 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Latest commit d19fcc6 Jun 19, 2016 SSheldon Test iOS on stable rust. Permalink Failed to load latest commit information. examples Replace Id in example. May 2, 2015 src Add support for protocols, methods for interacting with protocols, an… Apr 21, 2016 tests-ios Use rust-test-ios script rather than manual xcodebuild. Apr 30, 2016 .gitignore Use rust-test-ios script rather than manual xcodebuild. Apr 30, 2016 .travis.yml Test iOS on stable rust. Jun 19, 2016 CHANGELOG.md Added a changelog entry for version 0.2.1. Apr 23, 2016 Cargo.toml Remove now-unnecessary ios-tests and xtests. Apr 30, 2016 LICENSE.txt Include license file. May 26, 2016 README.md Documented message verification. Mar 20, 2016 doc.sh Added a script to generate docs. Dec 8, 2015 travis_install.sh Test iOS on stable rust. Jun 19, 2016 travis_test.sh Use rust-test-ios script rather than manual xcodebuild. Apr 30, 2016 README.md Objective-C Runtime bindings and wrapper for Rust. Documentation: http://ssheldon.github.io/rust-objc/objc/ Crate: https://crates.io/crates/objc Messaging objects Objective-C objects can be messaged using the msg_send! macro: let cls = Class::get(""NSObject"").unwrap(); let obj: *mut Object = msg_send![cls, new]; let hash: usize = msg_send![obj, hash]; let is_kind: BOOL = msg_send![obj, isKindOfClass:cls]; // Even void methods must have their return type annotated let _: () = msg_send![obj, release]; Declaring classes Classes can be declared using the ClassDecl struct. Instance variables and methods can then be added before the class is ultimately registered. The following example demonstrates declaring a class named MyNumber that has one ivar, a u32 named _number and a number method that returns it: let superclass = Class::get(""NSObject"").unwrap(); let mut decl = ClassDecl::new(""MyNumber"", superclass).unwrap();  // Add an instance variable decl.add_ivar::<u32>(""_number"");  // Add an ObjC method for getting the number extern fn my_number_get(this: &Object, _cmd: Sel) -> u32 {     unsafe { *this.get_ivar(""_number"") } } unsafe {     decl.add_method(sel!(number),         my_number_get as extern fn(&Object, Sel) -> u32); }  decl.register(); Exceptions By default, if the msg_send! macro causes an exception to be thrown, this will unwind into Rust resulting in unsafe, undefined behavior. However, this crate has an ""exception"" feature which, when enabled, wraps each msg_send! in a @try/@catch and panics if an exception is caught, preventing Objective-C from unwinding into Rust. Message type verification The Objective-C runtime includes encodings for each method that describe the argument and return types. This crate can take advantage of these encodings to verify that the types used in Rust match the types encoded for the method. To use this functionality, enable the ""verify_message"" feature. With this feature enabled, type checking is performed for every message send, which also requires that all arguments and return values for all messages implement Encode. If this requirement is burdensome or you'd rather just verify specific messages, you can call the Message::verify_message method for specific selectors. Support for other Operating Systems The bindings can be used on Linux or *BSD utilizing the GNUstep Objective-C runtime. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/SSheldon/rust-objc"	"— Objective-C Runtime bindings and wrapper for Rust"	"true"
"FFI"	"dgrunwald/rust-cpython"	"https://github.com/dgrunwald/rust-cpython"	"— Python bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"213"	"18"	"17"	"GitHub - dgrunwald/rust-cpython: Rust <-> Python bindings Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 213 Fork 17 dgrunwald/rust-cpython Code Issues 11 Pull requests 0 Pulse Graphs Rust <-> Python bindings 249 commits 2 branches 5 releases 9 contributors Rust 95.6% Python 4.0% Makefile 0.4% Rust Python Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 0.0.5 0.0.4 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Latest commit 2db59a0 Jun 20, 2016 dgrunwald committed on GitHub Merge pull request #50 from sciyoshi/inplace-ops … Add support for in-place numeric operators in py_class! Permalink Failed to load latest commit information. examples Put Python argument at beginning of argument list. Oct 26, 2015 extensions #40: split ExtractPyObject into two traits: May 8, 2016 python27-sys Add support for __len__ special method. Apr 17, 2016 python3-sys Merge pull request #45 from royalstream/royalstream-macos Apr 17, 2016 src Add support for in-place numeric operators in py_class! Jun 14, 2016 tests Add support for in-place numeric operators in py_class! Jun 14, 2016 .gitignore Update link to documentation. Apr 19, 2015 .travis.yml Fix stable rust version in travis config Mar 6, 2016 Cargo.toml We only need num-traits, not the full num crate. Apr 17, 2016 LICENSE MIT license headers Apr 19, 2015 Makefile py_class!: add __bool__ slot May 6, 2016 README.md WIP: big macro refactoring Mar 7, 2016 appveyor.yml appveyor: fix install script Nov 12, 2015 build.rs windows support for build script May 28, 2015 README.md rust-cpython Rust bindings for the python interpreter. Documentation Cargo package: cpython Copyright (c) 2015-2016 Daniel Grunwald. Rust-cpython is licensed under the MIT license. Python is licensed under the Python License. Supported Python versions: Python 2.7 Python 3.3 Python 3.4 Python 3.5 Supported Rust version: Rust 1.7.0 or later Usage To use cpython, add this to your Cargo.toml: [dependencies] cpython = { git = ""https://github.com/dgrunwald/rust-cpython.git"" } Example program displaying the value of sys.version: extern crate cpython;  use cpython::Python; use cpython::ObjectProtocol; //for call method  fn main() {     let gil = Python::acquire_gil();     let py = gil.python();      let sys = py.import(""sys"").unwrap();     let version: String = sys.get(py, ""version"").unwrap().extract(py).unwrap();      let os = py.import(""os"").unwrap();     let getenv = os.get(py, ""getenv"").unwrap();     let user: String = getenv.call(py, (""USER"",), None).unwrap().extract(py).unwrap();      println!(""Hello {}, I'm Python {}"", user, version); } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dgrunwald/rust-cpython"	"— Python bindings"	"true"
"FFI"	""	"https://travis-ci.org/dgrunwald/rust-cpython"	"— Python bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Python bindings"	"true"
"FFI"	"lukemetz/rustpy"	"https://github.com/lukemetz/rustpy"	"— Python bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"56"	"13"	"5"	"GitHub - lukemetz/rustpy: Rust + Python = ???? Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 56 Fork 5 lukemetz/rustpy Code Issues 0 Pull requests 0 Pulse Graphs Rust + Python = ???? 76 commits 2 branches 0 releases Fetching contributors Rust 98.6% C 1.4% Rust C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master travis Nothing to show Nothing to show New pull request Latest commit edbe18c Mar 21, 2016 lukemetz Merge pull request #14 from yberreby/rustup … Rustup Permalink Failed to load latest commit information. src fix object safety error in FromPyType trait Mar 19, 2016 .gitignore updated git ignore Aug 24, 2014 .travis.yml travis Oct 15, 2014 Cargo.toml Update to rust 1.0.0 stable Jun 24, 2015 README.md Update README.md Jan 27, 2015 build.rs Update to rust 1.0.0 stable Jun 24, 2015 README.md Rustpy A simple library to allow for easy use of python from rust. Status Currently this library has not received much love (pull requests welcome for any interested) and does not build with rust 1.0. For another library that also strives to bridge the gap between python and rust and might be a little more up to day see: https://github.com/dgrunwald/rust-python27-sys https://github.com/dgrunwald/rust-cpython How to Use This library is meant to be middle ware for users wanting to use python libraries from rust. It allows users to quickly use existing tools and get working on interesting things fast! See pysmtplib.rs for an example of how to bind enough smtplib to send emails. For more documentation, run rustdoc src/rustpy.rs and look at doc/rustpy/index.html. Pull requests are welcome! extern crate rustpy; use rustpy::{ToPyType, FromPyType, PyState};  fn main() {   let py = PyState::new();   let module = py.get_module(""math"").unwrap();   let func = module.get_func(""sqrt"").unwrap();   let args = (144f32, ).to_py_object(&py).unwrap();   let untyped_res = func.call(&args).unwrap();   let result = py.from_py_object::<f32>(untyped_res).unwrap();   assert_eq!(result, 12f32); } Important note: Only create one instance of PyState at a time. On construction, it grabs a global lock to prevent more than one thread from interacting with the interpreter thus making it very easy to deadlock. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lukemetz/rustpy"	"— Python bindings"	"true"
"FFI"	""	"https://travis-ci.org/lukemetz/rustpy"	"— Python bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Python bindings"	"true"
"FFI"	"rustr/rustr"	"https://github.com/rustr/rustr"	"— use Rust from R, and use R in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"42"	"8"	"1"	"GitHub - rustr/rustr: Rust and R Integration Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 42 Fork 1 rustr/rustr Code Issues 2 Pull requests 0 Pulse Graphs Rust and R Integration https://rustr.org 129 commits 1 branch 0 releases Fetching contributors Rust 99.6% Other 0.4% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 20ad63c May 7, 2016 qinwf Update: todo #3 Permalink Failed to load latest commit information. examples Fix: engine example add leave() May 5, 2016 rtest Fix: CI test May 4, 2016 src Fix: set R_CStackLimit on Windows May 5, 2016 tests Add: code coverage test May 4, 2016 .gitignore Add: nalgebra test Apr 28, 2016 .travis.yml Add: code coverage test May 4, 2016 Cargo.toml bump version 0.1.9 May 5, 2016 README.md Update: todo #3 May 7, 2016 appveyor.yml Fix: appveyor Rust install path May 4, 2016 build.rs Add: build.rs Mar 24, 2016 test_scripts.md Add: travis binary for faster speed May 4, 2016 README.md Rust and R Integration rustr is a Rust library that provides a Rust API to work with R. Write pure Rust code with rustr, and then use rustinr R package to generate Rust interfaces to R. More info: https://rustr.org This project is now under construction. Issues and contributions are welcome! Todo for v0.2 rustr random numbers from R RChar for CHARSXP string check bindgen code check NA for RNew IntoR nalgebra traits with RBLAS #3 more methods for R Vector Obejct types stablize R in Rust with feature::engine module more RNew IntoR From Into for types DataFrame type for RList nalgebra crate types num crate types log crate log trait rustinr Will try CRANing when R 3.3.0 release find and fix bugs CRAN knitr code engine book more about rdll module about concurrency about unsafe about memory safety and garbage collection R in Rust with feature::engine module gallery more examples with vectors rustr/gallery #1 more RNew, IntoR From Into for types how to use rustr::rdll module R Object - DataFrame type nalgebra crates types num crates types rusty-machine crate rusty-machine examples R in Rust with feature::engine module Todo for future date type with chrono sugar function R6 & Rust type wait for a great matrix library for Rust! There are some promising crates. Miss a feature? Talk on forum or create an issue. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rustr/rustr"	"— use Rust from R, and use R in Rust"	"true"
"FFI"	""	"https://travis-ci.org/rustr/rustr"	"— use Rust from R, and use R in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— use Rust from R, and use R in Rust"	"true"
"FFI"	"rustbridge/helix"	"https://github.com/rustbridge/helix"	"— write Ruby classes in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"803"	"60"	"18"	"GitHub - rustbridge/helix: Ruby and Rust, sitting in a tree Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 803 Fork 18 rustbridge/helix Code Issues 6 Pull requests 2 Pulse Graphs Ruby and Rust, sitting in a tree 22 commits 3 branches 0 releases 6 contributors Rust 59.7% Ruby 21.8% C 18.5% Rust Ruby C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags helix master original Nothing to show Nothing to show New pull request Latest commit 2c057f0 Jun 24, 2016 chancancode committed on GitHub Add blog post link in README Permalink Failed to load latest commit information. crates/libcruby-sys export rb_utf8_str_new as macro in helix_runtime Jun 20, 2016 examples Add fast_blank example Jun 24, 2016 ruby export rb_utf8_str_new as macro in helix_runtime Jun 21, 2016 src Fix macros to allow no args + return type Jun 24, 2016 .gitignore Remove personal .vscode directory and ignore it May 9, 2016 Cargo.toml Merge pull request #4 from steveklabnik/libc_version Jun 19, 2016 README.md Add blog post link in README Jun 24, 2016 console.d.ts Initial commit May 6, 2016 README.md Read the Introducting Helix for a quick introduction to the project! WARNING: This repository is still in active development. The vast majority of important Ruby APIs are not yet supported, because we are still in the process of formulating the rules for binding Ruby APIs (so that we can make things ergonomic and provide safety guarantees). Short-term TODOs: Rust return types coerce into Ruby values Defined coercions for all of the main Ruby types Calling Ruby methods on Ruby objects Propagating Ruby exceptions through Rust Converting type check errors into exceptions (currently they're just logged) struct { } fields inside of wrapped classes (not-reopened), using Data_Wrap_Struct under the hood Dynamically enforced ownership for wrapped classes self types in reopened classes to simple coercsions into Rust types (Ruby String -> &str) Locking against re-entering Ruby when coercing String/Array into &str / &[T] What follows is an aspirational README 😉 Helix Helix allows you to write Ruby classes in Rust without having to write the glue code yourself. declare_types! {     class Console {         def log(self, string: &str) {             println!(""LOG: {}"", string);         }     } } $ irb >> require ""console/native"" >> Console.new.log(""I'm in your rust"") LOG: I'm in your Rust STATUS: The main thing missing from the current implementation is coercing Rust return types in Ruby. Today, you would need to add Qnil to the bottom of def log, which we hope to eliminate soon. Coercions When you define a method in Helix using def, you can specify any Rust type in its type signature. Under the hood, Helix will automatically coerce the Ruby type to the specified Rust type, doing appropriate type checks before passing the values into Rust. declare_types! {     class Console {         def log(string: &str) {             println!(""LOG: {}"", string);         }     } } $ irb >> require ""console/native"" >> Console.new.log({}) TypeError: no implicit coercion of Hash into Rust &str     from (irb):2:in `log'  from (irb):2  from /Users/ykatz/.rvm/rubies/ruby-2.3.0/bin/irb:11:in `<main>' STATUS: This protocol already works now and is implemented for String and &[u8] The Helix Coercion Protocol Under the hood, Helix does not hardcode all possible coercions from Ruby into Rust. Instead, it defines a two-part protocol that any crate can implement to define coercions from Ruby values into their types. pub trait UncheckedValue<T> {     fn to_checked(self) -> CheckResult<T>; }  pub trait ToRust<U, T: CheckedValue<U>> {     fn to_rust(self) -> T; } Implementations of these traits use these concrete types: pub type CheckResult<T> = Result<CheckedValue<T>, CString /* error */>;  pub struct CheckedValue<T> {     pub inner: VALUE;     // other private fields }  impl<T> CheckedValue<T> {     // instantiating a CheckedValue<T> is an assertion that the follow-up     // call to `to_rust` is safe.     pub unsafe fn new(inner: VALUE) -> CheckedValue<T>; } For reference, here is the implementation of the coercion from a Ruby String to Rust String. impl UncheckedValue<String> for VALUE {     fn to_checked(self) -> CheckResult<String> {         // check whether the VALUE is actually a String         if unsafe { sys::RB_TYPE_P(self, sys::T_STRING) } {             // assert that we can guarantee that to_rust() can return a Rust String safely             Ok(unsafe { CheckedValue::<String>::new(self) })         } else {             Err(CString::new(format!(""No implicit conversion from {} to Rust String"", ""?"")).unwrap())         }     } }  impl ToRust<String> for CheckedValue<String> {     fn to_rust(self) -> String {         // we're sure that these calls are safe, because we already went through the type         // checking protocol in VALUE.to_checked().         let size = unsafe { sys::RSTRING_LEN(self.inner) };         let ptr = unsafe { sys::RSTRING_PTR(self.inner) };         let slice = unsafe { std::slice::from_raw_parts(ptr as *const u8, size as usize) };         unsafe { std::str::from_utf8_unchecked(slice) }.to_string()     } } This protocol allows us to fully type check a method's arguments before starting any of the coercions. It happens automatically based on the type signature you use in your Rust method def. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rustbridge/helix"	"— write Ruby classes in Rust"	"true"
"FFI"	""	"https://travis-ci.org/rustbridge/helix"	"— write Ruby classes in Rust"	"null"	"null"	"null"	"null"	"null"	"http://areweideyet.com/"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— write Ruby classes in Rust"	"true"
"IDEs"	"Rust and IDEs"	"https://www.rust-lang.org/ides.html"	"— write Ruby classes in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	""	"null"	"null"	"— write Ruby classes in Rust"	"true"
"IDEs"	"intellij-rust"	"https://github.com/intellij-rust/intellij-rust"	"— an -based IDE for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"781"	"46"	"62"	"GitHub - intellij-rust/intellij-rust: Rust IDE built using the IntelliJ Platform: https://intellij-rust.github.io/ Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 781 Fork 62 intellij-rust/intellij-rust Code Issues 30 Pull requests 1 Pulse Graphs Rust IDE built using the IntelliJ Platform: https://intellij-rust.github.io/ 1,780 commits 2 branches 0 releases 32 contributors Kotlin 75.3% Rust 12.8% Java 9.1% Lex 2.4% Other 0.4% Kotlin Rust Java Lex Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags impl-index-wip master Nothing to show Nothing to show New pull request Latest commit af4e033 Jul 16, 2016 matklad (ANN): annotate struct expressions … fixes #523 Permalink Failed to load latest commit information. gradle/wrapper (GRD): update Gradle, Kotlin and IDEA Jul 1, 2016 lib (DEPS): Bumped GK to `1.4.0` Jun 3, 2016 src (ANN): annotate struct expressions Jul 16, 2016 .editorconfig (GRAM): code style improvements Apr 17, 2016 .gitignore (RES): support archived rust sources Mar 29, 2016 .gitmodules (PROJ): Finally decoupled TOML plugin from the Rust one Feb 16, 2016 .travis.yml (CI): improve travis caching Jun 13, 2016 AUTHORS.md (MISC): update AUTHORS Jul 4, 2016 CONTRIBUTING.md (DOC): fix performance metrics link Jul 13, 2016 LICENSE (PROJ): Pushed a `LICENSE` Oct 31, 2015 README.md (DOC): fix link syntax Jul 14, 2016 STYLE.md (MISC): use properties instead of getter functions Jan 10, 2016 build.gradle (GRAM): add support for default contextual keyword Jul 15, 2016 gradle.properties (GRD): update to IDEA 2016.2 Jul 13, 2016 gradlew (PROJ): add gradle wrapper Oct 24, 2015 gradlew.bat (PROJ): add gradle wrapper Oct 24, 2015 settings.gradle (JPS): remove jps Apr 14, 2016 README.md Rust IDE built using the IntelliJ Platform Status This is a work in progress, some features are implemented partially (most notably completion), there may be performance and stability problems. Usage Visit intellij-rust.github.io to find documentation about available installation options and features. If you want to jump straight in, install IntelliJ IDEA, open Settings > Plugins > Browse repositories, install Rust plugin, and use project from existing sources action to import a Cargo-based project. Compatible IDEs The plugin should be compatible with any Intellij based IDE starting from build 143.2287.1. For example, the minimum supported IDEA version is 15.0.4, the minimum supported CLion version is 1.2. See Help > About menu in the IDE to learn the build version you are using. Contributing You're encouraged to contribute to the plugin in any form if you've found any issues or missing functionality that you'd want to see. In order to get started and to learn about plugin architecture check out CONTRIBUTING.md guide. Good first bugs are tagged with up-for-grab. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/intellij-rust/intellij-rust"	"— an -based IDE for Rust"	"true"
"IDEs"	"IntelliJ"	"https://www.jetbrains.com/idea/"	"— an -based IDE for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"IntelliJ IDEA the Java IDE All Tools IDEs .NET & Visual Studio Team Tools Languages Store Support We Are JetBrains Check out our IDEs IntelliJ IDEA The most intelligent Java IDE PhpStorm Lightning-smart PHP IDE PyCharm Python IDE for professional developers RubyMine The most intelligent Ruby IDE WebStorm The smartest JavaScript IDE AppCode Smart IDE for iOS/OS X development CLion A smart cross-platform IDE for C and C++ DataGrip Your Swiss Army knife for databases & SQL Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for .NET and Visual Studio ReSharper Visual Studio extension for .NET developers ReSharper C++ Visual Studio extension for C++ developers dotTrace .NET performance profiler dotMemory .NET memory profiler dotCover .NET unit test runner and code coverage tool dotPeek Free .NET decompiler and assembly browser Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for teams TeamCity Powerful Continuous Integration out of the box YouTrack Issue tracker designed for development teams Upsource Code review and repository browsing Hub JetBrains team tools, integrated Check out our languages and related tools Kotlin Programming language for JVM & Android MPS DSL development environment Store Pricing and licensing options for everyone, from free plans for students to volume licensing for companies. JetBrains Toolbox Team Tools Purchase Terms FAQ Contact Sales Support Questions or problems? We want to help! Dedicated support teams can answer product- or purchase-related questions. Technical Support Contact Sales Commitment Community Support Webinars Early Access Programs We Are JetBrains We make professional software development a more productive and enjoyable experience. About Us People Customers & Awards Press Room Partners & Resellers Technology Partners Careers Contacts Search IntelliJ IDEA What's New Features Learn Buy Download Capable and Ergonomic Java * IDE Download *Actually, much more than just Java Features Enjoy productive java Every aspect of IntelliJ IDEA is specifically designed to maximize developer productivity. Together, powerful static code analysis and ergonomic design make development not only productive but also an enjoyable experience. Take a tour Deep intelligence After IntelliJ IDEA's indexed your source code, it offers blazing fast and intelligent experience by giving relevant suggestions in every context: instant and clever code completion, on-the-fly code analysis and reliable refactoring tools. Out-of-the-box experience Mission-critical tools such as integrated version controls systems and a wide variety of supported languages and frameworks are at hand — no plugin hustle included. Smart code completion While the basic completion suggests names of classes, methods, fields, and keywords within the visibility scope, the smart completion suggests only those types that are expected in the current context. Framework-specific assistance While IntelliJ IDEA is an IDE for Java, it also understands and provides intelligent coding assistance for a large variety of other languages such as SQL, JPQL, HTML, JavaScript, etc., even when the language expression is injected into a String literal in your Java code. Productivity boosters The IDE predicts your needs and automates the tedious and repetitive development tasks so you can stay focused on the big picture. Developer ergonomics In every design and implementation decision that we make, we keep in mind the risk of interrupting the developer's flow and do our best to eliminate or minimize it. The IDE follows your context and brings up the corresponding tools automatically. Unobtrusive intelligence The coding assistance in IntelliJ IDEA is not about only the editor: it helps you stay productive when dealing with its other parts as well: e.g. filling a field, searching over a list of elements; accessing a tool window; or toggling for a setting, etc. Built-in tools and supported frameworks Built-in tools Build tools Version control Decompiler Coverage Database tools/SQL JVM languages Java Scala Groovy Kotlin Enterprise frameworks Spring Java EE GWT/Vaadin JBoss Play Grails App Servers/Clouds Mobile development Android PhoneGap/Cordova/ Ionic Web development JavaScript HTML/CSS AngularJS React Node.js Discover all features New Features User interface Font ligatures Breadcrumb for Java Background Image in Editor and IDE Frame Notication popups got compact and moved to the right-bottom corner Version control Log for Git and Mercurial now loads data in the background, gets a handy loading progress indicator and a shortcut to navigate to the filter field Unversioned files in Commit dialog Case-only rename in Git for Windows and OS X Patches can now be applied from the clipboard or by dragging a file into the IDE; and IntelliJ offers help when applying patches with conflicts Frameworks Support for JUnit 5 Better coding assistance for React Support for AngularJS 2 Spring 4.3 core features, new inspections, and better performance Coding assistance for Spring Caching Code completion and navigation in FreeMarker and Velocity templates for variables defined in Spring controllers And much more… Choose your edition Choose your edition Community For JVM and Android development Ultimate For web and enterprise development Java, Kotlin, Groovy, Scala Android ? Maven, Gradle, SBT Git, SVN, Mercurial, CVS Perforce, ClearCase, TFS JavaScript, TypeScript ? Java EE, Spring, GWT, Vaadin, Play, Grails, Other Frameworks ? Database Tools, SQL Compare editions Download .exe Windows (.exe) OS X (.dmg) Linux (.tar.gz) Free download Download .exe Windows (.exe) OS X (.dmg) Linux (.tar.gz) Free 30-day trial Tell me about new product features as they come out Thanks for your request! Community forum Plugin repository Bug and issue tracker IntelliJ IDEA blog Also on JetBrains My account Newsletter Contact Follow JetBrains © 2000—2016 JetBrains s.r.o. All rights reserved. Developed with drive and IntelliJ IDEA Privacy Policy | Terms of Use"	"null"	"null"	"— an -based IDE for Rust"	"true"
"IDEs"	""	"https://travis-ci.org/intellij-rust/intellij-rust"	"— an -based IDE for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— an -based IDE for Rust"	"true"
"IDEs"	"PistonDevelopers/VisualRust"	"https://github.com/PistonDevelopers/VisualRust"	"— a Visual Studio extension for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"436"	"107"	"55"	"GitHub - PistonDevelopers/VisualRust: Visual Studio extension for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 107 Star 436 Fork 55 PistonDevelopers/VisualRust Code Issues 30 Pull requests 3 Wiki Pulse Graphs Visual Studio extension for Rust 469 commits 1 branch 3 releases Fetching contributors C# 96.9% Rust 1.8% ANTLR 1.2% F# 0.1% C# Rust ANTLR F# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.1 v0.1 0.1.2 Nothing to show New pull request Latest commit efedfb9 Jun 5, 2016 vosen Merge pull request #224 from vosen/master … Implement edit/persistence part ot target output editor Permalink Failed to load latest commit information. MIEngine @ 386b9d0 Update MIEngine Oct 25, 2015 Microsoft.VisualStudio.Project Fix typos in code May 15, 2016 RustLexer Bump version to 0.1.2 Mar 10, 2016 VisualRust.Build Make sure that there exists a loadable Cargo manifest May 1, 2016 VisualRust.Cargo Finish implementing output targets editor Jun 5, 2016 VisualRust.Project Merge pull request #224 from vosen/master Jun 5, 2016 VisualRust.Setup Bump version to 0.1.2 Mar 9, 2016 VisualRust.Shared Bump version to 0.1.2 Mar 9, 2016 VisualRust.Templates Bump version to 0.1.2 Mar 9, 2016 VisualRust.Test.Integration Upgrade integration tests to use rust 1.5 stable, to test with the la… Jan 17, 2016 VisualRust.Test Finish implementing output targets editor Jun 5, 2016 VisualRust Merge pull request #224 from vosen/master Jun 5, 2016 tools Download mingw-builds during build and extract gdb Jul 29, 2015 vist_toml Tighten target output setting logic Jun 4, 2016 .gitattributes Initial commit. Aug 12, 2014 .gitignore Download mingw-builds during build and extract gdb Jul 28, 2015 .gitmodules Use our MIEngine instead of relying on one being installed Jul 22, 2015 LICENSE.rtf Update license in the installer Dec 6, 2014 LICENSE.txt Remove ArkeIndustries references Aug 15, 2014 README.md Update README.md with feature list Oct 18, 2015 VisualRust.sln Implement output targets panel visuals May 22, 2016 README.md Visual Studio extension for Rust Currently in development, and not feature complete. Stable versions are available on the Visual Studio extension gallery. Unstable, but more recent builds are downloadable from AppVeyor (choose ""Configuration: Release"" and ""Artifacts""). Features Project support Syntax highlighting Autocomplete Go to definition MIEngine-powered debugging featuring Conditional breakpoints Watch window (with the ability to change the runtime state) Immediate window (with the ability to change the runtime state) Set next statement Call stack view and navigation Contributing How to contribute? Issues Feel free to open issues, post comments about progress, questions, new ideas, brain storming etc. You can remove and edit comments as a way of refining ideas in the issue tracker. This is very helpful because many concerns in this project are very complex. Many issues needs to be broken down into new issues before they can be implemented. Issues marked Ready represent tasks that have a clear design and deliverables. They are recommended starting points if you don't want to spend time discussing and evaluating implementation. Issues marked Information require some wider perspective and discussion. They are perfect if you want to have an impact on the project but don't have the time to spend coding. Code Fork the main repository Work on a feature in your own private branch Once you are finished with you work or want someone to you, open a pull request Someone will review your code and merge it. Some fixes might be required on your side. Prerequisites To build this, you'll need the Visual Studio (2013 or 2015) and matching Visual Studio SDK for the VS plugin, WiX Toolset 3.9 or higher (if you are developing from VS 2015, you will need version 3.10 or higher) for the setup project and Java RE. Nuget will take care of the rest. Build configuration If you plan to hack on Visual Rust you should understand difference between our two build configurations. For the Release configuration the main project is VisualRust.Setup, its output is a .msi file that consists of two parts: MSBuild integration: this lets you build Rust projects (.rsproj) from the command line and Visual Studio. Visual Studio plugin(s): this adds support for Rust projects (.rsproj) inside Visual Studio. Syntax highlighting, project system, item templates. Everything except building. For the Debug build main project is called simply VisualRust and it builds VisualRust.vsix which is a VS plugin in a format that is suitable for local installation and debugging. It doesn't contain MSBuild integration Consequently, for the debug build you'll want to either install just MSBuild integration from the .msi file or build it yourself (VisualRust.Build) and copy to %ProgramFiles(x86)%\MSBuild\VisualRust. Also you'll want to modify VisualRust project with location of your Visual Studio installation to launch it automatically when debugging. Contact This project is currently maintained by vosen. Feel free to mail him or ask around in #rust-gamedev on irc.mozilla.org. License Same as Rust, dual MIT/ASL2. Any contributions made are under this license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PistonDevelopers/VisualRust"	"— a Visual Studio extension for Rust"	"true"
"IDEs"	""	"https://travis-ci.org/PistonDevelopers/VisualRust"	"— a Visual Studio extension for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a Visual Studio extension for Rust"	"true"
"IDEs"	"Ride"	"https://github.com/madeso/ride"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"103"	"10"	"7"	"GitHub - madeso/ride: Rust IDE Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 103 Fork 7 madeso/ride Code Issues 106 Pull requests 0 Pulse Graphs Rust IDE 1,355 commits 1 branch 0 releases 1 contributor C++ 91.9% Python 2.6% Protocol Buffer 2.3% CMake 1.9% Other 1.3% C++ Python Protocol Buffer CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit e2cf573 Jun 23, 2016 madeso added appveyor build badge Permalink Failed to load latest commit information. external use correct arguments on non-windows Nov 26, 2015 gfx testing a bmp image instead Jun 20, 2016 ride link statically with wx Jun 12, 2016 samples added more auto indent test Mar 7, 2015 scripts added protobuf x64 hack Jun 22, 2016 .clang-tidy ignoring more Nov 21, 2015 .editorconfig support python code Jun 16, 2016 .gitignore ignoring install-dost Jun 16, 2016 .travis.yml OSX integration complete #18 Jun 4, 2016 CMakeLists.txt use static link with crt to avoid shipping vcredist Jun 12, 2016 Doxyfile.ini Fixed doxygen Feb 18, 2015 LICENSE license contains newlines and is unmodified, .txt does not Jun 8, 2016 LICENSE.rtf wix installation Jun 8, 2016 LICENSE.txt license contains newlines and is unmodified, .txt does not Jun 8, 2016 README.md added appveyor build badge Jun 23, 2016 appveyor.yml reenabled win32 builds Jun 23, 2016 build-osx.md proper case in deployment target variable May 31, 2016 c_flag_overrides.cmake use static link with crt to avoid shipping vcredist Jun 12, 2016 call-clang-format.py don't format .in.h files as it screws with cmake syntax Jun 12, 2016 call-clang-tidy.py moved clang-tidy name to cmake to use other versions Nov 21, 2015 check_includes.py added json output #114 Nov 26, 2015 code-stat-everything.txt updated codestat May 30, 2016 code-stat-switcher.txt Updated proto error display Nov 21, 2015 cpack-config.cmake testing a bmp image instead Jun 20, 2016 cpplint.py made pythonfiles executable Oct 15, 2015 cxx_flag_overrides.cmake use static link with crt to avoid shipping vcredist Jun 12, 2016 gource.pyw made pythonfiles executable Oct 14, 2015 run-cloc.py updated cloc build to be even more quiet Oct 16, 2015 README.md Ride is a Rust IDE. It's named after concatenating R from rust and IDE. It's currently not in a usable state. If you're looking for something more complete, perhaps RustDT for Eclipse, SolidOak or Rust for brackets is your thing. The current features are: A pretty ok editor (scintilla based) Shortcuts for running various cargo commands Listing its output and Double clicking on warnings/errors to go to them. Context clicking on warnings/errors to google them. A basic project/cargo (file) explorer Space/tab settings are saved per project so the same settings are used by everyone on the project Autocompile protobuf files The project aim is to implement as much of it in C++ and then port it to rust when wxWidgets for rust is available. Some of the development is streamed on twitch and later uploaded to youtube. Screenshots Getting ride This isn't finished. Eventually there should be a installer here, but that isn't finished. Issue #13 is looking to fix this. If you want to try it, you need to download the source and build it yourself. Since it isn't finished at first launch you might want to set all the colors to something other than black. Issue 64 should fix this. Building ride You need CMake, a C++ compiler, protobuf and wxWidgets 3+. Doxygen, Python 2, clang-format and cppcheck are optional and can be disabled via the CMake BUILD_USE_ variables. To actually build it, it is pretty standard. Use CMake to generate a configuration and then build that configuration. wxWidgets 3.x Currently the wxWidgets used is a fork from the public wxWidgets master. Issue #16 is looking to fix this. The public download of wxWidgets 3.0 or the public master can be used but then the CMake variables USE_CPP_AS_RUST use WX_WIDGETS_LEGACY_FINDTEXT has to be changed to true. Contributing I accept pull requests. Follow the google C++ style guide when writing new code. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/madeso/ride"	"—"	"true"
"IDEs"	""	"https://travis-ci.org/madeso/ride"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"IDEs"	"RustDT"	"https://github.com/RustDT/RustDT"	"— an -based IDE for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"275"	"31"	"38"	"GitHub - RustDT/RustDT: RustDT is an Eclipse based IDE for the Rust programming language: Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 275 Fork 38 RustDT/RustDT Code Issues 17 Pull requests 2 Pulse Graphs RustDT is an Eclipse based IDE for the Rust programming language: http://rustdt.github.io/ 1,829 commits 2 branches 15 releases 7 contributors Java 99.9% Other 0.1% Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags latest master Nothing to show v0.6.2 v0.6.1 v0.6.0 v0.5.1 v0.5.0 v0.4.2 v0.4.1 v0.4.0 v0.3.0 v0.2.2 v0.2.1 v0.2.0 v0.1.1 v0.1.0 0.5.0 Nothing to show New pull request Latest commit f9551e6 Jul 15, 2016 bruno-medeiros Temporarily disable test which is flaky. Permalink Failed to load latest commit information. documentation Merging [MelnormeLang]* Jul 2, 2016 feature prep version 0.6.2 Jul 2, 2016 plugin_ide.core.tests Temporarily disable test which is flaky. Jul 15, 2016 plugin_ide.core Merging [MelnormeLang]* Jul 15, 2016 plugin_ide.debug prep version 0.6.2 Jul 2, 2016 plugin_ide.ui.tests prep version 0.6.2 Jul 2, 2016 plugin_ide.ui Merging [MelnormeLang]* Jul 15, 2016 plugin_tooling Merging [MelnormeLang]* Jul 15, 2016 releng Merging [MelnormeLang]* Jun 22, 2016 .gitignore LANG: added JVM version check plugin Jun 3, 2015 .project Merging [MelnormeLang]* May 25, 2016 .travis.yml !API Several cleanup renames. Apr 18, 2016 ISSUE_TEMPLATE.md Merging [MelnormeLang]* Mar 18, 2016 README.md Merging [MelnormeLang]* Jul 12, 2016 pom.xml Merging [MelnormeLang]* Apr 20, 2016 README.md Project website: http://rustdt.github.io/ Developers Guide Setting up the development environment: You need Eclipse PDE to develop Eclipse plugins. Download and start it. Clone the Git repository. In Eclipse, click ""File / Import... "", and then ""General / Existing projects into workspace"". Select the Git repository folder as the ""root directory"", enable ""Search for nested projects"", and select all the Eclipse projects that show up. Click finish to import those projects. Note: The actual project names will be different from those in the screenshot above. Note: Java compiler settings will be automatically configured, since Eclipse compiler settings are stored in source version control. Setup the target platform: Open the target platform file: releng/target-platform/IDE.target (You can use the Open Resource dialog to help find this file, press Ctrl-R and type IDE.target in the dialog). Then click ""Set as Target Platform"" once the file is opened, as seen here: Build the workspace ( ""Project / Build All""). Everything should build fine now, there should be no errors. To start the IDE from your workspace: Open ""Run / Run Configurations ..."". Click on ""Eclipse Application"" to create a new launch for the plugins in your workspace. The default new configuration that is created should already be ready to be launched. Additional tip: Locate the bin-maven folder in the top-level project, open its Properties from the Project Explorer context menu, and mark that directory as ""Derived"" in the ""Resources"" property page. This will prevent those folder resources to appear in UI operations such as ""Open Resource"" for example. Running the tests in Eclipse: Automated Building and Testing: Using Maven (and Tycho), it is possible to automatically build RustDT, create an update site, and run all the tests. Download Maven (minimum version 3.0), and run the following commands on the root folder of the repository: Run mvn package to build the RustDT feature into a p2 repository (which is a local update site). It will be placed at bin-maven/features.repository/repository Run mvn verify to build RustDT as above and also run the test suites. You can do mvn verify -P TestsLiteMode to run the test suites in ""Lite Mode"" (skip certain long-running tests). Creating and deploying a new release: A release is a web site with an Eclipse p2 update site. The website may contain no web pages at all, rather it can be just the p2 site. To create and deploy a new release: Ensure the version numbers of all plugins/features/etc. are properly updated, if they haven't been already. Run mvn clean verify to perform the Tycho build (see section above). Ensure all tests pass. To create a signed release the sign-build Maven profile must be activated, and the required properties set. Create and push a new release tag for the current release commit. Go to the Github releases page and edit the newly present release. Add the corresponding (ChangeLog.md) entries to the release notes. Locally, run ant -f releng/ CreateProjectSite. This last step will prepare the project web site under bin-maven/ProjectSite. To actually publish the project site, run ant -f releng/ PublishProjectSite -DreleaseTag=<tagName>. What happens here is that the whole project site will be pushed into a Git repository, to then be served in some way (for example Github Pages). If projectSiteGitURL is not specified, the default value in releng-build.properties will be used. For more info on the Release Engineering script, run ant -f releng/, this will print the help. A branch or tag named latest should also be created in Github, pointing to the latest release commit. The previous latest tag can be deleted/overwritten. The documentation pages use this tag/branch in their links. Project design info and notes LangEclipseIDE This project uses the LangEclipseIDE framework, which is designed to have its source embedded in the host IDE. See this section for more info on how this should be managed. Extensive Compile-Time type and contract checking See https://github.com/bruno-medeiros/MelnormeEclipse/wiki/Extensive-Compile-Time-Checking for more info on this principle. Code style: Indent with tabs (tab size is 4 spaces) Max line width: 120 Block style:     if(foo.blah()) {         doThis();     }  Indentation for function arguments: 1 indent unit (= 1 tab):     foo(one, two, three,         four, five, six);  Unit tests double-method wrapper: This code idiom is often used in this project's JUnit tests: @Test public void testXXX() throws Exception { testXXX$(); } public void testXXX$() throws Exception { This is donely solely as an aid when debugging code, so that the ""Drop to frame"" functionality can be used on the unit-test method. It seems the Eclipse debugger (or the JVM) cannot drop-to-frame to a method that is invoked dynamically (such as the unit-test method). So we wrap the unit-test method on another one. So while we now cannot drop-to-frame in testXXX, we can do it in testXXX$, which basically allows us to restart the unit-test. TODO: investigate if there is an alternate way to achieve the same. I haven't actually checked that. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/RustDT/RustDT"	"— an -based IDE for Rust"	"true"
"IDEs"	"Eclipse"	"https://eclipse.org/"	"— an -based IDE for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Eclipse Neon Skip to main content Create account Log in Download Download Getting Started Members Projects Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM More Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM Toggle navigation neon Download Other Package Downloads Click here to continue to eclipse.org Highlights 1 New tools for JavaScript developers, including a JSON editor, support for Grunt/Gulp and new Chromium V8 Debugger. 2 Key Eclipse Platform improvements include HiDPI support and autosave. JDT's Content Assist now highlights matched characters and provides substring completion. 3 New Eclipse PDT 4.0 release for PHP developers with complete support for PHP 7 and improved performance. 4 The Eclipse Automated Error Reporting client can now be integrated into any third-party Eclipse plug-in or standalone RCP application. 5 Eclipse users can now save settings, like Marketplace Favorites, with their Eclipse account. 6 New Projects: Eclipse Plug-ins for Gradle (first prime release), EGerrit, Paho, Andmore - Eclipse Android Tooling, EMF Parsley and Eclipse Tools for Cloud Foundry. 7 Improved support for Docker tooling. Resources Features Projects Donate Get your limited edition Neon T-Shirt! Let's get Social Press Release 2016/06/22 Eclipse Neon Release Train Now Available News 2016/06/22 Eclipse's annual release train focuses on JavaScript, PHP 2016/06/22 Eclipse Foundation Releases Neon Webinar Series Details can be found here, or register below. 001 Eclipse Neon and Beyond - The JDT Perspective Watch Now 002 JSDT 2.0 Watch Now 003 The Eclipse User Storage Service: Creating a Better User Experience for Developers Watch Now 004 Eclipse Tools for Cloud Foundry Overview Watch Now 005 What's New for PHP Developers in Eclipse Neon? Watch Now 006 Docker Tooling for Eclipse Neon Watch Now 007 Automated Error Reporting (AERI) now available for any Eclipse Plugin Watch Now #EclipseNeon #eclipseneon Tweets Back to the top Eclipse Foundation About us Contact Us Donate Governance Logo and Artwork Board of Directors Legal Privacy Policy Updated Terms of Use Updated Copyright Agent Eclipse Public License Legal Resources Useful Links Report a Bug Documentation How to Contribute Mailing Lists Forums Marketplace Other IDE and Tools Community of Projects Working Groups Copyright © 2016 The Eclipse Foundation. All Rights Reserved. Back to the top"	"null"	"null"	"— an -based IDE for Rust"	"true"
"IDEs"	""	"https://travis-ci.org/RustDT/RustDT"	"— an -based IDE for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— an -based IDE for Rust"	"true"
"IDEs"	"SolidOak"	"https://github.com/oakes/SolidOak"	"— a simple IDE for Rust, based on GTK+ and"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"679"	"36"	"30"	"GitHub - oakes/SolidOak: An IDE for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 36 Star 679 Fork 30 oakes/SolidOak Code Issues 20 Pull requests 1 Pulse Graphs An IDE for Rust https://sekao.net/solidoak/ 277 commits 1 branch 4 releases Fetching contributors Rust 98.1% Ruby 1.9% Rust Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit f59c8d6 Mar 19, 2016 oakes Merge pull request #52 from tbelaire/patch-1 … Update readme examples with --release Permalink Failed to load latest commit information. resources Update soak files Jan 15, 2016 src Use std::thread::sleep and update Cargo.lock Feb 7, 2016 .gitignore Add Cargo.lock Jun 4, 2015 .gitmodules Go back to https url Apr 20, 2015 Cargo.lock Use std::thread::sleep and update Cargo.lock Feb 7, 2016 Cargo.toml Update libc Jan 11, 2016 README.md Update readme examples with --release Mar 19, 2016 UNLICENSE Add copyright renunciation Oct 4, 2014 build.rs Simplify build script Feb 14, 2016 screenshot.png Update screenshot Mar 30, 2015 vte3.rb Vendor the vte3 formula Aug 7, 2015 README.md Introduction SolidOak is a simple IDE for Rust. See the website for binary releases. It has the following features: An embedded copy of Neovim as its text editor On first launch, it will create ~/.soak and ~/.soakrc (equivalent to ~/.vim and ~/.vimrc) It starts off in ""Easy Mode"" (locked in insert mode) for Vim newbies, but you can toggle it off An easy-to-use GUI written with gtk-rs Buttons for common editing actions and a project tree that stays in sync with Neovim You can bypass the GUI and run it as a console app by passing the -nw flag Autocomplete via Racer The binary releases come bundled with it, so no configuration is necessary Build Instructions Note: If neovim fails to build, try cloning it directly and running make libnvim to get more specific errors. Linux (apt-get) apt-get install libgtk-3-dev libglib2.0-dev libcairo2-dev libvte-2.90-dev apt-get install libtool autoconf automake cmake libncurses5-dev g++ pkg-config unzip cargo build --release Linux (yum) yum install gtk3-devel glib2-devel vte3-devel yum install autoconf automake cmake gcc gcc-c++ libtool ncurses-devel pkgconfig cargo build --release OS X (homebrew) brew install gtk+3 # NOTE: the next line must be run directly in this project, because it is a local file brew install vte3.rb brew install libtool automake cmake pkg-config gettext cargo build --release OS X (macports) port install gtk3 vte-2.90 port install libtool automake cmake pkgconfig gettext cargo build --release Windows is not supported To support Windows, we would need to get rgtk and neovim-rs to build for it. Additionally, we would need to find a replacement for all the Posix-specific functions being used in src/ffi.rs. Licensing All files that originate from this project are dedicated to the public domain. I would love pull requests, and will assume that they are also dedicated to the public domain. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/oakes/SolidOak"	"— a simple IDE for Rust, based on GTK+ and"	"true"
"IDEs"	"Neovim"	"https://github.com/neovim/neovim"	"— a simple IDE for Rust, based on GTK+ and"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"19314"	"957"	"1365"	"GitHub - neovim/neovim: Vim-fork focused on extensibility and agility. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 957 Star 19,314 Fork 1,365 neovim/neovim Code Issues 589 Pull requests 150 Wiki Pulse Graphs Vim-fork focused on extensibility and agility. https://salt.bountysource.com/teams/neovim 6,207 commits 1 branch 6 releases 255 contributors VimL 47.9% C 40.2% Lua 9.5% Python 0.9% CMake 0.5% PostScript 0.3% Other 0.7% VimL C Lua Python CMake PostScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 nightly Nothing to show New pull request Latest commit 4d4c925 Jul 14, 2016 justinmk Merge #5068 'justinmk/output_spec' Permalink Failed to load latest commit information. .ci Merge #4980 'Support legacy `:ruby` commands'. Jul 10, 2016 cmake Pass busted the path to the detected Lua interpreter Jul 13, 2016 config file: Add buffered reading and writing Jun 23, 2016 contrib Improve YCM contrib: Fix db path Jan 17, 2016 man 'termguicolors' #4690 May 10, 2016 runtime Merge pull request #5042 from bfredl/unnamedunnamedplus Jul 13, 2016 scripts vim-patch.sh: ignore coloring and pagers (#5030) Jul 10, 2016 src Merge pull request #5042 from bfredl/unnamedunnamedplus Jul 13, 2016 test Merge #5068 'justinmk/output_spec' Jul 14, 2016 third-party Update jemalloc to 4.2.1 (#4993) Jul 3, 2016 unicode Update unicode files Jun 26, 2016 .editorconfig add .editorconfig Feb 23, 2016 .gitignore .gitignore: cleanup Jun 6, 2016 .travis.yml ci: Remove MSAN build until it is fixed. (#4966) Jun 25, 2016 BACKERS.md Update backer URL Nov 11, 2015 CMakeLists.txt Pass busted the path to the detected Lua interpreter Jul 13, 2016 CONTRIBUTING.md doc: precision, concision, elision Jun 3, 2016 ISSUE_TEMPLATE.md doc: precision, concision, elision Jun 3, 2016 LICENSE LICENSE: add LuaJIT notice. #899 Jun 30, 2014 Makefile build: define `helptags` target which always runs. Jun 6, 2016 README.md doc: precision, concision, elision Jun 3, 2016 appveyor.yml Windows: Crank to MSVC 2015 on AppVeyor. #3254 Aug 27, 2015 README.md Website | Community | Wiki | Documentation | Mailing List | Twitter | Bountysource Neovim is a project that seeks to aggressively refactor Vim in order to: Simplify maintenance and encourage contributions Split the work between multiple developers Enable the implementation of new/modern user interfaces without any modifications to the core source Improve extensibility with a new plugin architecture For lots more details, see the wiki! What's been done so far Automatic history merge between multiple editor instances XDG-compliant configuration Embedded terminal emulator Asynchronous job control MessagePack remote API Pushdown automaton for state transitions See the progress page for a comprehensive list. What's being worked on now Port all IO to libuv Convert legacy tests to Lua tests VimL => Lua translator How do I get it? There is a formula for OSX/homebrew, a PKGBUILD for Arch Linux, RPM, deb, and more. See the wiki! License Neovim is licensed under the terms of the Apache 2.0 license, except for parts that were contributed under the Vim license. Contributions committed before b17d96 remain under the Vim license. Contributions committed after b17d96 are licensed under Apache 2.0 unless those contributions were copied from Vim (identified in the commit logs by the vim-patch token). See LICENSE for details. Vim is Charityware.  You can use and copy it as much as you like, but you are encouraged to make a donation for needy children in Uganda.  Please see the kcc section of the vim docs or visit the ICCF web site, available at these URLs:          http://iccf-holland.org/         http://www.vim.org/iccf/         http://www.iccf.nl/  You can also sponsor the development of Vim.  Vim sponsors can vote for features.  The money goes to Uganda anyway.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/neovim/neovim"	"— a simple IDE for Rust, based on GTK+ and"	"true"
"IDEs"	"Visual Studio Code"	"https://code.visualstudio.com/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"16037"	"996"	"2150"	"GitHub - Microsoft/vscode: Visual Studio Code Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 996 Star 16,037 Fork 2,150 Microsoft/vscode Code Issues 2,009 Pull requests 28 Wiki Pulse Graphs Visual Studio Code http://code.visualstudio.com 7,777 commits 31 branches 26 releases 133 contributors TypeScript 61.2% JavaScript 35.6% CSS 2.9% HTML 0.2% Shell 0.1% Groovy 0.0% TypeScript JavaScript CSS HTML Shell Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags aeschli/css-decorators-test aeschli/css-extension aeschli/external-injections alex/cursorHardHome andre/pickervariables aweinand/asyncsourcemaps ben/electron ben/tabsanimation cpp/customDebugViews dbaeumer/TS9125 dbaeumer/extensionLanguageCreation dbaeumer/localizationSupport dbaeumer/nls-package-json dbaeumer/nlsSupport dbaeumer/projectCompile dbaeumer/3849 dbaeumer/4613 dbaeumer/8509 joh/release/1.0.0 master noupdate release/1.2 release/1.3.0 sandy/workspace sandy081/editorCommands sandy081/errorlists standalone/0.1.1 tyriar/explorer_icons tyriar/launch_terminal_context_at tyriar/migrate-user-data-dir tyriar/run_selected_text_in_terminal Nothing to show 1.3.1 1.3.0 1.2.1 1.2.0 1.1.1 1.1.0 1.1.0-insider 1.0.0 0.10.15-insiders 0.10.14-insiders 0.10.13-insiders 0.10.12-insiders 0.10.11 0.10.11-insiders 0.10.10 0.10.10-insiders 0.10.9 0.10.8 0.10.8-insiders 0.10.7-insiders 0.10.6 0.10.5 0.10.3 0.10.2 0.10.1 0.10.1-extensionbuilders Nothing to show New pull request Latest commit 66f637a Jul 15, 2016 Tyriar Add note about Windows\sysnative in terminal settings … Part of #7095 Permalink Failed to load latest commit information. .vscode Revert ""revert changes to gulp files"" Jul 12, 2016 build Revert ""revert changes to gulp files"" Jul 12, 2016 extensions update node-debug Jul 15, 2016 i18n Import i18n files Jul 10, 2016 resources Add proper package replace metadata to deb control Jul 8, 2016 scripts back to ATOM_SHELL_INTERNAL_RUN_AS_NODE Jul 8, 2016 src Add note about Windows\sysnative in terminal settings Jul 15, 2016 test Revert recent wiki changes Apr 22, 2016 .editorconfig Add trim_trailing_whitespace to .editorconfig Apr 7, 2016 .eslintrc Revert ""revert changes to gulp files"" Jul 12, 2016 .gitignore Improve editor-distro gulp task May 31, 2016 .mention-bot update mention bot configuration Jul 11, 2016 .travis.yml travis: split compile & optimize Jun 16, 2016 CONTRIBUTING.md Fix typo Jul 15, 2016 LICENSE.txt Hello Code Nov 13, 2015 OSSREADME.json back to electron 0.37.6 Jul 8, 2016 README.md Replaced README image of product to reflect new UI Jul 6, 2016 ThirdPartyNotices.txt Clean extensions OSSREADME.json since the tool now can scan all npm-s… Jul 7, 2016 appveyor.yml back to ATOM_SHELL_INTERNAL_RUN_AS_NODE Jul 8, 2016 gulpfile.js Revert ""revert changes to gulp files"" Jul 12, 2016 issue_template.md Update issue_template.md Mar 14, 2016 npm-shrinkwrap.json fix version Jul 12, 2016 package.json fix 30% cpu spikes on OSX gulp watch Jul 12, 2016 product.json remove urls Jun 21, 2016 tslint.json Port noUnexternalizedStringsRule to TS 1.8.0. Add support to detect d… Feb 18, 2016 README.md Visual Studio Code - Open Source VS Code is a new type of tool that combines the simplicity of a code editor with what developers need for their core edit-build-debug cycle. Code provides comprehensive editing and debugging support, an extensibility model, and lightweight integration with existing tools. The vscode repository is where we do development and there are many ways you can participate in the project, for example: Submit bugs and feature requests and help us verify as they are checked in Review source code changes Review the documentation and make pull requests for anything from typos to new content Contributing If you are interested in fixing issues and contributing directly to the code base, please see the document How to Contribute, which covers the following: How to build and run from source The development workflow, including debugging and running tests Coding Guidelines Submitting pull requests This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Feedback Ask a question on Stack Overflow. Request a feature on User Voice. File a bug in GitHub Issues. Tweet us with other feedback. Related Projects Many of the core components and extensions to Code live in their own repositories on GitHub. For example, the node debug adapter and the mono debug adapter. For a complete list, please see the Related Projects page on our wiki. License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/vscode"	""	"true"
"Profiling"	"ellisonch/rust-stopwatch"	"https://github.com/ellisonch/rust-stopwatch"	"— a stopwatch library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"18"	"3"	"4"	"GitHub - ellisonch/rust-stopwatch: A stopwatch library for Rust.  Used to time things. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 18 Fork 4 ellisonch/rust-stopwatch Code Issues 1 Pull requests 0 Pulse Graphs A stopwatch library for Rust. Used to time things. 35 commits 1 branch 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 6a10852 May 13, 2016 ellisonch bumping Cargo.toml to 0.0.7 Permalink Failed to load latest commit information. src Replace time with std::time May 14, 2016 tests Replace time with std::time May 14, 2016 .gitignore updating .gitignore to ignore doc directory Dec 30, 2014 .travis.yml adding travis.yml to try and get rust CI Dec 30, 2014 Cargo.toml bumping Cargo.toml to 0.0.7 May 13, 2016 LICENSE.txt initial checkin Dec 30, 2014 README.md Update README.md Dec 30, 2014 README.md rust-stopwatch This is a simple module used to time things in Rust. Example extern crate stopwatch; use stopwatch::{Stopwatch}; // ... let sw = Stopwatch::start_new(); // do something that takes some time println!(""Thing took {}ms"", sw.elapsed_ms()); Methods fn new() -> Stopwatch fn start_new() -> Stopwatch fn start(&mut self) fn stop(&mut self) fn reset(&mut self) fn restart(&mut self) fn is_running(&self) -> bool fn elapsed(&self) -> Duration fn elapsed_ms(&self) -> i64 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ellisonch/rust-stopwatch"	"— a stopwatch library"	"true"
"Profiling"	""	"https://travis-ci.org/ellisonch/rust-stopwatch"	"— a stopwatch library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a stopwatch library"	"true"
"Profiling"	"mrhooray/torch"	"https://github.com/mrhooray/torch"	"— generates FlameGraphs based on DWARF Debug Info"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"68"	"1"	"3"	"GitHub - mrhooray/torch: Generate CPU FlameGraphs based on DWARF Debug Info Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 68 Fork 3 mrhooray/torch Code Issues 0 Pull requests 0 Pulse Graphs Generate CPU FlameGraphs based on DWARF Debug Info 8 commits 1 branch 0 releases Fetching contributors Perl 96.1% Shell 3.9% Perl Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. docs examples README.md flamegraph.pl init Aug 27, 2015 stackcollapse-perf.pl torch.sh README.md torch A script that glues perf CPU sampling and Brendan Gregg's visualizer to generate FlameGraphs. Requirements Usage Examples License Requirements Linux 3.7 and above Usage #./torch.sh -h Usage: ./torch.sh [options] pid  Options: -d, --duration <num>  duration of sampling in seconds [default: 10] -o, --output <file>   file to save flamegraph to [default: ./flamegraph.svg] -h, --help            this message  Examples Click graph to zoom A loop printing stuff (source) Tcp Echo Server (source) with coio-rs HTTP Hello World (source) with hyper License MIT CDDL Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mrhooray/torch"	"— generates FlameGraphs based on DWARF Debug Info"	"true"
"Profiling"	"TyOverby/flame"	"https://github.com/TyOverby/flame"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"106"	"4"	"7"	"GitHub - TyOverby/flame: A flamegraph profiling tool for rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 106 Fork 7 TyOverby/flame Code Issues 2 Pull requests 0 Pulse Graphs A flamegraph profiling tool for rust. 46 commits 3 branches 0 releases Fetching contributors Rust 61.6% TypeScript 16.5% JavaScript 13.9% CSS 4.9% HTML 3.1% Rust TypeScript JavaScript CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags frame gh-pages master Nothing to show Nothing to show New pull request Latest commit 9defdb7 May 31, 2016 TyOverby Merge branch 'master' of github.com:TyOverby/flame Permalink Failed to load latest commit information. examples add html renderer May 17, 2016 resources initial timeline work May 30, 2016 src fixed missing semicolon, added test May 29, 2016 tests fixed missing semicolon, added test May 29, 2016 .gitignore bump version May 25, 2016 .travis.yml sudo is required for travis May 18, 2016 Cargo.toml bump version May 25, 2016 readme.md Added missing ""use"" May 24, 2016 readme.md FLAME A cool flamegraph library for rust Flamegraphs are a great way to view profiling information. At a glance, they give you information about how much time your program spends in critical sections of your code giving you some much-needed insight into where optimizations may be needed. Unlike tools like perf which have the OS interrupt your running program repeatadly and reports on every function in your callstack, FLAME lets you choose what you want to see in the graph by adding performance instrumentation to your own code. Simply use any of FLAMEs APIs to annotate the start and end of a block code that you want timing information from, and FLAME will organize these timings hierarchically. Docs Here's an example of how to use some of FLAMEs APIs: extern crate flame;  use std::fs::File;  fn main() {     // Manual `start` and `end`     flame::start(""read file"");     let x = read_a_file();     flame::end(""read file"");      // Time the execution of a closure.  (the result of the closure is returned)     let y = flame::span_of(""database query"", || query_database());      // Time the execution of a block by creating a guard.     let z = {         let _guard = flame::start_guard(""cpu-heavy calculation"");         cpu_heavy_operations_1();         // Notes can be used to annotate a particular instant in time.         flame::note(""something interesting happened"");         cpu_heavy_operations_2()     };      // Dump the report to disk     flame::dump_html(&mut File::create(""flame-graph.html"").unwrap()).unwrap();     // Or read and process the data yourself!     let frames = flame::frames();     println!(""{} {} {}"", x, y, z); } And here's a screenshot of a flamegraph produced by dump_html (from a different project): llogiq has created flamer, a compiler plugin that automatically inserts FLAME instrumentation into annotated functions allowing you to write code like #[flame] fn this_function_is_profiled() {     ... } So if you are using a nightly version of rust, check it out; flamer is probably the easiest way to use FLAME! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TyOverby/flame"	"—"	"true"
"Profiling"	""	"https://travis-ci.org/TyOverby/flame"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Testing"	"testing"	"https://crates.io/keywords/testing"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"—"	"true"
"Testing"	"BurntSushi/quickcheck"	"https://github.com/BurntSushi/quickcheck"	"[] — a Rust implementation of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"384"	"21"	"37"	"GitHub - BurntSushi/quickcheck: QuickCheck for Rust (with shrinking). Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 384 Fork 37 BurntSushi/quickcheck Code Issues 23 Pull requests 3 Pulse Graphs QuickCheck for Rust (with shrinking). 455 commits 2 branches 55 releases 37 contributors Rust 99.4% Other 0.6% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix-progress master Nothing to show 0.2.27 0.2.26 0.2.25 0.2.24 0.2.23 0.2.22 0.2.21 0.2.20 0.2.19 0.2.18 0.2.17 0.2.16 0.2.15 0.2.14 0.2.13 0.2.12 0.2.11 0.2.10 0.2.9 0.2.6 0.2.5 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 0.1.40 0.1.39 0.1.38 0.1.37 0.1.36 0.1.35 0.1.34 0.1.33 0.1.32 0.1.31 0.1.30 0.1.29 0.1.28 0.1.27 0.1.26 0.1.25 0.1.24 0.1.23 0.1.22 0.1.21 0.1.20 0.1.19 0.1.11 0.1.8 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 Nothing to show New pull request Latest commit a8df162 Jul 10, 2016 BurntSushi quickcheck_macros 0.2.27 Permalink Failed to load latest commit information. examples Partially revert changes. Oct 14, 2015 quickcheck_macros quickcheck_macros 0.2.27 Jul 10, 2016 src Merge pull request #128 from sgrif/sg-stable-time2 Mar 13, 2016 .gitignore Cargo.lock ain't for libraries. Sep 9, 2014 .travis.yml whitespace May 6, 2015 COPYING dual licensed under MIT and UNLICENSE Apr 15, 2015 Cargo.toml 0.2.27 Mar 13, 2016 LICENSE-MIT dual licensed under MIT and UNLICENSE Apr 15, 2015 Makefile Get rid of ancient Makefile. May 1, 2015 README.md Use isize in README examples May 10, 2016 UNLICENSE First real commit. Substantial (but shitty) work done on shrinking. Mar 9, 2014 ctags.rust ctags support Mar 16, 2014 session.vim Completed transition to Vec type. Mar 23, 2014 README.md QuickCheck is a way to do property based testing using randomly generated input. This crate comes with the ability to randomly generate and shrink integers, floats, tuples, booleans, lists, strings, options and results. All QuickCheck needs is a property function—it will then randomly generate inputs to that function and call the property for each set of inputs. If the property fails (whether by a runtime error like index out-of-bounds or by not satisfying your property), the inputs are ""shrunk"" to find a smaller counter-example. The shrinking strategies for lists and numbers use a binary search to cover the input space quickly. (It should be the same strategy used in Koen Claessen's QuickCheck for Haskell.) Dual-licensed under MIT or the UNLICENSE. Documentation The API is fully documented: http://burntsushi.net/rustdoc/quickcheck/. Simple example Here's a complete working program that tests a function that reverses a vector: extern crate quickcheck;  use quickcheck::quickcheck;  fn reverse<T: Clone>(xs: &[T]) -> Vec<T> {     let mut rev = vec!();     for x in xs.iter() {         rev.insert(0, x.clone())     }     rev }  fn main() {     fn prop(xs: Vec<isize>) -> bool {         xs == reverse(&reverse(&xs))     }     quickcheck(prop as fn(Vec<isize>) -> bool); } The #[quickcheck] attribute To make it easier to write QuickCheck tests, the #[quickcheck] attribute will convert a property function into a #[test] function. To use the #[quickcheck] attribute, you must enable the plugin feature and import the quickcheck_macros crate as a syntax extension: #![feature(plugin)] #![plugin(quickcheck_macros)]  #[cfg(test)] extern crate quickcheck;  #[cfg(test)] mod tests {     fn reverse<T: Clone>(xs: &[T]) -> Vec<T> {         let mut rev = vec!();         for x in xs {             rev.insert(0, x.clone())         }         rev     }      #[quickcheck]     fn double_reversal_is_identity(xs: Vec<isize>) -> bool {         xs == reverse(&reverse(&xs))     } } Installation quickcheck is on crates.io, so you can include it in your project like so: [dependencies] quickcheck = ""0.2"" If you're only using quickcheck in your test code, then you can add it as a development dependency instead: [dev-dependencies] quickcheck = ""0.2"" If you want to use the #[quickcheck] attribute, then add quickcheck_macros [dev-dependencies] quickcheck = ""0.2"" quickcheck_macros = ""0.2"" and only enable the quickcheck_macros plugin for the test build #![cfg_attr(test, feature(plugin))] #![cfg_attr(test, plugin(quickcheck_macros))] Note that the #[quickcheck] macro will not work when Rust 1.0 stable is released, although it will continue to work on the nightlies. N.B. When using quickcheck (either directly or via the attributes), RUST_LOG=quickcheck enables info! so that it shows useful output (like the number of tests passed). This is not needed to show witnesses for failures. Discarding test results (or, properties are polymorphic!) Sometimes you want to test a property that only holds for a subset of the possible inputs, so that when your property is given an input that is outside of that subset, you'd discard it. In particular, the property should neither pass nor fail on inputs outside of the subset you want to test. But properties return boolean values—which either indicate pass or fail. To fix this, we need to take a step back and look at the type of the quickcheck function: pub fn quickcheck<A: Testable>(f: A) {     // elided } So quickcheck can test any value with a type that satisfies the Testable trait. Great, so what is this Testable business? pub trait Testable {     fn result<G: Gen>(&self, &mut G) -> TestResult; } This trait states that a type is testable if it can produce a TestResult given a source of randomness. (A TestResult stores information about the results of a test, like whether it passed, failed or has been discarded.) Sure enough, bool satisfies the Testable trait: impl Testable for bool {     fn result<G: Gen>(&self, _: &mut G) -> TestResult {         TestResult::from_bool(*self)     } } But in the example, we gave a function to quickcheck. Yes, functions can satisfy Testable too! impl<A: Arbitrary + Debug, B: Testable> Testable for fn(A) -> B {     fn result<G: Gen>(&self, g: &mut G) -> TestResult {         // elided     } } Which says that a function satisfies Testable if and only if it has a single parameter type (whose values can be randomly generated and shrunk) and returns any type (that also satisfies Testable). So a function with type fn(usize) -> bool satisfies Testable since usize satisfies Arbitrary and bool satisfies Testable. So to discard a test, we need to return something other than bool. What if we just returned a TestResult directly? That should work, but we'll need to make sure TestResult satisfies Testable: impl Testable for TestResult {     fn result<G: Gen>(&self, _: &mut G) -> TestResult { self.clone() } } Now we can test functions that return a TestResult directly. As an example, let's test our reverse function to make sure that the reverse of a vector of length 1 is equal to the vector itself. fn prop(xs: Vec<isize>) -> TestResult {     if xs.len() != 1 {         return TestResult::discard()     }     TestResult::from_bool(xs == reverse(&xs)) } quickcheck(prop as fn(Vec<isize>) -> TestResult); (A full working program for this example is in examples/reverse_single.rs.) So now our property returns a TestResult, which allows us to encode a bit more information. There are a few more convenience functions defined for the TestResult type. For example, we can't just return a bool, so we convert a bool value to a TestResult. (The ability to discard tests allows you to get similar functionality as Haskell's ==> combinator.) N.B. Since discarding a test means it neither passes nor fails, quickcheck will try to replace the discarded test with a fresh one. However, if your condition is seldom met, it's possible that quickcheck will have to settle for running fewer tests than usual. By default, if quickcheck can't find 100 valid tests after trying 10,000 times, then it will give up. This parameter may be changed using quickcheck_config. Shrinking Shrinking is a crucial part of QuickCheck that simplifies counter-examples for your properties automatically. For example, if you erroneously defined a function for reversing vectors as: (my apologies for the contrived example) fn reverse<T: Clone>(xs: &[T]) -> Vec<T> {     let mut rev = vec![];     for i in 1..xs.len() {         rev.insert(0, xs[i].clone())     }     rev } And a property to test that xs == reverse(reverse(xs)): fn prop(xs: Vec<isize>) -> bool {     xs == reverse(&reverse(&xs)) } quickcheck(prop as fn(Vec<isize>) -> bool); Then without shrinking, you might get a counter-example like: [quickcheck] TEST FAILED. Arguments: ([-17, 13, -12, 17, -8, -10, 15, -19, -19, -9, 11, -5, 1, 19, -16, 6])  Which is pretty mysterious. But with shrinking enabled, you're nearly guaranteed to get this counter-example every time: [quickcheck] TEST FAILED. Arguments: ([0])  Which is going to be much easier to debug. Case study: The Sieve of Eratosthenes The Sieve of Eratosthenes is a simple and elegant way to find all primes less than or equal to N. Briefly, the algorithm works by allocating an array with N slots containing booleans. Slots marked with false correspond to prime numbers (or numbers not known to be prime while building the sieve) and slots marked with true are known to not be prime. For each n, all of its multiples in this array are marked as true. When all n have been checked, the numbers marked false are returned as the primes. As you might imagine, there's a lot of potential for off-by-one errors, which makes it ideal for randomized testing. So let's take a look at my implementation and see if we can spot the bug: fn sieve(n: usize) -> Vec<usize> {     if n <= 1 {         return vec![];     }      let mut marked = vec![false; n+1];     marked[0] = true;     marked[1] = true;     marked[2] = true;     for p in 2..n {         for i in (2*p..n).filter(|&n| n % p == 0) {             marked[i] = true;         }     }     marked.iter()           .enumerate()           .filter_map(|(i, &m)| if m { None } else { Some(i) })           .collect() } Let's try it on a few inputs by hand: sieve(3) => [2, 3] sieve(5) => [2, 3, 5] sieve(8) => [2, 3, 5, 7, 8] # !!!  Something has gone wrong! But where? The bug is rather subtle, but it's an easy one to make. It's OK if you can't spot it, because we're going to use QuickCheck to help us track it down. Even before looking at some example outputs, it's good to try and come up with some properties that are always satisfiable by the output of the function. An obvious one for the prime number sieve is to check if all numbers returned are prime. For that, we'll need an is_prime function: fn is_prime(n: usize) -> bool {     n != 0 && n != 1 && (2..).take_while(|i| i*i <= n).all(|i| n % i != 0) } All this is doing is checking to see if any number in [2, sqrt(n)] divides n with base cases for 0 and 1. Now we can write our QuickCheck property: fn prop_all_prime(n: usize) -> bool {     sieve(n).into_iter().all(is_prime) } And finally, we need to invoke quickcheck with our property: fn main() {     quickcheck(prop_all_prime as fn(usize) -> bool); } A fully working source file with this code is in examples/sieve.rs. The output of running this program has this message: [quickcheck] TEST FAILED. Arguments: (4)  Which says that sieve failed the prop_all_prime test when given n = 4. Because of shrinking, it was able to find a (hopefully) minimal counter-example for our property. With such a short counter-example, it's hopefully a bit easier to narrow down where the bug is. Since 4 is returned, it's likely never marked as being not prime. Since 4 is a multiple of 2, its slot should be marked as true when p = 2 on these lines: for i in (2*p..n).filter(|&n| n % p == 0) {     marked[i] = true; } Ah! But does the .. (range) operator include n? Nope! This particular operator is a half-open interval. A 2*p..n range will never yield 4 when n = 4. When we change this to 2*p..n+1, all tests pass. In addition, if our bug happened to result in an index out-of-bounds error, then quickcheck can handle it just like any other failure—including shrinking on failures caused by runtime errors. But hold on... we're not done yet. Right now, our property tests that all the numbers returned by sieve are prime but it doesn't test if the list is complete. It does not ensure that all the primes between 0 and n are found. Here's a property that is more comprehensive: fn prop_prime_iff_in_the_sieve(n: usize) -> bool {     sieve(n) == (0..(n + 1)).filter(|&i| is_prime(i)).collect::<Vec<_>>() } It tests that for each number between 0 and n, inclusive, the naive primality test yields the same result as the sieve. Now, if we run it: fn main() {     quickcheck(prop_all_prime as fn(usize) -> bool);     quickcheck(prop_prime_iff_in_the_sieve as fn(usize) -> bool); } we see that it fails immediately for value n = 2. [quickcheck] TEST FAILED. Arguments: (2)  If we inspect sieve() once again, we see that we mistakenly mark 2 as non-prime. Removing the line marked[2] = true; results in both properties passing. What's not in this port of QuickCheck? I think I've captured the key features, but there are still things missing: As of now, only functions with 4 or fewer parameters can be quickchecked. This limitation can be lifted to some N, but requires an implementation for each n of the Testable trait. Functions that fail because of a stack overflow are not caught by QuickCheck. Therefore, such failures will not have a witness attached to them. (I'd like to fix this, but I don't know how.) Coarbitrary does not exist in any form in this package. I think it's possible; I just haven't gotten around to it yet. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BurntSushi/quickcheck"	"[] — a Rust implementation of"	"true"
"Testing"	"quickcheck"	"https://crates.io/crates/quickcheck"	"[] — a Rust implementation of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — a Rust implementation of"	"true"
"Testing"	"QuickCheck"	"https://wiki.haskell.org/Introduction_to_QuickCheck1"	"[] — a Rust implementation of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Introduction to QuickCheck1 - HaskellWiki Personal tools Home Log in   Views Page Discussion View source History Introduction to QuickCheck1 From HaskellWiki Jump to: navigation, search A quick introduction to QuickCheck, and testing Haskell code. See Introduction to QuickCheck2 for the QC2 version Contents 1 Motivation 2 Keeping things pure 3 Testing with QuickCheck 4 Testing take5 5 Another property 6 Coverage 7 Going further 1 Motivation In September 2006, Bruno Martínez asked the following question: -- I've written a function that looks similar to this one   getList = find 5 where      find 0 = return []      find n = do        ch <- getChar        if ch `elem` ['a'..'e'] then do              tl <- find (n-1)              return (ch : tl) else            find n   -- I want to test this function, without hitting the filesystem.  In C++ I -- would use a istringstream.  I couldn't find a function that returns a -- Handle from a String.  The closer thing that may work that I could find -- was making a pipe and converting the file descriptor.  Can I simplify -- that function to take it out of the IO monad? So the problem is: how to effectively test this function in Haskell? The solution we turn to is refactoring and QuickCheck. 2 Keeping things pure The reason your getList is hard to test, is that the side effecting monadic code is mixed in with the pure computation, making it difficult to test without moving entirely into a ""black box"" IO-based testing model. Such a mixture is not good for reasoning about code. Let's untangle that, and then test the referentially transparent parts simply with QuickCheck. We can take advantage of lazy IO firstly, to avoid all the unpleasant low-level IO handling. So the first step is to factor out the IO part of the function into a thin ""skin"" layer: -- A thin monadic skin layer getList :: IO [Char] getList = fmap take5 getContents   -- The actual worker take5 :: [Char] -> [Char] take5 = take 5 . filter (`elem` ['a'..'e']) 3 Testing with QuickCheck Now we can test the 'guts' of the algorithm, the take5 function, in isolation. Let's use QuickCheck. First we need an Arbitrary instance for the Char type -- this takes care of generating random Chars for us to test with. I'll restrict it to a range of nice chars just for simplicity: import Data.Char import Test.QuickCheck   instance Arbitrary Char where     arbitrary     = choose ('\32', '\128')     coarbitrary c = variant (ord c `rem` 4) Let's fire up GHCi (or Hugs) and try some generic properties (its nice that we can use the QuickCheck testing framework directly from the Haskell prompt). An easy one first, a [Char] is equal to itself: *A> quickCheck ((\s -> s == s) :: [Char] -> Bool) OK, passed 100 tests. What just happened? QuickCheck generated 100 random [Char] values, and applied our property, checking the result was True for all cases. QuickCheck generated the test sets for us! A more interesting property now: reversing twice is the identity: *A> quickCheck ((\s -> (reverse.reverse) s == s) :: [Char] -> Bool) OK, passed 100 tests. Great! 4 Testing take5 The first step to testing with QuickCheck is to work out some properties that are true of the function, for all inputs. That is, we need to find invariants. A simple invariant might be:      So let's write that as a QuickCheck property: \s -> length (take5 s) == 5 Which we can then run in QuickCheck as: *A> quickCheck (\s -> length (take5 s) == 5) Falsifiable, after 0 tests: """" Ah! QuickCheck caught us out. If the input string contains less than 5 filterable characters, the resulting string will be less than 5 characters long. So let's weaken the property a bit:      That is, take5 returns a string of at most 5 characters long. Let's test this: *A> quickCheck (\s -> length (take5 s) <= 5) OK, passed 100 tests. Good! 5 Another property Another thing to check would be that the correct characters are returned. That is, for all returned characters, those characters are members of the set ['a','b','c','d','e']. We can specify that as: And in QuickCheck: *A> quickCheck (\s -> all (`elem` ['a'..'e']) (take5 s)) OK, passed 100 tests. Excellent. So we can have some confidence that the function neither returns strings that are too long, nor includes invalid characters. 6 Coverage One issue with the default QuickCheck configuration, when testing [Char], is that the standard 100 tests isn't enough for our situation. In fact, QuickCheck never generates a String greater than 5 characters long, when using the supplied Arbitrary instance for Char! We can confirm this: *A> quickCheck (\s -> length (take5 s) < 5) OK, passed 100 tests. QuickCheck wastes its time generating different Chars, when what we really need is longer strings. One solution to this is to modify QuickCheck's default configuration to test deeper: deepCheck p = check (defaultConfig { configMaxTest = 10000}) p This instructs the system to find at least 10000 test cases before concluding that all is well. Let's check that it is generating longer strings: *A> deepCheck (\s -> length (take5 s) < 5) Falsifiable, after 125 tests: "";:iD^*NNi~Y\\RegMob\DEL@krsx/=dcf7kub|EQi\DELD*"" We can check the test data QuickCheck is generating using the 'verboseCheck' hook. Here, testing on integers lists: *A> verboseCheck (\s -> length s < 5) 0: [] 1: [0] 2: [] 3: [] 4: [] 5: [1,2,1,1] 6: [2] 7: [-2,4,-4,0,0] Falsifiable, after 7 tests: [-2,4,-4,0,0] 7 Going further QuickCheck is effectively an embedded domain specific language for testing Haskell code, and allows for much more complex properties than those you've seen here to be tested. Some sources for further reading are: The QuickCheck source QuickCheck Library documentation QuickCheck v1 Manual A large testsuite of QuickCheck code Tutorial: QuickCheck as a test set generator Tutorial: QuickCheck / GADT More research on correctness and testing in Haskell 2012 Blog article: Code testing in Haskell 2009 Blog article: some ideas for practical QuickCheck 2004 Paper QuickCheck: Specification-based Random Testing, Koen Claessen. Presentation at Summer Institute on Trends in Testing: Theory, Techniques and Tools, August 2004. 2003 Paper Specification Based Testing with QuickCheck, Koen Claessen and John Hughes. In Jeremy Gibbons and Oege de Moor (eds.), The Fun of Programming, Cornerstones of Computing, pp. 17--40, Palgrave, 2003. 2002 Paper Testing Monadic Programs with QuickCheck, Koen Claessen, John Hughes. SIGPLAN Notices 37(12): 47-59 (2002): 2000 Paper QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs, Koen Claessen and John Hughes. In Proc. of International Conference on Functional Programming (ICFP), ACM SIGPLAN, 2000. Note, QuickCheck doesn't need to just be an embedded domain specific language for testing Haskell code. By making instances of Arbitrary for FFI types you can use Haskell and QuickCheck to check code in other languages. Retrieved from ""https://wiki.haskell.org/index.php?title=Introduction_to_QuickCheck1&oldid=55249"" Category: Tutorials Navigation Haskell Wiki community Recent changes Random page Tools What links here Related changes Special pages Printable version Permanent link This page was last modified on 13 January 2013, at 19:54. Recent content is available under a simple permissive license. Privacy policy About HaskellWiki Disclaimers"	"null"	"null"	"[] — a Rust implementation of"	"true"
"Testing"	""	"https://travis-ci.org/BurntSushi/quickcheck"	"[] — a Rust implementation of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — a Rust implementation of"	"true"
"Testing"	"farcaller/shiny"	"https://github.com/farcaller/shiny"	"— a fancy syntax similar to Ruby's Rspec or Objective-C' kiwi"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"75"	"5"	"8"	"GitHub - farcaller/shiny: a shiny test framework for rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 75 Fork 8 farcaller/shiny Code Issues 0 Pull requests 0 Pulse Graphs a shiny test framework for rust 33 commits 1 branch 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 0203c63 May 14, 2016 dylanmckay committed with farcaller Update to current Rust nightly (#10) Permalink Failed to load latest commit information. src Update to current Rust nightly (#10) May 14, 2016 tests Updates to `rustc 1.0.0-nightly (3ef8ff1f8 2015-02-12 00:38:24 +0000)` Feb 14, 2015 .gitignore Ignore Cargo.lock Sep 15, 2015 .travis.yml Only run on nightly Sep 15, 2015 Cargo.toml version bump Jan 4, 2015 LICENSE Added readme and license Jul 22, 2014 README.md Typos and minor grammar fixing Sep 20, 2015 README.md Ooh, shiny! Shiny makes you less distracted with copying over initialization code in test cases. It also has a fancy syntax similar to Ruby's RSpec or Objective-C's Kiwi. Installation Install in the usual way with cargo. Usage Add the shiny crate: #![feature(plugin)] #![plugin(shiny)] Write your shiny test case: #[cfg(test)] mod test {   describe!(     before_each {       let awesome = true;     }      it ""is awesome"" {       assert!(awesome);     }      it ""injects before_each into all test cases"" {       let still_awesome = awesome;       assert!(still_awesome);     }   ) } All the items from before_each are inserted as-is into each generated test case function. Mind the final semicolon in before_each block! TODO add support for context to do recursive prologue injections better filtering for test case name License Shiny is distributed under Apache-2.0, see LICENSE for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/farcaller/shiny"	"— a fancy syntax similar to Ruby's Rspec or Objective-C' kiwi"	"true"
"Testing"	""	"https://travis-ci.org/farcaller/shiny"	"— a fancy syntax similar to Ruby's Rspec or Objective-C' kiwi"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a fancy syntax similar to Ruby's Rspec or Objective-C' kiwi"	"true"
"Testing"	"frewsxcv/afl.rs"	"https://github.com/frewsxcv/afl.rs"	"— a Rust fuzzer, using"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"402"	"24"	"22"	"GitHub - frewsxcv/afl.rs: Fuzzing Rust code with american-fuzzy-lop Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 402 Fork 22 frewsxcv/afl.rs Code Issues 12 Pull requests 3 Wiki Pulse Graphs Fuzzing Rust code with american-fuzzy-lop 176 commits 4 branches 4 releases Fetching contributors C 85.0% Shell 7.6% Makefile 2.5% C++ 2.1% Rust 1.6% HTML 0.8% Other 0.4% C Shell Makefile C++ Rust HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags changes clang master new-api Nothing to show 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit baea74f Jun 30, 2016 frewsxcv committed on GitHub Merge pull request #71 from frewsxcv/jpeg-decoder … Add jpeg-decoder trophy. Permalink Failed to load latest commit information. afl-plugin Prepare for 0.1.3 release. May 28, 2016 afl-sys Remove duplicated word in a comment Jun 20, 2016 ci LLVM apt is broken, switch to Docker for CI for now. Jun 4, 2016 examples Remove usage of deprecated (and removed) raw::Slice struct. Jun 4, 2016 src Disable the forkserver for now. Jun 4, 2016 vagrant Remove unnecessary dep install in Vagrantfile. Apr 2, 2016 .gitignore Initial commit Apr 8, 2015 .travis.yml LLVM apt is broken, switch to Docker for CI for now. Jun 4, 2016 CHANGES.md Prepare for 0.1.3 release. May 29, 2016 Cargo.toml Prepare for 0.1.3 release. May 29, 2016 LICENSE Initial commit Apr 9, 2015 README.md Add jpeg-decoder trophy. Jun 29, 2016 build.rs Update to afl-1.77b May 16, 2015 README.md afl.rs Fuzzing Rust code with american fuzzy lop (AFL) Screen recording of AFL running on Rust code. The code under test is examples/hello.rs in this repository. What is it? Fuzz testing is a software testing technique used to find security and stability issues by providing pseudo-random data as input to the software. American fuzzy lop is a popular, effective, and modern fuzz testing tool. This library, afl.rs, allows one to run AFL on code written in the Rust programming language. Requirements Nightly build of Rust from any time after January 24, 2016 (this issue prevented compatibility with previous builds of Rust) C++ compiler that supports C++11 afl.rs needs to compile against a version of LLVM that matches rustc's. The easy solution (if you can wait on a slow build) is to build rustc from source and put it in your PATH. Then afl.rs's build script will find llvm-config automatically. Otherwise, the environment variable LLVM_CONFIG should hold the path to llvm-config when you build afl.rs. Because of these relatively strict requirements, there is a Vagrantfile provided that assists in bootstraping an afl.rs compatible environment. View the README in the vagrant/ directory for more information. NOTE: It is known that requiring one to compile Rust greatly increases the barrier to use afl.rs. It will soon be the case this requirement will be lifted and the setup instructions will be greatly simplified. Stay tuned! Using it First, add this project as a Cargo dependency: [dependencies] afl = ""0.1"" afl-plugin = ""0.1"" Then you can add afl instrumentation to one or more crates: #![feature(plugin)] #![plugin(afl_plugin)] You will also need a test executable that exercises the instrumented functions, in a deterministic way based on input from stdin. This executable should link the afl run-time library: extern crate afl; This will produce a binary that you can pass to afl-fuzz in the usual manner. C++ code will be compiled by default with g++, though one can specify a different C++ compiler by setting the CXX environment variable to point to a different compiler binary. Treat panics as crashes To look for logic errors in safe Rust code, use the no-landing-pads rustc flag upon compilation of the AFL entrypoint. This causes the fuzzer to treat any Rust panic as a crash. Examples of usage: rustc -Z no-landing-pads cargo rustc -- -Z no-landing-pads Deferred init If your program has a slow set-up phase that does not depend on the input data, you can set AFL_DEFER_FORKSRV=1 for a substantial speed-up, provided that you insert a call to afl::init() after the set-up and before any dependence on input. There are various other caveats, described in the section ""Bonus feature: deferred instrumentation"" in llvm_mode/README.llvm distributed with afl. See also examples/deferred-init.rs in this repository. Conditional compilation afl instrumentation adds some run-time overhead, so it's a good candidate for conditional compilation, perhaps through a Cargo feature: # You may need to add `optional = true` to the above dependencies. [features] afl = [""afl-plugin"", ""afl""] // Active only with `cargo [...] --feature afl` #![cfg_attr(feature = ""afl"", feature(plugin))] #![cfg_attr(feature = ""afl"", plugin(afl_plugin))] AFL configuration See the afl documentation for other configuration variables. Some of these are set at compile time in config.h. For the most part they only affect afl-fuzz itself, and will work fine with this library. However, if you change SHM_ENV_VAR, MAP_SIZE, or FORKSRV_FD, you should update this library's src/config.h to match. Upcoming changes ✨ Logo ✨ Simpler API Don't require users to compile Rust Don't require users to have AFL installed (utilize afl-sys crate) Trophy case brotli-rs: #2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12 flac: #3 httparse: #9 image: #414, #473, #474, #477 jpeg-decoder: #38 mp4parse-rust: #2, #4, #5, #6 rustc: #24275, #24276 rust-url: #108 regex: #84 rust-asn1: #32 rustc-serialize: #109, #110 serde: #75, #77, #82 tar-rs: #23 xml-rs: #93 Logic errors in tendril and its html5ever integration These bugs aren't nearly as serious as the memory-safety issues afl has discovered in C and C++ projects. That's because Rust is memory-safe by default, but also because not many people have tried afl.rs yet! Over time we will update this section with the most interesting bugs, whether they're logic errors or memory-safety problems arising from unsafe code. Pull requests are welcome! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/frewsxcv/afl.rs"	"— a Rust fuzzer, using"	"true"
"Testing"	"AFL"	"http://lcamtuf.coredump.cx/afl/"	"— a Rust fuzzer, using"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"194"	"21"	"36"	"GitHub - ivanfratric/winafl: A fork of AFL for fuzzing Windows binaries Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 194 Fork 36 ivanfratric/winafl Code Issues 0 Pull requests 0 Pulse Graphs A fork of AFL for fuzzing Windows binaries 4 commits 1 branch 0 releases 2 contributors C 98.2% C++ 1.4% Other 0.4% C C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit a8108e8 Jul 8, 2016 ivanfratric committed on GitHub Update README Permalink Failed to load latest commit information. afl_docs First commit Jul 7, 2016 bin32 First commit Jul 7, 2016 bin64 First commit Jul 7, 2016 testcases First commit Jul 7, 2016 CMakeLists.txt First commit Jul 7, 2016 LICENSE First commit Jul 7, 2016 README Update README Jul 8, 2016 afl-fuzz.c First commit Jul 7, 2016 alloc-inl.h First commit Jul 7, 2016 config.h First commit Jul 7, 2016 debug.h First commit Jul 7, 2016 gdiplus.cpp First commit Jul 7, 2016 hash.h First commit Jul 7, 2016 modules.c First commit Jul 7, 2016 modules.h First commit Jul 7, 2016 test.cpp First commit Jul 7, 2016 types.h First commit Jul 7, 2016 utils.h First commit Jul 7, 2016 winafl.c First commit Jul 7, 2016 README ====== WinAFL ======     Original AFL code written by Michal Zalewski <lcamtuf@google.com>     Windows fork written and maintained by Ivan Fratric <ifratric@google.com>     Copyright 2016 Google Inc. All Rights Reserved.     Licensed under the Apache License, Version 2.0 (the ""License"");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at         http://www.apache.org/licenses/LICENSE-2.0     Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an ""AS IS"" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.   1) Background -------------  AFL is a popular fuzzing tool for coverage-guided fuzzing. The tool combines fast target execution with clever heuristics to find new execution paths in the target binary. It has been successfully used to find a large number of vulnerabilities in real products. For more info about the original project, please refer to the original documentation at  http://lcamtuf.coredump.cx/afl/  Unfortunately, the original AFL does not work on Windows due to very *nix-specific design (e.g. instrumentation, forkserver etc). This project is a fork of AFL that uses different instrumentation approach which works on Windows even for black box binary fuzzing.  2) The WinAFL approach ----------------------  Instead of instrumenting the code at compilation time, WinAFL relies on dynamic instrumentation using DynamoRIO (http://dynamorio.org/) to measure and extract target coverage. This approach has been found to introduce an overhead about 2x compared to the native execution speed, which is comparable to the original AFL in binary instrumentation mode.  To improve the process startup time, WinAFL relies heavily on persistant fuzzing mode, that is, executing multiple input samples without restarting the target process. This is accomplished by selecting a target function (that the user wants to fuzz) and instrumenting it so that it runs in a loop.  3) Building WinAFL ------------------  1. Download and build DynamoRio sources or download DynamoRio Windows binary package from https://github.com/DynamoRIO/dynamorio/wiki/Downloads   2. Open Visual Studio Command Prompt (or Visual Studio x64 Win64 Command Prompt if you want a 64-bit build). Note that you need a 64-bit winafl.dll build if you are fuzzing 64-bit targets and vice versa.  3. Go to the directory containing the source  4. Type the following commands. Modify the -DDynamoRIO_DIR flag to point to the location of your DynamoRIO cmake files (relative to the source directory).  For a 32-bit build:  mkdir build32 cd build32 cmake .. -DDynamoRIO_DIR=..\path\to\DynamoRIO\cmake cmake --build . --config Release  For a 64-bit build:  mkdir build64 cd build64 cmake -G""Visual Studio 10 Win64"" .. -DDynamoRIO_DIR=..\path\to\DynamoRIO\cmake cmake --build . --config Release  4) Using WinAFL ---------------  Note: If you are using pre-built binaries you'll need to download DynamoRIO release 6.1.1-3 from https://github.com/DynamoRIO/dynamorio/wiki/Downloads. If you built WinAFL from source, you can use whatever version of DynamoRIO you used to build WinAFL.  The command line for afl-fuzz on Windows is different than on Linux. Instead of  %s [ afl options ] -- [instrumentation options] --   it now looks like this  afl-fuzz [afl options] -- [instrumentation options] -- target_cmd_line  The followin afl-fuzz options are supported:    -i dir        - input directory with test cases   -o dir        - output directory for fuzzer findings   -D dir        - directory containing DynamoRIO binaries (drrun, drconfig)   -t msec       - timeout for each run   -f file       - location read by the fuzzed program   -M \\ -S id   - distributed mode   -x dir        - optional fuzzer dictionary  Please refer to the original AFL documentation for more info on these flags.  The following instrumentation options are used    -covtype         - the type of coverage being recorded. Supported options are                      bb (basic block) or edge (default).    -coverage_module - module for which to record coverage. Multiple module flags                      are supported.    -target_module   - module which contains the target function to be fuzzed.                      Either -target_method or -target_offset need to be                      specified together with this option.    -target_method   - name of the method to fuzz in persistent mode. A symbol                      for the method needs to be exported for this to work.                      Otherwise use -target_offset instead.    -target_offset   - offset of the method to fuzz from the start of the module.    -fuzz_iterations - Maximum nuber of iterations for the target function to run                      before restarting the target process.    -nargs           - Number of arguments the fuzzed method takes. This is used                      to save/restore the arguments between runs.    -debug           - Debug mode. Does not try to connect to the server. Outputs                      a log file containing loaded modules, opened files and                      coverage infrormation.    -logdir          - specifies in which directory the log file will be written                      (only to be used with -debug).  In general, you should perform the following steps when fuzzing a new target:  0. Make sure your target is running correctly without instrumentations.  1. Open the target binary in WinDbg and locate the function you want to fuzz. Note the offset of the function from the start of the module. For example, if you want to fuzz the main function and happen to have symbols around, you can use the following windbg command:  x test!main  2. Make sure that the target is running correctly under DynamoRIO. For this purpose you can use the standalone debug mode of WinAFL client which does not require connecting to afl-fuzz. Make sure you use the drrun.exe and winafl.dll version which corresponds to your target (32 vs. 64 bit).  Example command line  path\to\DynamoRIO\bin64\drrun.exe -c winafl.dll -debug -target_module test_gdiplus.exe -target_offset 0x1270 -fuzz_iterations 10 -nargs 2 -- test_gdiplus.exe input.bmp  You should see the output corresponding to your target function being run 10 times after which the target executable will exit. A .log file should be created in the current directory. The log file contains useful information such as the files and modules loaded by the target as well as the dump of AFL coverage map. You should see your input file being opened at least 10 times (or more), as afl-fuzz requires that the file is opened for each fuzzing iteration. Note the list of loaded modules for setting the -coverage_module flag. Note that you must use the same values for module names as seen in the log file (case sensitive).  3. Now you should be ready to fuzz the target. First, make sure that both afl-fuzz.exe and winafl.dll are in the current directory. As stated earlier, the command line for afl-fuzz on Windows is  afl-fuzz [afl options] -- [instrumentation options] -- target_cmd_line  Please refer above for the list of supported AFL and instrumentation options.  In AFL options, you must specify the DynamoRIO binaries directory via the new -D option. You need to match the DynamoRIO and winafl.dll build (32 vs. 64 bit) to the target binary. -t (timeout) option is mandatory for winafl as execution time can vary significantly under instrumentation so it’s not a good idea to rely on the auto-determined values.  You can use the same winafl options as in step 2 but remember to exclude the -debug flag and you'll probably want to increase the iteration count.  As in afl-fuzz on Linux you can replace the input file param of the target binary with @@  An example command line would look like  afl-fuzz.exe -i in -o out -D C:\work\winafl\DynamoRIO\bin64 -t 20000 -- -coverage_module gdiplus.dll -coverage_module WindowsCodecs.dll -fuzz_iterations 5000 -target_module test_gdiplus.exe -target_offset 0x1270 -nargs 2 -- test_gdiplus.exe @@  That’s it. Happy fuzzing! Let me know if you find any bugs.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ivanfratric/winafl"	"— a Rust fuzzer, using"	"true"
"Testing"	""	"https://travis-ci.org/frewsxcv/afl.rs"	"— a Rust fuzzer, using"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a Rust fuzzer, using"	"true"
"Testing"	"reem/stainless"	"https://github.com/reem/stainless"	"[] — Organized, flexible testing framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"216"	"7"	"20"	"GitHub - reem/stainless: Organized, flexible testing framework for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 216 Fork 20 reem/stainless Code Issues 4 Pull requests 0 Pulse Graphs Organized, flexible testing framework for Rust 148 commits 1 branch 3 releases 14 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.1.6 0.1.5 0.1.4 Nothing to show New pull request Latest commit b93e81b Jul 7, 2016 ujh Release 0.1.6 Permalink Failed to load latest commit information. benches Add MIT license and license headers (#60) Jun 16, 2016 src Fix build in latest nightly Rust Jul 5, 2016 tests Add MIT license and license headers (#60) Jun 16, 2016 .gitignore (init) Oct 1, 2014 .travis.yml Build on Linux AND OSX May 16, 2016 CHANGELOG.md Release 0.1.6 Jul 7, 2016 Cargo.toml Release 0.1.6 Jul 7, 2016 LICENSE Add MIT license and license headers (#60) Jun 16, 2016 README.md Added additional information for libraries Jun 20, 2016 README.md Stainless Stainless is a lightweight, flexible, unopinionated testing framework. Note that stainless currently requires the nightly version of the Rust compiler! Installation Add stainless as a dependency in your Cargo.toml file [dev-dependencies] stainless = ""*"" Add the following lines to the top of your root module. That file is normally called src/main.rs for executables and src/lib.rs for libraries: #![feature(plugin)] #![cfg_attr(test, plugin(stainless))] This will make stainless available when you run the tests using cargo test. When using stainless only with a library, make sure to run tests using cargo test --lib. Overview Stainless exports the describe! syntax extension, which allows you to quickly generate complex testing hierarchies and reduce boilerplate through before_each and after_each. Stainless currently supports the following types of subblocks: before_each and after_each it, failing, and ignore bench nested describe! before_each and after_each allow you to group common initialization and teardown for a group of tests into a single block, shortening your tests. it generates tests which use before_each and after_each. failing does the same, except the generated tests are marked with #[should_panic]. It optionally takes an argument which is matched against the failure message. ignore is equivalent to marking a test with #[ignore] which disables the test by default. bench allows you to generate benchmarks in the same fashion, though before_each and after_each blocks do not currently affect bench blocks. Nested describe! blocks allow you to better organize your tests into small units and gives you granular control over where before_each and after_each apply. Of course the before_each and after_each blocks of the wrapping describe! blocks are executed as well. Together, these 4 types of subblocks give you more flexibility and control than the built in testing infrastructure. Example describe! stainless {     before_each {         // Start up a test.         let mut stainless = true;     }      it ""makes organizing tests easy"" {         // Do the test.         assert!(stainless);     }      after_each {         // End the test.         stainless = false;     }      bench ""something simple"" (bencher) {         bencher.iter(|| 2 * 2)     }      describe! nesting {          before_each {           let mut inner_stainless = true;         }          after_each {           inner_stainless = false;         }          it ""makes it simple to categorize tests"" {             // It even generates submodules!             assert_eq!(2, 2);         }     } } Expands to (roughly): mod stainless {     #[test]     fn makes_organizing_tests_easy() {         let mut stainless = true;         assert!(stainless);         stainless = false;     }      #[bench]     fn something_simple(bencher: &mut test::Bencher) {         bencher.iter(|| 2 * 2)     }      mod nesting {         #[test]         fn makes_it_simple_to_categorize_tests() {             let mut stainless = true;             let mut inner_stainless = true;             assert_eq!(2, 2);             inner_stainless = false;             stainless = false;         }     } } Importing modules At this point it is not possible to put use statements inside the describe! blocks. To allow usage of data structures from other modules and crates each describe! block comes with a silent pub use super::*; in it. That way everything you pub use in the containing module is available in your tests. #[cfg(test)] mod tests {     pub use std::collections::HashMap;      describe! stainless {         it ""can use HashMap"" {             let map = HashMap::new();         }     } } License MIT. See the LICENSE file for details. Authors See Cargo.toml for the full list of authors. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/reem/stainless"	"[] — Organized, flexible testing framework"	"true"
"Testing"	"stainless"	"https://crates.io/crates/stainless"	"[] — Organized, flexible testing framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — Organized, flexible testing framework"	"true"
"Testing"	""	"https://travis-ci.org/reem/stainless"	"[] — Organized, flexible testing framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — Organized, flexible testing framework"	"true"
"Astronomy"	"astronomy"	"https://crates.io/keywords/astronomy"	"[] — Organized, flexible testing framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — Organized, flexible testing framework"	"true"
"Astronomy"	"saurvs/astro-rust"	"https://github.com/saurvs/astro-rust"	"— astronomy for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"28"	"3"	"2"	"GitHub - saurvs/astro-rust: Astronomical algorithms in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 28 Fork 2 saurvs/astro-rust Code Issues 1 Pull requests 0 Pulse Graphs Astronomical algorithms in Rust https://saurvs.github.io/astro-rust/ 8 commits 2 branches 1 release Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v2.0.0 Nothing to show New pull request Latest commit 48300ec Jul 2, 2016 saurvs Change month field of Date from u8 to an enum Permalink Failed to load latest commit information. src Change month field of Date from u8 to an enum Jul 2, 2016 tests Change month field of Date from u8 to an enum Jul 2, 2016 .gitignore Initial commit May 10, 2016 .travis.yml Initial commit May 10, 2016 Cargo.toml Bump to version 2.0.0 May 22, 2016 LICENSE.md Changes May 22, 2016 README.md Update README.md Jun 16, 2016 README.md astro-rust Contents API Docs About Usage Contributing References About astro-rust is a library of advanced astronomical algorithms for the Rust programming language. Implemented algorithms include: planetary and solar positioning by the complete set of elements of Bretagnon and Francou's VSP087 theory lunar positioning by the principle elements of Chapront's ELP-2000/82 theory satellite positioning for Saturn and Jupiter finding Julian dates, sidereal time, dynamical time, equinoxes, rising and setting times, times of lunar phases coordinate transformations corrections for precession, nutation, parallax, aberration, atmospheric refraction calculation of the physical ephemeris for Mars, Jupiter, and the rings of Saturn finding position angles, illuminated fractions, visual magnitudes and much more. Usage Add the dependency astro in your Cargo.toml [dependencies] astro = ""2.0.0"" Include the crate astro in your code extern crate astro;  use astro::*; Specify your time of interest using the Julian day // for example, the time of the Apollo 11 moon landing  let day_of_month = time::DayOfMonth{day      : 20,                                     hr       : 20,                                     min      : 18,                                     sec      : 4.0,                                     time_zone: 0.0};  let date = time::Date{year       : 1969,                       month      : 7, // July                       decimal_day: time::decimal_day(&day_of_month),                       cal_type   : time::CalType::Gregorian};  let julian_day = time::julian_day(&date);  // for higher accuracy in specifying the time of interest, // find the Julian Ephemeris day; this slightly differs from // the Julian day by ΔT, which is usually a few seconds. you // can get a reported value of it from the Astronomical // Almanac, or calculate it using the built-in function  let delta_t = time::delta_t(date.year, date.month);  let julian_ephm_day = time::julian_ephemeris_day(julian_day, delta_t); Find the position of the Sun and the Moon with respect to the Earth // geocentric ecliptic point and radius vector of the Sun let (sun_ecl_point, rad_vec_sun) = sun::geocent_ecl_pos(julian_day);  // sun_ecl_point.long    - ecliptic longitude (radians) // sun_ecl_point.lat     - ecliptic latitude  (radians) // rad_vec_sun - distance between the Sun and the Earth (AU)  // and similarly for the Moon let (moon_ecl_point, rad_vec_moon) = lunar::geocent_ecl_pos(julian_day);  Find the position of a planet with respect to the Sun // the heliocentric point and radius vector of a planet, like Jupiter let (jup_long, jup_lat, rad_vec) = planet::heliocent_pos(&planet::Planet::Jupiter, julian_day);  // or neptune let (nep_long, nep_lat, rad_vec) = planet::heliocent_pos(&planet::Planet::Neptune, julian_day);  // positioning for all the eight planets (and (the dwarf planet) Pluto) is supported let (plut_long, plut_lat, rad_vec) = pluto::heliocent_pos(julian_day); Find the geodesic distance between two locations on Earth   // geodesic distance between the Observatoire de Paris and   // the US Naval Observatory at Washington DC    let paris = coords::GeographPoint{long: angle::deg_frm_dms(-2, 20, 14.0).to_radians(),                                     lat : angle::deg_frm_dms(48, 50, 11.0).to_radians()};    let washington = coords::GeographPoint{long: angle::deg_frm_dms(77,  3, 56.0).to_radians(),                                          lat : angle::deg_frm_dms(38, 55, 17.0).to_radians()};    // angle::deg_frm_dms() converts degrees expressed in degrees,   // minutes and seconds into a fractional degree    let distance = planet::earth::geodesic_dist(&paris, &washington); // in meters Convert equatorial coordinates to ecliptic coordinates   // equatorial coordinates of the star Pollux    let right_ascension = 116.328942_f64.to_radians();   let declination = 28.026183_f64.to_radians();    // mean obliquity of the ecliptic    let oblq_eclip = 23.4392911_f64.to_radians();    // you can also get oblq_eclip from ecliptic::mn_oblq_IAU(julian_day)   // for the Julian day on which the coordinates of the star   // were observed    // also make sure to type #[macro_use] before including the crate   // to use macros    // now, convert equatorial coordinates to ecliptic coordinates    let (ecl_long, ecl_lat) = ecl_frm_eq!(right_ascension, declination, oblq_eclip); Convert equatorial coordinates to galactic coordinates   // equatorial coordinates of the Nova Serpentis 1978    let right_ascension = angle::deg_frm_hms(17, 48, 59.74).to_radians();   let declination = angle::deg_frm_dms(-14, 43, 8.2).to_radians();    // convert to galactic coordinates    let (gal_long, gal_lat) = gal_frm_eq!(right_ascension, declination); Correct for nutation in different coordinate systems // nutation in ecliptic longitude and obliquity of the ecliptic let (nut_in_long, nut_in_oblq) = nutation::nutation(julian_day);  // nutation in equatorial coordinates let (nut_in_asc, nut_in_dec) = nutation::nutation_in_eq_coords(julian_day); Contributing Anyone interested to contribute in any way possible is encouraged to do so. Not all the algorithms in Meeus's book have been implemented yet. Documentation and tests need to be written for them as well. Refactored code and minor optimizations for the existing code are also welcome. The end goal (of this project) is to build a modern, well-tested, well-documented library of algorithms for future use in astronomy. And Rust is very much the right choice for building that. A fun suggestion is the addition of the recent IAU 2000/2006 precession-nutation model. This method improves upon the existing model implemented here ""by taking into account the effect of mantle anelasticity, ocean tides, electromagnetic couplings produced between the fluid outer core and the mantle as well as between the solid inner core and fluid outer core"". References The main reference used as the source of algorithms is the famous book Astronomical Algorithms by Jean Meeus, whose almost every chapter has been addressed here, with functions that are well-documented and tests that use example data from the book; in some cases, such as ΔT approximation and planetary heliocentric positioning, more accurate methods have been implemented. Most algorithms: Astronomical Algorithms, 2nd edition (Meeus) Planetary heliocentric positioning: VSOP87-D Approximating ΔT: Five Millennium Canon of Solar Eclipses (Espenak and Meeus) Some physical constants: World Geodetic System 1984 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/saurvs/astro-rust"	"— astronomy for Rust"	"true"
"Astronomy"	""	"https://travis-ci.org/saurvs/astro-rust"	"— astronomy for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— astronomy for Rust"	"true"
"Concurrency"	"zonyitoo/coio-rs"	"https://github.com/zonyitoo/coio-rs"	"– Coroutine I/O for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"258"	"17"	"19"	"GitHub - zonyitoo/coio-rs: Coroutine I/O for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 258 Fork 19 zonyitoo/coio-rs Code Issues 9 Pull requests 1 Pulse Graphs Coroutine I/O for Rust 209 commits 2 branches 0 releases 6 contributors Rust 98.8% Go 1.2% Rust Go Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags io-timeouts master Nothing to show Nothing to show New pull request Latest commit 165affc Jul 12, 2016 zonyitoo fixed compile error Permalink Failed to load latest commit information. benches Switch license to MIT/Apache-2.0 May 6, 2016 benchmarks [#59] Record notify state in Condvar, fixed bug in Processor::ready t… Jul 11, 2016 examples Replace time with std::time Jun 16, 2016 src fixed compile error Jul 12, 2016 tests add logs Jul 9, 2016 .gitignore init commit Aug 18, 2015 .travis.yml do not build benchmarks Jul 9, 2016 Cargo.toml Merge branch 'master' into io-timeouts Jul 9, 2016 LICENSE-APACHE Switch license to MIT/Apache-2.0 May 6, 2016 LICENSE-MIT Switch license to MIT/Apache-2.0 May 6, 2016 LICENSE-THIRD-PARTY Processor/Scheduler overhaul Apr 26, 2016 README.md Switch license to MIT/Apache-2.0 May 6, 2016 appveyor.yml [#40] Migrate to context-rs v1.0 Mar 4, 2016 README.md Coroutine I/O Coroutine scheduling with work-stealing algorithm. Feature Non-blocking I/O Work-stealing coroutine scheduling Asynchronous computing APIs Usage Note: You must use Nightly Rust to build this Project. [dependencies.coio] git = ""https://github.com/zonyitoo/coio-rs.git"" Basic Coroutines extern crate coio;  use coio::Scheduler;  fn main() {     Scheduler::new()         .run(|| {             for _ in 0..10 {                 println!(""Heil Hydra"");                 Scheduler::sched(); // Yields the current coroutine             }         })         .unwrap(); } TCP Echo Server extern crate coio;  use std::io::{Read, Write};  use coio::net::TcpListener; use coio::{spawn, Scheduler};  fn main() {     // Spawn a coroutine for accepting new connections     Scheduler::new().with_workers(4).run(move|| {         let acceptor = TcpListener::bind(""127.0.0.1:8080"").unwrap();         println!(""Waiting for connection ..."");          for stream in acceptor.incoming() {             let (mut stream, addr) = stream.unwrap();              println!(""Got connection from {:?}"", addr);              // Spawn a new coroutine to handle the connection             spawn(move|| {                 let mut buf = [0; 1024];                  loop {                     match stream.read(&mut buf) {                         Ok(0) => {                             println!(""EOF"");                             break;                         },                         Ok(len) => {                             println!(""Read {} bytes, echo back"", len);                             stream.write_all(&buf[0..len]).unwrap();                         },                         Err(err) => {                             println!(""Error occurs: {:?}"", err);                             break;                         }                     }                 }                  println!(""Client closed"");             });         }     }).unwrap(); } Exit the main function Will cause all pending coroutines to be killed. extern crate coio;  use std::sync::Arc; use std::sync::atomic::{AtomicUsize, Ordering}; use std::time::Duration;  use coio::Scheduler;  fn main() {     let counter = Arc::new(AtomicUsize::new(0));     let cloned_counter = counter.clone();      let result = Scheduler::new().run(move|| {         // Spawn a new coroutine         Scheduler::spawn(move|| {             struct Guard(Arc<AtomicUsize>);              impl Drop for Guard {                 fn drop(&mut self) {                     self.0.store(1, Ordering::SeqCst);                 }             }              // If the _guard is dropped, it will store 1 to the counter             let _guard = Guard(cloned_counter);              coio::sleep(Duration::from_secs(10));             println!(""Not going to run this line"");         });          // Exit right now, which will cause the coroutine to be destroyed.         panic!(""Exit right now!!"");     });      // The coroutine's stack is unwound properly     assert!(result.is_err() && counter.load(Ordering::SeqCst) == 1); } Basic Benchmarks See benchmarks for more details. Projects using coio shadowsocks-rust - shadowsocks is a fast tunnel proxy that helps you bypass firewalls. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zonyitoo/coio-rs"	"– Coroutine I/O for Rust"	"true"
"Concurrency"	""	"https://travis-ci.org/zonyitoo/coio-rs"	"– Coroutine I/O for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"– Coroutine I/O for Rust"	"true"
"Asynchronous"	"thehydroimpulse/tangle"	"https://github.com/thehydroimpulse/tangle"	"— a scala-inspired futures library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"1"	"0"	"GitHub - thehydroimpulse/tangle: Future implementation for Rust - http://thehydroimpulse.github.io/tangle Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 10 Fork 0 thehydroimpulse/tangle Code Issues 1 Pull requests 0 Pulse Graphs Future implementation for Rust - http://thehydroimpulse.github.io/tangle 6 commits 2 branches 0 releases 1 contributor Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 290a8fa Mar 28, 2016 thehydroimpulse fix typo in documentation Permalink Failed to load latest commit information. src Release v0.4.0 Mar 28, 2016 .gitignore init Mar 12, 2016 .travis.yml travis Mar 12, 2016 Cargo.toml Release v0.4.0 Mar 29, 2016 Readme.md fix typo in documentation Mar 28, 2016 Readme.md Tangle Documentation (Master) Futures implementation in Rust based on Scala's Futures that runs in a thread pool. It allows composable asynchronous concurrency in a way that works nicely with existing Rust constructs. Getting Started Install tangle with Cargo: [dependencies] tangle = ""0.4.0"" Add the crate to your project: extern crate tangle; And require the only two types you need from this crate: use tangle::{Future, Async}; Creating a Future Using Values The first way to create a future is through a unit, or an already resolved value. This will not require any threading and allows you to lift a value into a Future, making it composable. Future::unit(1); Future::unit(""hello world"".to_string()); Future values must implement the Send trait regardless if threading is involved. Using Closures You may also create a Future through the use of a closure. The closure is expected to return the Async<T, E> type which is an asynchronous version of Result<T, E>. Future::new(move || {   let result = // perform some heavy work here...    Async::Ok(result); }); Using Channels Channels are essentially the substitute to promises. Usually, promises are used for writing and futures are used for reading; however, Tangle replaces the writing part with Rust channels. You may let Tangle create the channel or you may pass the receiver-end yourself, using ::channel and ::from_channel, respectively. let (tx, future) = Future::channel();  tx.send(123); Using an existing channel: use std::sync::mpsc::channel;  let (tx, rx) = channel(); let future = Future::from_channel(rx);  tx.send(123); Resolving Futures The point is to eventually get some sort of value back from the futures. You may either block on the future using the .recv() method, or you may chain using and_then (flat map) and map. The latter methods are all asynchronous and continue running in a thread pool, they also themselves return new futures. Blocking let future = Future::unit(123);  // recv() returns `Result<T, E>` assert_eq!(future.recv().unwrap(), 123); and_then You need to wrap the value back into an Async type. let future = Future::unit(123);  future.and_then(move |n| {   Async::Ok(n * 100) }); You may also dynamically compose futures using Async::Continue. let future = Future::unit(123);  future.and_then(move |n| {   // ...   Async::Continue(find_user_id(""thehydroimpulse"")) });  fn find_user_id(name: &str) -> Future<u64> {   // ...   return Async::Ok(...); } map let future = Future::unit(123);  future.map(move |n| n * 100); Error Handling TODO: Write documentation. License The MIT License (MIT) Copyright (c) 2016 Daniel Fagnan dnfagnan@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thehydroimpulse/tangle"	"— a scala-inspired futures library"	"true"
"Asynchronous"	""	"https://travis-ci.org/thehydroimpulse/tangle"	"— a scala-inspired futures library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a scala-inspired futures library"	"true"
"Audio"	"audio"	"https://crates.io/keywords/audio"	"— a scala-inspired futures library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"— a scala-inspired futures library"	"true"
"Audio"	"GuillaumeGomez/rust-fmod"	"https://github.com/GuillaumeGomez/rust-fmod"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"4"	"6"	"GitHub - GuillaumeGomez/rust-fmod: A rust binding for the FMOD library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 8 Fork 6 GuillaumeGomez/rust-fmod Code Issues 0 Pull requests 0 Pulse Graphs A rust binding for the FMOD library http://guillaumegomez.github.io/rust-fmod/ 182 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 13305bd Jun 17, 2016 GuillaumeGomez committed on GitHub Merge pull request #10 from GuillaumeGomez/clean_add_improve … End of code clean Permalink Failed to load latest commit information. examples Update example to last rustc version Jun 17, 2016 src End of code clean Jun 17, 2016 .gitignore gitignore cargo target directory Nov 5, 2015 .travis.yml Update travis script Jun 16, 2016 Cargo.toml End of code clean Jun 16, 2016 LICENSE.TXT Add license file Nov 20, 2014 README.md Update README.md Nov 6, 2015 README.md rust-fmod This is a rust binding for FMOD, the library developped by FIRELIGHT TECHNOLOGIES. FMOD website : www.fmod.org You can also find it on crates.io ! Installation You must install on your computer the FMOD library which is used for the binding. Since this project supports cargo, you can build it this way: > cargo build Documentation You can access the rfmod documentation locally, just build it : > cargo doc Then open this file with an internet browser : file:///{rfmod_location}/doc/rfmod/index.html You can also access the latest build of the documentation via the internet from here. Short example Here is a short example on how to create a file and to play it : extern crate rfmod;  fn main() {     let fmod = match rfmod::Sys::new() {         Ok(f) => f,         Err(e) => {             panic!(""Error code : {:?}"", e);         }     };      match fmod.init() {         rfmod::Result::Ok => {}         e => {             panic!(""FmodSys.init failed : {:?}"", e);         }     };      let sound = match fmod.create_sound(""music.mp3"", None, None) {         Ok(s) => s,         Err(err) => {             panic!(""Error code : {:?}"", err);         }     };      match sound.play_to_the_end() {         rfmod::Result::Ok => {             println!(""Ok !"");         }         err => {             panic!(""Error code : {:?}"", err);         }     }; } For a more complete example : https://github.com/GuillaumeGomez/rust-music-player License Please refer to the LICENSE.txt file for more details. If you want more information, here is the FMOD website : http://www.fmod.org/  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/GuillaumeGomez/rust-fmod"	"— bindings"	"true"
"Audio"	"FMOD"	"http://www.fmod.org/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"FMOD Remember | Register | Lost Password Home Products Sales Services Download Resources Questions & Answers Documentation Videos Training News Contact FMOD Studio is an adaptive audio tool and engine for games — built on top of FMOD, the industry leading cross-platform audio middleware solution that has shipped in over 2,000 games over the past 15 years. Downloads FMOD is available for downloading in full without feature restriction or trial evaluation periods. Click here to go to the Downloads page for the latest version. Education & Videos View information on the official training course for educational users and institutions, as well as in-studio training for FMOD products. Also view the range of videos to help you navigate through FMOD’s latest features. About FMOD Studio Introducing the world’s most sophisticated game audio solution. Open your ears to a new world of creative sound-scapes with enhanced performance and an incredibly polished & efficient workflow.   AudioGaming’s AudioMotors in WRC5 Together with Firelight Technologies, AudioGaming is proud to announce the latest integration of AudioMotors FMOD in the renowned rally racing game WRC5.... FMOD Studio 1.08 released Firelight Technologies announced today the release of FMOD Studio 1.08 and FMOD.io. FMOD Studio now includes FMOD.io. Directly accessible from within... FMOD Studio 1.07 released. Big Projects. ... Firelight Technologies announced today the release of FMOD Studio 1.07 FMOD Studio is more powerful and flexible than ever. This release focuses on... FMOD Studio 1.06 released April 13, 2015 Firelight Technologies announced today the release of FMOD Studio 1.06. The release includes a number of new features, including support...   Sign up for the FMOD newsletter for the latest news! Engine Partners Technology Partners Home Products Sales Download Resources News Contact Copyright Copyright 2016 FIRELIGHT TECHNOLOGIES PTY LTD. All RIGHTS RESERVED."	"null"	"null"	"— bindings"	"true"
"Audio"	""	"https://travis-ci.org/GuillaumeGomez/rust-fmod"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Audio"	"jhasse/ears"	"https://github.com/jhasse/ears"	"— a simple library to play Sounds and Musics, on top of OpenAL and libsndfile"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12"	"3"	"10"	"GitHub - jhasse/ears: Easy Api in Rust to play Sounds Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 12 Fork 10 jhasse/ears forked from jeremyletang/ears Code Issues 2 Pull requests 0 Pulse Graphs Easy Api in Rust to play Sounds https://bixense.com/ears/ears/ 240 commits 2 branches 5 releases 10 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 Nothing to show New pull request Pull request Compare This branch is 59 commits ahead of jeremyletang:master. Latest commit f75640b Jun 13, 2016 jhasse Bump version to 0.3.5 Permalink Failed to load latest commit information. examples Sleep in Music example Feb 1, 2016 res Add Music example Jan 21, 2016 src Remove trait item import to fix compilation error May 30, 2016 .gitignore Ignore Visual Studio Code and Travis CI files Jun 1, 2016 .travis.yml Reset GitHub access token Jun 1, 2016 Cargo.toml Bump version to 0.3.5 Jun 13, 2016 LICENSE Initial commit Oct 8, 2013 README.md Add Fedora install instructions Feb 16, 2016 appveyor.yml AppVeyor: Don't create a log file for Rust installation Jan 23, 2016 build.rs Add Mac support Jan 21, 2016 README.md ears ears is a simple library to play sounds and music in Rust. Provides an access to the OpenAL spatialization functionality in a simple way. Accepts a lot of audio formats, thanks to libsndfile. Documentation Building You need to install OpenAL and libsndfile on your system: Linux Fedora: sudo dnf install openal-soft-devel libsndfile-devel  Debian or Ubuntu: sudo apt install libopenal-dev libsndfile1-dev  Mac brew install openal-soft libsndfile  Windows pacman -S mingw-w64-x86_64-libsndfile mingw-w64-x86_64-openal  Examples cargo run --example basic cargo run --example many_sounds cargo run --example music cargo run --example record cargo run --example simple_player  Functionality ears provides two ways to play audio files: The Sound class, which represents light sounds who can share a buffer of samples with another Sound. The Music class, which represents bigger sound and can't share sample buffers. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jhasse/ears"	"— a simple library to play Sounds and Musics, on top of OpenAL and libsndfile"	"true"
"Audio"	""	"https://travis-ci.org/jhasse/ears"	"— a simple library to play Sounds and Musics, on top of OpenAL and libsndfile"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a simple library to play Sounds and Musics, on top of OpenAL and libsndfile"	"true"
"Audio"	"jpernst/openal-rs"	"https://github.com/jpernst/openal-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"3"	"11"	"GitHub - jpernst/openal-rs: OpenAL 1.1 bindings for Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 14 Fork 11 jpernst/openal-rs Code Issues 1 Pull requests 0 Pulse Graphs OpenAL 1.1 bindings for Rust. 99 commits 2 branches 1 release Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 0.6-compatible Nothing to show New pull request Latest commit f9f5798 May 26, 2016 jpernst Bump version to 0.1.4 Permalink Failed to load latest commit information. src Windows platform support May 26, 2016 tests Fix warnings; bump version to 0.1.2 Jan 31, 2016 .gitignore Fix enum namespacing; add Cargo.lock to .gitignore Nov 18, 2014 .travis.yml Fix docs url May 3, 2015 Cargo.toml Bump version to 0.1.4 May 26, 2016 README.md Add build status image May 3, 2015 README.md OpenAL 1.1 bindings for Rust. Documentation Building cargo build  Examples sin plays a 440Hz sine wave for 3 seconds Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jpernst/openal-rs"	"— bindings"	"true"
"Audio"	"OpenAL 1.1"	"http://www.openal.org/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"5"	"2"	"GitHub - TimeDoctor/openal-website Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 5 Fork 2 TimeDoctor/openal-website Code Issues 0 Pull requests 0 Pulse Graphs http://openal.org 18 commits 1 branch 0 releases Fetching contributors Perl 73.7% PHP 24.8% CSS 1.2% JavaScript 0.3% Perl PHP CSS JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f2839c7 Sep 25, 2015 TimeDoctor Fix header link to homepage. Permalink Failed to load latest commit information. alextreg None of this is going to wrok Sep 24, 2015 css krushing some kode Jul 25, 2015 documentation Added the OpenAL Programmers Guide Sep 24, 2015 downloads why not zoidberg? Jul 24, 2015 games Removed a bunch of broken links and fixed a few Sep 2, 2015 js complete rewrite based on a different design that actually works? Jul 24, 2015 links krushing some kode Jul 26, 2015 mailing_lists commit all the things Jul 24, 2015 platforms words Aug 2, 2015 AdobeStock_76467781.jpg initial commit Jun 29, 2015 README.md krushing some kode Jul 26, 2015 body.php krushing some kode Jul 26, 2015 footer.php krushing some kode Jul 26, 2015 header.php Fix header link to homepage. Sep 25, 2015 index.php initial commit Jun 29, 2015 openalheader.jpg complete rewrite based on a different design that actually works? Jul 24, 2015 README.md This is the website for openal.org. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TimeDoctor/openal-website"	"— bindings"	"true"
"Audio"	""	"https://travis-ci.org/jpernst/openal-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Audio"	"musitdev/portmidi-rs"	"https://github.com/musitdev/portmidi-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"27"	"3"	"8"	"GitHub - musitdev/portmidi-rs: High-level PortMidi bindings and wrappers for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 27 Fork 8 musitdev/portmidi-rs Code Issues 1 Pull requests 0 Pulse Graphs High-level PortMidi bindings and wrappers for Rust 256 commits 2 branches 6 releases Fetching contributors Rust 98.4% Shell 1.6% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.2.2 v0.2.1 v0.2.0 v0.1.6 v0.1.5 v0.1.2 Nothing to show New pull request Latest commit e4f7cdb Mar 27, 2016 musitdev Merge pull request #29 from N-006/patch-1 … Update monitor.rs. No need to update version number and republish in crates.io Permalink Failed to load latest commit information. examples Update monitor.rs Mar 27, 2016 other updated copyrights, links and documentation Jan 5, 2015 src Fix byte order in midi messages. Mar 23, 2016 tests Fix byte order in midi messages. Mar 23, 2016 .gitignore Ignore `.bk` (rustfmt) and `.swp` (vim) files Mar 2, 2016 .travis.yml Add missing `rust` key Mar 13, 2016 CONTRIBUTORS.md Add contributors list (sorted by #commits) Mar 12, 2016 Cargo.toml Increase minor version Mar 24, 2016 LICENSE-APACHE Relicense to dual MIT/Apache-2.0 Jan 18, 2016 LICENSE-MIT Relicense to dual MIT/Apache-2.0 Jan 18, 2016 README.md Add a note about the `monitor-all` example Mar 23, 2016 Vagrantfile update vagrant file Apr 9, 2015 README.md portmidi-rs High-level PortMidi bindings for Rust. PortMidi website: http://portmedia.sourceforge.net/portmidi/ Installation Add this to your Cargo.toml. [dependencies] portmidi = ""^0.2"" Prerequisites You need to make sure you have the PortMidi library installed. On Ubuntu / Debian: apt-get install libportmidi-dev Arch Linux: pacman -S portmidi On OSX (Homebrew): brew install portmidi On OSX, if you get a linker error ld: library not found for -lportmidi, either, make sure you have the Xcode Command Line Tools installed, not just Xcode, or make sure you have the PortMidi library in your $LIBRARY_PATH, e.g. for Homebrew: export LIBRARY_PATH=""$LIBRARY_PATH:/usr/local/lib"" Examples Examples can be run by cloning the repository and running cargo run --example <example name>. play: demonstrates midi output by playing Twinkle Twinkle Little Star (forever...) monitor: demonstrate midi input monitor-all: listens on all-input devices and uses threads and channels Example: cargo run --example play -- 1 --verbose Both play and monitor need a device number supplied, run them without an argument to get a list of the connected devices, e.g. License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT)  at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/musitdev/portmidi-rs"	"— bindings"	"true"
"Audio"	"PortMidi"	"http://portmedia.sourceforge.net/portmidi/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PortMedia PortMidi Platform Independent Library for MIDI I/O PortMedia is supported by the National Science Foundation PortMidi is a library for software developers. It supports real-time input and output of MIDI data using a system-independent interface. PortMidi runs on Windows (using MME), Macintosh (using CoreMIDI), and Linux (using ALSA). Documentation The primary documentation is contained in the main header file, portmidi.h. You can find this in the sources when you download the PortMidi library, or you can see the latest version in the SVN repository. There is also documentation generated by Doxygen. This documentation still needs some work, but you might like it. Downloads You can download PortMidi here. Source Code and Development with SVN PortMidi sourcecode is maintained on SourceForge using Subversion (SVN). You can get the latest PortMidi source code through SVN. (See the PortMidi Wiki for instructions.) PortMidi Wiki PortMidi, as part of the PortMedia project on SourceForge, has a Wiki. Visit the PortMidi Wiki pages for more information about PortMidi. PmDefaults Application Applications that use PortMidi often face the problem of choosing among multiple MIDI input and output devices. To simplify life for application developers and to offer a reasonable interface to application users, PortMidi includes an application, PmDefaults, which can be used to set device preferences. Since PmDefaults is intended for end users, it is offered as an installer for Windows and a ready-to-run application for Mac OS X. You can read more about it on the Wiki."	"null"	"null"	"— bindings"	"true"
"Audio"	""	"https://travis-ci.org/musitdev/portmidi-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Audio"	"RustAudio"	"https://github.com/RustAudio"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"RustAudio · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization RustAudio An aggregate of free and useful Audio, DSP and music libraries written in Rust. Repositories People 3 Filters Sources Forks Rust 2 4 envelope An interpolatable Envelope type along with a generic 2D Point, useful for controlling parameters over time. Updated Jul 3, 2016 Rust 39 5 synth A polyphonic Synth type whose multiple oscillators generate sound via amplitude and frequency envelopes, implemented in Rust. Updated Jul 3, 2016 Rust 4 2 sampler A polyphonic sampler instrument that supports unique sample mappings across both frequency and velocity ranges. Updated Jun 28, 2016 Rust 82 38 rust-portaudio PortAudio bindings and wrappers for Rust. Updated Jun 20, 2016 Rust 1 1 instrument Converts discrete note events to a continuous signal of amplitude and frequency frames over N number of voices. Updated Jun 20, 2016 Rust 36 5 sample The fundamentals for working with audio PCM DSP. Updated Jun 9, 2016 Rust 0 3 volume A simple dsp-chain node for multiplying the amplitude of the output buffer by some volume. Updated Jun 8, 2016 Rust 63 6 dsp-chain A library for chaining together multiple audio dsp processors/generators, written in Rust! Updated Jun 8, 2016 Rust 8 2 time_calc A library for music/DSP time conversions! Provides functions and methods for converting between ticks, ms, samples, bars, beats and measures. Updated Jun 7, 2016 Rust 12 5 pitch_calc A library for musical pitch conversions! Provides functions and methods for converting between frequency (hz), midi-step, letter-octave and mels. Updated Jun 7, 2016 Rust 25 4 coreaudio-rs A friendly rust interface to Apple's Core Audio API. Updated Mar 20, 2016 Rust 4 2 rimd Library for handling Midi and Standard Midi Files in Rust Updated Feb 10, 2016 Rust 51 5 sound_stream A Rust audio IO stream in the style of an ""Event Iterator"" driven by PortAudio. Updated Jan 4, 2016 Rust 1 1 rms A simple type for calculating and storing the RMS given some buffer of interleaved audio samples. Updated Dec 5, 2015 Rust 1 2 coreaudio-sys Raw bindings to the OSX CoreAudio framework generated by bindgen (see coreaudio-rs for a more rust-esque wrapper). Updated Nov 11, 2015 HTML 7 1 rust-jack Rust bindings for the Jack API Updated Sep 18, 2015 Rust 2 1 musical_keyboard A small lib for converting keyboard input into musical notes. Updated Jun 2, 2015 Rust 0 1 panning A variety of utilities related to audio panning in Rust. Updated Jun 1, 2015 3 People frewsxcv Corey Farwell mitchmindtree Mitchell Nordine yupferris ferris Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/RustAudio"	""	"true"
"Audio"	"RustAudio/rust-portaudio"	"https://github.com/RustAudio/rust-portaudio"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"82"	"12"	"38"	"GitHub - RustAudio/rust-portaudio: PortAudio bindings and wrappers for Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 82 Fork 38 RustAudio/rust-portaudio Code Issues 21 Pull requests 0 Pulse Graphs PortAudio bindings and wrappers for Rust. 299 commits 6 branches 0 releases 19 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags add_examples build-cfg gh-pages master small-refactor stream-type-parameter Nothing to show Nothing to show New pull request Latest commit 7eb14c9 Jun 20, 2016 mitchmindtree committed on GitHub Merge pull request #138 from 01d55/master … Fix typo in saw example Permalink Failed to load latest commit information. examples Revert extraneous changes Jun 20, 2016 src Correct visibility of Reader and Writer traits Apr 10, 2016 .gitignore Silenced build script io/path warnings Mar 2, 2015 .travis.yml Remove osx from travis until confirmed working build script. Remove t… Oct 31, 2015 Cargo.toml Add `links = ""portaudio""` to Cargo.toml Apr 29, 2016 LICENSE update asio, mac_core and pa. Sep 5, 2013 README.md Update links in README and manifest Jan 10, 2016 build.rs on Windows: printing message pointing to portaudio site Mar 7, 2016 README.md rust-portaudio PortAudio bindings and wrappers for Rust. PortAudio is a free, cross-platform, open-source, audio I/O library. rust-portaudio is still under development, so there may be bugs - please feel free to add an issue or even better, submit a PR! To use rust-portaudio in your own project, add it to your Cargo.toml dependencies like so: [dependencies] portaudio = ""X.Y.Z"" Installation rust-portaudio will try to detect portaudio on your system and, failing that (or if given the PORTAUDIO_ONLY_STATIC environment variable on the build process), will download and build portaudio statically. If this fails please let us know! In the mean-time, you can manually download and install PortAudio yourself. rust-portaudio is built using cargo, so just type cargo build at the root of the rust-portaudio repository. You can build the tests and examples with cargo test, and the documentation with cargo doc. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/RustAudio/rust-portaudio"	"— bindings"	"true"
"Audio"	"PortAudio"	"http://www.portaudio.com/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PortAudio - an Open-Source Cross-Platform Audio API Home Documentation Download Git Repo Wiki & Tickets Status FAQ Mail List Applications Contributors Links License Volunteer Contact Us Search: PortAudio is a free, cross-platform, open-source, audio I/O library.  It lets you write simple audio programs in 'C' or C++ that will compile and run on many platforms including Windows, Macintosh OS X, and Unix (OSS/ALSA). It is intended to promote the exchange of audio software between developers on different platforms. Many applications use PortAudio for Audio I/O. PortAudio provides a very simple API for recording and/or playing sound using a simple callback function or a blocking read/write interface. Example programs are included that play sine waves, process audio input (guitar fuzz), record and playback audio, list available audio devices, etc. The Portaudio Wiki is maintained by the community of PortAudio developers. It has the most up-to-date information and is recommended as a starting point for exploring PortAudio. PortAudio developers and users keep in touch on the PortAudio mailing list. Please feel free to join. The PortAudio project and API was proposed by Ross Bencina to the music-dsp mailing list. Ross uses PortAudio in his AudioMulch synthesis application. Many people have since contributed to PortAudio's development. This website is hosted and maintained by Phil Burk of SoftSynth.com. Phil is also a co-designer of PortAudio and used it for audio I/O in JSyn, a real-time synthesis API for Java and 'C'. Brought to you by the PortAudio community."	"null"	"null"	"— bindings"	"true"
"Audio"	""	"https://travis-ci.org/RustAudio/rust-portaudio"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Authentication"	"keats/rust-jwt"	"https://github.com/keats/rust-jwt"	"— lib in rust"	"null"	"null"	"null"	"JSON Web Token"	"https://en.wikipedia.org/wiki/JSON_Web_Token"	"null"	"null"	"28"	"1"	"8"	"GitHub - Keats/rust-jwt: JWT lib in rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 28 Fork 8 Keats/rust-jwt Code Issues 2 Pull requests 0 Pulse Graphs JWT lib in rust 53 commits 1 branch 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit ea5506d Apr 25, 2016 Keats Release 1.1.3 Permalink Failed to load latest commit information. benches Change order of encode method args + make alg field public Dec 21, 2015 examples Print token on claims example Mar 23, 2016 src Expose sign() and verify() Apr 24, 2016 .editorconfig Initial commit Oct 31, 2015 .gitignore Initial commit Oct 31, 2015 .travis.yml Add example + travis Nov 2, 2015 Cargo.toml Release 1.1.3 Apr 25, 2016 LICENSE Move benches to a folder + add license Nov 2, 2015 README.md Release 1.1.3 Apr 25, 2016 README.md jsonwebtoken Installation Add the following to Cargo.toml: jsonwebtoken = ""1"" rustc-serialize = ""0.3"" How to use There is a complete example in examples/claims.rs but here's a quick one. In terms of imports: extern crate jsonwebtoken as jwt; extern crate rustc_serialize;  use jwt::{encode, decode, Header, Algorithm}; Look at the examples directory for 2 examples: a basic one and one with a custom header. Encoding let token = encode(Header::default(), &my_claims, ""secret"".as_ref()).unwrap(); In that example, my_claims is an instance of a Claims struct that derives RustcEncodable and RustcDecodable. The default algorithm is HS256. Look at custom headers section to see how to change that. Decoding let token = decode::<Claims>(&token, ""secret"", Algorithm::HS256).unwrap(); // token is a struct with 2 params: header and claims In addition to the normal base64/json decoding errors, decode can return two custom errors: InvalidToken: if the token is not a valid JWT InvalidSignature: if the signature doesn't match WrongAlgorithmHeader: if the alg in the header doesn't match the one given to decode Validation The library only validates the algorithm type used but does not verify claims such as expiration. Feel free to add a validate method to your claims struct to handle that: there is an example of that in examples/claims.rs. Custom headers All the parameters from the RFC are supported but the default header only has typ and alg set: all the other fields are optional. If you want to set the kid parameter for example: let mut header = Header::default(); header.kid = Some(""blabla"".to_owned()); header.alg = Algorithm::HS512; let token = encode(header, &my_claims, ""secret"".as_ref()).unwrap(); Look at examples/custom_header.rs for a full working example. Algorithms Right now, only SHA family is supported: SHA256, SHA384 and SHA512. Performance On my thinkpad 440s for a 2 claims struct using SHA256: test bench_decode ... bench:       7,259 ns/iter (+/- 1,506) test bench_encode ... bench:       4,261 ns/iter (+/- 722)  Changelog 1.1.3: Make sign and verify public 1.1.2: Update rust-crypto to 0.2.35 1.1.1: Don't serialize empty fields in header 1.1.0: Impl Error for jsonwebtoken errors 1.0: Initial release Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/keats/rust-jwt"	"— lib in rust"	"true"
"Authentication"	""	"https://travis-ci.org/Keats/rust-jwt"	"— lib in rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— lib in rust"	"true"
"Bioinformatics"	"Rust-Bio"	"https://github.com/rust-bio"	"— bioinformatics libraries in Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Rust-Bio · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization Rust-Bio A bioinformatics library for the Rust language. https://rust-bio.github.io/ Repositories People 1 Filters Sources Forks Rust 197 26 rust-bio This library provides implementations of many algorithms and data structures that are useful for bioinformatics. All provided implementations are rigorously tested via continuous integration. Updated Jul 11, 2016 Rust 0 0 rust-bio-tools A set of command line utilities based on Rust-Bio. Updated Jul 6, 2016 Rust 20 7 rust-htslib This library provides HTSlib bindings and a high level Rust API for reading and writing BAM files. Updated Jun 1, 2016 HTML 0 1 rust-bio.github.io Github pages for Rust-Bio Updated May 20, 2016 1 People vadimnazarov Vadim Nazarov Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rust-bio"	"— bioinformatics libraries in Rust."	"true"
"Build system"	"Cargo"	"https://crates.io/"	"— the Rust package manager"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"— the Rust package manager"	"true"
"Build system"	"rsolomo/cargo-check"	"https://github.com/rsolomo/cargo-check"	"— a wrapper around which can be helpful for running a faster compile if you only need correctness checks"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"67"	"6"	"3"	"GitHub - rsolomo/cargo-check Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 67 Fork 3 rsolomo/cargo-check Code Issues 4 Pull requests 0 Pulse Graphs No description or website provided. 11 commits 1 branch 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit c03d332 Jan 10, 2016 rsolomo Merge pull request #8 from cmr/master … Relicense to dual MIT/Apache-2.0 Permalink Failed to load latest commit information. src Simplified test cases by allowing &str Jul 20, 2015 .gitignore initial commit Jul 9, 2015 .travis.yml initial commit Jul 9, 2015 Cargo.lock initial commit Jul 9, 2015 Cargo.toml Relicense to dual MIT/Apache-2.0 Jan 10, 2016 LICENSE-APACHE Relicense to dual MIT/Apache-2.0 Jan 11, 2016 LICENSE-MIT Relicense to dual MIT/Apache-2.0 Jan 11, 2016 README.md Relicense to dual MIT/Apache-2.0 Jan 11, 2016 README.md cargo-check This is a wrapper around cargo rustc -- -Zno-trans. It can be helpful for running a faster compile if you only need correctness checks. Installation Install with cargo install cargo-check Note that additonal cargo rustc options can still be passed through. In other words, this: cargo check -v -- -Zprint-link-args  Should do the same thing as this: cargo rustc -v -- -Zprint-link-args -Zno-trans  And this: cargo check --lib  Will do the same thing as this: cargo rustc --lib -- -Zno-trans  License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rsolomo/cargo-check"	"— a wrapper around which can be helpful for running a faster compile if you only need correctness checks"	"true"
"Build system"	""	"https://travis-ci.org/rsolomo/cargo-check"	"— a wrapper around which can be helpful for running a faster compile if you only need correctness checks"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a wrapper around which can be helpful for running a faster compile if you only need correctness checks"	"true"
"Build system"	"kbknapp/cargo-count"	"https://github.com/kbknapp/cargo-count"	"— lists source code counts and details about cargo projects, including unsafe statistics"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"44"	"3"	"5"	"GitHub - kbknapp/cargo-count: a cargo subcommand for counting lines of code in Rust projects Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 44 Fork 5 kbknapp/cargo-count Code Issues 3 Pull requests 0 Pulse Graphs a cargo subcommand for counting lines of code in Rust projects 64 commits 7 branches 5 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto dev homu-tmp master update updates v0.2.0 Nothing to show v0.2.1 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit c729008 Apr 1, 2016 homu Auto merge of #26 - 0x1997:patch-1, r=kbknapp … fix: fix division by zero  Currently it shows `0 (NaN%)`. Permalink Failed to load latest commit information. src fix: fix division by zero Mar 31, 2016 .clog.toml feat: initial implementation Aug 21, 2015 .gitignore style: clippy and rustfmt runs Oct 28, 2015 .travis.yml chore: pins travis to working nightly with clippy Mar 22, 2016 CHANGELOG.md chore: increase version Dec 24, 2015 CONTRIBUTING.md chore: adds contributor guidelines Nov 4, 2015 Cargo.lock wip: updates Mar 21, 2016 Cargo.toml wip: updates Mar 22, 2016 LICENSE-MIT feat: initial implementation Aug 21, 2015 README.md imp: Ignore files in accordance with .gitignore Dec 23, 2015 cargo-count.png chore(readme): add dependencies tree to README.md Aug 25, 2015 rustfmt.toml style: clippy and rustfmt runs Oct 29, 2015 README.md cargo-count Linux: A cargo subcommand for displaying line counts of source code in projects, including a niave unsafe counter for Rust source files. This subcommand was originally based off and inspired by the project tokei by Aaronepower Demo To count the source code in the Rust repository (checkout 4c99649), and print some naive statistics on how much ""unsafe"" code exists. NOTE: The Rust repository is quite large, if you're on a slow internet connect consider using a smaller repository, such as the cargo-count repo. $ git clone https://github.com/rust-lang/rust $ cd rust $ cargo count --separator , --unsafe-statistics Gathering information...          Language    Files  Lines    Blanks  Comments  Code     Unsafe (%)          --------    -----  -----    ------  --------  ----     ----------          Rust        6,018  528,510  66,984  133,698   327,792  3,163 (0.96%)          C           54     9,962    1,445   1,492     7,025    7,025 (100.00%)          CSS         4      1,266    149     52        1,065              JavaScript  4      1,118    131     166       821                Python      31     4,797    843     585       3,369              C Header    13     1,865    284     585       996      996 (100.00%)          C++         4      1,611    185     81        1,345    1,345 (100.00%)          --------    -----  -----    ------  --------  ----     ---------- Totals:              6,128  549,129  70,021  136,659   342,413  12,529 (3.66%)   The --separator , sets a , character as the thousands separator, and --unsafe-statistics looks for, and counts lines of unsafe. Installing cargo-count can be installed with cargo install $ cargo install cargo-count  This may require a nightly version of cargo if you get an error about the install command not being found. You may also compile and install the traditional way by followin the instructions below. Compiling Follow these instructions to compile cargo-count, then skip down to Installation. Ensure you have current version of cargo and Rust installed Clone the project $ git clone https://github.com/kbknapp/cargo-count && cd cargo-count Build the project $ cargo build --release (NOTE: There is a large performance differnce when compiling without optimizations, so I recommend alwasy using --release to enable to them) Once complete, the binary will be located at target/release/cargo-count Installation and Usage All you need to do is place cargo-count somewhere in your $PATH. Then run cargo count anywhere in your project directory. For full details see below. Linux / OS X You have two options, place cargo-count into a directory that is already located in your $PATH variable (To see which directories those are, open a terminal and type echo ""${PATH//:/\n}"", the quotation marks are important), or you can add a custom directory to your $PATH Option 1 If you have write permission to a directory listed in your $PATH or you have root permission (or via sudo), simply copy the cargo-count to that directory # sudo cp cargo-count /usr/local/bin Option 2 If you do not have root, sudo, or write permission to any directory already in $PATH you can create a directory inside your home directory, and add that. Many people use $HOME/.bin to keep it hidden (and not clutter your home directory), or $HOME/bin if you want it to be always visible. Here is an example to make the directory, add it to $PATH, and copy cargo-count there. Simply change bin to whatever you'd like to name the directory, and .bashrc to whatever your shell startup file is (usually .bashrc, .bash_profile, or .zshrc) $ mkdir ~/bin $ echo ""export PATH=$PATH:$HOME/bin"" >> ~/.bashrc $ cp cargo-count ~/bin $ source ~/.bashrc Windows On Windows 7/8 you can add directory to the PATH variable by opening a command line as an administrator and running C:\> setx path ""%path%;C:\path\to\cargo-count\binary"" Otherwise, ensure you have the cargo-count binary in the directory which you operating in the command line from, because Windows automatically adds your current directory to PATH (i.e. if you open a command line to C:\my_project\ to use cargo-count ensure cargo-count.exe is inside that directory as well). Options There are a few options for using cargo-count which should be somewhat self explanitory. USAGE:     cargo count [FLAGS] [OPTIONS] [--] [ARGS]  FLAGS:     -S, --follow-symlinks      Follows symlinks and counts source files it finds     -a, --all                  Do not ignore .gitignored paths                                (Defaults to false when omitted)     -h, --help                 Prints help information         --unsafe-statistics    Displays lines and percentages of ""unsafe"" code     -V, --version              Prints version information     -v, --verbose              Print verbose output  OPTIONS:     -l, --language <exts>...    Only count these languges (by source code extension)                                 (i.e. '-l js py cpp')     -e, --exclude <paths>...    Files or directories to exclude (automatically includes '.git')         --utf8-rule <rule>      Sets the UTF-8 parsing rule (Defaults to 'strict')                                  [values: ignore lossy strict]     -s, --separator <sep>       Set the thousands separator for pretty printing  ARGS:     to_count...    The files or directories (including children) to count                    (defaults to current working directory when omitted)  When using '--exclude <path>' the path given can either be relative to the current  directory, or absolute. When '<path>' is a file, it must be relative to the current  directory or it will not be found. Example, if the current directory has a child  directory named 'target' with a child fild 'test.rs' and you use `--exclude target/test.rs'   Globs are also supported. For example, to eclude 'test.rs' files from all child directories  of the current directory you could do '--exclude */test.rs'.  License cargo-count is released under the terms of the MIT. See the LICENSE-MIT file for the details. Dependencies Tree Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kbknapp/cargo-count"	"— lists source code counts and details about cargo projects, including unsafe statistics"	"true"
"Build system"	""	"https://travis-ci.org/kbknapp/cargo-count"	"— lists source code counts and details about cargo projects, including unsafe statistics"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— lists source code counts and details about cargo projects, including unsafe statistics"	"true"
"Build system"	"pwoolcoc/cargo-do"	"https://github.com/pwoolcoc/cargo-do"	"— run multiple cargo commands in a row"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"2"	"3"	"GitHub - pwoolcoc/cargo-do: allows you to run multiple cargo commands in a row Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 8 Fork 3 pwoolcoc/cargo-do Code Issues 1 Pull requests 0 Pulse Graphs allows you to run multiple cargo commands in a row 33 commits 1 branch 1 release Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.4.0 Nothing to show New pull request Latest commit e00dcce Mar 16, 2016 pwoolcoc new version for crates.io Permalink Failed to load latest commit information. src Use join instead of connect Oct 13, 2015 .gitignore Initial Commit Nov 20, 2014 .travis.yml Update .travis.yml Dec 23, 2014 Cargo.lock Add travis badge Sep 3, 2015 Cargo.toml new version for crates.io Mar 16, 2016 LICENSE-APACHE new version for crates.io Mar 16, 2016 LICENSE-MIT new version for crates.io Mar 16, 2016 README.md Add travis badge Sep 3, 2015 README.md Cargo Do Allows you to put multiple cargo commands on one line, e.g. $ cargo do clean, update, build  Installation I don't know if there is an ""official"" way to install Cargo subcommands, but the easiest way is to put the generated cargo-do binary in the same directory as cargo. So, if you are on a *nix system, you could do the following: $ git clone https://github.com/pwoolcoc/cargo-do $ cd cargo-do $ cargo build $ cp target/cargo-do $(dirname $(which cargo))/  Verify that it is correctly installed by checking that do is in the command list: $ cargo --list | egrep ""do$""     do  Using commas in your commands Since cargo-do uses commas to delimit commands, you have to be careful when trying to run a command with a comma in it. For example, this command will not run properly: $ cargo do update, build, bench --bench ""why are there commas, here""  It will be treated as if you did this: $ cargo update $ cargo build $ cargo bench --bench ""why are there commas $ cargo here""  Which is obviously not what you want. Because of the magic of shell escaping, you have a couple choices on how to get around this: $ cargo do bench --bench ""why are there commas\, here""  or $ cargo do bench --bench why are there commas \\, here  However you want to do it, cargo-do will not delimit commands on an escaped comma. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pwoolcoc/cargo-do"	"— run multiple cargo commands in a row"	"true"
"Build system"	"maxsnew/cargo-dot"	"https://github.com/maxsnew/cargo-dot"	"— generate graphs of a Cargo project's dependencies"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"34"	"4"	"8"	"GitHub - maxsnew/cargo-dot: Generate graphs of a Cargo project's dependencies Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 34 Fork 8 maxsnew/cargo-dot Code Pull requests 0 Pulse Graphs Generate graphs of a Cargo project's dependencies 80 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags globin-rustup master Nothing to show Nothing to show New pull request Latest commit 66e4119 Nov 19, 2015 maxsnew Deprecate Project Permalink Failed to load latest commit information. etc update deps pic Jul 20, 2015 src use dot instead of graphviz Jul 20, 2015 .gitignore Add README with examples Sep 7, 2014 .travis.yml Update .travis.yml to test against all Rusts Jul 20, 2015 Cargo.lock use dot instead of graphviz Jul 20, 2015 Cargo.toml use dot instead of graphviz Jul 20, 2015 LICENSE Add BSD3 LICENSE May 26, 2015 README.md Deprecate Project Nov 19, 2015 README.md This project is deprecated in favor of cargo-graph. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/maxsnew/cargo-dot"	"— generate graphs of a Cargo project's dependencies"	"true"
"Build system"	""	"https://travis-ci.org/maxsnew/cargo-dot"	"— generate graphs of a Cargo project's dependencies"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— generate graphs of a Cargo project's dependencies"	"true"
"Build system"	"killercup/cargo-edit"	"https://github.com/killercup/cargo-edit"	"— allows you to add and list dependencies by reading/writing to your Cargo.toml file from the command line"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"111"	"6"	"16"	"GitHub - killercup/cargo-edit: A utility for managing cargo dependencies from the command line. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 111 Fork 16 killercup/cargo-edit Code Issues 15 Pull requests 2 Pulse Graphs A utility for managing cargo dependencies from the command line. http://killercup.github.io/cargo-edit/ 231 commits 12 branches 3 releases 14 contributors Rust 99.5% Makefile 0.5% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto feature/clap feature/fix-nightly-for-clippy feature/generalize feature/hyper-hyper feature/issue-60 feature/test-on-windows feature/update-deps feature/59-multiple-crates gh-pages master release/v0.1.3 Nothing to show v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 66f27e1 Jul 15, 2016 homu Auto merge of #90 - killercup:release/v0.1.3, r=killercup … Release/v0.1.3 Permalink Failed to load latest commit information. src `--upgrade` Documentation Jul 15, 2016 tests Fix Target Cfg Test String Interpolation Jul 15, 2016 .editorconfig Add Editorconfig, Travis-CI Jun 20, 2015 .gitignore Add Rustfmt Stuff to gitignore Oct 9, 2015 .travis.yml fix cargo-travis syntax Apr 9, 2016 Cargo.lock Update Dependencies Jul 15, 2016 Cargo.toml Bump Version to 0.1.3 Jul 15, 2016 LICENSE New Readme for Separate Binaries Oct 11, 2015 Makefile Fix `make fmt` Oct 24, 2015 README.md `--upgrade` Documentation Jul 15, 2016 rustfmt.toml Run Rustfmt Oct 10, 2015 README.md cargo edit This tool extends Cargo to allow you to add and list dependencies by reading/writing to your Cargo.toml file from the command line. Currently available subcommands: cargo add cargo list cargo rm Installation Using cargo install If you have a recent version of cargo, you can use cargo install to get all the tools provided by cargo-edit in one simple step: $ cargo install cargo-edit (Please check cargo's documentation to learn how cargo install works and how to set up your system so it finds binaries installed by cargo.) Without cargo install You can build all commands of cargo-edit from the source available on GitHub: $ git clone https://github.com/killercup/cargo-edit.git $ cd cargo-edit $ cargo build --release Once you have the executables, you can move them to a directory in your $PATH, e.g. $ cp target/release/cargo-* ~/.bin/ You should be able to use the new Cargo subcommands now. Available Subcommands cargo add Add new dependencies to your Cargo.toml. When no version is specified, cargo add will try to query the latest version's number from crates.io. Examples $ # Add a specific version $ cargo add regex@0.1.41 --dev $ # Query the latest version from crates.io and adds it as build dependency $ cargo add gcc --build $ # Add a non-crates.io crate $ cargo add local_experiment --path=lib/trial-and-error/ $ # Also $ cargo add lib/trial-and-error/ Usage $ cargo add --help Usage:     cargo add <crate> [--dev|--build|--optional] [--ver=<semver>|--git=<uri>|--path=<uri>] [options]     cargo add (-h|--help)     cargo add --version  Options:     -D --dev                Add crate as development dependency.     -B --build              Add crate as build dependency.     --ver=<semver>          Specify the version to grab from the registry (crates.io).                             You can also specify versions as part of the name, e.g                             `cargo add bitflags@0.3.2`.     --git=<uri>             Specify a git repository to download the crate from.     --path=<uri>            Specify the path the crate should be loaded from.     --optional              Add as an optional dependency (for use in features.)     --manifest-path=<path>  Path to the manifest to add a dependency to.     -h --help               Show this help page.     --version               Show version.     --upgrade=<method>      Choose method of semantic version upgrade. Must be one of                             ""none"" (exact version), ""patch"" (`~` modifier), ""minor""                             (`^` modifier, default), or ""all"" (`>=`).  Add a dependency to a Cargo.toml manifest file.  If <crate> is a github or gitlab repository URL, or a local path, `cargo add` will try to automatically get the crate name and set the appropriate `--git` or `--path` value.   cargo list Examples $ cargo list clippy          0.0.19 docopt          0.6 pad             0.1 rustc-serialize 0.3 semver          0.1 toml            0.1  $ cargo list --tree ├── assert_cli (0.1.0) │   ├── ansi_term (0.6.3) │   └── difference (0.4.1) │       └── getopts (0.2.14) ├── clippy (0.0.19) │   └── unicode-normalization (0.1.1) ├── docopt (0.6.73) │   ├── regex (0.1.41) │   │   ├── aho-corasick (0.3.2) │   │   │   └── memchr (0.1.6) │   │   │       └── libc (0.1.10) │   │   ├── memchr (0.1.6) │   │   │   └── libc (0.1.10) │   │   └── regex-syntax (0.2.2) │   ├── rustc-serialize (0.3.16) │   └── strsim (0.3.0) ├── pad (0.1.4) │   └── unicode-width (0.1.3) ├── rustc-serialize (0.3.16) ├── semver (0.1.20) └── toml (0.1.23)     └── rustc-serialize (0.3.16)  Usage $ cargo list --help Usage:     cargo list [<section>] [options]     cargo list (-h|--help)     cargo list --version  Options:     --manifest-path=<path>  Path to the manifest to add a dependency to.     --tree                  List dependencies recursively as tree.     -h --help               Show this help page.  Display a crate's dependencies using its Cargo.toml file.  cargo rm Remove dependencies from your Cargo.toml. Examples $ cargo rm regex $ cargo rm regex --dev $ cargo rm regex --build Usage $ cargo rm --help Usage:     cargo rm <crate> [--dev|--build] [options]     cargo rm (-h|--help)     cargo rm --version  Options:     -D --dev                Remove crate as development dependency.     -B --build              Remove crate as build dependency.     --manifest-path=<path>  Path to the manifest to remove a dependency from.     -h --help               Show this help page.     --version               Show version.  Remove a dependency to a Cargo.toml manifest file.  License Apache-2.0/MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/killercup/cargo-edit"	"— allows you to add and list dependencies by reading/writing to your Cargo.toml file from the command line"	"true"
"Build system"	""	"https://travis-ci.org/killercup/cargo-edit"	"— allows you to add and list dependencies by reading/writing to your Cargo.toml file from the command line"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— allows you to add and list dependencies by reading/writing to your Cargo.toml file from the command line"	"true"
"Build system"	"kbknapp/cargo-graph"	"https://github.com/kbknapp/cargo-graph"	"— updated fork of with additional features"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"32"	"4"	"5"	"GitHub - kbknapp/cargo-graph: A cargo subcommand for creating GraphViz DOT files and dependency graphs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 32 Fork 5 kbknapp/cargo-graph Code Issues 4 Pull requests 1 Pulse Graphs A cargo subcommand for creating GraphViz DOT files and dependency graphs 155 commits 2 branches 3 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto master Nothing to show v0.2.0 v0.1.3 v0.1.1 Nothing to show New pull request Latest commit 6260e6c Mar 24, 2016 homu Auto merge of #26 - kbknapp:updates, r=kbknapp … Updates Permalink Failed to load latest commit information. src Merge branch 'master' into updates Mar 23, 2016 .clog.toml .gitignore .travis.yml CHANGELOG.md chore: increase version Dec 11, 2015 CONTRIBUTING.md Cargo.lock Cargo.toml LICENSE-MIT chore: rename license file but same license Nov 4, 2015 README.md cargo-graph.png rainbow-graph.png rustfmt.toml README.md cargo-graph Linux: A cargo subcommand for building GraphViz DOT files of dependency graphs. This subcommand was originally based off and inspired by the project cargo-dot by Max New Demo Let's say we wanted to build a dependency graph of cargo-count but we wanted optional dependencies to use red dashed lines and black boxes, and regular (aka ""build"") dependencies to use orange lines to green diamonds, one would run the following. NOTE: GraphViz dot needs to be installed to produce the .PNG from the dotfile $ cargo graph --optional-line-style dashed --optional-line-color red --optional-shape box --build-shape diamond --build-color green --build-line-color orange > cargo-count.dot $ dot -Tpng > rainbow-graph.png cargo-count.dot  NOTE: It's also possible to run cargo graph [options] | dot [options] > [file] instead of individual commands The first command produces a GraphViz DOT file which looks like this: digraph dependencies {   N0[label=""cargo-count"",shape=diamond,color=green];   N1[label=""ansi_term"",shape=box];   N2[label=""clap"",shape=diamond,color=green];   N3[label=""clippy"",shape=box];   N4[label=""glob"",shape=diamond,color=green];   N5[label=""regex"",shape=diamond,color=green];   N6[label=""tabwriter"",shape=diamond,color=green];   N7[label=""aho-corasick"",shape=diamond,color=green];   N8[label=""memchr"",shape=diamond,color=green];   N9[label=""bitflags"",shape=diamond,color=green];   N10[label=""strsim"",shape=diamond,color=green];   N11[label=""unicode-normalization"",shape=diamond,color=green];   N12[label=""libc"",shape=diamond,color=green];   N13[label=""regex-syntax"",shape=diamond,color=green];   N14[label=""unicode-width"",shape=diamond,color=green];   N0 -> N1[label="""",style=dashed,color=red];   N0 -> N2[label="""",color=orange];   N0 -> N3[label="""",style=dashed,color=red];   N0 -> N4[label="""",color=orange];   N0 -> N5[label="""",color=orange];   N0 -> N6[label="""",color=orange];   N7 -> N8[label="""",color=orange];   N2 -> N1[label="""",style=dashed,color=red];   N2 -> N9[label="""",color=orange];   N2 -> N10[label="""",color=orange];   N3 -> N11[label="""",color=orange];   N8 -> N12[label="""",color=orange];   N5 -> N7[label="""",color=orange];   N5 -> N8[label="""",color=orange];   N5 -> N13[label="""",color=orange];   N6 -> N14[label="""",color=orange]; }  The second command produces a PNG image of the graph which looks like: Now, why someone would do that to a graph is a different story...but it's possible :) Installing cargo-graph can be installed with cargo install $ cargo install cargo-graph  This may require a nightly version of cargo if you get an error about the install command not being found. You may also compile and install the traditional way by following the instructions below. Compiling Follow these instructions to compile cargo-count, then skip down to Installation. Ensure you have current version of cargo and Rust installed Clone the project $ git clone https://github.com/kbknapp/cargo-graph && cd cargo-graph Build the project $ cargo build --release (NOTE: There is a large performance difference when compiling without optimizations, so I recommend always using --release to enable to them) Once complete, the binary will be located at target/release/cargo-graph Installation and Usage All you need to do is place cargo-graph somewhere in your $PATH. Then run cargo graph anywhere in your project directory. For full details see below. Linux / OS X You have two options, place cargo-graph into a directory that is already located in your $PATH variable (To see which directories those are, open a terminal and type echo ""${PATH//:/\n}"", the quotation marks are important), or you can add a custom directory to your $PATH Option 1 If you have write permission to a directory listed in your $PATH or you have root permission (or via sudo), simply copy the cargo-graph to that directory # sudo cp cargo-graph/usr/local/bin Option 2 If you do not have root, sudo, or write permission to any directory already in $PATH you can create a directory inside your home directory, and add that. Many people use $HOME/.bin to keep it hidden (and not clutter your home directory), or $HOME/bin if you want it to be always visible. Here is an example to make the directory, add it to $PATH, and copy cargo-graph there. Simply change bin to whatever you'd like to name the directory, and .bashrc to whatever your shell startup file is (usually .bashrc, .bash_profile, or .zshrc) $ mkdir ~/bin $ echo ""export PATH=$PATH:$HOME/bin"" >> ~/.bashrc $ cp cargo-graph~/bin $ source ~/.bashrc Windows On Windows 7/8 you can add directory to the PATH variable by opening a command line as an administrator and running C:\> setx path ""%path%;C:\path\to\cargo-graph\binary"" Otherwise, ensure you have the cargo-graph binary in the directory which you operating in the command line from, because Windows automatically adds your current directory to PATH (i.e. if you open a command line to C:\my_project\ to use cargo-graph ensure cargo-graph.exe is inside that directory as well). Options There are a few options for using cargo-graph which should be somewhat self explanatory. USAGE:     cargo graph [FLAGS] [OPTIONS]  FLAGS:     -h, --help       Prints help information     -I, --include-versions    Include the dependency version on nodes     -V, --version    Prints version information  OPTIONS:         --build-color <COLOR>            Color for regular deps (Defaults to 'black')                                           [values: blue black yellow purple green red white orange]         --build-deps <true|false>        Should build deps be in the graph? (Defaults to 'true')                                          ex. --build-deps=false OR --build-deps=no         --build-line-color <COLOR>       Line color for regular deps (Defaults to 'black')                                           [values: blue black yellow purple green red white orange]         --build-line-style <STYLE>       Line style for build deps (Defaults to 'solid')                                           [values: solid dotted dashed]         --build-shape <SHAPE>            Shape for regular deps (Defaults to 'round')                                           [values: box round diamond triangle]         --dev-color <COLOR>              Color for dev deps (Defaults to 'black')                                           [values: blue black yellow purple green red white orange]         --dev-deps <true|false>          Should dev deps be included in the graph? (Defaults to 'false')                                          ex. --dev-deps=true OR --dev-deps=yes         --dev-line-color <COLOR>         Line color for dev deps (Defaults to 'black')                                           [values: blue black yellow purple green red white orange]         --dev-line-style <STYLE>         Line style for dev deps (Defaults to 'solid')                                           [values: solid dotted dashed]         --dev-shape <SHAPE>              Shape for dev deps (Defaults to 'round')                                           [values: box round diamond triangle]         --dot-file <FILE>                Output file (Default to stdout)         --lock-file <FILE>               Specify location of .lock file (Default 'Cargo.lock')         --manifest-file <FILE>           Specify location of manifest file (Default 'Cargo.toml')         --optional-color <COLOR>         Color for optional deps (Defaults to 'black')                                           [values: blue black yellow purple green red white orange]         --optional-deps <true|false>     Should optional deps be in the graph? (Defaults to 'true')                                          ex. --optional-deps=false OR --optional-deps=no         --optional-line-color <COLOR>    Line color for optional deps (Defaults to 'black')                                           [values: blue black yellow purple green red white orange]         --optional-line-style <STYLE>    Line style for optional deps (Defaults to 'solid')                                           [values: solid dotted dashed]         --optional-shape <SHAPE>         Shape for optional deps (Defaults to 'round')                                           [values: box round diamond triangle]  License cargo-graph is released under the terms of the MIT. See the LICENSE-MIT file for the details. Dependencies Tree Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kbknapp/cargo-graph"	"— updated fork of with additional features"	"true"
"Build system"	""	"https://travis-ci.org/kbknapp/cargo-graph"	"— updated fork of with additional features"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— updated fork of with additional features"	"true"
"Build system"	"kbknapp/cargo-outdated"	"https://github.com/kbknapp/cargo-outdated"	"— displays when newer versions of Rust dependencies are available, or out of date"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"44"	"6"	"8"	"GitHub - kbknapp/cargo-outdated: A cargo subcommand for displaying when Rust dependencies are out of date Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 44 Fork 8 kbknapp/cargo-outdated Code Issues 4 Pull requests 0 Pulse Graphs A cargo subcommand for displaying when Rust dependencies are out of date 71 commits 3 branches 3 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto homu-tmp master Nothing to show v0.1.3 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit bb342f5 May 7, 2016 homu Auto merge of #24 - kbknapp:updates, r=kbknapp … Updates Permalink Failed to load latest commit information. src feat(Exit Codes): adds feature for custom exit code on new vers May 6, 2016 .clog.toml chore: adds .clog.toml for use with clog Aug 2, 2015 .gitignore style: rustfmt run Oct 28, 2015 .travis.yml CHANGELOG.md CONTRIBUTING.md chore: adds contributing guidelines Aug 11, 2015 Cargo.lock Cargo.toml chore: updates deps May 6, 2016 LICENSE-MIT README.md docs: adds demo Nov 3, 2015 cargo-outdated.png chore(readme): add dependencies tree to README.md Aug 25, 2015 rustfmt.toml README.md cargo-outdated Linux: A cargo subcommand for displaying when Rust dependencies are out of date About cargo-outdated is a very early proof-of-concept for displaying when dependencies have newer versions available. Demo Once installed (see below) running cargo outdated in a project directory looks like the following: $ cargo outdated Checking for SemVer compatible updates...Done Checking for the latest updates...Done The following dependencies have newer versions available:      Name                 Project Ver  SemVer Compat  Latest Ver     regex->regex-syntax     0.2.1        0.2.2         0.2.2     regex->memchr           0.1.5        0.1.6         0.1.6     clap                    1.2.3        1.2.5         1.4.7     tabwriter               0.1.23       0.1.24        0.1.24     clippy                  0.0.11       0.0.22        0.0.22     clap->ansi_term         0.6.3          --          0.7.0     regex->aho-corasick     0.3.0        0.3.4         0.4.0     ansi_term               0.6.3          --          0.7.0  Installing cargo-outdated can be installed with cargo install $ cargo install cargo-outdated  This may require a nightly version of cargo if you get an error about the install command not being found. You may also compile and install the traditional way by followin the instructions below. Compiling Follow these instructions to compile cargo-outdated, then skip down to Installation. Ensure you have current version of cargo and Rust installed Clone the project $ git clone https://github.com/kbknapp/cargo-outdated && cd cargo-outdated Build the project $ cargo build --release Once complete, the binary will be located at target/release/cargo-outdated Installation and Usage All you need to do is place cargo-outdated somewhere in your $PATH. Then run cargo outdated anywhere in your project directory. For full details see below. Linux / OS X You have two options, place cargo-outdated into a directory that is already located in your $PATH variable (To see which directories those are, open a terminal and type echo ""${PATH//:/\n}"", the quotation marks are important), or you can add a custom directory to your $PATH Option 1 If you have write permission to a directory listed in your $PATH or you have root permission (or via sudo), simply copy the cargo-outdated to that directory # sudo cp cargo-outdated /usr/local/bin Option 2 If you do not have root, sudo, or write permission to any directory already in $PATH you can create a directory inside your home directory, and add that. Many people use $HOME/.bin to keep it hidden (and not clutter your home directory), or $HOME/bin if you want it to be always visible. Here is an example to make the directory, add it to $PATH, and copy cargo-outdated there. Simply change bin to whatever you'd like to name the directory, and .bashrc to whatever your shell startup file is (usually .bashrc, .bash_profile, or .zshrc) $ mkdir ~/bin $ echo ""export PATH=$PATH:$HOME/bin"" >> ~/.bashrc $ cp cargo-outdated ~/bin $ source ~/.bashrc Windows On Windows 7/8 you can add directory to the PATH variable by opening a command line as an administrator and running C:\> setx path ""%path%;C:\path\to\cargo-outdated\binary"" Otherwise, ensure you have the cargo-outdated binary in the directory which you operating in the command line from, because Windows automatically adds your current directory to PATH (i.e. if you open a command line to C:\my_project\ to use cargo-outdated ensure cargo-outdated.exe is inside that directory as well). Options There are a few options for using cargo-outdated which should be somewhat self explanitory. USAGE:     cargo outdated [FLAGS] [OPTIONS]  FLAGS:     -h, --help              Prints help information     -R, --root-deps-only    Only check root dependencies (Equivilant to --depth=1)     -V, --version           Prints version information     -v, --verbose           Print verbose output  OPTIONS:     -d, --depth <DEPTH>       How deep in the dependency chain to search                               (Defaults to all dependencies when omitted)     -p, --package <PKG>...    Package to inspect for updates  License cargo-outdated is released under the terms of either the MIT or Apache 2.0 license. See the LICENSE-MIT or LICENSE-APACHE file for the details. Dependencies Tree Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kbknapp/cargo-outdated"	"— displays when newer versions of Rust dependencies are available, or out of date"	"true"
"Build system"	""	"https://travis-ci.org/kbknapp/cargo-outdated"	"— displays when newer versions of Rust dependencies are available, or out of date"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— displays when newer versions of Rust dependencies are available, or out of date"	"true"
"Build system"	"imp/cargo-info"	"https://gitlab.com/imp/cargo-info"	"[] — queries crates.io for crates details from command line"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cyril Plisko / cargo-info · GitLab <p><img src=""//piwik.gitlab.com/piwik.php?idsite=1"" style=""border:0;"" alt=""""> Toggle navigation Toggle navigation This project Loading... Sign in Cyril Plisko / cargo-info Go to a project Toggle navigation Toggle navigation pinning Projects Groups Snippets Help Project Activity Repository Pipelines Graphs Issues 5 Merge Requests 1 Wiki Network Create a new issue Builds Commits C cargo-info cargo info subcommand - show remote crate info Star 0 HTTPS SSH HTTPS Files (280 KB) Commits (108) Branches (2) Tags (10) Changelog 6b4c64a5 Bump version to 0.4.0 · 2016-07-11 10:50:18 +0300 by Cyril Plisko cargo-info Query crates.io for crates details Build status branch status master develop Building on OSX 10.11+ export OPENSSL_INCLUDE_DIR=/usr/local/opt/openssl/include cargo clean cargo build"	"null"	"null"	"[] — queries crates.io for crates details from command line"	"true"
"Build system"	"cargo-info"	"https://crates.io/crates/cargo-info"	"[] — queries crates.io for crates details from command line"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — queries crates.io for crates details from command line"	"true"
"Build system"	""	"https://travis-ci.org/imp/cargo-info"	"[] — queries crates.io for crates details from command line"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — queries crates.io for crates details from command line"	"true"
"Build system"	"imp/cargo-multi"	"https://github.com/imp/cargo-multi"	"[] — runs specified cargo command on multiple crates"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"0"	"1"	"1"	"GitHub - imp/cargo-multi: Extends cargo to execute the given command on multiple crates Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 0 Fork 1 imp/cargo-multi Code Issues 0 Pull requests 1 Pulse Graphs Extends cargo to execute the given command on multiple crates 93 commits 3 branches 13 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags arg-iter develop master Nothing to show 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.1 0.3.0 0.2.1 0.2.0 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 21c4ecd Jun 18, 2016 imp Bump version to 0.4.5 Permalink Failed to load latest commit information. src .gitignore .travis.yml CHANGELOG.md Cargo.lock Cargo.toml LICENSE-APACHE LICENSE-MIT README.md README.md cargo-multi master: develop: Extends cargo to execute the given command on multiple crates. Inspired by git multi. Installation Use cargo to install this subcommand cargo install cargo-multi  Usage Run cargo multi <cargosubcommand> in the directory where you keep your crates. cargo multi update  cargo multi build  cargo multi test  Example $ cargo multi update ---------------------- Executing cargo update ---------------------- cargo:         Updating registry `https://github.com/rust-lang/crates.io-index`         Updating git2 v0.3.5 -> v0.3.4         Removing libgit2-sys v0.4.0         Updating nom v1.2.0 -> v1.2.1         Updating num_cpus v0.2.10 -> v0.2.11         Updating regex v0.1.52 -> v0.1.54         Updating regex-syntax v0.2.3 -> v0.2.5         Updating tar v0.4.3 -> v0.4.4         Removing unicode-bidi v0.2.3         Removing unicode-normalization v0.1.2         Removing url v0.5.5  cargo-multi:         Updating registry `https://github.com/rust-lang/crates.io-index`  elm:         Updating registry `https://github.com/rust-lang/crates.io-index`  gitlab-rs:         Updating registry `https://github.com/rust-lang/crates.io-index`  hyper:         Updating registry `https://github.com/rust-lang/crates.io-index`         Updating num_cpus v0.2.10 -> v0.2.11         Updating regex v0.1.52 -> v0.1.54         Updating regex-syntax v0.2.3 -> v0.2.5         Updating serde v0.6.14 -> v0.6.15         Updating unicase v1.2.1 -> v1.3.0  json:         Updating registry `https://github.com/rust-lang/crates.io-index`         Updating serde v0.6.14 -> v0.6.15  rass:         Updating registry `https://github.com/rust-lang/crates.io-index`  requests-rs:         Updating registry `https://github.com/rust-lang/crates.io-index`         Updating num_cpus v0.2.10 -> v0.2.11         Updating serde v0.6.14 -> v0.6.15         Updating unicase v1.2.1 -> v1.3.0  syncthing-rs:         Updating registry `https://github.com/rust-lang/crates.io-index`         Updating regex v0.1.53 -> v0.1.54         Updating regex-syntax v0.2.4 -> v0.2.5  trust:         Updating registry `https://github.com/rust-lang/crates.io-index`         Removing aho-corasick v0.5.1         Removing docopt v0.6.78         Removing memchr v0.1.10         Removing regex v0.1.54         Removing regex-syntax v0.2.5         Removing rustc-serialize v0.3.18         Removing strsim v0.3.0         Removing utf8-ranges v0.1.3  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/imp/cargo-multi"	"[] — runs specified cargo command on multiple crates"	"true"
"Build system"	"cargo-multi"	"https://crates.io/crates/cargo-multi"	"[] — runs specified cargo command on multiple crates"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — runs specified cargo command on multiple crates"	"true"
"Build system"	""	"https://travis-ci.org/imp/cargo-multi"	"[] — runs specified cargo command on multiple crates"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — runs specified cargo command on multiple crates"	"true"
"Build system"	"DanielKeep/cargo-script"	"https://github.com/DanielKeep/cargo-script"	"— lets people quickly and easily run Rust ""scripts"" which can make use of Cargo's package ecosystem"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"78"	"5"	"6"	"GitHub - DanielKeep/cargo-script: Cargo script subcommand Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 78 Fork 6 DanielKeep/cargo-script Code Issues 5 Pull requests 1 Pulse Graphs Cargo script subcommand 108 commits 6 branches 6 releases Fetching contributors Rust 94.8% Python 5.2% Rust Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags incoming master rustfmt set-cargo-target-dir use-pulldown-cmark working Nothing to show v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 last-using-docopt Nothing to show New pull request Latest commit d8566ab Jul 15, 2016 DanielKeep Update clap to 2.x. … Closes #26. Permalink Failed to load latest commit information. scripts Added test-matrix.py script. Jul 15, 2016 src Update clap to 2.x. Jul 15, 2016 tests Made test runner deal with CARGO_TARGET_DIR. Jul 15, 2016 .gitignore Added .cargo to .gitignore. Oct 21, 2015 .travis.yml Bump to v0.2.0. Jul 15, 2016 CHANGELOG.md Bump to v0.2.0. Jul 15, 2016 Cargo.lock Update clap to 2.x. Jul 15, 2016 Cargo.toml Update clap to 2.x. Jul 15, 2016 LICENSE Changed to MIT/Apache-2.0 dual license. Jan 22, 2016 README.md Bump to v0.2.0. Jul 15, 2016 README.md cargo-script cargo-script is a Cargo subcommand designed to let people quickly and easily run Rust ""scripts"" which can make use of Cargo's package ecosystem. Or, to put it in other words, it lets you write useful, but small, Rust programs without having to create a new directory and faff about with Cargo.toml. As such, cargo-script does two major things: Given a script, it extracts the embedded Cargo manifest and merges it with some sensible defaults. This manifest, along with the source code, is written to a fresh Cargo package on-disk. It caches the generated and compiled packages, regenerating them only if the script or its metadata have changed. Installation You can install cargo-script using Cargo's install subcommand: cargo install cargo-script Manually Compiling and Installing cargo-script requires Rust 1.6 or higher to build. Rust 1.4+ was supported prior to version 0.2. Once built, you should place the resulting executable somewhere on your PATH. At that point, you should be able to invoke it by using cargo script. Note that you can run the executable directly, but the first argument will need to be script. If you want to run cargo script from a hashbang, you should also install the run-cargo-script program. We strongly recommend installing this program to the PATH and using #!/usr/bin/env run-cargo-script as the hashbang line. Usage The simplest way to use cargo-script is to simply pass it the name of the Rust script you want to execute: $ echo 'fn main() { println!(""Hello, World!""); }' > hello.rs $ cargo script hello.rs    Compiling hello v0.1.0 (file:///C:/Users/drk/AppData/Local/Cargo/script-cache/file-hello-25c8c198030c5d089740-3ace88497b98af47db6e) Hello, World! $ cargo script hello # you can omit the file extension Hello, World! Note that cargo-script does not currently do anything to suppress the regular output of Cargo. This is definitely on purpose and not simply out of abject laziness. You may also embed a partial Cargo manifest at the start of your script, as shown below. cargo-script specifically supports the .crs extension to distinguish such ""Cargoified"" files from regular Rust source, but it will process regular .rs files in exactly the same manner. Note that all of the following are equivalent: now.rs (code block manifest and UNIX hashbang): #!/usr/bin/env run-cargo-script //! This is a regular crate doc comment, but it also contains a partial //! Cargo manifest.  Note the use of a *fenced* code block, and the //! `cargo` ""language"". //! //! ```cargo //! [dependencies] //! time = ""0.1.25"" //! ``` extern crate time; fn main() {     println!(""{}"", time::now().rfc822z()); } now.rs (dependency-only, short-hand manifest): // cargo-deps: time=""0.1.25"" // You can also leave off the version number, in which case, it's assumed // to be ""*"".  Also, the `cargo-deps` comment *must* be a single-line // comment, and it *must* be the first thing in the file, after the // hashbang. extern crate time; fn main() {     println!(""{}"", time::now().rfc822z()); } Note: you can write multiple dependencies by separating them with commas. E.g. time=""0.1.25"", libc=""0.2.5"". now.crs (prefix manifest; these might be removed in the future): [dependencies] time = ""0.1.25"" --- extern crate time; fn main() {     println!(""{}"", time::now().rfc822z()); } $ cargo script now     Updating registry `https://github.com/rust-lang/crates.io-index`    Compiling libc v0.1.8    Compiling gcc v0.3.5    Compiling time v0.1.25    Compiling now v0.1.0 (file:///C:/Users/drk/AppData/Local/Cargo/script-cache/file-now-1410beff463a5c50726f-8dbf2bcf69d2d8208c4c) Sat, 30 May 2015 19:26:57 +1000 If you are in a hurry, the above can also be accomplished by telling cargo-script that you wish to evaluate an expression, rather than an actual file: $ cargo script --dep time --expr \     ""extern crate time; time::now().rfc822z().to_string()""     Updating registry `https://github.com/rust-lang/crates.io-index`    Compiling gcc v0.3.5    Compiling libc v0.1.8    Compiling time v0.1.25    Compiling expr v0.1.0 (file:///C:/Users/drk/AppData/Local/Cargo/script-cache/expr-a7ffe37fbe6dccff132f) ""Sat, 30 May 2015 19:32:18 +1000""  Dependencies can also be specified with specific versions (e.g. --dep time=0.1.25); when omitted, cargo-script will simply use ""*"" for the manifest. The above can also be written variously as: cargo script -d time -e ""extern crate time; ..."" cargo script -d time -x time -e ""..."" cargo script --dep-extern time --expr ""..."" cargo script -D time -e ""..."" The --dep-extern/-D option can be used to insert an automatic extern crate item into an expression (or loop, as shown below) script. This only works when the package name and compiled crate name match. If you wish to use a dependency where the package and crate names do not match, you can specify the dependency with --dep/-d, and the extern crate name with --extern/-x. Finally, you can also use cargo-script to write a quick stream filter, by specifying a closure to be called for each line read from stdin, like so: $ cat now.crs | cargo script --loop \     ""let mut n=0; move |l| {n+=1; println!(\""{:>6}: {}\"",n,l.trim_right())}""    Compiling loop v0.1.0 (file:///C:/Users/drk/AppData/Local/Cargo/script-cache/loop-58079283761aab8433b1)      1: [dependencies]      2: time = ""0.1.25""      3: ---      4: extern crate time;      5: fn main() {      6:     println!(""{}"", time::now().rfc822z());      7: }  Note that you can achieve a similar effect to the above by using the --count flag, which causes the line number to be passed as a second argument to your closure: $ cat now.crs | cargo script --count --loop \     ""|l,n| println!(\""{:>6}: {}\"", n, l.trim_right())""    Compiling loop v0.1.0 (file:///C:/Users/drk/AppData/Local/Cargo/script-cache/loop-58079283761aab8433b1)      1: [dependencies]      2: time = ""0.1.25""      3: ---      4: extern crate time;      5: fn main() {      6:     println!(""{}"", time::now().rfc822z());      7: }  Things That Should Probably Be Done Suppress Cargo/rustc output unless there's actually a problem. Downside: scripts that require lots of network access and dependency compilation will appear to hang for a while with no feedback. Somehow convince the Cargo devs to add aggressive caching of dependencies so that compiling anything that has dependencies doesn't take an age. Gist support? I mean, if it's good enough for playpen... License Licensed under either of MIT license (see LICENSE or http://opensource.org/licenses/MIT) Apache License, Version 2.0 (see LICENSE or http://www.apache.org/licenses/LICENSE-2.0) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/DanielKeep/cargo-script"	"— lets people quickly and easily run Rust ""scripts"" which can make use of Cargo's package ecosystem"	"true"
"Build system"	"passcod/cargo-watch"	"https://github.com/passcod/cargo-watch"	"— utility for cargo to compile projects when sources change"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"123"	"6"	"18"	"GitHub - passcod/cargo-watch: Watches over your Cargo project's source Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 123 Fork 18 passcod/cargo-watch Code Issues 8 Pull requests 0 Pulse Graphs Watches over your Cargo project's source 79 commits 1 branch 16 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v3.1.0 v3.0.4 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v2.1.5 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.0.1 v2.0.0 v1.0.3 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit a14b33b Jan 31, 2016 passcod 3.1.0 Permalink Failed to load latest commit information. src Use SIGTERM to kill child processes on Unix Jan 31, 2016 .gitignore Fix #3: plug std{err,out} to enable coloured output Dec 21, 2014 .travis.yml .travis.yml: Switch to container-based build infrastructure Mar 18, 2015 CODE_OF_CONDUCT.md Add Code of Conduct Jun 23, 2015 Cargo.lock 3.1.0 Jan 31, 2016 Cargo.toml 3.1.0 Jan 31, 2016 README.md Adjust readme to current behaviour Jan 31, 2016 README.md $ cargo watch Cargo Watch watches over your project's source for changes, and runs Cargo commands when they occur. If you've used nodemon, gulp, guard, watchman, or similar others, it will probably feel familiar. Install $ cargo install cargo-watch  Or clone and build with $ cargo build then place in your $PATH. Upgrade Cargo has no easy upgrade mechanism at the moment, so you'll need to: $ cargo uninstall cargo-watch $ cargo install cargo-watch  Usage By default, it runs test (which implies build). You can easily override this, though: $ cargo watch [command...]  A few examples: $ cargo watch doc $ cargo watch test bench $ cargo watch ""build --release"" $ cargo watch ""build --release"" ""test test_""  Cargo run Cargo Watch has special behaviour with run commands: it will restart the process on file change. This works especially well when developing servers or other applications that never return on normal operation. Details and tips It pairs well with dybuk, the compiler output prettifier: $ cargo watch check |& dybuk  Just like any Cargo command, it will run from any project subdirectory. Cargo Watch will ignore everything that's not a Rust file, and files that start with either a dot (.foo.rs) or a tilde (~foo.rs). It uses the notify crate for file events, so it supports all platforms, some more efficiently than others (if you use the big three — Linux, Mac, Windows — you will be fine). If your Cargo Watch fails to watch some deep directories but not others, and you are on Linux, you may have hit the inotify watch limit. You can either increase the limit (instructions are on the previous link and at this Guard wiki page), or you can stop whatever it is that's consuming so many inotify watches. Etc Created by Félix Saparelli and awesome contributors. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/passcod/cargo-watch"	"— utility for cargo to compile projects when sources change"	"true"
"Build system"	""	"https://travis-ci.org/passcod/cargo-watch"	"— utility for cargo to compile projects when sources change"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— utility for cargo to compile projects when sources change"	"true"
"Build system"	"SiegeLord/RustCMake"	"https://github.com/SiegeLord/RustCMake"	"— an example project showing usage of CMake with Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"47"	"4"	"9"	"GitHub - SiegeLord/RustCMake: An example project showing usage of CMake with Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 47 Fork 9 SiegeLord/RustCMake Code Issues 1 Pull requests 0 Pulse Graphs An example project showing usage of CMake with Rust 40 commits 2 branches 0 releases 3 contributors CMake 99.2% Rust 0.8% CMake Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix_osx master Nothing to show Nothing to show New pull request Latest commit 0a8eb44 Oct 22, 2015 elitak write to filename ""deps.d"", not ""deps"" … My rustc (v1.3.0) appends a .d suffix to the deps file if it's not present; my build fails because of this, without this patch. Permalink Failed to load latest commit information. cmake write to filename ""deps.d"", not ""deps"" Oct 22, 2015 examples Silence warnings Jul 9, 2014 src Add some new features. Apr 26, 2015 .gitignore Initial commit Dec 29, 2013 .travis.yml I've had enough of these darn success emails in my darn inbox! Jul 15, 2014 CMakeLists.txt Also add the cargo deps folder to rustdoc. Apr 26, 2015 Readme.md Integrate with Travis CI Jan 6, 2014 Readme.md An example of using CMake with Rust. Try it! mkdir build cd build cmake .. -DCMAKE_INSTALL_PREFIX=/tmp make -j make test -j make doc -j make install  cd examples ./example1 ./example2  License: The example files are released into the public domain, and the CMake modules are licensed under the zlib license (see file contents). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/SiegeLord/RustCMake"	"— an example project showing usage of CMake with Rust"	"true"
"Build system"	""	"https://travis-ci.org/SiegeLord/RustCMake"	"— an example project showing usage of CMake with Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— an example project showing usage of CMake with Rust"	"true"
"Caching"	"jaysonsantos/bmemcached-rs"	"https://github.com/jaysonsantos/bmemcached-rs"	"— Memcached library written in pure rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"1"	"1"	"GitHub - jaysonsantos/bmemcached-rs: Rust binary memcached implementation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 1 jaysonsantos/bmemcached-rs Code Issues 0 Pull requests 0 Pulse Graphs Rust binary memcached implementation https://jaysonsantos.github.io/bmemcached-rs/bmemcached/index.html 49 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src tests .gitignore .travis.yml Cargo.toml LICENSE README.md README.md bmemcached-rs Rust binary memcached implementation (ON GOING) Usage extern crate bmemcached;  use std::sync::Arc; use std::thread;  use bmemcached::MemcachedClient;  fn main() {     // Use arc for threading support     let client = Arc::new(MemcachedClient::new(vec![""127.0.0.1:11211""], 5).unwrap());      // Traits examples     let value = ""value"";     client.set(""string"", value, 1000);     let rv: String = client.get(""string"").unwrap();     assert_eq!(rv, ""value"");      client.set(""integer"", 10 as u8, 1000);     let rv: u8 = client.get(""integer"").unwrap();     assert_eq!(rv, 10 as u8);      // Threads example     let mut threads = vec![];     for i in 0..4 {         let client = client.clone();         threads.push(thread::spawn(move || {             let data = format!(""data_n{}"", i);             client.set(&data, &data, 100).unwrap();             let val: String = client.get(&data).unwrap();             client.delete(&data).unwrap();             val         }));     }     for (i, thread) in threads.into_iter().enumerate() {         let result = thread.join();         assert_eq!(result.unwrap(), format!(""data_n{}"", i));     } } Why I am trying to learn rust by reimplementing a python project that I wrote. What works Add Set Replace Get Delete Increment Decrement Consistent Hashing Threading Support Trait usage On all supported functions we use traits to be able to send any type of values to memcached. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jaysonsantos/bmemcached-rs"	"— Memcached library written in pure rust"	"true"
"Caching"	""	"https://travis-ci.org/jaysonsantos/bmemcached-rs"	"— Memcached library written in pure rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Memcached library written in pure rust"	"true"
"Concurrency"	"aturon/crossbeam"	"https://github.com/aturon/crossbeam"	"– Support for parallelism and low-level concurrency in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"439"	"34"	"32"	"GitHub - aturon/crossbeam: Support for parallelism and low-level concurrency in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 34 Star 439 Fork 32 aturon/crossbeam Code Issues 20 Pull requests 6 Pulse Graphs Support for parallelism and low-level concurrency in Rust 145 commits 4 branches 0 releases 22 contributors Rust 95.7% Scala 4.3% Rust Scala Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags blocking-msq linked-list master revert-local Nothing to show Nothing to show New pull request Latest commit 1afa88c May 6, 2016 dns2utf8 committed with aturon Use version without patch version in example (#71) … So the readme needs less updating as the package evolves. Permalink Failed to load latest commit information. scala-bench Adjust benches Aug 26, 2015 src rename pop to try_pop with deprecation warning (#69) Apr 19, 2016 .gitignore Configure cargo better Aug 27, 2015 .travis.yml Update travis to run bench bin Feb 3, 2016 CHANGELOG.md Publish v0.2 Dec 16, 2015 Cargo.toml bump to 0.2.9 Apr 6, 2016 LICENSE-APACHE Match Rust's licenses Aug 27, 2015 LICENSE-MIT Match Rust's licenses Aug 27, 2015 README.md Use version without patch version in example (#71) May 6, 2016 README.md Crossbeam: support for concurrent and parallel programming This crate is an early work in progress. The focus for the moment is concurrency: Non-blocking data structures. These data structures allow for high performance, highly-concurrent access, much superior to wrapping with a Mutex. Ultimately the goal is to include stacks, queues, deques, bags, sets and maps. Memory management. Because non-blocking data structures avoid global synchronization, it is not easy to tell when internal data can be safely freed. The mem module provides generic, easy to use, and high-performance APIs for managing memory in these cases. Synchronization. The standard library provides a few synchronization primitives (locks, semaphores, barriers, etc) but this crate seeks to expand that set to include more advanced/niche primitives, as well as userspace alternatives. Scoped thread API. Finally, the crate provides a ""scoped"" thread API, making it possible to spawn threads that share stack data with their parents. Usage To use Crossbeam, add this to your Cargo.toml: [dependencies] crossbeam = ""0.2"" For examples of what Crossbeam is capable of, see the documentation. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aturon/crossbeam"	"– Support for parallelism and low-level concurrency in Rust"	"true"
"Concurrency"	""	"https://travis-ci.org/aturon/crossbeam"	"– Support for parallelism and low-level concurrency in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"– Support for parallelism and low-level concurrency in Rust"	"true"
"Concurrency"	"nikomatsakis/rayon"	"https://github.com/nikomatsakis/rayon"	"– A data parallelism library for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"403"	"31"	"30"	"GitHub - nikomatsakis/rayon: Rayon: A data parallelism library for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 403 Fork 30 nikomatsakis/rayon Code Issues 10 Pull requests 2 Pulse Graphs Rayon: A data parallelism library for Rust 279 commits 4 branches 4 releases 16 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master no-more-weight scope Nothing to show v0.4.0 v0.3.1 v0.3.0 v0.2.0 Nothing to show New pull request Latest commit a3336fd May 16, 2016 nikomatsakis add build badge Permalink Failed to load latest commit information. benches Introduce `prelude` and change docs/code to use it Feb 23, 2016 demo demo: add a prime sieve Mar 6, 2016 neg-tests-compile par_iter: require more Fn Sync Apr 17, 2016 neg-tests-run Introduce `prelude` and change docs/code to use it Feb 23, 2016 pos-tests-run Rename the `NumberOfThreadsNotEqual` variant to Feb 1, 2016 src add Sized bounds to meet new WF requirements Apr 23, 2016 .gitignore everything builds, sequential quick-sort works Dec 3, 2015 .travis.yml add the sieve demo to .travis.yml Mar 6, 2016 Cargo.toml Update compiletest_rs dependencies Mar 20, 2016 README.md add build badge May 16, 2016 RELEASES.md Release 0.3.0 and bump version number Feb 23, 2016 README.md Rayon Rayon is a data-parallelism library for Rust. It is extremely lightweight and makes it easy to convert a sequential computation into a parallel one. It also guarantees data-race freedom. (You may also enjoy this blog post about Rayon, which gives more background and details about how it works.) Rayon is available on crates.io, and API Documentation is here. You can use Rayon in two ways. Which way you will want will depend on what you are doing: Parallel iterators: convert iterator chains to execute in parallel. The join method: convert recursive, divide-and-conquer style problems to execute in parallel. No matter which way you choose, you don't have to worry about data races: Rayon statically guarantees data-race freedom. For the most part, adding calls to Rayon should not change how your programs works at all, in fact. However, if you operate on mutexes or atomic integers, please see the notes on atomicity. WARNING: Rayon is still in experimental status. It is probably not very robust and not (yet) suitable for production applications. In particular, the handling of panics is known to be terrible. See nikomatsakis/rayon#10 for more details. Parallel Iterators Rayon supports an experimental API called ""parallel iterators"". These let you write iterator-like chains that execute in parallel. For example, to compute the sum of the squares of a sequence of integers, one might write: use rayon::prelude::*; fn sum_of_squares(input: &[i32]) -> i32 {     input.par_iter()          .map(|&i| i * i)          .sum() } Or, to increment all the integers in a slice, you could write: use rayon::prelude::*; fn increment_all(input: &mut [i32]) {     input.par_iter_mut()          .for_each(|p| *p += 1); } To use parallel iterators, first import the traits by adding something like use rayon::prelude::* to your module. You can then call par_iter and par_iter_mut to get a parallel iterator. Like a regular iterator, parallel iterators work by first constructing a computation and then executing it. See the ParallelIterator trait for the list of available methods and more details. (Sorry, proper documentation is still somewhat lacking.) Using join for recursive, divide-and-conquer problems Parallel iterators are actually implemented in terms of a more primitive method called join. join simply takes two closures and potentially runs them in parallel. For example, we could rewrite the increment_all function we saw for parallel iterators as follows (this function increments all the integers in a slice): /// Increment all values in slice. fn increment_all(slice: &mut [i32]) {     if slice.len() < 1000 {         for p in slice { *p += 1; }     } else {         let mid_point = slice.len() / 2;         let (left, right) = slice.split_at_mut(mid_point);         rayon::join(|| increment_all(left), || increment_all(right));     } } Perhaps a more interesting example is this parallel quicksort: fn quick_sort<T:PartialOrd+Send>(v: &mut [T]) {     if v.len() <= 1 {         return;     }      let mid = partition(v);     let (lo, hi) = v.split_at_mut(mid);     rayon::join(|| quick_sort(lo), || quick_sort(hi)); } Note though that calling join is very different from just spawning two threads in terms of performance. This is because join does not guarantee that the two closures will run in parallel. If all of your CPUs are already busy with other work, Rayon will instead opt to run them sequentially. The call to join is designed to have very low overhead in that case, so that you can safely call it even with very small workloads (as in the example above). However, in practice, the overhead is still noticeable. Therefore, for maximal performance, you want to have some kind of sequential fallback one your problem gets small enough. The parallel iterator APIs try to handle this for you. When using join, you have to code it yourself. For an example, see the quicksort demo, which includes sequential fallback after a certain size. Safety You've probably heard that parallel programming can be the source of bugs that are really hard to diagnose. That is certainly true! However, thanks to Rust's type system, you basically don't have to worry about that when using Rayon. The Rayon APIs are guaranteed to be data-race free. The Rayon APIs themselves also cannot cause deadlocks (though if your closures or callbacks use locks or ports, those locks might trigger deadlocks). For example, if you write code that tries to process the same mutable state from both closures, you will find that fails to compile: /// Increment all values in slice. fn increment_all(slice: &mut [i32]) {     rayon::join(|| process(slice), || process(slice)); } However, this safety does have some implications. You will not be able to use types which are not thread-safe (i.e., do not implement Send) from inside a join closure. Note that almost all types are in fact thread-safe in Rust; the only exception is those types that employ ""inherent mutability"" without some form of synchronization, such as RefCell or Rc. Here is a list of the most common types in the standard library that are not Send, along with an alternative that you can use instead which is Send (but which also has higher overhead, because it must work across threads): Cell -- replacement: AtomicUsize, AtomicBool, etc (but see warning below) RefCell -- replacement: RwLock, or perhaps Mutex (but see warning below) Rc -- replacement: Arc However, if you are converting uses of Cell or RefCell, you must be prepared for other threads to interject changes. For more information, read the section on atomicity below. How it works: Work stealing Behind the scenes, Rayon uses a technique called work stealing to try and dynamically ascertain how much parallelism is available and exploit it. The idea is very simple: we always have a pool of worker threads available, waiting for some work to do. When you call join the first time, we shift over into that pool of threads. But if you call join(a, b) from a worker thread W, then W will place b into a central queue, advertising that this is work that other worker threads might help out with. W will then start executing a. While W is busy with a, other threads might come along and take b from the queue. That is called stealing b. Once a is done, W checks whether b was stolen by another thread and, if not, executes b itself. If b was stolen, then W can just wait for the other thread to finish. (In fact, it can do even better: it can go try to find other work to steal in the meantime.) This technique is not new. It was first introduced by the Cilk project, done at MIT in the late nineties. The name Rayon is an homage to that work. Warning: Be wary of atomicity Converting a Cell (or, to a lesser extent, a RefCell) to work in parallel merits special mention for a number of reasons. Cell and RefCell are handy types that permit you to modify data even when that data is shared (aliased). They work somewhat differently, but serve a common purpose: A Cell offers a mutable slot with just two methods, get and set. Cells can only be used for Copy types that are safe to memcpy around, such as i32, f32, or even something bigger like a tuple of (usize, usize, f32). A RefCell is kind of like a ""single-threaded read-write lock""; it can be used with any sort of type T. To gain access to the data inside, you call borrow or borrow_mut. Dynamic checks are done to ensure that you have either reads or writers but not both. While there are threadsafe types that offer similar APIs, caution is warranted because, in a threadsafe setting, other threads may ""interject"" modifications in ways that are not possible in sequential code. While this will never lead to a data race --- that is, you need not fear undefined behavior --- you can certainly still have bugs. Let me give you a concrete example using Cell. A common use of Cell is to implement a shared counter. In that case, you would have something like counter: Rc<Cell<usize>>. Now I can increment the counter by calling get and set as follows: let value = counter.get(); counter.set(value + 1); If I convert this to be a thread-safe counter, I would use the corresponding types tscounter: Arc<AtomicUsize>. If I then were to convert the Cell API calls directly, I would do something like this: let value = tscounter.load(Ordering::SeqCst); tscounter.store(value + 1, Ordering::SeqCst); You can already see that the AtomicUsize API is a bit more complex, as it requires you to specify an ordering. (I won't go into the details on ordering here, but suffice to say that if you don't know what an ordering is, and probably even if you do, you should use Ordering::SeqCst.) The danger in this parallel version of the counter is that other threads might be running at the same time and they could cause our counter to get out of sync. For example, if we have two threads, then they might both execute the ""load"" before either has a chance to execute the ""store"": Thread 1                                          Thread 2 let value = tscounter.load(Ordering::SeqCst); // value = X                                      let value = tscounter.load(Ordering::SeqCst);                                                   // value = X tscounter.store(value+1);                         tscounter.store(value+1); // tscounter = X+1                                // tscounter = X+1  Now even though we've had two increments, we'll only increase the counter by one! Even though we've got no data race, this is still probably not the result we wanted. The problem here is that the Cell API doesn't make clear the scope of a ""transaction"" -- that is, the set of reads/writes that should occur atomically. In this case, we probably wanted the get/set to occur together. In fact, when using the Atomic types, you very rarely want a plain load or plain store. You probably want the more complex operations. A counter, for example, would use fetch_add to atomically load and increment the value in one step. Compare-and-swap is another popular building block. A similar problem can arise when converting RefCell to RwLock, but it is somewhat less likely, because the RefCell API does in fact have a notion of a transaction: the scope of the handle returned by borrow or borrow_mut. So if you convert each call to borrow to read (and borrow_mut to write), things will mostly work fine in a parallel setting, but there can still be changes in behavior. Consider using a handle: RefCell<Vec<i32>> like : let len = handle.borrow().len(); for i in 0 .. len {     let data = handle.borrow()[i];     println!(""{}"", data); } In sequential code, we know that this loop is safe. But if we convert this to parallel code with an RwLock, we do not: this is because another thread could come along and do handle.write().unwrap().pop(), and thus change the length of the vector. In fact, even in sequential code, using very small borrow sections like this is an anti-pattern: you ought to be enclosing the entire transaction together, like so: let vec = handle.borrow(); let len = vec.len(); for i in 0 .. len {     let data = vec[i];     println!(""{}"", data); } Or, even better, using an iterator instead of indexing: let vec = handle.borrow(); for data in vec {     println!(""{}"", data); } There are several reasons to prefer one borrow over many. The most obvious is that it is more efficient, since each borrow has to perform some safety checks. But it's also more reliable: suppose we modified the loop above to not just print things out, but also call into a helper function: let vec = handle.borrow(); for data in vec {     helper(...); } And now suppose, independently, this helper fn evolved and had to pop something off of the vector: fn helper(...) {     handle.borrow_mut().pop(); } Under the old model, where we did lots of small borrows, this would yield precisely the same error that we saw in parallel land using an RwLock: the length would be out of sync and our indexing would fail (note that in neither case would there be an actual data race and hence there would never be undefined behavior). But now that we use a single borrow, we'll see a borrow error instead, which is much easier to diagnose, since it occurs at the point of the borrow_mut, rather than downstream. Similarly, if we move to an RwLock, we'll find that the code either deadlocks (if the write is on the same thread as the read) or, if the write is on another thread, works just fine. Both of these are preferable to random failures in my experience. But wait, isn't Rust supposed to free me from this kind of thinking? You might think that Rust is supposed to mean that you don't have to think about atomicity at all. In fact, if you avoid inherent mutability (Cell and RefCell in a sequential setting, or AtomicUsize, RwLock, Mutex, et al. in parallel code), then this is true: the type system will basically guarantee that you don't have to think about atomicity at all. But often there are times when you WANT threads to interleave in the ways I showed above. Consider for example when you are conducting a search in parallel, say to find the shortest route. To avoid fruitless search, you might want to keep a cell with the shortest route you've found thus far. This way, when you are searching down some path that's already longer than this shortest route, you can just stop and avoid wasted effort. In sequential land, you might model this ""best result"" as a shared value like Rc<Cell<usize>> (here the usize represents the length of best path found so far); in parallel land, you'd use a Arc<AtomicUsize>. Now we can make our search function look like: fn search(path: &Path, cost_so_far: usize, best_cost: &Arc<AtomicUsize>) {     if cost_so_far >= best_cost.load(Ordering::SeqCst) {         return;     }     ...     best_cost.store(...); } Now in this case, we really WANT to see results from other threads interjected into our execution! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nikomatsakis/rayon"	"– A data parallelism library for Rust"	"true"
"Concurrency"	""	"https://travis-ci.org/nikomatsakis/rayon"	"– A data parallelism library for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"– A data parallelism library for Rust"	"true"
"Concurrency"	"rustcc/coroutine-rs"	"https://github.com/rustcc/coroutine-rs"	"– Coroutine Library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"228"	"32"	"27"	"GitHub - rustcc/coroutine-rs: Coroutine Library in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 228 Fork 27 rustcc/coroutine-rs Code Issues 2 Pull requests 2 Pulse Graphs Coroutine Library in Rust 202 commits 3 branches 0 releases 9 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev feature-scheduler master Nothing to show Nothing to show New pull request Latest commit 9d1ec65 Jul 7, 2016 zonyitoo committed on GitHub Merge pull request #68 from DenisKolodin/cross-data … Explicit access to initial and final values of coroutine Permalink Failed to load latest commit information. examples Add explicit return value of coroutine Jul 7, 2016 src Add explicit return value of coroutine Jul 7, 2016 .gitignore updated gitignore Mar 1, 2015 .travis.yml bump version to v0.5.0, update Cargo.toml Mar 26, 2016 Cargo.toml bump version to v0.5.0, update Cargo.toml Mar 26, 2016 LICENSE-MIT add license, add one more badge May 24, 2015 README.md Add explicit return value of coroutine Jul 7, 2016 README.md coroutine-rs Coroutine library in Rust [dependencies.coroutine] git = ""0.5.0"" Usage Basic usage of Coroutine extern crate coroutine;  use std::usize; use coroutine::asymmetric::Coroutine;  fn main() {     let coro: Coroutine<i32> = Coroutine::spawn(|me,_| {         for num in 0..10 {             me.yield_with(num);         }         usize::MAX     });      for num in coro {         println!(""{}"", num.unwrap());     } } This program will print the following to the console 0 1 2 3 4 5 6 7 8 9  For more detail, please run cargo doc --open. Goals Basic single threaded coroutine support Asymmetric Coroutines Symmetric Coroutines Thread-safe: can only resume a coroutine in one thread simultaneously Notes Currently this crate can only be built with Rust nightly because of some unstable features. Basically it supports arm, i686, mips, mipsel and x86_64 platforms, but we have only tested in OS X 10.10.*, x86_64, nightly ArchLinux, x86_64, nightly Thanks The Rust developers (context switch ASM from libgreen) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rustcc/coroutine-rs"	"– Coroutine Library in Rust"	"true"
"Concurrency"	""	"https://travis-ci.org/rustcc/coroutine-rs"	"– Coroutine Library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"– Coroutine Library in Rust"	"true"
"Cloud"	"aws"	"https://crates.io/keywords/aws"	"AWS []"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"AWS []"	"true"
"Cloud"	"rusoto/rusoto"	"https://github.com/rusoto/rusoto"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"140"	"19"	"30"	"GitHub - rusoto/rusoto: AWS SDK for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 140 Fork 30 rusoto/rusoto Code Issues 26 Pull requests 6 Pulse Graphs AWS SDK for Rust 604 commits 11 branches 20 releases 17 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dep-lockdown feature-better-s3-codegen feature-rustfmt-config feature-s3 feature-yet-more-codegen-docs feature_reuse_hyper_client fix-da-build gh-pages hyper-bugtester master serde-xml-error Nothing to show v0.15.2 v0.15.1 v0.15.0 v0.14.1 v0.14.0 v0.13.1 v0.13.0 v0.12.1 v0.12.0 v0.11.1 v0.11.0 v0.10.0 v0.9.0 v0.8.0 v0.7.0 v0.6.0 v0.5.0 v0.4.0 v0.1.1 pre_s3 Nothing to show New pull request Latest commit f847b49 Jul 14, 2016 matthewkmayer committed on GitHub Merge pull request #296 from rusoto/bugfix_ec2_mut_self … use &self instead of &mut self for ec2 methods Permalink Failed to load latest commit information. codegen Merge pull request #296 from rusoto/bugfix_ec2_mut_self Jul 14, 2016 helpers Updates serde again. Jun 1, 2016 src add ap-south-1 region Jul 2, 2016 tests use &self instead of &mut self for ec2 methods Jul 2, 2016 .gitignore refactoring botocore_parser to polymorphic class structure Dec 20, 2015 .gitmodules Tracking a tag as a branch doesn't make sense. Mar 11, 2016 .travis.yml chore(travis): allow Travis CI failures on OS X Jul 1, 2016 AWS-CREDENTIALS.md Use title case for acronyms in type names. Closes #196. Mar 23, 2016 CONTRIBUTING.md Fix Markdown formatting. [ci skip] Mar 29, 2016 Cargo.toml bump rusoto version to 0.15.2, rusoto_codegen dependency to 0.2.3 Jul 2, 2016 LICENSE Updates link for docs in RELEASING and removes trailing references to… Apr 9, 2016 README.md Update README re: openssl dependencies on OS X and Windows Jul 2, 2016 RELEASING.md Updates link for docs in RELEASING and removes trailing references to… Apr 10, 2016 build.rs don't output the rerun-if-changed condition from the build script if … Jun 30, 2016 clippy.toml feat: fix `clippy` lints Apr 16, 2016 s3-sample-creds Adds s3 bucket location constraint functionality. Aug 19, 2015 README.md Rusoto AWS SDK for Rust. Documentation. IRC: #rusoto on irc.freenode.net. Requirements Rust 1.8.0 or later is required. On OS X and Windows, you may need to install the openssl runtime and headers to get the rust-openssl dependency to build. Instructions for that can be found here. Installation Rusoto is available on crates.io. To use Rusoto in your Rust program built with Cargo, add it as a dependency and enable the Cargo features for any AWS service you want to use. For example: [dependencies.rusoto] features = [""dynamodb"", ""s3""] version = ""x.y.z"" You can use the Cargo feature ""all"" to build Rusoto with support for every available service. Usage Rusoto includes a public module for each AWS service it is compiled for containing Rust types for that service's API. A full list of these services and their Cargo feature names are included at the end of this document. All other public types are reexported to the crate root. Consult the rustdoc documentation for full details by running cargo doc or visiting the online documentation for the latest crates.io release. A simple example of using Rusoto's DynamoDB API to list the names of all tables in a database: extern crate rusoto;  use std::default::Default;  use rusoto::{DefaultCredentialsProvider, Region}; use rusoto::dynamodb::{DynamoDBClient, ListTablesInput};  fn main() {   let provider = DefaultCredentialsProvider::new().unwrap();   let mut client = DynamoDBClient::new(provider, Region::UsEast1);   let list_tables_input: ListTablesInput = Default::default();    match client.list_tables(&list_tables_input) {     Ok(output) => {       match output.TableNames {         Some(table_name_list) => {           println!(""Tables in database:"");            for table_name in table_name_list {             println!(""{}"", table_name);           }         }         None => println!(""No tables in database!""),       }     }     Err(error) => {       println!(""Error: {:?}"", error);     }   } } Rusoto exposes relatively low level types for AWS's APIs. It may be convenient to use higher level types, which can be found in the rusoto_helpers crate. Credentials For more information on Rusoto's use of AWS credentials such as priority and refreshing, see AWS Credentials. Debugging Rusoto uses the log logging facade. For tests it uses env_logger. To see output of logging from integration tests, run: RUST_LOG=info cargo test --features all Semantic versioning Rusoto complies with semantic versioning 2.0.0. Until reaching 1.0.0 the API is to be considered unstable. See Cargo.toml or rusoto on crates.io for current version. Releases Information on release schedules and procedures are in RELEASING. Supported AWS services Service Cargo feature All supported services all Certificate Manager acm CloudHSM cloudhsm CloudTrail cloudtrail CloudWatch Events events CloudWatch Logs logs CodeCommit codecommit CodeDeploy codedeploy CodePipeline codepipeline Cognito Identity cognito-identity Config config Data Pipeline datapipeline Device Farm devicefarm Direct Connect directconnect Directory Service ds DynamoDB dynamodb DynamoDB Streams) dynamodbstreams EC2 ec2 EC2 Container Registry ecr ECS ecs Elastic MapReduce emr Elastic Transcoder ets Inspector inspector Key Management Service kms Kinesis kinesis Kinesis Firehose firehose Machine Learning machinelearning OpsWorks opsworks Route53 Domains route53domains S3 s3 Simple Systems Manager ssm Simple Workflow Service swf SQS sqs Storage Gateway storagegateway Web Application Firewall waf WorkSpaces workspaces Contributing See CONTRIBUTING. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rusoto/rusoto"	"—"	"true"
"Cloud"	""	"https://travis-ci.org/rusoto/rusoto"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Cloud"	"thommay/aws-rs"	"https://github.com/thommay/aws-rs"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"1"	"3"	"GitHub - thommay/aws-rs: A rust library to support AWS Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 3 thommay/aws-rs Code Issues 0 Pull requests 3 Pulse Graphs A rust library to support AWS 43 commits 3 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ec2 master request Nothing to show Nothing to show New pull request Latest commit 0a60431 Jun 29, 2015 thommay Add a license … Fixes #3 Permalink Failed to load latest commit information. fixtures implement signatures Jan 9, 2015 src Update to new rust-ini api Jun 21, 2015 .gitignore begin implementation of AWS sigv4 Dec 28, 2014 .travis.yml I don't care about stable right now Jun 21, 2015 Cargo.toml demo/test app Jun 1, 2015 LICENSE Add a license Jun 29, 2015 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thommay/aws-rs"	"—"	"true"
"Cloud"	""	"https://travis-ci.org/thommay/aws-rs"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Cloud"	"kbknapp/doapi"	"https://github.com/kbknapp/doapi-rs"	"— DigitalOcean v2 API bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13"	"3"	"4"	"GitHub - kbknapp/doapi-rs: Wrapper library for utilizing DigitalOcean API v2 in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 13 Fork 4 kbknapp/doapi-rs Code Issues 1 Pull requests 0 Pulse Graphs Wrapper library for utilizing DigitalOcean API v2 in Rust 111 commits 7 branches 4 releases Fetching contributors Rust 99.9% HTML 0.1% Rust HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags aphs-better-types aphs-public-fields auto gh-pages homu-tmp master misc-fixes Nothing to show v0.1.1 v0.1.0-alpha3 v0.1.0-alpha2 v0.1.0-alpha Nothing to show New pull request Latest commit dd1e0ac Jun 21, 2016 homu Auto merge of #28 - kbknapp:aphs-public-fields, r=kbknapp … Make more fields public  This PR makes all fields in responses public - there's not much point in having them if they can't be used!  On the other hand, I was considering making a PR to convert a bunch of things to better types (e.g. f64 id to u64), which would be less of a breaking change (slightly) if these fields stayed private for now.  Thoughts @kbknapp ? Permalink Failed to load latest commit information. src .clog.toml .gitignore style: rustfmt run Oct 29, 2015 .travis.yml CHANGELOG.md Cargo.toml LICENSE-MIT README.md doapi.png chore: added dep graph Sep 6, 2015 droplet index.html rustfmt.toml README.md doapi-rs Wrapper library for utilizing DigitalOcean API v2 in Rust Disclaimer This library is in alpha - it may do anything up to, and including, eating your laundry. Example Full details can be found in the doapi documentation or the DigitalOcean v2 API documentation. The following example takes a snapshot of an existing droplet, which in turn sends back an Action. let auth_token = ""INSERT AUTH TOKEN HERE""; let domgr = DoManager::with_auth(&auth_token); let snapshot_name = ""my new snapshot""; let droplet_id = ""1234567"";  print!(""Sending request...""); match domgr.droplet(droplet_id)            .snapshot(snapshot_name)            .retrieve() {     Ok(action) => {         println!(""Success!\n\t"");         println!(""{}\n"", action);     }     Err(e) => {         println!(""Failed\n\t."");         println!(""{}\n"", e);     } } This library can be used to send the request and retrieve the object back from DigitalOcean all at once (as in the above example), or you use this library to build the request and change it to your liking. For example (still using the above as a base), you could see the request being sent to DigitalOcean without sending it via: domgr.droplet(droplet_id)      .snapshot(snapshot_name)      .to_string(); You can also get the raw JSON back from DigitalOcean print!(""Sending request..."") match domgr.droplet(droplet_id)            .snapshot(snapshot_name)            .retrieve_json() { Ok(json) => {     println!(""Success!\n\t"");     println!(""{}\n"", json); }, Err(e) => {     pritnln!(""Failed\n\t."")     println!(""{}\n"", e); } You can also get the raw hyper requests and responses for your manipulation. Usage At the moment, doapi requeires a nightly Rust compiler. Add doapi as a dependecy in your Cargo.toml file to use from crates.io:  [dependencies]  doapi = ""*"" Or track the latest on the master branch at github: [dependencies.doapi] git = ""https://github.com/kbknapp/doapi-rs.git"" Add extern crate doapi; to your crate root. DigitalOcean Personal Auth Token In order to use the DigitalOcean v2 API, you must generate a Personal Authentication Token. This token can then be passed to the DoManager in order to build requests and retrieve results. Personal Auth Token's can be Read/Write, or Read Only/Write Only. In order to process destructive API calls (such as various .delete(), .create(), .update() etc.) you must have a token with Write priviledges. To generate a new Personal Auth Token see the following DigitalOcean details More Information You can find complete documentation on the github-pages site for this project. Contributing Contributions are always welcome! And there is a multitude of ways in which you can help depending on what you like to do, or are good at. Anything from documentation, code cleanup, issue completion, new features, you name it, even filing issues is contributing and greatly appreciated! NOTE: One of the best ways to help right now is to simply use the library and report issues! Fork doapi Clone your fork (git clone https://github.com/$YOUR_USERNAME/doapi-rs && cd doapi-rs) Create new branch (git checkout -b new-branch) Make your changes, and commit (git commit -am ""your message"") I use a conventional changelog format so I can update my changelog using clog Format your commit subject line using the following format: TYPE(COMPONENT): MESSAGE where TYPE is one of the following: feat - A new feature imp - An improvement to an existing feature perf - A performance improvement docs - Changes to documentation only tests - Changes to the testing framework or tests only fix - A bug fix refactor - Code functionality doesn't change, but underlying structure may style - Stylistic changes only, no functionality changes wip - A work in progress commit (Should typically be git rebase'ed away) chore - Catch all or things that have to do with the build system, etc The COMPONENT is optional, and may be a single file, directory, or logical component. Can be omitted if commit applies globally git rebase into concise commits and remove --fixups (git rebase -i HEAD~NUM where NUM is number of commits back) Push your changes back to your fork (git push origin $your-branch) Create a pull request! (You can also create the pull request first, and we'll merge when ready. This a good way to discuss proposed changes.) Recent Breaking Changes Although I do my best to keep breaking changes to a minimum, being that this a sub 1.0 library, there are breaking changes from time to time in order to support better features or implementation. For the full details see the changelog.md NONE Yay :) Deprecations Old method names will be left around for some time. NONE Yay :) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kbknapp/doapi-rs"	"— DigitalOcean v2 API bindings"	"true"
"Cloud"	""	"https://travis-ci.org/kbknapp/doapi-rs"	"— DigitalOcean v2 API bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— DigitalOcean v2 API bindings"	"true"
"Command-line argument parsing"	"docopt/docopt.rs"	"https://github.com/docopt/docopt.rs"	"— a Rust implementation of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"378"	"18"	"64"	"GitHub - docopt/docopt.rs: Docopt for Rust (command line argument parser). Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 378 Fork 64 docopt/docopt.rs Code Issues 32 Pull requests 3 Pulse Graphs Docopt for Rust (command line argument parser). 451 commits 1 branch 81 releases Fetching contributors Rust 96.1% Python 1.8% Shell 1.7% Other 0.4% Rust Python Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.6.81 0.6.80 0.6.79 0.6.78 0.6.77 0.6.76 0.6.75 0.6.74 0.6.73 0.6.72 0.6.71 0.6.70 0.6.69 0.6.68 0.6.67 0.6.66 0.6.65 0.6.64 0.6.63 0.6.62 0.6.61 0.6.60 0.6.59 0.6.58 0.6.57 0.6.56 0.6.55 0.6.54 0.6.53 0.6.52 0.6.51 0.6.50 0.6.49 0.6.48 0.6.47 0.6.46 0.6.45 0.6.44 0.6.43 0.6.42 0.6.41 0.6.40 0.6.39 0.6.38 0.6.37 0.6.36 0.6.35 0.6.34 0.6.33 0.6.32 0.6.31 0.6.30 0.6.29 0.6.28 0.6.27 0.6.26 0.6.25 0.6.24 0.6.23 0.6.22 0.6.21 0.6.20 0.6.19 0.6.18 0.6.17 0.6.16 0.6.15 0.6.14 0.6.13 0.6.12 0.6.11 0.6.10 0.6.9 0.6.8 0.6.7 0.6.6 0.6.5 0.6.4 0.6.3 0.6.2 0.6.1 Nothing to show New pull request Latest commit 8e86a6e Jul 5, 2016 BurntSushi committed on GitHub Merge pull request #193 from julienw/fix-docopt-rust-nightly … TokenTree is now in its own module (closes #192) Permalink Failed to load latest commit information. completions Sometimes --help goes to stderr. Dec 2, 2014 docopt_macros TokenTree is now in its own module (closes #192) Jul 5, 2016 examples Use options_first(true) in cargo exemple Nov 19, 2015 scripts Fix testcases generator script. Dec 20, 2014 src Add regression tests for the issue #187 Jun 13, 2016 .gitignore Remove old build directory. Nov 2, 2014 .travis.yml test on rust stable Jan 18, 2016 COPYING dual licensed under MIT and UNLICENSE Apr 15, 2015 Cargo.toml 0.6.81 Jun 20, 2016 LICENSE-MIT dual licensed under MIT and UNLICENSE Apr 15, 2015 Makefile Push to github first. Jun 2, 2015 README.md Added release path to the note Jul 3, 2016 UNLICENSE initial commit Jun 11, 2014 ctags.rust initial commit Jun 11, 2014 session.vim Full compile on every save takes too long. :-( Jun 28, 2014 README.md Docopt for Rust with automatic type based decoding (i.e., data validation). This implementation conforms to the official description of Docopt and passes its test suite. Dual-licensed under MIT or the UNLICENSE. Current status Fully functional but the design of the API is up for debate. I am seeking feedback. Documentation http://burntsushi.net/rustdoc/docopt Installation This crate is fully compatible with Cargo. Just add it to your Cargo.toml: [dependencies] docopt = ""0.6"" rustc-serialize = ""0.3""  # if you're using `derive(RustcDecodable)` If you want to use the macro, then add docopt_macros = ""0.6"" instead. Note that the docopt! macro only works on a nightly Rust compiler because it is a compiler plugin. Quick example Here is a full working example. Notice that you can specify the types of each of the named values in the Docopt usage string. Values will be automatically converted to those types (or an error will be reported). extern crate rustc_serialize; extern crate docopt;  use docopt::Docopt;  const USAGE: &'static str = "" Naval Fate.  Usage:   naval_fate.py ship new <name>...   naval_fate.py ship <name> move <x> <y> [--speed=<kn>]   naval_fate.py ship shoot <x> <y>   naval_fate.py mine (set|remove) <x> <y> [--moored | --drifting]   naval_fate.py (-h | --help)   naval_fate.py --version  Options:   -h --help     Show this screen.   --version     Show version.   --speed=<kn>  Speed in knots [default: 10].   --moored      Moored (anchored) mine.   --drifting    Drifting mine. "";  #[derive(Debug, RustcDecodable)] struct Args {     flag_speed: isize,     flag_drifting: bool,     arg_name: Vec<String>,     arg_x: Option<i32>,     arg_y: Option<i32>,     cmd_ship: bool,     cmd_mine: bool, }  fn main() {     let args: Args = Docopt::new(USAGE)                             .and_then(|d| d.decode())                             .unwrap_or_else(|e| e.exit());     println!(""{:?}"", args); } Here is the same example, but with the use of the docopt! macro, which will generate a struct for you. Note that this uses a compiler plugin, so it only works on a nightly Rust compiler: #![feature(plugin)] #![plugin(docopt_macros)]  extern crate rustc_serialize; extern crate docopt;  use docopt::Docopt;  docopt!(Args derive Debug, "" Naval Fate.  Usage:   naval_fate.py ship new <name>...   naval_fate.py ship <name> move <x> <y> [--speed=<kn>]   naval_fate.py ship shoot <x> <y>   naval_fate.py mine (set|remove) <x> <y> [--moored | --drifting]   naval_fate.py (-h | --help)   naval_fate.py --version  Options:   -h --help     Show this screen.   --version     Show version.   --speed=<kn>  Speed in knots [default: 10].   --moored      Moored (anchored) mine.   --drifting    Drifting mine. "");  fn main() {     let args: Args = Args::docopt().decode().unwrap_or_else(|e| e.exit());     println!(""{:?}"", args); } The Args struct has one static method defined for it: docopt. The method returns a normal Docopt value, which can be used to set configuration options, argv and parse or decode command line arguments. Struct field name mapping The field names of the struct map like this: -g            => flag_g --group       => flag_group --group <arg> => flag_group FILE          => arg_FILE <file>        => arg_file build         => cmd_build  Data validation example Here's another example that shows how to specify the types of your arguments: #![feature(plugin)] #![plugin(docopt_macros)]  extern crate rustc_serialize;  extern crate docopt;  docopt!(Args, ""Usage: add <x> <y>"", arg_x: i32, arg_y: i32);  fn main() {     let args: Args = Args::docopt().decode().unwrap_or_else(|e| e.exit());     println!(""x: {}, y: {}"", args.arg_x, args.arg_y); } In this example, specific type annotations were added. They will be automatically inserted into the generated struct. You can override as many (or as few) fields as you want. If you don't specify a type, then one of bool, u64, String or Vec<String> will be chosen depending on the type of argument. In this case, both arg_x and arg_y would have been String. If any value cannot be decoded into a value with the right type, then an error will be shown to the user. And of course, you don't need the macro to do this. You can do the same thing with a manually written struct too. Modeling rustc Here's a selected subset for some of rustc's options. This also shows how to restrict values to a list of choices via an enum type and demonstrates more Docopt features. #![feature(plugin)] #![plugin(docopt_macros)]  extern crate rustc_serialize;  extern crate docopt;  docopt!(Args derive Debug, "" Usage: rustc [options] [--cfg SPEC... -L PATH...] INPUT        rustc (--help | --version)  Options:     -h, --help         Show this message.     --version          Show the version of rustc.     --cfg SPEC         Configure the compilation environment.     -L PATH            Add a directory to the library search path.     --emit TYPE        Configure the output that rustc will produce.                        Valid values: asm, ir, bc, obj, link.     --opt-level LEVEL  Optimize with possible levels 0-3. "", flag_opt_level: Option<OptLevel>, flag_emit: Option<Emit>);  #[derive(RustcDecodable, Debug)] enum Emit { Asm, Ir, Bc, Obj, Link }  #[derive(Debug)] enum OptLevel { Zero, One, Two, Three }  impl rustc_serialize::Decodable for OptLevel {     fn decode<D: rustc_serialize::Decoder>(d: &mut D) -> Result<OptLevel, D::Error> {         Ok(match try!(d.read_usize()) {             0 => OptLevel::Zero, 1 => OptLevel::One,             2 => OptLevel::Two, 3 => OptLevel::Three,             n => {                 let err = format!(""Could not decode '{}' as opt-level."", n);                 return Err(d.error(&*err));             }         })     } }  fn main() {     let args: Args = Args::docopt().decode().unwrap_or_else(|e| e.exit());     println!(""{:?}"", args); } Viewing the generated struct Generating a struct is pretty magical, but if you want, you can look at it by expanding all macros. Say you wrote the above example for Usage: add <x> <y> into a file called add.rs. Then running: rustc -L path/containing/docopt/lib -Z unstable-options --pretty=expanded add.rs Will show all macros expanded. The path/containing/docopt/lib is usually target/debug/deps or target/release/deps in a cargo project. In the generated code, you should be able to find the generated struct: struct Args {     pub arg_x: int,     pub arg_y: int, } Traditional Docopt API The reference implementation of Docopt returns a Python dictionary with names like <arg> or --flag. If you prefer this access pattern, then you can use docopt::ArgvMap. The disadvantage is that you have to do all of your type conversion manually. Here's the canonical Docopt example with a hash table: extern crate docopt;  use docopt::Docopt;  const USAGE: &'static str = "" Naval Fate.  Usage:   naval_fate.py ship new <name>...   naval_fate.py ship <name> move <x> <y> [--speed=<kn>]   naval_fate.py ship shoot <x> <y>   naval_fate.py mine (set|remove) <x> <y> [--moored | --drifting]   naval_fate.py (-h | --help)   naval_fate.py --version  Options:   -h --help     Show this screen.   --version     Show version.   --speed=<kn>  Speed in knots [default: 10].   --moored      Moored (anchored) mine.   --drifting    Drifting mine. "";  fn main() {     let args = Docopt::new(USAGE)                       .and_then(|dopt| dopt.parse())                       .unwrap_or_else(|e| e.exit());     println!(""{:?}"", args);      // You can conveniently access values with `get_{bool,count,str,vec}`     // functions. If the key doesn't exist (or if, e.g., you use `get_str` on     // a switch), then a sensible default value is returned.     println!(""\nSome values:"");     println!(""  Speed: {}"", args.get_str(""--speed""));     println!(""  Drifting? {}"", args.get_bool(""--drifting""));     println!(""  Names: {:?}"", args.get_vec(""<name>"")); } Tab completion support This particular implementation bundles a command called docopt-wordlist that can be used to automate tab completion. This repository also collects some basic completion support for various shells (currently only bash) in the completions directory. You can use them to setup tab completion on your system. It should work with any program that uses Docopt (or rather, any program that outputs usage messages that look like Docopt). For example, to get tab completion support for Cargo, you'll have to install docopt-wordlist and add some voodoo to your $HOME/.bash_completion file (this may vary for other shells). Here it is step by step: # Download and build `docopt-wordlist` (as part of the Docopt package) $ git clone git://github.com/docopt/docopt.rs $ cd docopt.rs $ cargo build --release  # Now setup tab completion (for bash) $ echo ""DOCOPT_WORDLIST_BIN=\""$(pwd)/target/release/docopt-wordlist\"""" >> $HOME/.bash_completion $ echo ""source \""$(pwd)/completions/docopt-wordlist.bash\"""" >> $HOME/.bash_completion $ echo ""complete -F _docopt_wordlist_commands cargo"" >> $HOME/.bash_completion My CSV toolkit is supported too: # shameless plug... $ echo ""complete -F _docopt_wordlist_commands xsv"" >> $HOME/.bash_completion Note that this is emphatically a first pass. There are several improvements that I'd like to make: Take context into account when completing. For example, it should be possible to only show completions that can lead to a valid Docopt match. This may be hard. (i.e., It may require restructuring Docopt's internals.) Support more shells. (I'll happily accept pull requests on this one. I doubt I'll venture outside of bash any time soon.) Make tab completion support more seamless. The way it works right now is pretty hacky by intermingling file/directory completion. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/docopt/docopt.rs"	"— a Rust implementation of"	"true"
"Command-line argument parsing"	"DocOpt"	"http://docopt.org"	"— a Rust implementation of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"docopt · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization docopt Your terminal http://docopt.org Repositories People 16 Filters Sources Forks C++ 364 43 docopt.cpp C++11 port of docopt Updated Jul 12, 2016 Nimrod 36 4 docopt.nim Command line arguments parser that will make you smile (port of docopt to Nim) Updated Jul 11, 2016 Rust 378 64 docopt.rs Docopt for Rust (command line argument parser). Updated Jul 5, 2016 Python 4,477 353 docopt Pythonic command line arguments parser, that will make you smile Updated Jul 5, 2016 C# 142 19 docopt.net Port of docopt to .net Updated Jun 14, 2016 R 52 7 docopt.R Command-line interface description language for R (http:docopt.org) Updated Jun 13, 2016 Go 686 49 docopt.go A command-line arguments parser that will make you smile. Updated May 12, 2016 CSS 32 11 try.docopt.org Try out docopt in browser (Flask app running on Heroku) Updated May 6, 2016 Tcl 15 7 docopt.org The website Updated May 1, 2016 C 198 25 docopt.c C-code generator for docopt language. Updated Apr 24, 2016 D 25 6 docopt.d Updated Apr 9, 2016 Java 80 13 docopt.java Java port of docopt Updated Feb 28, 2016 Swift 32 3 docopt.swift A command-line interface description language and parser that will make you smile http://docopt.org/ Updated Feb 12, 2016 Julia 23 10 DocOpt.jl command line arguments parser Updated Feb 7, 2016 F# 7 1 docopt.fs Docopt for F# Updated Feb 2, 2016 Haskell 70 11 docopt.hs A command-line interface description language and parser that will make you smile Updated Dec 7, 2015 PHP 211 15 docopt.php Updated Oct 30, 2015 CoffeeScript 137 17 docopt.coffee docopt - A command line option parser that will make you smile. Updated May 23, 2015 Python 169 17 docopts Shell interpreter for docopt, the command-line interface description language. Updated Mar 21, 2015 Scala 31 4 docopt.scala Scala implementation of docopt language Updated Jun 30, 2014 Previous 1 2 Next 16 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/docopt/"	"— a Rust implementation of"	"true"
"Command-line argument parsing"	""	"https://travis-ci.org/docopt/docopt.rs"	"— a Rust implementation of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a Rust implementation of"	"true"
"Command-line argument parsing"	"kbknapp/clap-rs"	"https://github.com/kbknapp/clap-rs"	"— a simple to use, full featured command-line argument parser"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"549"	"17"	"50"	"GitHub - kbknapp/clap-rs: A full featured, fast Command Line Argument Parser for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 549 Fork 50 kbknapp/clap-rs Code Issues 34 Pull requests 5 Wiki Pulse Graphs A full featured, fast Command Line Argument Parser for Rust 1,359 commits 7 branches 81 releases 45 contributors Rust 99.8% Other 0.2% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto gh-pages homu-tmp master redesign v1-master v3-master Nothing to show v2.7.1 v2.7.0 v2.6.0 v2.5.1 v2.4.3 v2.4.0 v2.3.0 v2.2.5 v2.2.3 v2.2.1 v2.1.1 v2.1.0 v2.0.6 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.5.5 v1.5.4 v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.4.7 v1.4.6 v1.4.5 v1.4.4 v1.4.3 v1.4.2 v1.4.1 v1.4.0 v1.3.2 v1.3.1 v1.3.0 v1.2.5 v1.2.4 v1.2.3 v1.2.2 v1.2.1 v1.2.0 v1.1.6 v1.1.5 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v1.0.0-beta v0.11.0 v0.10.5 v0.10.3 v0.10.2 v0.10.1 v0.10.0 v0.9.2 v0.9.1 v0.9.0 v0.8.6 v0.8.5 v0.8.4 v0.8.3 v0.8.2 v0.8.1 v0.8.0 v0.7.6 v0.7.5 v0.7.4 v0.7.3 v0.7.2 v0.7.1 v0.7.0 v0.6.8 v0.6.7 2.9.0 2.2.0 0.6.7 0.5.13 Nothing to show New pull request Latest commit 691ef58 Jul 14, 2016 homu Auto merge of #571 - gohyda:master, r=kbknapp … Fix: typo and missing color Permalink Failed to load latest commit information. .github chore: moves github specific files to .github dir Feb 19, 2016 benches refactor(HELP): Removed code for old help system and tests that helpe… Apr 13, 2016 clap-perf chore: updates additional files for 2x release Jan 28, 2016 examples test: adds failing doc test May 11, 2016 src Fix: missing color Jul 5, 2016 tests Fix: typo -- missing space and commas Jul 5, 2016 .clog.toml chore: new clog section for examples Aug 27, 2015 .gitignore tests: removes old python tests and replaces with rust tests May 9, 2016 .travis.yml chore: updates pinned nightly version for TravisCI Jun 8, 2016 CHANGELOG.md chore: increase version Jul 3, 2016 CONTRIBUTORS.md chore: updates contributors Apr 18, 2016 Cargo.toml chore: increase version Jul 3, 2016 LICENSE-MIT chore: updates additional files for 2x release Jan 28, 2016 README.md Fix: extra space typo removed Jul 5, 2016 appveyor.yml chore: updates appveyor build file Jan 28, 2016 clap-test.rs tests: removes extra newline from version output tests Jun 4, 2016 clap_dep_graph.dot chore(Tests): had to remove external clap-test crate...sad face May 9, 2016 clap_dep_graph.png chore(Tests): had to remove external clap-test crate...sad face May 10, 2016 index.html Added redirect for base gh-pages url to real docs url Mar 15, 2015 rustfmt.toml style: rustfmt run Nov 9, 2015 README.md clap Linux: Windows: Command Line Argument Parser for Rust It is a simple to use, efficient, and full featured library for parsing command line arguments and subcommands when writing console, or terminal applications. documentation Table of Contents What's New About FAQ Features Quick Example Try it! Pre-Built Test BYOB (Build Your Own Binary) Usage Optional Dependencies / Features Dependencies Tree More Information Video Tutorials How to Contribute Running the tests Goals License Recent Breaking Changes Deprecations Created by gh-md-toc What's New Here's the highlights for v2.9.2 fixes bug where --help and --version short weren't added to the completion list improves completions allowing multiple bins to have seperate completion files Here's the highlights for v2.9.0 Completions: one can now generate a bash completions script at compile time! These completions work with options using possible values, subcommand aliases, and even multiple levels of subcommands Minor bug fixes when using AppSettings::TrailingVarArg and AppSettings::AllowLeadingHyphen Here's the highlights for v2.8.0 Arg: adds new optional setting Arg::require_delimiter which requires val delimiter to parse multiple values The terminal sizing portion has been factored out into a separate crate, term_size Minor bug fixes Here's the highlights for v2.7.1 Options: options using multiple values and delimiters no longer parse additional values after a trailing space (i.e. prog -o 1,2 file.txt parses as 1,2 for -o and file.txt for a positional arg) using options using multiple values and with an = no longer parse args after the trailing space as values (i.e. prog -o=1 file.txt parses as 1 for -o and file.txt for a positional arg) Here's the highlights for v2.7.0 Usage Strings: [FLAGS] and [ARGS] are no longer blindly added to usage strings, instead only when applicable arg_enum!: allows using more than one meta item, or things like #[repr(C)] with arg_enum!s App::print_help: now prints the same as would have been printed by --help or the like Help Messages: prevents invoking <cmd> help help and displaying incorrect help message subcommand help messages requested via <cmd> help <sub> now correctly match <cmd> <sub> --help ArgGroups: one can now specify groups which require AT LEAST one of the args allows adding multiple ArgGroups per Arg Documentation: vastly improves ArgGroup docs by adding better examples Documentation: fixes a bunch of typos in the documentation Here's the highlights for v2.6.0 Global Settings: One can now set an AppSetting which is propogated down through child subcommands Terminal Wrapping: Allows wrapping at specified term width (Even on Windows!) (can now set an absolute width to ""smart"" wrap at) SubCommands/Aliases: adds support for visible aliases for subcommands (i.e. aliases that are dipslayed in the help message) Subcommands/Aliases: when viewing the help of an alias, it now display help of the aliased subcommand Improves the default usage string when only a single positional arg is present Adds new setting to stop delimiting values with -- or AppSettings::TrailingVarArg App::before_help and App::after_help now correctly wrap Fixes bug where positional args are printed out of order when using templates Fixes bug where one can't override the auto-generated version or help flags Fixes issue where App::before_help wasn't printed Fixes a failing windows build Fixes bug where new color settings couldn't be converted from strings Adds missing YAML methods for App and Arg Allows printing version to any io::Write object Removes extra newline from help and version output Here's what's new in v.2.5.2 Removes trailing newlines from help and version output Allows printing version to any io::Write object Inter-links all types and pages Makes all publicly available types viewable in docs Fixes bug where one can't override version or help flags Fixes bug where args are printed out of order when using templates Fixes issue where App::before_help wasn't printed properly Here's what's new in v.2.5.0 Subcommands now support aliases - think of them as hidden subcommands that dispatch to said subcommand automatically Here's what's new in v2.4.3 Bug Fixes Usage strings get de-deuplicated when there are args which are also part `ArgGroups` Fixed times when ArgGroups are duplicated in usage strings Improvements Positional arguments which are part of a group are now formatted in a more readable way (fewer brackets) Positional arguments use the standard <> brackets to reduce confusion The default help string for the help subcommand has been shortened to fit in 80 columns Here's the highlights from v2.4.0 Before Help: adds support for displaying info before help message Required Unless: adds support for allowing args that are required unless certain other args are present Bug fixes Here's the highlights from v2.3.0 New Help Template Engine!: Now you have full control over the layout of your help message. Major thanks to @hgrecco Pull crate Authors from Cargo.toml: One can now use the crate_authors! macro to automatically pull the crate authors from their Cargo.toml file (requires unstable cargo feature to enable) Colored Help Messages: Help messages can now be optionally colored (See the AppSettings::ColoredHelp setting). Screenshot below. A bunch of bug fixes Here's the highlights from v2.2.1 Help text auto wraps and aligns at for subcommands too! - Long help strings of subcommands will now properly wrap and align to term width on Linux and OS X. This can be turned off as well. Bug fixes An example of the optional colored help: Here's the highlights from v2.2.0 Help text auto wraps and aligns at term width! - Long help strings will now properly wrap and align to term width on Linux and OS X (and presumably Unix too). This can be turned off as well. Can customize the order of opts, flags, and subcommands in help messages - Instead of using the default alphabetical order, you can now re-arrange the order of your args and subcommands in help message. This helps to emphasize more popular or important options. Can auto-derive the order from declaration order - Have a bunch of args or subcommmands to re-order? You can now just derive the order from the declaration order! Help subcommand now accepts other subcommands as arguments! - Similar to other CLI precedents, the help subcommand can now accept other subcommands as arguments to display their help message. i.e. $ myprog help mysubcmd (Note these can even be nested heavily such as $ myprog help subcmd1 subcmd2 subcmd3 etc.) Other minor bug fixes An example of the help text wrapping at term width: In v2.1.2 Default Values: Args can now specify default values Next Line Help: Args can have help strings on the line following the argument (useful for long arguments, or those with many values). This can be set command-wide or for individual args Documentation Examples: The examples in the documentation have been vastly improved For full details, see CHANGELOG.md About clap is used to parse and validate the string of command line arguments provided by the user at runtime. You provide the list of valid possibilities, and clap handles the rest. This means you focus on your applications functionality, and less on the parsing and validating of arguments. clap also provides the traditional version and help switches (or flags) 'for free' meaning automatically with no configuration. It does this by checking list of valid possibilities you supplied and adding only the ones you haven't already defined. If you are using subcommands, clap will also auto-generate a help subcommand for you in addition to the traditional flags. Once clap parses the user provided string of arguments, it returns the matches along with any applicable values. If the user made an error or typo, clap informs them of the mistake and exits gracefully (or returns a Result type and allows you to perform any clean up prior to exit). Because of this, you can make reasonable assumptions in your code about the validity of the arguments. FAQ For a full FAQ and more in depth details, see the wiki page Comparisons First, let me say that these comparisons are highly subjective, and not meant in a critical or harsh manner. All the argument parsing libraries out there (to include clap) have their own strengths and weaknesses. Sometimes it just comes down to personal taste when all other factors are equal. When in doubt, try them all and pick one that you enjoy :) There's plenty of room in the Rust community for multiple implementations! How does clap compare to getopts? getopts is a very basic, fairly minimalist argument parsing library. This isn't a bad thing, sometimes you don't need tons of features, you just want to parse some simple arguments, and have some help text generated for you based on valid arguments you specify. The downside to this approach is that you must manually implement most of the common features (such as checking to display help messages, usage strings, etc.). If you want a highly custom argument parser, and don't mind writing the majority of the functionality yourself, getopts is an excellent base. getopts also doesn't allocate much, or at all. This gives it a very small performance boost. Although, as you start implementing additional features, that boost quickly disappears. Personally, I find many, many uses of getopts are manually implementing features that clap provides by default. Using clap simplifies your codebase allowing you to focus on your application, and not argument parsing. How does clap compare to docopt.rs? I first want to say I'm a big a fan of BurntSushi's work, the creator of Docopt.rs. I aspire to produce the quality of libraries that this man does! When it comes to comparing these two libraries they are very different. docopt tasks you with writing a help message, and then it parsers that message for you to determine all valid arguments and their use. Some people LOVE this approach, others do not. If you're willing to write a detailed help message, it's nice that you can stick that in your program and have docopt do the rest. On the downside, it's far less flexible. docopt is also excellent at translating arguments into Rust types automatically. There is even a syntax extension which will do all this for you, if you're willing to use a nightly compiler (use of a stable compiler requires you to somewhat manually translate from arguments to Rust types). To use BurntSushi's words, docopt is also a sort of black box. You get what you get, and it's hard to tweak implementation or customize the experience for your use case. Because docopt is doing a ton of work to parse your help messages and determine what you were trying to communicate as valid arguments, it's also one of the more heavy weight parsers performance-wise. For most applications this isn't a concern and this isn't to say docopt is slow, in fact from it. This is just something to keep in mind while comparing. All else being equal, what are some reasons to use clap? clap is as fast, and as lightweight as possible while still giving all the features you'd expect from a modern argument parser. In fact, for the amount and type of features clap offers it remains about as fast as getopts. If you use clap when just need some simple arguments parsed, you'll find it's a walk in the park. clap also makes it possible to represent extremely complex, and advanced requirements, without too much thought. clap aims to be intuitive, easy to use, and fully capable for wide variety use cases and needs. Features Below are a few of the features which clap supports, full descriptions and usage can be found in the documentation and examples/ directory Auto-generated Help, Version, and Usage information Can optionally be fully, or partially overridden if you want a custom help, version, or usage Auto-generated bash completion scripts at compile time Even works through many multiple levels of subcommands Works with options which only accept certain values Works with subcommand aliases Flags / Switches (i.e. bool fields) Both short and long versions supported (i.e. -f and --flag respectively) Supports combining short versions (i.e. -fBgoZ is the same as -f -B -g -o -Z) Supports multiple occurrences (i.e. -vvv or -v -v -v) Positional Arguments (i.e. those which are based off an index from the program name) Supports multiple values (i.e. myprog <file>... such as myprog file1.txt file2.txt being two values for the same ""file"" argument) Supports Specific Value Sets (See below) Can set value parameters (such as the minimum number of values, the maximum number of values, or the exact number of values) Can set custom validations on values to extend the argument parsing capability to truly custom domains Option Arguments (i.e. those that take values) Both short and long versions supported (i.e. -o value, -ovalue, -o=value and --option value or --option=value respectively) Supports multiple values (i.e. -o <val1> -o <val2> or -o <val1> <val2>) Supports delimited values (i.e. -o=val1,val2,val3, can also change the delimiter) Supports Specific Value Sets (See below) Supports named values so that the usage/help info appears as -o <FILE> <INTERFACE> etc. for when you require specific multiple values Can set value parameters (such as the minimum number of values, the maximum number of values, or the exact number of values) Can set custom validations on values to extend the argument parsing capability to truly custom domains Sub-Commands (i.e. git add <file> where add is a sub-command of git) Support their own sub-arguments, and sub-sub-commands independent of the parent Get their own auto-generated Help, Version, and Usage independent of parent Support for building CLIs from YAML - This keeps your Rust source nice and tidy and makes supporting localized translation very simple! Requirement Rules: Arguments can define the following types of requirement rules Can be required by default Can be required only if certain arguments are present Can require other arguments to be present Confliction Rules: Arguments can optionally define the following types of exclusion rules Can be disallowed when certain arguments are present Can disallow use of other arguments when present POSIX Override Rules: Arguments can define rules to support POSIX overriding Groups: Arguments can be made part of a group Fully compatible with other relational rules (requirements, conflicts, and overrides) which allows things like requiring the use of any arg in a group, or denying the use of an entire group conditionally Specific Value Sets: Positional or Option Arguments can define a specific set of allowed values (i.e. imagine a --mode option which may only have one of two values fast or slow such as --mode fast or --mode slow) Default Values: Although not specifically provided by clap you can achieve this exact functionality from Rust's Option<&str>.unwrap_or(""some default"") method (or Result<T,String>.unwrap_or(T) when using typed values) Automatic Version from Cargo.toml: clap is fully compatible with Rust's env!() macro for automatically setting the version of your application to the version in your Cargo.toml. See 09_auto_version example for how to do this (Thanks to jhelwig for pointing this out) Typed Values: You can use several convenience macros provided by clap to get typed values (i.e. i32, u8, etc.) from positional or option arguments so long as the type you request implements std::str::FromStr See the 12_typed_values example. You can also use claps arg_enum! macro to create an enum with variants that automatically implement std::str::FromStr. See 13a_enum_values_automatic example for details Suggestions: Suggests corrections when the user enters a typo. For example, if you defined a --myoption argument, and the user mistakenly typed --moyption (notice y and o transposed), they would receive a Did you mean '--myoption'? error and exit gracefully. This also works for subcommands and flags. (Thanks to Byron for the implementation) (This feature can optionally be disabled, see 'Optional Dependencies / Features') Colorized Errors (Non Windows OS only): Error message are printed in in colored text (this feature can optionally be disabled, see 'Optional Dependencies / Features'). Global Arguments: Arguments can optionally be defined once, and be available to all child subcommands. Custom Validations: You can define a function to use as a validator of argument values. Imagine defining a function to validate IP addresses, or fail parsing upon error. This means your application logic can be solely focused on using values. POSIX Compatible Conflicts - In POSIX args can be conflicting, but not fail parsing because whichever arg comes last ""wins"" so to speak. This allows things such as aliases (i.e. alias ls='ls -l' but then using ls -C in your terminal which ends up passing ls -l -C as the final arguments. Since -l and -C aren't compatible, this effectively runs ls -C in clap if you choose...clap also supports hard conflicts that fail parsing). (Thanks to Vinatorul!) Supports the Unix -- meaning, only positional arguments follow Quick Example The following examples show a quick example of some of the very basic functionality of clap. For more advanced usage, such as requirements, conflicts, groups, multiple values and occurrences see the documentation, examples/ directory of this repository or the video tutorials (which are quite outdated by now). NOTE: All these examples are functionally the same, but show three different styles in which to use clap The following example is show a method that allows more advanced configuration options (not shown in this small example), or even dynamically generating arguments when desired. The downside is it's more verbose. // (Full example with detailed comments in examples/01b_quick_example.rs) // // This example demonstrates clap's full 'builder pattern' style of creating arguments which is // more verbose, but allows easier editing, and at times more advanced options, or the possibility // to generate arguments dynamically. extern crate clap; use clap::{Arg, App, SubCommand};  fn main() {     let matches = App::new(""My Super Program"")                           .version(""1.0"")                           .author(""Kevin K. <kbknapp@gmail.com>"")                           .about(""Does awesome things"")                           .arg(Arg::with_name(""config"")                                .short(""c"")                                .long(""config"")                                .value_name(""FILE"")                                .help(""Sets a custom config file"")                                .takes_value(true))                           .arg(Arg::with_name(""INPUT"")                                .help(""Sets the input file to use"")                                .required(true)                                .index(1))                           .arg(Arg::with_name(""v"")                                .short(""v"")                                .multiple(true)                                .help(""Sets the level of verbosity""))                           .subcommand(SubCommand::with_name(""test"")                                       .about(""controls testing features"")                                       .version(""1.3"")                                       .author(""Someone E. <someone_else@other.com>"")                                       .arg(Arg::with_name(""debug"")                                           .short(""d"")                                           .help(""print debug information verbosely"")))                           .get_matches();      // Gets a value for config if supplied by user, or defaults to ""default.conf""     let config = matches.value_of(""config"").unwrap_or(""default.conf"");     println!(""Value for config: {}"", config);      // Calling .unwrap() is safe here because ""INPUT"" is required (if ""INPUT"" wasn't     // required we could have used an 'if let' to conditionally get the value)     println!(""Using input file: {}"", matches.value_of(""INPUT"").unwrap());      // Vary the output based on how many times the user used the ""verbose"" flag     // (i.e. 'myprog -v -v -v' or 'myprog -vvv' vs 'myprog -v'     match matches.occurrences_of(""v"") {         0 => println!(""No verbose info""),         1 => println!(""Some verbose info""),         2 => println!(""Tons of verbose info""),         3 | _ => println!(""Don't be crazy""),     }      // You can handle information about subcommands by requesting their matches by name     // (as below), requesting just the name used, or both at the same time     if let Some(matches) = matches.subcommand_matches(""test"") {         if matches.is_present(""debug"") {             println!(""Printing debug info..."");         } else {             println!(""Printing normally..."");         }     }      // more program logic goes here... } The following example is functionally the same as the one above, but shows a far less verbose method but sacrifices some of the advanced configuration options (not shown in this small example). // (Full example with detailed comments in examples/01a_quick_example.rs) // // This example demonstrates clap's ""usage strings"" method of creating arguments which is less // less verbose extern crate clap; use clap::{Arg, App, SubCommand};  fn main() {     let matches = App::new(""myapp"")                           .version(""1.0"")                           .author(""Kevin K. <kbknapp@gmail.com>"")                           .about(""Does awesome things"")                           .args_from_usage(                               ""-c, --config=[FILE] 'Sets a custom config file'                               <INPUT>              'Sets the input file to use'                               -v...                'Sets the level of verbosity'"")                           .subcommand(SubCommand::with_name(""test"")                                       .about(""controls testing features"")                                       .version(""1.3"")                                       .author(""Someone E. <someone_else@other.com>"")                                       .arg_from_usage(""-d, --debug 'Print debug information'""))                           .get_matches();      // Same as previous example... } This final method shows how you can use a YAML file to build your CLI and keep your Rust source tidy or support multiple localized translations by having different YAML files for each localization. First, create the cli.yml file to hold your CLI options, but it could be called anything we like (we'll use the same both examples above to keep it functionally equivalent): name: myapp version: 1.0 author: Kevin K. <kbknapp@gmail.com> about: Does awesome things args:     - config:         short: c         long: config         value_name: FILE         help: Sets a custom config file         takes_value: true     - INPUT:         help: Sets the input file to use         required: true         index: 1     - verbose:         short: v         multiple: true         help: Sets the level of verbosity subcommands:     - test:         about: controls testing features         version: 1.3         author: Someone E. <someone_else@other.com>         args:             - debug:                 short: d                 help: print debug information Now we create our main.rs file just like we would have with the previous two examples: // (Full example with detailed comments in examples/17_yaml.rs) // // This example demonstrates clap's building from YAML style of creating arguments which is far // more clean, but takes a very small performance hit compared to the other two methods. #[macro_use] extern crate clap; use clap::App;  fn main() {     // The YAML file is found relative to the current file, similar to how modules are found     let yaml = load_yaml!(""cli.yml"");     let matches = App::from_yaml(yaml).get_matches();      // Same as previous examples... } NOTE: The YAML and macro builder options require adding a special features flag when compiling clap because they are not compiled by default. Simply change your clap = ""2"" to clap = {version = ""2"", features = [""yaml""]} for YAML, or features = [""unstable""] for the macro builder, in your Cargo.toml. If you were to compile any of the above programs and run them with the flag --help or -h (or help subcommand, since we defined test as a subcommand) the following would be output $ myprog --help My Super Program 1.0 Kevin K. <kbknapp@gmail.com> Does awesome things  USAGE:     MyApp [FLAGS] [OPTIONS] <INPUT> [SUBCOMMAND]  FLAGS:     -h, --help       Prints this message     -v               Sets the level of verbosity     -V, --version    Prints version information  OPTIONS:     -c, --config <FILE>    Sets a custom config file  ARGS:     INPUT    The input file to use  SUBCOMMANDS:     help    Prints this message     test    Controls testing features NOTE: You could also run myapp test --help to see similar output and options for the test subcommand. Try it! Pre-Built Test To try out the pre-built example, use the following steps: Clone the repository $ git clone https://github.com/kbknapp/clap-rs && cd clap-rs/clap-tests Compile the example $ cargo build --release Run the help info $ ./target/release/claptests --help Play with the arguments! BYOB (Build Your Own Binary) To test out clap's default auto-generated help/version follow these steps: Create a new cargo project $ cargo new fake --bin && cd fake Add clap to your Cargo.toml * [dependencies] clap = ""2"" Add the following to your src/main.rs extern crate clap; use clap::App;  fn main() {   App::new(""fake"").version(""v1.0-beta"").get_matches(); } Build your program $ cargo build --release Run with help or version $ ./target/release/fake --help or $ ./target/release/fake --version Usage For full usage, add clap as a dependency in your Cargo.toml file to use from crates.io:  [dependencies]  clap = ""2"" Or track the latest on the master branch at github: [dependencies.clap] git = ""https://github.com/kbknapp/clap-rs.git"" Add extern crate clap; to your crate root. Define a list of valid arguments for your program (see the documentation or examples/ directory of this repo) Then run cargo build or cargo update && cargo build for your project. Optional Dependencies / Features If you'd like to keep your dependency list to only clap, you can disable any features that require an additional dependency. To do this, add this to your Cargo.toml: [dependencies.clap] version = ""2"" default-features = false You can also selectively enable only the features you'd like to include, by adding: [dependencies.clap] version = ""2"" default-features = false  # Cherry-pick the features you'd like to use features = [ ""suggestions"", ""color"" ] The following is a list of optional clap features: ""suggestions"": Turns on the Did you mean '--myoption'? feature for when users make typos. (builds dependency strsim) ""color"": Turns on colored error messages. This feature only works on non-Windows OSs. (builds dependency ansi-term and libc) ""wrap_help"": Automatically detects terminal width and wraps long help text lines with proper indentation alignment (builds dependency libc and 'unicode-width') ""lints"": This is not included by default and should only be used while developing to run basic lints against changes. This can only be used on Rust nightly. (builds dependency clippy) ""debug"": This is not included by default and should only be used while developing to display debugging information. ""yaml"": This is not included by default. Enables building CLIs from YAML documents. (builds dependency yaml-rust) ""unstable"": This is not included by default. Enables unstable features, unstable refers to whether or not they may change, not performance stability. Dependencies Tree The following graphic depicts claps dependency graph (generated using cargo-graph). Dashed Line: Optional dependency Red Color: NOT included by default (must use cargo features to enable) Blue Color: Dev dependency, only used while developing. More Information You can find complete documentation on the github-pages site for this project. You can also find usage examples in the examples/ directory of this repo. Video Tutorials There's also the video tutorial series Argument Parsing with Rust. NOTE: This series is getting out of date and needs to be updated How to Contribute Contributions are always welcome! And there is a multitude of ways in which you can help depending on what you like to do, or are good at. Anything from documentation, code cleanup, issue completion, new features, you name it, even filing issues is contributing and greatly appreciated! Another really great way to help is if you find an interesting, or helpful way in which to use clap. You can either add it to the examples/ directory, or file an issue and tell me. I'm all about giving credit where credit is due :) Please read CONTRIBUTING.md before you start contributing. Running the tests If contributing, you can run the tests as follows (assuming you're in the clap-rs directory) $ cargo test  # If your tests affect the YAML feature set $ cargo test --features yaml  # Only on nightly compiler: $ cargo build --features lints  Goals There are a few goals of clap that I'd like to maintain throughout contributions. If your proposed changes break, or go against any of these goals we'll discuss the changes further before merging (but will not be ignored, all contributes are welcome!). These are by no means hard-and-fast rules, as I'm no expert and break them myself from time to time (even if by mistake or ignorance :P). Remain backwards compatible when possible If backwards compatibility must be broken, use deprecation warnings if at all possible before removing legacy code This does not apply for security concerns Parse arguments quickly Parsing of arguments shouldn't slow down usage of the main program This is also true of generating help and usage information (although slightly less stringent, as the program is about to exit) Try to be cognizant of memory usage Once parsing is complete, the memory footprint of clap should be low since the main program is the star of the show panic! on developer error, exit gracefully on end-user error License clap is licensed under the MIT license. Please read the LICENSE-MIT file in this repository for more information. Recent Breaking Changes clap follows semantic versioning, so breaking changes should only happen upon major version bumps. The only exception to this rule is breaking changes that happen due to implementation that was deemed to be a bug, security concerns, or it can be reasonably proved to affect no code. For the full details, see CHANGELOG.md. As of 2.0.0 (From 1.x) Fewer lifetimes! Yay! App<'a, 'b, 'c, 'd, 'e, 'f> => App<'a, 'b> Arg<'a, 'b, 'c, 'd, 'e, 'f> => Arg<'a, 'b> ArgMatches<'a, 'b> => ArgMatches<'a> Simply Renamed App::arg_group => App::group App::arg_groups => App::groups ArgGroup::add => ArgGroup::arg ArgGroup::add_all => ArgGroup::args ClapError => Error struct field ClapError::error_type => Error::kind ClapResult => Result ClapErrorType => ErrorKind Removed Deprecated Functions and Methods App::subcommands_negate_reqs App::subcommand_required App::arg_required_else_help App::global_version(bool) App::versionless_subcommands App::unified_help_messages App::wait_on_error App::subcommand_required_else_help SubCommand::new App::error_on_no_subcommand Arg::new Arg::mutually_excludes Arg::mutually_excludes_all Arg::mutually_overrides_with simple_enum! Renamed Error Variants InvalidUnicode => InvalidUtf8 InvalidArgument => UnknownArgument Usage Parser Value names can now be specified inline, i.e. -o, --option <FILE> <FILE2> 'some option which takes two files' There is now a priority of order to determine the name - This is perhaps the biggest breaking change. See the documentation for full details. Prior to this change, the value name took precedence. Ensure your args are using the proper names (i.e. typically the long or short and NOT the value name) throughout the code ArgMatches::values_of returns an Values now which implements Iterator (should not break any code) crate_version! returns &'static str instead of String Using the clap_app! macro requires compiling with the unstable feature because the syntax could change slightly in the future Deprecations Old method names will be left around for several minor version bumps, or one major version bump. As of 2.2.0: None! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kbknapp/clap-rs"	"— a simple to use, full featured command-line argument parser"	"true"
"Command-line argument parsing"	""	"https://travis-ci.org/kbknapp/clap-rs"	"— a simple to use, full featured command-line argument parser"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a simple to use, full featured command-line argument parser"	"true"
"Command-line interface"	"kkawakam/rustyline"	"https://github.com/kkawakam/rustyline"	"— Readline Implementation in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"35"	"3"	"9"	"GitHub - kkawakam/rustyline: Readline Implementation in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 35 Fork 9 kkawakam/rustyline Code Issues 8 Pull requests 2 Pulse Graphs Readline Implementation in Rust https://crates.io/crates/rustyline/ 190 commits 3 branches 5 releases Fetching contributors Rust 99.5% Shell 0.5% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master release-0.2.3 Nothing to show 0.2.3 0.2.2 0.2.1 0.2.0 0.1.0 Nothing to show New pull request Latest commit f22d3c2 Jul 9, 2016 kkawakam committed on GitHub Merge pull request #42 from kkawakam/windows_support … Adding basic windows support Permalink Failed to load latest commit information. examples Remove ANSI escape sequence from example if on windows Jul 9, 2016 src Porting 3e3db21 to windows_support branch Jul 9, 2016 .gitignore Add history.txt to gitignore Jul 9, 2016 .travis.yml Let Travis run Rust stable/beta. Jun 1, 2016 Cargo.toml Check winapi calls. Jul 9, 2016 LICENSE Updated Cargo manifest and License Sep 5, 2015 README.md Update README reflecting current state of supported platforms Jul 9, 2016 appveyor.yml Check winapi calls. Jul 9, 2016 deploy-docs.sh Added travis configuration and script to automatically deploy new doc… Jun 1, 2015 rustfmt.toml Rustfmt May 14, 2016 README.md RustyLine Readline implementation in Rust that is based on Antirez' Linenoise Documentation Supported Platforms Linux Windows - Work in Progress (Issue #37), modifier keys do not work Build This project uses Cargo and Rust Nightly cargo build --release Example extern crate rustyline;  use rustyline::error::ReadlineError; use rustyline::Editor;  fn main() {     let mut rl = Editor::new();     if let Err(_) = rl.load_history(""history.txt"") {         println!(""No previous history."");     }     loop {         let readline = rl.readline("">> "");         match readline {             Ok(line) => {                 rl.add_history_entry(&line);                 println!(""Line: {}"", line);             },             Err(ReadlineError::Interrupted) => {                 println!(""CTRL-C"");                 break             },             Err(ReadlineError::Eof) => {                 println!(""CTRL-D"");                 break             },             Err(err) => {                 println!(""Error: {:?}"", err);                 break             }         }     }     rl.save_history(""history.txt"").unwrap(); } crates.io You can use this package in your project by adding the following to your Cargo.toml: [dependencies] rustyline = ""0.2.3"" Features Unicode (UTF-8) (linenoise supports only ASCII) Word completion (linenoise supports only line completion) Filename completion History search (Searching for Commands in the History) Kill ring (Killing Commands) Multi line mode Word commands Actions Keystroke Action Ctrl-A, Home Move cursor to the beginning of line Ctrl-B, Left Move cursor one character left Ctrl-C Interrupt/Cancel edition Ctrl-D, Del (if line is not empty) Delete character under cursor Ctrl-D (if line is empty) End of File Ctrl-E, End Move cursor to end of line Ctrl-F, Right Move cursor one character right Ctrl-H, BackSpace Delete character before cursor Ctrl-J, Return Finish the line entry Ctrl-K Delete from cursor to end of line Ctrl-L Clear screen Ctrl-N, Down Next match from history Ctrl-P, Up Previous match from history Ctrl-R Reverse Search history (Ctrl-S forward, Ctrl-G cancel) Ctrl-T Transpose previous character with current character Ctrl-U Delete from start of line to cursor Ctrl-V Insert any special character without perfoming its associated action Ctrl-W Delete word leading up to cursor (using white space as a word boundary) Ctrl-Y Paste from Yank buffer (Alt-Y to paste next yank instead) Tab Next completion Alt-B, Alt-Left Move cursor to previous word Alt-C Capitalize the current word Alt-D Delete forwards one word Alt-F, Alt-Right Move cursor to next word Alt-L Lower-case the next word Alt-T Transpose words Alt-U Upper-case the next word Alt-Y See Ctrl-Y Alt-BackSpace Kill from the start of the current word, or, if between words, to the start of the previous word ToDo Show completion list expose an API callable from C Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kkawakam/rustyline"	"— Readline Implementation in Rust"	"true"
"Command-line interface"	""	"https://travis-ci.org/kkawakam/rustyline"	"— Readline Implementation in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Readline Implementation in Rust"	"true"
"Command-line interface"	"srijs/rust-copperline"	"https://github.com/srijs/rust-copperline"	"— pure-Rust Command Line Editing Library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"11"	"2"	"4"	"GitHub - srijs/rust-copperline: Pure-Rust Command Line Editing Library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 11 Fork 4 srijs/rust-copperline Code Issues 1 Pull requests 0 Pulse Graphs Pure-Rust Command Line Editing Library https://crates.io/crates/copperline 125 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit d011fdd Mar 6, 2016 srijs clean up buffer advance/go_back Permalink Failed to load latest commit information. examples fix api Dec 27, 2015 src clean up buffer advance/go_back Mar 6, 2016 .gitignore Initial commit Aug 31, 2015 Cargo.toml stop relying on strcursor crate Mar 5, 2016 LICENSE Initial commit Aug 31, 2015 README.md add project description to readme Dec 8, 2015 README.md rust-copperline Pure-Rust Command Line Editing Library Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/srijs/rust-copperline"	"— pure-Rust Command Line Editing Library"	"true"
"Compression"	"alexcrichton/bzip2-rs"	"https://github.com/alexcrichton/bzip2-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"1"	"6"	"GitHub - alexcrichton/bzip2-rs: libbz2 (bzip2 compression) bindings for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 6 Fork 6 alexcrichton/bzip2-rs Code Issues 1 Pull requests 0 Pulse Graphs libbz2 (bzip2 compression) bindings for Rust 87 commits 2 branches 0 releases Fetching contributors C 52.3% HTML 28.2% Rust 7.8% Groff 5.0% XSLT 2.7% Shell 1.8% Other 2.2% C HTML Rust Groff XSLT Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 418e124 Jul 10, 2016 alexcrichton committed on GitHub Merge pull request #13 from RandomInsano/master … Fixed accidental repetition. Permalink Failed to load latest commit information. bzip2-sys src .gitignore .travis.yml Cargo.toml LICENSE-APACHE LICENSE-MIT README.md Add appveyor status to README Jul 12, 2015 appveyor.yml README.md bzip2 Documentation A streaming compression/decompression library for rust with bindings to libbz2. # Cargo.toml [dependencies] bzip2 = ""0.2"" License bzip2-rs is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses. See LICENSE-APACHE, and LICENSE-MIT for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alexcrichton/bzip2-rs"	"— bindings"	"true"
"Compression"	"libbz2"	"http://www.bzip.org"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"bzip2 : Home [ <Home> | Documentation | Downloads ] bzip2 and libbzip2 What is bzip2? bzip2 is a freely available, patent free (see below), high-quality data compressor. It typically compresses files to within 10% to 15% of the best available techniques (the PPM family of statistical compressors), whilst being around twice as fast at compression and six times faster at decompression. The current version is 1.0.6, released 20 Sept 2010. Version 1.0.6 removes a potential security vulnerability, CVE-2010-0405, so all users are recommended to upgrade immediately. Why would I want to use it? Because it compresses well. So it packs more stuff into your overfull disk drives, distribution CDs, backup tapes, USB sticks, etc. And/or it reduces your customer download times, long distance network traffic, etc. It's not the world's fastest compressor, but it's still fast enough to be very useful. Because it's open-source (BSD-style license), and, as far as I know, patent-free. (To the best of my knowledge. I can't afford to do a full patent search, so I can't guarantee this. Caveat emptor). So you can use it for whatever you like. Naturally, the source code is part of the distribution. Because it supports (limited) recovery from media errors. If you are trying to restore compressed data from a backup tape or disk, and that data contains some errors, bzip2 may still be able to decompress those parts of the file which are undamaged. Because you already know how to use it. bzip2's command line flags are similar to those of GNU Gzip, so if you know how to use gzip, you know how to use bzip2. Because it's very portable. It should run on any 32 or 64-bit machine with an ANSI C compiler. The distribution should compile unmodified on Unix and Win32 systems. Earlier versions have been ported with little difficulty to a large number of weird and wonderful systems. The code is organised as a library with a programming interface. The bzip2 program itself is a client of the library. You can use the library in your own programs, to directly read and write .bz2 files, or even just to compress data in memory using the bzip2 algorithms. Copyright © 1996 - 2016  julian@bzip.org Hosting kindly donated by Mythic Beasts"	"null"	"null"	"— bindings"	"true"
"Compression"	""	"https://travis-ci.org/alexcrichton/bzip2-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Compression"	"alexcrichton/flate2-rs"	"https://github.com/alexcrichton/flate2-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"54"	"6"	"19"	"GitHub - alexcrichton/flate2-rs: FLATE, Gzip, and Zlib bindings for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 54 Fork 19 alexcrichton/flate2-rs Code Issues 4 Pull requests 1 Pulse Graphs FLATE, Gzip, and Zlib bindings for Rust http://alexcrichton.com/flate2-rs 168 commits 3 branches 19 releases 13 contributors C 71.7% Rust 28.3% C Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags foo/bar gh-pages master Nothing to show 0.2.14 0.2.13 0.2.12 0.2.11 0.2.10 0.2.9 0.2.8 0.2.7 0.2.6 0.2.5 0.2.4 0.2.3 0.2.2 0.1.8 0.1.7 0.1.6 0.1.5 0.1.4 0.1.0 Nothing to show New pull request Latest commit 395d15e May 12, 2016 alexcrichton Add a number of quickcheck tests Permalink Failed to load latest commit information. miniz-sys Bump to 0.1.7 Nov 7, 2015 src Add a number of quickcheck tests May 12, 2016 tests Update to rust master Mar 21, 2015 .gitignore Bump to 0.1.2 Feb 5, 2015 .travis.yml Move travis from 1.1.0 -> stable Jan 25, 2016 Cargo.toml Add a number of quickcheck tests May 12, 2016 LICENSE-APACHE Add a dual Apache/MIT license Sep 3, 2014 LICENSE-MIT Add a dual Apache/MIT license Sep 3, 2014 README.md Add zlib to README Jan 18, 2016 appveyor.yml Don't call vcvarsall manually Jul 31, 2015 README.md flate2 Documentation A streaming compression/decompression library for Rust. The underlying implementation by default uses miniz but can optionally be get configured to use the system zlib, if available. Supported formats: deflate zlib gzip # Cargo.toml [dependencies] flate2 = ""0.2"" Using zlib instead of miniz: [dependencies] flate2 = { version = ""0.2"", features = [""zlib""], default-features = false } Compression extern crate flate2;  use std::io::prelude::*; use flate2::Compression; use flate2::write::ZlibEncoder;  fn main() {     let mut e = ZlibEncoder::new(Vec::new(), Compression::Default);     e.write(b""foo"");     e.write(b""bar"");     let compressed_bytes = e.finish(); } Decompression extern crate flate2;  use std::io::prelude::*; use flate2::read::GzDecoder;  fn main() {     let mut d = GzDecoder::new(""..."".as_bytes()).unwrap();     let mut s = String::new();     d.read_to_string(&mut s).unwrap();     println!(""{}"", s); } License flate2-rs is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses. See LICENSE-APACHE, and LICENSE-MIT for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alexcrichton/flate2-rs"	"— bindings"	"true"
"Compression"	"miniz"	"https://code.google.com/p/miniz/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Code Archive - Long-term storage for Google Code Project Hosting. Code Archive Skip to content Search Google About Google Privacy Terms"	"null"	"null"	"— bindings"	"true"
"Compression"	""	"https://travis-ci.org/alexcrichton/flate2-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Compression"	"alexcrichton/tar-rs"	"https://github.com/alexcrichton/tar-rs"	"— tar archive reading/writing in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"37"	"2"	"25"	"GitHub - alexcrichton/tar-rs: Tar file reading/writing for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 37 Fork 25 alexcrichton/tar-rs Code Issues 3 Pull requests 1 Pulse Graphs Tar file reading/writing for Rust http://alexcrichton.com/tar-rs 262 commits 3 branches 33 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master slash Nothing to show v0.4.0 0.4.6 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.14 0.2.13 0.2.12 0.2.11 0.2.10 0.2.9 0.2.8 0.2.7 0.2.6 0.2.5 0.2.4 0.2.2 0.2.1 0.1.11 0.1.10 0.1.9 0.1.8 0.1.7 0.1.6 0.1.0 Nothing to show New pull request Latest commit 59c71a9 Jul 14, 2016 alexcrichton Add a comment about atime/ctime Permalink Failed to load latest commit information. examples Add a simple example for writing an archive Jul 14, 2016 src Add a comment about atime/ctime Jul 14, 2016 tests Don't use #[should_fail] Jun 17, 2016 .gitignore Put documentation on gh-pages Aug 3, 2014 .travis.yml Improve coverage with -C link-dead-code Apr 30, 2016 Cargo.toml A few style touch-ups here and there Jun 17, 2016 LICENSE-APACHE Add a dual Apache/MIT license Sep 3, 2014 LICENSE-MIT Add a dual Apache/MIT license Sep 3, 2014 README.md Add required unwrap() to README Jul 14, 2016 appveyor.yml Test all Windows triples Oct 18, 2015 README.md tar-rs Documentation A tar archive reading/writing library for Rust. # Cargo.toml [dependencies] tar = ""0.3"" Reading an archive extern crate tar;  use std::io::prelude::*; use std::fs::File; use tar::Archive;  fn main() {     let file = File::open(""foo.tar"").unwrap();     let mut a = Archive::new(file);      for file in a.entries().unwrap() {         // Make sure there wasn't an I/O error         let mut file = file.unwrap();          // Inspect metadata about the file         println!(""{:?}"", file.header().path().unwrap());         println!(""{}"", file.header().size().unwrap());          // files implement the Read trait         let mut s = String::new();         file.read_to_string(&mut s).unwrap();         println!(""{}"", s);     } }  Writing an archive extern crate tar;  use std::io::prelude::*; use std::fs::File; use tar::Builder;  fn main() {     let file = File::create(""foo.tar"").unwrap();     let mut a = Builder::new(file);      a.append_path(""file1.txt"").unwrap();     a.append_file(""file2.txt"", &mut File::open(""file3.txt"").unwrap()).unwrap(); } License tar-rs is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses. See LICENSE-APACHE, and LICENSE-MIT for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alexcrichton/tar-rs"	"— tar archive reading/writing in Rust"	"true"
"Compression"	""	"https://travis-ci.org/alexcrichton/tar-rs"	"— tar archive reading/writing in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— tar archive reading/writing in Rust"	"true"
"Compression"	"ende76/brotli-rs"	"https://github.com/ende76/brotli-rs"	"— implementation of compression"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"35"	"6"	"8"	"GitHub - ende76/brotli-rs: A Brotli implementation in pure and safe Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 35 Fork 8 ende76/brotli-rs Code Issues 1 Pull requests 0 Pulse Graphs A Brotli implementation in pure and safe Rust 238 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 8b0ff52 May 6, 2016 ende76 Merge pull request #26 from Fraser999/fix_warnings … Fixed compiler warnings. Permalink Failed to load latest commit information. benches data docs src tests Fixed compiler warnings. Also changed some `assert_eq!` instances for… May 3, 2016 .gitignore .hgignore MOD: ignored afl-findings/ Oct 26, 2015 .travis.yml Cargo.toml LICENSE README.md README.md Brotli-rs - Brotli decompression in pure, safe Rust Documentation Compression provides a <Read>-struct to wrap a Brotli-compressed stream. A consumer is thus able to read a compressed stream with usual convenience. Changelog v0.3.22 -> v0.3.23 Bug with literal buffer not being populated when processing uncompressed metablock, bug where a valid stream could be rejected too early as oversized, if the last bytes happened to be shortened by an OMIT-type transformation after the early check, reported and fixed by Daniel. v0.3.21 -> v0.3.22 Bug with metablock structure not getting fully reset when encountering a new metablock in the brotli stream, reported and fixed by Daniel. v0.3.20 -> v0.3.21 Bug with multiple metablocks, reported and fixed by Daniel. v0.3.19 -> v0.3.20 Worked around feature gate issue in nightly. (Thanks, Corey!) v0.3.18 -> v0.3.19 Removed 64k big Pseudo-Code lookup table, because creating this trivial table probably took more time than making the calculcation on the fly. (Bench tests seem to suggest a 1% time savings without the lookup table) v0.3.17 -> v0.3.18 Fixed case where a simple prefix code could have duplicate symbols. v0.3.16 -> v0.3.17 Fixed case where a complex prefix code could have an incorrect checksum on its runlength code. v0.3.15 -> v0.3.16 Fixed incorrect calculation of alphabet size for distance code. Fixed evaluation where streams with excessive insert/copy lengths could be rejected early. v0.3.14 -> v0.3.15 Fixed injection of invalid symbols in simple prefix code. v0.3.13 -> v0.3.14 Fixed invalid block-type in switch command. (Thanks, Corey!). v0.3.12 -> v0.3.13 Fixed uncaught non-positive distances. (Thanks, Corey!). v0.3.11 -> v0.3.12 Fixed uncaught zero-byte in word transformation. (Thanks, Corey!). v0.3.10 -> v0.3.11 Fixed possible arithmetic overflow in word transformation. (Thanks, Corey!). v0.3.9 -> v0.3.10 Fixed incorrect type for runlength code. (Thanks, Corey!). v0.3.8 -> v0.3.9 Fixed incorrect array index bound check in tree lookup. (Thanks, Corey!). v0.3.7 -> v0.3.8 Fixed some value range checks on block types and ntree*. (Thanks, Corey!). v0.3.6 -> v0.3.7 Went over ""unreachable!()"" statements, analyzed, and handled error condition properly, if they were reachable through invalid data. v0.3.5 -> v0.3.6 Fixed a case where an invalid prefix code with all-zero codelengths could create an index-out-of-bounds panic. (Thanks, Corey!). v0.3.4 -> v0.3.5 Fixed a case where an invalid insert-and-copy-length-code would produce a panic. (Thanks, Corey!). v0.3.1 -> v0.3.4 Fair amount of internal small improvements, improving code quality. Fixed a couple of cases where invalid streams would lead to panics and/or infinite loops (Thanks, Corey!). v0.3.0 -> v0.3.1 This is only a minor version bump, with no breakage in usage, but it's exciting nonetheless! In Brotli, a lot of work is done with and by prefix codes. Through a change in the internal representation of prefix codes, it was possible to speed the reference benchmark time by a factor of ~7. The benchmark decompresses the contents of the file data/monkey.compressed. With linked-list-based, recursive tree implementation: test bench_monkey ... bench: 866,888 ns/iter (+/- 58,119) With array-based, iterative tree implementation, before max-depth constraint: test bench_monkey ... bench: 704,282 ns/iter (+/- 220,068) With array-based, iterative tree implementation, with max-depth constraint: test bench_monkey ... bench: 120,745 ns/iter (+/- 16,627) v0.2.0 -> v0.3.0 renamed crate compression -> brotli restructured modules to avoid redundant paths like brotli::brotli::Decompressor (now it's just brotli::Decompressor) v0.1.0 -> v0.2.0 Decompressor::new() now accepts a Read, as opposed to a BitReader. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ende76/brotli-rs"	"— implementation of compression"	"true"
"Compression"	"Brotli"	"http://google-opensource.blogspot.co.uk/2015/09/introducing-brotli-new-compression.html"	"— implementation of compression"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Google Open Source Blog: Introducing Brotli: a new compression algorithm for the internet  Open Source Blog News about Google's open source student programs and software releases Introducing Brotli: a new compression algorithm for the internet Tuesday, September 22, 2015 At Google, we think that internet users’ time is valuable, and that they shouldn’t have to wait long for a web page to load. Because fast is better than slow, two years ago we published the Zopfli compression algorithm. This received such positive feedback in the industry that it has been integrated into many compression solutions, ranging from PNG optimizers to preprocessing web content. Based on its use and other modern compression needs, such as web font compression, today we are excited to announce that we have developed and open sourced a new algorithm, the Brotli compression algorithm. While Zopfli is Deflate-compatible, Brotli is a whole new data format. This new format allows us to get 20–26% higher compression ratios over Zopfli. In our study ‘Comparison of Brotli, Deflate, Zopfli, LZMA, LZHAM and Bzip2 Compression Algorithms’ we show that Brotli is roughly as fast as zlib’s Deflate implementation. At the same time, it compresses slightly more densely than LZMA and bzip2 on the Canterbury corpus. The higher data density is achieved by a 2nd order context modeling, re-use of entropy codes, larger memory window of past data and joint distribution codes. Just like Zopfli, the new algorithm is named after Swiss bakery products. Brötli means ‘small bread’ in Swiss German. The smaller compressed size allows for better space utilization and faster page loads. We hope that this format will be supported by major browsers in the near future, as the smaller compressed size would give additional benefits to mobile users, such as lower data transfer fees and reduced battery use. By Zoltan Szabadka, Software Engineer, Compression Team Google Labels: compression , zopfli    Labels  gsoc 415 releases 172 conference 90 gci 76 ghop 55 meetups 49 Linux 28 GSoC Meetups 25 Python 25 project hosting 24 hackathon 21 students 17 App Engine 16 C++ 16 Git 14 OSCON 14 library 13 Eclipse 12 games 12 GNOME 11 KDE 11 testing 11 Android 10 JavaScript 10 R 10 BSD 9 Java 9 accessibility 9 education 9 open source release 9 security 9 Chrome 8 Go 8 HTML5 8 Subversion 8 awards 8 Chromium 7 GSoC 10 Things 7 Google Earth 7 Selenium 7 database 7 licensing 7 maps 7 usability 7 Django 6 Google I/O 6 Samba 6 contest 6 documentation 6 Free Software Foundation 5 GCC 5 Gerrit 5 events 5 fonts 5 government 5 machine learning 5 standards 5 Creative Commons 4 Dart 4 GNU 4 GitHub 4 Google Cloud Platform 4 Haskell 4 Perl 4 mobile 4 protocol buffers 4 science 4 season of usability 4 statistics 4 webdriver 4 C 3 CSS 3 Google Compute Engine 3 JSON 3 Mercurial 3 PHP 3 Unicode 3 fun propulsion lab 3 internationalization 3 patents 3 translation 3 Objective-C 2 deep learning 2 ios 2 time zones 2 BigQuery 1 Kubernetes 1 Neural Networks 1 algorithms 1 artificial intelligence 1 bazel 1 big data 1 cardboard 1 clojure 1 compression 1 debugging 1 gmail 1 hardware 1 k8s 1 lisp 1 logo 1 melange 1 metabrainz 1 musicbrainz 1 natural language 1 nmap 1 open data 1 performance 1 research 1 sugar labs 1 ui automation 1 zopfli 1  Archive      2016 Jul Jun May Apr Mar Feb Jan     2015 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan     2014 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan     2013 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan     2012 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan     2011 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan     2010 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan     2009 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan     2008 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Feed Google Summer of Codeon Google Code-inon Follow @gsoc Visit Google Open Source Programs Office for more information. Company-wide Official Google Blog Public Policy Blog Student Blog Products Android Blog Chrome Blog Lat Long Blog Developers Developers Blog Ads Developer Blog Android Developers Blog Google Privacy Terms"	"null"	"null"	"— implementation of compression"	"true"
"Compression"	"JeffBelgum/rust-snappy"	"https://github.com/JeffBelgum/rust-snappy"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"2"	"5"	"GitHub - JeffBelgum/rust-snappy: Snappy bindings for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 7 Fork 5 JeffBelgum/rust-snappy forked from thestinger/rust-snappy Code Pull requests 1 Pulse Graphs Snappy bindings for Rust 49 commits 1 branch 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request #2 Compare This branch is 15 commits ahead of thestinger:master. Latest commit 6dc0716 Feb 7, 2016 JeffBelgum Merge pull request #1 from xitep/uncompress_to … Add uncompress_to Permalink Failed to load latest commit information. src .gitignore .travis.yml Cargo.toml README.md build.rs README.md Snappy [ Originally forked from https://github.com/thestinger/rust-snappy ] Snappy bindings for Rust (as written in the The Official Rust Book.) Documentation Usage Add this to your Cargo.toml: [dependencies] snappy = ""0.3"" and this to your crate root: extern crate snappy; Installing Snappy The Snappy C++ library can be installed on Mac OS X using homebrew brew install snappy. If that library is not installed in the usual path, you can export the LD_LIBRARY_PATH and LD_RUN_PATH environment variables before issueing cargo build. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/JeffBelgum/rust-snappy"	"— bindings"	"true"
"Compression"	"snappy"	"https://github.com/google/snappy"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1285"	"102"	"220"	"GitHub - google/snappy: A fast compressor/decompressor Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 102 Star 1,285 Fork 220 google/snappy Code Pull requests 6 Pulse Graphs A fast compressor/decompressor https://code.google.com/p/snappy/ 106 commits 2 branches 1 release 3 contributors C++ 93.0% M4 3.6% C 2.7% Other 0.7% C++ M4 C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 1.1.3 Nothing to show New pull request Latest commit 32d6d7d May 23, 2016 sesse Merge pull request #6 from deviance/provide-pkg-config-data … Provide pkg-config data Permalink Failed to load latest commit information. m4 Fix public issue #12: Don't keep autogenerated auto* files in Subvers… Mar 23, 2011 testdata Fix public issue 82: Stop distributing benchmark data files that have Feb 19, 2014 AUTHORS Revision created by MOE tool push_codebase. Mar 18, 2011 COPYING Change some internal path names. Jun 22, 2015 ChangeLog Release Snappy 1.1.3; getting the new Uncompress variant in a release… Jul 7, 2015 Makefile.am Provide pkg-config data Jul 31, 2015 NEWS Release Snappy 1.1.3; getting the new Uncompress variant in a release… Jul 7, 2015 README Update URLs in the Snappy README to reflect the move to GitHub. Aug 26, 2015 autogen.sh Default to glibtoolize instead of libtoolize if it exists, Mar 10, 2016 configure.ac Merge pull request #6 from deviance/provide-pkg-config-data May 23, 2016 format_description.txt In the format description, use a clearer example to emphasize that va… Oct 5, 2011 framing_format.txt Add support for padding in the Snappy framed format. Oct 25, 2013 snappy-c.cc Include C bindings of Snappy, contributed by Martin Gieseking. Apr 8, 2011 snappy-c.h Change some internal path names. Jun 22, 2015 snappy-internal.h Move the logic from ComputeTable into the unit test, which means it's… Aug 19, 2015 snappy-sinksource.cc Add support for Uncompress(source, sink). Various changes to allow Jul 6, 2015 snappy-sinksource.h Add support for Uncompress(source, sink). Various changes to allow Jul 6, 2015 snappy-stubs-internal.cc Change Snappy from the Apache 2.0 to a BSD-type license. Mar 25, 2011 snappy-stubs-internal.h Work around an issue where some compilers interpret <:: as a trigraph. Jan 8, 2016 snappy-stubs-public.h.in Add #ifdef to guard against macro redefinition if this is included in… May 20, 2016 snappy-test.cc Fixed unit tests to compile under MSVC. Jun 22, 2015 snappy-test.h Fix an issue where the ByteSource path (used for parsing std::string) Jan 4, 2016 snappy.cc Make heuristic match skipping more aggressive. Apr 5, 2016 snappy.h Add support for Uncompress(source, sink). Various changes to allow Jul 6, 2015 snappy.pc.in Provide pkg-config data Jul 31, 2015 snappy_unittest.cc Fix an issue where the ByteSource path (used for parsing std::string) Jan 4, 2016 README Snappy, a fast compressor/decompressor.   Introduction ============  Snappy is a compression/decompression library. It does not aim for maximum compression, or compatibility with any other compression library; instead, it aims for very high speeds and reasonable compression. For instance, compared to the fastest mode of zlib, Snappy is an order of magnitude faster for most inputs, but the resulting compressed files are anywhere from 20% to 100% bigger. (For more information, see ""Performance"", below.)  Snappy has the following properties:   * Fast: Compression speeds at 250 MB/sec and beyond, with no assembler code.    See ""Performance"" below.  * Stable: Over the last few years, Snappy has compressed and decompressed    petabytes of data in Google's production environment. The Snappy bitstream    format is stable and will not change between versions.  * Robust: The Snappy decompressor is designed not to crash in the face of    corrupted or malicious input.  * Free and open source software: Snappy is licensed under a BSD-type license.    For more information, see the included COPYING file.  Snappy has previously been called ""Zippy"" in some Google presentations and the like.   Performance ===========  Snappy is intended to be fast. On a single core of a Core i7 processor in 64-bit mode, it compresses at about 250 MB/sec or more and decompresses at about 500 MB/sec or more. (These numbers are for the slowest inputs in our benchmark suite; others are much faster.) In our tests, Snappy usually is faster than algorithms in the same class (e.g. LZO, LZF, FastLZ, QuickLZ, etc.) while achieving comparable compression ratios.  Typical compression ratios (based on the benchmark suite) are about 1.5-1.7x for plain text, about 2-4x for HTML, and of course 1.0x for JPEGs, PNGs and other already-compressed data. Similar numbers for zlib in its fastest mode are 2.6-2.8x, 3-7x and 1.0x, respectively. More sophisticated algorithms are capable of achieving yet higher compression rates, although usually at the expense of speed. Of course, compression ratio will vary significantly with the input.  Although Snappy should be fairly portable, it is primarily optimized for 64-bit x86-compatible processors, and may run slower in other environments. In particular:   - Snappy uses 64-bit operations in several places to process more data at    once than would otherwise be possible.  - Snappy assumes unaligned 32- and 64-bit loads and stores are cheap.    On some platforms, these must be emulated with single-byte loads     and stores, which is much slower.  - Snappy assumes little-endian throughout, and needs to byte-swap data in    several places if running on a big-endian platform.  Experience has shown that even heavily tuned code can be improved. Performance optimizations, whether for 64-bit x86 or other platforms, are of course most welcome; see ""Contact"", below.   Usage =====  Note that Snappy, both the implementation and the main interface, is written in C++. However, several third-party bindings to other languages are available; see the home page at http://google.github.io/snappy/ for more information. Also, if you want to use Snappy from C code, you can use the included C bindings in snappy-c.h.  To use Snappy from your own C++ program, include the file ""snappy.h"" from your calling file, and link against the compiled library.  There are many ways to call Snappy, but the simplest possible is    snappy::Compress(input.data(), input.size(), &output);  and similarly    snappy::Uncompress(input.data(), input.size(), &output);  where ""input"" and ""output"" are both instances of std::string.  There are other interfaces that are more flexible in various ways, including support for custom (non-array) input sources. See the header file for more information.   Tests and benchmarks ====================  When you compile Snappy, snappy_unittest is compiled in addition to the library itself. You do not need it to use the compressor from your own library, but it contains several useful components for Snappy development.  First of all, it contains unit tests, verifying correctness on your machine in various scenarios. If you want to change or optimize Snappy, please run the tests to verify you have not broken anything. Note that if you have the Google Test library installed, unit test behavior (especially failures) will be significantly more user-friendly. You can find Google Test at    http://github.com/google/googletest  You probably also want the gflags library for handling of command-line flags; you can find it at    http://gflags.github.io/gflags/  In addition to the unit tests, snappy contains microbenchmarks used to tune compression and decompression performance. These are automatically run before the unit tests, but you can disable them using the flag --run_microbenchmarks=false if you have gflags installed (otherwise you will need to edit the source).  Finally, snappy can benchmark Snappy against a few other compression libraries (zlib, LZO, LZF, FastLZ and QuickLZ), if they were detected at configure time. To benchmark using a given file, give the compression algorithm you want to test Snappy against (e.g. --zlib) and then a list of one or more file names on the command line. The testdata/ directory contains the files used by the microbenchmark, which should provide a reasonably balanced starting point for benchmarking. (Note that baddata[1-3].snappy are not intended as benchmarks; they are used to verify correctness in the presence of corrupted data in the unit test.)   Contact =======  Snappy is distributed through GitHub. For the latest version, a bug tracker, and other information, see    http://google.github.io/snappy/  or the repository at    https://github.com/google/snappy  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/snappy"	"— bindings"	"true"
"Compression"	""	"https://travis-ci.org/JeffBelgum/rust-snappy"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Compression"	"slackito/zip"	"https://github.com/slackito/zip"	"— read and write ZIP archives"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"3"	"4"	"GitHub - slackito/zip: A simple rust library for working with ZIP archives Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 8 Fork 4 slackito/zip Code Issues 1 Pull requests 0 Pulse Graphs A simple rust library for working with ZIP archives 96 commits 1 branch 0 releases 5 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit cc6fd0e Mar 21, 2015 lifthrasiir Merge pull request #9 from seb-odessa/master … Fix build errors on nightly rust Permalink Failed to load latest commit information. src Fix spaces and comments' Mar 21, 2015 .gitignore Update for latest Cargo Aug 20, 2014 .travis.yml fixed .travis.yml. Jan 24, 2015 Cargo.toml language changes: updated deps, expr[..], old_io/path feature flags. Feb 21, 2015 LICENSE Initial version of the library Oct 3, 2013 README.md Update readme to actual status Feb 4, 2015 README.md rust-zip A simple rust library to read and write Zip archives, which is also my pet project for learning Rust. At the moment you can list the files in a Zip archive, as well as extracting them if they are either stored (uncompressed) or deflated, but I plan to add write support soon. A simple example #![feature(core, os, io, path)]  extern crate zip;  use std::os; use std::old_io::File; use zip::ZipReader; use zip::fileinfo::FileInfo;  fn main() {     let args = os::args();     match args.len(){         2 => list_content(&mut zip_file(&args[1][])),         3 => extract_file(&mut zip_file(&args[1][]), &args[2][]),         _ => print_usage(&args[0][])     } }  macro_rules! do_or_die{     ($expr:expr) => (match $expr {         Ok(val) => val,         Err(err) => {println!(""{}"",err); panic!()}     }) }  fn zip_file(file: &str) -> ZipReader<File>{     do_or_die!(zip::ZipReader::open(&Path::new(file))) }  fn output_file(file: &str)->File{     do_or_die!(File::create(&Path::new(file))) }  fn zipped_file_info(zip: &mut ZipReader<File>, file: &str) -> FileInfo{     do_or_die!(zip.info(file)) }  fn list_content(reader: &mut ZipReader<File>)->(){     for file in reader.files(){         let (year, month, day, hour, minute, second) = file.last_modified_datetime;         let mod_time = format!(""{:04}-{:02}-{:02} {:02}:{:02}:{:02}"", year, month, day, hour, minute, second);         println!(""{} ({}): bytes: {:10}, compressed: {:10}"",             file.name, mod_time, file.compressed_size, file.uncompressed_size);     } }  fn extract_file(zip: &mut ZipReader<File>, file: &str)->(){     let mut out = output_file(file);     let info = zipped_file_info(zip, file);     do_or_die!(zip.extract(&info, &mut out)); }  fn print_usage(this: &str)->(){     println!(""Usage: {} [file.zip] [file_to_extract]"", this); }  TODO Learn more Rust Write support Create a proper set of tests Support advanced features (more compression methods, ZIP64, encryption, multiple volumes...) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/slackito/zip"	"— read and write ZIP archives"	"true"
"Compression"	""	"https://travis-ci.org/slackito/zip"	"— read and write ZIP archives"	"null"	"null"	"null"	"BLAS"	"https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— read and write ZIP archives"	"true"
"Computation"	"blas"	"https://crates.io/keywords/blas"	"[]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[]"	"true"
"Computation"	"mikkyang/rust-blas"	"https://github.com/mikkyang/rust-blas"	"— BLAS bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"42"	"4"	"11"	"GitHub - mikkyang/rust-blas: BLAS bindings for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 42 Fork 11 mikkyang/rust-blas Code Issues 5 Pull requests 0 Pulse Graphs BLAS bindings for Rust 189 commits 4 branches 2 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags alt-blas gh-pages master ops Nothing to show 0.0.12 0.0.1 Nothing to show New pull request Latest commit bf6d331 Mar 6, 2016 mikkyang Merge pull request #18 from bluss/more-docs … Document matrix-vector operations Permalink Failed to load latest commit information. examples Update README example Sep 3, 2015 src Add description and equation for all matrix-vector operations Feb 28, 2016 .gitignore Initial commit Nov 7, 2014 Cargo.toml Version bump Dec 19, 2015 LICENSE Initial commit Nov 7, 2014 README.md Warn on sugar Jan 14, 2016 build.rs Simplify env vars Jun 10, 2015 README.md RBLAS Rust bindings and wrappers for BLAS (Basic Linear Algebra Subprograms). Overview RBLAS wraps each external call in a trait with the same name (but capitalized). This trait contains a single static method, of the same name. These traits are generic over the four main types of numbers BLAS supports: f32, f64, Complex32, and Complex64. For example the functions cblas_saxpy, cblas_daxpy, cblas_caxypy, and cblas_zaxpy are called with the function Axpy::axpy. Additionally, RBLAS introduces a few traits to shorten calls to these BLAS functions: Vector for types that implement vector-like characteristics and Matrix for types that implement matrix-like characteristics. The Vector trait is already implemented by Vec and [] types. Documentation Installation By default, the library links with blas dynamically. To link to an alternate implementation, like OpenBLAS, use the environment variable CARGO_BLAS. If you've already built the bindings, you may need to clean and build again. export CARGO_BLAS=openblas  Example extern crate rblas;  use rblas::Dot;  fn main() {     let x = vec![1.0, -2.0, 3.0, 4.0];     let y = [1.0, 1.0, 1.0, 1.0, 7.0];      let d = Dot::dot(&x, &y[..x.len()]);     assert_eq!(d, 6.0); } Sugared Example (Soon to be Deprecated) #[macro_use] extern crate rblas as blas; use blas::math::Mat; use blas::{Matrix, Vector}; use blas::math::Marker::T;  fn main() {     let x = vec![1.0, 2.0];     let xr = &x as &Vector<_>;     let i = mat![1.0, 0.0; 0.0, 1.0];     let ir = &i as &Matrix<_>;      assert!(xr + &x == 2.0 * xr);     assert!(ir * xr == x);      let dot = (xr ^ T) * xr;     assert!(dot == 5.0); } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mikkyang/rust-blas"	"— BLAS bindings"	"true"
"Computation"	"stainless-steel/blas"	"https://github.com/stainless-steel/blas"	"— BLAS bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"11"	"3"	"2"	"GitHub - stainless-steel/blas: Interface to BLAS Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 11 Fork 2 stainless-steel/blas Code Issues 1 Pull requests 0 Pulse Graphs Interface to BLAS 195 commits 2 branches 0 releases Fetching contributors Rust 54.2% Python 45.8% Rust Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. benches bin src .gitignore .travis.yml Cargo.toml LICENSE.md README.md appveyor.yml README.md BLAS The package provides an interface to the Basic Linear Algebra Subprograms. Documentation Example (C) use blas::c::*;  let (m, n, k) = (2, 4, 3); let a = vec![1.0, 4.0, 2.0, 5.0, 3.0, 6.0]; let b = vec![1.0, 5.0, 9.0, 2.0, 6.0, 10.0, 3.0, 7.0, 11.0, 4.0, 8.0, 12.0]; let mut c = vec![2.0, 7.0, 6.0, 2.0, 0.0, 7.0, 4.0, 2.0];  dgemm(Layout::ColumnMajor, Transpose::None, Transpose::None,       m, n, k, 1.0, &a, m, &b, k, 1.0, &mut c, m);  assert_eq!(&c, &vec![40.0, 90.0, 50.0, 100.0, 50.0, 120.0, 60.0, 130.0]); Example (Fortran) use blas::fortran::*;  let (m, n, k) = (2, 4, 3); let a = vec![1.0, 4.0, 2.0, 5.0, 3.0, 6.0]; let b = vec![1.0, 5.0, 9.0, 2.0, 6.0, 10.0, 3.0, 7.0, 11.0, 4.0, 8.0, 12.0]; let mut c = vec![2.0, 7.0, 6.0, 2.0, 0.0, 7.0, 4.0, 2.0];  dgemm(b'N', b'N', m, n, k, 1.0, &a, m, &b, k, 1.0, &mut c, m);  assert_eq!(&c, &vec![40.0, 90.0, 50.0, 100.0, 50.0, 120.0, 60.0, 130.0]); Contribution Your contribution is highly appreciated. Do not hesitate to open an issue or a pull request. Note that any contribution submitted for inclusion in the project will be licensed according to the terms given in LICENSE.md. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/stainless-steel/blas"	"— BLAS bindings"	"true"
"Computation"	""	"https://travis-ci.org/stainless-steel/blas"	"— BLAS bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— BLAS bindings"	"true"
"Computation"	"GMP"	"https://gmplib.org/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The GNU MP Bignum Library GMP «Arithmetic without limitations» The GNU Multiple Precision Arithmetic Library Last modified: 2016-07-03 Documentation: 6.1.1 HTML | 6.1.1 PDF Download: gmp-6.1.1.tar.lz | Release notes   NEW 2016-06-20 Development: Developers' corner GMPbench: Results | Download benchmark sources Fun: Compute billions of digits of π using GMP! Security: GMP server security policy Page contents: What is GMP? Function categories Download Reporting bugs Mailing lists Current release status Future releases This site does not use cookies I agree!  What is GMP? GMP is a free library for arbitrary precision arithmetic, operating on signed integers, rational numbers, and floating-point numbers. There is no practical limit to the precision except the ones implied by the available memory in the machine GMP runs on. GMP has a rich set of functions, and the functions have a regular interface. The main target applications for GMP are cryptography applications and research, Internet security applications, algebra systems, computational algebra research, etc. GMP is carefully designed to be as fast as possible, both for small operands and for huge operands. The speed is achieved by using fullwords as the basic arithmetic type, by using fast algorithms, with highly optimised assembly code for the most common inner loops for a lot of CPUs, and by a general emphasis on speed. The first GMP release was made in 1991. It is continually developed and maintained, with a new release about once a year. Since version 6, GMP is distributed under the dual licenses, GNU LGPL v3 and GNU GPL v2. These licenses make the library free to use, share, and improve, and allow you to pass on the result. The GNU licenses give freedoms, but also set firm restrictions on the use with non-free programs. GMP is part of the GNU project. For more information about the GNU project, please see the official GNU web site. GMP's main target platforms are Unix-type systems, such as GNU/Linux, Solaris, HP-UX, Mac OS X/Darwin, BSD, AIX, etc. It also is known to work on Windows in both 32-bit and 64-bit mode. GMP is brought to you by a team listed in the manual. GMP is carefully developed and maintained, both technically and legally. We of course inspect and test contributed code carefully, but equally importantly we make sure we have the legal right to distribute the contributions, meaning users can safely use GMP. To achieve this, we will ask contributors to sign paperwork where they allow us to distribute their work. GMP function categories There are several categories of functions in GMP: High-level signed integer arithmetic functions (mpz). There are about 150 arithmetic and logic functions in this category. High-level rational arithmetic functions (mpq). This category consists of about 35 functions, but all signed integer arithmetic functions can be used too, by applying them to the numerator and denominator separately. High-level floating-point arithmetic functions (mpf). This is the GMP function category to use if the C type `double' doesn't give enough precision for an application. There are about 70 functions in this category. New projects should strongly consider using the much more complete GMP extension library mpfr instead of mpf. C++ class based interface to all of the above. (The C functions and types can of course be used directly from C++ too.) Low-level positive-integer, hard-to-use, very low overhead functions are found in the mpn category. No memory management is performed; the caller must ensure enough space is available for the results. The set of functions is not always regular, nor is the calling interface. These functions accept input arguments in the form of pairs consisting of a pointer to the least significant word, and an integral size telling how many limbs (= words) there are in that argument. The functions in the other categories call mpn for almost all their calculations. Of these functions about 60 are public. Download the latest release of GMP GMP 6.1.1 lz, 1936768 bytes xz, 1943164 bytes bz2, 2384919 bytes Main site, gmplib.org gmp-6.1.1.tar.lz gmp-6.1.1.tar.xz gmp-6.1.1.tar.bz2 USA, ftp.gnu.org gmp-6.1.1.tar.lz gmp-6.1.1.tar.xz gmp-6.1.1.tar.bz2 To try to verify that the file you have downloaded has not been tampered with, you can check that the GnuPG signature matches the contents of the file. Use your GnuPG software or a key server directly to get the key that was used for creating the signature. Starting from the repackaging of gmp-5.1.0 as gmp-5.1.0a.tar.* the following key is used to sign GMP releases: Key ID: 0x28C67298 Key type: 2560 bit RSA Fingerprint: 343C 2FF0 FBEE 5EC2 EDBE F399 F359 9FF8 28C6 7298 GnuPG signatures: gmp-6.1.1.tar.lz.sig   gmp-6.1.1.tar.xz.sig   gmp-6.1.1.tar.bz2.sig Instead of using a release, you may also get the latest code from the GMP repositories. This will require some more work compared to using a release. Reporting bugs in GMP Please first see the manual on how to report bugs. The proper address for bug reports is gmp-bugs at gmplib.org. Most problems with GMP these days are due to problems not in GMP, but with the compiler used for compiling the GMP sources. This is a major concern to the GMP project, since an incorrect computation is an incorrect computation, whether caused by a GMP bug or a compiler bug. We fight this by making the GMP testsuite have great coverage, so that it should catch every possible miscompilation. GMP mailing lists List Subscribe URL Archive URL Purpose gmp-bugs gmplib.org/mailman/listinfo/gmp-bugs gmplib.org/list-archives/gmp-bugs/ Bug reports (not questions!). See manual. gmp-announce gmplib.org/mailman/listinfo/gmp-announce gmplib.org/list-archives/gmp-announce/ Announcements from the developers (very little traffic) gmp-discuss gmplib.org/mailman/listinfo/gmp-discuss gmplib.org/list-archives/gmp-discuss/ Questions, Help, Discussions gmp-devel gmplib.org/mailman/listinfo/gmp-devel gmplib.org/list-archives/gmp-devel/ Technical discussions between developers gmp-commit gmplib.org/mailman/listinfo/gmp-commit gmplib.org/list-archives/gmp-commit/ Commit messages Note that we perform spam and virus filtering of these lists. The lists have been 100% spam-free during the last years. You cannot subscribe an AOL address to any GMP mailing list, since AOL blocks our mail server until we register with them as a ""bulk mailer"", something we will certainly never do. We're blocking all mail from PR China, since 99% of the spam arriving to the GMP moderators emanates from PR China. If you are affected but have a legitimate reason to send mail to the GMP project, e.g., if you work at a university or corporation with an interest in GMP, please let us know; we will open access for you. Status of the current release The current stable release is 6.1.1, released 2016-06-18. Issues with GMP 6.1.1: [No issues found yet.] Issues with GMP 6.1.0: An assembly file which is used for Intel Broadwell and Intel Skylake (except crippled Pentiums and Celerons without BMI2) will not work correctly for Windoze. Patch. Issues with GMP 6.0.0: [No issues found yet.] Issues with GMP 5.1.3: The documentation of mpn_set_str is incorrect and incomplete wrt allocation requirements. Patch. Issues with GMP 5.1.2: The functions mpn_sbpi1_div_qr_sec and mpn_sbpi1_div_r_sec compute incorrect results for some operands. With uniformly distributed random operands, the error is very hard to trigger, and for the intended use of these functions, operands can be expected to appear as such random operands from these functions' perspective. Patch. The internal function mpn_divrem_2 on Itanium clobbers two callee-saves registers. This can lead to miscomputations or crashes in the callers. Patch. See also issues for subsequent releases above. Issues with GMP 5.1.1: Windows only: A 64-bit build for AMD Bulldozer and Piledriver chips, or a fat 64-bit build running on these chips, will not work correctly. Patch. The function mpz_powm_ui computes garbage if the base argument is over 15000 decimal or the mod argument is at least 7500 decimal digits. No other GMP powm function is affected. Patch. See also issues for subsequent releases above. Issues with GMP 5.1.0: The mini-gmp.c file, which implements a subset of mpn and mpz, was not properly tested and contained a number of bugs. Please do not use the 5.1.0 version of mini-gmp.c. Note that these bugs do not affect GMP itself. The included top-level Makefile.in has an automake-generated distcheck target which creates a world-writable directory. This target is not used in the GMP release process, but it is a potential security problem affecting users who invoke this make target. This problem (and no other) is corrected in the gmp-5.1.0a.tar.* set of files. See also issues for subsequent releases above. For patches to older GMP versions, please see the Info on older GMP releases. Future releases Please see the GMPng page for information on what we're working on. Please send comments about this page to gmp-discuss at gmplib.org Copyright 2000–2016 Free Software Foundation Verbatim copying and distribution of this entire article is permitted in any medium, provided this notice is preserved."	"null"	"null"	""	"true"
"Computation"	"thestinger/rust-gmp"	"https://github.com/thestinger/rust-gmp"	"— libgmp bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"29"	"2"	"22"	"GitHub - thestinger/rust-gmp: gmp bindings for rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 29 Fork 22 thestinger/rust-gmp Code Pull requests 0 Pulse Graphs gmp bindings for rust 191 commits 1 branch 0 releases 9 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 150cb69 Jan 26, 2015 thestinger Merge pull request #18 from wizeman/div_fix … Fix Mpz::rem() division by zero check Permalink Failed to load latest commit information. src Merge pull request #18 from wizeman/div_fix Jan 26, 2015 .gitignore It is recommended to ignore Cargo.lock for libraries Oct 24, 2014 Cargo.toml Fix [[lib]] to [lib] deprecation warning Oct 24, 2014 LICENSE add the license file Oct 24, 2014 README.md add mpf_set_prec_raw to README Dec 31, 2012 README.md The following functions are intentionally left out of the bindings: gmp_randinit (not thread-safe, obsolete) mpz_random (not thread-safe, obsolete) mpz_random2 (not thread-safe, obsolete) mpf_set_default_prec (not thread-safe) mpf_get_default_prec (not thread-safe) mpf_init (not thread-safe) mpf_inits (not thread-safe, va_list wrapper) mpf_clears (va_list wrapper) mpf_swap (no better than rust's swap) mpf_set_prec_raw (could be exposed with an unsafe function if needed) mpz_inits (va_list wrapper) mpz_clears (va_list wrapper) mpz_swap (no better than rust's swap) mpq_inits (va_list wrapper) mpq_clears (va_list wrapper) mpq_swap (no better than rust's swap) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thestinger/rust-gmp"	"— libgmp bindings"	"true"
"Computation"	""	"https://travis-ci.org/thestinger/rust-gmp"	"— libgmp bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— libgmp bindings"	"true"
"Computation"	"GSL"	"http://www.gnu.org/software/gsl/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GSL - GNU Scientific Library - GNU Project - Free Software Foundation Skip to main text Set language English [en] The  9th HACKERS MEETING  will be held in Rennes (France) from August 18 to 20. JOIN THE FSF Free Software Supporter GNU Operating System Sponsored by the Free Software Foundation About GNU Philosophy Licenses Education = Software = Documentation Help GNU GSL - GNU Scientific Library Introduction The GNU Scientific Library (GSL) is a numerical library for C and C++ programmers. It is free software under the GNU General Public License. The library provides a wide range of mathematical routines such as random number generators, special functions and least-squares fitting. There are over 1000 functions in total with an extensive test suite. The complete range of subject areas covered by the library includes, Complex Numbers Roots of Polynomials Special Functions Vectors and Matrices Permutations Sorting BLAS Support Linear Algebra Eigensystems Fast Fourier Transforms Quadrature Random Numbers Quasi-Random Sequences Random Distributions Statistics Histograms N-Tuples Monte Carlo Integration Simulated Annealing Differential Equations Interpolation Numerical Differentiation Chebyshev Approximation Series Acceleration Discrete Hankel Transforms Root-Finding Minimization Least-Squares Fitting Physical Constants IEEE Floating-Point Discrete Wavelet Transforms Basis splines Running Statistics Sparse Matrices and Linear Algebra Unlike the licenses of proprietary numerical libraries the license of GSL does not restrict scientific cooperation. It allows you to share your programs freely with others. Downloading GSL The current stable version is GSL-2.1. It was released on 11 November 2015. Details of recent changes can be found in the NEWS file. GSL can be found in the gsl subdirectory on your nearest GNU mirror http://ftpmirror.gnu.org/gsl/. Main GNU ftp site: ftp://ftp.gnu.org/gnu/gsl/ For other ways to obtain GSL, please read How to get GNU Software Installation instructions can be found in the included README and INSTALL files. Precompiled binary packages are included in most GNU/Linux distributions. A compiled version of GSL is available as part of Cygwin on Windows (but we recommend using GSL on a free operating system, such as GNU/Linux). Verifying GSL Signature To verify the signature of the GSL tarball, please download both the gsl-X.Y.tar.gz and gsl-X.Y.tar.gz.sig files. The key used to sign the official releases can be found here. The signature can be verified with the following steps:  gpg --import gsl_key.txt gpg --verify gsl-X.Y.tar.gz.sig  Documentation GSL includes a 500 page reference manual in Texinfo format. You can print the manual in postscript or read it on your system using the shell command info gsl-ref (if the library is installed). The GSL Reference Manual is available online, GSL Reference Manual - HTML GSL Reference Manual - PDF GSL Reference Manual - Gzipped Postscript The manual has been published as a printed book (under the GNU Free Documentation License), the latest edition is GNU Scientific Library Reference Manual - Third Edition (January 2009), M. Galassi et al, ISBN 0954612078 (paperback) RRP $39.95. See www.network-theory.co.uk for ordering information. A Japanese translation is also available online (may not be the most recent version). GSL Reference Manual - Japanese Translation (by Daisuke Tominaga, AIST Computational Biology Research Center) A Portuguese translation is also available online. GSL Reference Manual - Portuguese Translation (by Jorge Barros de Abreu) Supported Platforms GSL is developed on the following platform, GNU/Linux with gcc It has been reported to compile on the following other platforms, SunOS 4.1.3 & Solaris 2.x (Sparc) Alpha GNU/Linux, gcc HP-UX 9/10/11, PA-RISC, gcc/cc IRIX 6.5, gcc m68k NeXTSTEP, gcc Compaq Alpha Tru64 Unix, gcc FreeBSD, OpenBSD & NetBSD, gcc Cygwin Apple Darwin 5.4 Hitachi SR8000 Super Technical Server, cc We require that GSL should build on any UNIX-like system with an ANSI C compiler, so if doesn't, that's a bug and we would love a patch! The complete library should also pass ""make check"". If you have found a bug, please report it to bug-gsl@gnu.org. Previously submitted bug reports can be found in the bug-gsl mailing list archives and the GSL bug database. Mailing Lists Follow the links to the individual mailing lists below to subscribe or view the list archives: Bug-gsl <bug-gsl@gnu.org> mailing list -- bug reports for the GNU Scientific Library should be sent here Help-gsl <help-gsl@gnu.org> users mailing list -- for questions about installation, how GSL works and how it is used, or general questions concerning GSL. Info-gsl <info-gsl@gnu.org> mailing list -- announcements of new releases are made here. You can also follow announcements via the Savannah GSL RSS feed. Motivation Here are some of the main benefits of using a free scientific library under the GNU General Public License, allows easier collaboration, library is freely available to everyone. software using the library can be released publicly as source-code. you can adapt the source code to your needs. respects your privacy - does not impose any conditions on ""in-house"" use. you can contribute back improvements to the user community. Special Features The library uses an object-oriented design. Different algorithms can be plugged-in easily or changed at run-time without recompiling the program. It is intended for ordinary scientific users. Anyone who knows some C programming will be able to start using the library straight-away. The interface was designed to be simple to link into very high-level languages, such as GNU Guile or Python The library is thread-safe. Where possible the routines have been based on reliable public-domain Fortran packages such as FFTPACK and QUADPACK, which the developers of GSL have reimplemented in C with modern coding conventions. The library is easy to compile and does not have any dependencies on other packages. Licensing GSL is distributed under the terms of the GNU General Public License (GPL). The reasons why the GNU Project uses the GPL are described in the following articles: Copyleft: Pragmatic Idealism by Richard Stallman Why you should not use the Lesser GPL for your next library by Richard Stallman Additional information for researchers is available in the following article: Releasing Free Software if you work at a University by Richard Stallman Some answers to common questions about the license: If I write an application which uses GSL, am I forced to distribute that application? No. The license gives you the option to distribute your application if you want to. You do not have to exercise this option in the license. If I wanted to distribute an application which uses GSL, what license would I need to use? The GNU General Public License (GPL). The bottom line for commercial users: GSL can be used internally (""in-house"") without restriction, but only redistributed in other software that is under the GNU GPL. More Information If you would like to refer to the GNU Scientific Library in a journal article, the recommended way is to cite the reference manual, e.g. M. Galassi et al, GNU Scientific Library Reference Manual (3rd Ed.), ISBN 0954612078. If you want to give a url, use ""http://www.gnu.org/software/gsl/"". Related Packages GSL requires a BLAS library for vector and matrix operations. The default CBLAS library supplied with GSL can be replaced by the tuned ATLAS library for better performance, ATLAS - a portable self-optimising BLAS library with CBLAS interface ATLAS is free software and its license is compatible with the GNU GPL. Other packages that are useful for scientific computing are: GLPK - GNU Linear Programming Kit FFTW - Large-scale Fast Fourier Transforms NLopt - nonlinear optimization with unconstrained, bound-constrained, and general nonlinear inequality constraints All these packages are free software (GNU GPL/LGPL). Development GSL development is hosted on Savannah.gnu.org at http://savannah.gnu.org/projects/gsl The repository is available via 'git' with  git clone git://git.savannah.gnu.org/gsl.git  Note: if you use git, you will need automake, autoconf, libtool, GNU m4, GNU make, and GNU Texinfo (makeinfo). To begin the build process from a checkout, start with: ./autogen.sh which will prepare the package for compilation. You can then use ./configure --enable-maintainer-mode and make in the usual way. Commit notifications are available through the git repository news feed. In addition to the GSL Reference Manual, anyone wanting to work on the library should read the GSL design document, GSL Design Document - HTML GSL is a mature library with a stable API. The main emphasis is on ensuring the stability of the existing functions, tidying up and fixing any bugs that are reported, and adding new, useful algorithms which have been well tested and documented. Potential contributors are encouraged to gain familiarity with the library by investigating and fixing known problems in the BUGS database. The project is always looking to introduce new capabilities and expand or improve existing functionality. To maintain stability, any new functionality is encouraged as packages, built on top of GSL and maintained independently by their authors, as in other free software projects. The design of GSL permits extensions to be used alongside the existing library easily by simple linking. Once a new extension is proven useful and stable, it can be incorporated into the main GSL repository. Discussions about the development of the library take place on the gsl-discuss@sourceware.org mailing list. Any comments from experts in numerical analysis are welcome. You can subscribe to gsl-discuss here. GSL is part of the GNU Project and so follows the GNU Coding Standards. Extensions/Applications The following third-party packages provide extensions to GSL. If you want to add a feature to GSL we recommend that you make it an extension first. We will list it here so that people can try it out. Extensions can be incorporated after they have been tested in real use (see ""How to help"" for more information). quasimontecarlo - quasi-Monte Carlo integration routines (David Zaslavsky) ISVD - Incremental Singular Value Decomposition (Attila Axt) Marray and Tensor - extensions for multidimensional arrays and tensors (Jordi Burguet Castell) ndlinear - simpler interface for N-dimensional least squares fits (Patrick Alken) Annealing - reworking of simulating annealing with new API (alpha - Marco Maggi) jacobi-0.9 - Jacobi polynomials and operations related to Gauss-jacobi quadrature (integration, derivatives and interpolation) (Paulo Jabardo) Ziggurat Gaussian - faster gaussian generator using Ziggurat method (Jochen Voss) -- now incorporated in GSL 1.8 wigner.c - alternative Wigner coefficient calculations (large j) (J. Underwood) adaptint.c - adaptive multidimensional integration, similar to cubpack (Steven G. Johnson) jsqrng - higher dimensional quasi-random sequences (J. Scott) qrngextra - extended dimensionality QRNGs (Philipp Baecker) CQP - solves convex quadratic problems (Ewgenij Hübner) Bundle - powerful bundle minimisation algorithm (needs CQP) (Ewgenij Hübner - upgraded to v1.2, Oct 2006) Geczy - additional minimisation algorithms (Peter Geczy) Quartic - quartic polynomial solver (Andrew Steiner) Fresnel - sine and cosine fresnel integrals (Aleksey Dmitriev) SimplexImproved - alternative simplex minimiser (Ivo Alxneit) TAMUANOVA - the TAMU ANOVA package, provides single and two factor ANOVA. OOL - the ""Open Optimization Library"", provides GSL-compatible constrained optimization methods (under development). rngextra-0.2 - additional random number generators (Brian Gough, example package) Other packages: Dieharder - extensive random number test suite for GSL based on Marsaglia's Diehard tests and the NIST Statistical Test Suite (Robert G. Brown) VFGEN - generates C source code for GSL ODE systems from a user-supplied specification of a vector field (Warren Weckesser) Some applications using GSL that we know of: GSL Shell (Lua) - interface to GSL routines using the Lua scripting language. NEMO -N-body stellar dynamics toolbox, a unix-like toolset of libraries and programs, also has tools to operate on ascii tables and other types of data LUSH - Lisp Universal Shell, an object-oriented programming language with full interfaces to GSL, LAPACK, and BLAS. NumExp - interactive graphical exploration of numerical functions and algorithms (uses Gtk) LabPlot - software for data analysis and visualisation Qumax - a Quantum Monte Carlo Software for Atoms, Molecules and Solids ORSA - Orbit Reconstruction, Simulation and Analysis. QtiPlot - scientific plotting and data analysis application Rlabplus - libraries for Rlab, a high-level language for numerics Blahut - computes information theoretic rate-distortion and channel capacity Wrappers for Other Languages (not necessarily complete): JavaCPP - Java wrappers for GSL Math::GSL - Perl interface to GSL VALA - VALA bindings for GSL GSLL - Common Lisp interface to GSL FGSL - Fortran interface to GSL (under development) PyGSL - Python Bindings for GSL PyrexGsl - Pyrex interface to GSL (Pyrex is a version of Python which allows mixing of Python and C datatypes) ctypesGsl - Python ctypes-style interface to GSL (under development) Ruby/GSL - Ruby Bindings for GSL PDL::GSL - Perl Data Language interface to GSL Random Numbers (included in the main PDL distribution) R gsl - package, bindings for GSL special functions in GNU R S-lang/GSL - bindings for GSL and S-Lang Zoom - C++ wrappers for GSL special functions OCAML GSL - bindings for the OCAML functional language O2scl - a numerical C++ class library which is compatible with GSL datatypes (A.Steiner) Textbooks: ""Numerische Physik"" by Harald Wiedemann (ISBN 3-540-40774-X, Published by Springer (2004), 297 pages, in German) A textbook on numerical physics, covering classical mechanics, electrodynamics, optics, statistical physics and quantum mechanics. The example programs in the book use the GNU Scientific Library and are free software (the source code is included on a CDROM with the book). Further information about this book is available from the publisher at Springer.de. Project Background The project was conceived in 1996 by Dr M. Galassi and Dr J. Theiler of Los Alamos National Laboratory. They were joined by other physicists who also felt that the licenses of existing libraries were hindering scientific cooperation. Most of the library has been written by a relatively small number of people with backgrounds in computational physics in order to provide a consistent and reasonably-designed framework. Overall development of the library and the design and implementation of the major modules was carried out by Dr G. Jungman and Dr B. Gough. Modules were also written by Dr J. Davies, R. Priedhorsky, Dr M. Booth, and Dr F. Rossi, along with many useful contributions from others in the user community. Debian packages for the library are maintained by Dr D. Eddelbuettel. Release History gsl-2.1 was released in November 2015. gsl-2.0 was released in October 2015. gsl-1.16 was released in July 2013. gsl-1.15 was released in May 2011. gsl-1.14 was released in March 2010. gsl-1.13 was released in September 2009. gsl-1.12 was released in December 2008. gsl-1.11 was released in March 2008. gsl-1.10 was released in September 2007. gsl-1.9 was released in February 2007. gsl-1.8 was released in April 2006. gsl-1.7 was released in September 2005. gsl-1.6 was released in December 2004. gsl-1.5 was released in June 2004. gsl-1.4 was released in August 2003. gsl-1.3 was released in December 2002. gsl-1.2 was released in July 2002. gsl-1.1.1 was released in March 2002. gsl-1.1 was released in February 2002. gsl-1.0 was released in November 2001. gsl-0.9.4 was released in October 2001 (fifth beta-test release). gsl-0.9.3 was released in September 2001 (fourth beta-test release). gsl-0.9.2 was released in September 2001 (third beta-test release). gsl-0.9.1 was released in August 2001 (second beta-test release). gsl-0.9 was released in July 2001 (first beta-test release). gsl-0.8 was released in May 2001. gsl-0.7 was released in October 2000. gsl-0.6 was released in June 2000. gsl-0.5 was released in December 1999. gsl-0.4.1 was released in February 1999. gsl-0.4 was released in August 1998. gsl-0.3f was released in May 1998. gsl-0.3b was released in February 1998. gsl-0.2 was released in October 1996. gsl-0.1 was released in sometime in 1996. gsl-0.0 was released in sometime in 1996. The gsl project was started in May 1996 (earliest recorded changelog entry). GNU home page FSF home page GNU Art GNU's Who? Free Software Directory Hardware Site map “Our mission is to preserve, protect and promote the freedom to use, study, copy, modify, and redistribute computer software, and to defend the rights of Free Software users.” The Free Software Foundation is the principal organizational sponsor of the GNU Operating System. Support GNU and the FSF by buying manuals and gear, joining the FSF as an associate member, or making a donation, either directly to the FSF or via Flattr. back to top Please send general FSF & GNU inquiries to <gnu@gnu.org>. There are also other ways to contact the FSF. Broken links and other corrections or suggestions can be sent to <bug-gsl@gnu.org>. Please see the Translations README for information on coordinating and submitting translations of this article. Copyright © 2009 Free Software Foundation, Inc. This page is licensed under a Creative Commons Attribution-NoDerivatives 4.0 International License. Copyright Infringement Notification Updated: $Date: 2016/05/16 20:59:26 $"	"null"	"null"	""	"true"
"Computation"	"GuillaumeGomez/rust-GSL"	"https://github.com/GuillaumeGomez"	"— GSL bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GuillaumeGomez (Guillaume Gomez) · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub Guillaume Gomez GuillaumeGomez Paris guillaume1.gomez@gmail.com http://www.guillaume-gomez.fr Joined on Dec 15, 2012 33 Followers 94 Starred 4 Following Organizations Follow Overview Repositories Public activity Popular repositories process-viewer 37 A process viewer GUI in rust rust-GSL 31 A GSL (the GNU Scientific Library) binding for Rust tuto-rust-fr 19 Un tutoriel pour apprendre Rust this-week-in-rust-docs 9 rust-fmod 8 A rust binding for the FMOD library 1,954 contributions in the last year Jul Aug Sep Oct Nov Dec Jan Feb Mar Apr May Jun S M T W T F S Summary of pull requests, issues opened, and commits. Learn how we count contributions. Less More Period: 1 week Filter activity 1 day 3 days 1 week 1 month Contribution activity 31 commits Pushed 20 commits to rust-lang/rust Jul 9 – Jul 15 Pushed 2 commits to GuillaumeGomez/video-metadata-rs Jul 12 – Jul 14 Pushed 1 commit to servo/servo Jul 12 Pushed 4 commits to GuillaumeGomez/linux-tips Jul 12 Pushed 4 commits to GuillaumeGomez/this-week-in-rust-docs Jul 11 13 Pull Requests Open #34837 Improve float number example Jul 15 rust-lang/rust Merged #34819 Rollup of 7 pull requests Jul 14 rust-lang/rust Merged #15 Add -v option to build.rs Jul 14 GuillaumeGomez/video-metadata-rs Merged #34804 Add examples for FpCategory Jul 13 rust-lang/rust Merged #12419 Replace AdjacentPosition::parse by TryFrom Jul 12 servo/servo Merged #5 Create 1_9.md Jul 12 GuillaumeGomez/linux-tips Merged #4 Add all redirection tip Jul 12 GuillaumeGomez/linux-tips Merged #34778 Rollup of 7 pull requests Jul 12 rust-lang/rust Merged #28 Add 12th post Jul 11 GuillaumeGomez/this-week-in-rust-docs Merged #34750 Add examples for std::Error module Jul 10 rust-lang/rust Merged #34749 Improve std::any module doc Jul 10 rust-lang/rust Merged #34740 Improve boxed docs Jul 9 rust-lang/rust Merged #34736 Add missing examples for std::cell types Jul 9 rust-lang/rust 2 Issues reported Open #30 Créer pdf du tuto Jul 15 GuillaumeGomez/this-week-in-rust-docs Closed #12387 Rewrite AdjacentPosition::parse into TryFrom implementation Jul 11 servo/servo Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/GuillaumeGomez"	"— GSL bindings"	"true"
"Computation"	""	"https://travis-ci.org/GuillaumeGomez/rust-GSL"	"— GSL bindings"	"null"	"null"	"null"	"LAPACK"	"https://en.wikipedia.org/wiki/LAPACK"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— GSL bindings"	"true"
"Computation"	"stainless-steel/lapack"	"https://github.com/stainless-steel/lapack"	"— LAPACK bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12"	"3"	"5"	"GitHub - stainless-steel/lapack: Interface to LAPACK Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 12 Fork 5 stainless-steel/lapack Code Issues 0 Pull requests 0 Pulse Graphs Interface to LAPACK 182 commits 3 branches 0 releases Fetching contributors Rust 53.9% Python 46.1% Rust Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages lapacke master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. bin src .gitignore .travis.yml Cargo.toml LICENSE.md README.md README.md LAPACK The package provides an interface to the Linear Algebra PACKage. Documentation Example (C) use lapack::c::*;  let n = 3; let mut a = vec![3.0, 1.0, 1.0, 1.0, 3.0, 1.0, 1.0, 1.0, 3.0]; let mut w = vec![0.0; n as usize];  let info = dsyev(Layout::ColumnMajor, b'V', b'U', n, &mut a, n, &mut w); assert_eq!(info, 0);  for (one, another) in w.iter().zip(&[2.0, 2.0, 5.0]) {     assert!((one - another).abs() < 1e-14); } Example (Fortran) use lapack::fortran::*;  let n = 3; let mut a = vec![3.0, 1.0, 1.0, 1.0, 3.0, 1.0, 1.0, 1.0, 3.0]; let mut w = vec![0.0; n as usize]; let mut work = vec![0.0; 4 * n as usize]; let lwork = 4 * n; let mut info = 0;  dsyev(b'V', b'U', n, &mut a, n, &mut w, &mut work, lwork, &mut info); assert_eq!(info, 0);  for (one, another) in w.iter().zip(&[2.0, 2.0, 5.0]) {     assert!((one - another).abs() < 1e-14); } Contribution Your contribution is highly appreciated. Do not hesitate to open an issue or a pull request. Note that any contribution submitted for inclusion in the project will be licensed according to the terms given in LICENSE.md. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/stainless-steel/lapack"	"— LAPACK bindings"	"true"
"Computation"	""	"https://travis-ci.org/stainless-steel/lapack"	"— LAPACK bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— LAPACK bindings"	"true"
"Computation"	"arrayfire/arrayfire-rust"	"https://github.com/arrayfire/arrayfire-rust"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"108"	"15"	"11"	"GitHub - arrayfire/arrayfire-rust: Rust wrapper for ArrayFire Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 108 Fork 11 arrayfire/arrayfire-rust Code Issues 5 Pull requests 1 Pulse Graphs Rust wrapper for ArrayFire 186 commits 3 branches 3 releases 7 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: devel Switch branches/tags Branches Tags devel gh-pages master Nothing to show v3.3.1 v3.3.0 v3.2.0 Nothing to show New pull request Latest commit 7a7d453 Jun 8, 2016 9prady9 v3.3.1 Release Permalink Failed to load latest commit information. arrayfire @ 5842ed2 API Catchup to 3.3.0 version Mar 11, 2016 examples Remove time dependency & try bump libc Jun 5, 2016 src BUGFIX: variable size discrepancy with FFI for Rust enums Jun 8, 2016 tests Remove dead code May 18, 2016 .gitignore lock versions of submodules and add cargo.lock to gitignore Sep 28, 2015 .gitmodules base commit with a simple working example on OSX Jun 5, 2015 Cargo.toml v3.3.1 Release Jun 8, 2016 LICENSE Initial commit May 18, 2015 README.md v3.3.1 Release Jun 8, 2016 build.conf remove the lib directory dependency from conf and add a message for w… Nov 20, 2015 build.rs Add version check for compound assignment operator traits May 18, 2016 README.md Arrayfire Rust Bindings Linux Windows OSX ArrayFire is a high performance library for parallel computing with an easy-to-use API. It enables users to write scientific computing code that is portable across CUDA, OpenCL and CPU devices. This project provides Rust bindings for the ArrayFire library. The wrapper is currently compliant with ArrayFire 3.3 API. If you find any bugs, please report them here. Documentation You can find the most recent updated documentation here. Supported platforms Linux and OSX: The bindings have been tested with Rust 1.x. Windows: Rust 1.5 (MSVC ABI) is the first version that works with our bindings and ArrayFire library(built using MSVC compiler). We recommend using Rust 1.5 and higher. Rust 1.8 stabilized the traits for compound assignment operations. These are automatically enabled based on the rust version you are using. Use from Crates.io To use the rust bindings for ArrayFire from crates.io, the following requirements are to be met first. Download and install ArrayFire binaries based on your operating system. Set the evironment variable AF_PATH to point to ArrayFire installation root folder. Make sure you add the path to library files to your path environment variables. On Linux & OSX: do export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$AF_PATH/lib On Windows: Add %AF_PATH%\lib to your PATH environment variable. Add arrayfire = ""3.3.1"" to the dependencies section of your project's Cargo.toml file. Once step (4) is over, you should be able to use ArrayFire in your Rust project. If you find any bugs, please report them here. Build from Source Edit build.conf to modify the build flags. The structure is a simple JSON blob. Currently Rust does not allow key:value pairs to be passed from the CLI. To use an existing ArrayFire installation modify the first three JSON values. You can install ArrayFire using one of the following two ways. Download and install binaries Build and install from source To build arrayfire submodule available in the rust wrapper, you have to do the following. git submodule update --init --recursive cargo build This is recommended way to build Rust wrapper since the submodule points to the most compatible version of ArrayFire the Rust wrapper has been tested with. You can find the ArrayFire dependencies below. Linux dependencies OSX dependencies Example let num_rows: u64 = 5; let num_cols: u64 = 3; let dims = Dim4::new(&[num_rows, num_cols, 1, 1]); println!(""Create a 5-by-3 matrix of random floats on the GPU""); let a = match randu(dims, Aftype::F32) {     Ok(value) => value,     Err(error) => panic!(""{}"", error), }; print(&a); Sample output ~/p/arrayfire_rust> cargo run --example helloworld ...      running 1 test ArrayFire v3.2.0 (CUDA, 64-bit Mac OSX, build d8d4b38) Platform: CUDA Toolkit 7, Driver: CUDA Driver Version: 7000 [0] GeForce GT 750M, 2048 MB, CUDA Compute 3.0 Create a 5-by-3 matrix of random floats on the GPU [5 3 1 1]     0.7402     0.4464     0.7762     0.9210     0.6673     0.2948     0.0390     0.1099     0.7140     0.9690     0.4702     0.3585     0.9251     0.5132     0.6814  ... Acknowledgements The ArrayFire library is written by developers at ArrayFire LLC with contributions from several individuals. The developers at ArrayFire LLC have received partial financial support from several grants and institutions. Those that wish to receive public acknowledgement are listed below: Grants This material is based upon work supported by the DARPA SBIR Program Office under Contract Numbers W31P4Q-14-C-0012 and W31P4Q-15-C-0008. Any opinions, findings and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the DARPA SBIR Program Office. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/arrayfire/arrayfire-rust"	"— bindings"	"true"
"Computation"	"Arrayfire"	"http://arrayfire.com"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ArrayFire | Faster Code ArrayFire Navigation Why ArrayFire? Consulting Consulting Support Training Mobile Resources Documentation User Group Reference Card Partners Blog Download Why ArrayFire? Consulting Consulting Support Training Mobile Resources Documentation User Group Reference Card Partners Blog Download If you want faster code, you've come to the right place. Download ArrayFire Schedule a consultation Faster Code ArrayFire is a blazing fast software library for GPU computing. Its easy-to-use API and array-based function set make GPU programming simple. A few lines of code in ArrayFire can replace dozens of lines of raw GPU code, saving you valuable time and lowering development costs. Hardware Neutral ArrayFire supports both CUDA-capable NVIDIA GPUs and most OpenCL devices, including AMD GPUs/APUs and Intel Xeon Phi co-processors. It also supports mobile OpenCL devices from ARM, Qualcomm, and others. We want your code to run as fast as possible, regardless of the hardware. Open Source ArrayFire is open source—it's all there and it's all free. Be sure to check out all of the ArrayFire functions (and a lot more!) in our excellent documentation. And don't forget to visit our forums to connect with the ArrayFire community and pick up acceleration tips and innovative best practices. See some examples Download ArrayFire View the documentation About Partners Legal Twitter Contact Shop Log In Register"	"null"	"null"	"— bindings"	"true"
"Computation"	"autumnai/collenchyma"	"https://github.com/autumnai/collenchyma"	"— An extensible, pluggable, backend-agnostic framework for parallel, high-performance computations on CUDA, OpenCL and common host CPU."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"263"	"21"	"20"	"GitHub - autumnai/collenchyma: Extendable HPC-Framework for CUDA, OpenCL and common CPU Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 263 Fork 20 autumnai/collenchyma Code Issues 19 Pull requests 1 Pulse Graphs Extendable HPC-Framework for CUDA, OpenCL and common CPU http://autumnai.github.io/collenchyma 125 commits 4 branches 7 releases 9 contributors Rust 99.8% Shell 0.2% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto feat/logging gh-pages master Nothing to show 0.0.8 0.0.7 0.0.6 0.0.5 0.0.4 0.0.3 0.0.2 Nothing to show New pull request Latest commit c7cdfe7 Apr 10, 2016 homu Auto merge of #59 - reem:osx-support, r=MichaelHirn … chore/osx: support building on os x and test this on travis  The newly-added build script adds the default installation location of cuda to rustc's library search path.  Fixes #46 Permalink Failed to load latest commit information. benches feat/feature: add alternative unstable method to allocate native memory Jan 24, 2016 perf feat/bench: add benchmarks for memory synchronization Dec 8, 2015 src feat/tensor: implement IntoTensorDesc for [usize; N], N=1...6 Mar 20, 2016 tests feat/tensor: add `resize` to SharedTensor Feb 7, 2016 .clog.toml chore/changelog: add CHANGELOG Jan 22, 2016 .gitignore feat/collenchyma: outline design Nov 18, 2015 .travis.yml chore/osx: test os x on travis Apr 6, 2016 CHANGELOG.md chore/release: prepare 0.0.8 release Feb 21, 2016 CONTRIBUTING.md feat/collenchyma: outline design Nov 18, 2015 Cargo.toml chore/osx: test os x on travis Apr 7, 2016 LICENSE-APACHE feat/license: change license to dual MIT/Apache-2.0 Feb 2, 2016 LICENSE-MIT feat/license: change license to dual MIT/Apache-2.0 Feb 2, 2016 README.md chore/release: prepare 0.0.8 release Feb 21, 2016 rustfmt.toml feat/collenchyma: outline design Nov 18, 2015 README.md Collenchyma • Collenchyma is an extensible, pluggable, backend-agnostic framework for parallel, high-performance computations on CUDA, OpenCL and common host CPU. It is fast, easy to build and provides an extensible Rust struct to execute operations on almost any machine, even if it does not have CUDA or OpenCL capable devices. Collenchyma's abstracts over the different computation languages (Native, OpenCL, Cuda) and let's you run highly-performant code, thanks to easy parallelization, on servers, desktops or mobiles without the need to adapt your code for the machine you deploy to. Collenchyma does not require OpenCL or Cuda on the machine and automatically falls back to the native host CPU, making your application highly flexible and fast to build. Collenchyma was started at Autumn to support the Machine Intelligence Framework Leaf with backend-agnostic, state-of-the-art performance. Parallelizing Performance Collenchyma makes it easy to parallelize computations on your machine, putting all the available cores of your CPUs/GPUs to use. Collenchyma provides optimized operations through Plugins, that you can use right away to speed up your application. Easily Extensible Writing custom operations for GPU execution becomes easy with Collenchyma, as it already takes care of Framework peculiarities, memory management, safety and other overhead. Collenchyma provides Plugins (see examples below), that you can use to extend the Collenchyma backend with your own, business-specific operations. Butter-smooth Builds As Collenchyma does not require the installation of various frameworks and libraries, it will not add significantly to the build time of your application. Collenchyma checks at run-time if these frameworks can be used and gracefully falls back to the standard, native host CPU if they are not. No long and painful build procedures for you or your users. For more information, see Collenchyma's Documentation or get in touch on Twitter or Gitter Disclaimer: Collenchyma is currently in a very early and heavy stage of development. If you are experiencing any bugs that are not due to not yet implemented features, feel free to create an issue. Getting Started If you're using Cargo, just add Collenchyma to your Cargo.toml: [dependencies] collenchyma = ""0.0.8""  If you're using Cargo Edit, you can call: $ cargo add collenchyma  Plugins You can easily extend Collenchyma's Backend with more backend-agnostic operations, through Plugins. Plugins provide a set of related operations - BLAS would be a good example. To extend Collenchyma's Backend with operations from a Plugin, just add a the desired Plugin crate to your Cargo.toml file. Here is a list of available Collenchyma Plugins, that you can use right away for your own application, or take as a starting point, if you would like to create your own Plugin. BLAS - Collenchyma plugin for backend-agnostic Basic Linear Algebra Subprogram Operations. NN - Collenchyma plugin for Neural Network related algorithms. You can easily write your own backend-agnostic, parallel operations and provide it for others, via a Plugin - we are happy to feature your Plugin here, just send us a PR. Examples Collenchyma comes without any operations. The following examples therefore assumes, that you have added both collenchyma and the Collenchyma Plugin collenchyma-nn to your Cargo manifest. extern crate collenchyma as co; extern crate collenchyma_nn as nn; use co::prelude::*; use nn::*;  fn write_to_memory<T: Copy>(mem: &mut MemoryType, data: &[T]) {     if let &mut MemoryType::Native(ref mut mem) = mem {         let mut mem_buffer = mem.as_mut_slice::<T>();         for (index, datum) in data.iter().enumerate() {             mem_buffer[index] = *datum;         }     } }  fn main() {     // Initialize a CUDA Backend.     let backend = Backend::<Cuda>::default().unwrap();     // Initialize two SharedTensors.     let mut x = SharedTensor::<f32>::new(backend.device(), &(1, 1, 3)).unwrap();     let mut result = SharedTensor::<f32>::new(backend.device(), &(1, 1, 3)).unwrap();     // Fill `x` with some data.     let payload: &[f32] = &::std::iter::repeat(1f32).take(x.capacity()).collect::<Vec<f32>>();     let native = Backend::<Native>::default().unwrap();     x.add_device(native.device()).unwrap(); // Add native host memory     x.sync(native.device()).unwrap(); // Sync to native host memory     write_to_memory(x.get_mut(native.device()).unwrap(), payload); // Write to native host memory.     x.sync(backend.device()).unwrap(); // Sync the data to the CUDA device.     // Run the sigmoid operation, provided by the NN Plugin, on your CUDA enabled GPU.     backend.sigmoid(&mut x, &mut result).unwrap();     // See the result.     result.add_device(native.device()).unwrap(); // Add native host memory     result.sync(native.device()).unwrap(); // Sync the result to host memory.     println!(""{:?}"", result.get(native.device()).unwrap().as_native().unwrap().as_slice::<f32>()); } Contributing Want to contribute? Awesome! We have instructions to help you get started contributing code or documentation. And high priority issues, that we could need your help with. We have a mostly real-time collaboration culture and happens here on Github and on the Collenchyma Gitter Channel. You can also reach out to the Maintainers {@MJ, @hobofan}. Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as below, without any additional terms or conditions. Changelog You can find the release history in the root file CHANGELOG.md. A changelog is a log or record of all the changes made to a project, such as a website or software project, usually including such records as bug fixes, new features, etc. - Wikipedia We are using Clog, the Rust tool for auto-generating CHANGELOG files. License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/autumnai/collenchyma"	"— An extensible, pluggable, backend-agnostic framework for parallel, high-performance computations on CUDA, OpenCL and common host CPU."	"true"
"Computation"	""	"https://travis-ci.org/autumnai/collenchyma"	"— An extensible, pluggable, backend-agnostic framework for parallel, high-performance computations on CUDA, OpenCL and common host CPU."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— An extensible, pluggable, backend-agnostic framework for parallel, high-performance computations on CUDA, OpenCL and common host CPU."	"true"
"Computation"	"luqmana/rust-opencl"	"https://github.com/luqmana/rust-opencl"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"113"	"16"	"37"	"GitHub - luqmana/rust-opencl: OpenCL bindings for Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 113 Fork 37 luqmana/rust-opencl Code Issues 15 Pull requests 4 Pulse Graphs OpenCL bindings for Rust. 298 commits 1 branch 1 release Fetching contributors Rust 99.3% Makefile 0.7% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.1 Nothing to show New pull request Latest commit f540365 May 23, 2015 eholk Switching travis to the nightly channel Permalink Failed to load latest commit information. examples Got some more fields for platform example Sep 10, 2015 src Merge pull request #76 from AdamHarries/master Nov 16, 2015 tests add '[feature(slice_bytes)]' to enable unstable 'slice::bytes::copy_m… Sep 10, 2015 .gitignore Ignoring Cargo files. Dec 16, 2014 .travis.yml Switching travis to the nightly channel Nov 18, 2015 COPYRIGHT Add copyright and license details. Oct 31, 2013 Cargo.toml Updating compilation for latest Rust nightly. May 23, 2015 LICENSE-APACHE Add copyright and license details. Oct 31, 2013 LICENSE-MIT Add copyright and license details. Oct 31, 2013 Makefile Flexibly determine demo.ocl location Jul 17, 2014 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/luqmana/rust-opencl"	"— bindings"	"true"
"Computation"	"OpenCL"	"https://www.khronos.org/opencl/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"75"	"46"	"28"	"GitHub - KhronosGroup/SPIR Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 46 Star 75 Fork 28 KhronosGroup/SPIR Code Issues 3 Pull requests 1 Wiki Pulse Graphs No description or website provided. 40,400 commits 4 branches 0 releases 115 contributors C++ 76.5% C 10.7% Objective-C 9.3% Objective-C++ 1.1% Python 1.0% HTML 0.9% Other 0.5% C++ C Objective-C Objective-C++ Python HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: spir_12 Switch branches/tags Branches Tags spir_12 spir_20_provisional spirv-1.0 spirv-1.1 Nothing to show Nothing to show New pull request Latest commit fd090c8 Apr 26, 2016 nizhegorodets committed with bader Add spir12 Ignore optimization level provided by user (#35) … Ignore optimization level provided by user Permalink Failed to load latest commit information. INPUTS Revert 'Fix a typo 'iff' => 'if''. iff is an abreviation of if and on… Sep 27, 2012 bindings [clang.py] Add Cursor.get_arguments() Nov 1, 2012 docs Added Documentation and ASan notes, clean-up of emtpy sections, coupl… Dec 20, 2012 examples analyzer-plugin/MainCallChecker.cpp: Fixup corresponding to r167275. Nov 2, 2012 include Add spir12 Ignore optimization level provided by user (#35) Apr 26, 2016 lib Add spir12 Ignore optimization level provided by user (#35) Apr 26, 2016 runtime Pass LLVM_ANDROID_TOOLCHAIN_DIR if set. Oct 24, 2012 test Add spir12 Ignore optimization level provided by user (#35) Apr 26, 2016 tools Merge SPIR generator changes Nov 28, 2013 unittests Fix binding of nodes in case of forEach..() matchers. Nov 11, 2012 utils Remove leftover code. Nov 9, 2012 www [analyzer] Check that the argument to CFMakeCollectable is non-NULL. Nov 7, 2012 .gitignore Add extra vim swap file pattern Oct 9, 2012 CMakeLists.txt CMake: Fix public header search for generating Xcode/MSVC projects. Oct 23, 2012 INSTALL.txt Add minimal INSTALL.txt Sep 13, 2009 LICENSE.TXT Happy new year 2012! Jan 1, 2012 Makefile The top-level clang Makefile is #included into other Makefiles. (sigh… Oct 3, 2012 ModuleInfo.txt Move the ModuleInfo.txt file. Jul 11, 2007 NOTES.txt Fix typo (test commit) Oct 18, 2012 README.md Add spir12 Ignore optimization level provided by user (#35) Apr 26, 2016 README.txt commit access verified, revert change Mar 6, 2012 README.md SPIR generator/Clang Installation Instructions These instructions describe how to build, install and operate SPIR generator Clang. Step 1: Organization SPIR generator/Clang is designed to be built as part of an LLVM build. SPIR generator/Clang is based on LLVM/Clang version 3.2. The LLVM source code could be downloaded from http://www.llvm.org/releases/3.2/llvm-3.2.src.tar.gz. It is also available directly from the LLVM svn server:   svn co http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_32/final llvm Or could be cloned from LLVM git repository:   git clone http://llvm.org/git/llvm.git llvm   cd llvm   git checkout --track -b release_32 remotes/origin/release_32 Assuming that the LLVM source code is located at $LLVM_SRC_ROOT, then the clang source code should be installed as: $LLVM_SRC_ROOT/tools/clang. The directory is not required to be called clang, but doing so will allow the LLVM build system to automatically recognize it and build it along with LLVM.   cd $LLVM_SRC_ROOT/tools   git clone https://github.com/KhronosGroup/SPIR clang   cd clang   git checkout --track -b spir_12 remotes/origin/spir_12 Step 2: Configure and Build LLVM Configure and build your copy of LLVM (see $LLVM_SRC_ROOT/GettingStarted.html for more information). Assuming you installed clang at $LLVM_SRC_ROOT/tools/clang then Clang will automatically be built with LLVM. Otherwise, run make in the Clang source directory to build Clang. Note: currently there might be failures in check_clang project. Step 3: (Optional) Verify Your Build It is a good idea to run the Clang tests to make sure your build works correctly. From inside the Clang build directory, run make test to run the tests. Step 4: Install Clang If you wish to run Clang from the generated binary directory, you may skip this section. From inside the Clang build directory, run make install to install the Clang compiler and header files into the prefix directory selected when LLVM was configured. The Clang compiler is available as clang and clang++. It supports a gcc like command line interface. See the man page for clang (installed into $prefix/share/man/man1) for more information. Step 5: Creating SPIR binaries To create a SPIR binary from a valid OpenCL-C file (.cl), use the following command lines:   clang -cc1 -emit-llvm-bc -triple <triple> <OpenCL compile options> -cl-spir-compile-options ""<OpenCL compile options>"" -include <opencl_spir.h> -o <output> <input> <triple>: for 32 bit SPIR use spir-unknown-unknown, for 64 bit SPIR use spir64-unknown-unknown. Note: <OpenCL compile options> appears twice. The command line option -cl-spir-compile-options ""<OpenCL compile options>"" specifies the compile options that occur in the SPIR metadata. : download opencl_spir.h from https://github.com/KhronosGroup/SPIR-Tools/blob/master/headers/opencl_spir.h -O: -O0 (default) is the only tested option value at the moment. It's assumed by design that all optimizations are executed by SPIR consumer. Reporting issues Bugs/feature requests can be filed via github or Khronos Bugzilla bug tracker. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/KhronosGroup/SPIR"	"— bindings"	"true"
"Computation"	""	"https://travis-ci.org/luqmana/rust-opencl"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Computation"	"indigits/scirust"	"https://github.com/indigits/scirust"	"— scientific computing library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"64"	"11"	"9"	"GitHub - indigits/scirust: Scientific Computing Library in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 64 Fork 9 indigits/scirust Code Issues 13 Pull requests 1 Wiki Pulse Graphs Scientific Computing Library in Rust 309 commits 2 branches 2 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 2014_14_11_nightly_compiled 0.0.4 Nothing to show New pull request Latest commit 344cdbc Sep 19, 2015 shailesh1729 Merge pull request #27 from Sean1708/rustup-1.5.0-cff041170-2015-09-17 … Fix compilation on the latest nightly. Permalink Failed to load latest commit information. src Use `alloc::heap`. Sep 19, 2015 .gitignore ignored .txt files for now. Aug 7, 2015 .travis.yml Do not require sudo Jul 27, 2015 Cargo.toml some updates in project metadata. homepage documentation etc. setting… Aug 5, 2015 LICENSE Initial commit Oct 19, 2014 README.md adding GITTER integration Sep 1, 2015 build.txt BREAKING CHANGE . introduced safe and unsafe versions of get in shape… Aug 4, 2015 README.md SciRust Scientific computing library written in Rust programming language. The objective is to design a generic library which can be used as a backbone for scientific computing. Current emphasis is less on performance and more on providing a comprehensive API. NOTE: The library currently doesn't build against the stable release of Rust. It builds against the nightly release of Rust. This scenario is likely to stay till Q3 2015. Current areas of focus Fundamental algebraic structures Matrices Linear algebra Statistics Signal processing For more details and examples, see the API Documentation . A discussion group is setup at SciRust Google Group. Features General Pure Rust implementation Focus on generic programming Extensive unit tests for all features Column major implementation Matrices Generic matrix class supporting various data-types (u8, i8, u16, i16, ... , f32, f64, Complex32, Complex64) Views over parts of matrices Comprehensive support for operations on matrices. Views over sub-matrices with similar operations. Special support for triangular matrices. Linear algebra Solving systems of linear equations LDU factorization Rank, Determinant, Inverse About Rust and Building the project If you are unfamiliar with Rust, you are recommended to go through The Rust Guide. The library can be built and used using Cargo which is the official dependency management and build tool for Rust. Working with matrices requires a lot of low level code. As a user of the library, we expect that you won't have to write the low level code yourself. If you are reading or debugging through the source code of the library, you would see a lot of low level code. Familiarity with following guides will help you sail through them. References and Lifetime Guide Writing low level and unsafe code in Rust Rust Pointers Guide The library code is full of unit tests. These unit tests serve multiple purposes Making sure that the functions work as advertised. Extensively testing those functions which use unsafe and low level features of Rust. Learning about how to use the library features. If you haven't read already, please familiarize yourself with Rust Testing Guide. Writing unit tests will help you write better and more reliable code. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/indigits/scirust"	"— scientific computing library in Rust"	"true"
"Computation"	""	"https://travis-ci.org/indigits/scirust"	"— scientific computing library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— scientific computing library in Rust"	"true"
"Cryptography"	"crypto"	"https://crates.io/keywords/crypto"	"— scientific computing library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"— scientific computing library in Rust"	"true"
"Cryptography"	"cryptography"	"https://crates.io/keywords/cryptography"	"— scientific computing library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"— scientific computing library in Rust"	"true"
"Cryptography"	"briansmith/ring"	"https://github.com/briansmith/ring"	"— Safe, fast, small crypto using Rust and BoringSSL's cryptography primitives."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"218"	"18"	"22"	"GitHub - briansmith/ring: Safe, fast, small crypto using Rust & BoringSSL's cryptography primitives. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 218 Fork 22 briansmith/ring Code Issues 124 Pull requests 6 Pulse Graphs Safe, fast, small crypto using Rust & BoringSSL's cryptography primitives. https://briansmith.org/rustdoc/ring/ 4,454 commits 8 branches 0 releases 45 contributors Assembly 43.4% C++ 22.1% C 22.1% Rust 8.9% Perl 1.9% Python 0.5% Other 1.1% Assembly C++ C Rust Perl Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags boringssl checked_struct master nistz256 p384_double p384 refactor_nistz256 rsa_key_pair Nothing to show Nothing to show New pull request Latest commit 14f4db5 Jul 13, 2016 briansmith Fix build by removing not-yet-used `ONE` in gfp_p384.c. Permalink Failed to load latest commit information. crypto Fix build by removing not-yet-used `ONE` in gfp_p384.c. Jul 13, 2016 doc Implement ECDH agreement in Rust. Jun 30, 2016 examples Stop dev-dependency on rustc_serialize for tests. May 27, 2016 include Use |BN_usub| instead of |BN_sub| in |BN_MONT_CTX_set|. Jul 1, 2016 mk Factor out gfp_little_endian_bytes_from_scalar from ecp_nistz256. Jul 9, 2016 src Rename base_point_mul to point_mul_base. Jul 11, 2016 third-party/NIST Add NIST SHAVS tests for |ring::digest|. Nov 30, 2015 util Take BoringSSL f56dd6d: Add a tool to diff assembly files against Ope… Jun 30, 2016 .clang-format Inital import. Jun 20, 2014 .gitattributes Tell GitHub that PerlAsm files are assembly language files. Oct 10, 2015 .gitignore Add .VC.db to .gitignore. Mar 30, 2016 .travis.yml Use Xcode 7.3 in Travis CI. Jul 6, 2016 BUILDING.md Move the documentation for the `use_heap` feature to BUILDING.md. Jul 3, 2016 Cargo.toml Remove the dependency on rustc_serialize. Jul 3, 2016 LICENSE Clarify licensing of P-256 implementation of mul/sqr mod n. Jul 6, 2016 Makefile Use one process for all tests. Apr 16, 2016 README.md Use Xcode 7.3 in Travis CI. Jul 6, 2016 STYLE.md Take BoringSSL 1a88df1: Update style guide note on files which match … Jun 22, 2016 appveyor.yml Switch to Rust 1.9 on AppVeyor. Jun 6, 2016 build.rs Remove the dependency on the num crate. Jul 3, 2016 ring.sln Use /NODEFAULTLIB on Windows. Apr 25, 2016 README.md THE SOFTWARE IS PROVIDED ""AS IS"" AND BRIAN SMITH AND THE AUTHORS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL BRIAN SMITH OR THE AUTHORS BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. ring ring is a crypto library for Rust based on BoringSSL's crypto primitive implementations. Particular attention is being paid to making it easy to build and integrate ring into applications and higher-level frameworks, and to ensuring that ring works optimally on small devices, and eventually microcontrollers, to support Internet of Things (IoT) applications. The name ring comes from the fact that ring started as a subset of BoringSSL, and ""ring"" is a substring of ""BoringSSL"". Most of the (C and assembly language) code in ring comes from BoringSSL, and BoringSSL is derived from OpenSSL. ring merges changes from BoringSSL regularly. Also, several changes that were developed for ring have already been merged into BoringSSL. ring is focused on the implementation, testing, and optimization of core crypto primitives. WebPKI X.509 certificate validation is done in the webpki project, which is built on top of ring. Also, multiple groups are working on TLS implementations on top of ring and webpki. Documentation See the documentation at https://briansmith.org/rustdoc/ring/. See BUILDING.md for instructions on how to build it. These instructions are especially important on Windows, as there are build prerequisites that need to be installed. Benchmarks ring's benchmarks are in the crypto-bench project. Because there is lots of platform-specific code in ring, and because ring chooses dynamically at runtime which optimized implementation of each crypto primitive to use, it is very difficult to publish a useful single set of benchmarks; instead, you are highly encouraged to run the benchmarks yourselves on your target hardware. Contributing The ring project happily accepts pull requests without you needing to sign any formal license agreement. The portions of pull requests that modify existing files must be licensed under the same terms as the files being modified. New files in pull requests, including in particular all Rust code, must be licensed under the ISC-style license. Please state that you agree to license your contributions in the commit messages of commits in pull requests, e.g. by putting this at the bottom of your commit message:  I agree to license my contributions to each file under the terms given at the top of each file I changed.  The most important contributions are uses of ring. That is, we're very interested in seeing useful things built on top of ring, like implementations of TLS, SSH, the Noise Protocol, etc. Of course, contributions to ring's code base are highly appreciated too. If you want to work directly on ring and you don't have an idea for something to contribute already, see these curated lists of open issues: good-first-bug: Bugs that we think newcomers might find best to start with. Note that what makes a bug a good fit depends a lot on the developer's background and not just the hardness of the work. oxidation: Replacing C code with Rust code. tls-1.3: Issues blocking a complete implementation of TLS 1.3: rsa: The primary ring developer is less interested in RSA than ECC and other things, and it would be great to have somebody jump in and ""own"" the RSA work. ring has inherited the fastest open source RSA implementation (as far as we know) from BoringSSL/OpenSSL, and we've already done a lot of cleanup. But, there's a lot more work to do. In addition, we're always interested in these kinds of contributions: Expanded benchmarks in the crypto-bench project. Additional testing code and additional test vectors. Static analysis and fuzzing in the continuous integration. Support for more platforms in the continuous integration (e.g. Android, iOS, ARM microcontrollers). Documentation improvements. More code simplification, especially eliminating dead code. Improving the code size, execution speed, and/or memory footprint. Fixing any bugs you may have found. Better IDE support for Windows (e.g. running the tests within the IDE) and macOS (e.g. Xcode project files). Before submitting pull requests, make sure that the tests succeed both when running cargo test and cargo test --features=rsa_signing. See BUILDING.md for more info about the features flags that are useful for people hacking on ring. Online Automated Testing Travis CI is used for Android, Linux, and macOS. Appveyor is used for Windows. The tests are run in debug and release configurations, for the current release of each Rust channel (Stable, Beta, Nightly), for each configuration listed in the table below. OS Arch. Compilers Status Linux x86, x86_64 GCC 4.6, GCC 5, GCC 6, Clang 3.8. (Clang builds are temporarily disabled due the current LLVM APT repo outage.) 32‑bit ARM, AAarch64 GCC (Ubuntu/Linaro 4.8.4-2ubuntu1~14.04.1), tested using qemu-user-arm. Android 32‑bit ARM Built using the Android SDK 24.4.1 and Android NDK 10e, tested using the Android emulator. (Aarch64 builds are blocked on the Rust team producing AAarch64 builds of Rust's libstd.) Mac OS X x64 Apple LLVM version 7.3.0 (clang-703.0.31) from Xcode 7.3 Windows x86, x86_64 MSVC 2015 Update 2 (14.0) Bug Reporting Please report bugs either as pull requests or as issues in the issue tracker. ring has a full disclosure vulnerability policy. Please do NOT attempt to report any security vulnerability in this code privately to anybody. License See LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/briansmith/ring"	"— Safe, fast, small crypto using Rust and BoringSSL's cryptography primitives."	"true"
"Cryptography"	""	"https://travis-ci.org/briansmith/ring"	"— Safe, fast, small crypto using Rust and BoringSSL's cryptography primitives."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Safe, fast, small crypto using Rust and BoringSSL's cryptography primitives."	"true"
"Cryptography"	"briansmith/webpki"	"https://github.com/briansmith/webpki"	"— Web PKI TLS X.509 certificate validation in Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"54"	"10"	"6"	"GitHub - briansmith/webpki: WebPKI X.509 Certificate Validation in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 54 Fork 6 briansmith/webpki Code Issues 7 Pull requests 2 Pulse Graphs WebPKI X.509 Certificate Validation in Rust 64 commits 1 branch 0 releases Fetching contributors Rust 88.9% Python 8.0% Batchfile 1.9% Shell 1.2% Rust Python Batchfile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit badcafb Jul 9, 2016 briansmith Cope with renaming of `signature::ECDSA_{*}` in *ring*. Permalink Failed to load latest commit information. mk Sync Travis CI config with *ring* to turn off clang builds. Jun 5, 2016 src Cope with renaming of `signature::ECDSA_{*}` in *ring*. Jul 9, 2016 third-party/chromium Import Chromium's |verify_signed_data| test data. Aug 27, 2015 .gitattributes Add Travis & Appveyor. Aug 27, 2015 .gitignore Boilerplate. Aug 27, 2015 .travis.yml Sync Travis CI config with *ring* to turn off clang builds. Jun 6, 2016 Cargo.toml Use untrusted 0.2 from crates.io. Jul 2, 2016 LICENSE Import Chromium's |verify_signed_data| test data. Aug 27, 2015 README.md Consistently use the name ""webpki"" instead of ""libwebpki."" Jun 30, 2016 appveyor.yml Switch to Rust 1.9 in AppVeyor. Jun 6, 2016 README.md THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHORS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. What is webpki? webpki is a library that validates Web PKI (TLS/SSL) certificates. webpki is designed to provide a full implementation of the client side of the Web PKI to a diverse range of applications and devices, including embedded (IoT) applications, mobile apps, desktop applications, and server infrastructure. webpki is intended to not only be the best implementation of the Web PKI, but to also precisely define what the Web PKI is. webpki is written in Rust and uses ring for signature verification. webpki is strongly influenced by mozilla::pkix. You can read a little about the ideas underlying both mozilla::pkix and webpki in insanity::pkix: A New Certificate Path Building & Validation Library. The Rust compiler static guarantees there are no buffer overflows, uses-after-free, double-frees, data races, etc. in webpki. webpki takes advantage of Rust's borrow checker to ensure that its zero-copy parsing strategy is safe and efficient. webpki never allocates memory on the heap, and it maintains a tight bound on the amount of stack memory it uses. webpki avoids all superfluous PKIX features in order to keep its object code size small. Further reducing the code size of webpki is an important goal. This release is the very first prototype. Lots of improvements are planned, including: An extensive automated test suite. Key pinning. Certificate Transparency support. Short-lived certificate, OCSP stapling, and CRLSet support. Customization of the supported algorithms, key sizes, and elliptic curves allowed during a validation. A C language wrapper interface to allow using webpki in non-Rust applications. A specification of precisely what the Web PKI is. Demo There is a demo program at https://github.com/briansmith/verify_tls_cert. License See LICENSE. This project happily accepts pull requests without any formal copyright/contributor license agreement. Pull requests must explicitly indicate who owns the copyright to the code being contributed and that the code is being licensed under the same terms as the existing webpki code. Bug Reporting Please report bugs either as pull requests or as issues in the issue tracker. webpki has a full disclosure vulnerability policy. Please do NOT attempt to report any security vulnerability in this code privately to anybody. Online Automated Testing Travis CI is used for Linux and Mac OS X. Appveyor is used for Windows. OS Arch. Compilers Status Linux x86, x64 GCC 4.8, 4.9, 5; Clang 3.4, 3.5, 3.6 Mac OS X x64 x86, x64 Apple Clang 6.0 (based on Clang 3.5) Windows x86, x64 MSVC 2013 (12.0), 2015 (14.0) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/briansmith/webpki"	"— Web PKI TLS X.509 certificate validation in Rust."	"true"
"Cryptography"	""	"https://travis-ci.org/briansmith/webpki"	"— Web PKI TLS X.509 certificate validation in Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Web PKI TLS X.509 certificate validation in Rust."	"true"
"Cryptography"	"ctz/rustls"	"https://github.com/ctz/rustls"	"a Rust implementation of TLS"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"322"	"16"	"13"	"GitHub - ctz/rustls: Embryonic Rust TLS library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 322 Fork 13 ctz/rustls Code Issues 2 Pull requests 1 Pulse Graphs Embryonic Rust TLS library 105 commits 2 branches 0 releases Fetching contributors Rust 99.2% Shell 0.8% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 5370824 Jul 14, 2016 ctz Don't panic on invalid handshake messages … This has a unit test, but needs a top-level test to make sure we translate to the new error. Permalink Failed to load latest commit information. admin Add a script to prepare gh-pages branch Jun 21, 2016 examples Example code commentary and cleanups Jul 8, 2016 src Don't panic on invalid handshake messages Jul 14, 2016 test-ca Update test-ca to not expire Jul 5, 2016 tests Implement drop for servers in tests Jul 8, 2016 .gitignore Add proper argument parsing to s_client Jun 1, 2016 .travis.yml travis: use trusty Jul 5, 2016 Cargo.toml partially vendor ring for stability Jul 10, 2016 LICENSE Add license info Jun 19, 2016 LICENSE-APACHE Add license info Jun 19, 2016 LICENSE-ISC Add license info Jun 19, 2016 LICENSE-MIT Add license info Jun 19, 2016 README.md Assorted server tests Jul 3, 2016 README.md Rustls Rustls is a new, modern TLS library written in Rust. It's pronounced 'rustles'. It uses ring for cryptography and libwebpki for certificate verification. Status Rustls is currently in development and hence unstable. Documentation Lives here: https://jbp.io/rustls/rustls/ Approach Rustls is a TLS library that aims to provide a good level of cryptographic security, requires no configuration to achieve that security, and provides no unsafe features or obsolete cryptography. Current features TLS1.2 only. ECDSA or RSA server authentication by clients. RSA server authentication by servers. Forward secrecy using ECDHE; with curve25519, nistp256 or nistp384 curves. AES128-GCM and AES256-GCM bulk encryption, with safe nonces. Chacha20Poly1305 bulk encryption. ALPN support. SNI support. Tunable MTU to make TLS messages match size of underlying transport. Resumption. Possible future features ECDSA server authentication by servers. PSK support. TLS1.3. Resumption via tickets. OCSP stapling. Certificate pinning. Non-features The following things are broken, obsolete, badly designed, underspecified, dangerous and/or insane. Rustls does not support: SSL1, SSL2, SSL3, TLS1 or TLS1.1. RC4. DES or triple DES. EXPORT ciphersuites. MAC-then-encrypt ciphersuites. Ciphersuites without forward secrecy. Renegotiation. Client authentication. Kerberos. Compression. Discrete-log Diffie-Hellman. Automatic protocol version downgrade. AES-GCM with unsafe nonces. There are plenty of other libraries that provide these features should you need them. Example code There are two example programs which use mio to do asynchronous IO. Client example program The client example program is named tlsclient. The interface looks like: Connects to the TLS server at hostname:PORT.  The default PORT is 443.  By default, this reads a request from stdin (to EOF) before making the connection.  --http replaces this with a basic HTTP GET request for /.  If --cafile is not supplied, CA certificates are read from `/etc/ssl/certs/ca-certificates.crt'.  Usage:   tlsclient [--verbose] [-p PORT] [--http] [--mtu MTU] [--cache CACHE]     [--cafile CAFILE] [--suite SUITE...] [--proto PROTOCOL...] <hostname>   tlsclient --version   tlsclient --help  Options:     -p, --port PORT     Connect to PORT. Default is 443.     --http              Send a basic HTTP GET request for /.     --cafile CAFILE     Read root certificates from CAFILE.     --suite SUITE       Disable default cipher suite list, and use                         SUITE instead.     --proto PROTOCOL    Send ALPN extension containing PROTOCOL.     --cache CACHE       Save session cache to file CACHE.     --verbose           Emit log output.     --mtu MTU           Limit outgoing messages to MTU bytes.     --version           Show tool version.     --help              Show this screen.   Some sample runs: $ ./tlsclient --http mozilla-modern.badssl.com HTTP/1.1 200 OK Server: nginx/1.6.2 (Ubuntu) Date: Wed, 01 Jun 2016 18:44:00 GMT Content-Type: text/html Content-Length: 644 (...)  or $ ./target/debug/examples/tlsclient --http expired.badssl.com TLS error: WebPKIError(CertExpired) Connection closed  Server example program The server example program is named tlsserver. The interface looks like: Runs a TLS server on :PORT.  The default PORT is 443.  `echo' mode means the server echoes received data on each connection.  `http' mode means the server blindly sends a HTTP response on each connection.  `forward' means the server forwards plaintext to a connection made to localhost:fport.  `--certs' names the full certificate chain, `--key' provides the RSA private key.  Usage:   tlsserver --certs CERTFILE --key KEYFILE [--verbose] [-p PORT] [--suite SUITE...] [--proto PROTOCOL...] echo   tlsserver --certs CERTFILE --key KEYFILE [--verbose] [-p PORT] [--suite SUITE...] [--proto PROTOCOL...] http   tlsserver --certs CERTFILE --key KEYFILE [--verbose] [-p PORT] [--suite SUITE...] [--proto PROTOCOL...] forward <fport>   tlsserver --version   tlsserver --help  Options:     -p, --port PORT     Listen on PORT. Default is 443.     --certs CERTFILE    Read server certificates from CERTFILE.                         This should contain PEM-format certificates                         in the right order (the first certificate should                         certify KEYFILE, the last should be a root CA).     --key KEYFILE       Read private key from KEYFILE.  This should be a RSA private key,                         in PEM format.     --suite SUITE       Disable default cipher suite list, and use                         SUITE instead.     --proto PROTOCOL    Negotiate PROTOCOL using ALPN.     --verbose           Emit log output.     --version           Show tool version.     --help              Show this screen.  Here's a sample run; we start a TLS echo server, then connect to it with openssl and tlsclient: $ ./tlsserver --certs test-ca/rsa/end.fullchain --key test-ca/rsa/end.rsa -p 8443 echo & $ echo hello world | openssl s_client -ign_eof -quiet -connect localhost:8443 depth=2 CN = ponytown RSA CA verify error:num=19:self signed certificate in certificate chain hello world ^C $ echo hello world | ./tlsclient --cafile test-ca/rsa/ca.cert -p 8443 localhost hello world ^C  License Rustls is distributed under the following three licenses: Apache License version 2.0. MIT license. ISC license. These are included as LICENSE-APACHE, LICENSE-MIT and LICENSE-ISC respectively. You may use this software under the terms of any of these licenses, at your option. TODO list Choose a license. Improve testing. Improve testing some more. ALPN. Tickets. Resumption. chacha20poly1305 bulk encryption support. Signing support in ring to unblock server work. (done upstream, thanks!) Server support. Write some more sample programs. Stabilise and document public API. Optimise internals to reduce copies. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ctz/rustls"	"a Rust implementation of TLS"	"true"
"Cryptography"	"DaGenix/rust-crypto"	"https://github.com/DaGenix/rust-crypto"	"— cryptographic algorithms in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"428"	"32"	"122"	"GitHub - DaGenix/rust-crypto: A (mostly) pure-Rust implementation of various cryptographic algorithms. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 428 Fork 122 DaGenix/rust-crypto Code Issues 31 Pull requests 19 Pulse Graphs A (mostly) pure-Rust implementation of various cryptographic algorithms. 749 commits 4 branches 41 releases 47 contributors Rust 99.3% Other 0.7% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags c-feature-flag hex-convenience-for-mac master remove-asm-exten-usage Nothing to show v0.2.36 v0.2.35 v0.2.34 v0.2.33 v0.2.32 v0.2.31 v0.2.30 v0.2.29 v0.2.28 v0.2.27 v0.2.26 v0.2.25 v0.2.24 v0.2.23 v0.2.22 v0.2.21 v0.2.20 v0.2.19 v0.2.18 v0.2.17 v0.2.16 v0.2.15 v0.2.14 v0.2.13 v0.2.12 v0.2.11 v0.2.10 v0.2.9 v0.2.8 v0.2.7 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.4 v0.1.3 v0.1.2 v0.1.1 Nothing to show New pull request Latest commit e8a5133 May 20, 2016 DaGenix Merge pull request #367 from DaGenix/bump-version … Bump version to 0.2.36 Permalink Failed to load latest commit information. examples Remove use of #![feature(collections)] from the symmetriccipher example Apr 3, 2015 src Implement Copy and Clone for all Digest impls May 1, 2016 .gitignore Update .gitignore Oct 20, 2015 .travis.yml Set 'sudo: false' in the .travis.yml file to take advantage of newer … Oct 17, 2015 CHANGELOG.md Bump version to v0.2.35 Apr 4, 2016 Cargo.toml Bump version to 0.2.36 May 20, 2016 LICENSE-APACHE Remove accidental tab spacing Dec 31, 2014 LICENSE-MIT Initial commit. Oct 8, 2013 README.md Change copy for not allowing out-of-date version of Rust be present Jan 10, 2016 appveyor.yml Removed more failing targets Apr 18, 2016 build.rs This fixes cross-compilation. Apr 13, 2016 README.md Rust-Crypto A (mostly) pure-Rust implementation of various common cryptographic algorithms. Rust-Crypto seeks to create practical, auditable, pure-Rust implementations of common cryptographic algorithms with a minimum amount of assembly code where appropriate. The x86-64, x86, and ARM architectures are supported, although the x86-64 architecture receives the most testing. Rust-Crypto targets the current, stable build of Rust. If you are having issues while using an older version, please try upgrading to the latest stable. Rust-Crypto has not been thoroughly audited for correctness, so any use where security is important is not recommended at this time. Usage To use Rust-Crypto, add the following to your Cargo.toml: [dependencies] rust-crypto = ""^0.2"" and the following to your crate root: extern crate crypto; Contributions Contributions are extremely welcome. The most significant needs are help adding documentation, implementing new algorithms, and general cleanup and improvement of the code. By submitting a pull request you are agreeing to make you work available under the license terms of the Rust-Crypto project. License Rust-Crypto is dual licensed under the MIT and Apache 2.0 licenses, the same licenses as the Rust compiler. Algorithms Rust-Crypto already supports a significant number of algorithms and with your help it will support even more in the future. Currently supported algorithms include: AES Bcrypt Blake2B Blowfish ChaCha20 Curve25519 ECB, CBC, and CTR block cipher modes Ed25519 Fortuna Ghash HC128 HMAC MD5 PBKDF2 PKCS padding for CBC block cipher mode Poly1305 RC4 RIPEMD-160 Salsa20 and XSalsa20 Scrypt Sha1 Sha2 (All fixed output size variants) Sosemanuk Whirlpool Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/DaGenix/rust-crypto"	"— cryptographic algorithms in Rust"	"true"
"Cryptography"	""	"https://travis-ci.org/DaGenix/rust-crypto"	"— cryptographic algorithms in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— cryptographic algorithms in Rust"	"true"
"Cryptography"	"dnaq/sodiumoxide"	"https://github.com/dnaq/sodiumoxide"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"173"	"18"	"46"	"GitHub - dnaq/sodiumoxide: Sodium Oxide: Fast cryptographic library for Rust (bindings to libsodium) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 173 Fork 46 dnaq/sodiumoxide Code Issues 6 Pull requests 2 Pulse Graphs Sodium Oxide: Fast cryptographic library for Rust (bindings to libsodium) 418 commits 4 branches 13 releases 22 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags box_inplace gh-pages master serde Nothing to show sodiumoxide-0.0.12 sodiumoxide-0.0.11 sodiumoxide-0.0.10 sodiumoxide-0.0.9 sodiumoxide-0.0.8 sodiumoxide-0.0.7 sodiumoxide-0.0.6 sodiumoxide-0.0.5 sodiumoxide-0.0.4 sodiumoxide-0.0.3 sodiumoxide-0.0.2 rust-1.0-alpha rust-0.11 Nothing to show New pull request Latest commit 6e90834 Jul 10, 2016 dnaq Bumped version numbers to 0.0.12 Permalink Failed to load latest commit information. .cargo Add local cargo configuration (path override) May 15, 2015 libsodium-sys Bumped version numbers to 0.0.12 Jul 10, 2016 src Added documentation for `init()`, closes #118 Jun 29, 2016 testvectors added NIST ShortMsg and LongMsg testvectors for SHA-256 and SHA512 Dec 11, 2013 .gitignore First step of spliting sodiumoxide in sodiumoxide and libsodium-sys Nov 21, 2014 .travis.yml bump libsodium version in travis build script Apr 4, 2016 AUTHORS Initial commit Dec 5, 2013 Cargo.toml Bumped version numbers to 0.0.12 Jul 10, 2016 LICENSE-APACHE Relicense to dual MIT/Apache-2.0 Jul 5, 2016 LICENSE-MIT Relicense to dual MIT/Apache-2.0 Jul 5, 2016 README.md Relicense to dual MIT/Apache-2.0 Jul 5, 2016 README.md sodiumoxide NaCl (pronounced ""salt"") is a new easy-to-use high-speed software library for network communication, encryption, decryption, signatures, etc. NaCl's goal is to provide all of the core operations needed to build higher-level cryptographic tools. Of course, other libraries already exist for these core operations. NaCl advances the state of the art by improving security, by improving usability, and by improving speed. Sodium is a portable, cross-compilable, installable, packageable fork of NaCl (based on the latest released upstream version nacl-20110221), with a compatible API. This package aims to provide a type-safe and efficient Rust binding that's just as easy to use. Dependencies Sodium Building cargo build  Testing cargo test  Documentation cargo doc  Documentation will be generated in target/doc/... Most documentation is taken from NaCl, with minor modification where the API differs between the C and Rust versions. Documentation for the latest build can be found at gh-pages. Examples TBD Join in File bugs in the issue tracker Master git repository git clone https://github.com/dnaq/sodiumoxide.git  License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dnaq/sodiumoxide"	"— bindings"	"true"
"Cryptography"	"libsodium"	"https://github.com/jedisct1/libsodium"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3007"	"247"	"400"	"GitHub - jedisct1/libsodium: A modern and easy-to-use crypto library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 247 Star 3,007 Fork 400 jedisct1/libsodium Code Issues 9 Pull requests 0 Pulse Graphs A modern and easy-to-use crypto library. 2,320 commits 4 branches 24 releases 53 contributors C 94.5% Assembly 2.4% M4 1.6% Shell 0.7% Makefile 0.6% Batchfile 0.1% Other 0.1% C Assembly M4 Shell Makefile Batchfile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags arm coverity_scan master stable Nothing to show 1.0.10 1.0.9 1.0.8 1.0.7 1.0.6 1.0.5 1.0.4 1.0.3 1.0.1 1.0.0 0.7.1 0.7.0 0.6.1 0.6.0 0.5.0 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4 0.3 0.2 0.1 Nothing to show New pull request Latest commit 351ae49 Jul 6, 2016 jedisct1 cpuid is not available on i686-nacl Permalink Failed to load latest commit information. builds Version bump (not released yet) Jun 30, 2016 dist-build CRLF Jun 5, 2016 m4 Import ax_pthread.m4 Apr 19, 2016 msvc-scripts Version bump (not released yet) Jun 30, 2016 packaging/nuget https Apr 12, 2016 src crit_{enter,leave} can fail Jul 6, 2016 test Add dist-build/nativeclient-x86-64.sh Apr 29, 2016 .gitignore Forgot to ignore libsodium-uninstalled.pc Jun 4, 2016 .travis.yml Travis: Limit the double compilation to a single OS Dec 11, 2015 AUTHORS Add crypto_core/curve25519 Mar 16, 2016 ChangeLog Update ChangeLog Jun 29, 2016 LICENSE Add license title Jun 30, 2016 Makefile.am CRLF Mar 17, 2016 README.markdown Link text = ""installation"" only Mar 17, 2016 THANKS THANKS << Scott Arciszewski Nov 28, 2015 appveyor.yml Update appveyor version Apr 4, 2016 autogen.sh pkg-config is not required Dec 25, 2015 configure.ac cpuid is not available on i686-nacl Jul 6, 2016 libsodium-uninstalled.pc.in Update description Mar 17, 2016 libsodium.pc.in Update description Mar 17, 2016 libsodium.sln Retarget the top solution to Visual Studio 2015 Nov 1, 2015 libsodium.vcxproj Add blake2b-compress-avx2.c to the top-level Visual Studio solution Mar 17, 2016 libsodium.vcxproj.filters Add blake2b-compress-avx2.c to the top-level Visual Studio solution Mar 17, 2016 logo.png Larger logo, less prominent saltcellar Apr 19, 2016 README.markdown Sodium is a new, easy-to-use software library for encryption, decryption, signatures, password hashing and more. It is a portable, cross-compilable, installable, packageable fork of NaCl, with a compatible API, and an extended API to improve usability even further. Its goal is to provide all of the core operations needed to build higher-level cryptographic tools. Sodium supports a variety of compilers and operating systems, including Windows (with MingW or Visual Studio, x86 and x64), iOS and Android. Documentation The documentation is a work-in-progress, and is being written using Gitbook: libsodium documentation - online, requires Javascript. offline documentation in PDF, MOBI and ePUB formats. Integrity Checking The integrity checking instructions (including the signing key for libsodium) are available in the installation section of the documentation. Community A mailing-list is available to discuss libsodium. In order to join, just send a random mail to sodium-subscribe {at} pureftpd {dot} org. License ISC license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jedisct1/libsodium"	"— bindings"	"true"
"Cryptography"	""	"https://travis-ci.org/dnaq/sodiumoxide"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Cryptography"	"klutzy/suruga"	"https://github.com/klutzy/suruga"	"— a Rust implementation of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"124"	"16"	"8"	"GitHub - klutzy/suruga: TLS 1.2 implementation in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 124 Fork 8 klutzy/suruga Code Issues 1 Pull requests 1 Wiki Pulse Graphs TLS 1.2 implementation in Rust 69 commits 2 branches 0 releases 6 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master x509-parser Nothing to show Nothing to show New pull request Latest commit 01e958b Jan 19, 2016 klutzy Merge pull request #16 from rilut/use-sized-trait … Use Sized trait for Self Permalink Failed to load latest commit information. examples Upgrade to rustc 1.1.0-dev (435622028 2015-05-04) (built 2015-05-05) May 13, 2015 src Merge pull request #16 from rilut/use-sized-trait Jan 19, 2016 Cargo.toml Upgrade to rustc 1.1.0-dev (435622028 2015-05-04) (built 2015-05-05) May 13, 2015 LICENSE Implement basic TLS 1.2 handshake Aug 4, 2014 README.md Update example Mar 19, 2015 README.md suruga is Rust implementation of TLS 1.2. It currently implements some core parts of TLS 1.2, NIST P-256 ECDHE and chacha20-poly1305. Usage extern crate suruga;  use std::io::prelude::*; use std::net::TcpStream;  fn main() {     test().unwrap(); }  fn test() -> suruga::tls_result::TlsResult<()> {     let stream = try!(TcpStream::connect(""www.google.com:443""));     let mut client = try!(suruga::TlsClient::from_tcp(stream));     let _len = try!(client.write(b""GET / HTTP/1.1\r\nHost: www.google.com\r\n\r\n""));      let mut msg = vec![0u8; 100];     try!(client.read(&mut msg));     let msg = String::from_utf8_lossy(&msg);     println!(""msg: {}"", msg);      try!(client.close());      Ok(()) } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/klutzy/suruga"	"— a Rust implementation of"	"true"
"Cryptography"	"TLS 1.2"	"http://tools.ietf.org/html/rfc5246"	"— a Rust implementation of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"RFC 5246 - The Transport Layer Security (TLS) Protocol Version 1.2 [Docs] [txt|pdf] [draft-ietf-tls-rf...] [Diff1] [Diff2] [IPR] [Errata] Updated by: 5746, 5878, 6176, 7465, 7507, 7568, PROPOSED STANDARD 7627, 7685, 7905 Errata Exist  Network Working Group                                          T. Dierks Request for Comments: 5246                                   Independent Obsoletes: 3268, 4346, 4366                                  E. Rescorla Updates: 4492                                                 RTFM, Inc. Category: Standards Track                                    August 2008                 The Transport Layer Security (TLS) Protocol                               Version 1.2  Status of This Memo     This document specifies an Internet standards track protocol for the    Internet community, and requests discussion and suggestions for    improvements.  Please refer to the current edition of the ""Internet    Official Protocol Standards"" (STD 1) for the standardization state    and status of this protocol.  Distribution of this memo is unlimited.  Abstract     This document specifies Version 1.2 of the Transport Layer Security    (TLS) protocol.  The TLS protocol provides communications security    over the Internet.  The protocol allows client/server applications to    communicate in a way that is designed to prevent eavesdropping,    tampering, or message forgery.  Table of Contents     1. Introduction ....................................................4       1.1. Requirements Terminology ...................................5       1.2. Major Differences from TLS 1.1 .............................5    2. Goals ...........................................................6    3. Goals of This Document ..........................................7    4. Presentation Language ...........................................7       4.1. Basic Block Size ...........................................7       4.2. Miscellaneous ..............................................8       4.3. Vectors ....................................................8       4.4. Numbers ....................................................9       4.5. Enumerateds ................................................9       4.6. Constructed Types .........................................10            4.6.1. Variants ...........................................10       4.7. Cryptographic Attributes ..................................12       4.8. Constants .................................................14    5. HMAC and the Pseudorandom Function .............................14    6. The TLS Record Protocol ........................................15       6.1. Connection States .........................................16       6.2. Record Layer ..............................................19            6.2.1. Fragmentation ......................................19    Dierks & Rescorla           Standards Track                     [Page 1]   RFC 5246                          TLS                        August 2008              6.2.2. Record Compression and Decompression ...............20            6.2.3. Record Payload Protection ..........................21                   6.2.3.1. Null or Standard Stream Cipher ............22                   6.2.3.2. CBC Block Cipher ..........................22                   6.2.3.3. AEAD Ciphers ..............................24       6.3. Key Calculation ...........................................25    7. The TLS Handshaking Protocols ..................................26       7.1. Change Cipher Spec Protocol ...............................27       7.2. Alert Protocol ............................................28            7.2.1. Closure Alerts .....................................29            7.2.2. Error Alerts .......................................30       7.3. Handshake Protocol Overview ...............................33       7.4. Handshake Protocol ........................................37            7.4.1. Hello Messages .....................................38                   7.4.1.1. Hello Request .............................38                   7.4.1.2. Client Hello ..............................39                   7.4.1.3. Server Hello ..............................42                   7.4.1.4. Hello Extensions ..........................44                            7.4.1.4.1. Signature Algorithms ...........45            7.4.2. Server Certificate .................................47            7.4.3. Server Key Exchange Message ........................50            7.4.4. Certificate Request ................................53            7.4.5. Server Hello Done ..................................55            7.4.6. Client Certificate .................................55            7.4.7. Client Key Exchange Message ........................57                   7.4.7.1. RSA-Encrypted Premaster Secret Message ....58                   7.4.7.2. Client Diffie-Hellman Public Value ........61            7.4.8. Certificate Verify .................................62            7.4.9. Finished ...........................................63    8. Cryptographic Computations .....................................64       8.1. Computing the Master Secret ...............................64            8.1.1. RSA ................................................65            8.1.2. Diffie-Hellman .....................................65    9. Mandatory Cipher Suites ........................................65    10. Application Data Protocol .....................................65    11. Security Considerations .......................................65    12. IANA Considerations ...........................................65    Appendix A. Protocol Data Structures and Constant Values ..........68       A.1. Record Layer ..............................................68       A.2. Change Cipher Specs Message ...............................69       A.3. Alert Messages ............................................69       A.4. Handshake Protocol ........................................70            A.4.1. Hello Messages .....................................71            A.4.2. Server Authentication and Key Exchange Messages ....72            A.4.3. Client Authentication and Key Exchange Messages ....74            A.4.4. Handshake Finalization Message .....................74       A.5. The Cipher Suite ..........................................75       A.6. The Security Parameters ...................................77    Dierks & Rescorla           Standards Track                     [Page 2]   RFC 5246                          TLS                        August 2008         A.7. Changes to RFC 4492 .......................................78    Appendix B. Glossary ..............................................78    Appendix C. Cipher Suite Definitions ..............................83    Appendix D. Implementation Notes ..................................85       D.1. Random Number Generation and Seeding ......................85       D.2. Certificates and Authentication ...........................85       D.3. Cipher Suites .............................................85       D.4. Implementation Pitfalls ...................................85    Appendix E. Backward Compatibility ................................87       E.1. Compatibility with TLS 1.0/1.1 and SSL 3.0 ................87       E.2. Compatibility with SSL 2.0 ................................88       E.3. Avoiding Man-in-the-Middle Version Rollback ...............90    Appendix F. Security Analysis .....................................91       F.1. Handshake Protocol ........................................91            F.1.1. Authentication and Key Exchange ....................91                   F.1.1.1. Anonymous Key Exchange ....................91                   F.1.1.2. RSA Key Exchange and Authentication .......92                   F.1.1.3. Diffie-Hellman Key Exchange with                            Authentication ............................92            F.1.2. Version Rollback Attacks ...........................93            F.1.3. Detecting Attacks Against the Handshake Protocol ...94            F.1.4. Resuming Sessions ..................................94       F.2. Protecting Application Data ...............................94       F.3. Explicit IVs ..............................................95       F.4. Security of Composite Cipher Modes ........................95       F.5. Denial of Service .........................................96       F.6. Final Notes ...............................................96    Normative References ..............................................97    Informative References ............................................98    Working Group Information ........................................101    Contributors .....................................................101                     Dierks & Rescorla           Standards Track                     [Page 3]   RFC 5246                          TLS                        August 2008   1.  Introduction     The primary goal of the TLS protocol is to provide privacy and data    integrity between two communicating applications.  The protocol is    composed of two layers: the TLS Record Protocol and the TLS Handshake    Protocol.  At the lowest level, layered on top of some reliable    transport protocol (e.g., TCP [TCP]), is the TLS Record Protocol.    The TLS Record Protocol provides connection security that has two    basic properties:     -  The connection is private.  Symmetric cryptography is used for       data encryption (e.g., AES [AES], RC4 [SCH], etc.).  The keys for       this symmetric encryption are generated uniquely for each       connection and are based on a secret negotiated by another       protocol (such as the TLS Handshake Protocol).  The Record       Protocol can also be used without encryption.     -  The connection is reliable.  Message transport includes a message       integrity check using a keyed MAC.  Secure hash functions (e.g.,       SHA-1, etc.) are used for MAC computations.  The Record Protocol       can operate without a MAC, but is generally only used in this mode       while another protocol is using the Record Protocol as a transport       for negotiating security parameters.     The TLS Record Protocol is used for encapsulation of various higher-    level protocols.  One such encapsulated protocol, the TLS Handshake    Protocol, allows the server and client to authenticate each other and    to negotiate an encryption algorithm and cryptographic keys before    the application protocol transmits or receives its first byte of    data.  The TLS Handshake Protocol provides connection security that    has three basic properties:     -  The peer's identity can be authenticated using asymmetric, or       public key, cryptography (e.g., RSA [RSA], DSA [DSS], etc.).  This       authentication can be made optional, but is generally required for       at least one of the peers.     -  The negotiation of a shared secret is secure: the negotiated       secret is unavailable to eavesdroppers, and for any authenticated       connection the secret cannot be obtained, even by an attacker who       can place himself in the middle of the connection.     -  The negotiation is reliable: no attacker can modify the       negotiation communication without being detected by the parties to       the communication.       Dierks & Rescorla           Standards Track                     [Page 4]   RFC 5246                          TLS                        August 2008      One advantage of TLS is that it is application protocol independent.    Higher-level protocols can layer on top of the TLS protocol    transparently.  The TLS standard, however, does not specify how    protocols add security with TLS; the decisions on how to initiate TLS    handshaking and how to interpret the authentication certificates    exchanged are left to the judgment of the designers and implementors    of protocols that run on top of TLS.  1.1.  Requirements Terminology     The key words ""MUST"", ""MUST NOT"", ""REQUIRED"", ""SHALL"", ""SHALL NOT"",    ""SHOULD"", ""SHOULD NOT"", ""RECOMMENDED"", ""MAY"", and ""OPTIONAL"" in this    document are to be interpreted as described in RFC 2119 [REQ].  1.2.  Major Differences from TLS 1.1     This document is a revision of the TLS 1.1 [TLS1.1] protocol which    contains improved flexibility, particularly for negotiation of    cryptographic algorithms.  The major changes are:     -  The MD5/SHA-1 combination in the pseudorandom function (PRF) has       been replaced with cipher-suite-specified PRFs.  All cipher suites       in this document use P_SHA256.     -  The MD5/SHA-1 combination in the digitally-signed element has been       replaced with a single hash.  Signed elements now include a field       that explicitly specifies the hash algorithm used.     -  Substantial cleanup to the client's and server's ability to       specify which hash and signature algorithms they will accept.       Note that this also relaxes some of the constraints on signature       and hash algorithms from previous versions of TLS.     -  Addition of support for authenticated encryption with additional       data modes.     -  TLS Extensions definition and AES Cipher Suites were merged in       from external [TLSEXT] and [TLSAES].     -  Tighter checking of EncryptedPreMasterSecret version numbers.     -  Tightened up a number of requirements.     -  Verify_data length now depends on the cipher suite (default is       still 12).     -  Cleaned up description of Bleichenbacher/Klima attack defenses.     Dierks & Rescorla           Standards Track                     [Page 5]   RFC 5246                          TLS                        August 2008      -  Alerts MUST now be sent in many cases.     -  After a certificate_request, if no certificates are available,       clients now MUST send an empty certificate list.     -  TLS_RSA_WITH_AES_128_CBC_SHA is now the mandatory to implement       cipher suite.     -  Added HMAC-SHA256 cipher suites.     -  Removed IDEA and DES cipher suites.  They are now deprecated and       will be documented in a separate document.     -  Support for the SSLv2 backward-compatible hello is now a MAY, not       a SHOULD, with sending it a SHOULD NOT.  Support will probably       become a SHOULD NOT in the future.     -  Added limited ""fall-through"" to the presentation language to allow       multiple case arms to have the same encoding.     -  Added an Implementation Pitfalls sections     -  The usual clarifications and editorial work.  2.  Goals     The goals of the TLS protocol, in order of priority, are as follows:     1. Cryptographic security: TLS should be used to establish a secure       connection between two parties.     2. Interoperability: Independent programmers should be able to       develop applications utilizing TLS that can successfully exchange       cryptographic parameters without knowledge of one another's code.     3. Extensibility: TLS seeks to provide a framework into which new       public key and bulk encryption methods can be incorporated as       necessary.  This will also accomplish two sub-goals: preventing       the need to create a new protocol (and risking the introduction of       possible new weaknesses) and avoiding the need to implement an       entire new security library.     4. Relative efficiency: Cryptographic operations tend to be highly       CPU intensive, particularly public key operations.  For this       reason, the TLS protocol has incorporated an optional session       caching scheme to reduce the number of connections that need to be       established from scratch.  Additionally, care has been taken to       reduce network activity.    Dierks & Rescorla           Standards Track                     [Page 6]   RFC 5246                          TLS                        August 2008   3.  Goals of This Document     This document and the TLS protocol itself are based on the SSL 3.0    Protocol Specification as published by Netscape.  The differences    between this protocol and SSL 3.0 are not dramatic, but they are    significant enough that the various versions of TLS and SSL 3.0 do    not interoperate (although each protocol incorporates a mechanism by    which an implementation can back down to prior versions).  This    document is intended primarily for readers who will be implementing    the protocol and for those doing cryptographic analysis of it.  The    specification has been written with this in mind, and it is intended    to reflect the needs of those two groups.  For that reason, many of    the algorithm-dependent data structures and rules are included in the    body of the text (as opposed to in an appendix), providing easier    access to them.     This document is not intended to supply any details of service    definition or of interface definition, although it does cover select    areas of policy as they are required for the maintenance of solid    security.  4.  Presentation Language     This document deals with the formatting of data in an external    representation.  The following very basic and somewhat casually    defined presentation syntax will be used.  The syntax draws from    several sources in its structure.  Although it resembles the    programming language ""C"" in its syntax and XDR [XDR] in both its    syntax and intent, it would be risky to draw too many parallels.  The    purpose of this presentation language is to document TLS only; it has    no general application beyond that particular goal.  4.1.  Basic Block Size     The representation of all data items is explicitly specified.  The    basic data block size is one byte (i.e., 8 bits).  Multiple byte data    items are concatenations of bytes, from left to right, from top to    bottom.  From the byte stream, a multi-byte item (a numeric in the    example) is formed (using C notation) by:        value = (byte[0] << 8*(n-1)) | (byte[1] << 8*(n-2)) |               ... | byte[n-1];     This byte ordering for multi-byte values is the commonplace network    byte order or big-endian format.       Dierks & Rescorla           Standards Track                     [Page 7]   RFC 5246                          TLS                        August 2008   4.2.  Miscellaneous     Comments begin with ""/*"" and end with ""*/"".     Optional components are denoted by enclosing them in ""[[ ]]"" double    brackets.     Single-byte entities containing uninterpreted data are of type    opaque.  4.3.  Vectors     A vector (single-dimensioned array) is a stream of homogeneous data    elements.  The size of the vector may be specified at documentation    time or left unspecified until runtime.  In either case, the length    declares the number of bytes, not the number of elements, in the    vector.  The syntax for specifying a new type, T', that is a fixed-    length vector of type T is        T T'[n];     Here, T' occupies n bytes in the data stream, where n is a multiple    of the size of T.  The length of the vector is not included in the    encoded stream.     In the following example, Datum is defined to be three consecutive    bytes that the protocol does not interpret, while Data is three    consecutive Datum, consuming a total of nine bytes.        opaque Datum[3];      /* three uninterpreted bytes */       Datum Data[9];        /* 3 consecutive 3 byte vectors */     Variable-length vectors are defined by specifying a subrange of legal    lengths, inclusively, using the notation <floor..ceiling>.  When    these are encoded, the actual length precedes the vector's contents    in the byte stream.  The length will be in the form of a number    consuming as many bytes as required to hold the vector's specified    maximum (ceiling) length.  A variable-length vector with an actual    length field of zero is referred to as an empty vector.        T T'<floor..ceiling>;     In the following example, mandatory is a vector that must contain    between 300 and 400 bytes of type opaque.  It can never be empty.    The actual length field consumes two bytes, a uint16, which is    sufficient to represent the value 400 (see Section 4.4).  On the    other hand, longer can represent up to 800 bytes of data, or 400    uint16 elements, and it may be empty.  Its encoding will include a    Dierks & Rescorla           Standards Track                     [Page 8]   RFC 5246                          TLS                        August 2008      two-byte actual length field prepended to the vector.  The length of    an encoded vector must be an even multiple of the length of a single    element (for example, a 17-byte vector of uint16 would be illegal).        opaque mandatory<300..400>;             /* length field is 2 bytes, cannot be empty */       uint16 longer<0..800>;             /* zero to 400 16-bit unsigned integers */  4.4.  Numbers     The basic numeric data type is an unsigned byte (uint8).  All larger    numeric data types are formed from fixed-length series of bytes    concatenated as described in Section 4.1 and are also unsigned.  The    following numeric types are predefined.        uint8 uint16[2];       uint8 uint24[3];       uint8 uint32[4];       uint8 uint64[8];     All values, here and elsewhere in the specification, are stored in    network byte (big-endian) order; the uint32 represented by the hex    bytes 01 02 03 04 is equivalent to the decimal value 16909060.     Note that in some cases (e.g., DH parameters) it is necessary to    represent integers as opaque vectors.  In such cases, they are    represented as unsigned integers (i.e., leading zero octets are not    required even if the most significant bit is set).  4.5.  Enumerateds     An additional sparse data type is available called enum.  A field of    type enum can only assume the values declared in the definition.    Each definition is a different type.  Only enumerateds of the same    type may be assigned or compared.  Every element of an enumerated    must be assigned a value, as demonstrated in the following example.    Since the elements of the enumerated are not ordered, they can be    assigned any unique value, in any order.        enum { e1(v1), e2(v2), ... , en(vn) [[, (n)]] } Te;     An enumerated occupies as much space in the byte stream as would its    maximal defined ordinal value.  The following definition would cause    one byte to be used to carry fields of type Color.        enum { red(3), blue(5), white(7) } Color;     Dierks & Rescorla           Standards Track                     [Page 9]   RFC 5246                          TLS                        August 2008      One may optionally specify a value without its associated tag to    force the width definition without defining a superfluous element.     In the following example, Taste will consume two bytes in the data    stream but can only assume the values 1, 2, or 4.        enum { sweet(1), sour(2), bitter(4), (32000) } Taste;     The names of the elements of an enumeration are scoped within the    defined type.  In the first example, a fully qualified reference to    the second element of the enumeration would be Color.blue.  Such    qualification is not required if the target of the assignment is well    specified.        Color color = Color.blue;     /* overspecified, legal */       Color color = blue;           /* correct, type implicit */     For enumerateds that are never converted to external representation,    the numerical information may be omitted.        enum { low, medium, high } Amount;  4.6.  Constructed Types     Structure types may be constructed from primitive types for    convenience.  Each specification declares a new, unique type.  The    syntax for definition is much like that of C.        struct {           T1 f1;           T2 f2;           ...           Tn fn;       } [[T]];     The fields within a structure may be qualified using the type's name,    with a syntax much like that available for enumerateds.  For example,    T.f2 refers to the second field of the previous declaration.    Structure definitions may be embedded.  4.6.1.  Variants     Defined structures may have variants based on some knowledge that is    available within the environment.  The selector must be an enumerated    type that defines the possible variants the structure defines.  There    must be a case arm for every element of the enumeration declared in    the select.  Case arms have limited fall-through: if two case arms    follow in immediate succession with no fields in between, then they    Dierks & Rescorla           Standards Track                    [Page 10]   RFC 5246                          TLS                        August 2008      both contain the same fields.  Thus, in the example below, ""orange""    and ""banana"" both contain V2.  Note that this is a new piece of    syntax in TLS 1.2.     The body of the variant structure may be given a label for reference.    The mechanism by which the variant is selected at runtime is not    prescribed by the presentation language.        struct {           T1 f1;           T2 f2;           ....           Tn fn;            select (E) {                case e1: Te1;                case e2: Te2;                case e3: case e4: Te3;                ....                case en: Ten;            } [[fv]];       } [[Tv]];     For example:        enum { apple, orange, banana } VariantTag;        struct {           uint16 number;           opaque string<0..10>; /* variable length */       } V1;        struct {           uint32 number;           opaque string[10];    /* fixed length */       } V2;        struct {           select (VariantTag) { /* value of selector is implicit */               case apple:                 V1;   /* VariantBody, tag = apple */               case orange:               case banana:                 V2;   /* VariantBody, tag = orange or banana */           } variant_body;       /* optional label on variant */       } VariantRecord;       Dierks & Rescorla           Standards Track                    [Page 11]   RFC 5246                          TLS                        August 2008   4.7.  Cryptographic Attributes     The five cryptographic operations -- digital signing, stream cipher    encryption, block cipher encryption, authenticated encryption with    additional data (AEAD) encryption, and public key encryption -- are    designated digitally-signed, stream-ciphered, block-ciphered, aead-    ciphered, and public-key-encrypted, respectively.  A field's    cryptographic processing is specified by prepending an appropriate    key word designation before the field's type specification.    Cryptographic keys are implied by the current session state (see    Section 6.1).     A digitally-signed element is encoded as a struct DigitallySigned:        struct {          SignatureAndHashAlgorithm algorithm;          opaque signature<0..2^16-1>;       } DigitallySigned;     The algorithm field specifies the algorithm used (see Section    7.4.1.4.1 for the definition of this field).  Note that the    introduction of the algorithm field is a change from previous    versions.  The signature is a digital signature using those    algorithms over the contents of the element.  The contents themselves    do not appear on the wire but are simply calculated.  The length of    the signature is specified by the signing algorithm and key.     In RSA signing, the opaque vector contains the signature generated    using the RSASSA-PKCS1-v1_5 signature scheme defined in [PKCS1].  As    discussed in [PKCS1], the DigestInfo MUST be DER-encoded [X680]    [X690].  For hash algorithms without parameters (which includes    SHA-1), the DigestInfo.AlgorithmIdentifier.parameters field MUST be    NULL, but implementations MUST accept both without parameters and    with NULL parameters.  Note that earlier versions of TLS used a    different RSA signature scheme that did not include a DigestInfo    encoding.     In DSA, the 20 bytes of the SHA-1 hash are run directly through the    Digital Signing Algorithm with no additional hashing.  This produces    two values, r and s.  The DSA signature is an opaque vector, as    above, the contents of which are the DER encoding of:        Dss-Sig-Value ::= SEQUENCE {           r INTEGER,           s INTEGER       }      Dierks & Rescorla           Standards Track                    [Page 12]   RFC 5246                          TLS                        August 2008      Note: In current terminology, DSA refers to the Digital Signature    Algorithm and DSS refers to the NIST standard.  In the original SSL    and TLS specs, ""DSS"" was used universally.  This document uses ""DSA""    to refer to the algorithm, ""DSS"" to refer to the standard, and it    uses ""DSS"" in the code point definitions for historical continuity.     In stream cipher encryption, the plaintext is exclusive-ORed with an    identical amount of output generated from a cryptographically secure    keyed pseudorandom number generator.     In block cipher encryption, every block of plaintext encrypts to a    block of ciphertext.  All block cipher encryption is done in CBC    (Cipher Block Chaining) mode, and all items that are block-ciphered    will be an exact multiple of the cipher block length.     In AEAD encryption, the plaintext is simultaneously encrypted and    integrity protected.  The input may be of any length, and aead-    ciphered output is generally larger than the input in order to    accommodate the integrity check value.     In public key encryption, a public key algorithm is used to encrypt    data in such a way that it can be decrypted only with the matching    private key.  A public-key-encrypted element is encoded as an opaque    vector <0..2^16-1>, where the length is specified by the encryption    algorithm and key.     RSA encryption is done using the RSAES-PKCS1-v1_5 encryption scheme    defined in [PKCS1].     In the following example        stream-ciphered struct {           uint8 field1;           uint8 field2;           digitally-signed opaque {             uint8 field3<0..255>;             uint8 field4;           };       } UserType;     The contents of the inner struct (field3 and field4) are used as    input for the signature/hash algorithm, and then the entire structure    is encrypted with a stream cipher.  The length of this structure, in    bytes, would be equal to two bytes for field1 and field2, plus two    bytes for the signature and hash algorithm, plus two bytes for the    length of the signature, plus the length of the output of the signing      Dierks & Rescorla           Standards Track                    [Page 13]   RFC 5246                          TLS                        August 2008      algorithm.  The length of the signature is known because the    algorithm and key used for the signing are known prior to encoding or    decoding this structure.  4.8.  Constants     Typed constants can be defined for purposes of specification by    declaring a symbol of the desired type and assigning values to it.     Under-specified types (opaque, variable-length vectors, and    structures that contain opaque) cannot be assigned values.  No fields    of a multi-element structure or vector may be elided.     For example:        struct {           uint8 f1;           uint8 f2;       } Example1;        Example1 ex1 = {1, 4};  /* assigns f1 = 1, f2 = 4 */  5.  HMAC and the Pseudorandom Function     The TLS record layer uses a keyed Message Authentication Code (MAC)    to protect message integrity.  The cipher suites defined in this    document use a construction known as HMAC, described in [HMAC], which    is based on a hash function.  Other cipher suites MAY define their    own MAC constructions, if needed.     In addition, a construction is required to do expansion of secrets    into blocks of data for the purposes of key generation or validation.    This pseudorandom function (PRF) takes as input a secret, a seed, and    an identifying label and produces an output of arbitrary length.     In this section, we define one PRF, based on HMAC.  This PRF with the    SHA-256 hash function is used for all cipher suites defined in this    document and in TLS documents published prior to this document when    TLS 1.2 is negotiated.  New cipher suites MUST explicitly specify a    PRF and, in general, SHOULD use the TLS PRF with SHA-256 or a    stronger standard hash function.     First, we define a data expansion function, P_hash(secret, data),    that uses a single hash function to expand a secret and seed into an    arbitrary quantity of output:       Dierks & Rescorla           Standards Track                    [Page 14]   RFC 5246                          TLS                        August 2008         P_hash(secret, seed) = HMAC_hash(secret, A(1) + seed) +                              HMAC_hash(secret, A(2) + seed) +                              HMAC_hash(secret, A(3) + seed) + ...     where + indicates concatenation.     A() is defined as:        A(0) = seed       A(i) = HMAC_hash(secret, A(i-1))     P_hash can be iterated as many times as necessary to produce the    required quantity of data.  For example, if P_SHA256 is being used to    create 80 bytes of data, it will have to be iterated three times    (through A(3)), creating 96 bytes of output data; the last 16 bytes    of the final iteration will then be discarded, leaving 80 bytes of    output data.     TLS's PRF is created by applying P_hash to the secret as:        PRF(secret, label, seed) = P_<hash>(secret, label + seed)     The label is an ASCII string.  It should be included in the exact    form it is given without a length byte or trailing null character.    For example, the label ""slithy toves"" would be processed by hashing    the following bytes:        73 6C 69 74 68 79 20 74 6F 76 65 73  6.  The TLS Record Protocol     The TLS Record Protocol is a layered protocol.  At each layer,    messages may include fields for length, description, and content.    The Record Protocol takes messages to be transmitted, fragments the    data into manageable blocks, optionally compresses the data, applies    a MAC, encrypts, and transmits the result.  Received data is    decrypted, verified, decompressed, reassembled, and then delivered to    higher-level clients.     Four protocols that use the record protocol are described in this    document: the handshake protocol, the alert protocol, the change    cipher spec protocol, and the application data protocol.  In order to    allow extension of the TLS protocol, additional record content types    can be supported by the record protocol.  New record content type    values are assigned by IANA in the TLS Content Type Registry as    described in Section 12.      Dierks & Rescorla           Standards Track                    [Page 15]   RFC 5246                          TLS                        August 2008      Implementations MUST NOT send record types not defined in this    document unless negotiated by some extension.  If a TLS    implementation receives an unexpected record type, it MUST send an    unexpected_message alert.     Any protocol designed for use over TLS must be carefully designed to    deal with all possible attacks against it.  As a practical matter,    this means that the protocol designer must be aware of what security    properties TLS does and does not provide and cannot safely rely on    the latter.     Note in particular that type and length of a record are not protected    by encryption.  If this information is itself sensitive, application    designers may wish to take steps (padding, cover traffic) to minimize    information leakage.  6.1.  Connection States     A TLS connection state is the operating environment of the TLS Record    Protocol.  It specifies a compression algorithm, an encryption    algorithm, and a MAC algorithm.  In addition, the parameters for    these algorithms are known: the MAC key and the bulk encryption keys    for the connection in both the read and the write directions.    Logically, there are always four connection states outstanding: the    current read and write states, and the pending read and write states.    All records are processed under the current read and write states.    The security parameters for the pending states can be set by the TLS    Handshake Protocol, and the ChangeCipherSpec can selectively make    either of the pending states current, in which case the appropriate    current state is disposed of and replaced with the pending state; the    pending state is then reinitialized to an empty state.  It is illegal    to make a state that has not been initialized with security    parameters a current state.  The initial current state always    specifies that no encryption, compression, or MAC will be used.     The security parameters for a TLS Connection read and write state are    set by providing the following values:     connection end       Whether this entity is considered the ""client"" or the ""server"" in       this connection.     PRF algorithm       An algorithm used to generate keys from the master secret (see       Sections 5 and 6.3).       Dierks & Rescorla           Standards Track                    [Page 16]   RFC 5246                          TLS                        August 2008      bulk encryption algorithm       An algorithm to be used for bulk encryption.  This specification       includes the key size of this algorithm, whether it is a block,       stream, or AEAD cipher, the block size of the cipher (if       appropriate), and the lengths of explicit and implicit       initialization vectors (or nonces).     MAC algorithm       An algorithm to be used for message authentication.  This       specification includes the size of the value returned by the MAC       algorithm.     compression algorithm       An algorithm to be used for data compression.  This specification       must include all information the algorithm requires to do       compression.     master secret       A 48-byte secret shared between the two peers in the connection.     client random       A 32-byte value provided by the client.     server random       A 32-byte value provided by the server.        These parameters are defined in the presentation language as:        enum { server, client } ConnectionEnd;        enum { tls_prf_sha256 } PRFAlgorithm;        enum { null, rc4, 3des, aes }         BulkCipherAlgorithm;        enum { stream, block, aead } CipherType;        enum { null, hmac_md5, hmac_sha1, hmac_sha256,            hmac_sha384, hmac_sha512} MACAlgorithm;        enum { null(0), (255) } CompressionMethod;        /* The algorithms specified in CompressionMethod, PRFAlgorithm,          BulkCipherAlgorithm, and MACAlgorithm may be added to. */        Dierks & Rescorla           Standards Track                    [Page 17]   RFC 5246                          TLS                        August 2008         struct {           ConnectionEnd          entity;           PRFAlgorithm           prf_algorithm;           BulkCipherAlgorithm    bulk_cipher_algorithm;           CipherType             cipher_type;           uint8                  enc_key_length;           uint8                  block_length;           uint8                  fixed_iv_length;           uint8                  record_iv_length;           MACAlgorithm           mac_algorithm;           uint8                  mac_length;           uint8                  mac_key_length;           CompressionMethod      compression_algorithm;           opaque                 master_secret[48];           opaque                 client_random[32];           opaque                 server_random[32];       } SecurityParameters;     The record layer will use the security parameters to generate the    following six items (some of which are not required by all ciphers,    and are thus empty):        client write MAC key       server write MAC key       client write encryption key       server write encryption key       client write IV       server write IV     The client write parameters are used by the server when receiving and    processing records and vice versa.  The algorithm used for generating    these items from the security parameters is described in Section 6.3.     Once the security parameters have been set and the keys have been    generated, the connection states can be instantiated by making them    the current states.  These current states MUST be updated for each    record processed.  Each connection state includes the following    elements:     compression state       The current state of the compression algorithm.     cipher state       The current state of the encryption algorithm.  This will consist       of the scheduled key for that connection.  For stream ciphers,       this will also contain whatever state information is necessary to       allow the stream to continue to encrypt or decrypt data.     Dierks & Rescorla           Standards Track                    [Page 18]   RFC 5246                          TLS                        August 2008      MAC key       The MAC key for this connection, as generated above.     sequence number       Each connection state contains a sequence number, which is       maintained separately for read and write states.  The sequence       number MUST be set to zero whenever a connection state is made the       active state.  Sequence numbers are of type uint64 and may not       exceed 2^64-1.  Sequence numbers do not wrap.  If a TLS       implementation would need to wrap a sequence number, it must       renegotiate instead.  A sequence number is incremented after each       record: specifically, the first record transmitted under a       particular connection state MUST use sequence number 0.  6.2.  Record Layer     The TLS record layer receives uninterpreted data from higher layers    in non-empty blocks of arbitrary size.  6.2.1.  Fragmentation     The record layer fragments information blocks into TLSPlaintext    records carrying data in chunks of 2^14 bytes or less.  Client    message boundaries are not preserved in the record layer (i.e.,    multiple client messages of the same ContentType MAY be coalesced    into a single TLSPlaintext record, or a single message MAY be    fragmented across several records).        struct {           uint8 major;           uint8 minor;       } ProtocolVersion;        enum {           change_cipher_spec(20), alert(21), handshake(22),           application_data(23), (255)       } ContentType;        struct {           ContentType type;           ProtocolVersion version;           uint16 length;           opaque fragment[TLSPlaintext.length];       } TLSPlaintext;     type       The higher-level protocol used to process the enclosed fragment.     Dierks & Rescorla           Standards Track                    [Page 19]   RFC 5246                          TLS                        August 2008      version       The version of the protocol being employed.  This document       describes TLS Version 1.2, which uses the version { 3, 3 }.  The       version value 3.3 is historical, deriving from the use of {3, 1}       for TLS 1.0.  (See Appendix A.1.)  Note that a client that       supports multiple versions of TLS may not know what version will       be employed before it receives the ServerHello.  See Appendix E       for discussion about what record layer version number should be       employed for ClientHello.     length       The length (in bytes) of the following TLSPlaintext.fragment.  The       length MUST NOT exceed 2^14.     fragment       The application data.  This data is transparent and treated as an       independent block to be dealt with by the higher-level protocol       specified by the type field.     Implementations MUST NOT send zero-length fragments of Handshake,    Alert, or ChangeCipherSpec content types.  Zero-length fragments of    Application data MAY be sent as they are potentially useful as a    traffic analysis countermeasure.     Note: Data of different TLS record layer content types MAY be    interleaved.  Application data is generally of lower precedence for    transmission than other content types.  However, records MUST be    delivered to the network in the same order as they are protected by    the record layer.  Recipients MUST receive and process interleaved    application layer traffic during handshakes subsequent to the first    one on a connection.  6.2.2.  Record Compression and Decompression     All records are compressed using the compression algorithm defined in    the current session state.  There is always an active compression    algorithm; however, initially it is defined as    CompressionMethod.null.  The compression algorithm translates a    TLSPlaintext structure into a TLSCompressed structure.  Compression    functions are initialized with default state information whenever a    connection state is made active.  [RFC3749] describes compression    algorithms for TLS.     Compression must be lossless and may not increase the content length    by more than 1024 bytes.  If the decompression function encounters a    TLSCompressed.fragment that would decompress to a length in excess of    2^14 bytes, it MUST report a fatal decompression failure error.     Dierks & Rescorla           Standards Track                    [Page 20]   RFC 5246                          TLS                        August 2008         struct {           ContentType type;       /* same as TLSPlaintext.type */           ProtocolVersion version;/* same as TLSPlaintext.version */           uint16 length;           opaque fragment[TLSCompressed.length];       } TLSCompressed;     length       The length (in bytes) of the following TLSCompressed.fragment.       The length MUST NOT exceed 2^14 + 1024.     fragment       The compressed form of TLSPlaintext.fragment.        Note: A CompressionMethod.null operation is an identity operation;       no fields are altered.        Implementation note: Decompression functions are responsible for       ensuring that messages cannot cause internal buffer overflows.  6.2.3.  Record Payload Protection        The encryption and MAC functions translate a TLSCompressed       structure into a TLSCiphertext.  The decryption functions reverse       the process.  The MAC of the record also includes a sequence       number so that missing, extra, or repeated messages are       detectable.        struct {           ContentType type;           ProtocolVersion version;           uint16 length;           select (SecurityParameters.cipher_type) {               case stream: GenericStreamCipher;               case block:  GenericBlockCipher;               case aead:   GenericAEADCipher;           } fragment;       } TLSCiphertext;     type       The type field is identical to TLSCompressed.type.     version       The version field is identical to TLSCompressed.version.     length       The length (in bytes) of the following TLSCiphertext.fragment.       The length MUST NOT exceed 2^14 + 2048.    Dierks & Rescorla           Standards Track                    [Page 21]   RFC 5246                          TLS                        August 2008      fragment       The encrypted form of TLSCompressed.fragment, with the MAC.  6.2.3.1.  Null or Standard Stream Cipher     Stream ciphers (including BulkCipherAlgorithm.null; see Appendix A.6)    convert TLSCompressed.fragment structures to and from stream    TLSCiphertext.fragment structures.        stream-ciphered struct {           opaque content[TLSCompressed.length];           opaque MAC[SecurityParameters.mac_length];       } GenericStreamCipher;     The MAC is generated as:        MAC(MAC_write_key, seq_num +                             TLSCompressed.type +                             TLSCompressed.version +                             TLSCompressed.length +                             TLSCompressed.fragment);     where ""+"" denotes concatenation.     seq_num       The sequence number for this record.     MAC       The MAC algorithm specified by SecurityParameters.mac_algorithm.     Note that the MAC is computed before encryption.  The stream cipher    encrypts the entire block, including the MAC.  For stream ciphers    that do not use a synchronization vector (such as RC4), the stream    cipher state from the end of one record is simply used on the    subsequent packet.  If the cipher suite is TLS_NULL_WITH_NULL_NULL,    encryption consists of the identity operation (i.e., the data is not    encrypted, and the MAC size is zero, implying that no MAC is used).    For both null and stream ciphers, TLSCiphertext.length is    TLSCompressed.length plus SecurityParameters.mac_length.  6.2.3.2.  CBC Block Cipher     For block ciphers (such as 3DES or AES), the encryption and MAC    functions convert TLSCompressed.fragment structures to and from block    TLSCiphertext.fragment structures.       Dierks & Rescorla           Standards Track                    [Page 22]   RFC 5246                          TLS                        August 2008         struct {           opaque IV[SecurityParameters.record_iv_length];           block-ciphered struct {               opaque content[TLSCompressed.length];               opaque MAC[SecurityParameters.mac_length];               uint8 padding[GenericBlockCipher.padding_length];               uint8 padding_length;           };       } GenericBlockCipher;     The MAC is generated as described in Section 6.2.3.1.     IV       The Initialization Vector (IV) SHOULD be chosen at random, and       MUST be unpredictable.  Note that in versions of TLS prior to 1.1,       there was no IV field, and the last ciphertext block of the       previous record (the ""CBC residue"") was used as the IV.  This was       changed to prevent the attacks described in [CBCATT].  For block       ciphers, the IV length is of length       SecurityParameters.record_iv_length, which is equal to the       SecurityParameters.block_size.     padding       Padding that is added to force the length of the plaintext to be       an integral multiple of the block cipher's block length.  The       padding MAY be any length up to 255 bytes, as long as it results       in the TLSCiphertext.length being an integral multiple of the       block length.  Lengths longer than necessary might be desirable to       frustrate attacks on a protocol that are based on analysis of the       lengths of exchanged messages.  Each uint8 in the padding data       vector MUST be filled with the padding length value.  The receiver       MUST check this padding and MUST use the bad_record_mac alert to       indicate padding errors.     padding_length       The padding length MUST be such that the total size of the       GenericBlockCipher structure is a multiple of the cipher's block       length.  Legal values range from zero to 255, inclusive.  This       length specifies the length of the padding field exclusive of the       padding_length field itself.     The encrypted data length (TLSCiphertext.length) is one more than the    sum of SecurityParameters.block_length, TLSCompressed.length,    SecurityParameters.mac_length, and padding_length.     Example: If the block length is 8 bytes, the content length    (TLSCompressed.length) is 61 bytes, and the MAC length is 20 bytes,    then the length before padding is 82 bytes (this does not include the    Dierks & Rescorla           Standards Track                    [Page 23]   RFC 5246                          TLS                        August 2008      IV.  Thus, the padding length modulo 8 must be equal to 6 in order to    make the total length an even multiple of 8 bytes (the block length).    The padding length can be 6, 14, 22, and so on, through 254.  If the    padding length were the minimum necessary, 6, the padding would be 6    bytes, each containing the value 6.  Thus, the last 8 octets of the    GenericBlockCipher before block encryption would be xx 06 06 06 06 06    06 06, where xx is the last octet of the MAC.     Note: With block ciphers in CBC mode (Cipher Block Chaining), it is    critical that the entire plaintext of the record be known before any    ciphertext is transmitted.  Otherwise, it is possible for the    attacker to mount the attack described in [CBCATT].     Implementation note: Canvel et al. [CBCTIME] have demonstrated a    timing attack on CBC padding based on the time required to compute    the MAC.  In order to defend against this attack, implementations    MUST ensure that record processing time is essentially the same    whether or not the padding is correct.  In general, the best way to    do this is to compute the MAC even if the padding is incorrect, and    only then reject the packet.  For instance, if the pad appears to be    incorrect, the implementation might assume a zero-length pad and then    compute the MAC.  This leaves a small timing channel, since MAC    performance depends to some extent on the size of the data fragment,    but it is not believed to be large enough to be exploitable, due to    the large block size of existing MACs and the small size of the    timing signal.  6.2.3.3.  AEAD Ciphers     For AEAD [AEAD] ciphers (such as [CCM] or [GCM]), the AEAD function    converts TLSCompressed.fragment structures to and from AEAD    TLSCiphertext.fragment structures.        struct {          opaque nonce_explicit[SecurityParameters.record_iv_length];          aead-ciphered struct {              opaque content[TLSCompressed.length];          };       } GenericAEADCipher;     AEAD ciphers take as input a single key, a nonce, a plaintext, and    ""additional data"" to be included in the authentication check, as    described in Section 2.1 of [AEAD].  The key is either the    client_write_key or the server_write_key.  No MAC key is used.     Each AEAD cipher suite MUST specify how the nonce supplied to the    AEAD operation is constructed, and what is the length of the    GenericAEADCipher.nonce_explicit part.  In many cases, it is    Dierks & Rescorla           Standards Track                    [Page 24]   RFC 5246                          TLS                        August 2008      appropriate to use the partially implicit nonce technique described    in Section 3.2.1 of [AEAD]; with record_iv_length being the length of    the explicit part.  In this case, the implicit part SHOULD be derived    from key_block as client_write_iv and server_write_iv (as described    in Section 6.3), and the explicit part is included in    GenericAEAEDCipher.nonce_explicit.     The plaintext is the TLSCompressed.fragment.     The additional authenticated data, which we denote as    additional_data, is defined as follows:        additional_data = seq_num + TLSCompressed.type +                         TLSCompressed.version + TLSCompressed.length;     where ""+"" denotes concatenation.     The aead_output consists of the ciphertext output by the AEAD    encryption operation.  The length will generally be larger than    TLSCompressed.length, but by an amount that varies with the AEAD    cipher.  Since the ciphers might incorporate padding, the amount of    overhead could vary with different TLSCompressed.length values.  Each    AEAD cipher MUST NOT produce an expansion of greater than 1024 bytes.    Symbolically,        AEADEncrypted = AEAD-Encrypt(write_key, nonce, plaintext,                                    additional_data)     In order to decrypt and verify, the cipher takes as input the key,    nonce, the ""additional_data"", and the AEADEncrypted value.  The    output is either the plaintext or an error indicating that the    decryption failed.  There is no separate integrity check.  That is:        TLSCompressed.fragment = AEAD-Decrypt(write_key, nonce,                                             AEADEncrypted,                                             additional_data)     If the decryption fails, a fatal bad_record_mac alert MUST be    generated.  6.3.  Key Calculation     The Record Protocol requires an algorithm to generate keys required    by the current connection state (see Appendix A.6) from the security    parameters provided by the handshake protocol.       Dierks & Rescorla           Standards Track                    [Page 25]   RFC 5246                          TLS                        August 2008      The master secret is expanded into a sequence of secure bytes, which    is then split to a client write MAC key, a server write MAC key, a    client write encryption key, and a server write encryption key.  Each    of these is generated from the byte sequence in that order.  Unused    values are empty.  Some AEAD ciphers may additionally require a    client write IV and a server write IV (see Section 6.2.3.3).     When keys and MAC keys are generated, the master secret is used as an    entropy source.     To generate the key material, compute        key_block = PRF(SecurityParameters.master_secret,                       ""key expansion"",                       SecurityParameters.server_random +                       SecurityParameters.client_random);     until enough output has been generated.  Then, the key_block is    partitioned as follows:        client_write_MAC_key[SecurityParameters.mac_key_length]       server_write_MAC_key[SecurityParameters.mac_key_length]       client_write_key[SecurityParameters.enc_key_length]       server_write_key[SecurityParameters.enc_key_length]       client_write_IV[SecurityParameters.fixed_iv_length]       server_write_IV[SecurityParameters.fixed_iv_length]     Currently, the client_write_IV and server_write_IV are only generated    for implicit nonce techniques as described in Section 3.2.1 of    [AEAD].     Implementation note: The currently defined cipher suite which    requires the most material is AES_256_CBC_SHA256.  It requires 2 x 32    byte keys and 2 x 32 byte MAC keys, for a total 128 bytes of key    material.  7.  The TLS Handshaking Protocols     TLS has three subprotocols that are used to allow peers to agree upon    security parameters for the record layer, to authenticate themselves,    to instantiate negotiated security parameters, and to report error    conditions to each other.     The Handshake Protocol is responsible for negotiating a session,    which consists of the following items:       Dierks & Rescorla           Standards Track                    [Page 26]   RFC 5246                          TLS                        August 2008      session identifier       An arbitrary byte sequence chosen by the server to identify an       active or resumable session state.     peer certificate       X509v3 [PKIX] certificate of the peer.  This element of the state       may be null.     compression method       The algorithm used to compress data prior to encryption.     cipher spec       Specifies the pseudorandom function (PRF) used to generate keying       material, the bulk data encryption algorithm (such as null, AES,       etc.) and the MAC algorithm (such as HMAC-SHA1).  It also defines       cryptographic attributes such as the mac_length.  (See Appendix       A.6 for formal definition.)     master secret       48-byte secret shared between the client and server.     is resumable       A flag indicating whether the session can be used to initiate new       connections.     These items are then used to create security parameters for use by    the record layer when protecting application data.  Many connections    can be instantiated using the same session through the resumption    feature of the TLS Handshake Protocol.  7.1.  Change Cipher Spec Protocol     The change cipher spec protocol exists to signal transitions in    ciphering strategies.  The protocol consists of a single message,    which is encrypted and compressed under the current (not the pending)    connection state.  The message consists of a single byte of value 1.        struct {           enum { change_cipher_spec(1), (255) } type;       } ChangeCipherSpec;     The ChangeCipherSpec message is sent by both the client and the    server to notify the receiving party that subsequent records will be    protected under the newly negotiated CipherSpec and keys.  Reception    of this message causes the receiver to instruct the record layer to    immediately copy the read pending state into the read current state.    Immediately after sending this message, the sender MUST instruct the    record layer to make the write pending state the write active state.    Dierks & Rescorla           Standards Track                    [Page 27]   RFC 5246                          TLS                        August 2008      (See Section 6.1.)  The ChangeCipherSpec message is sent during the    handshake after the security parameters have been agreed upon, but    before the verifying Finished message is sent.     Note: If a rehandshake occurs while data is flowing on a connection,    the communicating parties may continue to send data using the old    CipherSpec.  However, once the ChangeCipherSpec has been sent, the    new CipherSpec MUST be used.  The first side to send the    ChangeCipherSpec does not know that the other side has finished    computing the new keying material (e.g., if it has to perform a    time-consuming public key operation).  Thus, a small window of time,    during which the recipient must buffer the data, MAY exist.  In    practice, with modern machines this interval is likely to be fairly    short.  7.2.  Alert Protocol     One of the content types supported by the TLS record layer is the    alert type.  Alert messages convey the severity of the message    (warning or fatal) and a description of the alert.  Alert messages    with a level of fatal result in the immediate termination of the    connection.  In this case, other connections corresponding to the    session may continue, but the session identifier MUST be invalidated,    preventing the failed session from being used to establish new    connections.  Like other messages, alert messages are encrypted and    compressed, as specified by the current connection state.        enum { warning(1), fatal(2), (255) } AlertLevel;        enum {           close_notify(0),           unexpected_message(10),           bad_record_mac(20),           decryption_failed_RESERVED(21),           record_overflow(22),           decompression_failure(30),           handshake_failure(40),           no_certificate_RESERVED(41),           bad_certificate(42),           unsupported_certificate(43),           certificate_revoked(44),           certificate_expired(45),           certificate_unknown(46),           illegal_parameter(47),           unknown_ca(48),           access_denied(49),           decode_error(50),           decrypt_error(51),    Dierks & Rescorla           Standards Track                    [Page 28]   RFC 5246                          TLS                        August 2008             export_restriction_RESERVED(60),           protocol_version(70),           insufficient_security(71),           internal_error(80),           user_canceled(90),           no_renegotiation(100),           unsupported_extension(110),           (255)       } AlertDescription;        struct {           AlertLevel level;           AlertDescription description;       } Alert;  7.2.1.  Closure Alerts     The client and the server must share knowledge that the connection is    ending in order to avoid a truncation attack.  Either party may    initiate the exchange of closing messages.     close_notify       This message notifies the recipient that the sender will not send       any more messages on this connection.  Note that as of TLS 1.1,       failure to properly close a connection no longer requires that a       session not be resumed.  This is a change from TLS 1.0 to conform       with widespread implementation practice.     Either party may initiate a close by sending a close_notify alert.    Any data received after a closure alert is ignored.     Unless some other fatal alert has been transmitted, each party is    required to send a close_notify alert before closing the write side    of the connection.  The other party MUST respond with a close_notify    alert of its own and close down the connection immediately,    discarding any pending writes.  It is not required for the initiator    of the close to wait for the responding close_notify alert before    closing the read side of the connection.     If the application protocol using TLS provides that any data may be    carried over the underlying transport after the TLS connection is    closed, the TLS implementation must receive the responding    close_notify alert before indicating to the application layer that    the TLS connection has ended.  If the application protocol will not    transfer any additional data, but will only close the underlying    transport connection, then the implementation MAY choose to close the    transport without waiting for the responding close_notify.  No part     Dierks & Rescorla           Standards Track                    [Page 29]   RFC 5246                          TLS                        August 2008      of this standard should be taken to dictate the manner in which a    usage profile for TLS manages its data transport, including when    connections are opened or closed.     Note: It is assumed that closing a connection reliably delivers    pending data before destroying the transport.  7.2.2.  Error Alerts     Error handling in the TLS Handshake protocol is very simple.  When an    error is detected, the detecting party sends a message to the other    party.  Upon transmission or receipt of a fatal alert message, both    parties immediately close the connection.  Servers and clients MUST    forget any session-identifiers, keys, and secrets associated with a    failed connection.  Thus, any connection terminated with a fatal    alert MUST NOT be resumed.     Whenever an implementation encounters a condition which is defined as    a fatal alert, it MUST send the appropriate alert prior to closing    the connection.  For all errors where an alert level is not    explicitly specified, the sending party MAY determine at its    discretion whether to treat this as a fatal error or not.  If the    implementation chooses to send an alert but intends to close the    connection immediately afterwards, it MUST send that alert at the    fatal alert level.     If an alert with a level of warning is sent and received, generally    the connection can continue normally.  If the receiving party decides    not to proceed with the connection (e.g., after having received a    no_renegotiation alert that it is not willing to accept), it SHOULD    send a fatal alert to terminate the connection.  Given this, the    sending party cannot, in general, know how the receiving party will    behave.  Therefore, warning alerts are not very useful when the    sending party wants to continue the connection, and thus are    sometimes omitted.  For example, if a peer decides to accept an    expired certificate (perhaps after confirming this with the user) and    wants to continue the connection, it would not generally send a    certificate_expired alert.     The following error alerts are defined:     unexpected_message       An inappropriate message was received.  This alert is always fatal       and should never be observed in communication between proper       implementations.       Dierks & Rescorla           Standards Track                    [Page 30]   RFC 5246                          TLS                        August 2008      bad_record_mac       This alert is returned if a record is received with an incorrect       MAC.  This alert also MUST be returned if an alert is sent because       a TLSCiphertext decrypted in an invalid way: either it wasn't an       even multiple of the block length, or its padding values, when       checked, weren't correct.  This message is always fatal and should       never be observed in communication between proper implementations       (except when messages were corrupted in the network).     decryption_failed_RESERVED       This alert was used in some earlier versions of TLS, and may have       permitted certain attacks against the CBC mode [CBCATT].  It MUST       NOT be sent by compliant implementations.     record_overflow       A TLSCiphertext record was received that had a length more than       2^14+2048 bytes, or a record decrypted to a TLSCompressed record       with more than 2^14+1024 bytes.  This message is always fatal and       should never be observed in communication between proper       implementations (except when messages were corrupted in the       network).     decompression_failure       The decompression function received improper input (e.g., data       that would expand to excessive length).  This message is always       fatal and should never be observed in communication between proper       implementations.     handshake_failure       Reception of a handshake_failure alert message indicates that the       sender was unable to negotiate an acceptable set of security       parameters given the options available.  This is a fatal error.     no_certificate_RESERVED       This alert was used in SSLv3 but not any version of TLS.  It MUST       NOT be sent by compliant implementations.     bad_certificate       A certificate was corrupt, contained signatures that did not       verify correctly, etc.     unsupported_certificate       A certificate was of an unsupported type.     certificate_revoked       A certificate was revoked by its signer.      Dierks & Rescorla           Standards Track                    [Page 31]   RFC 5246                          TLS                        August 2008      certificate_expired       A certificate has expired or is not currently valid.     certificate_unknown       Some other (unspecified) issue arose in processing the       certificate, rendering it unacceptable.     illegal_parameter       A field in the handshake was out of range or inconsistent with       other fields.  This message is always fatal.     unknown_ca       A valid certificate chain or partial chain was received, but the       certificate was not accepted because the CA certificate could not       be located or couldn't be matched with a known, trusted CA.  This       message is always fatal.     access_denied       A valid certificate was received, but when access control was       applied, the sender decided not to proceed with negotiation.  This       message is always fatal.     decode_error       A message could not be decoded because some field was out of the       specified range or the length of the message was incorrect.  This       message is always fatal and should never be observed in       communication between proper implementations (except when messages       were corrupted in the network).     decrypt_error       A handshake cryptographic operation failed, including being unable       to correctly verify a signature or validate a Finished message.       This message is always fatal.     export_restriction_RESERVED       This alert was used in some earlier versions of TLS.  It MUST NOT       be sent by compliant implementations.     protocol_version       The protocol version the client has attempted to negotiate is       recognized but not supported.  (For example, old protocol versions       might be avoided for security reasons.)  This message is always       fatal.         Dierks & Rescorla           Standards Track                    [Page 32]   RFC 5246                          TLS                        August 2008      insufficient_security       Returned instead of handshake_failure when a negotiation has       failed specifically because the server requires ciphers more       secure than those supported by the client.  This message is always       fatal.     internal_error       An internal error unrelated to the peer or the correctness of the       protocol (such as a memory allocation failure) makes it impossible       to continue.  This message is always fatal.     user_canceled       This handshake is being canceled for some reason unrelated to a       protocol failure.  If the user cancels an operation after the       handshake is complete, just closing the connection by sending a       close_notify is more appropriate.  This alert should be followed       by a close_notify.  This message is generally a warning.     no_renegotiation       Sent by the client in response to a hello request or by the server       in response to a client hello after initial handshaking.  Either       of these would normally lead to renegotiation; when that is not       appropriate, the recipient should respond with this alert.  At       that point, the original requester can decide whether to proceed       with the connection.  One case where this would be appropriate is       where a server has spawned a process to satisfy a request; the       process might receive security parameters (key length,       authentication, etc.) at startup, and it might be difficult to       communicate changes to these parameters after that point.  This       message is always a warning.     unsupported_extension       sent by clients that receive an extended server hello containing       an extension that they did not put in the corresponding client       hello.  This message is always fatal.     New Alert values are assigned by IANA as described in Section 12.  7.3.  Handshake Protocol Overview     The cryptographic parameters of the session state are produced by the    TLS Handshake Protocol, which operates on top of the TLS record    layer.  When a TLS client and server first start communicating, they    agree on a protocol version, select cryptographic algorithms,    optionally authenticate each other, and use public-key encryption    techniques to generate shared secrets.      Dierks & Rescorla           Standards Track                    [Page 33]   RFC 5246                          TLS                        August 2008      The TLS Handshake Protocol involves the following steps:     -  Exchange hello messages to agree on algorithms, exchange random       values, and check for session resumption.     -  Exchange the necessary cryptographic parameters to allow the       client and server to agree on a premaster secret.     -  Exchange certificates and cryptographic information to allow the       client and server to authenticate themselves.     -  Generate a master secret from the premaster secret and exchanged       random values.     -  Provide security parameters to the record layer.     -  Allow the client and server to verify that their peer has       calculated the same security parameters and that the handshake       occurred without tampering by an attacker.     Note that higher layers should not be overly reliant on whether TLS    always negotiates the strongest possible connection between two    peers.  There are a number of ways in which a man-in-the-middle    attacker can attempt to make two entities drop down to the least    secure method they support.  The protocol has been designed to    minimize this risk, but there are still attacks available: for    example, an attacker could block access to the port a secure service    runs on, or attempt to get the peers to negotiate an unauthenticated    connection.  The fundamental rule is that higher levels must be    cognizant of what their security requirements are and never transmit    information over a channel less secure than what they require.  The    TLS protocol is secure in that any cipher suite offers its promised    level of security: if you negotiate 3DES with a 1024-bit RSA key    exchange with a host whose certificate you have verified, you can    expect to be that secure.     These goals are achieved by the handshake protocol, which can be    summarized as follows: The client sends a ClientHello message to    which the server must respond with a ServerHello message, or else a    fatal error will occur and the connection will fail.  The ClientHello    and ServerHello are used to establish security enhancement    capabilities between client and server.  The ClientHello and    ServerHello establish the following attributes: Protocol Version,    Session ID, Cipher Suite, and Compression Method.  Additionally, two    random values are generated and exchanged: ClientHello.random and    ServerHello.random.      Dierks & Rescorla           Standards Track                    [Page 34]   RFC 5246                          TLS                        August 2008      The actual key exchange uses up to four messages: the server    Certificate, the ServerKeyExchange, the client Certificate, and the    ClientKeyExchange.  New key exchange methods can be created by    specifying a format for these messages and by defining the use of the    messages to allow the client and server to agree upon a shared    secret.  This secret MUST be quite long; currently defined key    exchange methods exchange secrets that range from 46 bytes upwards.     Following the hello messages, the server will send its certificate in    a Certificate message if it is to be authenticated.  Additionally, a    ServerKeyExchange message may be sent, if it is required (e.g., if    the server has no certificate, or if its certificate is for signing    only).  If the server is authenticated, it may request a certificate    from the client, if that is appropriate to the cipher suite selected.    Next, the server will send the ServerHelloDone message, indicating    that the hello-message phase of the handshake is complete.  The    server will then wait for a client response.  If the server has sent    a CertificateRequest message, the client MUST send the Certificate    message.  The ClientKeyExchange message is now sent, and the content    of that message will depend on the public key algorithm selected    between the ClientHello and the ServerHello.  If the client has sent    a certificate with signing ability, a digitally-signed    CertificateVerify message is sent to explicitly verify possession of    the private key in the certificate.     At this point, a ChangeCipherSpec message is sent by the client, and    the client copies the pending Cipher Spec into the current Cipher    Spec.  The client then immediately sends the Finished message under    the new algorithms, keys, and secrets.  In response, the server will    send its own ChangeCipherSpec message, transfer the pending to the    current Cipher Spec, and send its Finished message under the new    Cipher Spec.  At this point, the handshake is complete, and the    client and server may begin to exchange application layer data.  (See    flow chart below.)  Application data MUST NOT be sent prior to the    completion of the first handshake (before a cipher suite other than    TLS_NULL_WITH_NULL_NULL is established).                Dierks & Rescorla           Standards Track                    [Page 35]   RFC 5246                          TLS                        August 2008         Client                                               Server        ClientHello                  -------->                                                       ServerHello                                                      Certificate*                                                ServerKeyExchange*                                               CertificateRequest*                                    <--------      ServerHelloDone       Certificate*       ClientKeyExchange       CertificateVerify*       [ChangeCipherSpec]       Finished                     -------->                                                [ChangeCipherSpec]                                    <--------             Finished       Application Data             <------->     Application Data               Figure 1.  Message flow for a full handshake     * Indicates optional or situation-dependent messages that are not    always sent.     Note: To help avoid pipeline stalls, ChangeCipherSpec is an    independent TLS protocol content type, and is not actually a TLS    handshake message.     When the client and server decide to resume a previous session or    duplicate an existing session (instead of negotiating new security    parameters), the message flow is as follows:     The client sends a ClientHello using the Session ID of the session to    be resumed.  The server then checks its session cache for a match.    If a match is found, and the server is willing to re-establish the    connection under the specified session state, it will send a    ServerHello with the same Session ID value.  At this point, both    client and server MUST send ChangeCipherSpec messages and proceed    directly to Finished messages.  Once the re-establishment is    complete, the client and server MAY begin to exchange application    layer data.  (See flow chart below.)  If a Session ID match is not    found, the server generates a new session ID, and the TLS client and    server perform a full handshake.           Dierks & Rescorla           Standards Track                    [Page 36]   RFC 5246                          TLS                        August 2008         Client                                                Server        ClientHello                   -------->                                                        ServerHello                                                 [ChangeCipherSpec]                                     <--------             Finished       [ChangeCipherSpec]       Finished                      -------->       Application Data              <------->     Application Data            Figure 2.  Message flow for an abbreviated handshake     The contents and significance of each message will be presented in    detail in the following sections.  7.4.  Handshake Protocol     The TLS Handshake Protocol is one of the defined higher-level clients    of the TLS Record Protocol.  This protocol is used to negotiate the    secure attributes of a session.  Handshake messages are supplied to    the TLS record layer, where they are encapsulated within one or more    TLSPlaintext structures, which are processed and transmitted as    specified by the current active session state.        enum {           hello_request(0), client_hello(1), server_hello(2),           certificate(11), server_key_exchange (12),           certificate_request(13), server_hello_done(14),           certificate_verify(15), client_key_exchange(16),           finished(20), (255)       } HandshakeType;        struct {           HandshakeType msg_type;    /* handshake type */           uint24 length;             /* bytes in message */           select (HandshakeType) {               case hello_request:       HelloRequest;               case client_hello:        ClientHello;               case server_hello:        ServerHello;               case certificate:         Certificate;               case server_key_exchange: ServerKeyExchange;               case certificate_request: CertificateRequest;               case server_hello_done:   ServerHelloDone;               case certificate_verify:  CertificateVerify;               case client_key_exchange: ClientKeyExchange;               case finished:            Finished;           } body;       } Handshake;    Dierks & Rescorla           Standards Track                    [Page 37]   RFC 5246                          TLS                        August 2008      The handshake protocol messages are presented below in the order they    MUST be sent; sending handshake messages in an unexpected order    results in a fatal error.  Unneeded handshake messages can be    omitted, however.  Note one exception to the ordering: the    Certificate message is used twice in the handshake (from server to    client, then from client to server), but described only in its first    position.  The one message that is not bound by these ordering rules    is the HelloRequest message, which can be sent at any time, but which    SHOULD be ignored by the client if it arrives in the middle of a    handshake.     New handshake message types are assigned by IANA as described in    Section 12.  7.4.1.  Hello Messages     The hello phase messages are used to exchange security enhancement    capabilities between the client and server.  When a new session    begins, the record layer's connection state encryption, hash, and    compression algorithms are initialized to null.  The current    connection state is used for renegotiation messages.  7.4.1.1.  Hello Request     When this message will be sent:        The HelloRequest message MAY be sent by the server at any time.     Meaning of this message:        HelloRequest is a simple notification that the client should begin       the negotiation process anew.  In response, the client should send       a ClientHello message when convenient.  This message is not       intended to establish which side is the client or server but       merely to initiate a new negotiation.  Servers SHOULD NOT send a       HelloRequest immediately upon the client's initial connection.  It       is the client's job to send a ClientHello at that time.        This message will be ignored by the client if the client is       currently negotiating a session.  This message MAY be ignored by       the client if it does not wish to renegotiate a session, or the       client may, if it wishes, respond with a no_renegotiation alert.       Since handshake messages are intended to have transmission       precedence over application data, it is expected that the       negotiation will begin before no more than a few records are       received from the client.  If the server sends a HelloRequest but       does not receive a ClientHello in response, it may close the       connection with a fatal alert.    Dierks & Rescorla           Standards Track                    [Page 38]   RFC 5246                          TLS                        August 2008         After sending a HelloRequest, servers SHOULD NOT repeat the       request until the subsequent handshake negotiation is complete.     Structure of this message:        struct { } HelloRequest;     This message MUST NOT be included in the message hashes that are    maintained throughout the handshake and used in the Finished messages    and the certificate verify message.  7.4.1.2.  Client Hello     When this message will be sent:        When a client first connects to a server, it is required to send       the ClientHello as its first message.  The client can also send a       ClientHello in response to a HelloRequest or on its own initiative       in order to renegotiate the security parameters in an existing       connection.     Structure of this message:        The ClientHello message includes a random structure, which is used       later in the protocol.           struct {              uint32 gmt_unix_time;              opaque random_bytes[28];          } Random;        gmt_unix_time          The current time and date in standard UNIX 32-bit format          (seconds since the midnight starting Jan 1, 1970, UTC, ignoring          leap seconds) according to the sender's internal clock.  Clocks          are not required to be set correctly by the basic TLS protocol;          higher-level or application protocols may define additional          requirements.  Note that, for historical reasons, the data          element is named using GMT, the predecessor of the current          worldwide time base, UTC.        random_bytes          28 bytes generated by a secure random number generator.     The ClientHello message includes a variable-length session    identifier.  If not empty, the value identifies a session between the    same client and server whose security parameters the client wishes to    reuse.  The session identifier MAY be from an earlier connection,    Dierks & Rescorla           Standards Track                    [Page 39]   RFC 5246                          TLS                        August 2008      this connection, or from another currently active connection.  The    second option is useful if the client only wishes to update the    random structures and derived values of a connection, and the third    option makes it possible to establish several independent secure    connections without repeating the full handshake protocol.  These    independent connections may occur sequentially or simultaneously; a    SessionID becomes valid when the handshake negotiating it completes    with the exchange of Finished messages and persists until it is    removed due to aging or because a fatal error was encountered on a    connection associated with the session.  The actual contents of the    SessionID are defined by the server.        opaque SessionID<0..32>;     Warning: Because the SessionID is transmitted without encryption or    immediate MAC protection, servers MUST NOT place confidential    information in session identifiers or let the contents of fake    session identifiers cause any breach of security.  (Note that the    content of the handshake as a whole, including the SessionID, is    protected by the Finished messages exchanged at the end of the    handshake.)     The cipher suite list, passed from the client to the server in the    ClientHello message, contains the combinations of cryptographic    algorithms supported by the client in order of the client's    preference (favorite choice first).  Each cipher suite defines a key    exchange algorithm, a bulk encryption algorithm (including secret key    length), a MAC algorithm, and a PRF.  The server will select a cipher    suite or, if no acceptable choices are presented, return a handshake    failure alert and close the connection.  If the list contains cipher    suites the server does not recognize, support, or wish to use, the    server MUST ignore those cipher suites, and process the remaining    ones as usual.        uint8 CipherSuite[2];    /* Cryptographic suite selector */     The ClientHello includes a list of compression algorithms supported    by the client, ordered according to the client's preference.        enum { null(0), (255) } CompressionMethod;            Dierks & Rescorla           Standards Track                    [Page 40]   RFC 5246                          TLS                        August 2008         struct {           ProtocolVersion client_version;           Random random;           SessionID session_id;           CipherSuite cipher_suites<2..2^16-2>;           CompressionMethod compression_methods<1..2^8-1>;           select (extensions_present) {               case false:                   struct {};               case true:                   Extension extensions<0..2^16-1>;           };       } ClientHello;     TLS allows extensions to follow the compression_methods field in an    extensions block.  The presence of extensions can be detected by    determining whether there are bytes following the compression_methods    at the end of the ClientHello.  Note that this method of detecting    optional data differs from the normal TLS method of having a    variable-length field, but it is used for compatibility with TLS    before extensions were defined.     client_version       The version of the TLS protocol by which the client wishes to       communicate during this session.  This SHOULD be the latest       (highest valued) version supported by the client.  For this       version of the specification, the version will be 3.3 (see       Appendix E for details about backward compatibility).     random       A client-generated random structure.     session_id       The ID of a session the client wishes to use for this connection.       This field is empty if no session_id is available, or if the       client wishes to generate new security parameters.     cipher_suites       This is a list of the cryptographic options supported by the       client, with the client's first preference first.  If the       session_id field is not empty (implying a session resumption       request), this vector MUST include at least the cipher_suite from       that session.  Values are defined in Appendix A.5.     compression_methods       This is a list of the compression methods supported by the client,       sorted by client preference.  If the session_id field is not empty       (implying a session resumption request), it MUST include the    Dierks & Rescorla           Standards Track                    [Page 41]   RFC 5246                          TLS                        August 2008         compression_method from that session.  This vector MUST contain,       and all implementations MUST support, CompressionMethod.null.       Thus, a client and server will always be able to agree on a       compression method.     extensions       Clients MAY request extended functionality from servers by sending       data in the extensions field.  The actual ""Extension"" format is       defined in Section 7.4.1.4.     In the event that a client requests additional functionality using    extensions, and this functionality is not supplied by the server, the    client MAY abort the handshake.  A server MUST accept ClientHello    messages both with and without the extensions field, and (as for all    other messages) it MUST check that the amount of data in the message    precisely matches one of these formats; if not, then it MUST send a    fatal ""decode_error"" alert.     After sending the ClientHello message, the client waits for a    ServerHello message.  Any handshake message returned by the server,    except for a HelloRequest, is treated as a fatal error.  7.4.1.3.  Server Hello     When this message will be sent:        The server will send this message in response to a ClientHello       message when it was able to find an acceptable set of algorithms.       If it cannot find such a match, it will respond with a handshake       failure alert.     Structure of this message:        struct {           ProtocolVersion server_version;           Random random;           SessionID session_id;           CipherSuite cipher_suite;           CompressionMethod compression_method;           select (extensions_present) {               case false:                   struct {};               case true:                   Extension extensions<0..2^16-1>;           };       } ServerHello;      Dierks & Rescorla           Standards Track                    [Page 42]   RFC 5246                          TLS                        August 2008      The presence of extensions can be detected by determining whether    there are bytes following the compression_method field at the end of    the ServerHello.     server_version       This field will contain the lower of that suggested by the client       in the client hello and the highest supported by the server.  For       this version of the specification, the version is 3.3.  (See       Appendix E for details about backward compatibility.)     random       This structure is generated by the server and MUST be       independently generated from the ClientHello.random.     session_id       This is the identity of the session corresponding to this       connection.  If the ClientHello.session_id was non-empty, the       server will look in its session cache for a match.  If a match is       found and the server is willing to establish the new connection       using the specified session state, the server will respond with       the same value as was supplied by the client.  This indicates a       resumed session and dictates that the parties must proceed       directly to the Finished messages.  Otherwise, this field will       contain a different value identifying the new session.  The server       may return an empty session_id to indicate that the session will       not be cached and therefore cannot be resumed.  If a session is       resumed, it must be resumed using the same cipher suite it was       originally negotiated with.  Note that there is no requirement       that the server resume any session even if it had formerly       provided a session_id.  Clients MUST be prepared to do a full       negotiation -- including negotiating new cipher suites -- during       any handshake.     cipher_suite       The single cipher suite selected by the server from the list in       ClientHello.cipher_suites.  For resumed sessions, this field is       the value from the state of the session being resumed.     compression_method       The single compression algorithm selected by the server from the       list in ClientHello.compression_methods.  For resumed sessions,       this field is the value from the resumed session state.     extensions       A list of extensions.  Note that only extensions offered by the       client can appear in the server's list.      Dierks & Rescorla           Standards Track                    [Page 43]   RFC 5246                          TLS                        August 2008   7.4.1.4.  Hello Extensions     The extension format is:        struct {           ExtensionType extension_type;           opaque extension_data<0..2^16-1>;       } Extension;        enum {           signature_algorithms(13), (65535)       } ExtensionType;     Here:     -  ""extension_type"" identifies the particular extension type.     -  ""extension_data"" contains information specific to the particular       extension type.     The initial set of extensions is defined in a companion document    [TLSEXT].  The list of extension types is maintained by IANA as    described in Section 12.     An extension type MUST NOT appear in the ServerHello unless the same    extension type appeared in the corresponding ClientHello.  If a    client receives an extension type in ServerHello that it did not    request in the associated ClientHello, it MUST abort the handshake    with an unsupported_extension fatal alert.     Nonetheless, ""server-oriented"" extensions may be provided in the    future within this framework.  Such an extension (say, of type x)    would require the client to first send an extension of type x in a    ClientHello with empty extension_data to indicate that it supports    the extension type.  In this case, the client is offering the    capability to understand the extension type, and the server is taking    the client up on its offer.     When multiple extensions of different types are present in the    ClientHello or ServerHello messages, the extensions MAY appear in any    order.  There MUST NOT be more than one extension of the same type.     Finally, note that extensions can be sent both when starting a new    session and when requesting session resumption.  Indeed, a client    that requests session resumption does not in general know whether the    server will accept this request, and therefore it SHOULD send the    same extensions as it would send if it were not attempting    resumption.    Dierks & Rescorla           Standards Track                    [Page 44]   RFC 5246                          TLS                        August 2008      In general, the specification of each extension type needs to    describe the effect of the extension both during full handshake and    session resumption.  Most current TLS extensions are relevant only    when a session is initiated: when an older session is resumed, the    server does not process these extensions in Client Hello, and does    not include them in Server Hello.  However, some extensions may    specify different behavior during session resumption.     There are subtle (and not so subtle) interactions that may occur in    this protocol between new features and existing features which may    result in a significant reduction in overall security.  The following    considerations should be taken into account when designing new    extensions:     -  Some cases where a server does not agree to an extension are error       conditions, and some are simply refusals to support particular       features.  In general, error alerts should be used for the former,       and a field in the server extension response for the latter.     -  Extensions should, as far as possible, be designed to prevent any       attack that forces use (or non-use) of a particular feature by       manipulation of handshake messages.  This principle should be       followed regardless of whether the feature is believed to cause a       security problem.        Often the fact that the extension fields are included in the       inputs to the Finished message hashes will be sufficient, but       extreme care is needed when the extension changes the meaning of       messages sent in the handshake phase.  Designers and implementors       should be aware of the fact that until the handshake has been       authenticated, active attackers can modify messages and insert,       remove, or replace extensions.     -  It would be technically possible to use extensions to change major       aspects of the design of TLS; for example the design of cipher       suite negotiation.  This is not recommended; it would be more       appropriate to define a new version of TLS -- particularly since       the TLS handshake algorithms have specific protection against       version rollback attacks based on the version number, and the       possibility of version rollback should be a significant       consideration in any major design change.  7.4.1.4.1.  Signature Algorithms     The client uses the ""signature_algorithms"" extension to indicate to    the server which signature/hash algorithm pairs may be used in    digital signatures.  The ""extension_data"" field of this extension    contains a ""supported_signature_algorithms"" value.    Dierks & Rescorla           Standards Track                    [Page 45]   RFC 5246                          TLS                        August 2008         enum {           none(0), md5(1), sha1(2), sha224(3), sha256(4), sha384(5),           sha512(6), (255)       } HashAlgorithm;        enum { anonymous(0), rsa(1), dsa(2), ecdsa(3), (255) }         SignatureAlgorithm;        struct {             HashAlgorithm hash;             SignatureAlgorithm signature;       } SignatureAndHashAlgorithm;        SignatureAndHashAlgorithm         supported_signature_algorithms<2..2^16-2>;     Each SignatureAndHashAlgorithm value lists a single hash/signature    pair that the client is willing to verify.  The values are indicated    in descending order of preference.     Note: Because not all signature algorithms and hash algorithms may be    accepted by an implementation (e.g., DSA with SHA-1, but not    SHA-256), algorithms here are listed in pairs.     hash       This field indicates the hash algorithm which may be used.  The       values indicate support for unhashed data, MD5 [MD5], SHA-1,       SHA-224, SHA-256, SHA-384, and SHA-512 [SHS], respectively.  The       ""none"" value is provided for future extensibility, in case of a       signature algorithm which does not require hashing before signing.     signature       This field indicates the signature algorithm that may be used.       The values indicate anonymous signatures, RSASSA-PKCS1-v1_5       [PKCS1] and DSA [DSS], and ECDSA [ECDSA], respectively.  The       ""anonymous"" value is meaningless in this context but used in       Section 7.4.3.  It MUST NOT appear in this extension.     The semantics of this extension are somewhat complicated because the    cipher suite indicates permissible signature algorithms but not hash    algorithms.  Sections 7.4.2 and 7.4.3 describe the appropriate rules.     If the client supports only the default hash and signature algorithms    (listed in this section), it MAY omit the signature_algorithms    extension.  If the client does not support the default algorithms, or    supports other hash and signature algorithms (and it is willing to    use them for verifying messages sent by the server, i.e., server    certificates and server key exchange), it MUST send the    Dierks & Rescorla           Standards Track                    [Page 46]   RFC 5246                          TLS                        August 2008      signature_algorithms extension, listing the algorithms it is willing    to accept.     If the client does not send the signature_algorithms extension, the    server MUST do the following:     -  If the negotiated key exchange algorithm is one of (RSA, DHE_RSA,       DH_RSA, RSA_PSK, ECDH_RSA, ECDHE_RSA), behave as if client had       sent the value {sha1,rsa}.     -  If the negotiated key exchange algorithm is one of (DHE_DSS,       DH_DSS), behave as if the client had sent the value {sha1,dsa}.     -  If the negotiated key exchange algorithm is one of (ECDH_ECDSA,       ECDHE_ECDSA), behave as if the client had sent value {sha1,ecdsa}.     Note: this is a change from TLS 1.1 where there are no explicit    rules, but as a practical matter one can assume that the peer    supports MD5 and SHA-1.     Note: this extension is not meaningful for TLS versions prior to 1.2.    Clients MUST NOT offer it if they are offering prior versions.    However, even if clients do offer it, the rules specified in [TLSEXT]    require servers to ignore extensions they do not understand.     Servers MUST NOT send this extension.  TLS servers MUST support    receiving this extension.     When performing session resumption, this extension is not included in    Server Hello, and the server ignores the extension in Client Hello    (if present).  7.4.2.  Server Certificate     When this message will be sent:        The server MUST send a Certificate message whenever the agreed-       upon key exchange method uses certificates for authentication       (this includes all key exchange methods defined in this document       except DH_anon).  This message will always immediately follow the       ServerHello message.     Meaning of this message:        This message conveys the server's certificate chain to the client.        The certificate MUST be appropriate for the negotiated cipher       suite's key exchange algorithm and any negotiated extensions.    Dierks & Rescorla           Standards Track                    [Page 47]   RFC 5246                          TLS                        August 2008      Structure of this message:        opaque ASN.1Cert<1..2^24-1>;        struct {           ASN.1Cert certificate_list<0..2^24-1>;       } Certificate;     certificate_list       This is a sequence (chain) of certificates.  The sender's       certificate MUST come first in the list.  Each following       certificate MUST directly certify the one preceding it.  Because       certificate validation requires that root keys be distributed       independently, the self-signed certificate that specifies the root       certificate authority MAY be omitted from the chain, under the       assumption that the remote end must already possess it in order to       validate it in any case.     The same message type and structure will be used for the client's    response to a certificate request message.  Note that a client MAY    send no certificates if it does not have an appropriate certificate    to send in response to the server's authentication request.     Note: PKCS #7 [PKCS7] is not used as the format for the certificate    vector because PKCS #6 [PKCS6] extended certificates are not used.    Also, PKCS #7 defines a SET rather than a SEQUENCE, making the task    of parsing the list more difficult.     The following rules apply to the certificates sent by the server:     -  The certificate type MUST be X.509v3, unless explicitly negotiated       otherwise (e.g., [TLSPGP]).     -  The end entity certificate's public key (and associated       restrictions) MUST be compatible with the selected key exchange       algorithm.        Key Exchange Alg.  Certificate Key Type        RSA                RSA public key; the certificate MUST allow the       RSA_PSK            key to be used for encryption (the                          keyEncipherment bit MUST be set if the key                          usage extension is present).                          Note: RSA_PSK is defined in [TLSPSK].        Dierks & Rescorla           Standards Track                    [Page 48]   RFC 5246                          TLS                        August 2008         DHE_RSA            RSA public key; the certificate MUST allow the       ECDHE_RSA          key to be used for signing (the                          digitalSignature bit MUST be set if the key                          usage extension is present) with the signature                          scheme and hash algorithm that will be employed                          in the server key exchange message.                          Note: ECDHE_RSA is defined in [TLSECC].        DHE_DSS            DSA public key; the certificate MUST allow the                          key to be used for signing with the hash                          algorithm that will be employed in the server                          key exchange message.        DH_DSS             Diffie-Hellman public key; the keyAgreement bit       DH_RSA             MUST be set if the key usage extension is                          present.        ECDH_ECDSA         ECDH-capable public key; the public key MUST       ECDH_RSA           use a curve and point format supported by the                          client, as described in [TLSECC].        ECDHE_ECDSA        ECDSA-capable public key; the certificate MUST                          allow the key to be used for signing with the                          hash algorithm that will be employed in the                          server key exchange message.  The public key                          MUST use a curve and point format supported by                          the client, as described in  [TLSECC].     -  The ""server_name"" and ""trusted_ca_keys"" extensions [TLSEXT] are       used to guide certificate selection.     If the client provided a ""signature_algorithms"" extension, then all    certificates provided by the server MUST be signed by a    hash/signature algorithm pair that appears in that extension.  Note    that this implies that a certificate containing a key for one    signature algorithm MAY be signed using a different signature    algorithm (for instance, an RSA key signed with a DSA key).  This is    a departure from TLS 1.1, which required that the algorithms be the    same.  Note that this also implies that the DH_DSS, DH_RSA,    ECDH_ECDSA, and ECDH_RSA key exchange algorithms do not restrict the    algorithm used to sign the certificate.  Fixed DH certificates MAY be    signed with any hash/signature algorithm pair appearing in the    extension.  The names DH_DSS, DH_RSA, ECDH_ECDSA, and ECDH_RSA are    historical.        Dierks & Rescorla           Standards Track                    [Page 49]   RFC 5246                          TLS                        August 2008      If the server has multiple certificates, it chooses one of them based    on the above-mentioned criteria (in addition to other criteria, such    as transport layer endpoint, local configuration and preferences,    etc.).  If the server has a single certificate, it SHOULD attempt to    validate that it meets these criteria.     Note that there are certificates that use algorithms and/or algorithm    combinations that cannot be currently used with TLS.  For example, a    certificate with RSASSA-PSS signature key (id-RSASSA-PSS OID in    SubjectPublicKeyInfo) cannot be used because TLS defines no    corresponding signature algorithm.     As cipher suites that specify new key exchange methods are specified    for the TLS protocol, they will imply the certificate format and the    required encoded keying information.  7.4.3.  Server Key Exchange Message     When this message will be sent:        This message will be sent immediately after the server Certificate       message (or the ServerHello message, if this is an anonymous       negotiation).        The ServerKeyExchange message is sent by the server only when the       server Certificate message (if sent) does not contain enough data       to allow the client to exchange a premaster secret.  This is true       for the following key exchange methods:           DHE_DSS          DHE_RSA          DH_anon        It is not legal to send the ServerKeyExchange message for the       following key exchange methods:           RSA          DH_DSS          DH_RSA        Other key exchange algorithms, such as those defined in [TLSECC],       MUST specify whether the ServerKeyExchange message is sent or not;       and if the message is sent, its contents.         Dierks & Rescorla           Standards Track                    [Page 50]   RFC 5246                          TLS                        August 2008      Meaning of this message:        This message conveys cryptographic information to allow the client       to communicate the premaster secret: a Diffie-Hellman public key       with which the client can complete a key exchange (with the result       being the premaster secret) or a public key for some other       algorithm.     Structure of this message:        enum { dhe_dss, dhe_rsa, dh_anon, rsa, dh_dss, dh_rsa             /* may be extended, e.g., for ECDH -- see [TLSECC] */            } KeyExchangeAlgorithm;        struct {           opaque dh_p<1..2^16-1>;           opaque dh_g<1..2^16-1>;           opaque dh_Ys<1..2^16-1>;       } ServerDHParams;     /* Ephemeral DH parameters */        dh_p          The prime modulus used for the Diffie-Hellman operation.        dh_g          The generator used for the Diffie-Hellman operation.        dh_Ys          The server's Diffie-Hellman public value (g^X mod p).                        Dierks & Rescorla           Standards Track                    [Page 51]   RFC 5246                          TLS                        August 2008         struct {           select (KeyExchangeAlgorithm) {               case dh_anon:                   ServerDHParams params;               case dhe_dss:               case dhe_rsa:                   ServerDHParams params;                   digitally-signed struct {                       opaque client_random[32];                       opaque server_random[32];                       ServerDHParams params;                   } signed_params;               case rsa:               case dh_dss:               case dh_rsa:                   struct {} ;                  /* message is omitted for rsa, dh_dss, and dh_rsa */               /* may be extended, e.g., for ECDH -- see [TLSECC] */           };       } ServerKeyExchange;        params          The server's key exchange parameters.        signed_params          For non-anonymous key exchanges, a signature over the server's          key exchange parameters.     If the client has offered the ""signature_algorithms"" extension, the    signature algorithm and hash algorithm MUST be a pair listed in that    extension.  Note that there is a possibility for inconsistencies    here.  For instance, the client might offer DHE_DSS key exchange but    omit any DSA pairs from its ""signature_algorithms"" extension.  In    order to negotiate correctly, the server MUST check any candidate    cipher suites against the ""signature_algorithms"" extension before    selecting them.  This is somewhat inelegant but is a compromise    designed to minimize changes to the original cipher suite design.     In addition, the hash and signature algorithms MUST be compatible    with the key in the server's end-entity certificate.  RSA keys MAY be    used with any permitted hash algorithm, subject to restrictions in    the certificate, if any.     Because DSA signatures do not contain any secure indication of hash    algorithm, there is a risk of hash substitution if multiple hashes    may be used with any key.  Currently, DSA [DSS] may only be used with    SHA-1.  Future revisions of DSS [DSS-3] are expected to allow the use    of other digest algorithms with DSA, as well as guidance as to which    Dierks & Rescorla           Standards Track                    [Page 52]   RFC 5246                          TLS                        August 2008      digest algorithms should be used with each key size.  In addition,    future revisions of [PKIX] may specify mechanisms for certificates to    indicate which digest algorithms are to be used with DSA.     As additional cipher suites are defined for TLS that include new key    exchange algorithms, the server key exchange message will be sent if    and only if the certificate type associated with the key exchange    algorithm does not provide enough information for the client to    exchange a premaster secret.  7.4.4.  Certificate Request     When this message will be sent:         A non-anonymous server can optionally request a certificate from        the client, if appropriate for the selected cipher suite.  This        message, if sent, will immediately follow the ServerKeyExchange        message (if it is sent; otherwise, this message follows the        server's Certificate message).     Structure of this message:        enum {           rsa_sign(1), dss_sign(2), rsa_fixed_dh(3), dss_fixed_dh(4),           rsa_ephemeral_dh_RESERVED(5), dss_ephemeral_dh_RESERVED(6),           fortezza_dms_RESERVED(20), (255)       } ClientCertificateType;        opaque DistinguishedName<1..2^16-1>;        struct {           ClientCertificateType certificate_types<1..2^8-1>;           SignatureAndHashAlgorithm             supported_signature_algorithms<2^16-1>;           DistinguishedName certificate_authorities<0..2^16-1>;       } CertificateRequest;     certificate_types       A list of the types of certificate types that the client may       offer.           rsa_sign        a certificate containing an RSA key          dss_sign        a certificate containing a DSA key          rsa_fixed_dh    a certificate containing a static DH key.          dss_fixed_dh    a certificate containing a static DH key       Dierks & Rescorla           Standards Track                    [Page 53]   RFC 5246                          TLS                        August 2008      supported_signature_algorithms       A list of the hash/signature algorithm pairs that the server is       able to verify, listed in descending order of preference.     certificate_authorities       A list of the distinguished names [X501] of acceptable       certificate_authorities, represented in DER-encoded format.  These       distinguished names may specify a desired distinguished name for a       root CA or for a subordinate CA; thus, this message can be used to       describe known roots as well as a desired authorization space.  If       the certificate_authorities list is empty, then the client MAY       send any certificate of the appropriate ClientCertificateType,       unless there is some external arrangement to the contrary.     The interaction of the certificate_types and    supported_signature_algorithms fields is somewhat complicated.    certificate_types has been present in TLS since SSLv3, but was    somewhat underspecified.  Much of its functionality is superseded by    supported_signature_algorithms.  The following rules apply:     -  Any certificates provided by the client MUST be signed using a       hash/signature algorithm pair found in       supported_signature_algorithms.     -  The end-entity certificate provided by the client MUST contain a       key that is compatible with certificate_types.  If the key is a       signature key, it MUST be usable with some hash/signature       algorithm pair in supported_signature_algorithms.     -  For historical reasons, the names of some client certificate types       include the algorithm used to sign the certificate.  For example,       in earlier versions of TLS, rsa_fixed_dh meant a certificate       signed with RSA and containing a static DH key.  In TLS 1.2, this       functionality has been obsoleted by the       supported_signature_algorithms, and the certificate type no longer       restricts the algorithm used to sign the certificate.  For       example, if the server sends dss_fixed_dh certificate type and       {{sha1, dsa}, {sha1, rsa}} signature types, the client MAY reply       with a certificate containing a static DH key, signed with RSA-       SHA1.     New ClientCertificateType values are assigned by IANA as described in    Section 12.     Note: Values listed as RESERVED may not be used.  They were used in    SSLv3.      Dierks & Rescorla           Standards Track                    [Page 54]   RFC 5246                          TLS                        August 2008      Note: It is a fatal handshake_failure alert for an anonymous server    to request client authentication.  7.4.5.  Server Hello Done     When this message will be sent:        The ServerHelloDone message is sent by the server to indicate the       end of the ServerHello and associated messages.  After sending       this message, the server will wait for a client response.     Meaning of this message:        This message means that the server is done sending messages to       support the key exchange, and the client can proceed with its       phase of the key exchange.        Upon receipt of the ServerHelloDone message, the client SHOULD       verify that the server provided a valid certificate, if required,       and check that the server hello parameters are acceptable.     Structure of this message:        struct { } ServerHelloDone;  7.4.6.  Client Certificate     When this message will be sent:        This is the first message the client can send after receiving a       ServerHelloDone message.  This message is only sent if the server       requests a certificate.  If no suitable certificate is available,       the client MUST send a certificate message containing no       certificates.  That is, the certificate_list structure has a       length of zero.  If the client does not send any certificates, the       server MAY at its discretion either continue the handshake without       client authentication, or respond with a fatal handshake_failure       alert.  Also, if some aspect of the certificate chain was       unacceptable (e.g., it was not signed by a known, trusted CA), the       server MAY at its discretion either continue the handshake       (considering the client unauthenticated) or send a fatal alert.        Client certificates are sent using the Certificate structure       defined in Section 7.4.2.        Dierks & Rescorla           Standards Track                    [Page 55]   RFC 5246                          TLS                        August 2008      Meaning of this message:        This message conveys the client's certificate chain to the server;       the server will use it when verifying the CertificateVerify       message (when the client authentication is based on signing) or       calculating the premaster secret (for non-ephemeral Diffie-       Hellman).  The certificate MUST be appropriate for the negotiated       cipher suite's key exchange algorithm, and any negotiated       extensions.     In particular:     -  The certificate type MUST be X.509v3, unless explicitly negotiated       otherwise (e.g., [TLSPGP]).     -  The end-entity certificate's public key (and associated       restrictions) has to be compatible with the certificate types       listed in CertificateRequest:        Client Cert. Type   Certificate Key Type        rsa_sign            RSA public key; the certificate MUST allow the                           key to be used for signing with the signature                           scheme and hash algorithm that will be                           employed in the certificate verify message.        dss_sign            DSA public key; the certificate MUST allow the                           key to be used for signing with the hash                           algorithm that will be employed in the                           certificate verify message.        ecdsa_sign          ECDSA-capable public key; the certificate MUST                           allow the key to be used for signing with the                           hash algorithm that will be employed in the                           certificate verify message; the public key                           MUST use a curve and point format supported by                           the server.        rsa_fixed_dh        Diffie-Hellman public key; MUST use the same       dss_fixed_dh        parameters as server's key.        rsa_fixed_ecdh      ECDH-capable public key; MUST use the       ecdsa_fixed_ecdh    same curve as the server's key, and MUST use a                           point format supported by the server.     -  If the certificate_authorities list in the certificate request       message was non-empty, one of the certificates in the certificate       chain SHOULD be issued by one of the listed CAs.    Dierks & Rescorla           Standards Track                    [Page 56]   RFC 5246                          TLS                        August 2008      -  The certificates MUST be signed using an acceptable hash/       signature algorithm pair, as described in Section 7.4.4.  Note       that this relaxes the constraints on certificate-signing       algorithms found in prior versions of TLS.     Note that, as with the server certificate, there are certificates    that use algorithms/algorithm combinations that cannot be currently    used with TLS.  7.4.7.  Client Key Exchange Message     When this message will be sent:        This message is always sent by the client.  It MUST immediately       follow the client certificate message, if it is sent.  Otherwise,       it MUST be the first message sent by the client after it receives       the ServerHelloDone message.     Meaning of this message:        With this message, the premaster secret is set, either by direct       transmission of the RSA-encrypted secret or by the transmission of       Diffie-Hellman parameters that will allow each side to agree upon       the same premaster secret.        When the client is using an ephemeral Diffie-Hellman exponent,       then this message contains the client's Diffie-Hellman public       value.  If the client is sending a certificate containing a static       DH exponent (i.e., it is doing fixed_dh client authentication),       then this message MUST be sent but MUST be empty.     Structure of this message:        The choice of messages depends on which key exchange method has       been selected.  See Section 7.4.3 for the KeyExchangeAlgorithm       definition.                Dierks & Rescorla           Standards Track                    [Page 57]   RFC 5246                          TLS                        August 2008         struct {           select (KeyExchangeAlgorithm) {               case rsa:                   EncryptedPreMasterSecret;               case dhe_dss:               case dhe_rsa:               case dh_dss:               case dh_rsa:               case dh_anon:                   ClientDiffieHellmanPublic;           } exchange_keys;       } ClientKeyExchange;  7.4.7.1.  RSA-Encrypted Premaster Secret Message     Meaning of this message:        If RSA is being used for key agreement and authentication, the       client generates a 48-byte premaster secret, encrypts it using the       public key from the server's certificate, and sends the result in       an encrypted premaster secret message.  This structure is a       variant of the ClientKeyExchange message and is not a message in       itself.     Structure of this message:        struct {           ProtocolVersion client_version;           opaque random[46];       } PreMasterSecret;        client_version          The latest (newest) version supported by the client.  This is          used to detect version rollback attacks.        random          46 securely-generated random bytes.        struct {           public-key-encrypted PreMasterSecret pre_master_secret;       } EncryptedPreMasterSecret;        pre_master_secret          This random value is generated by the client and is used to          generate the master secret, as specified in Section 8.1.       Dierks & Rescorla           Standards Track                    [Page 58]   RFC 5246                          TLS                        August 2008      Note: The version number in the PreMasterSecret is the version    offered by the client in the ClientHello.client_version, not the    version negotiated for the connection.  This feature is designed to    prevent rollback attacks.  Unfortunately, some old implementations    use the negotiated version instead, and therefore checking the    version number may lead to failure to interoperate with such    incorrect client implementations.     Client implementations MUST always send the correct version number in    PreMasterSecret.  If ClientHello.client_version is TLS 1.1 or higher,    server implementations MUST check the version number as described in    the note below.  If the version number is TLS 1.0 or earlier, server    implementations SHOULD check the version number, but MAY have a    configuration option to disable the check.  Note that if the check    fails, the PreMasterSecret SHOULD be randomized as described below.     Note: Attacks discovered by Bleichenbacher [BLEI] and Klima et al.    [KPR03] can be used to attack a TLS server that reveals whether a    particular message, when decrypted, is properly PKCS#1 formatted,    contains a valid PreMasterSecret structure, or has the correct    version number.     As described by Klima [KPR03], these vulnerabilities can be avoided    by treating incorrectly formatted message blocks and/or mismatched    version numbers in a manner indistinguishable from correctly    formatted RSA blocks.  In other words:        1. Generate a string R of 46 random bytes        2. Decrypt the message to recover the plaintext M        3. If the PKCS#1 padding is not correct, or the length of message          M is not exactly 48 bytes:             pre_master_secret = ClientHello.client_version || R          else If ClientHello.client_version <= TLS 1.0, and version          number check is explicitly disabled:             pre_master_secret = M          else:             pre_master_secret = ClientHello.client_version || M[2..47]     Note that explicitly constructing the pre_master_secret with the    ClientHello.client_version produces an invalid master_secret if the    client has sent the wrong version in the original pre_master_secret.     An alternative approach is to treat a version number mismatch as a    PKCS-1 formatting error and randomize the premaster secret    completely:     Dierks & Rescorla           Standards Track                    [Page 59]   RFC 5246                          TLS                        August 2008         1. Generate a string R of 48 random bytes        2. Decrypt the message to recover the plaintext M        3. If the PKCS#1 padding is not correct, or the length of message          M is not exactly 48 bytes:             pre_master_secret = R          else If ClientHello.client_version <= TLS 1.0, and version          number check is explicitly disabled:             premaster secret = M          else If M[0..1] != ClientHello.client_version:             premaster secret = R          else:             premaster secret = M     Although no practical attacks against this construction are known,    Klima et al. [KPR03] describe some theoretical attacks, and therefore    the first construction described is RECOMMENDED.     In any case, a TLS server MUST NOT generate an alert if processing an    RSA-encrypted premaster secret message fails, or the version number    is not as expected.  Instead, it MUST continue the handshake with a    randomly generated premaster secret.  It may be useful to log the    real cause of failure for troubleshooting purposes; however, care    must be taken to avoid leaking the information to an attacker    (through, e.g., timing, log files, or other channels.)     The RSAES-OAEP encryption scheme defined in [PKCS1] is more secure    against the Bleichenbacher attack.  However, for maximal    compatibility with earlier versions of TLS, this specification uses    the RSAES-PKCS1-v1_5 scheme.  No variants of the Bleichenbacher    attack are known to exist provided that the above recommendations are    followed.     Implementation note: Public-key-encrypted data is represented as an    opaque vector <0..2^16-1> (see Section 4.7).  Thus, the RSA-encrypted    PreMasterSecret in a ClientKeyExchange is preceded by two length    bytes.  These bytes are redundant in the case of RSA because the    EncryptedPreMasterSecret is the only data in the ClientKeyExchange    and its length can therefore be unambiguously determined.  The SSLv3    specification was not clear about the encoding of public-key-    encrypted data, and therefore many SSLv3 implementations do not    include the length bytes -- they encode the RSA-encrypted data    directly in the ClientKeyExchange message.     This specification requires correct encoding of the    EncryptedPreMasterSecret complete with length bytes.  The resulting    PDU is incompatible with many SSLv3 implementations.  Implementors    Dierks & Rescorla           Standards Track                    [Page 60]   RFC 5246                          TLS                        August 2008      upgrading from SSLv3 MUST modify their implementations to generate    and accept the correct encoding.  Implementors who wish to be    compatible with both SSLv3 and TLS should make their implementation's    behavior dependent on the protocol version.     Implementation note: It is now known that remote timing-based attacks    on TLS are possible, at least when the client and server are on the    same LAN.  Accordingly, implementations that use static RSA keys MUST    use RSA blinding or some other anti-timing technique, as described in    [TIMING].  7.4.7.2.  Client Diffie-Hellman Public Value     Meaning of this message:        This structure conveys the client's Diffie-Hellman public value       (Yc) if it was not already included in the client's certificate.       The encoding used for Yc is determined by the enumerated       PublicValueEncoding.  This structure is a variant of the client       key exchange message, and not a message in itself.     Structure of this message:        enum { implicit, explicit } PublicValueEncoding;        implicit          If the client has sent a certificate which contains a suitable          Diffie-Hellman key (for fixed_dh client authentication), then          Yc is implicit and does not need to be sent again.  In this          case, the client key exchange message will be sent, but it MUST          be empty.        explicit          Yc needs to be sent.        struct {           select (PublicValueEncoding) {               case implicit: struct { };               case explicit: opaque dh_Yc<1..2^16-1>;           } dh_public;       } ClientDiffieHellmanPublic;        dh_Yc          The client's Diffie-Hellman public value (Yc).        Dierks & Rescorla           Standards Track                    [Page 61]   RFC 5246                          TLS                        August 2008   7.4.8.  Certificate Verify     When this message will be sent:        This message is used to provide explicit verification of a client       certificate.  This message is only sent following a client       certificate that has signing capability (i.e., all certificates       except those containing fixed Diffie-Hellman parameters).  When       sent, it MUST immediately follow the client key exchange message.     Structure of this message:        struct {            digitally-signed struct {                opaque handshake_messages[handshake_messages_length];            }       } CertificateVerify;        Here handshake_messages refers to all handshake messages sent or       received, starting at client hello and up to, but not including,       this message, including the type and length fields of the       handshake messages.  This is the concatenation of all the       Handshake structures (as defined in Section 7.4) exchanged thus       far.  Note that this requires both sides to either buffer the       messages or compute running hashes for all potential hash       algorithms up to the time of the CertificateVerify computation.       Servers can minimize this computation cost by offering a       restricted set of digest algorithms in the CertificateRequest       message.        The hash and signature algorithms used in the signature MUST be       one of those present in the supported_signature_algorithms field       of the CertificateRequest message.  In addition, the hash and       signature algorithms MUST be compatible with the key in the       client's end-entity certificate.  RSA keys MAY be used with any       permitted hash algorithm, subject to restrictions in the       certificate, if any.        Because DSA signatures do not contain any secure indication of       hash algorithm, there is a risk of hash substitution if multiple       hashes may be used with any key.  Currently, DSA [DSS] may only be       used with SHA-1.  Future revisions of DSS [DSS-3] are expected to       allow the use of other digest algorithms with DSA, as well as       guidance as to which digest algorithms should be used with each       key size.  In addition, future revisions of [PKIX] may specify       mechanisms for certificates to indicate which digest algorithms       are to be used with DSA.     Dierks & Rescorla           Standards Track                    [Page 62]   RFC 5246                          TLS                        August 2008   7.4.9.  Finished     When this message will be sent:        A Finished message is always sent immediately after a change       cipher spec message to verify that the key exchange and       authentication processes were successful.  It is essential that a       change cipher spec message be received between the other handshake       messages and the Finished message.     Meaning of this message:        The Finished message is the first one protected with the just       negotiated algorithms, keys, and secrets.  Recipients of Finished       messages MUST verify that the contents are correct.  Once a side       has sent its Finished message and received and validated the       Finished message from its peer, it may begin to send and receive       application data over the connection.     Structure of this message:        struct {           opaque verify_data[verify_data_length];       } Finished;        verify_data          PRF(master_secret, finished_label, Hash(handshake_messages))             [0..verify_data_length-1];        finished_label          For Finished messages sent by the client, the string          ""client finished"".  For Finished messages sent by the server,          the string ""server finished"".        Hash denotes a Hash of the handshake messages.  For the PRF       defined in Section 5, the Hash MUST be the Hash used as the basis       for the PRF.  Any cipher suite which defines a different PRF MUST       also define the Hash to use in the Finished computation.        In previous versions of TLS, the verify_data was always 12 octets       long.  In the current version of TLS, it depends on the cipher       suite.  Any cipher suite which does not explicitly specify       verify_data_length has a verify_data_length equal to 12.  This       includes all existing cipher suites.  Note that this       representation has the same encoding as with previous versions.       Future cipher suites MAY specify other lengths but such length       MUST be at least 12 bytes.     Dierks & Rescorla           Standards Track                    [Page 63]   RFC 5246                          TLS                        August 2008         handshake_messages          All of the data from all messages in this handshake (not          including any HelloRequest messages) up to, but not including,          this message.  This is only data visible at the handshake layer          and does not include record layer headers.  This is the          concatenation of all the Handshake structures as defined in          Section 7.4, exchanged thus far.     It is a fatal error if a Finished message is not preceded by a    ChangeCipherSpec message at the appropriate point in the handshake.     The value handshake_messages includes all handshake messages starting    at ClientHello up to, but not including, this Finished message.  This    may be different from handshake_messages in Section 7.4.8 because it    would include the CertificateVerify message (if sent).  Also, the    handshake_messages for the Finished message sent by the client will    be different from that for the Finished message sent by the server,    because the one that is sent second will include the prior one.     Note: ChangeCipherSpec messages, alerts, and any other record types    are not handshake messages and are not included in the hash    computations.  Also, HelloRequest messages are omitted from handshake    hashes.  8.  Cryptographic Computations     In order to begin connection protection, the TLS Record Protocol    requires specification of a suite of algorithms, a master secret, and    the client and server random values.  The authentication, encryption,    and MAC algorithms are determined by the cipher_suite selected by the    server and revealed in the ServerHello message.  The compression    algorithm is negotiated in the hello messages, and the random values    are exchanged in the hello messages.  All that remains is to    calculate the master secret.  8.1.  Computing the Master Secret     For all key exchange methods, the same algorithm is used to convert    the pre_master_secret into the master_secret.  The pre_master_secret    should be deleted from memory once the master_secret has been    computed.        master_secret = PRF(pre_master_secret, ""master secret"",                           ClientHello.random + ServerHello.random)                           [0..47];     The master secret is always exactly 48 bytes in length.  The length    of the premaster secret will vary depending on key exchange method.    Dierks & Rescorla           Standards Track                    [Page 64]   RFC 5246                          TLS                        August 2008   8.1.1.  RSA     When RSA is used for server authentication and key exchange, a 48-    byte pre_master_secret is generated by the client, encrypted under    the server's public key, and sent to the server.  The server uses its    private key to decrypt the pre_master_secret.  Both parties then    convert the pre_master_secret into the master_secret, as specified    above.  8.1.2.  Diffie-Hellman     A conventional Diffie-Hellman computation is performed.  The    negotiated key (Z) is used as the pre_master_secret, and is converted    into the master_secret, as specified above.  Leading bytes of Z that    contain all zero bits are stripped before it is used as the    pre_master_secret.     Note: Diffie-Hellman parameters are specified by the server and may    be either ephemeral or contained within the server's certificate.  9.  Mandatory Cipher Suites     In the absence of an application profile standard specifying    otherwise, a TLS-compliant application MUST implement the cipher    suite TLS_RSA_WITH_AES_128_CBC_SHA (see Appendix A.5 for the    definition).  10.  Application Data Protocol     Application data messages are carried by the record layer and are    fragmented, compressed, and encrypted based on the current connection    state.  The messages are treated as transparent data to the record    layer.  11.  Security Considerations     Security issues are discussed throughout this memo, especially in    Appendices D, E, and F.  12.  IANA Considerations     This document uses several registries that were originally created in    [TLS1.1].  IANA has updated these to reference this document.  The    registries and their allocation policies (unchanged from [TLS1.1])    are listed below.       Dierks & Rescorla           Standards Track                    [Page 65]   RFC 5246                          TLS                        August 2008      -  TLS ClientCertificateType Identifiers Registry: Future values in       the range 0-63 (decimal) inclusive are assigned via Standards       Action [RFC2434].  Values in the range 64-223 (decimal) inclusive       are assigned via Specification Required [RFC2434].  Values from       224-255 (decimal) inclusive are reserved for Private Use       [RFC2434].     -  TLS Cipher Suite Registry: Future values with the first byte in       the range 0-191 (decimal) inclusive are assigned via Standards       Action [RFC2434].  Values with the first byte in the range 192-254       (decimal) are assigned via Specification Required [RFC2434].       Values with the first byte 255 (decimal) are reserved for Private       Use [RFC2434].     -  This document defines several new HMAC-SHA256-based cipher suites,       whose values (in Appendix A.5) have been allocated from the TLS       Cipher Suite registry.     -  TLS ContentType Registry: Future values are allocated via       Standards Action [RFC2434].     -  TLS Alert Registry: Future values are allocated via Standards       Action [RFC2434].     -  TLS HandshakeType Registry: Future values are allocated via       Standards Action [RFC2434].     This document also uses a registry originally created in [RFC4366].    IANA has updated it to reference this document.  The registry and its    allocation policy (unchanged from [RFC4366]) is listed below:     -  TLS ExtensionType Registry: Future values are allocated via IETF       Consensus [RFC2434].  IANA has updated this registry to include       the signature_algorithms extension and its corresponding value       (see Section 7.4.1.4).     In addition, this document defines two new registries to be    maintained by IANA:     -  TLS SignatureAlgorithm Registry: The registry has been initially       populated with the values described in Section 7.4.1.4.1.  Future       values in the range 0-63 (decimal) inclusive are assigned via       Standards Action [RFC2434].  Values in the range 64-223 (decimal)       inclusive are assigned via Specification Required [RFC2434].       Values from 224-255 (decimal) inclusive are reserved for Private       Use [RFC2434].      Dierks & Rescorla           Standards Track                    [Page 66]   RFC 5246                          TLS                        August 2008      -  TLS HashAlgorithm Registry: The registry has been initially       populated with the values described in Section 7.4.1.4.1.  Future       values in the range 0-63 (decimal) inclusive are assigned via       Standards Action [RFC2434].  Values in the range 64-223 (decimal)       inclusive are assigned via Specification Required [RFC2434].       Values from 224-255 (decimal) inclusive are reserved for Private       Use [RFC2434].        This document also uses the TLS Compression Method Identifiers       Registry, defined in [RFC3749].  IANA has allocated value 0 for       the ""null"" compression method.                                         Dierks & Rescorla           Standards Track                    [Page 67]   RFC 5246                          TLS                        August 2008   Appendix A.  Protocol Data Structures and Constant Values     This section describes protocol types and constants.  A.1.  Record Layer     struct {        uint8 major;        uint8 minor;    } ProtocolVersion;     ProtocolVersion version = { 3, 3 };     /* TLS v1.2*/     enum {        change_cipher_spec(20), alert(21), handshake(22),        application_data(23), (255)    } ContentType;     struct {        ContentType type;        ProtocolVersion version;        uint16 length;        opaque fragment[TLSPlaintext.length];    } TLSPlaintext;     struct {        ContentType type;        ProtocolVersion version;        uint16 length;        opaque fragment[TLSCompressed.length];    } TLSCompressed;     struct {        ContentType type;        ProtocolVersion version;        uint16 length;        select (SecurityParameters.cipher_type) {            case stream: GenericStreamCipher;            case block:  GenericBlockCipher;            case aead:   GenericAEADCipher;        } fragment;    } TLSCiphertext;     stream-ciphered struct {        opaque content[TLSCompressed.length];        opaque MAC[SecurityParameters.mac_length];    } GenericStreamCipher;     Dierks & Rescorla           Standards Track                    [Page 68]   RFC 5246                          TLS                        August 2008      struct {        opaque IV[SecurityParameters.record_iv_length];        block-ciphered struct {            opaque content[TLSCompressed.length];            opaque MAC[SecurityParameters.mac_length];            uint8 padding[GenericBlockCipher.padding_length];            uint8 padding_length;        };    } GenericBlockCipher;     struct {       opaque nonce_explicit[SecurityParameters.record_iv_length];       aead-ciphered struct {           opaque content[TLSCompressed.length];       };    } GenericAEADCipher;  A.2.  Change Cipher Specs Message     struct {        enum { change_cipher_spec(1), (255) } type;    } ChangeCipherSpec;  A.3.  Alert Messages     enum { warning(1), fatal(2), (255) } AlertLevel;     enum {        close_notify(0),        unexpected_message(10),        bad_record_mac(20),        decryption_failed_RESERVED(21),        record_overflow(22),        decompression_failure(30),        handshake_failure(40),        no_certificate_RESERVED(41),        bad_certificate(42),        unsupported_certificate(43),        certificate_revoked(44),        certificate_expired(45),        certificate_unknown(46),        illegal_parameter(47),        unknown_ca(48),        access_denied(49),        decode_error(50),        decrypt_error(51),        export_restriction_RESERVED(60),        protocol_version(70),    Dierks & Rescorla           Standards Track                    [Page 69]   RFC 5246                          TLS                        August 2008          insufficient_security(71),        internal_error(80),        user_canceled(90),        no_renegotiation(100),        unsupported_extension(110),           /* new */        (255)    } AlertDescription;     struct {        AlertLevel level;        AlertDescription description;    } Alert;  A.4.  Handshake Protocol     enum {        hello_request(0), client_hello(1), server_hello(2),        certificate(11), server_key_exchange (12),        certificate_request(13), server_hello_done(14),        certificate_verify(15), client_key_exchange(16),        finished(20)        (255)    } HandshakeType;     struct {        HandshakeType msg_type;        uint24 length;        select (HandshakeType) {            case hello_request:       HelloRequest;            case client_hello:        ClientHello;            case server_hello:        ServerHello;            case certificate:         Certificate;            case server_key_exchange: ServerKeyExchange;            case certificate_request: CertificateRequest;            case server_hello_done:   ServerHelloDone;            case certificate_verify:  CertificateVerify;            case client_key_exchange: ClientKeyExchange;            case finished:            Finished;        } body;    } Handshake;            Dierks & Rescorla           Standards Track                    [Page 70]   RFC 5246                          TLS                        August 2008   A.4.1.  Hello Messages     struct { } HelloRequest;     struct {        uint32 gmt_unix_time;        opaque random_bytes[28];    } Random;     opaque SessionID<0..32>;     uint8 CipherSuite[2];     enum { null(0), (255) } CompressionMethod;     struct {        ProtocolVersion client_version;        Random random;        SessionID session_id;        CipherSuite cipher_suites<2..2^16-2>;        CompressionMethod compression_methods<1..2^8-1>;        select (extensions_present) {            case false:                struct {};            case true:                Extension extensions<0..2^16-1>;        };    } ClientHello;     struct {        ProtocolVersion server_version;        Random random;        SessionID session_id;        CipherSuite cipher_suite;        CompressionMethod compression_method;        select (extensions_present) {            case false:                struct {};            case true:                Extension extensions<0..2^16-1>;        };    } ServerHello;     struct {        ExtensionType extension_type;        opaque extension_data<0..2^16-1>;    } Extension;     Dierks & Rescorla           Standards Track                    [Page 71]   RFC 5246                          TLS                        August 2008      enum {        signature_algorithms(13), (65535)    } ExtensionType;     enum{        none(0), md5(1), sha1(2), sha224(3), sha256(4), sha384(5),        sha512(6), (255)    } HashAlgorithm;    enum {       anonymous(0), rsa(1), dsa(2), ecdsa(3), (255)    } SignatureAlgorithm;     struct {          HashAlgorithm hash;          SignatureAlgorithm signature;    } SignatureAndHashAlgorithm;     SignatureAndHashAlgorithm     supported_signature_algorithms<2..2^16-1>;  A.4.2.  Server Authentication and Key Exchange Messages     opaque ASN.1Cert<2^24-1>;     struct {        ASN.1Cert certificate_list<0..2^24-1>;    } Certificate;     enum { dhe_dss, dhe_rsa, dh_anon, rsa,dh_dss, dh_rsa           /* may be extended, e.g., for ECDH -- see [TLSECC] */         } KeyExchangeAlgorithm;     struct {        opaque dh_p<1..2^16-1>;        opaque dh_g<1..2^16-1>;        opaque dh_Ys<1..2^16-1>;    } ServerDHParams;     /* Ephemeral DH parameters */               Dierks & Rescorla           Standards Track                    [Page 72]   RFC 5246                          TLS                        August 2008      struct {        select (KeyExchangeAlgorithm) {            case dh_anon:                ServerDHParams params;            case dhe_dss:            case dhe_rsa:                ServerDHParams params;                digitally-signed struct {                    opaque client_random[32];                    opaque server_random[32];                    ServerDHParams params;                } signed_params;            case rsa:            case dh_dss:            case dh_rsa:                struct {} ;               /* message is omitted for rsa, dh_dss, and dh_rsa */            /* may be extended, e.g., for ECDH -- see [TLSECC] */    } ServerKeyExchange;     enum {        rsa_sign(1), dss_sign(2), rsa_fixed_dh(3), dss_fixed_dh(4),        rsa_ephemeral_dh_RESERVED(5), dss_ephemeral_dh_RESERVED(6),        fortezza_dms_RESERVED(20),        (255)    } ClientCertificateType;     opaque DistinguishedName<1..2^16-1>;     struct {        ClientCertificateType certificate_types<1..2^8-1>;        DistinguishedName certificate_authorities<0..2^16-1>;    } CertificateRequest;     struct { } ServerHelloDone;                 Dierks & Rescorla           Standards Track                    [Page 73]   RFC 5246                          TLS                        August 2008   A.4.3.  Client Authentication and Key Exchange Messages     struct {        select (KeyExchangeAlgorithm) {            case rsa:                EncryptedPreMasterSecret;            case dhe_dss:            case dhe_rsa:            case dh_dss:            case dh_rsa:            case dh_anon:                ClientDiffieHellmanPublic;        } exchange_keys;    } ClientKeyExchange;     struct {        ProtocolVersion client_version;        opaque random[46];    } PreMasterSecret;     struct {        public-key-encrypted PreMasterSecret pre_master_secret;    } EncryptedPreMasterSecret;     enum { implicit, explicit } PublicValueEncoding;     struct {        select (PublicValueEncoding) {            case implicit: struct {};            case explicit: opaque DH_Yc<1..2^16-1>;        } dh_public;    } ClientDiffieHellmanPublic;     struct {         digitally-signed struct {             opaque handshake_messages[handshake_messages_length];         }    } CertificateVerify;  A.4.4.  Handshake Finalization Message     struct {        opaque verify_data[verify_data_length];    } Finished;        Dierks & Rescorla           Standards Track                    [Page 74]   RFC 5246                          TLS                        August 2008   A.5.  The Cipher Suite     The following values define the cipher suite codes used in the    ClientHello and ServerHello messages.     A cipher suite defines a cipher specification supported in TLS    Version 1.2.     TLS_NULL_WITH_NULL_NULL is specified and is the initial state of a    TLS connection during the first handshake on that channel, but MUST    NOT be negotiated, as it provides no more protection than an    unsecured connection.        CipherSuite TLS_NULL_WITH_NULL_NULL               = { 0x00,0x00 };     The following CipherSuite definitions require that the server provide    an RSA certificate that can be used for key exchange.  The server may    request any signature-capable certificate in the certificate request    message.        CipherSuite TLS_RSA_WITH_NULL_MD5                 = { 0x00,0x01 };       CipherSuite TLS_RSA_WITH_NULL_SHA                 = { 0x00,0x02 };       CipherSuite TLS_RSA_WITH_NULL_SHA256              = { 0x00,0x3B };       CipherSuite TLS_RSA_WITH_RC4_128_MD5              = { 0x00,0x04 };       CipherSuite TLS_RSA_WITH_RC4_128_SHA              = { 0x00,0x05 };       CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA         = { 0x00,0x0A };       CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA          = { 0x00,0x2F };       CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA          = { 0x00,0x35 };       CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256       = { 0x00,0x3C };       CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256       = { 0x00,0x3D };     The following cipher suite definitions are used for server-    authenticated (and optionally client-authenticated) Diffie-Hellman.    DH denotes cipher suites in which the server's certificate contains    the Diffie-Hellman parameters signed by the certificate authority    (CA).  DHE denotes ephemeral Diffie-Hellman, where the Diffie-Hellman    parameters are signed by a signature-capable certificate, which has    been signed by the CA.  The signing algorithm used by the server is    specified after the DHE component of the CipherSuite name.  The    server can request any signature-capable certificate from the client    for client authentication, or it may request a Diffie-Hellman    certificate.  Any Diffie-Hellman certificate provided by the client    must use the parameters (group and generator) described by the    server.        Dierks & Rescorla           Standards Track                    [Page 75]   RFC 5246                          TLS                        August 2008         CipherSuite TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA      = { 0x00,0x0D };       CipherSuite TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA      = { 0x00,0x10 };       CipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA     = { 0x00,0x13 };       CipherSuite TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA     = { 0x00,0x16 };       CipherSuite TLS_DH_DSS_WITH_AES_128_CBC_SHA       = { 0x00,0x30 };       CipherSuite TLS_DH_RSA_WITH_AES_128_CBC_SHA       = { 0x00,0x31 };       CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA      = { 0x00,0x32 };       CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA      = { 0x00,0x33 };       CipherSuite TLS_DH_DSS_WITH_AES_256_CBC_SHA       = { 0x00,0x36 };       CipherSuite TLS_DH_RSA_WITH_AES_256_CBC_SHA       = { 0x00,0x37 };       CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA      = { 0x00,0x38 };       CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA      = { 0x00,0x39 };       CipherSuite TLS_DH_DSS_WITH_AES_128_CBC_SHA256    = { 0x00,0x3E };       CipherSuite TLS_DH_RSA_WITH_AES_128_CBC_SHA256    = { 0x00,0x3F };       CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256   = { 0x00,0x40 };       CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256   = { 0x00,0x67 };       CipherSuite TLS_DH_DSS_WITH_AES_256_CBC_SHA256    = { 0x00,0x68 };       CipherSuite TLS_DH_RSA_WITH_AES_256_CBC_SHA256    = { 0x00,0x69 };       CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256   = { 0x00,0x6A };       CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256   = { 0x00,0x6B };     The following cipher suites are used for completely anonymous    Diffie-Hellman communications in which neither party is    authenticated.  Note that this mode is vulnerable to man-in-the-    middle attacks.  Using this mode therefore is of limited use: These    cipher suites MUST NOT be used by TLS 1.2 implementations unless the    application layer has specifically requested to allow anonymous key    exchange.  (Anonymous key exchange may sometimes be acceptable, for    example, to support opportunistic encryption when no set-up for    authentication is in place, or when TLS is used as part of more    complex security protocols that have other means to ensure    authentication.)        CipherSuite TLS_DH_anon_WITH_RC4_128_MD5          = { 0x00,0x18 };       CipherSuite TLS_DH_anon_WITH_3DES_EDE_CBC_SHA     = { 0x00,0x1B };       CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA      = { 0x00,0x34 };       CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA      = { 0x00,0x3A };       CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA256   = { 0x00,0x6C };       CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA256   = { 0x00,0x6D };     Note that using non-anonymous key exchange without actually verifying    the key exchange is essentially equivalent to anonymous key exchange,    and the same precautions apply.  While non-anonymous key exchange    will generally involve a higher computational and communicational    cost than anonymous key exchange, it may be in the interest of    interoperability not to disable non-anonymous key exchange when the    application layer is allowing anonymous key exchange.     Dierks & Rescorla           Standards Track                    [Page 76]   RFC 5246                          TLS                        August 2008      New cipher suite values have been assigned by IANA as described in    Section 12.     Note: The cipher suite values { 0x00, 0x1C } and { 0x00, 0x1D } are    reserved to avoid collision with Fortezza-based cipher suites in    SSL 3.  A.6.  The Security Parameters     These security parameters are determined by the TLS Handshake    Protocol and provided as parameters to the TLS record layer in order    to initialize a connection state.  SecurityParameters includes:     enum { null(0), (255) } CompressionMethod;     enum { server, client } ConnectionEnd;     enum { tls_prf_sha256 } PRFAlgorithm;     enum { null, rc4, 3des, aes } BulkCipherAlgorithm;     enum { stream, block, aead } CipherType;     enum { null, hmac_md5, hmac_sha1, hmac_sha256, hmac_sha384,      hmac_sha512} MACAlgorithm;     /* Other values may be added to the algorithms specified in    CompressionMethod, PRFAlgorithm, BulkCipherAlgorithm, and    MACAlgorithm. */     struct {        ConnectionEnd          entity;        PRFAlgorithm           prf_algorithm;        BulkCipherAlgorithm    bulk_cipher_algorithm;        CipherType             cipher_type;        uint8                  enc_key_length;        uint8                  block_length;        uint8                  fixed_iv_length;        uint8                  record_iv_length;        MACAlgorithm           mac_algorithm;        uint8                  mac_length;        uint8                  mac_key_length;        CompressionMethod      compression_algorithm;        opaque                 master_secret[48];        opaque                 client_random[32];        opaque                 server_random[32];    } SecurityParameters;     Dierks & Rescorla           Standards Track                    [Page 77]   RFC 5246                          TLS                        August 2008   A.7.  Changes to RFC 4492     RFC 4492 [TLSECC] adds Elliptic Curve cipher suites to TLS.  This    document changes some of the structures used in that document.  This    section details the required changes for implementors of both RFC    4492 and TLS 1.2.  Implementors of TLS 1.2 who are not implementing    RFC 4492 do not need to read this section.     This document adds a ""signature_algorithm"" field to the digitally-    signed element in order to identify the signature and digest    algorithms used to create a signature.  This change applies to    digital signatures formed using ECDSA as well, thus allowing ECDSA    signatures to be used with digest algorithms other than SHA-1,    provided such use is compatible with the certificate and any    restrictions imposed by future revisions of [PKIX].     As described in Sections 7.4.2 and 7.4.6, the restrictions on the    signature algorithms used to sign certificates are no longer tied to    the cipher suite (when used by the server) or the    ClientCertificateType (when used by the client).  Thus, the    restrictions on the algorithm used to sign certificates specified in    Sections 2 and 3 of RFC 4492 are also relaxed.  As in this document,    the restrictions on the keys in the end-entity certificate remain.  Appendix B.  Glossary     Advanced Encryption Standard (AES)       AES [AES] is a widely used symmetric encryption algorithm.  AES is       a block cipher with a 128-, 192-, or 256-bit keys and a 16-byte       block size.  TLS currently only supports the 128- and 256-bit key       sizes.     application protocol       An application protocol is a protocol that normally layers       directly on top of the transport layer (e.g., TCP/IP).  Examples       include HTTP, TELNET, FTP, and SMTP.     asymmetric cipher       See public key cryptography.     authenticated encryption with additional data (AEAD)       A symmetric encryption algorithm that simultaneously provides       confidentiality and message integrity.     authentication       Authentication is the ability of one entity to determine the       identity of another entity.     Dierks & Rescorla           Standards Track                    [Page 78]   RFC 5246                          TLS                        August 2008      block cipher       A block cipher is an algorithm that operates on plaintext in       groups of bits, called blocks.  64 bits was, and 128 bits is, a       common block size.     bulk cipher       A symmetric encryption algorithm used to encrypt large quantities       of data.     cipher block chaining (CBC)       CBC is a mode in which every plaintext block encrypted with a       block cipher is first exclusive-ORed with the previous ciphertext       block (or, in the case of the first block, with the initialization       vector).  For decryption, every block is first decrypted, then       exclusive-ORed with the previous ciphertext block (or IV).     certificate       As part of the X.509 protocol (a.k.a. ISO Authentication       framework), certificates are assigned by a trusted Certificate       Authority and provide a strong binding between a party's identity       or some other attributes and its public key.     client       The application entity that initiates a TLS connection to a       server.  This may or may not imply that the client initiated the       underlying transport connection.  The primary operational       difference between the server and client is that the server is       generally authenticated, while the client is only optionally       authenticated.     client write key       The key used to encrypt data written by the client.     client write MAC key       The secret data used to authenticate data written by the client.     connection       A connection is a transport (in the OSI layering model definition)       that provides a suitable type of service.  For TLS, such       connections are peer-to-peer relationships.  The connections are       transient.  Every connection is associated with one session.     Data Encryption Standard       DES [DES] still is a very widely used symmetric encryption       algorithm although it is considered as rather weak now.  DES is a       block cipher with a 56-bit key and an 8-byte block size.  Note       that in TLS, for key generation purposes, DES is treated as having       an 8-byte key length (64 bits), but it still only provides 56 bits    Dierks & Rescorla           Standards Track                    [Page 79]   RFC 5246                          TLS                        August 2008         of protection.  (The low bit of each key byte is presumed to be       set to produce odd parity in that key byte.)  DES can also be       operated in a mode [3DES] where three independent keys and three       encryptions are used for each block of data; this uses 168 bits of       key (24 bytes in the TLS key generation method) and provides the       equivalent of 112 bits of security.     Digital Signature Standard (DSS)       A standard for digital signing, including the Digital Signing       Algorithm, approved by the National Institute of Standards and       Technology, defined in NIST FIPS PUB 186-2, ""Digital Signature       Standard"", published January 2000 by the U.S. Department of       Commerce [DSS].  A significant update [DSS-3] has been drafted and       was published in March 2006.     digital signatures       Digital signatures utilize public key cryptography and one-way       hash functions to produce a signature of the data that can be       authenticated, and is difficult to forge or repudiate.     handshake An initial negotiation between client and server that       establishes the parameters of their transactions.     Initialization Vector (IV)       When a block cipher is used in CBC mode, the initialization vector       is exclusive-ORed with the first plaintext block prior to       encryption.     Message Authentication Code (MAC)       A Message Authentication Code is a one-way hash computed from a       message and some secret data.  It is difficult to forge without       knowing the secret data.  Its purpose is to detect if the message       has been altered.     master secret       Secure secret data used for generating encryption keys, MAC       secrets, and IVs.     MD5       MD5 [MD5] is a hashing function that converts an arbitrarily long       data stream into a hash of fixed size (16 bytes).  Due to       significant progress in cryptanalysis, at the time of publication       of this document, MD5 no longer can be considered a 'secure'       hashing function.        Dierks & Rescorla           Standards Track                    [Page 80]   RFC 5246                          TLS                        August 2008      public key cryptography       A class of cryptographic techniques employing two-key ciphers.       Messages encrypted with the public key can only be decrypted with       the associated private key.  Conversely, messages signed with the       private key can be verified with the public key.     one-way hash function       A one-way transformation that converts an arbitrary amount of data       into a fixed-length hash.  It is computationally hard to reverse       the transformation or to find collisions.  MD5 and SHA are       examples of one-way hash functions.     RC4       A stream cipher invented by Ron Rivest.  A compatible cipher is       described in [SCH].     RSA       A very widely used public key algorithm that can be used for       either encryption or digital signing.  [RSA]     server       The server is the application entity that responds to requests for       connections from clients.  See also ""client"".     session       A TLS session is an association between a client and a server.       Sessions are created by the handshake protocol.  Sessions define a       set of cryptographic security parameters that can be shared among       multiple connections.  Sessions are used to avoid the expensive       negotiation of new security parameters for each connection.     session identifier       A session identifier is a value generated by a server that       identifies a particular session.     server write key       The key used to encrypt data written by the server.     server write MAC key       The secret data used to authenticate data written by the server.     SHA       The Secure Hash Algorithm [SHS] is defined in FIPS PUB 180-2.  It       produces a 20-byte output.  Note that all references to SHA       (without a numerical suffix) actually use the modified SHA-1       algorithm.      Dierks & Rescorla           Standards Track                    [Page 81]   RFC 5246                          TLS                        August 2008      SHA-256       The 256-bit Secure Hash Algorithm is defined in FIPS PUB 180-2.       It produces a 32-byte output.     SSL       Netscape's Secure Socket Layer protocol [SSL3].  TLS is based on       SSL Version 3.0.     stream cipher       An encryption algorithm that converts a key into a       cryptographically strong keystream, which is then exclusive-ORed       with the plaintext.     symmetric cipher       See bulk cipher.     Transport Layer Security (TLS)       This protocol; also, the Transport Layer Security working group of       the Internet Engineering Task Force (IETF).  See ""Working Group       Information"" at the end of this document (see page 99).                                Dierks & Rescorla           Standards Track                    [Page 82]   RFC 5246                          TLS                        August 2008   Appendix C.  Cipher Suite Definitions  Cipher Suite                            Key        Cipher         Mac                                         Exchange  TLS_NULL_WITH_NULL_NULL                 NULL         NULL         NULL TLS_RSA_WITH_NULL_MD5                   RSA          NULL         MD5 TLS_RSA_WITH_NULL_SHA                   RSA          NULL         SHA TLS_RSA_WITH_NULL_SHA256                RSA          NULL         SHA256 TLS_RSA_WITH_RC4_128_MD5                RSA          RC4_128      MD5 TLS_RSA_WITH_RC4_128_SHA                RSA          RC4_128      SHA TLS_RSA_WITH_3DES_EDE_CBC_SHA           RSA          3DES_EDE_CBC SHA TLS_RSA_WITH_AES_128_CBC_SHA            RSA          AES_128_CBC  SHA TLS_RSA_WITH_AES_256_CBC_SHA            RSA          AES_256_CBC  SHA TLS_RSA_WITH_AES_128_CBC_SHA256         RSA          AES_128_CBC  SHA256 TLS_RSA_WITH_AES_256_CBC_SHA256         RSA          AES_256_CBC  SHA256 TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA        DH_DSS       3DES_EDE_CBC SHA TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA        DH_RSA       3DES_EDE_CBC SHA TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA       DHE_DSS      3DES_EDE_CBC SHA TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA       DHE_RSA      3DES_EDE_CBC SHA TLS_DH_anon_WITH_RC4_128_MD5            DH_anon      RC4_128      MD5 TLS_DH_anon_WITH_3DES_EDE_CBC_SHA       DH_anon      3DES_EDE_CBC SHA TLS_DH_DSS_WITH_AES_128_CBC_SHA         DH_DSS       AES_128_CBC  SHA TLS_DH_RSA_WITH_AES_128_CBC_SHA         DH_RSA       AES_128_CBC  SHA TLS_DHE_DSS_WITH_AES_128_CBC_SHA        DHE_DSS      AES_128_CBC  SHA TLS_DHE_RSA_WITH_AES_128_CBC_SHA        DHE_RSA      AES_128_CBC  SHA TLS_DH_anon_WITH_AES_128_CBC_SHA        DH_anon      AES_128_CBC  SHA TLS_DH_DSS_WITH_AES_256_CBC_SHA         DH_DSS       AES_256_CBC  SHA TLS_DH_RSA_WITH_AES_256_CBC_SHA         DH_RSA       AES_256_CBC  SHA TLS_DHE_DSS_WITH_AES_256_CBC_SHA        DHE_DSS      AES_256_CBC  SHA TLS_DHE_RSA_WITH_AES_256_CBC_SHA        DHE_RSA      AES_256_CBC  SHA TLS_DH_anon_WITH_AES_256_CBC_SHA        DH_anon      AES_256_CBC  SHA TLS_DH_DSS_WITH_AES_128_CBC_SHA256      DH_DSS       AES_128_CBC  SHA256 TLS_DH_RSA_WITH_AES_128_CBC_SHA256      DH_RSA       AES_128_CBC  SHA256 TLS_DHE_DSS_WITH_AES_128_CBC_SHA256     DHE_DSS      AES_128_CBC  SHA256 TLS_DHE_RSA_WITH_AES_128_CBC_SHA256     DHE_RSA      AES_128_CBC  SHA256 TLS_DH_anon_WITH_AES_128_CBC_SHA256     DH_anon      AES_128_CBC  SHA256 TLS_DH_DSS_WITH_AES_256_CBC_SHA256      DH_DSS       AES_256_CBC  SHA256 TLS_DH_RSA_WITH_AES_256_CBC_SHA256      DH_RSA       AES_256_CBC  SHA256 TLS_DHE_DSS_WITH_AES_256_CBC_SHA256     DHE_DSS      AES_256_CBC  SHA256 TLS_DHE_RSA_WITH_AES_256_CBC_SHA256     DHE_RSA      AES_256_CBC  SHA256 TLS_DH_anon_WITH_AES_256_CBC_SHA256     DH_anon      AES_256_CBC  SHA256          Dierks & Rescorla           Standards Track                    [Page 83]   RFC 5246                          TLS                        August 2008                           Key      IV   Block Cipher        Type    Material  Size  Size ------------  ------  --------  ----  ----- NULL          Stream      0       0    N/A RC4_128       Stream     16       0    N/A 3DES_EDE_CBC  Block      24       8      8 AES_128_CBC   Block      16      16     16 AES_256_CBC   Block      32      16     16   MAC       Algorithm    mac_length  mac_key_length --------  -----------  ----------  -------------- NULL      N/A              0             0 MD5       HMAC-MD5        16            16 SHA       HMAC-SHA1       20            20 SHA256    HMAC-SHA256     32            32     Type       Indicates whether this is a stream cipher or a block cipher       running in CBC mode.     Key Material       The number of bytes from the key_block that are used for       generating the write keys.     IV Size       The amount of data needed to be generated for the initialization       vector.  Zero for stream ciphers; equal to the block size for       block ciphers (this is equal to       SecurityParameters.record_iv_length).     Block Size       The amount of data a block cipher enciphers in one chunk; a block       cipher running in CBC mode can only encrypt an even multiple of       its block size.                 Dierks & Rescorla           Standards Track                    [Page 84]   RFC 5246                          TLS                        August 2008   Appendix D.  Implementation Notes     The TLS protocol cannot prevent many common security mistakes.  This    section provides several recommendations to assist implementors.  D.1.  Random Number Generation and Seeding     TLS requires a cryptographically secure pseudorandom number generator    (PRNG).  Care must be taken in designing and seeding PRNGs.  PRNGs    based on secure hash operations, most notably SHA-1, are acceptable,    but cannot provide more security than the size of the random number    generator state.     To estimate the amount of seed material being produced, add the    number of bits of unpredictable information in each seed byte.  For    example, keystroke timing values taken from a PC compatible's 18.2 Hz    timer provide 1 or 2 secure bits each, even though the total size of    the counter value is 16 bits or more.  Seeding a 128-bit PRNG would    thus require approximately 100 such timer values.     [RANDOM] provides guidance on the generation of random values.  D.2.  Certificates and Authentication     Implementations are responsible for verifying the integrity of    certificates and should generally support certificate revocation    messages.  Certificates should always be verified to ensure proper    signing by a trusted Certificate Authority (CA).  The selection and    addition of trusted CAs should be done very carefully.  Users should    be able to view information about the certificate and root CA.  D.3.  Cipher Suites     TLS supports a range of key sizes and security levels, including some    that provide no or minimal security.  A proper implementation will    probably not support many cipher suites.  For instance, anonymous    Diffie-Hellman is strongly discouraged because it cannot prevent man-    in-the-middle attacks.  Applications should also enforce minimum and    maximum key sizes.  For example, certificate chains containing 512-    bit RSA keys or signatures are not appropriate for high-security    applications.  D.4.  Implementation Pitfalls     Implementation experience has shown that certain parts of earlier TLS    specifications are not easy to understand, and have been a source of    interoperability and security problems.  Many of these areas have     Dierks & Rescorla           Standards Track                    [Page 85]   RFC 5246                          TLS                        August 2008      been clarified in this document, but this appendix contains a short    list of the most important things that require special attention from    implementors.     TLS protocol issues:     -  Do you correctly handle handshake messages that are fragmented to       multiple TLS records (see Section 6.2.1)? Including corner cases       like a ClientHello that is split to several small fragments? Do       you fragment handshake messages that exceed the maximum fragment       size? In particular, the certificate and certificate request       handshake messages can be large enough to require fragmentation.     -  Do you ignore the TLS record layer version number in all TLS       records before ServerHello (see Appendix E.1)?     -  Do you handle TLS extensions in ClientHello correctly, including       omitting the extensions field completely?     -  Do you support renegotiation, both client and server initiated?       While renegotiation is an optional feature, supporting it is       highly recommended.     -  When the server has requested a client certificate, but no       suitable certificate is available, do you correctly send an empty       Certificate message, instead of omitting the whole message (see       Section 7.4.6)?     Cryptographic details:     -  In the RSA-encrypted Premaster Secret, do you correctly send and       verify the version number? When an error is encountered, do you       continue the handshake to avoid the Bleichenbacher attack (see       Section 7.4.7.1)?     -  What countermeasures do you use to prevent timing attacks against       RSA decryption and signing operations (see Section 7.4.7.1)?     -  When verifying RSA signatures, do you accept both NULL and missing       parameters (see Section 4.7)? Do you verify that the RSA padding       doesn't have additional data after the hash value?  [FI06]     -  When using Diffie-Hellman key exchange, do you correctly strip       leading zero bytes from the negotiated key (see Section 8.1.2)?     -  Does your TLS client check that the Diffie-Hellman parameters sent       by the server are acceptable (see Section F.1.1.3)?     Dierks & Rescorla           Standards Track                    [Page 86]   RFC 5246                          TLS                        August 2008      -  How do you generate unpredictable IVs for CBC mode ciphers (see       Section 6.2.3.2)?     -  Do you accept long CBC mode padding (up to 255 bytes; see Section       6.2.3.2)?     -  How do you address CBC mode timing attacks (Section 6.2.3.2)?     -  Do you use a strong and, most importantly, properly seeded random       number generator (see Appendix D.1) for generating the premaster       secret (for RSA key exchange), Diffie-Hellman private values, the       DSA ""k"" parameter, and other security-critical values?  Appendix E.  Backward Compatibility  E.1.  Compatibility with TLS 1.0/1.1 and SSL 3.0     Since there are various versions of TLS (1.0, 1.1, 1.2, and any    future versions) and SSL (2.0 and 3.0), means are needed to negotiate    the specific protocol version to use.  The TLS protocol provides a    built-in mechanism for version negotiation so as not to bother other    protocol components with the complexities of version selection.     TLS versions 1.0, 1.1, and 1.2, and SSL 3.0 are very similar, and use    compatible ClientHello messages; thus, supporting all of them is    relatively easy.  Similarly, servers can easily handle clients trying    to use future versions of TLS as long as the ClientHello format    remains compatible, and the client supports the highest protocol    version available in the server.     A TLS 1.2 client who wishes to negotiate with such older servers will    send a normal TLS 1.2 ClientHello, containing { 3, 3 } (TLS 1.2) in    ClientHello.client_version.  If the server does not support this    version, it will respond with a ServerHello containing an older    version number.  If the client agrees to use this version, the    negotiation will proceed as appropriate for the negotiated protocol.     If the version chosen by the server is not supported by the client    (or not acceptable), the client MUST send a ""protocol_version"" alert    message and close the connection.     If a TLS server receives a ClientHello containing a version number    greater than the highest version supported by the server, it MUST    reply according to the highest version supported by the server.     A TLS server can also receive a ClientHello containing a version    number smaller than the highest supported version.  If the server    wishes to negotiate with old clients, it will proceed as appropriate    Dierks & Rescorla           Standards Track                    [Page 87]   RFC 5246                          TLS                        August 2008      for the highest version supported by the server that is not greater    than ClientHello.client_version.  For example, if the server supports    TLS 1.0, 1.1, and 1.2, and client_version is TLS 1.0, the server will    proceed with a TLS 1.0 ServerHello.  If server supports (or is    willing to use) only versions greater than client_version, it MUST    send a ""protocol_version"" alert message and close the connection.     Whenever a client already knows the highest protocol version known to    a server (for example, when resuming a session), it SHOULD initiate    the connection in that native protocol.     Note: some server implementations are known to implement version    negotiation incorrectly.  For example, there are buggy TLS 1.0    servers that simply close the connection when the client offers a    version newer than TLS 1.0.  Also, it is known that some servers will    refuse the connection if any TLS extensions are included in    ClientHello.  Interoperability with such buggy servers is a complex    topic beyond the scope of this document, and may require multiple    connection attempts by the client.     Earlier versions of the TLS specification were not fully clear on    what the record layer version number (TLSPlaintext.version) should    contain when sending ClientHello (i.e., before it is known which    version of the protocol will be employed).  Thus, TLS servers    compliant with this specification MUST accept any value {03,XX} as    the record layer version number for ClientHello.     TLS clients that wish to negotiate with older servers MAY send any    value {03,XX} as the record layer version number.  Typical values    would be {03,00}, the lowest version number supported by the client,    and the value of ClientHello.client_version.  No single value will    guarantee interoperability with all old servers, but this is a    complex topic beyond the scope of this document.  E.2.  Compatibility with SSL 2.0     TLS 1.2 clients that wish to support SSL 2.0 servers MUST send    version 2.0 CLIENT-HELLO messages defined in [SSL2].  The message    MUST contain the same version number as would be used for ordinary    ClientHello, and MUST encode the supported TLS cipher suites in the    CIPHER-SPECS-DATA field as described below.     Warning: The ability to send version 2.0 CLIENT-HELLO messages will    be phased out with all due haste, since the newer ClientHello format    provides better mechanisms for moving to newer versions and    negotiating extensions.  TLS 1.2 clients SHOULD NOT support SSL 2.0.      Dierks & Rescorla           Standards Track                    [Page 88]   RFC 5246                          TLS                        August 2008      However, even TLS servers that do not support SSL 2.0 MAY accept    version 2.0 CLIENT-HELLO messages.  The message is presented below in    sufficient detail for TLS server implementors; the true definition is    still assumed to be [SSL2].     For negotiation purposes, 2.0 CLIENT-HELLO is interpreted the same    way as a ClientHello with a ""null"" compression method and no    extensions.  Note that this message MUST be sent directly on the    wire, not wrapped as a TLS record.  For the purposes of calculating    Finished and CertificateVerify, the msg_length field is not    considered to be a part of the handshake message.        uint8 V2CipherSpec[3];       struct {           uint16 msg_length;           uint8 msg_type;           Version version;           uint16 cipher_spec_length;           uint16 session_id_length;           uint16 challenge_length;           V2CipherSpec cipher_specs[V2ClientHello.cipher_spec_length];           opaque session_id[V2ClientHello.session_id_length];           opaque challenge[V2ClientHello.challenge_length;       } V2ClientHello;     msg_length       The highest bit MUST be 1; the remaining bits contain the length       of the following data in bytes.     msg_type       This field, in conjunction with the version field, identifies a       version 2 ClientHello message.  The value MUST be 1.     version       Equal to ClientHello.client_version.     cipher_spec_length       This field is the total length of the field cipher_specs.  It       cannot be zero and MUST be a multiple of the V2CipherSpec length       (3).     session_id_length       This field MUST have a value of zero for a client that claims to       support TLS 1.2.        Dierks & Rescorla           Standards Track                    [Page 89]   RFC 5246                          TLS                        August 2008      challenge_length       The length in bytes of the client's challenge to the server to       authenticate itself.  Historically, permissible values are between       16 and 32 bytes inclusive.  When using the SSLv2 backward-       compatible handshake the client SHOULD use a 32-byte challenge.     cipher_specs       This is a list of all CipherSpecs the client is willing and able       to use.  In addition to the 2.0 cipher specs defined in [SSL2],       this includes the TLS cipher suites normally sent in       ClientHello.cipher_suites, with each cipher suite prefixed by a       zero byte.  For example, the TLS cipher suite {0x00,0x0A} would be       sent as {0x00,0x00,0x0A}.     session_id       This field MUST be empty.     challenge       Corresponds to ClientHello.random.  If the challenge length is       less than 32, the TLS server will pad the data with leading (note:       not trailing) zero bytes to make it 32 bytes long.     Note: Requests to resume a TLS session MUST use a TLS client hello.  E.3.  Avoiding Man-in-the-Middle Version Rollback     When TLS clients fall back to Version 2.0 compatibility mode, they    MUST use special PKCS#1 block formatting.  This is done so that TLS    servers will reject Version 2.0 sessions with TLS-capable clients.     When a client negotiates SSL 2.0 but also supports TLS, it MUST set    the right-hand (least-significant) 8 random bytes of the PKCS padding    (not including the terminal null of the padding) for the RSA    encryption of the ENCRYPTED-KEY-DATA field of the CLIENT-MASTER-KEY    to 0x03 (the other padding bytes are random).     When a TLS-capable server negotiates SSL 2.0 it SHOULD, after    decrypting the ENCRYPTED-KEY-DATA field, check that these 8 padding    bytes are 0x03.  If they are not, the server SHOULD generate a random    value for SECRET-KEY-DATA, and continue the handshake (which will    eventually fail since the keys will not match).  Note that reporting    the error situation to the client could make the server vulnerable to    attacks described in [BLEI].         Dierks & Rescorla           Standards Track                    [Page 90]   RFC 5246                          TLS                        August 2008   Appendix F.  Security Analysis     The TLS protocol is designed to establish a secure connection between    a client and a server communicating over an insecure channel.  This    document makes several traditional assumptions, including that    attackers have substantial computational resources and cannot obtain    secret information from sources outside the protocol.  Attackers are    assumed to have the ability to capture, modify, delete, replay, and    otherwise tamper with messages sent over the communication channel.    This appendix outlines how TLS has been designed to resist a variety    of attacks.  F.1.  Handshake Protocol     The handshake protocol is responsible for selecting a cipher spec and    generating a master secret, which together comprise the primary    cryptographic parameters associated with a secure session.  The    handshake protocol can also optionally authenticate parties who have    certificates signed by a trusted certificate authority.  F.1.1.  Authentication and Key Exchange     TLS supports three authentication modes: authentication of both    parties, server authentication with an unauthenticated client, and    total anonymity.  Whenever the server is authenticated, the channel    is secure against man-in-the-middle attacks, but completely anonymous    sessions are inherently vulnerable to such attacks.  Anonymous    servers cannot authenticate clients.  If the server is authenticated,    its certificate message must provide a valid certificate chain    leading to an acceptable certificate authority.  Similarly,    authenticated clients must supply an acceptable certificate to the    server.  Each party is responsible for verifying that the other's    certificate is valid and has not expired or been revoked.     The general goal of the key exchange process is to create a    pre_master_secret known to the communicating parties and not to    attackers.  The pre_master_secret will be used to generate the    master_secret (see Section 8.1).  The master_secret is required to    generate the Finished messages, encryption keys, and MAC keys (see    Sections 7.4.9 and 6.3).  By sending a correct Finished message,    parties thus prove that they know the correct pre_master_secret.  F.1.1.1.  Anonymous Key Exchange     Completely anonymous sessions can be established using Diffie-Hellman    for key exchange.  The server's public parameters are contained in    the server key exchange message, and the client's are sent in the     Dierks & Rescorla           Standards Track                    [Page 91]   RFC 5246                          TLS                        August 2008      client key exchange message.  Eavesdroppers who do not know the    private values should not be able to find the Diffie-Hellman result    (i.e., the pre_master_secret).     Warning: Completely anonymous connections only provide protection    against passive eavesdropping.  Unless an independent tamper-proof    channel is used to verify that the Finished messages were not    replaced by an attacker, server authentication is required in    environments where active man-in-the-middle attacks are a concern.  F.1.1.2.  RSA Key Exchange and Authentication     With RSA, key exchange and server authentication are combined.  The    public key is contained in the server's certificate.  Note that    compromise of the server's static RSA key results in a loss of    confidentiality for all sessions protected under that static key.    TLS users desiring Perfect Forward Secrecy should use DHE cipher    suites.  The damage done by exposure of a private key can be limited    by changing one's private key (and certificate) frequently.     After verifying the server's certificate, the client encrypts a    pre_master_secret with the server's public key.  By successfully    decoding the pre_master_secret and producing a correct Finished    message, the server demonstrates that it knows the private key    corresponding to the server certificate.     When RSA is used for key exchange, clients are authenticated using    the certificate verify message (see Section 7.4.8).  The client signs    a value derived from all preceding handshake messages.  These    handshake messages include the server certificate, which binds the    signature to the server, and ServerHello.random, which binds the    signature to the current handshake process.  F.1.1.3.  Diffie-Hellman Key Exchange with Authentication     When Diffie-Hellman key exchange is used, the server can either    supply a certificate containing fixed Diffie-Hellman parameters or    use the server key exchange message to send a set of temporary    Diffie-Hellman parameters signed with a DSA or RSA certificate.    Temporary parameters are hashed with the hello.random values before    signing to ensure that attackers do not replay old parameters.  In    either case, the client can verify the certificate or signature to    ensure that the parameters belong to the server.     If the client has a certificate containing fixed Diffie-Hellman    parameters, its certificate contains the information required to    complete the key exchange.  Note that in this case the client and    server will generate the same Diffie-Hellman result (i.e.,    Dierks & Rescorla           Standards Track                    [Page 92]   RFC 5246                          TLS                        August 2008      pre_master_secret) every time they communicate.  To prevent the    pre_master_secret from staying in memory any longer than necessary,    it should be converted into the master_secret as soon as possible.    Client Diffie-Hellman parameters must be compatible with those    supplied by the server for the key exchange to work.     If the client has a standard DSA or RSA certificate or is    unauthenticated, it sends a set of temporary parameters to the server    in the client key exchange message, then optionally uses a    certificate verify message to authenticate itself.     If the same DH keypair is to be used for multiple handshakes, either    because the client or server has a certificate containing a fixed DH    keypair or because the server is reusing DH keys, care must be taken    to prevent small subgroup attacks.  Implementations SHOULD follow the    guidelines found in [SUBGROUP].     Small subgroup attacks are most easily avoided by using one of the    DHE cipher suites and generating a fresh DH private key (X) for each    handshake.  If a suitable base (such as 2) is chosen, g^X mod p can    be computed very quickly; therefore, the performance cost is    minimized.  Additionally, using a fresh key for each handshake    provides Perfect Forward Secrecy.  Implementations SHOULD generate a    new X for each handshake when using DHE cipher suites.     Because TLS allows the server to provide arbitrary DH groups, the    client should verify that the DH group is of suitable size as defined    by local policy.  The client SHOULD also verify that the DH public    exponent appears to be of adequate size.  [KEYSIZ] provides a useful    guide to the strength of various group sizes.  The server MAY choose    to assist the client by providing a known group, such as those    defined in [IKEALG] or [MODP].  These can be verified by simple    comparison.  F.1.2.  Version Rollback Attacks     Because TLS includes substantial improvements over SSL Version 2.0,    attackers may try to make TLS-capable clients and servers fall back    to Version 2.0.  This attack can occur if (and only if) two TLS-    capable parties use an SSL 2.0 handshake.     Although the solution using non-random PKCS #1 block type 2 message    padding is inelegant, it provides a reasonably secure way for Version    3.0 servers to detect the attack.  This solution is not secure    against attackers who can brute-force the key and substitute a new    ENCRYPTED-KEY-DATA message containing the same key (but with normal    padding) before the application-specified wait threshold has expired.    Altering the padding of the least-significant 8 bytes of the PKCS    Dierks & Rescorla           Standards Track                    [Page 93]   RFC 5246                          TLS                        August 2008      padding does not impact security for the size of the signed hashes    and RSA key lengths used in the protocol, since this is essentially    equivalent to increasing the input block size by 8 bytes.  F.1.3.  Detecting Attacks Against the Handshake Protocol     An attacker might try to influence the handshake exchange to make the    parties select different encryption algorithms than they would    normally choose.     For this attack, an attacker must actively change one or more    handshake messages.  If this occurs, the client and server will    compute different values for the handshake message hashes.  As a    result, the parties will not accept each others' Finished messages.    Without the master_secret, the attacker cannot repair the Finished    messages, so the attack will be discovered.  F.1.4.  Resuming Sessions     When a connection is established by resuming a session, new    ClientHello.random and ServerHello.random values are hashed with the    session's master_secret.  Provided that the master_secret has not    been compromised and that the secure hash operations used to produce    the encryption keys and MAC keys are secure, the connection should be    secure and effectively independent from previous connections.    Attackers cannot use known encryption keys or MAC secrets to    compromise the master_secret without breaking the secure hash    operations.     Sessions cannot be resumed unless both the client and server agree.    If either party suspects that the session may have been compromised,    or that certificates may have expired or been revoked, it should    force a full handshake.  An upper limit of 24 hours is suggested for    session ID lifetimes, since an attacker who obtains a master_secret    may be able to impersonate the compromised party until the    corresponding session ID is retired.  Applications that may be run in    relatively insecure environments should not write session IDs to    stable storage.  F.2.  Protecting Application Data     The master_secret is hashed with the ClientHello.random and    ServerHello.random to produce unique data encryption keys and MAC    secrets for each connection.     Outgoing data is protected with a MAC before transmission.  To    prevent message replay or modification attacks, the MAC is computed    from the MAC key, the sequence number, the message length, the    Dierks & Rescorla           Standards Track                    [Page 94]   RFC 5246                          TLS                        August 2008      message contents, and two fixed character strings.  The message type    field is necessary to ensure that messages intended for one TLS    record layer client are not redirected to another.  The sequence    number ensures that attempts to delete or reorder messages will be    detected.  Since sequence numbers are 64 bits long, they should never    overflow.  Messages from one party cannot be inserted into the    other's output, since they use independent MAC keys.  Similarly, the    server write and client write keys are independent, so stream cipher    keys are used only once.     If an attacker does break an encryption key, all messages encrypted    with it can be read.  Similarly, compromise of a MAC key can make    message-modification attacks possible.  Because MACs are also    encrypted, message-alteration attacks generally require breaking the    encryption algorithm as well as the MAC.     Note: MAC keys may be larger than encryption keys, so messages can    remain tamper resistant even if encryption keys are broken.  F.3.  Explicit IVs     [CBCATT] describes a chosen plaintext attack on TLS that depends on    knowing the IV for a record.  Previous versions of TLS [TLS1.0] used    the CBC residue of the previous record as the IV and therefore    enabled this attack.  This version uses an explicit IV in order to    protect against this attack.  F.4.  Security of Composite Cipher Modes     TLS secures transmitted application data via the use of symmetric    encryption and authentication functions defined in the negotiated    cipher suite.  The objective is to protect both the integrity and    confidentiality of the transmitted data from malicious actions by    active attackers in the network.  It turns out that the order in    which encryption and authentication functions are applied to the data    plays an important role for achieving this goal [ENCAUTH].     The most robust method, called encrypt-then-authenticate, first    applies encryption to the data and then applies a MAC to the    ciphertext.  This method ensures that the integrity and    confidentiality goals are obtained with ANY pair of encryption and    MAC functions, provided that the former is secure against chosen    plaintext attacks and that the MAC is secure against chosen-message    attacks.  TLS uses another method, called authenticate-then-encrypt,    in which first a MAC is computed on the plaintext and then the    concatenation of plaintext and MAC is encrypted.  This method has    been proven secure for CERTAIN combinations of encryption functions    and MAC functions, but it is not guaranteed to be secure in general.    Dierks & Rescorla           Standards Track                    [Page 95]   RFC 5246                          TLS                        August 2008      In particular, it has been shown that there exist perfectly secure    encryption functions (secure even in the information-theoretic sense)    that combined with any secure MAC function, fail to provide the    confidentiality goal against an active attack.  Therefore, new cipher    suites and operation modes adopted into TLS need to be analyzed under    the authenticate-then-encrypt method to verify that they achieve the    stated integrity and confidentiality goals.     Currently, the security of the authenticate-then-encrypt method has    been proven for some important cases.  One is the case of stream    ciphers in which a computationally unpredictable pad of the length of    the message, plus the length of the MAC tag, is produced using a    pseudorandom generator and this pad is exclusive-ORed with the    concatenation of plaintext and MAC tag.  The other is the case of CBC    mode using a secure block cipher.  In this case, security can be    shown if one applies one CBC encryption pass to the concatenation of    plaintext and MAC and uses a new, independent, and unpredictable IV    for each new pair of plaintext and MAC.  In versions of TLS prior to    1.1, CBC mode was used properly EXCEPT that it used a predictable IV    in the form of the last block of the previous ciphertext.  This made    TLS open to chosen plaintext attacks.  This version of the protocol    is immune to those attacks.  For exact details in the encryption    modes proven secure, see [ENCAUTH].  F.5.  Denial of Service     TLS is susceptible to a number of denial-of-service (DoS) attacks.    In particular, an attacker who initiates a large number of TCP    connections can cause a server to consume large amounts of CPU for    doing RSA decryption.  However, because TLS is generally used over    TCP, it is difficult for the attacker to hide his point of origin if    proper TCP SYN randomization is used [SEQNUM] by the TCP stack.     Because TLS runs over TCP, it is also susceptible to a number of DoS    attacks on individual connections.  In particular, attackers can    forge RSTs, thereby terminating connections, or forge partial TLS    records, thereby causing the connection to stall.  These attacks    cannot in general be defended against by a TCP-using protocol.    Implementors or users who are concerned with this class of attack    should use IPsec AH [AH] or ESP [ESP].  F.6.  Final Notes     For TLS to be able to provide a secure connection, both the client    and server systems, keys, and applications must be secure.  In    addition, the implementation must be free of security errors.      Dierks & Rescorla           Standards Track                    [Page 96]   RFC 5246                          TLS                        August 2008      The system is only as strong as the weakest key exchange and    authentication algorithm supported, and only trustworthy    cryptographic functions should be used.  Short public keys and    anonymous servers should be used with great caution.  Implementations    and users must be careful when deciding which certificates and    certificate authorities are acceptable; a dishonest certificate    authority can do tremendous damage.  Normative References     [AES]      National Institute of Standards and Technology,               ""Specification for the Advanced Encryption Standard (AES)""               FIPS 197.  November 26, 2001.     [3DES]     National Institute of Standards and Technology,               ""Recommendation for the Triple Data Encryption Algorithm               (TDEA) Block Cipher"", NIST Special Publication 800-67, May               2004.     [DSS]      NIST FIPS PUB 186-2, ""Digital Signature Standard"",               National Institute of Standards and Technology, U.S.               Department of Commerce, 2000.     [HMAC]     Krawczyk, H., Bellare, M., and R. Canetti, ""HMAC: Keyed-               Hashing for Message Authentication"", RFC 2104, February               1997.     [MD5]      Rivest, R., ""The MD5 Message-Digest Algorithm"", RFC 1321,               April 1992.     [PKCS1]    Jonsson, J. and B. Kaliski, ""Public-Key Cryptography               Standards (PKCS) #1: RSA Cryptography Specifications               Version 2.1"", RFC 3447, February 2003.     [PKIX]     Housley, R., Polk, W., Ford, W., and D. Solo, ""Internet               X.509 Public Key Infrastructure Certificate and               Certificate Revocation List (CRL) Profile"", RFC 3280,               April 2002.     [SCH]      B. Schneier. ""Applied Cryptography: Protocols, Algorithms,               and Source Code in C, 2nd ed."", Published by John Wiley &               Sons, Inc. 1996.     [SHS]      NIST FIPS PUB 180-2, ""Secure Hash Standard"", National               Institute of Standards and Technology, U.S. Department of               Commerce, August 2002.      Dierks & Rescorla           Standards Track                    [Page 97]   RFC 5246                          TLS                        August 2008      [REQ]      Bradner, S., ""Key words for use in RFCs to Indicate               Requirement Levels"", BCP 14, RFC 2119, March 1997.     [RFC2434]  Narten, T. and H. Alvestrand, ""Guidelines for Writing an               IANA Considerations Section in RFCs"", BCP 26, RFC 2434,               October 1998.     [X680]     ITU-T Recommendation X.680 (2002) | ISO/IEC 8824-1:2002,               Information technology - Abstract Syntax Notation One               (ASN.1): Specification of basic notation.     [X690]     ITU-T Recommendation X.690 (2002) | ISO/IEC 8825-1:2002,               Information technology - ASN.1 encoding Rules:               Specification of Basic Encoding Rules (BER), Canonical               Encoding Rules (CER) and Distinguished Encoding Rules               (DER).  Informative References     [AEAD]     McGrew, D., ""An Interface and Algorithms for Authenticated               Encryption"", RFC 5116, January 2008.     [AH]       Kent, S., ""IP Authentication Header"", RFC 4302, December               2005.     [BLEI]     Bleichenbacher D., ""Chosen Ciphertext Attacks against               Protocols Based on RSA Encryption Standard PKCS #1"" in               Advances in Cryptology -- CRYPTO'98, LNCS vol. 1462,               pages:  1-12, 1998.     [CBCATT]   Moeller, B., ""Security of CBC Ciphersuites in SSL/TLS:               Problems and Countermeasures"",               http://www.openssl.org/~bodo/tls-cbc.txt.     [CBCTIME]  Canvel, B., Hiltgen, A., Vaudenay, S., and M. Vuagnoux,               ""Password Interception in a SSL/TLS Channel"", Advances in               Cryptology -- CRYPTO 2003, LNCS vol. 2729, 2003.     [CCM]      ""NIST Special Publication 800-38C: The CCM Mode for               Authentication and Confidentiality"",               http://csrc.nist.gov/publications/nistpubs/800-38C/               SP800-38C.pdf     [DES]      National Institute of Standards and Technology, ""Data               Encryption Standard (DES)"", FIPS PUB 46-3, October 1999.       Dierks & Rescorla           Standards Track                    [Page 98]   RFC 5246                          TLS                        August 2008      [DSS-3]    NIST FIPS PUB 186-3 Draft, ""Digital Signature Standard"",               National Institute of Standards and Technology, U.S.               Department of Commerce, 2006.     [ECDSA]    American National Standards Institute, ""Public Key               Cryptography for the Financial Services Industry: The               Elliptic Curve Digital Signature Algorithm (ECDSA)"", ANS               X9.62-2005, November 2005.     [ENCAUTH]  Krawczyk, H., ""The Order of Encryption and Authentication               for Protecting Communications (Or: How Secure is SSL?)"",               Crypto 2001.     [ESP]      Kent, S., ""IP Encapsulating Security Payload (ESP)"", RFC               4303, December 2005.     [FI06]     Hal Finney, ""Bleichenbacher's RSA signature forgery based               on implementation error"", ietf-openpgp@imc.org mailing               list, 27 August 2006, http://www.imc.org/ietf-openpgp/               mail-archive/msg14307.html.     [GCM]      Dworkin, M., NIST Special Publication 800-38D,               ""Recommendation for Block Cipher Modes of Operation:               Galois/Counter Mode (GCM) and GMAC"", November 2007.     [IKEALG]   Schiller, J., ""Cryptographic Algorithms for Use in the               Internet Key Exchange Version 2 (IKEv2)"", RFC 4307,               December 2005.     [KEYSIZ]   Orman, H. and P. Hoffman, ""Determining Strengths For               Public Keys Used For Exchanging Symmetric Keys"", BCP 86,               RFC 3766, April 2004.     [KPR03]    Klima, V., Pokorny, O., Rosa, T., ""Attacking RSA-based               Sessions in SSL/TLS"", http://eprint.iacr.org/2003/052/,               March 2003.     [MODP]     Kivinen, T. and M. Kojo, ""More Modular Exponential (MODP)               Diffie-Hellman groups for Internet Key Exchange (IKE)"",               RFC 3526, May 2003.     [PKCS6]    RSA Laboratories, ""PKCS #6: RSA Extended Certificate               Syntax Standard"", version 1.5, November 1993.     [PKCS7]    RSA Laboratories, ""PKCS #7: RSA Cryptographic Message               Syntax Standard"", version 1.5, November 1993.      Dierks & Rescorla           Standards Track                    [Page 99]   RFC 5246                          TLS                        August 2008      [RANDOM]   Eastlake, D., 3rd, Schiller, J., and S. Crocker,               ""Randomness Requirements for Security"", BCP 106, RFC 4086,               June 2005.     [RFC3749]  Hollenbeck, S., ""Transport Layer Security Protocol               Compression Methods"", RFC 3749, May 2004.     [RFC4366]  Blake-Wilson, S., Nystrom, M., Hopwood, D., Mikkelsen, J.,               and T. Wright, ""Transport Layer Security (TLS)               Extensions"", RFC 4366, April 2006.     [RSA]      R. Rivest, A. Shamir, and L. M. Adleman, ""A Method for               Obtaining Digital Signatures and Public-Key               Cryptosystems"", Communications of the ACM, v. 21, n. 2,               Feb 1978, pp. 120-126.     [SEQNUM]   Bellovin, S., ""Defending Against Sequence Number Attacks"",               RFC 1948, May 1996.     [SSL2]     Hickman, Kipp, ""The SSL Protocol"", Netscape Communications               Corp., Feb 9, 1995.     [SSL3]     A. Freier, P. Karlton, and P. Kocher, ""The SSL 3.0               Protocol"", Netscape Communications Corp., Nov 18, 1996.     [SUBGROUP] Zuccherato, R., ""Methods for Avoiding the ""Small-Subgroup""               Attacks on the Diffie-Hellman Key Agreement Method for               S/MIME"", RFC 2785, March 2000.     [TCP]      Postel, J., ""Transmission Control Protocol"", STD 7, RFC               793, September 1981.     [TIMING]   Boneh, D., Brumley, D., ""Remote timing attacks are               practical"", USENIX Security Symposium 2003.     [TLSAES]   Chown, P., ""Advanced Encryption Standard (AES)               Ciphersuites for Transport Layer Security (TLS)"", RFC               3268, June 2002.     [TLSECC]   Blake-Wilson, S., Bolyard, N., Gupta, V., Hawk, C., and B.               Moeller, ""Elliptic Curve Cryptography (ECC) Cipher Suites               for Transport Layer Security (TLS)"", RFC 4492, May 2006.     [TLSEXT]   Eastlake, D., 3rd, ""Transport Layer Security (TLS)               Extensions:  Extension Definitions"", Work in Progress,               February 2008.      Dierks & Rescorla           Standards Track                   [Page 100]   RFC 5246                          TLS                        August 2008      [TLSPGP]   Mavrogiannopoulos, N., ""Using OpenPGP Keys for Transport               Layer Security (TLS) Authentication"", RFC 5081, November               2007.     [TLSPSK]   Eronen, P., Ed., and H. Tschofenig, Ed., ""Pre-Shared Key               Ciphersuites for Transport Layer Security (TLS)"", RFC               4279, December 2005.     [TLS1.0]   Dierks, T. and C. Allen, ""The TLS Protocol Version 1.0"",               RFC 2246, January 1999.     [TLS1.1]   Dierks, T. and E. Rescorla, ""The Transport Layer Security               (TLS) Protocol Version 1.1"", RFC 4346, April 2006.     [X501]     ITU-T Recommendation X.501: Information Technology - Open               Systems Interconnection - The Directory: Models, 1993.     [XDR]      Eisler, M., Ed., ""XDR: External Data Representation               Standard"", STD 67, RFC 4506, May 2006.  Working Group Information     The discussion list for the IETF TLS working group is located at the    e-mail address <tls@ietf.org>. Information on the group and    information on how to subscribe to the list is at    <https://www1.ietf.org/mailman/listinfo/tls>     Archives of the list can be found at:    <http://www.ietf.org/mail-archive/web/tls/current/index.html>  Contributors     Christopher Allen (co-editor of TLS 1.0)    Alacrity Ventures    ChristopherA@AlacrityManagement.com     Martin Abadi    University of California, Santa Cruz    abadi@cs.ucsc.edu     Steven M. Bellovin    Columbia University    smb@cs.columbia.edu     Simon Blake-Wilson    BCI    sblakewilson@bcisse.com     Dierks & Rescorla           Standards Track                   [Page 101]   RFC 5246                          TLS                        August 2008      Ran Canetti    IBM    canetti@watson.ibm.com     Pete Chown    Skygate Technology Ltd    pc@skygate.co.uk     Taher Elgamal    taher@securify.com    Securify     Pasi Eronen    pasi.eronen@nokia.com    Nokia     Anil Gangolli    anil@busybuddha.org     Kipp Hickman     Alfred Hoenes     David Hopwood    Independent Consultant    david.hopwood@blueyonder.co.uk     Phil Karlton (co-author of SSLv3)     Paul Kocher (co-author of SSLv3)    Cryptography Research    paul@cryptography.com     Hugo Krawczyk    IBM    hugo@ee.technion.ac.il     Jan Mikkelsen    Transactionware    janm@transactionware.com     Magnus Nystrom    RSA Security    magnus@rsasecurity.com     Robert Relyea    Netscape Communications    relyea@netscape.com    Dierks & Rescorla           Standards Track                   [Page 102]   RFC 5246                          TLS                        August 2008      Jim Roskind    Netscape Communications    jar@netscape.com     Michael Sabin     Dan Simon    Microsoft, Inc.    dansimon@microsoft.com     Tom Weinstein     Tim Wright    Vodafone    timothy.wright@vodafone.com  Editors' Addresses     Tim Dierks    Independent    EMail: tim@dierks.org     Eric Rescorla    RTFM, Inc.    EMail: ekr@rtfm.com                           Dierks & Rescorla           Standards Track                   [Page 103]   RFC 5246                          TLS                        August 2008   Full Copyright Statement     Copyright (C) The IETF Trust (2008).     This document is subject to the rights, licenses and restrictions    contained in BCP 78, and except as set forth therein, the authors    retain all their rights.     This document and the information contained herein are provided on an    ""AS IS"" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS    OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND    THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS    OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF    THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED    WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  Intellectual Property     The IETF takes no position regarding the validity or scope of any    Intellectual Property Rights or other rights that might be claimed to    pertain to the implementation or use of the technology described in    this document or the extent to which any license under such rights    might or might not be available; nor does it represent that it has    made any independent effort to identify any such rights.  Information    on the procedures with respect to rights in RFC documents can be    found in BCP 78 and BCP 79.     Copies of IPR disclosures made to the IETF Secretariat and any    assurances of licenses to be made available, or the result of an    attempt made to obtain a general license or permission for the use of    such proprietary rights by implementers or users of this    specification can be obtained from the IETF on-line IPR repository at    http://www.ietf.org/ipr.     The IETF invites any interested party to bring to its attention any    copyrights, patents or patent applications, or other proprietary    rights that may cover technology that may be required to implement    this standard.  Please address the information to the IETF at    ietf-ipr@ietf.org.             Dierks & Rescorla           Standards Track                   [Page 104]   Html markup produced by rfcmarkup 1.118, available from https://tools.ietf.org/tools/rfcmarkup/"	"null"	"null"	"— a Rust implementation of"	"true"
"Cryptography"	"libOctavo/octavo"	"https://github.com/libOctavo/octavo"	"— Modular hash and crypto library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"101"	"8"	"15"	"GitHub - libOctavo/octavo: Highly modular & configurable hash & crypto library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 101 Fork 15 libOctavo/octavo Code Issues 6 Pull requests 0 Wiki Pulse Graphs Highly modular & configurable hash & crypto library http://liboctavo.github.io/octavo 245 commits 4 branches 11 releases Fetching contributors Rust 99.9% Makefile 0.1% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags aes auto gh-pages master Nothing to show v0.1.1 v0.1.0 mac/v0.1.1 mac/v0.1.0 kdf/v0.1.1 kdf/v0.1.0 digest/v0.1.2 digest/v0.1.1 digest/v0.1.0 crypto/v0.1.1 crypto/v0.1.0 Nothing to show New pull request Latest commit ac1659e Jul 15, 2016 homu Auto merge of #86 - palaviv:Diffie-Hellman, r=hauleth … Diffie-Hellman implementation  This is an implementation of the Diffie-Hellman exchange algorithm. I have a PR with the same implementation with small changes to DaGenix/rust-crypto#379. I would appreciate any feedback. Permalink Failed to load latest commit information. crypto feat(asymmetric::dh): Diffie-Hellman implementation Jul 15, 2016 digest chore(crypto): remove unneeded `num` dependencies Apr 20, 2016 docs Update public key [skip ci] Sep 23, 2015 examples feat(digest::whirlpool): WHIRLPOOL implementation Apr 19, 2016 kdf docs(digest::blake2): Document BLAKE2 Apr 14, 2016 mac docs(digest::blake2): Document BLAKE2 Apr 14, 2016 src fix(octavo): typo Apr 20, 2016 tests fix(crypto): `BigInt` references Apr 20, 2016 tools feat(): TravisCI should use Makefile to test crates Mar 28, 2016 .clog.toml chore(): Add changelog Apr 12, 2016 .gitignore fix(utils::buffer): Performance issues Nov 20, 2015 .projections.json test(): move tests to separate folder Dec 17, 2015 .travis.yml fix(.travis.yml): Use standard `cargo` instead of `travis-cargo` Apr 8, 2016 CHANGELOG.md chore(): Add changelog Apr 12, 2016 CONTRIBUTING.md chore(): Update CONTRIBUTING guide Apr 13, 2016 Cargo.toml chore(crypto): remove unneeded `num` dependencies Apr 20, 2016 LICENSE Update license Oct 26, 2015 Makefile feat(): Add main crate to Makefile Apr 8, 2016 README.md chore(misc): change GetBadges shield in README.md Jan 28, 2016 graph.svg chore(crypto): remove unneeded `num` dependencies Apr 20, 2016 README.md Octavo Highly modular & configurable hash & crypto library written in pure Rust. Installation [dependencies] octavo = { git = ""https://github.com/libOctavo/octavo"" } WARNING!!! Octavo is on very early stage of development. There is hell lot of issues and vulnerabilities to enormous kind of attacks! Do not use in production code (yet)! Contributing You can help with this project in 3 ways: Help me code this up! Just fork, create branch, code & pull-request. Yay! Audit code or use it. If you find bug just fill the issue, it is great help also. Support us at Gratipay. Full disclosure If you find security bug then contact me via mail lukasz@niemier.pl using mine PGP key Licence Check LICENSE file. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libOctavo/octavo"	"— Modular hash and crypto library in Rust"	"true"
"Cryptography"	""	"https://travis-ci.org/libOctavo/octavo"	"— Modular hash and crypto library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Modular hash and crypto library in Rust"	"true"
"Cryptography"	"sfackler/rust-native-tls"	"https://github.com/sfackler/rust-native-tls"	"Bindings for native TLS libraries"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"6"	"4"	"GitHub - sfackler/rust-native-tls Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 4 Fork 4 sfackler/rust-native-tls Code Issues 1 Pull requests 0 Pulse Graphs No description or website provided. 24 commits 1 branch 0 releases 1 contributor Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 4804a2e Jul 14, 2016 sfackler Add some better configs for openssl Permalink Failed to load latest commit information. src Add some better configs for openssl Jul 14, 2016 .gitignore Initial commit Apr 16, 2016 .travis.yml Test on 1.9 Jun 1, 2016 Cargo.toml Stop overriding winapi Jul 13, 2016 appveyor.yml Test on 1.9 Jun 2, 2016 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sfackler/rust-native-tls"	"Bindings for native TLS libraries"	"true"
"Cryptography"	"sfackler/rust-openssl"	"https://github.com/sfackler/rust-openssl"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"184"	"13"	"144"	"GitHub - sfackler/rust-openssl: OpenSSL bindings for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 184 Fork 144 sfackler/rust-openssl Code Issues 32 Pull requests 9 Pulse Graphs OpenSSL bindings for Rust 1,108 commits 6 branches 65 releases 105 contributors Rust 98.4% C 1.1% Shell 0.5% Rust C Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags breaks gh-pages master release revert-336-x509-pky-clone revert-344-revert-336-x509-pky-clone Nothing to show v0.7.14 v0.7.13 v0.7.12 v0.7.11 v0.7.10 v0.7.9 v0.7.8 v0.7.7 v0.7.6 v0.7.5 v0.7.4 v0.7.3 v0.7.2 v0.7.1 v0.7.0 v0.6.7 v0.6.6 v0.6.5 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.0 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.6 v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.18 v0.2.17 v0.2.16 v0.2.15 v0.2.14 v0.2.13 v0.2.12 v0.2.11 v0.2.10 v0.2.9 v0.2.8 v0.2.7 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.1 v0.1.0 v0.1 v0.0.2 rust-0.12 rust-0.11 rust-0.10 Nothing to show New pull request Latest commit 85f5b86 Jul 3, 2016 sfackler committed on GitHub Merge pull request #410 from jonas-schievink/passwd-callbacks … Password callbacks Permalink Failed to load latest commit information. openssl-sys-extras Release v0.7.14 Jul 1, 2016 openssl-sys Release v0.7.14 Jul 1, 2016 openssl Merge pull request #410 from jonas-schievink/passwd-callbacks Jul 3, 2016 .gitignore Move docs to this repo and auto build Feb 7, 2015 .travis.yml Test on 1.8 Jun 26, 2016 README.md Release v0.7.14 Jul 1, 2016 THIRD_PARTY Add OpenSSL license to THIRD_PARTY Feb 13, 2015 appveyor.yml fixes typo in appveyor config May 4, 2016 build_docs.sh Drop verbose flag Dec 18, 2015 README.md rust-openssl Documentation. Building rust-openssl depends on both the OpenSSL runtime libraries and headers. Linux On Linux, you can install OpenSSL via your package manager. The headers are sometimes provided in a separate package than the runtime libraries - look for something like openssl-devel or libssl-dev. # On Ubuntu sudo apt-get install libssl-dev # On Arch Linux sudo pacman -S openssl # On Fedora sudo dnf install openssl-devel OSX OpenSSL 0.9.8 is preinstalled on OSX. Some features are only available when linking against OpenSSL 1.0.0 or greater; see below on how to point rust-openssl to a separate installation. OSX releases starting at 10.11, ""El Capitan"", no longer include OpenSSL headers which will prevent the openssl crate from compiling. For OSX 10.11 you can use brew to install OpenSSL and then set the environment variables as described below. brew install openssl export OPENSSL_INCLUDE_DIR=`brew --prefix openssl`/include export OPENSSL_LIB_DIR=`brew --prefix openssl`/lib Windows On Windows, consider building with mingw-w64. Build script will try to find mingw in PATH environment variable to provide Cargo with location where openssl libs from mingw-w64 package may be found. mingw-w64 can be easily installed by using MSYS2. Install MSYS2 according to the instructions, and then, from an MSYS2 Shell, install mingw-w64: 32-bit: pacman -S mingw-w64-i686-gcc 64-bit pacman -S mingw-w64-x86_64-gcc and then install the mingw-w64 toolchain. 32-bit: pacman -S mingw-w64-i686-toolchain 64-bit: pacman -S mingw-w64-x86_64-toolchain Alternatively, install OpenSSL from here. Cargo will not be able to find OpenSSL if it's installed to the default location. You can either copy the include/openssl directory, libssl32.dll, and libeay32.dll to locations that Cargo can find or pass the location to Cargo via environment variables: env OPENSSL_LIB_DIR=C:/OpenSSL-Win64 OPENSSL_INCLUDE_DIR=C:/OpenSSL-Win64/include cargo build Manual configuration rust-openssl's build script will by default attempt to locate OpenSSL via pkg-config. This will not work in some situations, for example, on systems that don't have pkg-config, when cross compiling, or when using a copy of OpenSSL other than the normal system install. The build script can be configured via environment variables: OPENSSL_LIB_DIR - If specified, a directory that will be used to find OpenSSL runtime libraries. OPENSSL_INCLUDE_DIR - If specified, a directory that will be used to find OpenSSL headers. OPENSSL_STATIC - If specified, OpenSSL libraries will be statically rather than dynamically linked. If either OPENSSL_LIB_DIR or OPENSSL_INCLUDE_DIR are specified, then the build script will skip the pkg-config step. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sfackler/rust-openssl"	"— bindings"	"true"
"Cryptography"	"OpenSSL"	"https://www.openssl.org/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"OpenSSL OpenSSL Cryptography and SSL/TLS Toolkit Home Downloads Docs News Policies Community Support Welcome to OpenSSL! OpenSSL is an open source project that provides a robust, commercial-grade, and full-featured toolkit for the Transport Layer Security (TLS) and Secure Sockets Layer (SSL) protocols. It is also a general-purpose cryptography library. For more information about the team and community around the project, or to start making your own contributions, start with the community page. To get the latest news, download the source, and so on, please see the sidebar or the buttons at the top of every page. The OpenSSL toolkit is licensed under an Apache-style license, which basically means that you are free to get and use it for commercial and non-commercial purposes subject to some simple license conditions. Latest News Date Item 03-May-2016 Security Advisory: several security fixes 03-May-2016 OpenSSL 1.0.2h is now available, including bug and security fixes 03-May-2016 OpenSSL 1.0.1t is now available, including bug and security fixes 28-Apr-2016 OpenSSL 1.0.2h and 1.0.1t security releases due 3rd May 2016 19-Apr-2016 Beta 2 (pre-release 5) of OpenSSL 1.1.0 is now available: please download and test it More...   Legalities Please remember that export/import and/or use of strong cryptography software, providing cryptography hooks, or even just communicating technical details about cryptography software is illegal in some parts of the world. So when you import this package to your country, re-distribute it from there or even just email technical suggestions or even source patches to the authors or other people you are strongly advised to pay close attention to any laws or regulations which apply to you. The authors of openssl are not liable for any violations you make here. So be careful, it is your responsibility. Acknowledgement This product includes cryptographic software written by Eric Young. This product includes software written by Tim Hudson (tjh@cryptsoft.com). You are here: Home Sitemap Home Downloads: Source code Docs: FAQ, FIPS, manpages, ... News: Latest information Policies: How we operate Community: Blog, bugs, email, ... Support: Commercial support and contracting Sponsor Acknowledgements Please report problems with this website to webmaster at openssl.org. Copyright © 1999-2016, OpenSSL Software Foundation."	"null"	"null"	"— bindings"	"true"
"Cryptography"	""	"https://travis-ci.org/sfackler/rust-openssl"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Cryptography"	"sfackler/rust-security-framework"	"https://github.com/sfackler/rust-security-framework"	"Bindings for Security Framework (OSX native crypto)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"1"	"3"	"GitHub - sfackler/rust-security-framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 2 Fork 3 sfackler/rust-security-framework Code Issues 1 Pull requests 0 Pulse Graphs No description or website provided. 187 commits 3 branches 6 releases Fetching contributors Rust 99.8% Shell 0.2% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master release Nothing to show v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 5e1efe4 Jun 16, 2016 sfackler Merge branch 'release' Permalink Failed to load latest commit information. security-framework-sys Release v0.1.5 Jun 16, 2016 security-framework Release v0.1.5 Jun 17, 2016 .gitignore Start of keychain search API Oct 18, 2015 .travis.yml Test on multiple versions of OS X. Apr 17, 2016 LICENSE-APACHE Relicense MIT/Apache-2.0 Jan 11, 2016 LICENSE-MIT Relicense MIT/Apache-2.0 Jan 12, 2016 README.md Release v0.1.4 Apr 16, 2016 build_docs.sh Add doc build script Dec 20, 2015 README.md rust-security-framework Documentation Bindings to OSX's Security Framework. License Licensed under either of Apache License, Version 2.0 (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sfackler/rust-security-framework"	"Bindings for Security Framework (OSX native crypto)"	"true"
"Cryptography"	"steffengy/schannel-rs"	"https://github.com/steffengy/schannel-rs"	"Bindings for Schannel (Windows native TLS)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"4"	"5"	"GitHub - steffengy/schannel-rs: Schannel POC for rust, provides an interface for hyper (SSL/TLS using windows apis) - rewrite branch @ https://github.com/sfackler/schannel-rs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 2 Fork 5 steffengy/schannel-rs Code Issues 0 Pull requests 1 Pulse Graphs Schannel POC for rust, provides an interface for hyper (SSL/TLS using windows apis) - rewrite branch @ https://github.com/sfackler/schannel-rs 20 commits 3 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master rewrite_fix Nothing to show Nothing to show New pull request Latest commit 44e699d Mar 2, 2016 steffengy 0.0.2: push version [ci skip] Permalink Failed to load latest commit information. src tests .gitattributes .gitignore Cargo.toml LICENSE.md README.md appveyor.yml README.md schannel-rs Documentation Initial schannel implementation to allow https without openssl, more to come. A simplified version of using the schannel API, can be found here Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/steffengy/schannel-rs"	"Bindings for Schannel (Windows native TLS)"	"true"
"Database"	"database"	"https://crates.io/keywords/database"	"Bindings for Schannel (Windows native TLS)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"Bindings for Schannel (Windows native TLS)"	"true"
"Database"	"sfackler/r2d2"	"https://github.com/sfackler/r2d2"	"— generic connection pool"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"89"	"7"	"8"	"GitHub - sfackler/r2d2: A generic connection pool for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 89 Fork 8 sfackler/r2d2 Code Issues 1 Pull requests 0 Pulse Graphs A generic connection pool for Rust 252 commits 6 branches 26 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags breaks gh-pages master release sadness std-time Nothing to show v0.7.0 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.8 v0.5.7 v0.5.6 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.3.0 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 4acaba3 Jun 29, 2016 sfackler Don't store idle_start in active connections Permalink Failed to load latest commit information. src Don't store idle_start in active connections Jun 29, 2016 .gitignore Add a ScheduledTaskPool Jan 18, 2015 .travis.yml Test on 1.8 Apr 14, 2016 Cargo.toml Use antidote mutexes and condvars Jun 28, 2016 LICENSE-APACHE Relicense under dual MIT/Apache-2.0 Mar 28, 2016 LICENSE-MIT Bump copyright year Mar 28, 2016 README.md Release v0.7.0 Apr 14, 2016 README.md r2d2 A generic connection pool for Rust. Documentation Opening a new database connection every time one is needed is both inefficient and can lead to resource exhaustion under high traffic conditions. A connection pool maintains a set of open connections to a database, handing them out for repeated use. r2d2 is agnostic to the connection type it is managing. Implementors of the ManageConnection trait provide the database-specific logic to create and check the health of connections. A (possibly not exhaustive) list of adaptors for different backends: Backend Adaptor Crate rust-postgres r2d2-postgres redis-rs r2d2-redis rust-mysql-simple r2d2-mysql rusqlite r2d2-sqlite rusted-cypher r2d2-cypher diesel r2d2-diesel Example Using an imaginary ""foodb"" database. use std::thread;  extern crate r2d2; extern crate r2d2_foodb;  fn main() {     let config = r2d2::Config::builder()         .pool_size(15)         .build();     let manager = r2d2_foodb::FooConnectionManager::new(""localhost:1234"");      let pool = r2d2::Pool::new(config, manager).unwrap();      for _ in 0..20 {         let pool = pool.clone();         thread::spawn(move || {             let conn = pool.get().unwrap();             // use the connection             // it will be returned to the pool when it falls out of scope.         })     } } License Licensed under either of Apache License, Version 2.0 (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sfackler/r2d2"	"— generic connection pool"	"true"
"Database"	""	"https://travis-ci.org/sfackler/r2d2"	"— generic connection pool"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— generic connection pool"	"true"
"Database"	"nosql"	"https://crates.io/keywords/nosql"	"NoSQL []"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"NoSQL []"	"true"
"Database"	"cassandra"	"https://crates.io/keywords/cassandra"	"Cassandra [, ]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"Cassandra [, ]"	"true"
"Database"	"cql"	"https://crates.io/keywords/cql"	"Cassandra [, ]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"Cassandra [, ]"	"true"
"Database"	"tupshin/cassandra-rust"	"https://github.com/tupshin/cassandra-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"34"	"5"	"9"	"GitHub - tupshin/cassandra-rs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 34 Fork 9 tupshin/cassandra-rs Code Issues 5 Pull requests 2 Pulse Graphs No description or website provided. 185 commits 4 branches 11 releases Fetching contributors Rust 96.8% RenderScript 3.2% Rust RenderScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master peg_parser prepare_macro Nothing to show 0.6.10 0.6.9 0.6.8 0.6.7 0.6.6 0.6.5 0.6.4 0.6.3 0.6.2 0.6.1 0.6.0 Nothing to show New pull request Latest commit 80351a9 Jun 29, 2016 Tupshin Harper made cargo test work. 0.7.2 Permalink Failed to load latest commit information. src made cargo test work. 0.7.2 Jun 29, 2016 .gitignore t3 Jun 29, 2016 .gitmodules 0.4 Jul 5, 2015 Cargo.toml made cargo test work. 0.7.2 Jun 30, 2016 LICENSE Initial commit Jan 10, 2015 README.md add some syntax highlighting in the README Mar 7, 2016 build.rs 0.7.0 Jun 29, 2016 rustfmt.toml removed all old protected modules and replaced with Protected trait Jan 18, 2016 travis.yml cql_fi -> cassandra Dec 24, 2015 README.md cassandra-rs This is a (hopefully) maintained rust project that unsafely exposes the cpp driver at https://github.com/datastax/cpp-driver/ in a somewhat-sane crate. For the wrapper to work, you must first have installed the datastax-cpp driver. Follow the steps on the cpp driver docs to do so. Make sure that the driver (specifically libcassandra_static.a and libcassandra.so) are in your /usr/local/lib64/ directory You can use it from cargo with     [dependencies.cassandra]     git = ""https://github.com/tupshin/cassandra-rs"" Or just     [dependencies]     cassandra=""*"" Here's a straightforward example found in simple.rs:     extern crate cassandra;     use cassandra::*;      static QUERY:&'static str = ""SELECT keyspace_name FROM system.schema_keyspaces;"";     static COL_NAME:&'static str = ""keyspace_name"";     static CONTACT_POINTS:&'static str = ""127.0.0.1"";      fn main() {         let mut cluster = Cluster::new();         cluster             .set_contact_points(CONTACT_POINTS).unwrap()             .set_load_balance_round_robin().unwrap();         let session = cluster.connect().unwrap();         let result = session.execute(QUERY, 0).wait().unwrap();         println!(""{}"",result);         for row in result.iter() {             println!(""ks name = {}"", row.get_column_by_name(COL_NAME));         }         session.close().wait().unwrap();     } There's additional examples included with the project in src/examples. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tupshin/cassandra-rs"	"— bindings"	"true"
"Database"	"Cassandra"	"http://cassandra.apache.org"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The Apache Cassandra Project Cassandra Home Download Getting Started Planet Cassandra Contribute Welcome Video Slides Welcome to Apache Cassandra ™ The Apache Cassandra database is the right choice when you need scalability and high availability without compromising performance. Linear scalability and proven fault-tolerance on commodity hardware or cloud infrastructure make it the perfect platform for mission-critical data. Cassandra's support for replicating across multiple datacenters is best-in-class, providing lower latency for your users and the peace of mind of knowing that you can survive regional outages. Cassandra's data model offers the convenience of column indexes with the performance of log-structured updates, strong support for denormalization and materialized views, and powerful built-in caching. Cassandra at NoSql Matters 2012 from jbellis Download Tick-Tock release 3.7 (Changes) 3.0.x release 3.0.8 (Changes) 2.2.x release 2.2.7 (Changes) Download options Overview Proven Cassandra is in use at Constant Contact, CERN, Comcast, eBay, GitHub, GoDaddy, Hulu, Instagram, Intuit, Netflix, Reddit, The Weather Channel, and over 1500 more companies that have large, active data sets. One of the largest production deployments is Apple's, with over 75,000 nodes storing over 10 PB of data. Other large Cassandra installations include Netflix (2,500 nodes, 420 TB, over 1 trillion requests per day), Chinese search engine Easou (270 nodes, 300 TB, over 800 million reqests per day), and eBay (over 100 nodes, 250 TB). Fault Tolerant Data is automatically replicated to multiple nodes for fault-tolerance. Replication across multiple data centers is supported. Failed nodes can be replaced with no downtime. Performant Cassandra consistently outperforms popular NoSQL alternatives in benchmarks and real applications, primarily because of fundamental architectural choices. Decentralized There are no single points of failure. There are no network bottlenecks. Every node in the cluster is identical. Durable Cassandra is suitable for applications that can't afford to lose data, even when an entire data center goes down. You're in Control Choose between synchronous or asynchronous replication for each update. Highly available asynchronous operations are optimized with features like Hinted Handoff and Read Repair. Elastic Read and write throughput both increase linearly as new machines are added, with no downtime or interruption to applications. Professionally Supported Cassandra support contracts and services are available from third parties. Learn More On The Web Getting Started News and articles FAQ Wiki Discussion Stack Overflow – Q&A about using Cassandra. Users list – General mailing list for users. Subscribe | Unsubscribe | Archives Developers list – Development related mailing list. Subscribe | Unsubscribe | Archives Commits list – Commit notifications. Subscribe | Unsubscribe | Archives Chat Many of the Cassandra developers and community members hang out in the #cassandra channel on irc.freenode.net. If you are new to IRC, you can use a web-based client. Dead Trees Cassandra: The Definitive Guide, 2nd Edition, by Jeff Carpenter and Eben Hewitt. Updated for Cassandra 3.0 Copyright © 2015 The Apache Software Foundation. Licensed under the Apache License, Version 2.0. Apache and the Apache feather logo are trademarks of The Apache Software Foundation. Privacy Policy."	"null"	"null"	"— bindings"	"true"
"Database"	"couchdb"	"https://crates.io/keywords/couchdb"	"CouchDB []"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"CouchDB []"	"true"
"Database"	"couchdb-rs/couchdb"	"https://github.com/couchdb-rs/couchdb"	"[] — a Rust client for the CouchDB REST API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"1"	"2"	"GitHub - couchdb-rs/couchdb: CouchDB client library for the Rust programming language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 6 Fork 2 couchdb-rs/couchdb Code Issues 11 Pull requests 0 Wiki Pulse Graphs CouchDB client library for the Rust programming language 128 commits 2 branches 9 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.5.1 v0.5.0 v0.4.0 v0.3.1 v0.3.0 v0.2.0 v0.1.0 v0.0.1 v0.0.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src tests .gitignore .travis.yml CHANGELOG.md Cargo.toml LICENSE-APACHE LICENSE-MIT README.md checklist.md rustfmt.toml README.md CouchDB This project is deprecated. A new crate, Chill, is the way forward and will provide a safer and more useful abstraction, as well as eliminating some inefficiencies. You can read a little bit about the rationale here. At the time of writing this (2016-03-26), Chill has minimal coverage of the CouchDB API. I expect Chill to catch up to and surpass this crate in coverage by late spring of 2016. This project provides a CouchDB client-side library for the Rust programming language. The library provides low-level access to individual HTTP actions—e.g., PUT database, GET document, etc. It handles the menial task of sending requests and receiving responses, thereby allowing application programmers to focus on their business logic. Project roadmap The latest release is v0.5.1, which was released 2016-02-12. v0.5.1 change log. v0.5.1 documentation. v0.5.1 issues. v0.5.1 crates.io page. There is no plan to make another release. License CouchDB-rs is licensed under either of: Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0), or MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT). Feedback Do you find this crate useful? Not useful? Please send feedback! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/couchdb-rs/couchdb"	"[] — a Rust client for the CouchDB REST API"	"true"
"Database"	"couchdb"	"https://crates.io/crates/couchdb"	"[] — a Rust client for the CouchDB REST API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — a Rust client for the CouchDB REST API"	"true"
"Database"	""	"https://travis-ci.org/couchdb-rs/couchdb"	"[] — a Rust client for the CouchDB REST API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — a Rust client for the CouchDB REST API"	"true"
"Database"	"elasticsearch"	"https://crates.io/keywords/elasticsearch"	"Elasticsearch []"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"Elasticsearch []"	"true"
"Database"	"benashford/rs-es"	"https://github.com/benashford/rs-es"	"[] — a Rust client for the REST API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"79"	"5"	"11"	"GitHub - benashford/rs-es: A Rust client for the ElasticSearch REST API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 79 Fork 11 benashford/rs-es Code Issues 43 Pull requests 1 Pulse Graphs A Rust client for the ElasticSearch REST API 651 commits 5 branches 0 releases 9 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.2-releases 0.3-releases fix-nightly indices-api master Nothing to show Nothing to show New pull request Latest commit 906ad7e Jul 4, 2016 benashford Fix Serde dependencies Permalink Failed to load latest commit information. devbox Use new rustup devbox May 22, 2016 src Merge pull request #79 from CanalTP/add_post_log Jun 27, 2016 .gitignore Attempt to hand-edit query.rs Feb 16, 2016 .travis.yml Do the full build in this branch May 4, 2016 Cargo.toml Fix Serde dependencies Jul 4, 2016 LICENSE Add licence May 21, 2015 README.md Additional badges on the README Jun 4, 2016 build.rs Fix build Jun 16, 2016 docker-dev.yml Run ElasticSearch 2.0 and fix all tests, etc. Feb 8, 2016 README.md rs-es Introduction An experimental ElasticSearch client for Rust via the REST API. Development is ongoing, and is experimental, as such breaking changes are likely at any time. Also, large parts of the ElasticSearch API are currently unimplemented. Versions up-to and including 0.2 of rs-es targetted ElasticSearch 1.6.x. Starting with 0.3, the baseline has been moved up to ElasticSearch 2.0. Please note, due a minor breaking change between Rust 1.5 and 1.6 the 0.1.x releases of rs-es only work with Rust 1.5 or earlier, the 0.2.x releases only work with Rust 1.6 or later. Not every feature and every option is implemented, this README and the documentation describe what is available. For any errors, omissions, etc., issues and pull requests are welcome. Documentation Full documentation for rs-es. Building and installation crates.io Available from crates.io. Design goals There are two primary goals: 1) to be a full implementation of the ElasticSearch REST API, and 2) to be idiomatic both with ElasticSearch and Rust conventions. The second goal is more difficult to achieve than the first as there are some areas which conflict. A small example of this is the word type, this is a word that refers to the type of an ElasticSearch document but it also a reserved word for definining types in Rust. This means we cannot name a field type for instance, so in this library the document type is always referred to as doc_type instead. Alternatives For an ElasticSearch client for Rust that takes a different approach, allowing free-form query creation, take a look at elasticsearch-rs. Usage guide The client The Client wraps a single HTTP connection to a specified ElasticSearch host/port. (At present there is no connection pooling, each client has one connection; if you need multiple connections you will need multiple clients. This may change in the future). let mut client = Client::new(""localhost"", 9200); Operations The Client provides various operations, which are analogous to the various ElasticSearch APIs. In each case the Client has a function which returns a builder-pattern object that allows additional options to be set. The function itself will require mandatory parameters, everything else is on the builder (e.g. operations that require an index to be specified will have index as a parameter on the function itself). An example of optional parameters is routing. The routing parameter can be set on operations that support it with: op.with_routing(""user123"") See the ElasticSearch guide for the full set of options and what they mean. index An implementation of the Index API. let index_op = client.index(""index_name"", ""type_name""); Returned is an IndexOperation to add additional options. For example, to set an ID and a TTL: index_op.with_id(""ID_VALUE"").with_ttl(""100d""); The document to be indexed has to implement the Serialize trait from the serde library. This can be achieved by either implementing or deriving that on a custom type, or by manually creating a Value object. Calling send submits the index operation and returns an IndexResult: index_op.with_doc(&document).send(); get An implementation of the Get API. Index and ID are mandatory, but type is optional. Some examples: // Finds a document of any type with the given ID let result_1 = client.get(""index_name"", ""ID_VALUE"").send();  // Finds a document of a specific type with the given ID let result_2 = client.get(""index_name"", ""ID_VALUE"").with_doc_type(""type_name"").send(); delete An implementation of the Delete API. Index, type and ID are mandatory. let result = client.delete(""index_name"", ""type_name"", ""ID_VALUE"").send(); refresh Sends a refresh request. // To everything let result = client.refresh().send();  // To specific indexes let result = client.refresh().with_indexes(&[""index_name"", ""other_index_name""]).send(); search_uri An implementation of the Search API using query strings. Example: let result = client.search_uri()                    .with_indexes(&[""index_name""])                    .with_query(""field:value"")                    .send(); search_query An implementation of the Search API using the Query DSL. use rs_es::query::Query; let result = client.search_query()                    .with_indexes(&[""index_name""])                    .with_query(Query::build_match(""field"", ""value"").build())                    .send(); A search query also supports scan and scroll, sorting, and aggregations. bulk An implementation of the Bulk API. This is the preferred way of indexing (or deleting, when Delete-by-Query is removed) many documents. use rs_es::operations::bulk::Action; let result = client.bulk(&vec![Action::index(document1),                                Action::index(document2).with_id(""id"")]); In this case the document can be anything that implements ToJson. Sorting Sorting is supported on all forms of search (by query or by URI), and related operations (e.g. scan and scroll). use rs_es::query::Query; let result = client.search_query()                    .with_query(Query::build_match_all().build())                    .with_sort(&Sort::new(vec![SortField::new(""fieldname"", Order::Desc)]))                    .send(); This is quite unwieldy for simple cases, although it does support the more exotic combinations that ElasticSearch supports; so there are also a number of convenience functions for the more simple cases, e.g. sorting by a field in ascending order: // Omitted the rest of the query .with_sort(&Sort::field(""fieldname"")) Results Each of the defined operations above returns a result. Specifically this is a struct that is a direct mapping to the JSON that ElasticSearch returns. One of the most common return types is that from the search operations, this too mirrors the JSON that ElasticSearch returns. The top-level contains two fields, shards returns counts of successful/failed operations per shard, and hits contains the search results. These results are in the form of another struct that has two fields total the total number of matching results; and hits which is a vector of individual results. The individual results contain meta-data for each hit (such as the score) as well as the source document (unless the query set the various options which would disable or alter this). The type of the source document can be anything that implemented Deserialize. ElasticSearch search may return many different types of document, it also doesn't (by default) enforce any schema, this together means the structure of a returned document may need to be validated before being deserialised. In this case a search result can return a Value from that data can be extracted and/or converted to other structures. The Query DSL Please note: starting with ElasticSearch 2.0, the distinction between queries and filters became one of context, rather than being distinct things; as such, starting with rs-es 0.3.0, the distinction is also removed ElasticSearch offers a rich DSL for searches. It is JSON based, and therefore very easy to use and composable if using from a dynamic language (e.g. Ruby); but Rust, being a staticly-typed language, things are different. The rs_es::query module defines a set of builder objects which can be similarly composed to the same ends. For example: let query = Query::build_bool()     .with_must(vec![Query::build_term(""field_a"",                                       ""value"").build(),                     Query::build_range(""field_b"")                           .with_gte(5)                           .with_lt(10)                           .build()])     .build(); The resulting Query value can be used in the various search/query functions exposed by the client. The implementation makes much use of conversion traits which are used to keep a lid on the verbosity of using such a builder pattern. Scan and scroll When working with large result sets that need to be loaded from an ElasticSearch query, the most efficient way is to use scan and scroll. This is preferred to simple pagination by setting the from option in a search as it will keep resources open server-side allowing the next page to literally carry-on from where it was, rather than having to execute additional queries. The downside to this is that it does require more memory/open file-handles on the server, which could go wrong if there were many un-finished scrolls; for this reason, ElasticSearch recommends a short time-out for such operations, after which it will close all resources whether the client has finished or not, the client is responsible to fetch the next page within the time-out. To use scan and scroll, begin with a search query request, but instead of calling send call scan: let scan = client.search_query()                  .with_indexes(&[""index_name""])                  .with_query(Query::build_match(""field"", ""value"").build())                  .scan(Duration::minutes(1))                  .unwrap(); (Disclaimer: any use of unwrap in this or other example is for the purposes of brevity, obviously real code should handle errors in accordance to the needs of the application.) Then scroll can be called multiple times to fetch each page. Finally close will tell ElasticSearch the scan has finished and it can close any open resources. let first_page = scan.scroll(&mut client); // omitted - calls of subsequent pages scan.close(&mut client).unwrap(); The result of the call to scan does not include a reference to the client, hence the need to pass in a reference to the client in subsequent calls. The advantage of this is that that same client could be used for actions based on each scroll. Scan and scroll with an iterator Also supported is an iterator which will scroll through a scan. let scan_iter = scan.iter(&mut client); The iterator will include a mutable reference to the client, so the same client cannot be used concurrently. However the iterator will automatically call close when it is dropped, this is so the consumer of such an iterator can use iterator functions like take or take_while without having to decide when to call close. The type of each value returned from the iterator is Result<SearchHitsHitsResult, EsError>. If an error is returned than it must be assumed the iterator is closed. The type SearchHitsHitsResult is the same as returned in a normal search (the verbose name is intended to mirror the structure of JSON returned by ElasticSearch). Aggregations Experimental support for aggregations is also supported. client.search_query().with_indexes(&[index_name]).with_aggs(&aggs).send(); Where aggs is a rs_es::operations::search::aggregations::Aggregations, for convenience sake conversion traits are implemented for common patterns; specifically the tuple (&str, Aggregation) for a single aggregation, and Vec<(&str, Aggregation)> for multiple aggregations. Bucket aggregations (i.e. those that define a bucket that can contain sub-aggregations) can also be specified as a tuple (Aggregation, Aggregations). let aggs = Aggregations::from((""str"",                                (Terms::new(""str_field"").with_order(Order::asc(OrderKey::Term)),                                 Aggregations::from((""int"",                                                     Min::new(""int_field""))))));  The above would, when used within a search_query operation, generate a JSON fragment within the search request: ""str"": {     ""terms"": {         ""field"": ""str_field"",         ""order"": {""_term"": ""asc""}     },     ""aggs"": {         ""int"": {             ""field"": ""int_field""         }     } }  The majority, but not all aggregations are currently supported. See the documentation of the aggregations package for details. For example, to get the a reference to the result of the Terms aggregation called str (see above): let terms_result = result.aggs_ref()     .unwrap()     .get(""str"")     .unwrap()     .as_terms()     .unwrap() EXPERIMENTAL: the structure of results may change as it currently feels quite cumbersome. Unimplemented features The ElasticSearch API is made-up of a large number of smaller APIs, the vast majority of which are not yet implemented, although the most frequently used ones (searching, indexing, etc.) are. Some, non-exhaustive, specific TODOs Add a CONTRIBUTING.md Handling API calls that don't deal with JSON objects. Documentation. Potentially: Concrete (de)serialization for aggregations and aggregation results Metric aggregations can have an empty body (check: all or some of them?) when used as a sub-aggregation underneath certain other aggregations. Performance (ensure use of persistent HTTP connections, etc.). All URI options are just String (or things that implement ToString), sometimes the values will be arrays that should be coerced into various formats. Check type of ""timeout"" option on Search... Licence    Copyright 2015-2016 Ben Ashford     Licensed under the Apache License, Version 2.0 (the ""License"");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at        http://www.apache.org/licenses/LICENSE-2.0     Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an ""AS IS"" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/benashford/rs-es"	"[] — a Rust client for the REST API"	"true"
"Database"	"rs-es"	"https://crates.io/crates/rs-es"	"[] — a Rust client for the REST API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — a Rust client for the REST API"	"true"
"Database"	"Elastic"	"https://www.elastic.co/"	"[] — a Rust client for the REST API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Elastic · Revealing Insights from Data (Formerly Elasticsearch) | Elastic Questions? Feedback? powered by Olark live chat software EN English Français Deutsch 日本語 한국어 Products Cloud Services Customers Learn downloads contact EN English Français Deutsch 日本語 한국어 A Search Engine Powering Graph Exploration... Imagine That. Read the Blog Install Now Get Started Are you a newcomer to Elasticsearch? Then this is the video for you. Watch Elasticsearch as a Service Want a hosted Elasticsearch cluster that's fully managed? Get started with Elastic Cloud. Launch Secure Elasticsearch Redefine what's possible with Elasticsearch by securing your data with Shield. Learn Training Elastic trainings are taught by core developers and designed to give you the know-how needed to get up and running while learning our open source projects inside and out. Core Elasticsearch: Developer Hands-On Workshop with Elasticsearch, Logstash & Kibana View All Subscriptions Our subscriptions combine commercial products with enterprise-grade support for your projects in development and production. Designed to accelerate project delivery and solve issues quickly, Elastic subscriptions enrich our open source stack. Learn More Products Elastic's open source solutions solve a growing list of search, log analysis, and analytics challenges across virtually every industry. Our commercial security and monitoring products take our open source stack further by broadening what's possible with your data. Learn More Learn Whether you're a newcomer to Elastic or a seasoned veteran, we've got a multitude of resources — from webinars to blog posts, demos, step-by-step tutorials, forums, and more — to help you do great things with data and inspire you to stay curious. Learn More Who We Are Elastic believes getting immediate, actionable insight from data matters. As the company behind the open source projects — Elasticsearch, Logstash, Kibana, and Beats — designed to take data from any source and search, analyze, and visualize it in real time, Elastic is helping people make sense of data. From stock quotes to Twitter streams, Apache logs to WordPress blogs, our products are extending what's possible with data, delivering on the promise that good things come from connecting the dots. Learn More Be in the know with the latest and greatest from Elastic. Thanks for subscribing! We'll keep you updated with new releases. Products > Elasticsearch Kibana Logstash Beats Elastic Cloud Shield (Security) Watcher (Alerting) Marvel (Monitoring) Graph ES-Hadoop Resources Blog Community Customers & Use Cases Documentation Elastic{ON} Events Forums Meetups Subscriptions Support Portal Videos & Webinars Training About > Careers/Jobs Contact Leadership Partners Press Language English Français Deutsch 日本語 한국어 Trademarks Terms of Use Privacy Cookie Policy Brand © 2016. All Rights Reserved - Elasticsearch Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the Apache Software Foundation in the United States and/or other countries."	"null"	"null"	"[] — a Rust client for the REST API"	"true"
"Database"	""	"https://travis-ci.org/benashford/rs-es"	"[] — a Rust client for the REST API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — a Rust client for the REST API"	"true"
"Database"	"jimmycuadra/rust-etcd"	"https://github.com/jimmycuadra/rust-etcd"	"[] — A client library for CoreOS's etcd."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"47"	"3"	"8"	"GitHub - jimmycuadra/rust-etcd: An etcd client library for Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 47 Fork 8 jimmycuadra/rust-etcd Code Issues 1 Pull requests 0 Pulse Graphs An etcd client library for Rust. http://jimmycuadra.github.io/rust-etcd/etcd/ 101 commits 2 branches 9 releases Fetching contributors Rust 99.6% Makefile 0.4% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.3.1 v0.3.0 v0.2.0 Nothing to show New pull request Latest commit d2b8c8e Jul 6, 2016 jimmycuadra committed on GitHub Merge pull request #11 from emef/fix-syntex-dep … Fix compilation error due to syntex mismatched types Permalink Failed to load latest commit information. src Match exhaustively in the impl of Display for Error to avoid an infin… Apr 14, 2016 tests Add and remove Options in a few places. Mar 30, 2016 .gitignore rust-etcd Apr 11, 2015 .travis.yml Run test suite on Travis CI. Jan 22, 2016 Cargo.toml Bump serde_codgen minor version Jul 5, 2016 LICENSE rust-etcd Apr 11, 2015 Makefile Run test suite on Travis CI. Jan 22, 2016 README.md Fix typo and phrasing in README. [ci skip] Mar 25, 2016 build.rs Fix compilation error due to syntex mismatched types Jul 5, 2016 docker-compose.yml Test HTTPS client. Mar 29, 2016 README.md etcd An etcd client library for Rust. etcd on crates.io Documentation for the latest crates.io release Nightly Rust If you're using etcd in a program that is building on nightly Rust, use this feature profile: [dependencies.etcd] default-features = false features = [""nightly""] version = ""whatever version you want"" If you're building etcd directly from source, the equivalent Cargo commmand is cargo build --no-default-features --features nightly. Running the tests Install Docker and Docker Compose. Run make. This will drop you into a Bash shell in a container. Inside the container, run cargo test. License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jimmycuadra/rust-etcd"	"[] — A client library for CoreOS's etcd."	"true"
"Database"	"etcd"	"https://crates.io/crates/etcd"	"[] — A client library for CoreOS's etcd."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — A client library for CoreOS's etcd."	"true"
"Database"	""	"https://travis-ci.org/jimmycuadra/rust-etcd"	"[] — A client library for CoreOS's etcd."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — A client library for CoreOS's etcd."	"true"
"Database"	"vhbit/sherwood"	"https://github.com/vhbit/sherwood"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"0"	"GitHub - vhbit/sherwood: ForestDB bindings for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 0 vhbit/sherwood Code Issues 0 Pull requests 0 Pulse Graphs ForestDB bindings for Rust http://vhbit.github.io/sherwood/sherwood/ 64 commits 6 branches 0 releases Fetching contributors Rust 99.2% Shell 0.8% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev gh-pages master test-matrix tmp-sync wip Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. libforestdb-sys src Updated docs Feb 5, 2015 .gitignore .gitmodules .travis.yml Cargo.toml LICENSE Initial commit Jan 10, 2015 README.md Update and upload docs Feb 5, 2015 up_doc.sh README.md Sherwood Work-in-progress ForestDB bindings for Rust Documentation (master) Building ForestDB is bundled as submodule so you have to git submodule update --init Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vhbit/sherwood"	"— bindings"	"true"
"Database"	"ForestDB"	"https://github.com/couchbase/forestdb"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"651"	"103"	"103"	"GitHub - couchbase/forestdb: A Fast Key-Value Storage Engine Based on Hierarchical B+-Tree Trie Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 103 Star 651 Fork 103 couchbase/forestdb Code Pull requests 1 Wiki Pulse Graphs A Fast Key-Value Storage Engine Based on Hierarchical B+-Tree Trie 1,388 commits 9 branches 3 releases 15 contributors C++ 97.8% CMake 1.8% Other 0.4% C++ CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0b 4.1.0 4.5.0 gh-pages master sherlock-beta sherlock stable watson Nothing to show v1.2 v1.1 v1.0 Nothing to show New pull request Latest commit cc01455 Jul 15, 2016 abhinavdangeti committed with chiyoung Fix global-buffer-overflow seen with iterator test … 16:02:25 ==38867==ERROR: AddressSanitizer: global-buffer-overflow on address 0x000000620a29 at pc 0x0000004b731c bp 0x7fff2061ea30 sp 0x7fff2061e1e8 16:02:25 READ of size 10 at 0x000000620a29 thread T0 16:02:25     #0 0x4b731b in __asan_memcpy (/home/couchbase/jenkins/workspace/forestdb-addresssanitizer-master/build/forestdb/tests/functional/iterator_functional_test+0x4b731b) 16:02:25     #1 0x5bea16 in FdbIterator::FdbIterator(FdbKvsHandle*, bool, void const*, unsigned long, void const*, unsigned long, unsigned short) /home/couchbase/jenkins/workspace/forestdb-addresssanitizer-master/forestdb/src/iterator.cc:152:13 16:02:25     #2 0x5bff76 in FdbIterator::initIterator(FdbKvsHandle*, FdbIterator**, void const*, unsigned long, void const*, unsigned long, unsigned short) /home/couchbase/jenkins/workspace/forestdb-addresssanitizer-master/forestdb/src/iterator.cc:380:20 16:02:25     #3 0x50f964 in reverse_seek_to_max_nokey() /home/couchbase/jenkins/workspace/forestdb-addresssanitizer-master/forestdb/tests/functional/iterator_functional_test.cc:3004:14 16:02:25     #4 0x51bd47 in main /home/couchbase/jenkins/workspace/forestdb-addresssanitizer-master/forestdb/tests/functional/iterator_functional_test.cc:4136:5 16:02:25     #5 0x2ba7f9bd276c in __libc_start_main /build/buildd/eglibc-2.15/csu/libc-start.c:226 16:02:25     #6 0x446e38 in _start (/home/couchbase/jenkins/workspace/forestdb-addresssanitizer-master/build/forestdb/tests/functional/iterator_functional_test+0x446e38)  Change-Id: Ie5425e6ae95c5198abeaf482b817f42679992d96 Reviewed-on: http://review.couchbase.org/65837 Tested-by: buildbot <build@couchbase.com> Reviewed-by: Chiyoung Seo <chiyoung@couchbase.com> Permalink Failed to load latest commit information. cmake/Modules MB-16608 Support cross-platform encryption options. Nov 11, 2015 include/libforestdb MB-20087: Adding histograms to LATENCY_STATS Jul 14, 2016 option Refactor bgflusher to a singleton C++ class Jul 12, 2016 src Fix global-buffer-overflow seen with iterator test Jul 15, 2016 tests Fix global-buffer-overflow seen with iterator test Jul 15, 2016 tools MB-14193: Expose filemgr_ops interface to external clients Jul 1, 2016 utils MB-20087: Adding histograms to LATENCY_STATS Jul 14, 2016 .gitignore Use hardware accelerated CRC32C if platform library is present Aug 26, 2015 CMakeLists.txt MB-20087: Adding histograms to LATENCY_STATS Jul 14, 2016 INSTALL.md MB-17904 Make C++11 support as a required build environment Mar 18, 2016 LICENSE Add Apache License doc. Jun 3, 2014 README.md Update README.md to add the ForestDB paper link and remove the beta link Jun 1, 2016 README.md ForestDB ForestDB is a key-value storage engine developed by Couchbase Caching and Storage Team, and its main index structure is built from Hierarchical B+-Tree based Trie, called HB+-Trie. ForestDB paper has been published in IEEE Transactions on Computers. Compared with traditional B+-Tree based storage engines, ForestDB shows significantly better read and write performance with less storage overhead. ForestDB has been tested on various server OS environments (Centos, Ubuntu, Mac OS x, Windows) and mobile OSs (iOS, Android). The test coverage stats for ForestDB are available in ForestDB Code Coverage Report. ForestDB benchmark program is also available for performance comparisons with other key-value storage engines. Please visit the ForestDB wiki for more details. Main Features Keys and values are treated as an arbitrary binary. Applications can supply a custom compare function to support a customized key order. A value can be retrieved by its sequence number or disk offset in addition to a key. Write-Ahead Logging (WAL) and its in-memory index are used to reduce the main index lookup / update overhead. Multi-Version Concurrency Control (MVCC) support and append-only storage layer. Multiple snapshot instances can be created from a given ForestDB instance to provide different views of database. Rollback is supported to revert the database to a specific point. Ranged iteration by keys or sequence numbers is supported for a partial or full range lookup operation. Manual or auto compaction can be configured per ForestDB database file. Transactional support with read_committed or read_uncommitted isolation level. How to build See INSTALL.MD How to Use Please refer to Public APIs and tests/fdb_functional_test.cc in ForestDB source directory. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/couchbase/forestdb"	"— bindings"	"true"
"Database"	""	"https://travis-ci.org/vhbit/sherwood"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Database"	"lmdb"	"https://crates.io/keywords/lmdb"	"LMDB []"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"LMDB []"	"true"
"Database"	"vhbit/lmdb-rs"	"https://github.com/vhbit/lmdb-rs"	"[] — bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"47"	"9"	"11"	"GitHub - vhbit/lmdb-rs: Rust bindings for LMDB Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 47 Fork 11 vhbit/lmdb-rs Code Issues 3 Pull requests 2 Pulse Graphs Rust bindings for LMDB 291 commits 8 branches 8 releases 5 contributors Rust 99.5% Shell 0.5% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cursor-items dev gh-pages iterator-redo lmdb-update master trait-based wip Nothing to show 0.7.1 0.7.0 0.6.0 0.5.0 0.4.4 0.4.3 0.4.2 0.4.1 Nothing to show New pull request Latest commit 82f34b7 Jun 13, 2016 vhbit Bumped minor version to 0.7.1 (bitflags update) Permalink Failed to load latest commit information. examples Dropping artificial `mut` limit to create/get_default_db Jul 13, 2015 liblmdb-sys #! Increment minor version due to libc upgrade Mar 2, 2016 src Upgrade to bitflags 0.7 Jun 12, 2016 .gitignore #! Ignore Cargo.lock files Mar 2, 2016 .gitmodules Updated LMDB repository dependency Jul 11, 2015 .travis.yml Updated test matrix for Travis Jun 21, 2015 Cargo.toml Bumped minor version to 0.7.1 (bitflags update) Jun 13, 2016 LICENSE Initial commit Apr 16, 2014 README.md Added cargo version badge Apr 21, 2015 circle.yml Testing with circleci Jul 11, 2015 up_doc.sh Silencing CircleCI warnings for gh-pages branch Oct 1, 2015 README.md lmdb-rs Rust bindings for LMDB Documentation (master branch) Building LMDB is bundled as submodule so update submodules first: git submodule update --init And then cargo build Feedback Feel free to ping me if you have a question or a suggestion how to make it better and idiomatic. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vhbit/lmdb-rs"	"[] — bindings"	"true"
"Database"	"lmdb-rs"	"https://crates.io/crates/lmdb-rs"	"[] — bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — bindings"	"true"
"Database"	"LMDB"	"http://symas.com/mdb/"	"[] — bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Symas Lightning Memory-mapped Database | Enterprise Directory SoftwareEnterprise Directory Software Home Products Symas Enforcement Foundry Symas OpenLDAP Directory Symas Lightning Memory-mapped Database Symas Subscriptions Services Support Programs Professional Services Training Resources Downloads Knowledge Base Technical Support About Team News Blog Careers Contact Symas Lightning Memory-mapped Database Products Symas Enforcement Foundry Symas Lightning Memory-mapped Database Symas OpenLDAP Directory Symas Subscriptions Symas Lightning Memory-mapped Database An ultra-fast, ultra-compact, crash-proof key-value embedded data store. LMDB is an extraordinarily fast, memory-efficient database developed by Symas for the OpenLDAP Project. With memory-mapped files, it has the read performance of a pure in-memory database while retaining the persistence of standard disk-based databases. In other words, it runs like a bat out of hell, performing several times faster than other DB engines — several orders of magnitude faster in many cases. No buffers or caches needed, no memory copies generated. And it’s only limited to the size of the virtual address space, not to the size of physical RAM. Bottom line, with only 32KB of object code, LMDB may seem tiny. But it’s the right 32KB. Compact and efficient are two sides of a coin; that’s part of what makes LMDB so powerful. The features at a glance: Ordered-map interface (keys are always sorted; range lookups are supported) Fully-transactional, full ACID semantics with MVCC Reader/writer transactions (readers don’t block writers; writers don’t block readers) Fully serialized writers (writes are always deadlock-free) Extremely cheap read transactions, which can be performed using no mallocs or any other blocking calls Multi-thread and multi-process concurrency supported; environments may be opened by multiple processes on the same host Multiple sub-databases may be created with transactions covering all sub-databases Memory-mapped, allowing for zero-copy lookup and iteration Maintenance-free (no external process or background cleanup or compaction required) Crash-proof (no logs or crash recovery procedures required) No application-level caching (LMDB fully exploits the operating system’s buffer cache) 32KB of object code and 6KLOC of C Licensed under the OpenLDAP Public License Learn More How Does it Compare to Other Key Value Stores? Where Can I Find Support and Documentation? Where Can I Read the Published Reports? Where Can I See the Project Benchmarks? In What Other Projects is it Available? Are there LMDB Wrappers for Other Languages? Recent Blog Posts Introducing a Security Access Control Engine Inside OpenLDAP Understanding LMDB Database File Sizes and Memory Utilization ApacheDS & Fortress QUICKSTART Apache Fortress 1.0-RC42 Released Recent News Tollgrade Smart Grid EMS LightHouse Vulnerabilities | ICS-CERT https://ics-cert.us-cert.gov/advisories/ICSA-16-194-01 2 days ago GE Proficy HMI SCADA CIMPLICITY Privilege Management Vulnerability | ICS-CERT https://ics-cert.us-cert.gov/advisories/ICSA-16-194-02 2 days ago Find us on Facebook Follow Us on Twitter https://t.co/I4ZFchuPBh https://t.co/ejyvyhLiKr 2 days ago - symascorp https://t.co/Y74jPbsK6D https://t.co/8K4oSPIyPo 2 days ago - symascorp Search Our Site Copyright © 2001–2016, Symas Corporation. All rights reserved. Privacy Statement"	"null"	"null"	"[] — bindings"	"true"
"Database"	""	"https://travis-ci.org/vhbit/lmdb-rs"	"[] — bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — bindings"	"true"
"Database"	"mongodb"	"https://crates.io/keywords/mongodb"	"MongoDB []"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"MongoDB []"	"true"
"Database"	"mongodb-labs/mongo-rust-driver-prototype"	"https://github.com/mongodb-labs/mongo-rust-driver-prototype"	"[] — bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"117"	"16"	"27"	"GitHub - mongodb-labs/mongo-rust-driver-prototype Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 117 Fork 27 mongodb-labs/mongo-rust-driver-prototype Code Issues 4 Pull requests 1 Wiki Pulse Graphs http://mongodbinc-interns.github.io/mongo-rust-driver-prototype/ 403 commits 4 branches 6 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 1.0 Switch branches/tags Branches Tags 1.0 gh-pages master vkarpov15/travis Nothing to show v0.2.0 v0.1.0 0.1.4 0.1.3 0.1.2 0.1.0 Nothing to show New pull request Latest commit 8f6917f May 16, 2016 kyeah Merge pull request #149 from Gyscos/patch-1 … Forward rust-nightly feature to textnonce Permalink Failed to load latest commit information. src Merge pull request #143 from saghm/1.0 Apr 19, 2016 tests update dependencies Mar 30, 2016 .gitignore added test for logging Jul 31, 2015 .gitmodules added automatic update tests Jun 24, 2015 .travis.yml cache cargo builds in travis to reduce build time May 5, 2016 Cargo.lock Forward rust-nightly feature to textnonce May 13, 2016 Cargo.toml Forward rust-nightly feature to textnonce May 13, 2016 LICENSE initial commit for 1.0 branch May 26, 2015 README.md Merge branch '1.0' of github.com:mongodb-labs/mongo-rust-driver-proto… Apr 28, 2016 README.md MongoDB Rust Driver Prototype This branch contains active development on a new driver written for Rust 1.x and MongoDB 3.0.x. The API and implementation are currently subject to change at any time. You should not use this driver in production as it is still under development and is in no way supported by MongoDB Inc. We absolutely encourage you to experiment with it and provide us feedback on the API, design, and implementation. Bug reports and suggestions for improvements are welcomed, as are pull requests. Note: This driver currently only supports MongoDB 3.0.x and 3.2.x. This driver is not expected to work with MongoDB 2.6 or any earlier versions. Do not use this driver if you need support for other versions of MongoDB. Installation Dependencies Rust 1.7+ with Cargo Importing The 1.0 driver is available on crates.io. To use the MongoDB driver in your code, add the bson and mongodb packages to your Cargo.toml: [dependencies] bson = ""0.2.0"" mongodb = ""0.1.4""  Then, import the bson and driver libraries within your code. #[macro_use(bson, doc)] extern crate bson; extern crate mongodb; Examples Here's a basic example of driver usage: use bson::Bson; use mongodb::{Client, ThreadedClient}; use mongodb::db::ThreadedDatabase;  fn main() {     let client = Client::connect(""localhost"", 27017)         .ok().expect(""Failed to initialize standalone client."");      let coll = client.db(""test"").collection(""movies"");      let doc = doc! { ""title"" => ""Jaws"",                       ""array"" => [ 1, 2, 3 ] };      // Insert document into 'test.movies' collection     coll.insert_one(doc.clone(), None)         .ok().expect(""Failed to insert document."");      // Find the document and receive a cursor     let mut cursor = coll.find(Some(doc.clone()), None)         .ok().expect(""Failed to execute find."");      let item = cursor.next();      // cursor.next() returns an Option<Result<Document>>     match item {         Some(Ok(doc)) => match doc.get(""title"") {             Some(&Bson::String(ref title)) => println!(""{}"", title),             _ => panic!(""Expected title to be a string!""),         },         Some(Err(_)) => panic!(""Failed to get next from server!""),         None => panic!(""Server returned no results!""),     } } Documentation Documentation is built using Cargo. The latest documentation can be found here. Generated documentation using cargo doc can be found under the target/doc/ folder. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mongodb-labs/mongo-rust-driver-prototype"	"[] — bindings"	"true"
"Database"	"mongodb"	"https://crates.io/crates/mongodb"	"[] — bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — bindings"	"true"
"Database"	"MongoDB"	"https://www.mongodb.org/"	"[] — bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"MongoDB for GIANT Ideas | MongoDB <iframe src=""//www.googletagmanager.com/ns.html?id=GTM-GDFN&amp;nojscript=true"" height=""0"" width=""0"" style=""display:none;""> Docs Open Source University Download For Giant Ideas Solutions Cloud Customers Resources About Us Try It Now MongoDB 3.2 MongoDB Atlas Download Center Products MongoDB Enterprise Advanced MongoDB Professional MongoDB Atlas Development Support Ops Manager Cloud Manager Compass Connector for BI Connector for Spark Services Consulting Training Log in to Cloud Log in Products MongoDB Atlas MongoDB Cloud Manager Resources MongoDB Atlas FAQ MongoDB Atlas Pricing MongoDB Atlas Training MongoDB Atlas Documentation MongoDB Cloud Manager Documentation Try It Now MongoDB 3.2 MongoDB Atlas Download Center Success Stories Government Retail High Tech Financial Services All industries Use Cases Single View Internet of Things Mobile Real-Time Analytics Personalization Content Management Catalog Try It Now MongoDB 3.2 MongoDB Atlas Download Center Resource Center Webinars Presentations White Papers Datasheets Events Documentation What is MongoDB Architecture Scalability NoSQL Database Explained Stay in the know Sign up for our newsletter Our Company Leadership Investors Office Locations Contact Us Blog Partners Press Room Careers Work at MongoDB Student Opportunities Something GIANT has arrived... MongoDB Atlas Learn More With Expedia Online Travel Gets PersonalLearn More Building on the Best of Relational with the Innovations of NoSQLTry MongoDB for Free Expressive Query Language & Secondary Indexes Access and manipulate your data in sophisticated ways, out of the box. Strong Consistency Provide your users with the most up-to-date copy of the data. Flexibility A data model that accommodates the various types of data dominating modern applications. One that allows faster iteration and improved productivity. Enterprise Management & Integration A database that can be secured, monitored, automated, and integrated with your existing IT infrastructure. Scalability & Performance Scale horizontally to deliver incredible performance at massive scale: millions of ops/sec, 100s of billions of documents, petabytes of data. Mission Critical Native replication synchronizes data across servers, racks and data centers to provide a consistent, high-quality experience for users all around the world. MongoDB 3.2 MongoDB 3.2 is a giant leap forward that helps organizations standardize on a single, modern database for their new, mission-critical applications.Learn More Explore Our Products MongoDB Enterprise Advanced MongoDB Enterprise Advanced features MongoDB Enterprise Server and a finely-tuned package of advanced software, support, certifications, and other services. More than one-third of the Fortune 100 rely on MongoDB Enterprise Advanced to help run their mission critical applications.Learn More MongoDB Enterprise Advanced MongoDB Professional MongoDB Atlas Cloud Manager Events Webinars User Groups University MongoDB Events Find out when the next MongoDB event is happening near you, or meet the MongoDB team at an industry conference or trade show.Learn More ANALYST REPORT MongoDB: A Gartner Magic Quadrant Leader A 2015 Magic Quadrant Leader for Operational Database Management SystemsRead the Report WHITE PAPER What’s New in 3.2 Download the white paper to learn about the latest features in MongoDB 3.2.Download EVENTS Join us in New York for MongoDB World MongoDB World provides your engineering teams with insight into database internals, where they’ll learn best practices from the team that builds the database.Register About About MongoDB, Inc. Careers Contact Us Legal Notices Security Information Office Locations Code of Conduct Learn More NoSQL Database Explained MongoDB Architecture Guide MongoDB Enterprise Advanced MongoDB Atlas MongoDB Engineering Blog FAQ MongoDB University View Course Catalog View Course Schedule Public Training Certification Docs MongoDB Manual Installation FAQ Popular Topics Designing A Database Schema NoSQL Security Best Practices When To Use Apache Spark With MongoDB What Is A Non Relational Database AWS MongoDB Cluster Gartner Dbms Magic Quadrant Gartner NoSQL Database Magic Quadrant NoSQL Database Security Gartner Dmbs Magic Quadrant 2015 Copyright © 2016 MongoDB, Inc. Mongo, MongoDB, and the MongoDB leaf logo are registered trademarks of MongoDB, Inc. Follow Us Github Twitter Facebook Youtube"	"null"	"null"	"[] — bindings"	"true"
"Database"	""	"https://travis-ci.org/mongodb-labs/mongo-rust-driver-prototype"	"[] — bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — bindings"	"true"
"Database"	"cypher"	"https://crates.io/keywords/cypher"	"Neo4j [, ]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"Neo4j [, ]"	"true"
"Database"	"neo4j"	"https://crates.io/keywords/neo4j"	"Neo4j [, ]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"Neo4j [, ]"	"true"
"Database"	"redis"	"https://crates.io/keywords/redis"	"Redis []"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"Redis []"	"true"
"Database"	"mitsuhiko/redis-rs"	"https://github.com/mitsuhiko/redis-rs"	"— library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"460"	"28"	"74"	"GitHub - mitsuhiko/redis-rs: Redis library for rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 28 Star 460 Fork 74 mitsuhiko/redis-rs Code Issues 3 Pull requests 3 Pulse Graphs Redis library for rust http://mitsuhiko.github.io/redis-rs/ 287 commits 4 branches 16 releases 26 contributors Rust 99.1% Other 0.9% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master optional-deps-for-json updated-url Nothing to show 0.6.0 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 0.4.0 0.3.1 0.3.0 0.2.0 0.1.0 0.0.6 0.0.5 0.0.4 0.0.3 0.0.2 Nothing to show New pull request Latest commit fc7007c Jul 15, 2016 mitsuhiko committed on GitHub Merge pull request #97 from dbrgn/changelog … Update changelog for 0.5.4 and 0.6.0 Permalink Failed to load latest commit information. benches Updated for latest rust alpha Feb 27, 2015 examples Fixed a broken example Apr 2, 2015 src Fixed new sha1 api Jul 13, 2016 tests Cleaned up feature code. This fixes #96 Jun 26, 2016 .gitignore Added benchmarks and updated readme Oct 7, 2014 .travis.yml Switch to container based travis builds Jul 26, 2015 CHANGELOG.md Update changelog for 0.5.4 and 0.6.0 Jul 15, 2016 Cargo.toml Bump sha1 Jul 13, 2016 LICENSE Added initial version Dec 29, 2013 Makefile Cleaned up feature code. This fixes #96 Jun 25, 2016 README.md Update README.md to specify latest crate May 6, 2016 upload-docs.sh Use long command names Nov 26, 2014 README.md redis-rs Redis-rs is a high level redis library for Rust. It provides convenient access to all Redis functionality through a very flexible but low-level API. It uses a customizable type conversion trait so that any operation can return results in just the type you are expecting. This makes for a very pleasant development experience. The crate is called redis and you can depend on it via cargo: [dependencies] redis = ""0.5.3"" Documentation on the library can be found at mitsuhiko.github.io/redis-rs. Basic Operation To open a connection you need to create a client and then to fetch a connection from it. In the future there will be a connection pool for those, currently each connection is separate and not pooled. Many commands are implemented through the Commands trait but manual command creation is also possible. extern crate redis; use redis::Commands;  fn fetch_an_integer() -> redis::RedisResult<isize> {     // connect to redis     let client = try!(redis::Client::open(""redis://127.0.0.1/""));     let con = try!(client.get_connection());     // throw away the result, just make sure it does not fail     let _ : () = try!(con.set(""my_key"", 42));     // read back the key and return it.  Because the return value     // from the function is a result for integer this will automatically     // convert into one.     con.get(""my_key"") } Development If you want to develop on the library there are a few commands provided by the makefile: To build: $ make  To test: $ make test  To run benchmarks: $ make bench  To build the docs: $ make docs  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mitsuhiko/redis-rs"	"— library in Rust"	"true"
"Database"	"Redis"	"http://redis.io"	"— library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"18819"	"1852"	"6875"	"GitHub - antirez/redis: Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, HyperLogLogs, Bitmaps. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,852 Star 18,819 Fork 6,875 antirez/redis Code Issues 737 Pull requests 409 Pulse Graphs Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, HyperLogLogs, Bitmaps. http://redis.io 5,867 commits 28 branches 176 releases 205 contributors C 82.0% Tcl 14.7% Ruby 2.3% Shell 0.5% Makefile 0.3% C++ 0.2% C Tcl Ruby Shell Makefile C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: unstable Switch branches/tags Branches Tags 2.2 2.4 2.6 2.8 3.0 3.2 current-client-fix dictc freelist issue_2175 latency lazyfree ldb less-mstime-28 less-mstime lfu memsync multi-if nosync onepass-bulk rdbchanges rssmaxmemory slave-diskless strcompr unstable waitpid-fix zaddnx zunion Nothing to show with-deprecated-diskstore vm-playpen v2.1.1-watch v2.0.0-rc4 v2.0.0-rc3 v2.0.0-rc2 v2.0.0-rc1 v2.0.0-rc1b v1.3.12 v1.3.11 v1.3.10 v1.3.9 v1.3.8 v1.3.7 twitter-20100825 twitter-20100804 3.2.1 3.2.0 3.2.0-rc3 3.2.0-rc2 3.2-rc1 3.0.7 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0 3.0.0-rc6 3.0.0-rc5 3.0.0-rc4 3.0.0-rc3 3.0.0-rc2 3.0.0-rc1 3.0.0-beta8 3.0.0-beta7 3.0.0-beta6 3.0.0-beta5 3.0.0-beta4 3.0.0-beta3 3.0.0-beta2 3.0.0-beta1 3.0-alpha0 2.8.24 2.8.23 2.8.22 2.8.21 2.8.20 2.8.19 2.8.18 2.8.17 2.8.16 2.8.15 2.8.14 2.8.13 2.8.12 2.8.11 2.8.10 2.8.9 2.8.8 2.8.7 2.8.6 2.8.5 2.8.4 2.8.3 2.8.2 2.8.1 2.8.0 2.8.0-rc6 2.8.0-rc5 2.8.0-rc4 2.8.0-rc3 2.8.0-rc2 2.8.0-rc1 2.6.17 2.6.16 2.6.15 2.6.14 2.6.14-2 2.6.14-1 2.6.13 2.6.12 2.6.11 2.6.10 2.6.10-3 2.6.10-2 2.6.10-1 2.6.9 2.6.9-1 2.6.8 2.6.8-1 2.6.7 2.6.7-1 2.6.6 2.6.5 2.6.4 2.6.3 2.6.2 2.6.1 Nothing to show New pull request Latest commit e423f76 Jul 13, 2016 antirez LRU: Make cross-database choices for eviction. … The LRU eviction code used to make local choices: for each DB visited it selected the best key to evict. This was repeated for each DB. However this means that there could be DBs with very frequently accessed keys that are targeted by the LRU algorithm while there were other DBs with many better candidates to expire.  This commit attempts to fix this problem for the LRU policy. However the TTL policy is still not fixed by this commit. The TTL policy will be fixed in a successive commit.  This is an initial (partial because of TTL policy) fix for issue #2647. Permalink Failed to load latest commit information. deps geohash.c and geohash_helper.c are part of Redis. Jul 6, 2016 src LRU: Make cross-database choices for eviction. Jul 13, 2016 tests Regression test for issue #3333. Jul 6, 2016 utils LRU: Fix output fixes to new test-lru.rb. Jul 11, 2016 .gitignore Generate Makefile.dep at every build. Jul 6, 2016 00-RELEASENOTES Fix typo in 00-RELEASENOTES Sep 29, 2014 BUGS Fix typo Sep 29, 2014 CONTRIBUTING Fix typos in documentation Jun 7, 2016 COPYING update copyright year Apr 21, 2015 INSTALL INSTALL now redirects the user to README Feb 5, 2012 MANIFESTO Format to fit 80 columns Feb 8, 2013 Makefile Fix `install` target on OSX (see #495) May 15, 2012 README.md Fixup Jun 7, 2016 redis.conf Enable tcp-keepalive by default. Jun 13, 2016 runtest Check available tcl versions Jan 24, 2013 runtest-cluster Redis Cluster test framework skeleton. Apr 24, 2014 runtest-sentinel Sentinel test files / directories layout improved. Apr 24, 2014 sentinel.conf Fix sentinel.conf typo Sep 29, 2014 README.md This README is just a fast quick start document. You can find more detailed documentation at http://redis.io. What is Redis? Redis is often referred as a data structures server. What this means is that Redis provides access to mutable data structures via a set of commands, which are sent using a server-client model with TCP sockets and a simple protocol. So different processes can query and modify the same data structures in a shared way. Data structures implemented into Redis have a few special properties: Redis cares to store them on disk, even if they are always served and modified into the server memory. This means that Redis is fast, but that is also non-volatile. Implementation of data structures stress on memory efficiency, so data structures inside Redis will likely use less memory compared to the same data structure modeled using an high level programming language. Redis offers a number of features that are natural to find in a database, like replication, tunable levels of durability, cluster, high availability. Another good example is to think of Redis as a more complex version of memcached, where the operations are not just SETs and GETs, but operations to work with complex data types like Lists, Sets, ordered data structures, and so forth. If you want to know more, this is a list of selected starting points: Introduction to Redis data types. http://redis.io/topics/data-types-intro Try Redis directly inside your browser. http://try.redis.io The full list of Redis commands. http://redis.io/commands There is much more inside the Redis official documentation. http://redis.io/documentation Building Redis Redis can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD. We support big endian and little endian architectures, and both 32 bit and 64 bit systems. It may compile on Solaris derived systems (for instance SmartOS) but our support for this platform is best effort and Redis is not guaranteed to work as well as in Linux, OSX, and *BSD there. It is as simple as: % make  You can run a 32 bit Redis binary using: % make 32bit  After building Redis, it is a good idea to test it using: % make test  Fixing build problems with dependencies or cached build options Redis has some dependencies which are included into the deps directory. make does not automatically rebuild dependencies even if something in the source code of dependencies changes. When you update the source code with git pull or when code inside the dependencies tree is modified in any other way, make sure to use the following command in order to really clean everything and rebuild from scratch: make distclean  This will clean: jemalloc, lua, hiredis, linenoise. Also if you force certain build options like 32bit target, no C compiler optimizations (for debugging purposes), and other similar build time options, those options are cached indefinitely until you issue a make distclean command. Fixing problems building 32 bit binaries If after building Redis with a 32 bit target you need to rebuild it with a 64 bit target, or the other way around, you need to perform a make distclean in the root directory of the Redis distribution. In case of build errors when trying to build a 32 bit binary of Redis, try the following steps: Install the packages libc6-dev-i386 (also try g++-multilib). Try using the following command line instead of make 32bit: make CFLAGS=""-m32 -march=native"" LDFLAGS=""-m32"" Allocator Selecting a non-default memory allocator when building Redis is done by setting the MALLOC environment variable. Redis is compiled and linked against libc malloc by default, with the exception of jemalloc being the default on Linux systems. This default was picked because jemalloc has proven to have fewer fragmentation problems than libc malloc. To force compiling against libc malloc, use: % make MALLOC=libc  To compile against jemalloc on Mac OS X systems, use: % make MALLOC=jemalloc  Verbose build Redis will build with a user friendly colorized output by default. If you want to see a more verbose output use the following: % make V=1  Running Redis To run Redis with the default configuration just type: % cd src % ./redis-server  If you want to provide your redis.conf, you have to run it using an additional parameter (the path of the configuration file): % cd src % ./redis-server /path/to/redis.conf  It is possible to alter the Redis configuration by passing parameters directly as options using the command line. Examples: % ./redis-server --port 9999 --slaveof 127.0.0.1 6379 % ./redis-server /etc/redis/6379.conf --loglevel debug  All the options in redis.conf are also supported as options using the command line, with exactly the same name. Playing with Redis You can use redis-cli to play with Redis. Start a redis-server instance, then in another terminal try the following: % cd src % ./redis-cli redis> ping PONG redis> set foo bar OK redis> get foo ""bar"" redis> incr mycounter (integer) 1 redis> incr mycounter (integer) 2 redis>  You can find the list of all the available commands at http://redis.io/commands. Installing Redis In order to install Redis binaries into /usr/local/bin just use: % make install  You can use make PREFIX=/some/other/directory install if you wish to use a different destination. Make install will just install binaries in your system, but will not configure init scripts and configuration files in the appropriate place. This is not needed if you want just to play a bit with Redis, but if you are installing it the proper way for a production system, we have a script doing this for Ubuntu and Debian systems: % cd utils % ./install_server.sh  The script will ask you a few questions and will setup everything you need to run Redis properly as a background daemon that will start again on system reboots. You'll be able to stop and start Redis using the script named /etc/init.d/redis_<portnumber>, for instance /etc/init.d/redis_6379. Code contributions Note: by contributing code to the Redis project in any form, including sending a pull request via Github, a code fragment or patch via private email or public discussion groups, you agree to release your code under the terms of the BSD license that you can find in the COPYING file included in the Redis source distribution. Please see the CONTRIBUTING file in this source distribution for more information. Redis internals If you are reading this README you are likely in front of a Github page or you just untarred the Redis distribution tar ball. In both the cases you are basically one step away from the source code, so here we explain the Redis source code layout, what is in each file as a general idea, the most important functions and structures inside the Redis server and so forth. We keep all the discussion at a high level without digging into the details since this document would be huge otherwise and our code base changes continuously, but a general idea should be a good starting point to understand more. Moreover most of the code is heavily commented and easy to follow. Source code layout The Redis root directory just contains this README, the Makefile which calls the real Makefile inside the src directory and an example configuration for Redis and Sentinel. You can find a few shell scripts that are used in order to execute the Redis, Redis Cluster and Redis Sentinel unit tests, which are implemented inside the tests directory. Inside the root are the following important directories: src: contains the Redis implementation, written in C. tests: contains the unit tests, implemented in Tcl. deps: contains libraries Redis uses. Everything needed to compile Redis is inside this directory; your system just needs to provide libc, a POSIX compatible interface and a C compiler. Notably deps contains a copy of jemalloc, which is the default allocator of Redis under Linux. Note that under deps there are also things which started with the Redis project, but for which the main repository is not anitrez/redis. An exception to this rule is deps/geohash-int which is the low level geocoding library used by Redis: it originated from a different project, but at this point it diverged so much that it is developed as a separated entity directly inside the Redis repository. There are a few more directories but they are not very important for our goals here. We'll focus mostly on src, where the Redis implementation is contained, exploring what there is inside each file. The order in which files are exposed is the logical one to follow in order to disclose different layers of complexity incrementally. Note: lately Redis was refactored quite a bit. Function names and file names have been changed, so you may find that this documentation reflects the unstable branch more closely. For instance in Redis 3.0 the server.c and server.h files were named to redis.c and redis.h. However the overall structure is the same. Keep in mind that all the new developments and pull requests should be performed against the unstable branch. server.h The simplest way to understand how a program works is to understand the data structures it uses. So we'll start from the main header file of Redis, which is server.h. All the server configuration and in general all the shared state is defined in a global structure called server, of type struct redisServer. A few important fields in this structure are: server.db is an array of Redis databases, where data is stored. server.commands is the command table. server.clients is a linked list of clients connected to the server. server.master is a special client, the master, if the instance is a slave. There are tons of other fields. Most fields are commented directly inside the structure definition. Another important Redis data structure is the one defining a client. In the past it was called redisClient, now just client. The structure has many fields, here we'll just show the main ones: struct client {     int fd;     sds querybuf;     int argc;     robj **argv;     redisDb *db;     int flags;     list *reply;     char buf[PROTO_REPLY_CHUNK_BYTES];     ... many other fields ... }  The client structure defines a connected client: The fd field is the client socket file descriptor. argc and argv are populated with the command the client is executing, so that functions implementing a given Redis command can read the arguments. querybuf accumulates the requests from the client, which are parsed by the Redis server according to the Redis protocol and executed by calling the implementations of the commands the client is executing. reply and buf are dynamic and static buffers that accumulate the replies the server sends to the client. These buffers are incrementally written to the socket as soon as the file descriptor is writable. As you can see in the client structure above, arguments in a command are described as robj structures. The following is the full robj structure, which defines a Redis object: typedef struct redisObject {     unsigned type:4;     unsigned encoding:4;     unsigned lru:LRU_BITS; /* lru time (relative to server.lruclock) */     int refcount;     void *ptr; } robj;  Basically this structure can represent all the basic Redis data types like strings, lists, sets, sorted sets and so forth. The interesting thing is that it has a type field, so that it is possible to know what type a given object has, and a refcount, so that the same object can be referenced in multiple places without allocating it multiple times. Finally the ptr field points to the actual representation of the object, which might vary even for the same type, depending on the encoding used. Redis objects are used extensively in the Redis internals, however in order to avoid the overhead of indirect accesses, recently in many places we just use plain dynamic strings not wrapped inside a Redis object. server.c This is the entry point of the Redis server, where the main() function is defined. The following are the most important steps in order to startup the Redis server. initServerConfig() setups the default values of the server structure. initServer() allocates the data structures needed to operate, setup the listening socket, and so forth. aeMain() starts the event loop which listens for new connections. There are two special functions called periodically by the event loop: serverCron() is called periodically (according to server.hz frequency), and performs tasks that must be performed from time to time, like checking for timedout clients. beforeSleep() is called every time the event loop fired, Redis served a few requests, and is returning back into the event loop. Inside server.c you can find code that handles other vital things of the Redis server: call() is used in order to call a given command in the context of a given client. activeExpireCycle() handles eviciton of keys with a time to live set via the EXPIRE command. freeMemoryIfNeeded() is called when a new write command should be performed but Redis is out of memory according to the maxmemory directive. The global variable redisCommandTable defines all the Redis commands, specifying the name of the command, the function implementing the command, the number of arguments required, and other properties of each command. networking.c This file defines all the I/O functions with clients, masters and slaves (which in Redis are just special clients): createClient() allocates and initializes a new client. the addReply*() family of functions are used by commands implementations in order to append data to the client structure, that will be transmitted to the client as a reply for a given command executed. writeToClient() transmits the data pending in the output buffers to the client and is called by the writable event handler sendReplyToClient(). readQueryFromClient() is the readable event handler and accumulates data from read from the client into the query buffer. processInputBuffer() is the entry point in order to parse the client query buffer according to the Redis protocol. Once commands are ready to be processed, it calls processCommand() which is defined inside server.c in order to actually execute the command. freeClient() deallocates, disconnects and removes a client. aof.c and rdb.c As you can guess from the names these files implement the RDB and AOF persistence for Redis. Redis uses a persistence model based on the fork() system call in order to create a thread with the same (shared) memory content of the main Redis thread. This secondary thread dumps the content of the memory on disk. This is used by rdb.c to create the snapshots on disk and by aof.c in order to perform the AOF rewrite when the append only file gets too big. The implementation inside aof.c has additional functions in order to implement an API that allows commands to append new commands into the AOF file as clients execute them. The call() function defined inside server.c is responsible to call the functions that in turn will write the commands into the AOF. db.c Certain Redis commands operate on specific data types, others are general. Examples of generic commands are DEL and EXPIRE. They operate on keys and not on their values specifically. All those generic commands are defined inside db.c. Moreover db.c implements an API in order to perform certain operations on the Redis dataset without directly accessing the internal data structures. The most important functions inside db.c which are used in many commands implementations are the following: lookupKeyRead() and lookupKeyWrite() are used in order to get a pointer to the value associated to a given key, or NULL if the key does not exist. dbAdd() and its higher level counterpart setKey() create a new key in a Redis database. dbDelete() removes a key and its associated value. emptyDb() removes an entire single database or all the databases defined. The rest of the file implements the generic commands exposed to the client. object.c The robj structure defining Redis objects was already described. Inside object.c there are all the functions that operate with Redis objects at a basic level, like functions to allocate new objects, handle the reference counting and so forth. Notable functions inside this file: incrRefcount() and decrRefCount() are used in order to increment or decrement an object reference count. When it drops to 0 the object is finally freed. createObject() allocates a new object. There are also specialized functions to allocate string objects having a specific content, like createStringObjectFromLongLong() and similar functions. This file also implements the OBJECT command. replication.c This is one of the most complex files inside Redis, it is recommended to approach it only after getting a bit familiar with the rest of the code base. In this file there is the implementation of both the master and slave role of Redis. One of the most important functions inside this file is replicationFeedSlaves() that writes commands to the clients representing slave instances connected to our master, so that the slaves can get the writes performed by the clients: this way their data set will remain synchronized with the one in the master. This file also implements both the SYNC and PSYNC commands that are used in order to perform the first synchronization between masters and slaves, or to continue the replication after a disconnection. Other C files t_hash.c, t_list.c, t_set.c, t_string.c and t_zset.c contains the implementation of the Redis data types. They implement both an API to access a given data type, and the client commands implementations for these data types. ae.c implements the Redis event loop, it's a self contained library which is simple to read and understand. sds.c is the Redis string library, check http://github.com/antirez/sds for more information. anet.c is a library to use POSIX networking in a simpler way compared to the raw interface exposed by the kernel. dict.c is an implementation of a non-blocking hash table which rehashes incrementally. scripting.c implements Lua scripting. It is completely self contained from the rest of the Redis implementation and is simple enough to understand if you are familar with the Lua API. cluster.c implements the Redis Cluster. Probably a good read only after being very familiar with the rest of the Redis code base. If you want to read cluster.c make sure to read the Redis Cluster specification. Anatomy of a Redis command All the Redis commands are defined in the following way: void foobarCommand(client *c) {     printf(""%s"",c->argv[1]->ptr); /* Do something with the argument. */     addReply(c,shared.ok); /* Reply something to the client. */ }  The command is then referenced inside server.c in the command table: {""foobar"",foobarCommand,2,""rtF"",0,NULL,0,0,0,0,0},  In the above example 2 is the number of arguments the command takes, while ""rtF"" are the command flags, as documented in the command table top comment inside server.c. After the command operates in some way, it returns a reply to the client, usually using addReply() or a similar function defined inside networking.c. There are tons of commands implementations inside th Redis source code that can serve as examples of actual commands implementations. To write a few toy commands can be a good exercise to familiarize with the code base. There are also many other files not described here, but it is useless to cover everything. We want to just help you with the first steps. Eventually you'll find your way inside the Redis code base :-) Enjoy! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/antirez/redis"	"— library in Rust"	"true"
"Database"	""	"https://travis-ci.org/mitsuhiko/redis-rs"	"— library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— library in Rust"	"true"
"Database"	"zitsen/unqlite.rs"	"https://github.com/zitsen/unqlite.rs"	"— - An Embeddable NoSQL Database Engine library wrapper for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"1"	"0"	"GitHub - zitsen/unqlite.rs: UnQlite wrapper 1.0 is avaliable for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 0 zitsen/unqlite.rs Code Issues 1 Pull requests 0 Pulse Graphs UnQlite wrapper 1.0 is avaliable for Rust http://zitsen.github.io/unqlite.rs 72 commits 2 branches 6 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.2.1 v1.2.0 v1.1.1 v1.1.0 v1.0.0 0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src style: `cargo fmt` May 25, 2016 .gitignore Added `unqlite` source file and generated bindings Dec 19, 2015 .travis.yml Cargo.toml Changelog.md Bump version to 1.2.1 May 25, 2016 LICENSE-APACHE LICENSE-MIT Relicense as MIT/Apache-2.0 Feb 18, 2016 README.md doc(crate): fix a typo May 13, 2016 clippy.toml fix(clippy): fix some clippy warnings May 13, 2016 rustfmt.toml style: remove `format_strings` option for now May 12, 2016 README.md unqlite A high-level UnQLite database engine wrapper. NOTE: Some of the documents is stolen from UnQLite Official Website. What is UnQLite? UnQLite is a software library which implements a self-contained, serverless, zero-configuration, transactional NoSQL database engine. UnQLite is a document store database similar to [MongoDB], [Redis], [CouchDB] etc. as well a standard Key/Value store similar to [BerkeleyDB], [LevelDB], etc. UnQLite is an embedded NoSQL (Key/Value store and Document-store) database engine. Unlike most other NoSQL databases, UnQLite does not have a separate server process. UnQLite reads and writes directly to ordinary disk files. A complete database with multiple collections, is contained in a single disk file. The database file format is cross-platform, you can freely copy a database between 32-bit and 64-bit systems or between big-endian and little-endian architectures. Port to Rust This crate is high-level UnQLite database wrapper for Rust. A low-level bindings wrapper is avaliable as a seperated crate: unqlite-sys. Usage You can start with UnQLite constructors: extern crate unqlite;  use unqlite::{UnQLite, Config, KV, Cursor};  fn main() {     // The database memory is not handled by Rust, and the database is on-disk,     // so `mut` is not neccessary.     let unqlite = UnQLite::create_temp();     // Use any type that can use as `[u8]`     unqlite.kv_store(""key"", ""a long length value"").unwrap();     unqlite.kv_store(""abc"", [1,2,3]).unwrap();      let mut entry = unqlite.first();     // Iterate records     loop {         if entry.is_none() { break; }          let record = entry.expect(""valid entry"");         let (key, value) = record.key_value();         println!(""* Go through {:?} --> {:?}"", key, value);          if value.len() > 10 {             println!(""** Delete key {:?} by value length"", key);             entry = record.delete();         } else {             entry = record.next();         }     }     //panic!(""for test""); } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zitsen/unqlite.rs"	"— - An Embeddable NoSQL Database Engine library wrapper for Rust"	"true"
"Database"	"UnQLite"	"http://unqlite.org"	"— - An Embeddable NoSQL Database Engine library wrapper for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"UnQLite - An Embeddable NoSQL Database Engine An Embeddable NoSQL Database Engine Tweet Follow @unqlite_db About Distinctive Features Getting Started Documentation Downloads License FAQ Online Support About unQLite. UnQLite is a in-process software library which implements a self-contained, serverless, zero-configuration, transactional NoSQL database engine. UnQLite is a document store database similar to MongoDB, Redis, CouchDB etc. as well a standard Key/Value store similar to BerkeleyDB, LevelDB, etc. UnQLite is an embedded NoSQL (Key/Value store and Document-store) database engine. Unlike most other NoSQL databases, UnQLite does not have a separate server process. UnQLite reads and writes directly to ordinary disk files. A complete database with multiple collections, is contained in a single disk file. The database file format is cross-platform, you can freely copy a database between 32-bit and 64-bit systems or between big-endian and little-endian architectures. UnQLite features includes: Serverless, NoSQL database engine. Transactional (ACID) database. Zero configuration. Single database file, does not use temporary files. Cross-platform file format. UnQLite is a Self-Contained C library without dependency. Standard Key/Value store. Document store (JSON) database via Jx9. Support cursors for linear records traversal. Pluggable run-time interchangeable storage engine. Support for on-disk as well in-memory databases. Built with a powerful disk storage engine which support O(1) lookup. Thread safe and full reentrant. Simple, Clean and easy to use API. Support Terabyte sized databases. BSD licensed product. Amalgamation: All C source code for UnQLite and Jx9 are combined into a single source file. Highly available online support.   Refer to the feature page for a detailed description. Current Stable Release: 1.1.6 UnQLite is a self-contained C library without dependency. It requires very minimal support from external libraries or from the operating system. This makes it well suited for use in embedded devices that lack the support infrastructure of a desktop computer. This also makes UnQLite appropriate for use within applications that need to run without modification on a wide variety of computers of varying configurations. UnQLite is written in ANSI C, Thread-safe, Full reentrant, compiles unmodified and should run in most platforms including restricted embedded devices with a C compiler. UnQLite is extensively tested on Windows and UNIX systems especially Linux, FreeBSD, Oracle Solaris and Mac OS X. UnQLite is a standard key/value store similar to BerkeleyDB, LevelDB, etc. but, with a rich feature set including support for transactions (ACID), concurrent reader, etc. Under the KV store, both keys and values are treated as simple arrays of bytes, so content can be anything from ASCII strings, binary blob and even disk files. The KV store layer is presented to host applications via a set of interfaces, these includes: unqlite_kv_store(), unqlite_kv_append(), unqlite_kv_fetch_callback(), unqlite_kv_append_fmt(), unqlite_kv_delete(), etc. The Document store interface to UnQLite which is used to store JSON docs (i.e. Objects, Arrays, Strings, etc.) in the database is powered by the Jx9 programming language. Jx9 is an embeddable scripting language also called extension language designed to support general procedural programming with data description facilities.  Jx9 is a Turing-Complete, dynamically typed programming language based on JSON and implemented as a library in the UnQLite core. Finally, UnQLite is an open-source product release under the 2-Clause BSD license. See the license page for additional information. unQLite Programming Interfaces. Documentation describing the APIs used to program UnQLite. Note that UnQLite is very easy to learn, even for new programmer. Here is some useful links to start with: UnQLite In 5 Minutes Or Less A very quick introduction to programming with UnQLite with working examples implemented in C. Introduction To The UnQLite C/C++ Interface Gives an overview and roadmap to the C/C++ interface to UnQLite. Introduction To Jx9 Jx9 is the embedded scripting language which power the document-store interface to UnQLite. Jx9 is a Turing complete programming language based on JSON and implemented as a library in the UnQLite core. C/C++ API Reference Guide This document describes each API function in details. The Architecture of the UnQLite Database Engine Gives a high-level overview of the UnQLite architecture and the related interfaces. Foreign Function Implementation Is a howto guide on how to create and install foreign functions (Typically implemented in C/C++) and how to invoke them from your Jx9 script. Constant Expansion Mechanism Is a howto guide on how to install foreign constants (Typically implemented in C/C++) and how to expand their values from your Jx9 script. Other Useful links. Download Get a copy of the last public release of UnQLite, start embedding and enjoy programming with. Distinctive Features This document enumerates and describes some of the features and powerfull extensions introduced by UnQLite and the Jx9 programming language to the database model. Frequently Asked Questions FAQ: The title of the document says all... Sponsorship Program The UnQLite sponsorship program is dedicated to insuring the continuing vitality of UnQLite. UnQLite is high-quality, Open-source software. The goal of the sponsorship program is to make sure it stays that way. Copyright/Licensing UnQLite is an Open-source product. Find more on the licensing situation there. Online Community Support Need some help, join the UnQLite online community. Copyright © Symisc Systems"	"null"	"null"	"— - An Embeddable NoSQL Database Engine library wrapper for Rust"	"true"
"Database"	""	"https://travis-ci.org/zitsen/unqlite.rs"	"— - An Embeddable NoSQL Database Engine library wrapper for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— - An Embeddable NoSQL Database Engine library wrapper for Rust"	"true"
"Database"	"sql"	"https://crates.io/keywords/sql"	"SQL []"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"SQL []"	"true"
"Database"	"mysql"	"https://crates.io/keywords/mysql"	"MySql []"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"MySql []"	"true"
"Database"	"blackbeam/rust-mysql-simple"	"https://github.com/blackbeam/rust-mysql-simple"	"[] — a native MySql client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"109"	"5"	"30"	"GitHub - blackbeam/rust-mysql-simple: Mysql client library implemented in rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 109 Fork 30 blackbeam/rust-mysql-simple Code Issues 7 Pull requests 0 Pulse Graphs Mysql client library implemented in rust. 513 commits 1 branch 9 releases Fetching contributors Rust 99.1% Makefile 0.9% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v5.2.2 v5.2.1 v5.2.0 v5.1.0 v5.0.0 v4.0.0 v2.2.0 v2.1.0 v2.0.0 Nothing to show New pull request Latest commit 9eef72b Jul 12, 2016 blackbeam Update docs Permalink Failed to load latest commit information. src Update docs Jul 12, 2016 tests Add SSL support via `ssl` cargo feature Oct 18, 2014 .gitignore Add .gitignore Sep 13, 2014 .travis.yml Add stable rust to .travis.yml Feb 14, 2016 Cargo.toml bump version Jul 12, 2016 LICENSE Add license Jan 9, 2015 Makefile Add uuid feature to makefile feature list Jun 16, 2016 README.md Add ""optional features"" section to readme Jun 15, 2016 appveyor.yml Changle appveyor mysql path May 18, 2016 README.md rust-mysql-simple Mysql client library implemented in rust. Feel free to open a new issues and pull requests. Changelog Available here Documentation Latest crate API docs hosted here. Installation Please use crates.io [dependencies] mysql = ""*"" rust-mysql-simple offer support of SSL via ssl cargo feature which is enabled by default. If you have no plans to use SSL, then you should disable that feature to not to depend on rust-openssl: [dependencies.mysql] version = ""*"" default-features = false features = [""socket""] Windows support (since 0.18.0) Currently rust-mysql-simple have no support of SSL on windows. To use crate on Windows you have to disable default features. [dependencies.mysql] version = ""*"" default-features = false features = [""pipe""] Optional features You can compile rust-mysql-simple with the uuid feature, which makes it possible to use UUIDs with MySQL conveniently. The uuid feature depends on the uuid crate and UUIDs are assumed to be binary encoded in MySQL. So make sure that your MySQL fields are binary(16). To activate the uuid feature, add it to the features list: [dependencies] mysql = { version = ""*"", features = [""uuid""] } Simple example Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/blackbeam/rust-mysql-simple"	"[] — a native MySql client"	"true"
"Database"	"mysql"	"https://crates.io/crates/mysql"	"[] — a native MySql client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — a native MySql client"	"true"
"Database"	""	"https://travis-ci.org/blackbeam/rust-mysql-simple"	"[] — a native MySql client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — a native MySql client"	"true"
"Database"	"orm"	"https://crates.io/keywords/orm"	"ORM []"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"ORM []"	"true"
"Database"	"deuterium-orm/deuterium-orm"	"https://github.com/deuterium-orm/deuterium"	"— an SQL query builder for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"153"	"7"	"9"	"GitHub - deuterium-orm/deuterium: Fully typed SQL query builder for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 153 Fork 9 deuterium-orm/deuterium Code Issues 3 Pull requests 0 Pulse Graphs Fully typed SQL query builder for Rust 141 commits 1 branch 1 release Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.4.0 Nothing to show New pull request Latest commit 20c44d6 Jun 3, 2015 s-panferov Merge pull request #11 from gsingh93/master … feat(lib): Added MysqlAdapter Permalink Failed to load latest commit information. src fix(lib): Removed unstable features Jun 2, 2015 tests fix(lib): Modernize String to slice conversion Apr 30, 2015 .gitignore Initial commit Oct 12, 2014 .travis.yml chore: enable travis and add LICENSE Dec 6, 2014 CONTRIBUTING.md chore(CONTRIBUTING): add guide Feb 14, 2015 Cargo.toml chore(ver): v0.4.0 May 1, 2015 LICENSE chore: enable travis and add LICENSE Dec 6, 2014 README.md docs: update README Dec 6, 2014 README.md What is Deuterium? Deuterium is a fancy SQL builder for Rust. It's designed to provide a DSL to easily build SQL queries in safe and typed way. Like Rust itself, Deuterium is still in the early stages of development, so don't be surprised if APIs change and things break. If something's not working properly, file an issue or submit a pull request! # Cargo.toml [dependencies.deuterium] git = ""https://github.com/deuterium-orm/deuterium"" Examples? We have a lot! See tests for examples. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/deuterium-orm/deuterium"	"— an SQL query builder for Rust"	"true"
"Database"	""	"https://travis-ci.org/deuterium-orm/deuterium"	"— an SQL query builder for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— an SQL query builder for Rust"	"true"
"Database"	"diesel-rs/diesel"	"https://github.com/diesel-rs/diesel"	"— an ORM and Query builder for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"980"	"57"	"64"	"GitHub - diesel-rs/diesel: A safe, extensible ORM and Query Builder for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 57 Star 980 Fork 64 diesel-rs/diesel Code Issues 47 Pull requests 11 Pulse Graphs A safe, extensible ORM and Query Builder for Rust 752 commits 6 branches 13 releases 24 contributors Rust 99.7% Other 0.3% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags compiler-error-demo gh-pages master sg-load-associated sg-stable-changeset ಠ_ಠ Nothing to show v0.6.2 v0.6.1 v0.6.0 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.1 v0.4.0 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit a737308 Jul 4, 2016 sgrif committed on GitHub Simplify the structure and codegen of `UpdateStatement` (#367) … The main goal of this refactoring was to remove the implementations of `SaveChangesDsl` from codegen and provide them generically instead. Since I want the code outside of codegen to be as approachable as possible, I made a few other changes to reduce the where clause of these implementations. I still would like to reduce the where clause further, but this is at a decent place. The following tree of changes were in support of this goal:  - Identifiable needs to have the table. This is so we can generically do   `table.find(id)` for `T: Identifiable`. - Structs can now be passed directly to `update` and `delete`   - This caused us to change `UpdateTarget` to be a struct, and     introduce an `AsUpdateTarget` trait so that we can abstract over     whether the fields on that struct are a reference or not  All of this will drastically simplify the non-procedural-macro form of `#[derive(AsChangeset)]`, and hopefully lead to more refactoring in the future. Permalink Failed to load latest commit information. .cargo Point diesel_codegen back at git, use local override for dev Dec 6, 2015 bin Properly set `DATABASE_URL` for SQLite benchmarks Apr 17, 2016 diesel Simplify the structure and codegen of `UpdateStatement` (#367) Jul 4, 2016 diesel_cli Give an error message when an invalid PG url is given to CLI Apr 27, 2016 diesel_codegen Simplify the structure and codegen of `UpdateStatement` (#367) Jul 4, 2016 diesel_compile_tests Move the trait bounds for `FindDsl` onto the impl (#352) Jun 13, 2016 diesel_tests Simplify the structure and codegen of `UpdateStatement` (#367) Jul 4, 2016 migrations Reform types inferred by `infer_schema!` on SQLite (#277) Apr 17, 2016 .example.env Remove `DATABASE_URL_FOR_SCHEMA` from `.example.env` Dec 19, 2015 .gitignore add Cargo.lock for diesel_cli Mar 19, 2016 .travis.yml Bump nightly version May 11, 2016 CHANGELOG.md Simplify the structure and codegen of `UpdateStatement` (#367) Jul 4, 2016 LICENSE-APACHE Relicense under dual MIT/Apache-2.0 Jan 11, 2016 LICENSE-MIT Relicense under dual MIT/Apache-2.0 Jan 11, 2016 README.md Fix travis/gitter links Apr 20, 2016 code_of_conduct.md Bump code of conduct to CC 1.4 Feb 2, 2016 README.md A safe, extensible ORM and Query Builder for Rust Documentation Homepage Diesel gets rid of the boilerplate for database interaction and eliminates runtime errors, without sacrificing performance. It takes full advantage of Rust's type system to create a low overhead query builder that ""feels like Rust"". Getting Started You can find an extensive Getting Started tutorial at http://diesel.rs/guides/getting-started. Guides on more specific features will be coming soon. Code of conduct Anyone who interacts with Diesel in any space including but not limited to this GitHub repository is expected to follow our code of conduct License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/diesel-rs/diesel"	"— an ORM and Query builder for Rust"	"true"
"Database"	""	"https://travis-ci.org/diesel-rs/diesel"	"— an ORM and Query builder for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— an ORM and Query builder for Rust"	"true"
"Database"	"ivanceras/rustorm"	"https://github.com/ivanceras/rustorm"	"— an ORM for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"134"	"12"	"18"	"GitHub - ivanceras/rustorm: An ORM for rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 134 Fork 18 ivanceras/rustorm Code Issues 7 Pull requests 0 Pulse Graphs An ORM for rust 314 commits 3 branches 13 releases 7 contributors Rust 99.5% Other 0.5% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master Nothing to show 0.4.3 0.4.1 0.1.2 0.1.0 0.0.9 0.0.8 0.0.7 0.0.6 0.0.5 0.0.4 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Latest commit 531a688 Jul 13, 2016 ivanceras Releasing 0.5.4 Permalink Failed to load latest commit information. scripts updating data dump to bazaar_v8 Jan 8, 2016 src Added via column for refered tables and columns Jul 13, 2016 tests Make QuerySource and SourceField work, Corrected the tests Jan 27, 2016 unused Get the basic API structure working Jan 25, 2016 .gitignore fix bug in inner join sql (nospace in sql keywords) Nov 5, 2015 .travis.yml Updated rusqlite version and r2d2-sqlite version dependencies, Fixed … Dec 29, 2015 Cargo.lock publishing 0.5.3 Jul 5, 2016 Cargo.toml Releasing 0.5.4 Jul 13, 2016 Changelog.md Added changelog Oct 21, 2015 Contributors.md Update Contributors.md Oct 19, 2015 LICENSE Add my name to the license Jul 22, 2015 MySQL.md merged Fiedzia initial mysql support, added examples for mysql Jul 21, 2015 Notes.md Made mysql as an optional feature Nov 1, 2015 Progress.md Adjust Database Trait for sqlite, get_table_comments is platform spec… Sep 9, 2015 README.md minor Apr 11, 2016 TODO.md Add todo Apr 12, 2016 appveyor.yml Use postgresql 9.4 Nov 11, 2015 update-docs.sh Make an intelligent column name derivation using condense display nam… May 25, 2015 README.md Rustorm An ORM for rust Features Fluent high-level and low-level API Composable queries Extensible to multiple database platform Easy to reason out generated SQL Optional model code generator Documentation Philosophy Rustorm is designed to work on generic models, that is it will work on any database where the table definition is unknown Example Get all contents of product table extern crate rustorm; extern crate uuid; extern crate chrono; extern crate rustc_serialize;  use uuid::Uuid; use chrono::datetime::DateTime; use chrono::offset::utc::UTC; use rustc_serialize::json;  use rustorm::query::Query; use rustorm::query::{Filter,Equality}; use rustorm::dao::{Dao,IsDao}; use rustorm::pool::ManagedPool; use rustorm::table::{IsTable,Table};   #[derive(Debug, Clone)] pub struct Product {     pub product_id:Uuid,     pub name:Option<String>,     pub description:Option<String>, }  impl IsDao for Product{     fn from_dao(dao:&Dao)->Self{         Product{             product_id: dao.get(""product_id""),             name: dao.get_opt(""name""),             description: dao.get_opt(""description""),         }     }     fn to_dao(&self)->Dao{         let mut dao = Dao::new();         dao.set(""product_id"", &self.product_id);         match self.name{             Some(ref _value) => dao.set(""name"", _value),             None => dao.set_null(""name""),         };         match self.description{             Some(ref _value) => dao.set(""description"", _value),             None => dao.set_null(""description""),         };         dao     } }  impl IsTable for Product{      fn table()->Table{         Table{             schema:""bazaar"".to_string(),             name:""product"".to_string(),             parent_table:None,             sub_table:vec![],             comment:None,             columns:vec![],             is_view: false         }     } }   fn main(){     let url = ""postgres://postgres:p0stgr3s@localhost/bazaar_v6"";     let mut pool = ManagedPool::init(&url, 1).unwrap();     let db = pool.connect().unwrap();      let products: Vec<Product> = Query::select_all()             .from_table(""bazaar.product"")             .collect(db.as_ref()).unwrap();      for prod in products{         let name = prod.name.unwrap();         let desc = match prod.description{                         Some(desc) => desc,                         None => """".to_string()                     };         println!(""{}  {}  {:?}"", prod.product_id, name, desc);     } }  Get one photo of a product extern crate rustorm; extern crate uuid; extern crate chrono; extern crate rustc_serialize;  use uuid::Uuid; use chrono::datetime::DateTime; use chrono::offset::utc::UTC; use rustc_serialize::json;  use rustorm::query::Query; use rustorm::query::{Filter,Equality}; use rustorm::dao::{Dao,IsDao}; use rustorm::pool::ManagedPool; use rustorm::table::{IsTable,Table};  #[derive(Debug, Clone)] pub struct Photo {     pub photo_id:Uuid,     pub url:Option<String>, }  impl IsDao for Photo{     fn from_dao(dao:&Dao)->Self{         Photo{             photo_id: dao.get(""photo_id""),             url: dao.get_opt(""url""),         }     }     fn to_dao(&self)->Dao{         let mut dao = Dao::new();         dao.set(""photo_id"", &self.photo_id);         match self.url{             Some(ref _value) => dao.set(""url"", _value),             None => dao.set_null(""url""),         };         dao     } }  impl IsTable for Photo{      fn table()->Table{         Table{             schema:""bazaar"".to_string(),             name:""photo"".to_string(),             parent_table:None,             sub_table:vec![],             comment:None,             columns:vec![],             is_view: false         }     } }  fn main(){     let url = ""postgres://postgres:p0stgr3s@localhost/bazaar_v6"";     let mut pool = ManagedPool::init(url, 1).unwrap();     let db = pool.connect().unwrap();      let photo: Photo = Query::select_all()                         .column(""photo.url"")                         .from_table(""bazaar.product"")                         .left_join_table(""bazaar.product_photo"",                             ""product.product_id"", ""product_photo.product_id"")                         .left_join_table(""bazaar.photo"",                             ""product_photo.photo_id"", ""photo.photo_id"")                         .filter(""product.name"", Equality::EQ, &""GTX660 Ti videocard"")                         .collect_one(db.as_ref()).unwrap();      println!(""photo: {} {}"",photo.photo_id, photo.url.unwrap()); }  One complex query extern crate rustorm; extern crate uuid; extern crate chrono; extern crate rustc_serialize;  use uuid::Uuid; use chrono::datetime::DateTime; use chrono::offset::utc::UTC; use rustc_serialize::json;  use rustorm::query::Query; use rustorm::query::{Filter,Equality}; use rustorm::dao::{Dao,IsDao}; use rustorm::pool::ManagedPool;  #[derive(Debug, Clone)] pub struct Photo {     pub photo_id:Uuid,     pub url:Option<String>, }  impl IsDao for Photo{     fn from_dao(dao:&Dao)->Self{         Photo{             photo_id: dao.get(""photo_id""),             url: dao.get_opt(""url""),         }     }     fn to_dao(&self)->Dao{         let mut dao = Dao::new();         dao.set(""photo_id"", &self.photo_id);         match self.url{             Some(ref _value) => dao.set(""url"", _value),             None => dao.set_null(""url""),         };         dao     } }  fn main(){     let url = ""postgres://postgres:p0stgr3s@localhost/bazaar_v6"";     let mut pool = ManagedPool::init(&url, 1).unwrap();     let db = pool.connect().unwrap();      let mut query = Query::select_all();      query.from_table(""bazaar.product"")         .left_join_table(""bazaar.product_category"",             ""product_category.product_id"", ""product.product_id"")          .left_join_table(""bazaar.category"",             ""category.category_id"", ""product_category.category_id"")         .left_join_table(""product_photo"",             ""product.product_id"", ""product_photo.product_id"")         .left_join_table(""bazaar.photo"",              ""product_photo.photo_id"", ""photo.photo_id"")         .filter(""product.name"", Equality::EQ, &""GTX660 Ti videocard"")         .filter(""category.name"", Equality::EQ, &""Electronic"")         .group_by(vec![""category.name""])         .having(""count(*)"", Equality::GT, &1)         .asc(""product.name"")         .desc(""product.created"")         ;     let frag = query.build(db.as_ref());      let expected = ""    SELECT *      FROM bazaar.product           LEFT JOIN bazaar.product_category            ON product_category.product_id = product.product_id            LEFT JOIN bazaar.category            ON category.category_id = product_category.category_id            LEFT JOIN product_photo            ON product.product_id = product_photo.product_id            LEFT JOIN bazaar.photo            ON product_photo.photo_id = photo.photo_id      WHERE product.name = $1        AND category.name = $2   GROUP BY category.name     HAVING count(*) > $3   ORDER BY product.name ASC, product.created DESC"".to_string();     println!(""actual:   {{\n{}}} [{}]"", frag.sql, frag.sql.len());     println!(""expected: {{{}}} [{}]"", expected, expected.len());     assert!(frag.sql.trim() == expected.trim());  }  Supported Database PostgreSQL Sqlite MySQL/MariaDB Oracle Roadmap Support for Oracle Support for MySql For Updates Follow me on twitter: @ivanceras Support this project This is a 1 man show, so if you feel generous, please support this project at bountysource bountysource Suggestions are much welcome! Related project deuterium-orm treasure diesel If you are looking for a more rubost and correct implementation of an ORM, diesel may be the right library for you. The authors and contributors in diesel has much more experience with a more fluent API's, ORM and correct rust codes. I had been writing much java codes in my last projects as evident in my implementation code, which is not too rusty at all. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ivanceras/rustorm"	"— an ORM for Rust"	"true"
"Database"	""	"https://travis-ci.org/ivanceras/rustorm"	"— an ORM for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— an ORM for Rust"	"true"
"Database"	"phonkee/treasure"	"https://github.com/phonkee/treasure"	"— an ORM for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"40"	"5"	"2"	"GitHub - phonkee/treasure: ORM for rust (journey begins) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 40 Fork 2 phonkee/treasure Code Issues 1 Pull requests 0 Pulse Graphs ORM for rust (journey begins) 32 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master unstable Nothing to show Nothing to show New pull request Latest commit 931c2ea Aug 4, 2015 phonkee Initial commit for query builder Permalink Failed to load latest commit information. docs Initial commit for query builder Aug 4, 2015 examples Initial commit for query builder Aug 4, 2015 src Initial commit for query builder Aug 4, 2015 .gitignore Initial commit of proof of concept Jul 26, 2015 Cargo.toml Updated generator, added macros for querying models (no querybilder f… Jul 29, 2015 LICENSE Updated generator, added macros for querying models (no querybilder f… Jul 29, 2015 README.md Initial commit for query builder Aug 4, 2015 README.md Treasure ORM !!!! Treasure ORM is in phase of experimenting !!! ORM library for rust (or rather proof of concept, with following heavy development) inspired by awesome django framework. This is still experiment, and I started probably from the other side of ORM that should be started by its development, but I think that ease of definition of models and its columns is the ""sale argument"" of every ORM. Right after that it's query language. Treasure ORM will be developed first on just Postgres, but with mind of multiple available dialects. All ORMs use some kind of reflection to have information about all columns, which is easy to implement in dynamic languages, but in statically compiled languages it should be done another way. Rust has for this its healthy macro system from which Treasure uses syntax expressions to generate needed code. I know you say ""that's not idiomatic rust"", but it helps to avoid a lot of things. Let me show my idea how should model definition look like. I will omit for now ForeignKey, ManyToMany, OneToOne which I am still doing design decisions for now. #![feature(custom_attribute,plugin)] #![plugin(treasure)]  extern crate treasure;  use treasure::models::model::Model;  #[model(db_name=""custom_user"",primary_key=""id"",unique(email,test),unique(some,other),index(some,other)] struct User {      #[column(db_name=""ID"",primary_key)]     pub id: i32,      #[column(unique)]     pub username: String,      #[column]     pub password: Option<String>,      #[column]     pub email: String,      #[column]     pub some: String,      #[column(db_name=""custom_other"")]     pub other: String, } Treasure will generate Model trait impl methods such as: fn model_options(&self) -> ModelOptions; which returns inspect information about model (store as static? in the future for speed improvements) fn init_new() -> Self; which is constructor method to create new model instance. Right now you can try and see what currently Treasure orm does by runnin:     cargo run --example simple --verbose For debugging/implementation purposes Treasure dumps generated implementations to stdout. Design Every struct that will be persistable should implement trait Model (call that struct model). This struct must be annotated with ""model"" attribute that tells Treasure to inspect this model and generate needed Model trait method. Every field in model that is annotated with ""column"" attribute will be accepted as database column. All other not annotated will be in options list but marked as ""unused"". Model attrs For now model has following possible annotations db_name - name of the database table, if not given snake case of struct name will be used primary_key - name of the column that is primary_key, if incorrect compiler must raise sane error. primary key can be also set as column attribute ""primary_key"" unique - list of columns that are unique. Multiple occurences can happen. This will not be used much, but will be used in database migrations (which we will support in the future) index - list of fields that should belong to index. Multiple occurences can happen also. (For migrations) managed - whether Treasure should handle creation of model in db (in future) Main goal is to write exhaustive compiler errors in case of error. We must have a lot of validations! We can do more! Decision needed: add annotation inline_options that inlines model_options() method Column attrs Every struct field that you want to persiste to database table must be annotated with ""column"" For column there are following possigle annotations: db_name - database table column name, if not given struct field name will be used. primary_key - information that column is primary_key unique - treat column as unique (will be used in db migrations) index - attach to column index (in db migration) not_persist - do not persist this field to database These are implemented and added to ColumnInfo which holds all informations about column. You can see that we have trait Column which all POD types must implement. Also future Option (which stands for nullable column), ForeignKey, ManyToMany, OneToOne wil implement. This gives us interesting way of defining new fields in the future (postgres array??) Column attributes will be extendable, so every Column implementor can have its own set of additional annotation attributes, e.g. for number types we can implement min, max, default.. The sky is the limit. Column validations Under design decisions! Every model will have its own possibility to provide validation_fn in model annotations that will be called. Also Column trait will have validate method that treasure will call with arguments: columnvalue, ColumnOptions instance for given column. Code generation Treasure is doing quite a lot of code generation to be easily usable without code repetition. Also for future query language we will need inspected information about model and its fields. That's why Treasure generates supporting methods for every model, that gives all model information. Treasure also generates init_new function for every model where it calls Column::init with ColumnOptions parameter so it can return appropriate value (default?) Query Treasure ORM provides set of macros to make querying of models easier. This part is still in the making, some small part of select macros are already written, however now they need to be connected to real Builder. Treasure will provide two builders: Builder - this builder works upon tables, columns ModelBuilder - this builder will be tightly coupled with models and will have method to return Builder that will be populated from data from given model. Builder will also have ability to ""map"" results to object, probably it will be function that accepts closure with argument rows (in single mode row). This rows will not be direct rows from database engine, but abstraction over them because we have also possibility to have ""aliases"" for columns defined in model (db_name). Query macros: Query macros have their names by sql counterparts. select - macro to perform select queries update - macro to perform update queries (single instances or multiple rows) delete - macro to perform delete queries (single instances or multiple rows) insert - macro to insert model instances to database Every macro has first argument sort of identification followed by ""["" where are all parts of query are specified, ending with ""]"". select query has 2 possibilities: many: - this is for selecting multiple objects select![many:User[<query_parts>]] one: - this selects just one object from database. (TODO: exceptions DoesNotExist, MultipleObjectsReturned) select![one:User[<query_parts>]] The part shown in example is where all modifiers are set. these modifiers are defined following way: []. You can see that modifiers are not separated by "","" it's from the nature of macros, rather their values are surrounded by [] which makes them quite readable. In following example you can see that. Example: select![many:User[     filter[         [""age__lt"" => 10]         ]     limit[1, 10] ]] In next parts I will try to explain every query_part of queries filter: Filter applies to following queries: select, update(mass), delete(mass) In filter you can specify separate clauses such as: [""username"" => ""phonkee""] First is name of model column following by => and value. Column name can have field lookups (such as in django) Lookups take the form [""field__lookuptype"" => value]. If lookup type is not specified ""__exact"" is used. The plan is to have support for following lookup types; exact iexact contains icontains in gt gte lt lte startswith istartswith endswith iendswith range year month day week_day isnull search regex iregex and probably other... @TODO: add not[....] modifier. Filtering supports also AND and OR conditions. They both have this format and [...], or [...]. You can stack them anyway you want. If you don't provide single ""and"" or ""or"" in filter, they will be default wrapped in AND clause. select!(many:User[     filter[         [""name__icontains"" => ""Peter""]         [""age__gte"" => 30]     ] ]) will be automatically wrapped to and clause and will equal to this: select!(many:User[     filter[         and [             [""name__icontains"" => ""Peter""]             [""age__gte"" => 30]         ]     ] ]) AND and OR clauses can be stacked, so you can create really complex clauses: select!(many:User[     filter[         or [             [""something__icontains"" => ""ehm""]                     ]         and [             [""name__icontains"" => ""Peter""]             [""age__gte"" => 30]         ]         [""one__in"" => [""one"", ""two"", ""three""]      ] ]) will be equal as: select!(many:User[     filter[         and [             or [                 [""something__icontains"" => ""ehm""]                         ]             and [                 [""name__icontains"" => ""Peter""]                 [""age__gte"" => 30]             ]             [""one__in"" => [""one"", ""two"", ""three""]          ]     ] ]) nice example is also Example Isn't that pretty? I hope you like this query language as I like, more updates will come later, there are a ton of things more to implement, and yes I mean a ton just in these querying macros. Like update already instantiated query builder with additional filters, limits... TODO: define other macros select select macro instantiates select query builder and prepopulates it with model options. // selecting data from database select!(many:User[     filter[         [""username"" => ""phonkee""]         [""age__gte"" => 30]     ] ]).collect(db) update update macro has two possibilities to call: update!(model_instance[...]) - this updates model instance update!(many:User[...]) - this makes bulk update to database (TODO: not implemented) examples: // example of update of single model instance let _user = User::init_new(); let _qb = update!(user[     columns[         ""count_logins"",         ""last_logged""     ] ]); // example of update of single model instance // @TODO: implement, find out how to do additions... let _qb = update!(many:User[     set[         [""quote"" => ""something""]     ] ]); Signals add support for signals that will be probably in annotation, e.g.: #[model(pre_insert=""pre_insert"")] struct User { } Signals to support: post_load - after object has been load from db pre_insert - before insert to db post_insert - after insert to db pre_update - before update of model instance to db post_update - after update to database This will generate more code .... Database connection Design decision needed! Write wrapper around results (all dialects can implement). Contributions: If you want to contribute with ideas and/or code, I will be very happy! Author: Peter Vrba (phonkee) License: MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/phonkee/treasure"	"— an ORM for Rust"	"true"
"Database"	"postgres"	"https://crates.io/keywords/postgres"	"PostgreSql [, ]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"PostgreSql [, ]"	"true"
"Database"	"postgresql"	"https://crates.io/keywords/postgresql"	"PostgreSql [, ]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"PostgreSql [, ]"	"true"
"Database"	"sfackler/rust-postgres"	"https://github.com/sfackler/rust-postgres"	"[] — a native client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"560"	"26"	"57"	"GitHub - sfackler/rust-postgres: Native PostgreSQL driver for the Rust programming language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 560 Fork 57 sfackler/rust-postgres Code Issues 9 Pull requests 0 Pulse Graphs Native PostgreSQL driver for the Rust programming language 1,486 commits 6 branches 67 releases 31 contributors Rust 88.6% C 11.3% Shell 0.1% Rust C Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags breaks cockroach-hacks gh-pages master osx-builds release Nothing to show v0.11.9 v0.11.8 v0.11.7 v0.11.6 v0.11.5 v0.11.4 v0.11.3 v0.11.2 v0.11.1 v0.11.0 v0.10.2 v0.10.1 v0.10.0 v0.9.6 v0.9.5 v0.9.4 v0.9.3 v0.9.2 v0.9.0 v0.8.9 v0.8.8 v0.8.7 v0.8.6 v0.8.5 v0.8.4 v0.8.3 v0.8.2 v0.8.0 v0.7.5 v0.7.4 v0.7.3 v0.7.2 v0.7.1 v0.7.0 v0.6.5 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.6 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.6 v0.4.5 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.0 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.3 v0.1.2 v0.1.1 v0.1.0 rust-0.12 rust-0.11 rust-0.10 Nothing to show New pull request Latest commit 282bf50 Jul 9, 2016 sfackler Error cleanup Permalink Failed to load latest commit information. .travis NegotiateSsl implementation for security_framework Dec 5, 2015 benches Optimize execute Dec 1, 2014 codegen Little style tweak Jun 15, 2016 src Error cleanup Jul 9, 2016 tests Test array params Jul 7, 2016 .gitignore Use persistent codegen for SqlState and Type Feb 21, 2016 .travis.yml Bump to 1.9, drop net2 Jul 7, 2016 Cargo.toml Bump to 1.9, drop net2 Jul 8, 2016 LICENSE Bump LICENSE year Jun 15, 2016 README.md Bump to 1.9, drop net2 Jul 8, 2016 THIRD_PARTY Inline md5 impl Jun 9, 2015 README.md Rust-Postgres A native PostgreSQL driver for Rust. Documentation You can integrate Rust-Postgres into your project through the releases on crates.io: # Cargo.toml [dependencies] postgres = ""0.11"" Overview Rust-Postgres is a pure-Rust frontend for the popular PostgreSQL database. extern crate postgres;  use postgres::{Connection, SslMode};  struct Person {     id: i32,     name: String,     data: Option<Vec<u8>>, }  fn main() {     let conn = Connection::connect(""postgres://postgres@localhost"", SslMode::None).unwrap();     conn.execute(""CREATE TABLE person (                     id              SERIAL PRIMARY KEY,                     name            VARCHAR NOT NULL,                     data            BYTEA                   )"", &[]).unwrap();     let me = Person {         id: 0,         name: ""Steven"".to_string(),         data: None,     };     conn.execute(""INSERT INTO person (name, data) VALUES ($1, $2)"",                  &[&me.name, &me.data]).unwrap();     for row in &conn.query(""SELECT id, name, data FROM person"", &[]).unwrap() {         let person = Person {             id: row.get(0),             name: row.get(1),             data: row.get(2),         };         println!(""Found person {}"", person.name);     } } Requirements Rust - Rust-Postgres is developed against the 1.9 release of Rust available on http://www.rust-lang.org. It should also compile against more recent releases. PostgreSQL 7.4 or later - Rust-Postgres speaks version 3 of the PostgreSQL protocol, which corresponds to versions 7.4 and later. If your version of Postgres was compiled in the last decade, you should be okay. Usage Connecting Connect to a Postgres server using the standard URI format: let conn = try!(Connection::connect(""postgres://user:pass@host:port/database?arg1=val1&arg2=val2"",                                     SslMode::None)); pass may be omitted if not needed. port defaults to 5432 and database defaults to the value of user if not specified. The driver supports trust, password, and md5 authentication. Unix domain sockets can be used as well by activating the unix_socket or nightly features. The host portion of the URI should be set to the absolute path to the directory containing the socket file. Since / is a reserved character in URLs, the path should be URL encoded. If Postgres stored its socket files in /run/postgres, the connection would then look like: let conn = try!(Connection::connect(""postgres://postgres@%2Frun%2Fpostgres"", SslMode::None)); Paths which contain non-UTF8 characters can be handled in a different manner; see the documentation for details. Querying SQL statements can be executed with the query and execute methods. Both methods take a query string as well as a slice of parameters to bind to the query. The ith query parameter is specified in the query string by $i. Note that query parameters are 1-indexed rather than the more common 0-indexing. execute returns the number of rows affected by the query (or 0 if not applicable): let updates = try!(conn.execute(""UPDATE foo SET bar = $1 WHERE baz = $2"", &[&1i32, &""biz""])); println!(""{} rows were updated"", updates); query returns an iterable object holding the rows returned from the database. The fields in a row can be accessed either by their indices or their column names, though access by index is more efficient. Unlike statement parameters, result columns are zero-indexed. for row in &try!(conn.query(""SELECT bar, baz FROM foo WHERE buz = $1"", &[&1i32])) {     let bar: i32 = row.get(0);     let baz: String = row.get(""baz"");     println!(""bar: {}, baz: {}"", bar, baz); } Statement Preparation If the same statement will be executed repeatedly (possibly with different parameters), explicitly preparing it can improve performance: let stmt = try!(conn.prepare(""UPDATE foo SET bar = $1 WHERE baz = $2"")); for (bar, baz) in updates {     try!(stmt.execute(&[bar, baz])); } Transactions The transaction method will start a new transaction. It returns a Transaction object which has the functionality of a Connection as well as methods to control the result of the transaction: let trans = try!(conn.transaction());  try!(trans.execute(...)); let stmt = try!(trans.prepare(...)); // ...  try!(trans.commit()); The transaction will be active until the Transaction object falls out of scope. A transaction will roll back by default. Nested transactions are supported via savepoints. Type Correspondence Rust-Postgres enforces a strict correspondence between Rust types and Postgres types. The driver currently supports the following conversions: Rust Type Postgres Type bool BOOL i8 ""char"" i16 SMALLINT, SMALLSERIAL i32 INT, SERIAL u32 OID i64 BIGINT, BIGSERIAL f32 REAL f64 DOUBLE PRECISION str/String VARCHAR, CHAR(n), TEXT, CITEXT [u8]/Vec<u8> BYTEA serialize::json::Json and serde_json::Value (optional) JSON, JSONB time::Timespec and chrono::NaiveDateTime (optional) TIMESTAMP time::Timespec, chrono::DateTime<UTC>, chrono::DateTime<Local>, and chrono::DateTime<FixedOffset> (optional) TIMESTAMP WITH TIME ZONE chrono::NaiveDate (optional) DATE chrono::NaiveTime (optional) TIME uuid::Uuid (optional) UUID bit_vec::BitVec (optional) BIT, VARBIT HashMap<String, Option<String>> HSTORE eui48::MacAddress (optional) MACADDR Option<T> implements FromSql where T: FromSql and ToSql where T: ToSql, and represents nullable Postgres values. &[T] and Vec<T> implement ToSql where T: ToSql, and Vec<T> additionally implements FromSql where T: FromSql, which represent one-dimensional Postgres arrays. More conversions can be defined by implementing the ToSql and FromSql traits. The postgres-derive crate will synthesize ToSql and FromSql implementations for enum, domain, and composite Postgres types. Full support for array types is located in the postgres-array crate. Support for range types is located in the postgres-range crate. Support for the large object API is located in the postgres-large-object crate. Optional features Unix socket connections Support for connections through Unix domain sockets is provided optionally by either the unix_socket or nightly features. It is only available on ""unixy"" platforms such as OSX, BSD and Linux. UUID type UUID support is provided optionally by the uuid feature, which adds ToSql and FromSql implementations for uuid's Uuid type. JSON/JSONB types JSON and JSONB support is provided optionally by the rustc-serialize feature, which adds ToSql and FromSql implementations for rustc-serialize's Json type, and the serde_json feature, which adds implementations for serde_json's Value type. TIMESTAMP/TIMESTAMPTZ/DATE/TIME types Date and Time support is provided optionally by the time feature, which adds ToSql and FromSql implementations for time's Timespec type, or the chrono feature, which adds ToSql and FromSql implementations for chrono's DateTime, NaiveDateTime, NaiveDate and NaiveTime types. BIT/VARBIT types BIT and VARBIT support is provided optionally by the bit-vec feature, which adds ToSql and FromSql implementations for bit-vec's BitVec type. MACADDR type MACADDR support is provided optionally by the eui48 feature, which adds ToSql and FromSql implementations for eui48's MacAddress type. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sfackler/rust-postgres"	"[] — a native client"	"true"
"Database"	"postgres"	"https://crates.io/crates/postgres"	"[] — a native client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — a native client"	"true"
"Database"	"PostgreSQL"	"http://www.postgresql.org"	"[] — a native client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PostgreSQL: The world's most advanced open source database Skip site navigation (1) Skip section navigation (2) Search Peripheral Links Donate Contact Home About Download Documentation Community Developers Support Your account 23rd June 2016 PostgreSQL 9.6 Beta 2 Released! The PostgreSQL Global Development Group is pleased to announce the availability of PostgreSQL 9.6 Beta 2, the second beta release of the upcoming 9.6 version of PostgreSQL. Please download and test the beta code with your applications, and report any issues you may find. 9.6 Beta 2 Release Announcement 9.6 Beta 2 Release Notes Download Developers are more likely to port SQL Server to Postgres because it is open source, supports more ANSI features, runs on more platforms, uses a different ACID model and has a great optimizer. Joe Celko, Author of SQL For Smarties Case Studies|More Quotes|Featured Users 9.5.3 · May 12, 2016 · Notes 9.4.8 · May 12, 2016 · Notes 9.3.13 · May 12, 2016 · Notes 9.2.17 · May 12, 2016 · Notes 9.1.22 · May 12, 2016 · Notes Download | Why should I upgrade? Upcoming releases Security International Sites Mailing Lists Wiki Report a Bug FAQs PostgreSQL is free. Please support our work by making a donation. 2016-07-12 repmgr 3.1.4 released! 2016-07-06 New version of Postgres Migration Tookit has been released 2016-06-30 PostgreSQL Maestro 16.6 released 2016-06-29 Last week for PostgresOpen 2016 Early Bird Tickets! 2016-06-23 PostgreSQL 9.6 Beta 2 Released 2016-06-17 Announcement: Amazon RDS for PostgreSQL now supports cross-region read replicas 2016-06-09 RazorSQL 7.0 Database Query Tool Released More Submit News 2016-07-15 Shaun M. Thomas: PG Phriday: A Postgres Persepctive on MongoDB 2016-07-15 Ivan Lezhnjov IV: Upgrading Ubuntu LTS and PostgreSQL 2016-07-15 Stefan Petrea: Analyzing PostgreSQL logs using pgBadger 2016-07-15 Craig Ringer: How to check the lock level taken by operations in PostgreSQL 2016-07-14 Greg Sabino Mullane: Disabling Postgres constraints for pg_dump 2016-07-14 Craig Kerstiens: When to use unstructured datatypes in Postgres–Hstore vs. JSON vs. JSONB 2016-07-13 Joshua Drake: What is good for the community is good for the company (profit is the reward) More 2016-09-13 – 2016-09-16 PostgresOpen 2016 (Dallas, TX, United States) 2016-10-11 – 2016-10-13 Postgres Vision 2016 (San Francisco, California, United States) 2016-11-01 – 2016-11-04 PGConf.EU 2016 (Tallinn, Estonia) 2016-11-14 – 2016-11-16 PGConf Silicon Valley (South San Francisco, California, United States) 2016-12-02 – 2016-12-03 PGConf ASIA 2016 (Tokyo, Japan) More Submit Event There are 21 training events in 4 countries scheduled over the next six months from 2ndQuadrant Italia, Miriade S.p.A. and others. Take a look at our schedule to find the training that you want. Privacy Policy | About PostgreSQL Copyright © 1996-2016 The PostgreSQL Global Development Group"	"null"	"null"	"[] — a native client"	"true"
"Database"	""	"https://travis-ci.org/sfackler/rust-postgres"	"[] — a native client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — a native client"	"true"
"Database"	"sqlite"	"https://crates.io/keywords/sqlite"	"Sqlite []"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"Sqlite []"	"true"
"Database"	"dckc/rust-sqlite3"	"https://github.com/dckc/rust-sqlite3"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"43"	"7"	"25"	"GitHub - dckc/rust-sqlite3: Rustic bindings for rqlite3 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 43 Fork 25 dckc/rust-sqlite3 Code Issues 6 Pull requests 1 Pulse Graphs Rustic bindings for rqlite3 171 commits 6 branches 0 releases 12 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags busy_timeout gh-pages last_insert_rowid master open_v2 travis_ci Nothing to show Nothing to show New pull request Latest commit 138aa59 Apr 22, 2016 dckc Merge pull request #49 from AndiDog/feature/fix-dependency-version-spec … Fix specification of dependency version Permalink Failed to load latest commit information. src Fix another bad memory access Apr 21, 2016 tests provide an iterator over query results (fixes #30) Jan 23, 2016 .gitignore Ignore target. Ignore Cargo.lock since this is a library. May 16, 2015 .travis.yml use my github access token Sep 19, 2015 Cargo.toml Fix specification of dependency version Apr 21, 2016 LICENSE choose license: MIT Jul 31, 2014 README.md point documentation, build status links to my github, travis pages Sep 19, 2015 README.md Rust-Sqlite3 Rustic bindings for sqlite3. Copyright (c) 2014 Dan Connolly Share and enjoy. LICENSE: MIT. Documentation, Status View the documentation online Three layers of API are provided: mod ffi provides exhaustive, though unsafe, bindgen bindings for libsqlite.h mod core provides a minimal safe interface to the basic sqlite3 API mod types provides ToSql/FromSql traits, and the library provides convenient query() and update() APIs. The API design is perhaps stabilizing, though testing is uneven and I have not used the library beyond trivial integration tests. TODO another thorough read-through of the sqlite API intro, with unit tests to match; especially... unit testing other than the happy-paths ToSql/FromSql can now be implemented by clients, but the types module probably doesn't hit the 80% mark yet; e.g. it's missing uint and &[u8]. investigate test coverage tools for rust basic benchmarking Motivation and Acknowledgements I was looking into sandstorm, a personal cloud platform with an architecture based on the wonderful capability security paradigm, and I found a rust application, acronymy, that uses the native API rather than the traditional POSIX environment. I started poring over the code and followed the dependency link to linuxfood's rustsqlite. I started working on a memory safety issue etc. but soon found a number of large-scale API design issues that I wasn't sure how to approach with the upstream developers. I was also inspired by FromSql, ToSql and such from sfackler's rust-postgres API. So I started from scratch, using bindgen, Result (sum types) etc. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dckc/rust-sqlite3"	"— bindings"	"true"
"Database"	"Sqlite3"	"http://www.sqlite.org/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"SQLite Home Page Small. Fast. Reliable. Choose any three. About Documentation Download License Support Purchase SQLite is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine. SQLite is the most widely deployed database engine in the world. The source code for SQLite is in the public domain. More... Sponsors Continuing enhancement and maintenance of SQLite is made possible by SQLite Consortium members, including: Current Status Version 3.13.0 of SQLite is recommended for all new development. Common Links Features When to use SQLite Frequently Asked Questions Getting Started SQL Syntax Pragmas SQL functions Date & time functions Aggregate functions JSON functions C/C++ Interface Spec Introduction List of C-language APIs The TCL Interface Spec Development Timeline Report a Bug News"	"null"	"null"	"— bindings"	"true"
"Database"	""	"https://travis-ci.org/dckc/rust-sqlite3"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Database"	"jgallagher/rusqlite"	"https://github.com/jgallagher/rusqlite"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"98"	"7"	"23"	"GitHub - jgallagher/rusqlite: Ergonomic bindings to SQLite for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 98 Fork 23 jgallagher/rusqlite Code Issues 10 Pull requests 6 Pulse Graphs Ergonomic bindings to SQLite for Rust 547 commits 4 branches 23 releases Fetching contributors Rust 99.8% Shell 0.2% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master release-0.7 safe-tosql Nothing to show 0.7.3 0.7.2 0.7.1 0.7.0 0.6.0 0.5.0 0.4.0 0.3.1 0.3.0 0.2.0 0.1.0 0.0.17 0.0.16 0.0.15 0.0.14 0.0.12 0.0.11 0.0.10 0.0.9 0.0.8 0.0.7 0.0.2 0.0.1 Nothing to show New pull request Latest commit bf8c495 Jun 13, 2016 jgallagher committed on GitHub Merge pull request #175 from gwenn/empty-blob … Empty blob Permalink Failed to load latest commit information. benches Add benchmarks for statement cache. Dec 20, 2015 libsqlite3-sys Bump to version 0.7.0. May 19, 2016 src Fix issue jgallagher/rusqlite#174 Jun 13, 2016 tests Add test and check for SQLite being in single-threaded mode Dec 16, 2015 .gitignore gitignore doc/ Oct 20, 2014 .travis.yml Remove cache feature May 17, 2016 CONTRIBUTORS.md Add supsuper to CONTRIBUTORS Mar 29, 2016 Cargo.toml Merge branch 'release-0.7' into merge-0.7.3 Jun 1, 2016 Changelog.md Merge branch 'release-0.7' into merge-0.7.3 Jun 2, 2016 LICENSE Add LICENSE and README Nov 4, 2014 README.md Add new features to README. May 19, 2016 appveyor.yml Use new Rust 1.9 attribute: #[deprecated]. May 26, 2016 build.rs Use new hyphen-less extern crate name Mar 26, 2015 clippy.toml Teach clippy about allowed doc markdown identifiers May 19, 2016 publish-ghp-docs.sh Update feature list in doc-publishing script May 19, 2016 README.md Rusqlite Rusqlite is an ergonomic wrapper for using SQLite from Rust. It attempts to expose an interface similar to rust-postgres. View the full API documentation. extern crate rusqlite; extern crate time;  use time::Timespec; use rusqlite::Connection;  #[derive(Debug)] struct Person {     id: i32,     name: String,     time_created: Timespec,     data: Option<Vec<u8>> }  fn main() {     let conn = Connection::open_in_memory().unwrap();      conn.execute(""CREATE TABLE person (                   id              INTEGER PRIMARY KEY,                   name            TEXT NOT NULL,                   time_created    TEXT NOT NULL,                   data            BLOB                   )"", &[]).unwrap();     let me = Person {         id: 0,         name: ""Steven"".to_string(),         time_created: time::get_time(),         data: None     };     conn.execute(""INSERT INTO person (name, time_created, data)                   VALUES ($1, $2, $3)"",                  &[&me.name, &me.time_created, &me.data]).unwrap();      let mut stmt = conn.prepare(""SELECT id, name, time_created, data FROM person"").unwrap();     let mut person_iter = stmt.query_map(&[], |row| {         Person {             id: row.get(0),             name: row.get(1),             time_created: row.get(2),             data: row.get(3)         }     }).unwrap();      for person in person_iter {         println!(""Found person {:?}"", person.unwrap());     } } Optional Features Rusqlite provides several features that are behind Cargo features. They are: load_extension allows loading dynamic library-based SQLite extensions. backup allows use of SQLite's online backup API. functions allows you to load Rust closures into SQLite connections for use in queries. trace allows hooks into SQLite's tracing and profiling APIs. blob gives std::io::{Read, Write, Seek} access to SQL BLOBs. chrono implements FromSql and ToSql for various types from the chrono crate. serde_json implements FromSql and ToSql for the Value type from the serde_json crate. Author John Gallagher, johnkgallagher@gmail.com License Rusqlite is available under the MIT license. See the LICENSE file for more info. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jgallagher/rusqlite"	"— bindings"	"true"
"Database"	""	"https://travis-ci.org/jgallagher/rusqlite"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Database"	"linuxfood/rustsqlite"	"https://github.com/linuxfood/rustsqlite"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"78"	"10"	"30"	"GitHub - linuxfood/rustsqlite: SQLite3 Bindings for Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 78 Fork 30 linuxfood/rustsqlite Code Issues 10 Pull requests 0 Pulse Graphs SQLite3 Bindings for Rust. 271 commits 1 branch 0 releases 23 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit d586703 Apr 6, 2015 lifthrasiir Merge pull request #121 from dwrensha/beta-compatibility … Copy is opt-in, Sync is automatically not implemented for raw pointers, and libc lives on crates.io Permalink Failed to load latest commit information. src Copy is opt-in, Sync is automatically not implemented for raw pointer… Apr 5, 2015 .gitignore Ignore Cargo.lock Sep 4, 2014 .travis.yml Use just the rustup.sh and call cargo from that Sep 5, 2014 Cargo.toml Copy is opt-in, Sync is automatically not implemented for raw pointer… Apr 5, 2015 LICENSE Add copyright and licensing information. Dec 26, 2011 README.md link to travis build Nov 25, 2014 README.md SQLite3 Bindings for Rust To compile use rustc src/sqlite3.rs or if you have Cargo installed cargo build. The interface is currently evolving both along with Rust and as I think of better ways to implement various behaviors. If you have ideas about better behavior for anything in this binding please feel free to open an issue. Build status: Maintainers These are the brave souls who have kept this project alive in some fashion or another. Note to future maintainers: if you feel you've made significant contributions to the project, do add yourself to the list. @linuxfood originally wrote the bindings, then wandered away - 2011 @kud1ing took over maintainership for quite awhile - 2011-2014 @lifthrasiir now carries the torch - 2014 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/linuxfood/rustsqlite"	"— bindings"	"true"
"Database"	""	"https://travis-ci.org/linuxfood/rustsqlite"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Data structures"	"bluss/rust-itertools"	"https://github.com/bluss/rust-itertools"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"159"	"12"	"42"	"GitHub - bluss/rust-itertools: Extra iterator adaptors, functions and macros. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 159 Fork 42 bluss/rust-itertools Code Issues 17 Pull requests 1 Pulse Graphs Extra iterator adaptors, functions and macros. https://bluss.github.io/rust-itertools/ 661 commits 6 branches 58 releases 25 contributors Rust 99.5% Other 0.5% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags experimental fill-with gh-pages master sliding-windows-pr-73 testbuild Nothing to show 0.3.25 0.3.24 0.3.23 0.3.22 0.3.21 0.3.20 0.3.19 0.3.17 0.3.16 0.3.15 0.3.14 0.3.13 0.3.12 0.3.11 0.3.10 0.3.9 0.3.8 0.3.7 0.3.6 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.9 0.2.8 0.2.7 0.2.6 0.2.5 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 0.1.10 0.1.9 0.1.8 0.1.7 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 0.0.20 0.0.19 0.0.18 0.0.17 0.0.16 0.0.15 0.0.14 0.0.13 0.0.10 0.0.9 0.0.8 0.0.7 Nothing to show New pull request Latest commit 9144f63 Jun 16, 2016 bluss Add fusing note to dropping … Closes #117 Permalink Failed to load latest commit information. benches Make a bigger benchmark for kmerge Feb 23, 2016 examples Fix iris example for Rust 1.1 or later. Oct 14, 2015 src Add fusing note to dropping Jun 16, 2016 tests Add test for interleave_shortest's size_hint Jun 10, 2016 .gitignore Ignore target directory and Cargo lockfile Feb 19, 2015 .travis.yml Update to require Rust 1.2+ Mar 8, 2016 Cargo.toml 0.4.16 Jun 16, 2016 LICENSE-APACHE Add MIT/Apache-2.0 files May 21, 2015 LICENSE-MIT Add MIT/Apache-2.0 files May 20, 2015 Makefile Update Makefile for docs Jun 17, 2015 README.rst 0.4.16 Jun 16, 2016 custom.css custom.css: Use bold and no gray for the inline code markup Jun 23, 2015 README.rst Itertools Extra iterator adaptors, functions and macros. Requires Rust 1.2+. Please read the API documentation here How to use with cargo: [dependencies] itertools = ""0.4.16""  How to use in your crate: #[macro_use] extern crate itertools;  use itertools::Itertools; How to contribute: Fix a bug or implement a new thing Include tests for your new feature, preferably a quickcheck test Make a Pull Request Recent Changes 0.4.16 Improve precision of the interleave_shortest adaptor's size hint (it is now computed exactly when possible). 0.4.15 Fixup on top of the workaround in 0.4.14. A function in itertools::free was removed by mistake and now it is added back again. 0.4.14 Workaround an upstream regression in a rust nightly build that broke compilation of of itertools:🆓:{interleave, merge} 0.4.13 Add .minmax() and .minmax_by_key(), iterator methods for finding both minimum and maximum in one scan. Add .format_default(), a simpler version of .format() (lazy formatting for iterators). 0.4.12 Add .zip_eq(), an adaptor like .zip() except it ensures iterators of inequal length don't pass silently (instead it panics). Add .fold_while(), an iterator method that is a fold that can short-circuit. Add .partition_map(), an iterator method that can separate elements into two collections. 0.4.11 Add .get() for Stride{,Mut} and .get_mut() for StrideMut 0.4.10 Improve performance of .kmerge() 0.4.9 Add k-ary merge adaptor .kmerge() Fix a bug in .islice() with ranges a..b where a > b. 0.4.8 Implement Clone, Debug for Linspace 0.4.7 Add function diff_with() that compares two iterators Add .combinations_n(), an n-ary combinations iterator Add methods PutBack::with_value and PutBack::into_parts. 0.4.6 Add method .sorted() Add module itertools::free with free function variants of common iterator adaptors and methods. For example enumerate(iterable), rev(iterable), and so on. 0.4.5 Add .flatten() 0.4.4 Allow composing ZipSlices with itself 0.4.3 Write iproduct!() as a single expression; this allows temporary values in its arguments. 0.4.2 Add .fold_options() Require Rust 1.1 or later 0.4.1 Update .dropping() to take advantage of .nth() 0.4.0 .merge(), .unique() and .dedup() now perform better due to not using function pointers Add free functions enumerate() and rev() Breaking changes: Return types of .merge() and .merge_by() renamed and changed Method Merge::new removed .merge_by() now takes a closure that returns bool. Return type of .dedup() changed Return type of .mend_slices() changed Return type of .unique() changed Removed function times(), struct Times: use a range instead Removed deprecated macro icompr!() Removed deprecated FnMap and method .fn_map(): use .map_fn() .interleave_shortest() is no longer guaranteed to act like fused 0.3.25 Rename .sort_by() to .sorted_by(). Old name is deprecated. Fix well-formedness warnings from RFC 1214, no user visible impact 0.3.24 Improve performance of .merge()'s ordering function slightly 0.3.23 Added .chunks_lazy(), similar to (and based on) .group_by_lazy(). Tweak linspace to match numpy.linspace and make it double ended. 0.3.22 Added ZipSlices, a fast zip for slices 0.3.21 Remove Debug impl for Format, it will have different use later 0.3.20 Optimize .group_by_lazy() 0.3.19 Added .group_by_lazy(), a possibly nonallocating group by Added .format(), a nonallocating formatting helper for iterators Remove uses of RandomAccessIterator since it has been deprecated in rust. 0.3.17 Added (adopted) Unfold from rust 0.3.16 Added adaptors .unique(), .unique_by() 0.3.15 Added method .sort_by() 0.3.14 Added adaptor .while_some() 0.3.13 Added adaptor .interleave_shortest() Added adaptor .pad_using() 0.3.11 Added assert_equal function 0.3.10 Bugfix .combinations() size_hint. 0.3.8 Added source RepeatCall 0.3.7 Added adaptor PutBackN Added adaptor .combinations() 0.3.6 Added itertools::partition, partition a sequence in place based on a predicate. Deprecate icompr!() with no replacement. 0.3.5 .map_fn() replaces deprecated .fn_map(). 0.3.4 .take_while_ref() by-ref adaptor .coalesce() adaptor .mend_slices() adaptor 0.3.3 .dropping_back() method .fold1() method .is_empty_hint() method License Dual-licensed to be compatible with the Rust project. Licensed under the Apache License, Version 2.0 http://www.apache.org/licenses/LICENSE-2.0 or the MIT license http://opensource.org/licenses/MIT, at your option. This file may not be copied, modified, or distributed except according to those terms. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bluss/rust-itertools"	"—"	"true"
"Data structures"	""	"https://travis-ci.org/bluss/rust-itertools"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Data structures"	"contain-rs"	"https://github.com/contain-rs"	"— Extension of Rust's std::collections"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"contain-rs · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization contain-rs Extension of Rust's std::collections Repositories People 3 Filters Sources Forks Rust 1 5 hashmap2 forked from carllerche/hashmap2 Fork of std::collections::HashMap Updated Jul 15, 2016 Rust 1 2 enum-set A structure for holding a set of enum variants Updated Jul 11, 2016 Rust 6 5 vec-map A simple map based on a vector for small integer keys Updated Jul 10, 2016 Rust 2 1 interval-heap A double-ended priority queue implemented with an interval heap. Updated Jul 10, 2016 Rust 11 10 linked-hash-map A HashMap wrapper that holds key-value pairs in insertion order Updated Jul 10, 2016 Rust 3 7 lru-cache A cache that holds a limited number of key-value pairs Updated Jul 10, 2016 Rust 2 6 linear-map A map backed by a vector Updated Jul 10, 2016 Rust 3 4 bit-set A Set of Bits Updated Apr 4, 2016 Rust 7 17 bit-vec A Vec of Bits Updated Mar 9, 2016 Rust 2 1 ordered_iter Ordered iterators Updated Feb 18, 2016 Rust 2 1 par-vec Updated Feb 12, 2016 Rust 7 2 linked-list An alternative implementation of std::collections::LinkedList Updated Feb 6, 2016 Rust 2 1 trie An ordered map and set based on a trie. Updated Aug 21, 2015 Rust 1 0 raw-vec A Raw utility for managing contiguous heap allocations Updated Aug 10, 2015 Rust 0 1 cons-list An immutable singly-linked list, as seen in basically every functional language Updated Jul 4, 2015 Rust 0 6 rust-traverse forked from reem/rust-traverse Traversals in Rust Updated Jun 5, 2015 Rust 0 0 blist A deque implemented as a hybrid linked-list-of-arrays Updated Jun 5, 2015 Python 0 44 highfive forked from nrc/highfive Github hooks to provide an encouraging atmosphere for new contributors Updated Jun 3, 2015 Python 0 0 admin Administrative tools/configurations for the contain-rs organisation. Updated Jun 3, 2015 Rust 3 0 compare Experimental comparators for collections to be generic over Updated Apr 7, 2015 Previous 1 2 Next 3 People apasel422 Andrew Paseltiner carllerche Carl Lerche reem Jonathan Reem Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/contain-rs"	"— Extension of Rust's std::collections"	"true"
"Data structures"	"fizyk20/generic-array"	"https://github.com/fizyk20/generic-array"	"– a hack to allow for arrays sized by typenums"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17"	"2"	"8"	"GitHub - fizyk20/generic-array: Generic array types in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 17 Fork 8 fizyk20/generic-array Code Issues 0 Pull requests 0 Pulse Graphs Generic array types in Rust 58 commits 2 branches 12 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show doc-0.0.2 0.3.2 0.3.1 0.3.0 0.2.1 0.2.0 0.1.2 0.1.1 0.1.0 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src tests .gitignore .travis.yml Cargo.toml LICENSE README.md README.md generic-array This crate implements generic array types for Rust. Documentation Usage The Rust arrays [T; N] are problematic in that they can't be used generically with respect to N, so for example this won't work: struct Foo<N> {     data: [i32; N] } generic-array defines a new trait ArrayLength<T> and a struct GenericArray<T, N: ArrayLength<T>>, which let the above be implemented as: struct Foo<N: ArrayLength<i32>> {     data: GenericArray<i32, N> } To actually define a type implementing ArrayLength, you can use unsigned integer types defined in typenum crate - for example, GenericArray<T, U5> would work almost like [T; 5] :) In version 0.1.1 an arr! macro was introduced, allowing for creation of arrays as shown below: let array = arr![u32; 1, 2, 3]; assert_eq!(arr[2], 3); Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fizyk20/generic-array"	"– a hack to allow for arrays sized by typenums"	"true"
"Data structures"	""	"https://travis-ci.org/fizyk20/generic-array"	"– a hack to allow for arrays sized by typenums"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"– a hack to allow for arrays sized by typenums"	"true"
"Data structures"	"Nemo157/roaring-rs"	"https://github.com/Nemo157/roaring-rs"	"– Roaring Bitmaps in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"32"	"2"	"4"	"GitHub - Nemo157/roaring-rs: Roaring bitmap implementation for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 32 Fork 4 Nemo157/roaring-rs Code Issues 3 Pull requests 0 Pulse Graphs Roaring bitmap implementation for Rust https://nemo157.com/roaring-rs/ 155 commits 5 branches 22 releases 4 contributors Rust 99.1% Shell 0.9% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags benchmarks bindings gh-pages master run-containers Nothing to show 0.4.0 0.3.2 0.3.1 0.2.2 0.2.1 0.2.0 0.1.0 0.0.15 0.0.14 0.0.13 0.0.12 0.0.11 0.0.10 0.0.9 0.0.8 0.0.7 0.0.6 0.0.5 0.0.4 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Latest commit 5089f18 Apr 11, 2016 Nemo157 Merge pull request #17 from jiangyang/master … add Halvable/ExtInt impl for usize Permalink Failed to load latest commit information. benches converted tabs to spaces Jul 31, 2015 ci Move files, orgin not github Dec 29, 2014 src add Halvable/ExtInt impl for usize Apr 10, 2016 tests Add test for when difference_with removes a container Nov 5, 2015 .editorconfig Add http://editorconfig.org settings Jul 31, 2015 .gitignore Initial work Dec 27, 2014 .travis.yml Fix travis.ci allow_failures Jan 8, 2016 Cargo.toml Relicense under MIT/Apache-2.0 Jan 8, 2016 LICENSE-APACHE Relicense under MIT/Apache-2.0 Jan 8, 2016 LICENSE-MIT Relicense under MIT/Apache-2.0 Jan 8, 2016 README.md Fix license block in readme Jan 8, 2016 README.md RoaringBitmap This is not yet production ready. The API should be mostly complete now. This is a Rust port of the Roaring bitmap data structure, initially defined as a Java library and described in Better bitmap performance with Roaring bitmaps. Developing Take note of the Collections reform RFC for the API. Mostly aiming to duplicate the BitSet API. License Licensed under either of Apache License, Version 2.0 (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Nemo157/roaring-rs"	"– Roaring Bitmaps in Rust"	"true"
"Data structures"	""	"https://travis-ci.org/Nemo157/roaring-rs"	"– Roaring Bitmaps in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"– Roaring Bitmaps in Rust"	"true"
"Data structures"	"reem/rust-typemap"	"https://github.com/reem/rust-typemap"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"54"	"6"	"21"	"GitHub - reem/rust-typemap: A typesafe store keyed by types and containing different types of values. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 54 Fork 21 reem/rust-typemap Code Issues 1 Pull requests 3 Pulse Graphs A typesafe store keyed by types and containing different types of values. 84 commits 1 branch 0 releases 10 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 51650cd Feb 15, 2016 reem Add a documentation link to the README. Permalink Failed to load latest commit information. src (fix) Add a missing blanket implementation of DebugAny. Jun 12, 2015 .gitignore (init) Aug 19, 2014 .travis.yml (chore) Update to a modern travis configuration. May 9, 2015 Cargo.toml (release) 0.3.3. Jun 12, 2015 README.md Add a documentation link to the README. Feb 15, 2016 README.md TypeMap A typesafe store keyed by types and containing different types of values. Documentation It provides functionality similar to AnyMap, but is more flexible because it allows for key-value pairs, rather than enforcing that keys and values are the same type. Key-value associations are defined through the Key trait, which uses an associated type parameter and trait coherence rules to enforce the invariants of TypeMap. Example extern crate typemap; use typemap::{TypeMap, Key};  struct KeyType;  #[derive(Debug, PartialEq)] struct Value(i32);  impl Key for KeyType { type Value = Value; }  #[test] fn test_pairing() {     let mut map = TypeMap::new();     map.insert::<KeyType>(Value(42));     assert_eq!(*map.get::<KeyType>().unwrap(), Value(42)); } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/reem/rust-typemap"	"—"	"true"
"Data structures"	""	"https://travis-ci.org/reem/rust-typemap"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Encoding"	"Serde"	"https://github.com/serde-rs/serde"	"[] — YAML support for framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"422"	"25"	"77"	"GitHub - serde-rs/serde: Rust serialization Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 422 Fork 77 serde-rs/serde Code Issues 49 Pull requests 5 Pulse Graphs Rust serialization 1,117 commits 4 branches 45 releases 50 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto gh-pages master rustfmt Nothing to show v0.7.14 v0.7.13 v0.7.12 v0.7.11 v0.7.10 v0.7.9 v0.7.8 v0.7.7 v0.7.6 v0.7.5 v0.7.4 v0.7.2 v0.7.1 v0.7.0 v0.6.15 v0.6.14 v0.6.13 v0.6.12 v0.6.11 v0.6.10 v0.6.9 v0.6.8 v0.6.7 v0.6.6 v0.6.5 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.1 v0.2.0 Nothing to show New pull request Latest commit ed603d4 Jul 15, 2016 dtolnay committed on GitHub Merge pull request #442 from serde-rs/override … Use cargo override instead of relative paths Permalink Failed to load latest commit information. .cargo Use cargo override instead of relative paths Jul 15, 2016 examples/serde-syntex-example Use cargo override instead of relative paths Jul 15, 2016 serde Update syntex to 0.38 Jul 9, 2016 serde_codegen Use cargo override instead of relative paths Jul 15, 2016 serde_codegen_internals Update syntex to 0.38 Jul 9, 2016 serde_macros Use cargo override instead of relative paths Jul 15, 2016 serde_test Use cargo override instead of relative paths Jul 15, 2016 testing Use cargo override instead of relative paths Jul 15, 2016 .gitignore chore(git): Ignore swap files Oct 19, 2015 .travis.yml Drop support for 1.7.0 Jul 10, 2016 CONTRIBUTING.md Add a contributing guide Jun 22, 2016 LICENSE Optimize serialization Jun 22, 2014 LICENSE-APACHE Optimize serialization Jun 22, 2014 LICENSE-MIT Optimize serialization Jun 22, 2014 README.md add envy Jul 10, 2016 README.md Serde Rust Serialization Framework Serde is a powerful framework that enables serialization libraries to generically serialize Rust data structures without the overhead of runtime type information. In many situations, the handshake protocol between serializers and serializees can be completely optimized away, leaving Serde to perform roughly the same speed as a hand written serializer for a specific type. Documentation Simple Serde Example Here is a simple example that uses serde_json, which uses Serde under the covers, to generate and parse JSON. First, lets start off with the Cargo.toml file: [package] name = ""serde_example"" version = ""0.1.0"" authors = [""Erick Tryzelaar <erick.tryzelaar@gmail.com>""]  [dependencies] serde_json = ""*"" Next, the src/main.rs file itself: extern crate serde_json;  use std::collections::HashMap; use serde_json::Value; use serde_json::builder::{ArrayBuilder, ObjectBuilder};  fn main() {     // Serde has support for many of the builtin Rust types, like arrays..:     let v = vec![1, 2];     let serialized = serde_json::to_string(&v).unwrap();     println!(""serialized vec: {:?}"", serialized);      let deserialized: Vec<u32> = serde_json::from_str(&serialized).unwrap();     println!(""deserialized vec: {:?}"", deserialized);      // ... and maps:     let mut map = HashMap::new();     map.insert(""x"".to_string(), 1);     map.insert(""y"".to_string(), 2);      let serialized = serde_json::to_string(&map).unwrap();     println!(""serialized map: {:?}"", serialized);      let deserialized: HashMap<String, u32> = serde_json::from_str(&serialized).unwrap();     println!(""deserialized map: {:?}"", deserialized);      // It also can handle complex objects:     let value = ObjectBuilder::new()         .insert(""int"", 1)         .insert(""string"", ""a string"")         .insert(""array"", ArrayBuilder::new()                 .push(1)                 .push(2)                 .unwrap())         .unwrap();      let serialized = serde_json::to_string(&value).unwrap();     println!(""serialized value: {:?}"", serialized);      let deserialized: serde_json::Value = serde_json::from_str(&serialized).unwrap();     println!(""deserialized value: {:?}"", deserialized); } This produces the following output when run: % cargo run serialized vec: ""[1,2]"" deserialized vec: [1, 2] serialized map: ""{\""y\"":2,\""x\"":1}"" deserialized map: {""y"": 2, ""x"": 1} serialized value: ""{\""array\"":[1,2],\""int\"":1,\""string\"":\""a string\""}"" deserialized value: {""array"":[1,2],""int"":1,""string"":""a string""}  Using Serde with Stable Rust and serde_codegen The example before used serde_json::Value as the in-memory representation of the JSON value, but it's also possible for Serde to serialize to and from regular Rust types. However, the code to do this can be a bit complicated to write. So instead, Serde also has some powerful code generation libraries that work with Stable and Nightly Rust that eliminate much of the complexity of hand rolling serialization and deserialization for a given type. First lets see how we would use Stable Rust, which is currently a tad more complicated than Nightly Rust due to having to work around compiler plugins being unstable. We will use serde_codegen which is based on the code generation library syntex. First we need to setup the Cargo.toml that builds the project: [package] name = ""serde_example"" version = ""0.1.0"" authors = [""Erick Tryzelaar <erick.tryzelaar@gmail.com>""] build = ""build.rs""  [build-dependencies] serde_codegen = ""*""  [dependencies] serde = ""*"" serde_json = ""*"" Next, we define our source file, src/main.rs.in. Note this is a different extension than usual becaues we need to do code generation: #[derive(Serialize, Deserialize, Debug)] struct Point {     x: i32,     y: i32, }  fn main() {     let point = Point { x: 1, y: 2 };      let serialized = serde_json::to_string(&point).unwrap();     println!(""{}"", serialized);      let deserialized: Point = serde_json::from_str(&serialized).unwrap();     println!(""{:?}"", deserialized); } To finish up the main source code, we define a very simple src/main.rs that uses the generated code. src/main.rs: extern crate serde; extern crate serde_json;  include!(concat!(env!(""OUT_DIR""), ""/main.rs"")); The last step is to actually drive the code generation, with the build.rs script: extern crate serde_codegen;  use std::env; use std::path::Path;  pub fn main() {     let out_dir = env::var_os(""OUT_DIR"").unwrap();      let src = Path::new(""src/main.rs.in"");     let dst = Path::new(&out_dir).join(""main.rs"");      serde_codegen::expand(&src, &dst).unwrap(); } All this produces this when run: % cargo run {""x"":1,""y"":2} Point { x: 1, y: 2 }  While this works well with Stable Rust, be aware that the error locations currently are reported in the generated file instead of in the source file. Using Serde with Nightly Rust and serde_macros The prior example is a bit more complicated than it needs to be due to compiler plugins being unstable. However, if you are already using Nightly Rust, you can use serde_macros, which has a much simpler interface. First, here is the new Cargo.toml: [package] name = ""serde_example_nightly"" version = ""0.1.0"" authors = [""Erick Tryzelaar <erick.tryzelaar@gmail.com>""]  [dependencies] serde = ""*"" serde_json = ""*"" serde_macros = ""*"" Note that it doesn't need a build script. Now the src/main.rs, which enables the plugin feature, and registers the serde_macros plugin: #![feature(custom_derive, plugin)] #![plugin(serde_macros)]  extern crate serde_json;  #[derive(Serialize, Deserialize, Debug)] struct Point {     x: i32,     y: i32, }  fn main() {     let point = Point { x: 1, y: 2 };      let serialized = serde_json::to_string(&point).unwrap();     println!(""{}"", serialized);      let deserialized: Point = serde_json::from_str(&serialized).unwrap();     println!(""{:?}"", deserialized); } This also produces the same output: % cargo run {""x"":1,""y"":2} Point { x: 1, y: 2 }  You may find it easier to develop with Nightly Rust and serde\_macros, then deploy with Stable Rust and serde_codegen. It's possible to combine both approaches in one setup: Cargo.toml: [package] name = ""serde_example"" version = ""0.1.0"" authors = [""Erick Tryzelaar <erick.tryzelaar@gmail.com>""] build = ""build.rs""  [features] default = [""serde_codegen""] nightly = [""serde_macros""]  [build-dependencies] serde_codegen = { version = ""*"", optional = true }  [dependencies] serde = ""*"" serde_json = ""*"" serde_macros = { version = ""*"", optional = true } build.rs: #[cfg(not(feature = ""serde_macros""))] mod inner {     extern crate serde_codegen;      use std::env;     use std::path::Path;      pub fn main() {         let out_dir = env::var_os(""OUT_DIR"").unwrap();          let src = Path::new(""src/main.rs.in"");         let dst = Path::new(&out_dir).join(""main.rs"");          serde_codegen::expand(&src, &dst).unwrap();     } }  #[cfg(feature = ""serde_macros"")] mod inner {     pub fn main() {} }  fn main() {     inner::main(); } src/main.rs: #![cfg_attr(feature = ""serde_macros"", feature(custom_derive, plugin))] #![cfg_attr(feature = ""serde_macros"", plugin(serde_macros))]  extern crate serde; extern crate serde_json;  #[cfg(feature = ""serde_macros"")] include!(""main.rs.in"");  #[cfg(not(feature = ""serde_macros""))] include!(concat!(env!(""OUT_DIR""), ""/main.rs"")); The src/main.rs.in is the same as before. Then to run with stable: % cargo build ...  Or with nightly: % cargo build --features nightly --no-default-features ...  Serialization without Macros Under the covers, Serde extensively uses the Visitor pattern to thread state between the Serializer and Serialize without the two having specific information about each other's concrete type. This has many of the same benefits as frameworks that use runtime type information without the overhead. In fact, when compiling with optimizations, Rust is able to remove most or all the visitor state, and generate code that's nearly as fast as a hand written serializer format for a specific type. To see it in action, lets look at how a simple type like i32 is serialized. The Serializer is threaded through the type: impl serde::Serialize for i32 {     fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>         where S: serde::Serializer,     {         serializer.serialize_i32(*self)     } } As you can see it's pretty simple. More complex types like BTreeMap need to pass a MapVisitor to the Serializer in order to walk through the type: impl<K, V> Serialize for BTreeMap<K, V>     where K: Serialize + Ord,           V: Serialize, {     #[inline]     fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>         where S: Serializer,     {         serializer.serialize_map(MapIteratorVisitor::new(self.iter(), Some(self.len())))     } }  pub struct MapIteratorVisitor<Iter> {     iter: Iter,     len: Option<usize>, }  impl<K, V, Iter> MapIteratorVisitor<Iter>     where Iter: Iterator<Item=(K, V)> {     #[inline]     pub fn new(iter: Iter, len: Option<usize>) -> MapIteratorVisitor<Iter> {         MapIteratorVisitor {             iter: iter,             len: len,         }     } }  impl<K, V, I> MapVisitor for MapIteratorVisitor<I>     where K: Serialize,           V: Serialize,           I: Iterator<Item=(K, V)>, {     #[inline]     fn visit<S>(&mut self, serializer: &mut S) -> Result<Option<()>, S::Error>         where S: Serializer,     {         match self.iter.next() {             Some((key, value)) => {                 let value = try!(serializer.serialize_map_elt(key, value));                 Ok(Some(value))             }             None => Ok(None)         }     }      #[inline]     fn len(&self) -> Option<usize> {         self.len     } } Serializing structs follow this same pattern. In fact, structs are represented as a named map. Its visitor uses a simple state machine to iterate through all the fields: extern crate serde; extern crate serde_json;  struct Point {     x: i32,     y: i32, }  impl serde::Serialize for Point {     fn serialize<S>(&self, serializer: &mut S) -> Result<(), S::Error>         where S: serde::Serializer     {         serializer.serialize_struct(""Point"", PointMapVisitor {             value: self,             state: 0,         })     } }  struct PointMapVisitor<'a> {     value: &'a Point,     state: u8, }  impl<'a> serde::ser::MapVisitor for PointMapVisitor<'a> {     fn visit<S>(&mut self, serializer: &mut S) -> Result<Option<()>, S::Error>         where S: serde::Serializer     {         match self.state {             0 => {                 self.state += 1;                 Ok(Some(try!(serializer.serialize_struct_elt(""x"", &self.value.x))))             }             1 => {                 self.state += 1;                 Ok(Some(try!(serializer.serialize_struct_elt(""y"", &self.value.y))))             }             _ => {                 Ok(None)             }         }     } }  fn main() {     let point = Point { x: 1, y: 2 };     let serialized = serde_json::to_string(&point).unwrap();      println!(""{}"", serialized); } Deserialization without Macros Deserialization is a little more complicated since there's a bit more error handling that needs to occur. Let's start with the simple i32 Deserialize implementation. It passes a Visitor to the Deserializer. The Visitor can create the i32 from a variety of different types: impl Deserialize for i32 {     fn deserialize<D>(deserializer: &mut D) -> Result<i32, D::Error>         where D: serde::Deserializer,     {         deserializer.deserialize(I32Visitor)     } }  struct I32Visitor;  impl serde::de::Visitor for I32Visitor {     type Value = i32;      fn visit_i16<E>(&mut self, value: i16) -> Result<i32, E>         where E: Error,     {         self.visit_i32(value as i32)     }      fn visit_i32<E>(&mut self, value: i32) -> Result<i32, E>         where E: Error,     {         Ok(value)     }      ...  Since it's possible for this type to get passed an unexpected type, we need a way to error out. This is done by way of the Error trait, which allows a Deserialize to generate an error for a few common error conditions. Here's how it could be used:     ...      fn visit_string<E>(&mut self, _: String) -> Result<i32, E>         where E: Error,     {         Err(serde::de::Error::custom(""expect a string""))     }      ...  Maps follow a similar pattern as before, and use a MapVisitor to walk through the values generated by the Deserializer. impl<K, V> serde::Deserialize for BTreeMap<K, V>     where K: serde::Deserialize + Eq + Ord,           V: serde::Deserialize, {     fn deserialize<D>(deserializer: &mut D) -> Result<BTreeMap<K, V>, D::Error>         where D: serde::Deserializer,     {         deserializer.deserialize(BTreeMapVisitor::new())     } }  pub struct BTreeMapVisitor<K, V> {     marker: PhantomData<BTreeMap<K, V>>, }  impl<K, V> BTreeMapVisitor<K, V> {     pub fn new() -> Self {         BTreeMapVisitor {             marker: PhantomData,         }     } }  impl<K, V> serde::de::Visitor for BTreeMapVisitor<K, V>     where K: serde::de::Deserialize + Ord,           V: serde::de::Deserialize {     type Value = BTreeMap<K, V>;      fn visit_unit<E>(&mut self) -> Result<BTreeMap<K, V>, E>         where E: Error,     {         Ok(BTreeMap::new())     }      fn visit_map<V_>(&mut self, mut visitor: V_) -> Result<BTreeMap<K, V>, V_::Error>         where V_: MapVisitor,     {         let mut values = BTreeMap::new();          while let Some((key, value)) = try!(visitor.visit()) {             values.insert(key, value);         }          try!(visitor.end());          Ok(values)     } } Deserializing structs goes a step further in order to support not allocating a String to hold the field names. This is done by custom field enum that deserializes an enum variant from a string. So for our Point example from before, we need to generate: extern crate serde; extern crate serde_json;  #[derive(Debug)] struct Point {     x: i32,     y: i32, }  enum PointField {     X,     Y, }  impl serde::Deserialize for PointField {     fn deserialize<D>(deserializer: &mut D) -> Result<PointField, D::Error>         where D: serde::de::Deserializer     {         struct PointFieldVisitor;          impl serde::de::Visitor for PointFieldVisitor {             type Value = PointField;              fn visit_str<E>(&mut self, value: &str) -> Result<PointField, E>                 where E: serde::de::Error             {                 match value {                     ""x"" => Ok(PointField::X),                     ""y"" => Ok(PointField::Y),                     _ => Err(serde::de::Error::custom(""expected x or y"")),                 }             }         }          deserializer.deserialize(PointFieldVisitor)     } }  impl serde::Deserialize for Point {     fn deserialize<D>(deserializer: &mut D) -> Result<Point, D::Error>         where D: serde::de::Deserializer     {         static FIELDS: &'static [&'static str] = &[""x"", ""y""];         deserializer.deserialize_struct(""Point"", FIELDS, PointVisitor)     } }  struct PointVisitor;  impl serde::de::Visitor for PointVisitor {     type Value = Point;      fn visit_map<V>(&mut self, mut visitor: V) -> Result<Point, V::Error>         where V: serde::de::MapVisitor     {         let mut x = None;         let mut y = None;          loop {             match try!(visitor.visit_key()) {                 Some(PointField::X) => { x = Some(try!(visitor.visit_value())); }                 Some(PointField::Y) => { y = Some(try!(visitor.visit_value())); }                 None => { break; }             }         }          let x = match x {             Some(x) => x,             None => try!(visitor.missing_field(""x"")),         };          let y = match y {             Some(y) => y,             None => try!(visitor.missing_field(""y"")),         };          try!(visitor.end());          Ok(Point{ x: x, y: y })     } }   fn main() {     let serialized = ""{\""x\"":1,\""y\"":2}"";      let deserialized: Point = serde_json::from_str(&serialized).unwrap();      println!(""{:?}"", deserialized); } Design Considerations and tradeoffs for Serializers and Deserializers Serde serialization and deserialization implementations are written in such a way that they err on being able to represent more values, and also provide better error messages when they are passed an incorrect type to deserialize from. For example, by default, it is a syntax error to deserialize a String into an Option<String>. This is implemented such that it is possible to distinguish between the values None and Some(()), if the serialization format supports option types. However, many formats do not have option types, and represents optional values as either a null, or some other value. Serde Serializers and Deserializers can opt-in support for this. For serialization, this is pretty easy. Simply implement these methods: ...      fn visit_none(&mut self) -> Result<(), Self::Error> {         self.visit_unit()     }      fn visit_some<T>(&mut self, value: T) -> Result<(), Self::Error> {         value.serialize(self)     } ... For deserialization, this can be implemented by way of the Deserializer::visit_option hook, which presumes that there is some ability to peek at what is the next value in the serialized token stream. This following example is from serde_tests::TokenDeserializer, where it checks to see if the next value is an Option, a (), or some other value: ...      fn visit_option<V>(&mut self, mut visitor: V) -> Result<V::Value, Error>         where V: de::Visitor,     {         match self.tokens.peek() {             Some(&Token::Option(false)) => {                 self.tokens.next();                 visitor.visit_none()             }             Some(&Token::Option(true)) => {                 self.tokens.next();                 visitor.visit_some(self)             }             Some(&Token::Unit) => {                 self.tokens.next();                 visitor.visit_none()             }             Some(_) => visitor.visit_some(self),             None => Err(Error::EndOfStreamError),         }     }  ... Annotations serde_codegen and serde_macros support annotations that help to customize how types are serialized. Here are the supported annotations: Container Annotations: Annotation Function #[serde(rename=""name"")] Serialize and deserialize this container with the given name #[serde(rename(serialize=""name1""))] Serialize this container with the given name #[serde(rename(deserialize=""name1""))] Deserialize this container with the given name #[serde(deny_unknown_fields)] Always error during serialization when encountering unknown fields. When absent, unknown fields are ignored for self-describing formats like JSON. #[serde(bound=""T: MyTrait"")] Where-clause for the Serialize and Deserialize impls. This replaces any bounds inferred by Serde. #[serde(bound(serialize=""T: MyTrait""))] Where-clause for the Serialize impl. #[serde(bound(deserialize=""T: MyTrait""))] Where-clause for the Deserialize impl. Variant Annotations: Annotation Function #[serde(rename=""name"")] Serialize and deserialize this variant with the given name #[serde(rename(serialize=""name1""))] Serialize this variant with the given name #[serde(rename(deserialize=""name1""))] Deserialize this variant with the given name Field Annotations: Annotation Function #[serde(rename=""name"")] Serialize and deserialize this field with the given name #[serde(rename(serialize=""name1""))] Serialize this field with the given name #[serde(rename(deserialize=""name1""))] Deserialize this field with the given name #[serde(default)] If the value is not specified, use the Default::default() #[serde(default=""$path"")] Call the path to a function fn() -> T to build the value #[serde(skip_serializing)] Do not serialize this value #[serde(skip_deserializing)] Always use Default::default() or #[serde(default=""$path"")] instead of deserializing this value #[serde(skip_serializing_if=""$path"")] Do not serialize this value if this function fn(&T) -> bool returns true #[serde(serialize_with=""$path"")] Call a function fn<S>(&T, &mut S) -> Result<(), S::Error> where S: Serializer to serialize this value of type T #[serde(deserialize_with=""$path"")] Call a function fn<D>(&mut D) -> Result<T, D::Error> where D: Deserializer to deserialize this value of type T #[serde(bound=""T: MyTrait"")] Where-clause for the Serialize and Deserialize impls. This replaces any bounds inferred by Serde for the current field. #[serde(bound(serialize=""T: MyTrait""))] Where-clause for the Serialize impl. #[serde(bound(deserialize=""T: MyTrait""))] Where-clause for the Deserialize impl. Using in no_std crates The core serde package defines a number of features to enable usage in a variety of freestanding environments. Enable any or none of the following features, and use default-features = false in your Cargo.toml: alloc (implies nightly) collections (implies alloc and nightly) std (default) If you only use default-features = false, you will receive a stock no_std serde with no support for any of the collection types. Upgrading from Serde 0.6 #[serde(skip_serializing_if_none)] was replaced with #[serde(skip_serializing_if=""Option::is_none"")]. #[serde(skip_serializing_if_empty)] was replaced with #[serde(skip_serializing_if=""Vec::is_empty"")]. Serialization Formats Using Serde Format Name Bincode bincode env vars envy JSON serde_json MessagePack rmp XML serde_xml YAML serde_yaml Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/serde-rs/serde"	"[] — YAML support for framework"	"true"
"Data structures"	""	"https://travis-ci.org/serde-rs/serde"	"— a framework to generically serialize Rust data structures"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a framework to generically serialize Rust data structures"	"true"
"Date and time"	"date"	"https://crates.io/keywords/date"	"— a framework to generically serialize Rust data structures"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"— a framework to generically serialize Rust data structures"	"true"
"Date and time"	"time"	"https://crates.io/keywords/time"	"— a framework to generically serialize Rust data structures"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"— a framework to generically serialize Rust data structures"	"true"
"Date and time"	"lifthrasiir/rust-chrono"	"https://github.com/lifthrasiir/rust-chrono"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"177"	"8"	"31"	"GitHub - lifthrasiir/rust-chrono: Date and time library for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 177 Fork 31 lifthrasiir/rust-chrono Code Issues 20 Pull requests 3 Pulse Graphs Date and time library for Rust 213 commits 4 branches 0 releases Fetching contributors Rust 99.7% Makefile 0.3% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.2 gh-pages master tzfile Nothing to show Nothing to show New pull request Latest commit 72c3dff Jun 23, 2016 lifthrasiir committed on GitHub Merge pull request #80 from dwillie/master … Clarify serde support inclusion in readme.md Permalink Failed to load latest commit information. src 0.2.22: Fixes on `%.6f` and `%.9f` on whole seconds. Apr 22, 2016 .gitignore fixed .travis.yml to use the correct URL for Cargo nightly. Aug 21, 2014 .travis.yml Added serde support for DateTime, NaiveDate, NaiveTime and NaiveDateT… Nov 19, 2015 AUTHORS.txt 0.2.21: a slight bug fix. Mar 29, 2016 CHANGELOG.md 0.2.22: Fixes on `%.6f` and `%.9f` on whole seconds. Apr 21, 2016 Cargo.toml 0.2.22: Fixes on `%.6f` and `%.9f` on whole seconds. Apr 21, 2016 LICENSE.txt relicensed from MIT to dual MIT/APL2. closes #2. Jul 25, 2014 Makefile rustfmt'ed src/lib.rs (only). Jan 23, 2016 README.md Clarify serde support inclusion in readme.md Jun 22, 2016 README.md Chrono 0.2.22 Date and time handling for Rust. (also known as rust-chrono) It aims to be a feature-complete superset of the time library. In particular, Chrono strictly adheres to ISO 8601. Chrono is timezone-aware by default, with separate timezone-naive types. Chrono is space-optimal and (while not being the primary goal) reasonably efficient. There were several previous attempts to bring a good date and time library to Rust, which Chrono builts upon and should acknowledge: Initial research on the wiki Dietrich Epp's datetime-rs Luis de Bethencourt's rust-datetime Complete Documentation Usage Put this in your Cargo.toml: [dependencies] chrono = ""0.2"" Or, if you want Serde support, include it like this: [dependencies] chrono = { version = ""0.2"", features = [""serde""] } And put this in your crate root: extern crate chrono; Overview Duration chrono::Duration represents the magnitude of a time span. Duration used to be provided by Chrono. It has been moved to the time crate as the time::Duration type, but is still re-exported from Chrono. Date and Time Chrono provides a DateTime type to represent a date and a time in a timezone. For more abstract moment-in-time tracking such as internal timekeeping that is unconcerned with timezones, consider time::SystemTime, which tracks your system clock, or time::Instant, which is an opaque but monotonically-increasing representation of a moment in time. DateTime is timezone-aware and must be constructed from the TimeZone object. DateTimes with different time zones do not mix, but can be converted to each other using the DateTime::with_timezone method. You can get the current date and time in the UTC time zone (UTC::now()) or in the local time zone (Local::now()). use chrono::*;  let utc: DateTime<UTC> = UTC::now();       // e.g. `2014-11-28T12:45:59.324310806Z` let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00` Alternatively, you can create your own date and time. This is a bit verbose due to Rust's lack of function and method overloading, but in turn we get a rich combination of initialization methods. use chrono::*;  let dt = UTC.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z` // July 8 is 188th day of the year 2014 (`o` for ""ordinal"") assert_eq!(dt, UTC.yo(2014, 189).and_hms(9, 10, 11)); // July 8 is Tuesday in ISO week 28 of the year 2014. assert_eq!(dt, UTC.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));  let dt = UTC.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z` assert_eq!(dt, UTC.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000)); assert_eq!(dt, UTC.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));  // dynamic verification assert_eq!(UTC.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),            LocalResult::Single(UTC.ymd(2014, 7, 8).and_hms(21, 15, 33))); assert_eq!(UTC.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None); assert_eq!(UTC.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);  // other time zone objects can be used to construct a local datetime. // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical. let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12); assert_eq!(dt, fixed_dt); Various properties are available to the date and time, and can be altered individually. Most of them are defined in the traits Datelike and Timelike which you should use before. Addition and subtraction is also supported. The following illustrates most supported operations to the date and time: use chrono::*;  // assume this returned `2014-11-28T21:45:59.324310806+09:00`: let dt = Local::now();  // property accessors assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28)); assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59)); assert_eq!(dt.weekday(), Weekday::Fri); assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sat=7 assert_eq!(dt.ordinal(), 332); // the day of year assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1  // time zone accessor and manipulation assert_eq!(dt.offset().local_minus_utc(), Duration::hours(9)); assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600)); assert_eq!(dt.with_timezone(&UTC), UTC.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));  // a sample of property manipulations (validates dynamically) assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday assert_eq!(dt.with_day(32), None); assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE  // arithmetic operations assert_eq!(UTC.ymd(2014, 11, 14).and_hms(8, 9, 10) - UTC.ymd(2014, 11, 14).and_hms(10, 9, 8),            Duration::seconds(-2 * 3600 + 2)); assert_eq!(UTC.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),            UTC.ymd(2001, 9, 9).and_hms(1, 46, 40)); assert_eq!(UTC.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),            UTC.ymd(1938, 4, 24).and_hms(22, 13, 20)); Formatting is done via the format method, which format is equivalent to the familiar strftime format. (See the format::strftime module documentation for full syntax.) The default to_string method and {:?} specifier also give a reasonable representation. Chrono also provides to_rfc{2822,3339} methods for well-known formats. use chrono::*;  let dt = UTC.ymd(2014, 11, 28).and_hms(12, 0, 9); assert_eq!(dt.format(""%Y-%m-%d %H:%M:%S"").to_string(), ""2014-11-28 12:00:09""); assert_eq!(dt.format(""%a %b %e %T %Y"").to_string(), ""Fri Nov 28 12:00:09 2014""); assert_eq!(dt.format(""%a %b %e %T %Y"").to_string(), dt.format(""%c"").to_string());  assert_eq!(dt.to_string(), ""2014-11-28 12:00:09 UTC""); assert_eq!(dt.to_rfc2822(), ""Fri, 28 Nov 2014 12:00:09 +0000""); assert_eq!(dt.to_rfc3339(), ""2014-11-28T12:00:09+00:00""); assert_eq!(format!(""{:?}"", dt), ""2014-11-28T12:00:09Z""); Parsing can be done with three methods: The standard FromStr trait (and parse method on a string) can be used for parsing DateTime<FixedOffset>, DateTime<UTC> and DateTime<Local> values. This parses what the {:?} (std::fmt::Debug) format specifier prints, and requires the offset to be present. DateTime::parse_from_str parses a date and time with offsets and returns DateTime<FixedOffset>. This should be used when the offset is a part of input and the caller cannot guess that. It cannot be used when the offset can be missing. DateTime::parse_from_rfc{2822,3339} are similar but for well-known formats. Offset::datetime_from_str is similar but returns DateTime of given offset. When the explicit offset is missing from the input, it simply uses given offset. It issues an error when the input contains an explicit offset different from the current offset. More detailed control over the parsing process is available via format module. use chrono::*;  let dt = UTC.ymd(2014, 11, 28).and_hms(12, 0, 9); let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));  // method 1 assert_eq!(""2014-11-28T12:00:09Z"".parse::<DateTime<UTC>>(), Ok(dt.clone())); assert_eq!(""2014-11-28T21:00:09+09:00"".parse::<DateTime<UTC>>(), Ok(dt.clone())); assert_eq!(""2014-11-28T21:00:09+09:00"".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));  // method 2 assert_eq!(DateTime::parse_from_str(""2014-11-28 21:00:09 +09:00"", ""%Y-%m-%d %H:%M:%S %z""),            Ok(fixed_dt.clone())); assert_eq!(DateTime::parse_from_rfc2822(""Fri, 28 Nov 2014 21:00:09 +0900""),            Ok(fixed_dt.clone())); assert_eq!(DateTime::parse_from_rfc3339(""2014-11-28T21:00:09+09:00""), Ok(fixed_dt.clone()));  // method 3 assert_eq!(UTC.datetime_from_str(""2014-11-28 12:00:09"", ""%Y-%m-%d %H:%M:%S""), Ok(dt.clone())); assert_eq!(UTC.datetime_from_str(""Fri Nov 28 12:00:09 2014"", ""%a %b %e %T %Y""), Ok(dt.clone()));  // oops, the year is missing! assert!(UTC.datetime_from_str(""Fri Nov 28 12:00:09"", ""%a %b %e %T %Y"").is_err()); // oops, the format string does not include the year at all! assert!(UTC.datetime_from_str(""Fri Nov 28 12:00:09"", ""%a %b %e %T"").is_err()); // oops, the weekday is incorrect! assert!(UTC.datetime_from_str(""Sat Nov 28 12:00:09 2014"", ""%a %b %e %T %Y"").is_err()); Individual date Chrono also provides an individual date type (Date). It also has time zones attached, and have to be constructed via time zones. Most operations available to DateTime are also available to Date whenever appropriate. use chrono::*;  assert_eq!(UTC::today(), UTC::now().date()); assert_eq!(Local::today(), Local::now().date());  assert_eq!(UTC.ymd(2014, 11, 28).weekday(), Weekday::Fri); assert_eq!(UTC.ymd_opt(2014, 11, 31), LocalResult::None); assert_eq!(UTC.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(""%H%M%S"").to_string(),            ""070809""); There is no timezone-aware Time due to the lack of usefulness and also the complexity. DateTime has date method which returns a Date which represents its date component. There is also a time method, which simply returns a naive local time described below. Naive date and time Chrono provides naive counterparts to Date, (non-existent) Time and DateTime as NaiveDate, NaiveTime and NaiveDateTime respectively. They have almost equivalent interfaces as their timezone-aware twins, but are not associated to time zones obviously and can be quite low-level. They are mostly useful for building blocks for higher-level types. Timezone-aware DateTime and Date types have two methods returning naive versions: naive_local returns a view to the naive local time, and naive_utc returns a view to the naive UTC time. Limitations Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported. Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others. Date types are limited in about +/- 262,000 years from the common epoch. Time types are limited in the nanosecond accuracy. Leap seconds are supported in the representation but Chrono doesn't try to make use of them. (The main reason is that leap seconds are not really predictable.) Almost every operation over the possible leap seconds will ignore them. Consider using NaiveDateTime with the implicit TAI (International Atomic Time) scale if you want. Chrono inherently does not support an inaccurate or partial date and time representation. Any operation that can be ambiguous will return None in such cases. For example, ""a month later"" of 2014-01-30 is not well-defined and consequently UTC.ymd(2014, 1, 30).with_month(2) returns None. Advanced time zone handling is not yet supported (but is planned in 0.3). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lifthrasiir/rust-chrono"	"—"	"true"
"Date and time"	""	"https://travis-ci.org/lifthrasiir/rust-chrono"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Date and time"	"rust-lang-deprecated/time"	"https://github.com/rust-lang-deprecated/time"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"69"	"13"	"58"	"GitHub - rust-lang-deprecated/time: Simple time handling in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 69 Fork 58 rust-lang-deprecated/time Code Issues 10 Pull requests 1 Pulse Graphs Simple time handling in Rust 234 commits 2 branches 1 release Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 0.1.35 Nothing to show New pull request Latest commit 4c81709 Jul 7, 2016 alexcrichton Optimize Display a bit … Delegate to `write_str` where possible to skip overhead of `write!` Permalink Failed to load latest commit information. benches Fix benchmark May 18, 2015 src Optimize Display a bit Jul 7, 2016 .gitignore Initial commit Nov 10, 2014 .travis.yml Move travis from 1.0.0 -> stable Jan 25, 2016 Cargo.toml Bump to 0.1.35 Apr 1, 2016 LICENSE-APACHE Initial commit Nov 10, 2014 LICENSE-MIT Initial commit Nov 10, 2014 README.md Update travis url in README Sep 21, 2015 appveyor.yml Don't call vcvarsall manually Jul 31, 2015 README.md time Utilities for working with time-related functions in Rust Documentation Usage Put this in your Cargo.toml: [dependencies] time = ""0.1"" And this in your crate root: extern crate time; Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rust-lang-deprecated/time"	"—"	"true"
"Date and time"	""	"https://travis-ci.org/rust-lang-deprecated/time"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Distributed Systems"	"spicavigo/kafka-rust"	"https://github.com/spicavigo/kafka-rust"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"121"	"11"	"16"	"GitHub - spicavigo/kafka-rust: Rust client for Apache Kafka Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 121 Fork 16 spicavigo/kafka-rust Code Issues 10 Pull requests 0 Pulse Graphs Rust client for Apache Kafka 380 commits 2 branches 15 releases 6 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.4.1 v0.4.0 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.0 v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit f5f64d1 Jul 14, 2016 xitep Version up (0.4.1) Permalink Failed to load latest commit information. examples console-producer: allow specifying required-acks Jul 13, 2016 src Code styling Jul 13, 2016 test-data #! Test crc validation Mar 8, 2016 .gitignore Documentation and produce request refact May 9, 2015 .travis.yml Cache ~/.cargo in travis Jul 8, 2016 Cargo.toml Version up (0.4.1) Jul 14, 2016 LICENCE update licence May 25, 2015 README.md Prepare for 0.4.0 release Jul 12, 2016 README.md Kafka Rust Client Documentation This library is primarily documented through examples in its API documentation. Documentation about Kafka itself can be found at its project home page. Installation This crate works with Cargo and is on crates.io. The API is currently under heavy movement although we do follow semantic versioning (but expect the version number to grow quickly.) [dependencies] kafka = ""0.4"" To build kafka-rust you'll need libsnappy-dev on your local machine. If that library is not installed in the usual path, you can export the LD_LIBRARY_PATH and LD_RUN_PATH environment variables before issueing cargo build. Alternatively, support for various features, including snappy, can be turned off at compile time. See kafka-rust's Cargo.toml and cargo's documentation. Supported Kafka version kafka-rust is tested against Kafka 0.8.2.x and regularly used against Kafka 0.9 servers. However, efforts to implement support for new features from the Kafka 0.9 release are just in their beginnings. Examples As mentioned, the cargo generated documentation constains some examples. Further, standalone, compilable example programs are provided in the examples directory of the repository. Consumer This is a higher-level Consumer API for Kafka. It provides convenient offset management support on behalf of a specified group. This is the API a client application of this library wants to use for receiving messages from Kafka. Producer This is a higher-level Producer API for Kafka. It provides convenient automatic partition assignment capabilities through partitioners. This is the API a client application of this library wants to use for sending messsages to Kafka. KafkaClient KafkaClient is the central point of this API. However, this is a mid-level abstraction for Kafka rather suitable for building higher-level APIs. Application's typically want to use the already mentioned Consumers and Producers. Nevertheless, KafkaClient's main methods are: Loading metadata Fetching topic offsets Sending messages Fetching messages Committing a consumer group's offsets Fetching a consumer group's offsets Bugs / Features / Contributing There's still a lot of room for improvements on kafka-rust. Not everything works right at the moment. Have a look into the issue tracker and feel free to contribute by reporting new problems or contributing to existing ones. Any constructive contribution is warmly wellcome! As usually with open source, don't hesitate to fork the repo and submit a pull requests if you see something to be changed. We'll be happy see kafka-rust improving over time. Creating a topic Note unless otherwise explicitely stated in the documentation, this library will ignore requests to topics which it doesn't know about. In particular it will not try to retrieve messages from non-existing/unknown topics. (This behavior is very likely to change in future version of this library.) Given a local kafka server installation you can create topics if the following command (kafka-topics.sh is part of the Kafka distribution): kafka-topics.sh --topic my-topic --create --zookeeper localhost:2181  --partition 1 --replication-factor 1  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/spicavigo/kafka-rust"	"—"	"true"
"Distributed Systems"	""	"https://travis-ci.org/spicavigo/kafka-rust"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Distributed Systems"	"schickling/rust-beanstalkd"	"https://github.com/schickling/rust-beanstalkd"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"11"	"2"	"5"	"GitHub - schickling/rust-beanstalkd: Easy-to-use beanstalkd client for Rust (IronMQ compatible) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 11 Fork 5 schickling/rust-beanstalkd Code Issues 0 Pull requests 0 Pulse Graphs Easy-to-use beanstalkd client for Rust (IronMQ compatible) http://schickling.me/rust-beanstalkd 48 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 0f8a7a3 Jan 11, 2016 schickling Merge pull request #3 from cmr/master … Relicense to dual MIT/Apache-2.0 Permalink Failed to load latest commit information. examples Moving to Rustc 1.3 Oct 24, 2015 src Moving to Rustc 1.3 Oct 24, 2015 .gitignore init Dec 6, 2014 .travis.yml fix travis Feb 23, 2015 Cargo.toml Relicense to dual MIT/Apache-2.0 Jan 11, 2016 LICENSE-APACHE Relicense to dual MIT/Apache-2.0 Jan 11, 2016 LICENSE-MIT Relicense to dual MIT/Apache-2.0 Jan 11, 2016 README.md Relicense to dual MIT/Apache-2.0 Jan 11, 2016 README.md rust-beanstalkd Easy-to-use beanstalkd client for Rust (IronMQ compatible) Install Add this dependency to your Cargo.toml beanstalkd = ""*"" Documentation More documentation can be found here. Usage Producer extern crate beanstalkd;  use beanstalkd::Beanstalkd;  fn main() {     let mut beanstalkd = Beanstalkd::localhost().unwrap();     let _ = beanstalkd.put(""Hello World"", 0, 0, 10000); }  Consumer extern crate beanstalkd;  use beanstalkd::Beanstalkd;  fn main() {     let mut beanstalkd = Beanstalkd::localhost().unwrap();     let (id, body) = beanstalkd.reserve().unwrap();     println!(""{}"", body);     let _ = beanstalkd.delete(id); }  IronMQ example extern crate beanstalkd;  use beanstalkd::Beanstalkd;  fn main() {     let host = ""mq-aws-us-east-1.iron.io"";     let token = ""your token"";     let project_id = ""your project id - not the name"";      let mut beanstalkd = Beanstalkd::connect(host, 11300).unwrap();     let _ = beanstalkd.put(format!(""oauth {} {}"", token, project_id).as_slice(), 0, 0, 10000);     let _ = beanstalkd.put(""Hello World"", 0, 0, 10000); }  License MIT License License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/schickling/rust-beanstalkd"	"— bindings"	"true"
"Distributed Systems"	"Beanstalkd"	"https://github.com/kr/beanstalkd"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3321"	"220"	"459"	"GitHub - kr/beanstalkd: Beanstalk is a simple, fast work queue. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 220 Star 3,321 Fork 459 kr/beanstalkd Code Issues 63 Pull requests 14 Wiki Pulse Graphs Beanstalk is a simple, fast work queue. http://kr.github.io/beanstalkd/ 706 commits 3 branches 34 releases 38 contributors C 97.9% Shell 1.4% Makefile 0.7% C Shell Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fiu gh-pages master Nothing to show v1.10 v1.9 v1.8 v1.7 v1.6 v1.5 v1.4.6 v1.4.5 v1.4.4 v1.4.3 v1.4.2 v1.4.1 v1.4 v1.3 v1.2 v1.1 v0.9 v0.8 v0.7 v0.6 v0.5 v0.4 v0.3 v0.2 v0.1 r1.0 r0.11 r0.10 r0.9 r0.8 new-pkg dev1.10 dev1.9 dev1.8 Nothing to show New pull request Latest commit b7b4a6a Apr 12, 2016 Shir0kamii committed with kr shrink the hashmap when it's too sparse … Signed-off-by: Alexandre Bonnetain <alexandre.bonnetain@1000mercis.com> Permalink Failed to load latest commit information. adm Update upstart script to use ""setuid"" instead of ""su nobody -c"" Apr 3, 2016 ct update ct Apr 2, 2016 doc Document stats-job values delay and ttr in Chinese Apr 3, 2016 pkg add release instructions Aug 4, 2014 .gitignore update ct; refine gitignore Jun 4, 2013 .travis.yml add travis config file Apr 3, 2016 Contributing add contribution guidelines Apr 3, 2016 LICENSE switch to MIT license Jan 26, 2012 Makefile Makefile: finish DESTDIR support Apr 3, 2016 README refactor Apr 15, 2013 conn.c fix crash from Conn use after free and double-free Mar 17, 2013 darwin.c correctly check for hangup during reserve Oct 19, 2012 dat.h Increase LINE_BUF_SIZE to handle longest possible command Apr 3, 2016 file.c Typo Jan 27, 2013 freebsd.c refactor Oct 7, 2012 heap.c clean up copyright notices May 10, 2011 job.c shrink the hashmap when it's too sparse Apr 12, 2016 linux.c Only process succesfully epoll_events Dec 19, 2013 main.c fix brace placement Apr 3, 2016 ms.c clean up copyright notices May 10, 2011 net.c net.c:31:13: warning: Value stored to 'r' is never read Jan 27, 2013 primes.c shrink the hashmap when it's too sparse Apr 12, 2016 prot.c pause-tube should check tube name is ok Apr 3, 2016 sd-daemon.c Support systemd socket activation. Sep 20, 2010 sd-daemon.h Support systemd socket activation. Sep 21, 2010 serv.c adaptive epoll/kqueue timeout Mar 14, 2013 testheap.c some basic benchmark tests Jun 4, 2013 testjobs.c some basic benchmark tests Jun 4, 2013 testserv.c update ct; test throughput in MB/s Jun 6, 2013 testutil.c refactor Apr 15, 2013 time.c clean up copyright notices May 10, 2011 tube.c initialize allocations to 0; remove redundancy Jan 25, 2012 util.c rephrase wal to ""write-ahead log"" in cli Apr 2, 2016 verc.sh refactor Oct 7, 2012 vers.sh distribute directly from git archive Apr 14, 2013 walg.c delete unused param max in walread Apr 2, 2016 README This is beanstalkd, a fast, general-purpose work queue. See http://kr.github.io/beanstalkd/ for general info.   QUICK START      $ make     $ ./beanstalkd   also try,      $ ./beanstalkd -h     $ ./beanstalkd -VVV     $ make CFLAGS=-O2     $ make CC=clang     $ make check     $ make install     $ make install PREFIX=/usr  Requires Linux (2.6.17 or later), Mac OS X, or FreeBSD. See doc/protocol.txt for details of the network protocol.  Uses ronn to generate the manual. See http://github.com/rtomayko/ronn.   SUBDIRECTORIES  adm	files useful for system administrators ct	testing tool; see https://github.com/kr/ct doc	documentation pkg	miscelaneous files for packagers   TESTS  Unit tests are in test*.c. See https://github.com/kr/ct for information on how to write them.   Copyright © 2007-2013 the authors of beanstalkd. Copyright in contributions to beanstalkd is retained by the original copyright holder of each contribution. See file LICENSE for terms of use.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kr/beanstalkd"	"— bindings"	"true"
"Distributed Systems"	""	"https://travis-ci.org/schickling/rust-beanstalkd"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Distributed Systems"	"hyunsik/hdfs-rs"	"https://github.com/hyunsik/hdfs-rs"	"— libhdfs bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"1"	"7"	"GitHub - hyunsik/hdfs-rs: libhdfs binding and wrapper APIs for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 14 Fork 7 hyunsik/hdfs-rs Code Issues 0 Pull requests 0 Wiki Pulse Graphs libhdfs binding and wrapper APIs for Rust 56 commits 2 branches 1 release Fetching contributors Rust 50.3% C 48.7% Shell 1.0% Rust C Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show release-0.0.3 Nothing to show New pull request Latest commit b5b4633 Oct 8, 2015 hyunsik Updated README.md Permalink Failed to load latest commit information. dev-support Add diff util to maintain *.{c,h} files. Oct 6, 2015 src Improved the API documentation. Oct 8, 2015 .gitignore Add .gitignore. Oct 5, 2015 Cargo.toml Improved the API documentation. Oct 8, 2015 LICENSE.txt Update LICENSE.txt. May 7, 2015 README.md Updated README.md Oct 8, 2015 build.rs Rename src/native into src/libhdfs Oct 7, 2015 exec.sh Improved execution script. Oct 6, 2015 README.md hdfs-rs libhdfs binding library and rust APIs which safely wraps libhdfs binding APIs Current Status Alpha Status (Rust wrapping APIs can be changed) All libhdfs FFI APIs are ported. Safe Rust wrapping APIs to cover some of the libhdfs APIs. Documentation API documentation Requirements Hadoop compiled with native library (i.e., maven profile -Pnative) Please refer to https://github.com/apache/hadoop/blob/trunk/BUILDING.txt if you need more description. Usage Add this to your Cargo.toml: [dependencies] hdfs = ""0.0.4"" and this to your crate root: extern crate hdfs; hdfs-rs uses libhdfs, which is JNI native implementation. JNI native implementation requires the proper CLASSPATH. exec.sh included in the source code root plays a role to execute your program with the proper CLASSPATH. exec.sh requires HADOOP_HOME. So, you firstly set HADOOP_HOME shell environment variable as follows: export HADOOP_HOME=<hadoop install dir> Then, you can execute your program as follows: ./exec your_program arg1 arg2 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hyunsik/hdfs-rs"	"— libhdfs bindings"	"true"
"Distributed Systems"	""	"https://travis-ci.org/hyunsik/hdfs-rs"	"— libhdfs bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— libhdfs bindings"	"true"
"Email"	"email"	"https://crates.io/keywords/email"	"— libhdfs bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"— libhdfs bindings"	"true"
"Email"	"gsquire/sendgrid-rs"	"https://github.com/gsquire/sendgrid-rs"	"— unofficial Rust library for SendGrid API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"2"	"3"	"GitHub - gsquire/sendgrid-rs: Unofficial Rust library for SendGrid API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 6 Fork 3 gsquire/sendgrid-rs Code Issues 1 Pull requests 0 Pulse Graphs Unofficial Rust library for SendGrid API https://crates.io/crates/sendgrid 65 commits 1 branch 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit b42ee6a Jun 14, 2016 gsquire committed on GitHub Merge pull request #11 from gsquire/form-encoder … Use the url crate Permalink Failed to load latest commit information. examples Use a proper form encoder for the post body. Fixes #9 Jun 14, 2016 src Use a proper form encoder for the post body. Fixes #9 Jun 14, 2016 .gitignore travis doesn't like that the binary is committed Dec 13, 2015 .travis.yml try new travis config Mar 7, 2016 Cargo.toml Use a proper form encoder for the post body. Fixes #9 Jun 14, 2016 LICENSE Initial commit Oct 5, 2015 README.md Use a proper form encoder for the post body. Fixes #9 Jun 14, 2016 README.md sendgrid-rs Unofficial Rust library for the SendGrid API. sendgrid-rs implements all of the functionality of other supported SendGrid client libraries. To use sendgrid-rs you must first create a SendGrid account and generate an API key. To create an API key for your SendGrid account, use the account management interface or see the SendGrid API Documentation. sendgrid-rs is available on crates.io and can be included in your Cargo.toml as follows: [dependencies] sendgrid = ""0.3"" Build Dependencies This library utilises hyper, which in turn requires the OpenSSL headers to be available during compilation. For more information on how to configure OpenSSL, see: rust-openssl Example An example of using this library can be found in the examples directory. This example code expects to find your SendGrid API key in the process environment. In shells such as Bash or ZSH this can be set as follows: export SENDGRID_API_KEY=""SG.my.api.key"" Documentation Documentation Please don't hesitate to contact me at the email listed in my profile. I will try to help as quickly as I can. If you would like to contribute, contact me as well. Mentions Thanks to meehow for his contributions to improve the library. License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gsquire/sendgrid-rs"	"— unofficial Rust library for SendGrid API"	"true"
"Email"	""	"https://travis-ci.org/gsquire/sendgrid-rs"	"— unofficial Rust library for SendGrid API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— unofficial Rust library for SendGrid API"	"true"
"Email"	"lettre/lettre"	"https://github.com/lettre/lettre"	"— an SMTP-library for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"86"	"6"	"17"	"GitHub - lettre/lettre: A mailer library for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 86 Fork 17 lettre/lettre Code Issues 8 Pull requests 0 Pulse Graphs A mailer library for Rust http://lettre.github.io/ 378 commits 2 branches 9 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.5.1 v0.3.0 v0.2.0 v0.1.2 v0.1.1 v0.1.0 v0.0.13 v0.0.11 v0.0.9 Nothing to show New pull request Latest commit 95e9f31 Jun 27, 2016 amousset committed on GitHub Merge pull request #76 from tshepang/patch-1 … docs(smtp): typo fixes Permalink Failed to load latest commit information. benches Improve doc Jan 16, 2016 src docs(smtp): typo fixes Jun 26, 2016 tests style(formatting): Run rustfmt Oct 26, 2015 .appveyor.yml Update appveyor file Mar 20, 2016 .gitignore Rename esmtp_features to features Jul 14, 2015 .travis.yml feat(all) Fix doc build May 26, 2016 CHANGELOG.md docs(all): Add a changelog file May 5, 2016 CONTRIBUTING.md docs(all): Fix contributing doc formatting May 5, 2016 Cargo.toml Improve multipart support May 5, 2016 LICENSE License modified to MIT only Jul 15, 2015 README.md Improve doc Mar 27, 2016 rustfmt.toml style(formatting): Run rustfmt Oct 26, 2015 README.md lettre This is an email library written in Rust. See the documentation for more information. Install To use this library, add the following to your Cargo.toml: [dependencies] lettre = ""0.5"" Testing The tests require a mail server listening locally on port 25. License This program is distributed under the terms of the MIT license. See LICENSE for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lettre/lettre"	"— an SMTP-library for Rust"	"true"
"Email"	""	"https://travis-ci.org/lettre/lettre"	"— an SMTP-library for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— an SMTP-library for Rust"	"true"
"Encoding"	"encoding"	"https://crates.io/keywords/encoding"	"— an SMTP-library for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"— an SMTP-library for Rust"	"true"
"Encoding"	"alex/rust-asn1"	"https://github.com/alex/rust-asn1"	"— a Rust ASN.1 (DER) serializer"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"20"	"6"	"5"	"GitHub - alex/rust-asn1: A Rust ASN.1 (DER) serializer. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 20 Fork 5 alex/rust-asn1 Code Issues 7 Pull requests 5 Pulse Graphs A Rust ASN.1 (DER) serializer. 168 commits 5 branches 1 release Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags macros! master structured-unexpected-tag utctime x509-example Nothing to show 0.1.0 Nothing to show New pull request Latest commit 6a0fef1 May 7, 2016 alex Use the builtin cache type (#48) Permalink Failed to load latest commit information. src upgrade to the latest byteorder Apr 2, 2016 .gitignore initial commit, does ints and bools Jul 18, 2015 .travis.yml Use the builtin cache type (#48) May 7, 2016 Cargo.toml upgrade to the latest byteorder Apr 2, 2016 LICENSE Added more crap to Cargo.toml and a license Jul 19, 2015 README.rst fill out the readme Sep 15, 2015 README.rst rust-asn1 This is a Rust library for serializing ASN.1 structures (DER only). Installation Add asn1 to the [dependencies] section of your Cargo.toml: [dependencies] asn1 = ""*"" Usage To write a structure like: Signature ::= SEQUENCE {     r INTEGER,     s INTEGER }  you would write: extern crate asn1;  let data = asn1::to_vec(|s| {     s.write_sequence(|new_s| {         new_s.write_int(r);         new_s.write_int(s);     }); }); and to read it: extern crate asn1;  let result = asn1::from_vec(data, |d| {     return d.read_sequence(|d| {         r = try!(d.read_int());         s = try!(d.read_int());         return Ok((r, s))     }); });  match result {     Ok((r, s)) => println(""r={}, s={}"", r, s),     Err(_) => println!(""Error!""), } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alex/rust-asn1"	"— a Rust ASN.1 (DER) serializer"	"true"
"Encoding"	""	"https://travis-ci.org/alex/rust-asn1"	"— a Rust ASN.1 (DER) serializer"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a Rust ASN.1 (DER) serializer"	"true"
"Encoding"	"arjantop/rust-bencode"	"https://github.com/arjantop/rust-bencode"	"— implementation in Rust"	"null"	"null"	"null"	"Bencode"	"https://en.wikipedia.org/wiki/Bencode"	"null"	"null"	"19"	"2"	"10"	"GitHub - arjantop/rust-bencode: Implementation of Bencode encoding written in rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 19 Fork 10 arjantop/rust-bencode Code Issues 5 Pull requests 0 Pulse Graphs Implementation of Bencode encoding written in rust 112 commits 1 branch 1 release Fetching contributors Rust 99.3% Makefile 0.7% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src RFC 1214 fix Oct 28, 2015 .gitignore Feature gating benchmark tests so that unit tests can run on beta/stable May 13, 2015 .travis.yml Switch .travis.yml to native rust support (fixes #13) Oct 3, 2014 Cargo.toml Bump library version. May 15, 2015 LICENSE-APACHE Added license (Apache 2.0 and MIT) Mar 8, 2014 LICENSE-MIT Added license (Apache 2.0 and MIT) Mar 8, 2014 Makefile Cargo support Jun 24, 2014 README.md Updated readme for cargo Jun 24, 2014 README.md Rust Bencode Implementation of Bencode encoding written in rust. What is Bencode? It is the encoding used by the BitTorrent file sharing system. More on wikipedia. Using the library Add this to your Cargo.toml: [dependencies.bencode]  git = ""https://github.com/arjantop/rust-bencode.git"" Documentation On rust-ci.org Contributing git clone https://github.com/arjantop/rust-bencode cd rust-bencode make  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/arjantop/rust-bencode"	"— implementation in Rust"	"true"
"Encoding"	""	"https://travis-ci.org/arjantop/rust-bencode"	"— implementation in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— implementation in Rust"	"true"
"Encoding"	"arcnmx/nue"	"https://github.com/arcnmx/nue"	"— I/O and binary data encoding for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"25"	"5"	"0"	"GitHub - arcnmx/nue: I/O and binary data encoding for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 25 Fork 0 arcnmx/nue Code Issues 0 Pull requests 0 Pulse Graphs I/O and binary data encoding for Rust 23 commits 2 branches 10 releases Fetching contributors Rust 99.6% Shell 0.4% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 0.3.1 0.3.0 0.2.0 0.1.1 0.1.0 0.0.5 0.0.4 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Latest commit 8aa1582 Aug 16, 2015 arcnmx Caches Permalink Failed to load latest commit information. .travis 0.3.0 Aug 8, 2015 bench 0.3.0 Aug 9, 2015 codegen Add copy_from to Pod Aug 16, 2015 io 0.3.0 Aug 9, 2015 macros 0.3.0 Aug 9, 2015 packed 0.3.0 Aug 9, 2015 pod Add copy_from to Pod Aug 17, 2015 tests packed, io revamp, various fixes Jul 29, 2015 uninitialized Initial commit Jul 21, 2015 .gitignore Update readme Jul 31, 2015 .travis.yml Caches Aug 16, 2015 COPYING Initial commit Jul 21, 2015 Cargo.toml 0.3.0 Aug 9, 2015 README.md Update readme Jul 31, 2015 src.rs packed, io revamp, various fixes Jul 30, 2015 README.md nue A collection of tools for working with binary data and POD structs in Rust. pod is an approach at building a safe interface for transmuting POD structs to and from byte slices. packed exposes unaligned packed data structurs in a safe and stable manner. nue-macros provides helpers for pod, as well as a serialization-like library for dealing with binary streams of data. nue-codegen allows the use of nue-macros without syntax extensions on stable Rust. nue-io contains various supporting structs and traits for readers and writers. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/arcnmx/nue"	"— I/O and binary data encoding for Rust"	"true"
"Encoding"	""	"https://travis-ci.org/arcnmx/nue"	"— I/O and binary data encoding for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— I/O and binary data encoding for Rust"	"true"
"Encoding"	"TyOverby/bincode"	"https://github.com/TyOverby/bincode"	"— a binary encoder/decoder in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"128"	"5"	"30"	"GitHub - TyOverby/bincode: A binary encoder / decoder implementation in Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 128 Fork 30 TyOverby/bincode Code Issues 3 Pull requests 1 Pulse Graphs A binary encoder / decoder implementation in Rust. 212 commits 12 branches 3 releases 24 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags better-travis gh-pages ignore-broken-tests master more_tests newio optional-enainess patch-1 revert-sizechecks serde-0.7 strbox-2 strbox Nothing to show v0.5.8 v0.5.0 v0.4.1 Nothing to show New pull request Latest commit aa0f980 Jul 8, 2016 Cobrand committed with TyOverby pub used InvalidEncoding in serde+rustc_serialize so it shows in `car… … …go doc` (#82)  * Removed unused import warning  * pub use InvalidEncoding in serde+rustc_serialize  * Made both fields of InvalidEncoding public so it can be used without Display or Debug traits (e.g. pattern matching) * Export of InvalidEncoding in rustc_serialize/serde make them visible in `cargo doc` Permalink Failed to load latest commit information. examples moved the two designs into modules Aug 7, 2015 src pub used InvalidEncoding in serde+rustc_serialize so it shows in `car… Jul 8, 2016 tests pub used InvalidEncoding in serde+rustc_serialize so it shows in `car… Jul 8, 2016 .gitignore rustup Mar 25, 2015 .travis.yml Add cargo features for rustc-serialize and serde (#70) Apr 15, 2016 Cargo.toml 0.5.8 Jun 30, 2016 LICENSE.md Update LICENSE.md Sep 18, 2014 logo.png add logo Feb 15, 2015 readme.dev.md Added Crates.io badge Apr 16, 2015 readme.md update example in readme Aug 12, 2015 readme.md Bincode A compact encoder / decoder pair that uses an binary zero-fluff encoding scheme. The size of the encoded object will be the same or smaller than the size that the object takes up in memory in a running Rust program. In addition to exposing two simple functions that encode to Vec and decode from Vec, binary-encode exposes a Reader/Writer API that makes it work perfectly with other stream-based apis such as rust files, network streams, and the flate2-rs compression library. Api Documentation Example extern crate bincode; extern crate rustc_serialize;  use bincode::SizeLimit; use bincode::rustc_serialize::{encode, decode};  #[derive(RustcEncodable, RustcDecodable, PartialEq)] struct Entity {     x: f32,     y: f32, }  #[derive(RustcEncodable, RustcDecodable, PartialEq)] struct World {     entities: Vec<Entity> }  fn main() {     let world = World {         entities: vec![Entity {x: 0.0, y: 4.0}, Entity {x: 10.0, y: 20.5}]     };      let encoded: Vec<u8> = encode(&world, SizeLimit::Infinite).unwrap();      // 8 bytes for the length of the vector, 4 bytes per float.     assert_eq!(encoded.len(), 8 + 4 * 4);      let decoded: World = decode(&encoded[..]).unwrap();      assert!(world == decoded); }  Details The encoding (and thus decoding) proceeds unsurprisingly -- primitive types are encoded according to the underlying Writer, tuples and structs are encoded by encoding their fields one-by-one, and enums are encoded by first writing out the tag representing the variant and then the contents. However, there are some implementation details to be aware of: isize/usize are encoded as i64/u64, for portability. enums variants are encoded as a u32 instead of a uint. u32 is enough for all practical uses. str is encoded as (u64, &[u8]), where the u64 is the number of bytes contained in the encoded string. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TyOverby/bincode"	"— a binary encoder/decoder in Rust"	"true"
"Encoding"	""	"https://travis-ci.org/TyOverby/bincode"	"— a binary encoder/decoder in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a binary encoder/decoder in Rust"	"true"
"Encoding"	"BurntSushi/byteorder"	"https://github.com/BurntSushi/byteorder"	"— Supports big-endian, little-endian and native byte orders"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"105"	"6"	"27"	"GitHub - BurntSushi/byteorder: Rust library for reading/writing numbers in big-endian and little-endian. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 105 Fork 27 BurntSushi/byteorder Code Issues 4 Pull requests 5 Pulse Graphs Rust library for reading/writing numbers in big-endian and little-endian. 134 commits 1 branch 35 releases 20 contributors Rust 99.3% Other 0.7% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.5.3 0.5.2 0.5.1 0.5.0 0.4.2 0.4.1 0.4.0 0.3.13 0.3.11 0.3.10 0.3.9 0.3.8 0.3.7 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.14 0.2.13 0.2.12 0.2.11 0.2.10 0.2.9 0.2.8 0.2.7 0.2.6 0.2.5 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 0.1.1 Nothing to show New pull request Latest commit d0df2d0 Jun 1, 2016 BurntSushi 0.5.3 Permalink Failed to load latest commit information. benches Move benchmarks to separate directory. May 20, 2015 src Replacing std size_of with core size_of. May 30, 2016 .gitignore initial commit Feb 3, 2015 .travis.yml Update travis to test nightly, beta and stable. May 20, 2015 COPYING dual licensed under MIT and UNLICENSE Apr 15, 2015 Cargo.toml 0.5.3 Jun 1, 2016 LICENSE-MIT dual licensed under MIT and UNLICENSE Apr 15, 2015 Makefile initial commit Feb 3, 2015 README.md Enable usage in no_std contexts May 2, 2016 UNLICENSE initial commit Feb 3, 2015 session.vim initial commit Feb 3, 2015 README.md This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order. This is meant to replace the old methods defined on the standard library Reader and Writer traits. Dual-licensed under MIT or the UNLICENSE. Documentation http://burntsushi.net/rustdoc/byteorder/. The documentation includes examples. Installation This crate works with Cargo and is on crates.io. The package is regularly updated. Add it to your Cargo.toml like so: [dependencies] byteorder = ""0.5"" If you want to augment existing Read and Write traits, then import the extension methods like so: extern crate byteorder;  use byteorder::{ReadBytesExt, WriteBytesExt, BigEndian, LittleEndian}; For example: use std::io::Cursor; use byteorder::{BigEndian, ReadBytesExt};  let mut rdr = Cursor::new(vec![2, 5, 3, 0]); // Note that we use type parameters to indicate which kind of byte order // we want! assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap()); assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap()); no_std crates This crate has a feature, std, that is enabled by default. To use this crate in a no_std context, add the following to your Cargo.toml: [dependencies] byteorder = { version = ""0.5"", default-features = false } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BurntSushi/byteorder"	"— Supports big-endian, little-endian and native byte orders"	"true"
"Encoding"	""	"https://travis-ci.org/BurntSushi/byteorder"	"— Supports big-endian, little-endian and native byte orders"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Supports big-endian, little-endian and native byte orders"	"true"
"Encoding"	"dwrensha/capnproto-rust"	"https://github.com/dwrensha/capnproto-rust"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"316"	"30"	"35"	"GitHub - dwrensha/capnproto-rust: Cap'n Proto for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 30 Star 316 Fork 35 dwrensha/capnproto-rust Code Issues 11 Pull requests 1 Pulse Graphs Cap'n Proto for Rust 1,250 commits 4 branches 9 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.5.x cap-table gh-pages master Nothing to show v0.7.1 v0.7.0 v0.6.2 v0.6.1 v0.6.0 v0.5.4 rustc-0.12 rustc-0.11 rustc-0.10 Nothing to show New pull request Latest commit bb0755b Jun 20, 2016 dwrensha committed on GitHub Merge pull request #64 from weiznich/fix_issue_27 … Fix #27 Permalink Failed to load latest commit information. src Fix #27 Jun 20, 2016 .gitignore add Cargo.lock to .gitignore Nov 11, 2014 .travis.yml get_root_as_reader() Dec 23, 2015 Cargo.toml version 0.7.1 May 2, 2016 LICENSE simplify license Jan 25, 2015 README.md https Jan 11, 2016 README.md capnproto-rust: Cap'n Proto for Rust About Cap'n Proto is an extremely efficient protocol for sharing data and capabilities. capnproto-rust is a (work-in-progress) implementation of Cap'n Proto for Rust. This repo contains the runtime library. capnpc-rust has a code generator plugin. See capnp-rpc-rust for an implementation of remote procedure calls built on top of this. Documentation Hosted here. Status See updates here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dwrensha/capnproto-rust"	"—"	"true"
"Encoding"	""	"https://travis-ci.org/dwrensha/capnproto-rust"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Encoding"	"BurntSushi/rust-cbor"	"https://github.com/BurntSushi/rust-cbor"	"— Supports JSON conversion and type-based encoding/decoding"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"41"	"5"	"10"	"GitHub - BurntSushi/rust-cbor: CBOR (binary JSON) for Rust with automatic type based decoding and encoding. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 41 Fork 10 BurntSushi/rust-cbor Code Issues 4 Pull requests 1 Pulse Graphs CBOR (binary JSON) for Rust with automatic type based decoding and encoding. 85 commits 2 branches 30 releases 3 contributors Rust 99.6% Other 0.4% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master newio Nothing to show 0.3.16 0.3.15 0.3.14 0.3.13 0.3.12 0.3.11 0.3.10 0.3.7 0.3.6 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.2 0.2.0 0.1.13 0.1.12 0.1.11 0.1.10 0.1.9 0.1.8 0.1.7 0.1.6 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit c433689 Sep 7, 2015 BurntSushi 0.3.16 Permalink Failed to load latest commit information. benches Move bench.rs into benches/, simplify Cargo.toml Mar 30, 2015 cbor_conv dual licensed under MIT and UNLICENSE Apr 15, 2015 src Fixes #6. Sep 7, 2015 tests Fixes #6. Sep 7, 2015 .gitignore initial commit Feb 1, 2015 .travis.yml Test on nightly, beta and stable. May 31, 2015 COPYING dual licensed under MIT and UNLICENSE Apr 15, 2015 Cargo.toml 0.3.16 Sep 7, 2015 LICENSE-MIT dual licensed under MIT and UNLICENSE Apr 15, 2015 Makefile initial commit Feb 1, 2015 README.md remove * deps Aug 30, 2015 UNLICENSE initial commit Feb 1, 2015 session.vim initial commit Feb 1, 2015 README.md This crate provides an implementation of RFC 7049, which specifies Concise Binary Object Representation (CBOR). CBOR adopts and modestly builds on the data model used by JSON, except the encoding is in binary form. Its primary goals include a balance of implementation size, message size and extensibility. Dual-licensed under MIT or the UNLICENSE. Documentation The API is fully documented with examples: http://burntsushi.net/rustdoc/cbor/. Installation This crate works with Cargo and is on crates.io. The package is regularly updated. Add it to your Cargo.toml like so: [dependencies] cbor = ""0.3"" Example: simple type based encoding and decoding In this crate, there is a Decoder and an Encoder. All reading and writing of CBOR must go through one of these types. The following shows how use those types to encode and decode a sequence of data items: extern crate cbor;  use cbor::{Decoder, Encoder};  fn main() {     // The data we want to encode. Each element in the list is encoded as its     // own separate top-level data item.     let data = vec![('a', 1), ('b', 2), ('c', 3)];      // Create an in memory encoder. Use `Encoder::from_writer` to write to     // anything that implements `Writer`.     let mut e = Encoder::from_memory();     e.encode(&data).unwrap();      // Create an in memory decoder. Use `Decoder::from_reader` to read from     // anything that implements `Reader`.     let mut d = Decoder::from_bytes(e.as_bytes());     let items: Vec<(char, i32)> = d.decode().collect::<Result<_, _>>().unwrap();      assert_eq!(items, data); } There are more examples in the docs. Status of implementation The big thing missing at the moment is indefinite length encoding. It's easy enough to implement, but I'm still trying to think of the best way to expose it in the API. Otherwise, all core CBOR features are implemented. There is support for tags, but none of the tags in the IANA registry are implemented. It isn't clear to me whether these implementations should appear in this crate or in others. Perhaps this would be a good use of Cargo's optional features. Finally, CBOR maps are only allowed to have Unicode string keys. This was easiest to implement, but perhaps this restriction should be lifted in the future. Benchmarks Here are some very rough (and too simplistic) benchmarks that compare CBOR with JSON. Absolute performance is pretty bad (sans CBOR encoding), but this should at least give a good ballpark for relative performance with JSON: test decode_medium_cbor   ... bench:  15525074 ns/iter (+/- 348424) = 25 MB/s test decode_medium_json   ... bench:  18356213 ns/iter (+/- 620645) = 30 MB/s test decode_small_cbor    ... bench:      1299 ns/iter (+/- 6) = 30 MB/s test decode_small_json    ... bench:      1471 ns/iter (+/- 11) = 38 MB/s test encode_medium_cbor   ... bench:   1379671 ns/iter (+/- 24828) = 289 MB/s test encode_medium_json   ... bench:   8053979 ns/iter (+/- 110462) = 70 MB/s test encode_medium_tojson ... bench:  15589704 ns/iter (+/- 559355) = 36 MB/s test encode_small_cbor    ... bench:      2685 ns/iter (+/- 69) = 14 MB/s test encode_small_json    ... bench:       862 ns/iter (+/- 1) = 64 MB/s test encode_small_tojson  ... bench:      1313 ns/iter (+/- 6) = 42 MB/s test read_medium_cbor     ... bench:  10008308 ns/iter (+/- 101995) = 39 MB/s test read_medium_json     ... bench:  14853023 ns/iter (+/- 510215) = 38 MB/s test read_small_cbor      ... bench:       763 ns/iter (+/- 4) = 52 MB/s test read_small_json      ... bench:      1127 ns/iter (+/- 4) = 49 MB/s  If these benchmarks are perplexing to you, then you might want to check out Erick Tryzelaar's series of blog posts on Rust's serialization infrastructure. In short, it's being worked on. Relatedly, a compounding reason why decoding CBOR is so slow is because it is decoded into an intermediate abstract syntax first. A faster (but more complex) implementation would skip this step, but it is difficult to do performantly with the existing serialization infrastructure. (The same approach is used in JSON decoding too, but it should be much easier to eschew this with CBOR since it doesn't have the complexity overhead of parsing text.) Alternatives TyOverby's excellent bincode library fulfills a similar use case as cbor: both crates serialize and deserialize between Rust values and a binary representation. Here is a brief comparison (please ping me if I've gotten any of this wrong or if I've left out other crucial details): CBOR is an IETF standard with implementations in many languages. This means you can use CBOR to easily communicate with programs written in other programming languages. cbor tags every data item encoded, including every number. bincode does not, which means the compactness of the resulting binary data depends on your data. For example, using cbor, encoding a Vec<u64> will encode every integer using a variable width encoding while bincode will use 8 bytes for every number. This results in various trade offs in terms of serialization speed, the size of the data and the flexibility of encoding/decoding with Rust types. (e.g., With bincode you must decode with precisely the same integer size as what was encoded, but cbor can adjust on the fly and decode, e.g., an encoded u16 into a u64.) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BurntSushi/rust-cbor"	"— Supports JSON conversion and type-based encoding/decoding"	"true"
"Encoding"	""	"https://travis-ci.org/BurntSushi/rust-cbor"	"— Supports JSON conversion and type-based encoding/decoding"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Supports JSON conversion and type-based encoding/decoding"	"true"
"Encoding"	"lifthrasiir/rust-encoding"	"https://github.com/lifthrasiir/rust-encoding"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"101"	"8"	"44"	"GitHub - lifthrasiir/rust-encoding: Character encoding support for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 101 Fork 44 lifthrasiir/rust-encoding Code Issues 14 Pull requests 0 Pulse Graphs Character encoding support for Rust 317 commits 3 branches 0 releases Fetching contributors Rust 92.0% HTML 6.1% Python 1.8% Makefile 0.1% Rust HTML Python Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cargo-features gh-pages master Nothing to show Nothing to show New pull request Latest commit 4cfff6b Jun 26, 2016 lifthrasiir committed on GitHub Merge pull request #99 from klutzy/send … Make RawDecoder and RawEncoder Send Permalink Failed to load latest commit information. examples Sabilize examples/recode.rs Apr 1, 2015 src Add a Send test for RawEncoder Jun 26, 2016 .gitignore gen_index.py enhancements. Dec 20, 2015 .travis.yml hmm, `#[bench]` is still unstable... May 23, 2015 AUTHORS.txt reduced the size of index tables a bit, and some optional features. Dec 27, 2015 Cargo.toml reduced the size of index tables a bit, and some optional features. Dec 27, 2015 LICENSE.txt initial commit. Jul 30, 2013 Makefile reduced the size of index tables a bit, and some optional features. Dec 27, 2015 README.md reduced the size of index tables a bit, and some optional features. Dec 27, 2015 README.md Encoding 0.3.0-dev Character encoding support for Rust. (also known as rust-encoding) It is based on WHATWG Encoding Standard, and also provides an advanced interface for error detection and recovery. This documentation is for the development version (0.3). Please see the stable documentation for 0.2.x versions. Complete Documentation (stable) Usage Put this in your Cargo.toml: [dependencies] encoding = ""0.3"" Then put this in your crate root: extern crate encoding; Data Table By default, Encoding comes with ~480 KB of data table (""indices""). This allows Encoding to encode and decode legacy encodings efficiently, but this might not be desirable for some applications. Encoding provides the no-optimized-legacy-encoding Cargo feature to reduce the size of encoding tables (to ~185 KB) at the expense of encoding performance (typically 5x to 20x slower). The decoding performance remains identical. This feature is strongly intended for end users. Do not try to enable this feature from library crates, ever. For finer-tuned optimization, see src/index/gen_index.py for custom table generation. Overview To encode a string: use encoding::{Encoding, EncoderTrap}; use encoding::all::ISO_8859_1;  assert_eq!(ISO_8859_1.encode(""caf\u{e9}"", EncoderTrap::Strict),            Ok(vec![99,97,102,233])); To encode a string with unrepresentable characters: use encoding::{Encoding, EncoderTrap}; use encoding::all::ISO_8859_2;  assert!(ISO_8859_2.encode(""Acme\u{a9}"", EncoderTrap::Strict).is_err()); assert_eq!(ISO_8859_2.encode(""Acme\u{a9}"", EncoderTrap::Replace),            Ok(vec![65,99,109,101,63])); assert_eq!(ISO_8859_2.encode(""Acme\u{a9}"", EncoderTrap::Ignore),            Ok(vec![65,99,109,101])); assert_eq!(ISO_8859_2.encode(""Acme\u{a9}"", EncoderTrap::NcrEscape),            Ok(vec![65,99,109,101,38,35,49,54,57,59])); To decode a byte sequence: use encoding::{Encoding, DecoderTrap}; use encoding::all::ISO_8859_1;  assert_eq!(ISO_8859_1.decode(&[99,97,102,233], DecoderTrap::Strict),            Ok(""caf\u{e9}"".to_string())); To decode a byte sequence with invalid sequences: use encoding::{Encoding, DecoderTrap}; use encoding::all::ISO_8859_6;  assert!(ISO_8859_6.decode(&[65,99,109,101,169], DecoderTrap::Strict).is_err()); assert_eq!(ISO_8859_6.decode(&[65,99,109,101,169], DecoderTrap::Replace),            Ok(""Acme\u{fffd}"".to_string())); assert_eq!(ISO_8859_6.decode(&[65,99,109,101,169], DecoderTrap::Ignore),            Ok(""Acme"".to_string())); To encode or decode the input into the already allocated buffer: use encoding::{Encoding, EncoderTrap, DecoderTrap}; use encoding::all::{ISO_8859_2, ISO_8859_6};  let mut bytes = Vec::new(); let mut chars = String::new();  assert!(ISO_8859_2.encode_to(""Acme\u{a9}"", EncoderTrap::Ignore, &mut bytes).is_ok()); assert!(ISO_8859_6.decode_to(&[65,99,109,101,169], DecoderTrap::Replace, &mut chars).is_ok());  assert_eq!(bytes, [65,99,109,101]); assert_eq!(chars, ""Acme\u{fffd}""); A practical example of custom encoder traps: use encoding::{Encoding, ByteWriter, EncoderTrap, DecoderTrap}; use encoding::types::RawEncoder; use encoding::all::ASCII;  // hexadecimal numeric character reference replacement fn hex_ncr_escape(_encoder: &mut RawEncoder, input: &str, output: &mut ByteWriter) -> bool {     let escapes: Vec<String> =         input.chars().map(|ch| format!(""&#x{:x};"", ch as isize)).collect();     let escapes = escapes.concat();     output.write_bytes(escapes.as_bytes());     true } static HEX_NCR_ESCAPE: EncoderTrap = EncoderTrap::Call(hex_ncr_escape);  let orig = ""Hello, 世界!"".to_string(); let encoded = ASCII.encode(&orig, HEX_NCR_ESCAPE).unwrap(); assert_eq!(ASCII.decode(&encoded, DecoderTrap::Strict),            Ok(""Hello, &#x4e16;&#x754c;!"".to_string())); Getting the encoding from the string label, as specified in WHATWG Encoding standard: use encoding::{Encoding, DecoderTrap}; use encoding::label::encoding_from_whatwg_label; use encoding::all::WINDOWS_949;  let euckr = encoding_from_whatwg_label(""euc-kr"").unwrap(); assert_eq!(euckr.name(), ""windows-949""); assert_eq!(euckr.whatwg_name(), Some(""euc-kr"")); // for the sake of compatibility let broken = &[0xbf, 0xec, 0xbf, 0xcd, 0xff, 0xbe, 0xd3]; assert_eq!(euckr.decode(broken, DecoderTrap::Replace),            Ok(""\u{c6b0}\u{c640}\u{fffd}\u{c559}"".to_string()));  // corresponding Encoding native API: assert_eq!(WINDOWS_949.decode(broken, DecoderTrap::Replace),            Ok(""\u{c6b0}\u{c640}\u{fffd}\u{c559}"".to_string())); Types and Stuffs There are three main entry points to Encoding. Encoding is a single character encoding. It contains encode and decode methods for converting String to Vec<u8> and vice versa. For the error handling, they receive traps (EncoderTrap and DecoderTrap respectively) which replace any error with some string (e.g. U+FFFD) or sequence (e.g. ?). You can also use EncoderTrap::Strict and DecoderTrap::Strict traps to stop on an error. There are two ways to get Encoding: encoding::all has static items for every supported encoding. You should use them when the encoding would not change or only handful of them are required. Combined with link-time optimization, any unused encoding would be discarded from the binary. encoding::label has functions to dynamically get an encoding from given string (""label""). They will return a static reference to the encoding, which type is also known as EncodingRef. It is useful when a list of required encodings is not available in advance, but it will result in the larger binary and missed optimization opportunities. RawEncoder is an experimental incremental encoder. At each step of raw_feed, it receives a slice of string and emits any encoded bytes to a generic ByteWriter (normally Vec<u8>). It will stop at the first error if any, and would return a CodecError struct in that case. The caller is responsible for calling raw_finish at the end of encoding process. RawDecoder is an experimental incremental decoder. At each step of raw_feed, it receives a slice of byte sequence and emits any decoded characters to a generic StringWriter (normally String). Otherwise it is identical to RawEncoders. One should prefer Encoding::{encode,decode} as a primary interface. RawEncoder and RawDecoder is experimental and can change substantially. See the additional documents on encoding::types module for more information on them. Supported Encodings Encoding covers all encodings specified by WHATWG Encoding Standard and some more: 7-bit strict ASCII (ascii) UTF-8 (utf-8) UTF-16 in little endian (utf-16 or utf-16le) and big endian (utf-16be) All single byte encoding in WHATWG Encoding Standard: IBM code page 866 ISO 8859-{2,3,4,5,6,7,8,10,13,14,15,16} KOI8-R, KOI8-U MacRoman (macintosh), Macintosh Cyrillic encoding (x-mac-cyrillic) Windows code pages 874, 1250, 1251, 1252 (instead of ISO 8859-1), 1253, 1254 (instead of ISO 8859-9), 1255, 1256, 1257, 1258 All multi byte encodings in WHATWG Encoding Standard: Windows code page 949 (euc-kr, since the strict EUC-KR is hardly used) EUC-JP and Windows code page 932 (shift_jis, since it's the most widespread extension to Shift_JIS) ISO-2022-JP with asymmetric JIS X 0212 support (Note: this is not yet up to date to the current standard) GBK GB 18030 Big5-2003 with HKSCS-2008 extensions Encodings that were originally specified by WHATWG Encoding Standard: HZ ISO 8859-1 (distinct from Windows code page 1252) Parenthesized names refer to the encoding's primary name assigned by WHATWG Encoding Standard. Many legacy character encodings lack the proper specification, and even those that have a specification are highly dependent of the actual implementation. Consequently one should be careful when picking a desired character encoding. The only standards reliable in this regard are WHATWG Encoding Standard and vendor-provided mappings from the Unicode consortium. Whenever in doubt, look at the source code and specifications for detailed explanations. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lifthrasiir/rust-encoding"	"—"	"true"
"Encoding"	""	"https://travis-ci.org/lifthrasiir/rust-encoding"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Encoding"	"mrhooray/crc-rs"	"https://github.com/mrhooray/crc-rs"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"9"	"2"	"2"	"GitHub - mrhooray/crc-rs: Rust implementation of CRC(32, 64) with support of various standards Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 9 Fork 2 mrhooray/crc-rs Code Issues 1 Pull requests 0 Pulse Graphs Rust implementation of CRC(32, 64) with support of various standards 45 commits 2 branches 4 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.3.0 v1.2.0 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit 9fdd0c5 Jul 1, 2016 mrhooray v1.3.0 Permalink Failed to load latest commit information. benches extract benches May 30, 2015 src make static CRC tables public Jul 25, 2015 tests extract tests May 30, 2015 .gitignore init Mar 15, 2015 .travis.yml update travis file Aug 18, 2015 Cargo.toml v1.3.0 Jul 1, 2016 README.md update readme Jul 29, 2015 README.md crc Rust implementation of CRC(32, 64) with support of various standards Crate Documentation Usage Benchmark License Usage Add crc to Cargo.toml [dependencies] crc = ""^1.0.0"" or [dependencies.crc] git = ""https://github.com/mrhooray/crc-rs"" Add this to crate root extern crate crc; Compute CRC32 use crc::{crc32, Hasher32};  // CRC-32-IEEE being the most commonly used one assert_eq!(crc32::checksum_ieee(b""123456789""), 0xcbf43926); assert_eq!(crc32::checksum_castagnoli(b""123456789""), 0xe3069283); assert_eq!(crc32::checksum_koopman(b""123456789""), 0x2d3dd0ae);  // use provided or custom polynomial let mut digest = crc32::Digest::new(crc32::IEEE); digest.write(b""123456789""); assert_eq!(digest.sum32(), 0xcbf43926);  // with initial let mut digest = crc32::Digest::new_with_initial(crc32::IEEE, 0u32); digest.write(b""123456789""); assert_eq!(digest.sum32(), 0xcbf43926); Compute CRC64 use crc::{crc64, Hasher64};  assert_eq!(crc64::checksum_ecma(b""123456789""), 0x995dc9bbdf1939fa); assert_eq!(crc64::checksum_iso(b""123456789""), 0xb90956c775a41001);  // use provided or custom polynomial let mut digest = crc64::Digest::new(crc64::ECMA); digest.write(b""123456789""); assert_eq!(digest.sum64(), 0x995dc9bbdf1939fa);  // with initial let mut digest = crc64::Digest::new_with_initial(crc64::ECMA, 0u64); digest.write(b""123456789""); assert_eq!(digest.sum64(), 0x995dc9bbdf1939fa); Benchmark Bencher is currently not available in Rust stable releases. cargo bench with 2.3 GHz Intel Core i7 results ~430MB/s throughput. Comparison cargo bench      Running target/release/bench-5c82e94dab3e9c79  running 4 tests test bench_crc32_make_table       ... bench:       439 ns/iter (+/- 82) test bench_crc32_update_megabytes ... bench:   2327803 ns/iter (+/- 138845) test bench_crc64_make_table       ... bench:      1200 ns/iter (+/- 223) test bench_crc64_update_megabytes ... bench:   2322472 ns/iter (+/- 92870)  test result: ok. 0 passed; 0 failed; 0 ignored; 4 measured  License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mrhooray/crc-rs"	"—"	"true"
"Encoding"	""	"https://travis-ci.org/mrhooray/crc-rs"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Encoding"	"BurntSushi/rust-csv"	"https://github.com/BurntSushi/rust-csv"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"183"	"7"	"29"	"GitHub - BurntSushi/rust-csv: A CSV parser with type based decoding for Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 183 Fork 29 BurntSushi/rust-csv Code Issues 11 Pull requests 2 Pulse Graphs A CSV parser with type based decoding for Rust. 304 commits 4 branches 59 releases Fetching contributors Rust 97.9% Makefile 1.1% Other 1.0% Rust Makefile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags faster inner iter-owned master Nothing to show 0.14.4 0.14.3 0.14.2 0.14.1 0.13.8 0.13.7 0.13.6 0.13.5 0.13.4 0.13.3 0.13.2 0.13.1 0.13.0 0.12.19 0.12.18 0.12.17 0.12.16 0.12.15 0.12.14 0.12.13 0.12.12 0.12.11 0.12.10 0.12.9 0.12.8 0.12.7 0.12.6 0.12.5 0.12.4 0.12.3 0.12.2 0.12.1 0.12.0 0.11.0 0.10.2 0.10.1 0.10.0 0.9.0 0.8.1 0.8.0 0.7.5 0.7.4 0.7.3 0.7.2 0.7.1 0.7.0 0.6.3 0.6.2 0.6.1 0.5.2 0.5.1 0.5.0 0.4.0 0.3.0 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 Nothing to show New pull request Latest commit b5811f0 Apr 21, 2016 BurntSushi Merge pull request #40 from kindlychung/patch-1 … make the last example run Permalink Failed to load latest commit information. bench_large Refactoring and performance improvements. Apr 4, 2015 benches Refactoring and performance improvements. Apr 5, 2015 examples Huge push to stability! Apr 2, 2015 src Add Writer::into_string and Writer::into_bytes methods Mar 27, 2016 .gitignore Refactoring and performance improvements. Apr 5, 2015 .travis.yml yaml syntax grrr May 6, 2015 COPYING dual licensed under MIT and UNLICENSE Apr 15, 2015 Cargo.toml 0.14.4 Mar 27, 2016 LICENSE-MIT dual licensed under MIT and UNLICENSE Apr 15, 2015 Makefile Fix docs. Aug 30, 2014 README.md make the last example run Apr 21, 2016 UNLICENSE initial commit Mar 22, 2014 ctags.rust initial commit Mar 22, 2014 session.vim fix ctags Mar 23, 2014 README.md This crate provides a fast streaming CSV (comma separated values) writer and reader that works with the serialize crate to do type based encoding and decoding. There are two primary goals of this project: The default mode of parsing should just work. This means the parser will bias toward providing a parse over a correct parse (with respect to RFC 4180). Convenient to use by default, but when performance is needed, the API will provide an escape hatch. There is evidence of this parser's performance at the bottom of this README. You can also see how it compares to other parsers in ewanhiggs' CSV game. Dual-licensed under MIT or the UNLICENSE. Documentation The API is fully documented with lots of examples: http://burntsushi.net/rustdoc/csv/. Simple examples Here is a full working Rust program that decodes records from a CSV file. Each record consists of two strings and an integer (the edit distance between the strings): extern crate csv;  fn main() {     let mut rdr = csv::Reader::from_file(""./data/simple.csv"").unwrap();     for record in rdr.decode() {         let (s1, s2, dist): (String, String, usize) = record.unwrap();         println!(""({}, {}): {}"", s1, s2, dist);     } } Don't like tuples? That's fine. Use a struct instead: extern crate csv; extern crate rustc_serialize;  #[derive(RustcDecodable)] struct Record {     s1: String,     s2: String,     dist: u32, }  fn main() {     let mut rdr = csv::Reader::from_file(""./data/simple.csv"").unwrap();     for record in rdr.decode() {         let record: Record = record.unwrap();         println!(""({}, {}): {}"", record.s1, record.s2, record.dist);     } } Do some records not have a distance for some reason? Use an Option type! #[derive(RustcDecodable)] struct Record {     s1: String,     s2: String,     dist: Option<u32>, } You can also read CSV headers, change the delimiter, use enum types or just get plain access to records as vectors of strings. There are examples with more details in the documentation. Installation This crate works with Cargo and is on crates.io. The package is regularly updated. Add it to your Cargo.toml like so: [dependencies] csv = ""0.14"" Performance and benchmarks I claim that this is one of the fastest CSV parsers out there. Its speed should be comparable or better than libcsv while providing a more convenient and safer interface. At the lowest level, the parser can decode CSV at about 200 MB/sec. Here are some rough benchmarks: raw     ... bench:   5627467 ns/iter (+/- 171958) = 241 MB/s byte    ... bench:   9307428 ns/iter (+/- 473205) = 146 MB/s string  ... bench:  11043921 ns/iter (+/- 55845)  = 122 MB/s decoded ... bench:  16150376 ns/iter (+/- 496846) = 83 MB/s  raw corresponds to the zero allocation parser. Namely, no allocations are made for each field or row. For example, this is the fastest way to compute the number of records in a CSV file: extern crate csv;  use csv::NextField;  fn main() {     let fpath = ::std::env::args().nth(1).unwrap();     let mut rdr = csv::Reader::from_file(fpath).unwrap();     let mut count = 0;     loop {         match rdr.next_bytes() {             NextField::EndOfCsv => break,             NextField::EndOfRecord => { count += 1; break; }             NextField::Data(_) => {}             NextField::Error(err) => panic!(err),         }     }     println!(""{}"", count); } byte corresponds to allocating a fresh byte string for each field and a fresh vector for each row. This is more convenient than using the raw API: extern crate csv;  fn main() {     let fpath = ::std::env::args().nth(1).unwrap();     let mut rdr = csv::Reader::from_file(fpath).unwrap();     let mut count = 0;     for record in rdr.byte_records().map(|r| r.unwrap()) {         count += 1;     }     println!(""{}"", count); } string is just like byte, except each field is decoded from UTF-8 into a Unicode string. It's exactly like above, except one uses records instead of byte_records. decoded is the slowest approach but also the most convenient if your CSV contains data other than plain strings, like numbers or booleans. Indexing This library also includes simplistic CSV indexing support. Once a CSV index is created, you can use it to jump to any record in the data instantly. In essence, it gives you random access for a modest upfront cost in time and memory. This example shows how to create an in-memory index and use it to jump to any record in the data. (The indexing interface works with seekable readers and writers, so you can use std::fs::File for this too.) extern crate csv;  use std::io::{self, Write}; use csv::index::{Indexed, create_index};  fn main() {     let data = "" h1,h2,h3 a,b,c d,e,f g,h,i"";      let new_csv_rdr = || csv::Reader::from_string(data);      let mut index_data = io::Cursor::new(Vec::new());     create_index(new_csv_rdr(), index_data.by_ref()).unwrap();     let mut index = Indexed::open(new_csv_rdr(), index_data).unwrap();      // Seek to the second record and read its data. This is done *without*     // reading the first record.     index.seek(1).unwrap();      // Read the first row at this position (which is the second record).     // Since `Indexed` derefs to a `csv::Reader`, we can call CSV reader methods     // on it directly.     let row = index.records().next().unwrap().unwrap();      assert_eq!(row, vec![""d"", ""e"", ""f""]); } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BurntSushi/rust-csv"	"—"	"true"
"Encoding"	""	"https://travis-ci.org/BurntSushi/rust-csv"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Encoding"	"servo/html5ever"	"https://github.com/servo/html5ever"	"— High-performance browser-grade HTML5 parser"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"311"	"38"	"58"	"GitHub - servo/html5ever: High-performance browser-grade HTML5 parser Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 311 Fork 58 servo/html5ever Code Issues 27 Pull requests 3 Wiki Pulse Graphs High-performance browser-grade HTML5 parser 670 commits 13 branches 17 releases 37 contributors Rust 94.7% HTML 4.5% Other 0.8% Rust HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags aaa auto bench-hubbub bench master servo sse sudo-false utf16-noconv utf16-vec-noconv utf16-vec utf16to8 utf16 Nothing to show v0.5.3 v0.5.2 v0.5.1 v0.4.2 v0.4.1 v0.4.0 v0.3.0 v0.2.11 v0.2.10 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 6afdb4e Apr 26, 2016 bors-servo Auto merge of #209 - jdm:template, r=SimonSapin … Make get_template_contents take a mutable self argument.  <!-- Reviewable:start --> This change is [<img src=""https://reviewable.io/review_button.svg"" height=""35"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.io/reviews/servo/html5ever/209) <!-- Reviewable:end --> Permalink Failed to load latest commit information. benches rustup `cargo bench` Mar 22, 2016 data Add is_mathml_annotation_xml_integration_point method Jan 11, 2016 examples Make get_template_contents take a mutable self argument. Apr 26, 2016 html5lib-tests @ 6234bae Bump html5lib-tests to 6234baeabc51f6d51d1cfc2c4e4656bd99531f2b Sep 22, 2015 macros Upgrade string-cache to 0.2. Nov 23, 2015 scripts Use shrinked output built into the test harness. Mar 24, 2016 src Make get_template_contents take a mutable self argument. Apr 26, 2016 tests Remove blank line after serializing doctype Apr 14, 2016 .gitignore Ignore racer files May 1, 2015 .gitmodules Use Cargo to build the library Aug 25, 2014 .travis.yml Remove now default 'sudo: false' Feb 21, 2016 AUTHORS Update AUTHORS Feb 18, 2015 COPYRIGHT Rename the project to html5ever Aug 1, 2014 Cargo.toml Bump to 0.5.4 Apr 15, 2016 LICENSE-APACHE Relicense under the Rust licenses (ASLv2 and MIT) May 27, 2014 LICENSE-MIT Rename the project to html5ever Aug 1, 2014 README.md Remove the C API Mar 24, 2016 STRUCTURE.md Remove the C API Mar 24, 2016 build.rs Don’t rebuild library when tests changes. Jan 25, 2016 README.md html5ever API Documentation html5ever is an HTML parser developed as part of the Servo project. It can parse and serialize HTML according to the WHATWG specs (aka ""HTML5""). There are some omissions at present, most of which are documented in the bug tracker. html5ever passes all tokenizer tests from html5lib-tests, and most tree builder tests outside of the unimplemented features. The goal is to pass all html5lib tests, and also provide all hooks needed by a production web browser, e.g. document.write. Note that the HTML syntax is a language almost, but not quite, entirely unlike XML. For correct parsing of XHTML, use an XML parser. (That said, many XHTML documents in the wild are serialized in an HTML-compatible form.) html5ever is written in Rust, so it avoids the most notorious security problems from C, but has performance similar to a parser written in C. You can call html5ever as if it were a C library, without pulling in a garbage collector or other heavy runtime requirements. Getting started in Rust Add html5ever as a dependency in your Cargo.toml file: [dependencies] html5ever = ""*"" Then take a look at examples/print-rcdom.rs and the API documentation. Getting started in other languages Bindings for Python and other languages are much desired. Working on html5ever To fetch the test suite, you need to run git submodule update --init  Run cargo doc in the repository root to build local documentation under target/doc/. Details html5ever uses callbacks to manipulate the DOM, so it works with your choice of DOM representation. A simple reference-counted DOM is included. html5ever exclusively uses UTF-8 to represent strings. In the future it will support other document encodings (and UCS-2 document.write) by converting input. The code is cross-referenced with the WHATWG syntax spec, and eventually we will have a way to present code and spec side-by-side. html5ever builds against the official stable releases of Rust, though some optimizations are only supported on nightly releases. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/servo/html5ever"	"— High-performance browser-grade HTML5 parser"	"true"
"Encoding"	""	"https://travis-ci.org/servo/html5ever"	"— High-performance browser-grade HTML5 parser"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— High-performance browser-grade HTML5 parser"	"true"
"Encoding"	"serde-rs/json"	"https://github.com/serde-rs/json"	"[] — JSON support for framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"64"	"11"	"39"	"GitHub - serde-rs/json: JSON Serialization for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 64 Fork 39 serde-rs/json Code Issues 18 Pull requests 1 Pulse Graphs JSON Serialization for Rust 158 commits 5 branches 7 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto gh-pages json-benchmark master v0.6.x Nothing to show v0.7.4 v0.7.3 v0.7.2 v0.7.1 v0.7.0 v0.6.1 v0.6.0 Nothing to show New pull request Latest commit c09ea4a Jul 15, 2016 dtolnay committed on GitHub Merge pull request #117 from serde-rs/rustfmt … Run rustfmt Permalink Failed to load latest commit information. json Run rustfmt Jul 15, 2016 json_tests Run rustfmt Jul 15, 2016 .gitignore Initial import of serde_json Aug 24, 2015 .travis.yml Rename feature ""nightly-testing"" to ""unstable-testing"" Jul 11, 2016 LICENSE Add licenses Aug 29, 2015 LICENSE-APACHE Add licenses Aug 30, 2015 LICENSE-MIT Add licenses Aug 30, 2015 README.md Fix f64 tests Jun 28, 2016 build.rs feat(tests): Add support for skeptic to test readme Feb 26, 2016 rustfmt.toml Run rustfmt Jul 15, 2016 README.md Serde JSON Serialization Library Documentation This crate is a Rust library for parsing and generating the JSON (JavaScript Object Notation) file format. It is built upon Serde, a high performance generic serialization framework. Installation This crate works with Cargo and can be found on crates.io with a Cargo.toml like: [dependencies] serde = ""*"" serde_json = ""*"" Using Serde JSON serde_json is very simple to use out of the box: extern crate serde; extern crate serde_json;  use serde_json::Map;  fn main() {     let mut map = Map::new();     map.insert(""x"".to_string(), 1.0);     map.insert(""y"".to_string(), 2.0);      let s = serde_json::to_string(&map).unwrap();     assert_eq!(s, ""{\""x\"":1.0,\""y\"":2.0}"");      let deserialized_map: Map<String, f64> = serde_json::from_str(&s).unwrap();     assert_eq!(map, deserialized_map); } It also can be used with Serde's automatic serialization library, serde_macros. First add this to Cargo.toml: [dependencies] ... serde = ""*"" serde_macros = ""*"" ... Then run: #![feature(custom_derive, plugin)] #![plugin(serde_macros)]  extern crate serde; extern crate serde_json;  #[derive(Debug, PartialEq, Serialize, Deserialize)] struct Point {     x: f64,     y: f64, }  fn main() {     let point = Point { x: 1.0, y: 2.0 };      let s = serde_json::to_string(&point).unwrap();     assert_eq!(s, ""{\""x\"":1.0,\""y\"":2.0}"");      let deserialized_point: Point = serde_json::from_str(&s).unwrap();     assert_eq!(point, deserialized_point); } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/serde-rs/json"	"[] — JSON support for framework"	"true"
"Encoding"	"serde_json"	"https://crates.io/crates/serde_json"	"[] — JSON support for framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — JSON support for framework"	"true"
"Encoding"	""	"https://travis-ci.org/serde-rs/json"	"[] — JSON support for framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — JSON support for framework"	"true"
"Encoding"	"Qihoo360/rust-jsonnet"	"https://github.com/Qihoo360/rust-jsonnet"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17"	"1"	"5"	"GitHub - Qihoo360/rust-jsonnet: rust-jsonnet - The Google Jsonnet( operation data template language) for rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 17 Fork 5 Qihoo360/rust-jsonnet Code Issues 1 Pull requests 0 Pulse Graphs rust-jsonnet - The Google Jsonnet( operation data template language) for rust 32 commits 1 branch 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 90ea4ce Sep 9, 2015 yuduanchen update README Permalink Failed to load latest commit information. example update description Sep 9, 2015 src update description Sep 9, 2015 test init commit Sep 6, 2015 .gitignore Initial commit Sep 6, 2015 Cargo.lock update description Sep 9, 2015 Cargo.toml update description Sep 9, 2015 README.markdown update README Sep 9, 2015 t.jsonnet update description Sep 9, 2015 README.markdown rust-jsonnet Crate rust-jsonnet - The Google Jsonnet( operation data template language) for rust Google jsonnet documet: (http://google.github.io/jsonnet/doc/) Parse the file #[warn(unused_must_use)] extern crate libc; extern crate jsonnet; use libc::c_char; use std::str; use std::error::Error; use std::fs::File; use std::io::prelude::*; use std::path::Path; use std::ffi::CStr; use std::ffi::CString; use jsonnet::ffi::command::{ Jsonnet }; pub type JsonnetResult = Result<String, String>; pub fn ctos(msg_buf : *const c_char)-> String{     let msg_str: &CStr = unsafe { CStr::from_ptr(msg_buf) };     let buf: &[u8] = msg_str.to_bytes();     let str_buf: &str = str::from_utf8(buf).unwrap();     let msg_data: String = str_buf.to_owned();     return msg_data; }  pub fn version(){     let msg_buf: *const c_char = Jsonnet::version();     let msg_data: String = ctos(msg_buf);     println!(""{:?}"", msg_data); }  pub fn evaluate_file(){       let filename : *const libc::c_char = CString::new(""./t.jsonnet"") .unwrap().as_ptr();     let json = match Jsonnet::evaluate_file(filename) {     Ok(json) => json,     Err(e) => panic!(""{:?}"", e)     };     println!(""{:?}"", json); }  pub fn evaluate_snippet(){     let path = Path::new(""./t.jsonnet"");     let display = path.display();     let mut file = match File::open(&path) {     Err(why) => panic!(""couldn't open {}: {}"", display,     Error::description(&why)),     Ok(file) => file,     };     let mut s = String::new();     file.read_to_string(&mut s).unwrap();     let json_tpl : *const c_char = s.as_ptr() as *const c_char;     let json = match Jsonnet::evaluate_snippet(json_tpl) {     Ok(json) => json,     Err(e) => panic!(""{:?}"", e)     };     println!(""{:?}"", json); }  fn main() {     version();     evaluate_file();     evaluate_snippet();     Jsonnet::destroy(); }  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Qihoo360/rust-jsonnet"	"—"	"true"
"Encoding"	""	"https://travis-ci.org/Qihoo360/rust-jsonnet"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Encoding"	"mneumann/rust-msgpack"	"https://github.com/mneumann/rust-msgpack"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"98"	"9"	"31"	"GitHub - mneumann/rust-msgpack: msgpack.org implementation for Rust language / msgpack.org[Rust] Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 98 Fork 31 mneumann/rust-msgpack Code Issues 9 Pull requests 3 Pulse Graphs msgpack.org implementation for Rust language / msgpack.org[Rust] 194 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master works_with_0_9 Nothing to show Nothing to show New pull request Latest commit 710b104 Sep 27, 2015 mneumann Add parse_map_len() Permalink Failed to load latest commit information. examples Rustup May 26, 2015 src Add parse_map_len() Sep 27, 2015 .gitignore Updated to Rust nightly Oct 2, 2014 .travis.yml Build with nightly Sep 26, 2015 Cargo.toml Switch to the byteorder library. May 27, 2015 README.md Fix example in README Aug 2, 2014 README.md rust-msgpack Msgpack implementation for Rust language. Installation Simply include the rust-msgpack in your Cargo dependencies. [dependencies.msgpack]  git = ""git@github.com:mneumann/rust-msgpack.git"" Quickstart extern crate msgpack;  fn main() {   let arr = vec![""str1"".to_string(), ""str2"".to_string()];   let str = msgpack::Encoder::to_msgpack(&arr).ok().unwrap();   println!(""Encoded: {}"", str);    let dec: Vec<String> = msgpack::from_msgpack(str).ok().unwrap();   println!(""Decoded: {}"", dec); } To enable your own data structures to be automatically serialized from and to msgpack, derive from Encodable and Decodable as shown in the following example: extern crate serialize;  #[deriving(Encodable,Decodable)] struct MyStruct {   a: Vec<u32>,   s: String } Testing cargo test  License This code licensed under the same terms as Rust itself: dual MIT/Apache2 license options. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mneumann/rust-msgpack"	"—"	"true"
"Encoding"	""	"https://travis-ci.org/mneumann/rust-msgpack"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Encoding"	"3Hren/msgpack-rust"	"https://github.com/3Hren/msgpack-rust"	"— a pure Rust low/high level MessagePack implementation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"81"	"3"	"13"	"GitHub - 3Hren/msgpack-rust: MessagePack implementation for Rust / msgpack.org[Rust] Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 81 Fork 13 3Hren/msgpack-rust Code Issues 9 Pull requests 1 Pulse Graphs MessagePack implementation for Rust / msgpack.org[Rust] 577 commits 6 branches 18 releases 9 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages issue/xx/value-from master pr/fix-travis pr/update-readme pr/value-display Nothing to show v0.6.0 v0.5.1 v0.5.0 v0.4.0 v0.3.2 v0.3.1 v0.3.0 v0.2.2 v0.2.1 v0.2.0 v0.1.1 rmp/v0.7.3 rmp/v0.7.2 rmp/v0.7.1 rmp-serde/v0.9.0 rmp-serde/v0.8.2 rmp-serde/v0.8.1 rmp-serde/v0.8.0 Nothing to show New pull request Latest commit ef1f638 Jul 11, 2016 3Hren version: bump for rmp-serde - 0.9.4 Permalink Failed to load latest commit information. rmp-serde version: bump for rmp-serde - 0.9.4 Jul 11, 2016 rmp-serialize feat: constraint RMP version Mar 28, 2016 rmp misc(rmp): allow use of newer byteorder dep Jan 18, 2016 .gitignore Misc: update ignore files list. Aug 10, 2015 .travis.yml CI(travis): trying to fix nightly build. Sep 12, 2015 CHANGELOG.md docs(rmp): changelog update, version bumped Oct 3, 2015 README.md docs(rmp): changelog update, version bumped Oct 3, 2015 README.md RMP - Rust MessagePack RMP is a pure Rust MessagePack implementation. This repository consists of three separate crates: the RMP core and two implementations to ease serializing and deserializing Rust structs. Crates.io API Documentation rmp RMP rmp-serialize RMP Serialize rmp-serde RMP Serde Usage To use rmp, first add this to your Cargo.toml: [dependencies.rmp] rmp = ""^0.7"" Then, add this to your crate root: extern crate rmp as msgpack; // Or just `rmp`. Features Convenient API RMP is designed to be lightweight and straightforward. There are low-level API, which gives you full control on data encoding/decoding process and makes no heap allocations. On the other hand there are high-level API, which provides you convenient interface using Rust standard library and compiler reflection, allowing to encode/decode structures using derive attribute. Zero-copy value decoding RMP allows to decode bytes from a buffer in a zero-copy manner easily and blazingly fast, while Rust static checks guarantees that the data will be valid until buffer lives. Clear error handling RMP's error system guarantees that you never receive an error enum with unreachable variant. Robust and tested This project is developed using TDD and CI, so any found bugs will be fixed without breaking existing functionality. Examples Let's try to encode a tuple of int and string. extern crate rmp_serialize as msgpack; extern crate rustc_serialize;  use rustc_serialize::Encodable; use msgpack::Encoder;  fn main() {     let val = (42u8, ""the Answer"");      // The encoder borrows the bytearray buffer.     let mut buf = [0u8; 13];      val.encode(&mut Encoder::new(&mut &mut buf[..]));      assert_eq!([0x92, 0x2a, 0xaa, 0x74, 0x68, 0x65, 0x20, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72], buf); } Now we have an encoded buffer, which we can decode the same way: extern crate rmp_serialize as msgpack; extern crate rustc_serialize;  use rustc_serialize::Decodable; use msgpack::Decoder;  fn main() {     let buf = [0x92, 0x2a, 0xaa, 0x74, 0x68, 0x65, 0x20, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72];      let mut decoder = Decoder::new(&buf[..]);      let res: (u8, String) = Decodable::decode(&mut decoder).unwrap();      assert_eq!((42u8, ""the Answer"".to_string()), res); } RMP also allows to automatically serialize/deserialize custom structures using rustc_serialize reflection. To enable this feature, derive RustcEncodable and RustcDecodable attributes as shown in the following example: extern crate rmp_serialize as msgpack; extern crate rustc_serialize;  use rustc_serialize::{Encodable, Decodable}; use msgpack::{Encoder, Decoder};  #[derive(RustcEncodable, RustcDecodable, PartialEq, Debug)] struct Custom {     id: u32,     key: String, }  fn main() {     let val = Custom { id: 42u32, key: ""the Answer"".to_string() };      let mut buf = [0u8; 13];      val.encode(&mut Encoder::new(&mut &mut buf[..]));      assert_eq!([0x92, 0x2a, 0xaa, 0x74, 0x68, 0x65, 0x20, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72], buf);      // Now try to unpack the buffer into the initial struct.     let mut decoder = Decoder::new(&buf[..]);     let res: Custom = Decodable::decode(&mut decoder).ok().unwrap();      assert_eq!(val, res); } Versioning This project adheres to Semantic Versioning. However until 1.0.0 comes there will be the following rules: Any API/ABI breaking changes will be notified in the changelog explicitly and results in minor version bumping. API extending features results in minor version bumping. Non-breaking bug fixes and performance improving results in patch version bumping. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/3Hren/msgpack-rust"	"— a pure Rust low/high level MessagePack implementation"	"true"
"Encoding"	""	"https://travis-ci.org/3Hren/msgpack-rust"	"— a pure Rust low/high level MessagePack implementation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a pure Rust low/high level MessagePack implementation"	"true"
"Encoding"	"stepancheg/rust-protobuf"	"https://github.com/stepancheg/rust-protobuf"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"282"	"21"	"80"	"GitHub - stepancheg/rust-protobuf: Rust implementation of Google protocol buffers Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 282 Fork 80 stepancheg/rust-protobuf Code Issues 15 Pull requests 4 Pulse Graphs Rust implementation of Google protocol buffers 452 commits 7 branches 0 releases 40 contributors Rust 93.5% Protocol Buffer 5.7% Other 0.8% Rust Protocol Buffer Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master rust-0.7 rust-0.8 rust-0.9 rust-0.10 rust-0.11 rust-0.12 Nothing to show Nothing to show New pull request Latest commit d62012d Jul 13, 2016 stepancheg Fix sint* encoding … Fixes #168 Permalink Failed to load latest commit information. src Fix sint* encoding Jul 13, 2016 .gitignore fix .gitignore for tests Feb 11, 2016 .travis.yml update protobuf 3.0 to beta-2 (in tests) Jan 7, 2016 Cargo.toml Fix sint* encoding Jul 13, 2016 LICENSE.txt Add LICENSE Oct 25, 2013 README.md Update README URLs based on HTTP redirects Jan 24, 2016 install-protobuf.sh Travis container build Mar 16, 2015 README.md rust-protobuf Protobuf implementation in Rust. Written in pure rust Generate rust code Has runtime library for generated code (Coded{Input|Output}Stream impl) How to use rust-protobuf 0) Install protobuf for protoc binary. On OS X Homebrew can be used: brew install protobuf  On Ubuntu, protobuf-compiler package can be installed: apt-get install protobuf-compiler  Protobuf is needed only for code generation, rust-protobuf runtime does not use protobuf library. 1) Install protoc-gen-rust program (which is protoc plugin) It can be installed either from source or with cargo install protobuf command. 2) Add protoc-gen-rust to $PATH If you installed it with cargo, it should be PATH=""$HOME/.cargo/bin:$PATH""  3) Generate .rs files: protoc --rust_out . foo.proto  This will generate .rs files in current directory. 4) Add rust-protobuf as dependency to your project Cargo.toml: [dependencies.protobuf]  5) Include generated files into your project .rs file: extern crate protobuf; // depend on rust-protobuf runtime mod foo; // add generated file to the project  Generated code Have a look at generated files, used internally in rust-protobuf: descriptor.rs for descriptor.proto (that is part of Google protobuf) TODO Implement some rust-specific options Deal better with namespaces Protobuf reflection Extensions Generate stubs for services Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/stepancheg/rust-protobuf"	"—"	"true"
"Encoding"	""	"https://travis-ci.org/stepancheg/rust-protobuf"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Encoding"	"kvark/ron"	"https://github.com/kvark/ron"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"66"	"4"	"3"	"GitHub - kvark/ron: Rusty Object Notation Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 66 Fork 3 kvark/ron Code Issues 6 Pull requests 0 Pulse Graphs Rusty Object Notation 14 commits 1 branch 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 2a905c3 May 8, 2015 kvark Refactored incoding type names Permalink Failed to load latest commit information. examples Customized indentation type Apr 22, 2015 src Refactored incoding type names May 8, 2015 .gitignore Basic Encoder template Apr 21, 2015 .travis.yml Updated README, added Travis script Apr 22, 2015 Cargo.toml Added the example to Cargo Apr 22, 2015 LICENSE Initial commit Apr 20, 2015 README.md Minor corrections to README Apr 22, 2015 README.md Rusty Object Notation JSON is a nice little format. However, using it outside of JavaScript domain reveals numerous limitations. Here I present RON - yet another JSON alternative, which is: also a text also self-describing supports structs and enums but still very simple! Example in JSON {    ""materials"": {         ""metal"": {             ""reflectivity"": 1.0         },         ""plastic"": {             ""reflectivity"": 0.5         }    },    ""entities"": [         {             ""name"": ""hero"",             ""material"": ""metal""         },         {             ""name"": ""moster"",             ""material"": ""plastic""         }    ] } Notice these issues: Struct and maps are the same random order of exported fields annoying and inconvenient for reading doesn't work well with version control quoted field names too verbose no support for enums No trailing comma allowed No comments allowed Same example in RON Scene( // class name is optional     materials: { // this is a map         ""metal"": (             reflectivity: 1.0,         ),         ""plastic"": (             reflectivity: 0.5,         ),     },     entities: [ // this is an array         (             name: ""hero"",             material: ""metal"",         ),         (             name: ""monster"",             material: ""plastic"",         ),     ], ) The new format uses (..) brackets for heterogeneous structures (classes), while preserving the {..} for maps, and [..] for homogeneous structures (arrays). This distinction allows to solve the biggest problem with JSON. Here are the general rules to parse the heterogeneous structures: class is named? fields are named? what is it? example no no tuple / tuple struct (a, b) yes no enum value / tuple struct Name(a, b) yes/no yes struct (f1: a, f2: b) Grammar element:    struct    array    map    constant  constant:    string    number    boolean  map:    `{` key1: value1, key2: value2, ... `}`    // where all keys are constants of the same type    // and all values are elements of the same type   array:    `[` elem1, elem2, ... `]`    // where all elements are of the same type  struct:    [Name] `(` field1: elem1, field2: elem2, ... `)`  Background I have a scene exporter from Blender, where the result is loaded by the Rust code. The scene structure I'd like to see with my eyes, thus text form is preferred, while mesh contents and animation curves are passed in a custom binary format. I used JSON for the scene format, since it's been well-supported in Rust, but it proved to be inconvenient. I also tried to generate Rust code directly, but this approach has other major problems. I looked elsewere and didn't find anything good enough, so I made my own. Appendix Why not XML? too verbose unclear how to treat attributes vs contents Why not YAML? significant white-space specification is too big Why not TOML? alien syntax absolute paths are not scalable Why not XXX? if you know a better format, tell me! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kvark/ron"	"—"	"true"
"Encoding"	""	"https://travis-ci.org/kvark/ron"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Encoding"	"erickt/rust-tnetstring"	"https://github.com/erickt/rust-tnetstring"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13"	"2"	"6"	"GitHub - erickt/rust-tnetstring: tnetstring serialization library for rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 13 Fork 6 erickt/rust-tnetstring Code Issues 0 Pull requests 2 Pulse Graphs tnetstring serialization library for rust. 61 commits 1 branch 2 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.2 v0.1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src .gitignore .travis.yml Cargo.toml LICENSE.txt Makefile README.md README.md TNetStrings: Tagged Netstrings This module implements bindings for the tnetstring serialization format. API let t = tnetstring::str(""hello world""); let s = tnetstring::to_str(t) // returns ""11:hello world,""  let (t, extra) = tnetstring::from_str(s); alt option::get(t) {   tnetstring::str(s) { ... }   ... }  See the tests module in tnetstring.rs for more examples. Compatibility Use tag v0.1 with Rust 0.2. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/erickt/rust-tnetstring"	"—"	"true"
"Encoding"	""	"https://travis-ci.org/erickt/rust-tnetstring"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Encoding"	"alexcrichton/toml-rs"	"https://github.com/alexcrichton/toml-rs"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"168"	"9"	"48"	"GitHub - alexcrichton/toml-rs: A TOML encoding/decoding library for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 168 Fork 48 alexcrichton/toml-rs Code Issues 8 Pull requests 1 Pulse Graphs A TOML encoding/decoding library for Rust http://alexcrichton.com/toml-rs 287 commits 3 branches 3 releases 36 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master rewrite-parser Nothing to show 0.1.30 0.1.29 0.1.28 Nothing to show New pull request Latest commit fb8050d Jun 5, 2016 alexcrichton Merge pull request #101 from leodasvacas/clippy-run … Clippy run and implement Default for State and Enconder Permalink Failed to load latest commit information. examples Add a toml to json example Jun 7, 2015 serde-tests Fix serde tests on nightly May 31, 2016 src Merge pull request #101 from leodasvacas/clippy-run Jun 5, 2016 tests Add failing test cases containing invalid Toml with keys on the same … Apr 17, 2016 .gitignore Make serde-tests a standalone crate Aug 13, 2015 .travis.yml Move travis from 1.0.0 -> stable Jan 25, 2016 Cargo.toml Bump to 0.1.30 May 16, 2016 LICENSE-APACHE Add a dual MIT/Apache license Sep 3, 2014 LICENSE-MIT Add a dual MIT/Apache license Sep 3, 2014 README.md Add coverage badge Jul 10, 2015 README.md toml-rs Documentation A TOML decoder and encoder for Rust. This library is currently compliant with the v0.4.0 version of TOML. This library will also likely continue to stay up to date with the TOML specification as changes happen. # Cargo.toml [dependencies] toml = ""0.1"" License toml-rs is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses. See LICENSE-APACHE, and LICENSE-MIT for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alexcrichton/toml-rs"	"—"	"true"
"Encoding"	""	"https://travis-ci.org/alexcrichton/toml-rs"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Encoding"	"Florob/RustyXML"	"https://github.com/Florob/RustyXML"	"— an XML parser written in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"54"	"6"	"13"	"GitHub - Florob/RustyXML: A XML parser written in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 54 Fork 13 Florob/RustyXML Code Issues 2 Pull requests 0 Pulse Graphs A XML parser written in Rust 166 commits 1 branch 2 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.1 v0.1.0 Nothing to show New pull request Latest commit eb419b5 Mar 2, 2016 Florob Update README.md Permalink Failed to load latest commit information. data Switch to using cargo for everything Aug 18, 2014 examples Switch from `std::env::set_exit_status()` to `std::process::exit()` Apr 3, 2015 src Honor some Clippy advice Nov 29, 2015 .gitignore Add Cargo.lock to .gitignore Aug 18, 2014 .travis.yml Test on the stable channel instead of beta May 16, 2015 COPYING Honor some Clippy advice Nov 29, 2015 Cargo.toml Update README.md Mar 2, 2016 README.md Update README.md Mar 2, 2016 README.md RustyXML Documentation RustyXML is a namespace aware XML parser written in Rust. Right now it provides a basic SAX-like API, and an ElementBuilder based on that. The parser itself is derived from OFXMLParser as found in ObjFW https://webkeks.org/objfw/. The current limitations are: Incomplete error checking Unstable API This project tracks Rust stable. Examples Parse a string into an Element struct: use xml::Element;  let elem: Option<Element> = ""<a href='//example.com'/>"".parse(); Get events from parsing string data: use xml::{Event, Parser};  // Create a new Parser let mut p = Parser::new();  // Feed data to be parsed p.feed_str(""<a href""); p.feed_str(""='//example.com'/>"");  // Get events for the fed data for event in p {     match event.unwrap() {         Event::ElementStart(tag) => println!(""<{}>"", tag.name),         Event::ElementEnd(tag) => println!(""</{}>"", tag.name),         _ => ()     } } This should print: <a> </a>  Build Elements from Parser Events: use xml::{Parser, ElementBuilder};  let mut p = xml::Parser::new(); let mut e = xml::ElementBuilder::new();  p.feed_str(""<a href='//example.com'/>""); for elem in p.filter_map(|x| e.handle_event(x)) {     match elem {         Ok(e) => println!(""{}"", e),         Err(e) => println!(""{}"", e),     } } Build Elements by hand: let mut reply = xml::Element::new(""iq"".into(), Some(""jabber:client"".into()),                                   vec![(""type"".into(), None, ""error"".into()),                                        (""id"".into(), None, ""42"".into())]); reply.tag(xml::Element::new(""error"".into(), Some(""jabber:client"".into()),                             vec![(""type"".into(), None, ""cancel"".into())]))      .tag_stay(xml::Element::new(""forbidden"".into(),                                  Some(""urn:ietf:params:xml:ns:xmpp-stanzas"".into()),                                  vec![]))      .tag(xml::Element::new(""text"".into(),                             Some(""urn:ietf:params:xml:ns:xmpp-stanzas"".into()),                             vec![]))      .text(""Permission denied"".into()); Result (some whitespace added for readability): <iq xmlns='jabber:client' id='42' type='error'>   <error type='cancel'>     <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>     <text xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'>Permission denied</text>   </error> </iq> License This project is MIT licensed. Please see the COPYING file for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Florob/RustyXML"	"— an XML parser written in Rust"	"true"
"Encoding"	""	"https://travis-ci.org/Florob/RustyXML"	"— an XML parser written in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— an XML parser written in Rust"	"true"
"Encoding"	"shepmaster/sxd-document"	"https://github.com/shepmaster/sxd-document"	"— An XML library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"52"	"4"	"7"	"GitHub - shepmaster/sxd-document: An XML library in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 52 Fork 7 shepmaster/sxd-document Code Issues 9 Pull requests 0 Wiki Pulse Graphs An XML library in Rust 369 commits 2 branches 4 releases Fetching contributors Rust 99.7% Shell 0.3% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.2.0 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 5601441 Jul 12, 2016 shepmaster committed on GitHub Merge pull request #35 from wimh/remove_raw_pointer_derive … remove raw_pointer_derive lint Permalink Failed to load latest commit information. src .gitignore .travis.yml Cargo.toml LICENSE.txt README.md deploy_gh_pages.sh It helps to actually have the documentation script May 14, 2015 xml-grammar.txt README.md SXD-Document An XML library in Rust. Documentation Overview The project is currently broken into two crates: document - Basic DOM manipulation and reading/writing XML from strings. xpath - Implementation of XPath 1.0 expressions. There are also scattered utilities for playing around at the command line. In the future, I hope to add support for XSLT 1.0. Goals This project has two goals, one more achievable than the other: Help me learn Rust. Replace libxml and libxslt. Contributing Fork it ( https://github.com/shepmaster/sxd-document/fork ) Create your feature branch (git checkout -b my-new-feature) Add a failing test. Add code to pass the test. Commit your changes (git commit -am 'Add some feature') Ensure tests pass. Push to the branch (git push origin my-new-feature) Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/shepmaster/sxd-document"	"— An XML library in Rust"	"true"
"Encoding"	""	"https://travis-ci.org/shepmaster/sxd-document"	"— An XML library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— An XML library in Rust"	"true"
"Encoding"	"shepmaster/sxd-xpath"	"https://github.com/shepmaster/sxd-xpath"	"— An XPath library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"23"	"1"	"6"	"GitHub - shepmaster/sxd-xpath: An XPath library in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 23 Fork 6 shepmaster/sxd-xpath Code Issues 20 Pull requests 0 Pulse Graphs An XPath library in Rust 268 commits 2 branches 4 releases Fetching contributors Rust 99.7% Shell 0.3% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.2.0 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit bd0ae14 Apr 7, 2016 shepmaster Merge pull request #72 from shepmaster/rust-update … Update Rust Permalink Failed to load latest commit information. src Avoid public/private warning Apr 7, 2016 tests updated to sxd-document 0.2.0 Feb 2, 2016 .gitignore Ignore local Cargo overrides Dec 25, 2014 .travis.yml Also build on the current released version Jun 29, 2015 Cargo.toml LICENSE.txt Update crate metadata May 14, 2015 README.md Add Travis badges and link to documentation May 14, 2015 deploy_gh_pages.sh Automatically build and deploy the documentation May 14, 2015 xpath-grammar.txt Add a text version of the XPath grammar Dec 25, 2014 README.md SXD-XPath An XML XPath library in Rust. Documentation Overview The project is currently broken into two crates: document - Basic DOM manipulation and reading/writing XML from strings. xpath - Implementation of XPath 1.0 expressions. There are also scattered utilities for playing around at the command line. In the future, I hope to add support for XSLT 1.0. Goals This project has two goals, one more achievable than the other: Help me learn Rust. Replace libxml and libxslt. Contributing Fork it ( https://github.com/shepmaster/sxd-xpath/fork ) Create your feature branch (git checkout -b my-new-feature) Add a failing test. Add code to pass the test. Commit your changes (git commit -am 'Add some feature') Ensure tests pass. Push to the branch (git push origin my-new-feature) Create a new Pull Request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/shepmaster/sxd-xpath"	"— An XPath library in Rust"	"true"
"Encoding"	""	"https://travis-ci.org/shepmaster/sxd-xpath"	"— An XPath library in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— An XPath library in Rust"	"true"
"Encoding"	"netvl/xml-rs"	"https://github.com/netvl/xml-rs"	"— a streaming XML library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"106"	"5"	"44"	"GitHub - netvl/xml-rs: An XML library in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 106 Fork 44 netvl/xml-rs Code Issues 11 Pull requests 0 Wiki Pulse Graphs An XML library in Rust 308 commits 3 branches 0 releases 38 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master writer Nothing to show Nothing to show New pull request Latest commit 9d5e629 Jun 10, 2016 netvl Fixed compilation warning in tests which prevents nightly builds Permalink Failed to load latest commit information. src Fixed compilation warning in tests which prevents nightly builds Jun 10, 2016 tests Implement From<std::io::Error> for xml::reader::Error May 5, 2016 .gitignore Updated changelog May 4, 2016 .travis.yml Using travis-cargo to handle CI Jun 14, 2015 Cargo.toml Allow bitflags 0.5 and 0.6 May 16, 2016 Changelog.md Update bitflags to 0.7 May 15, 2016 LICENSE Added license, bumped version and renamed cargo package Dec 8, 2014 Readme.md Fix source path of the XML analyzer in Readme.md Jun 10, 2016 design.md Added support for empty elements normalization Sep 13, 2015 Readme.md xml-rs, an XML library for Rust Documentation xml-rs is an XML library for Rust programming language. It is heavily inspired by Java Streaming API for XML (StAX). This library currently contains pull parser much like StAX event reader. It provides iterator API, so you can leverage Rust's existing iterators library features. It also provides a streaming document writer much like StAX event writer. This writer consumes its own set of events, but reader events can be converted to writer events easily, and so it is possible to write XML transformation chains in a pretty clean manner. This parser is mostly full-featured, however, there are limitations: no other encodings but UTF-8 are supported yet, because no stream-based encoding library is available now; when (or if) one will be available, I'll try to make use of it; DTD validation is not supported, <!DOCTYPE> declarations are completely ignored; thus no support for custom entities too; internal DTD declarations are likely to cause parsing errors; attribute value normalization is not performed, and end-of-line characters are not normalized too. Other than that the parser tries to be mostly XML-1.0-compliant. Writer is also mostly full-featured with the following limitations: no support for encodings other than UTF-8, for the same reason as above; no support for emitting <!DOCTYPE> declarations; more validations of input are needed, for example, checking that namespace prefixes are bounded or comments are well-formed. What is planned (highest priority first, approximately): missing features required by XML standard (e.g. aforementioned normalization and proper DTD parsing); miscellaneous features of the writer; parsing into a DOM tree and its serialization back to XML text; SAX-like callback-based parser (fairly easy to implement over pull parser); DTD validation; (let's dream a bit) XML Schema validation. Building and using xml-rs uses Cargo, so just add a dependency section in your project's manifest: [dependencies] xml-rs = ""0.3"" The package exposes a single crate called xml: extern crate xml; Reading XML documents xml::reader::EventReader requires a Read instance to read from. When a proper stream-based encoding library is available, it is likely that xml-rs will be switched to use whatever character stream structure this library would provide, but currently it is a Read. Using EventReader is very straightforward. Just provide a Read instance to obtain an iterator over events: extern crate xml;  use std::fs::File; use std::io::BufReader;  use xml::reader::{EventReader, XmlEvent};  fn indent(size: usize) -> String {     const INDENT: &'static str = ""    "";     (0..size).map(|_| INDENT)              .fold(String::with_capacity(size*INDENT.len()), |r, s| r + s) }  fn main() {     let file = File::open(""file.xml"").unwrap();     let file = BufReader::new(file);      let parser = EventReader::new(file);     let mut depth = 0;     for e in parser {         match e {             Ok(XmlEvent::StartElement { name, .. }) => {                 println!(""{}+{}"", indent(depth), name);                 depth += 1;             }             Ok(XmlEvent::EndElement { name }) => {                 depth -= 1;                 println!(""{}-{}"", indent(depth), name);             }             Err(e) => {                 println!(""Error: {}"", e);                 break;             }             _ => {}         }     } } EventReader implements IntoIterator trait, so you can just use it in a for loop directly. Document parsing can end normally or with an error. Regardless of exact cause, the parsing process will be stopped, and iterator will terminate normally. You can also have finer control over when to pull the next event from the parser using its own next() method: match parser.next() {     ... } Upon the end of the document or an error the parser will remember that last event and will always return it in the result of next() call afterwards. If iterator is used, then it will yield error or end-of-document event once and will produce None afterwards. It is also possible to tweak parsing process a little using xml::reader::ParserConfig structure. See its documentation for more information and examples. You can find a more extensive example of using EventReader in src/analyze.rs, which is a small program (BTW, it is built with cargo build and can be run after that) which shows various statistics about specified XML document. It can also be used to check for well-formedness of XML documents - if a document is not well-formed, this program will exit with an error. Writing XML documents xml-rs also provides a streaming writer much like StAX event writer. With it you can write an XML document to any Write implementor. extern crate xml;  use std::fs::File; use std::io::{self, Write};  use xml::writer::{EventWriter, EmitterConfig, XmlEvent, Result};  fn handle_event<W: Write>(w: &mut EventWriter<W>, line: String) -> Result<()> {     let line = line.trim();     let event: XmlEvent = if line.starts_with(""+"") && line.len() > 1 {         XmlEvent::start_element(&line[1..]).into()     } else if line.starts_with(""-"") {         XmlEvent::end_element().into()     } else {         XmlEvent::characters(&line).into()     };     w.write(event) }  fn main() {     let mut file = File::create(""output.xml"").unwrap();      let mut input = io::stdin();     let mut output = io::stdout();     let mut writer = EmitterConfig::new().perform_indent(true).create_writer(&mut file);     loop {         print!(""> ""); output.flush().unwrap();         let mut line = String::new();         match input.read_line(&mut line) {             Ok(0) => break,             Ok(_) => match handle_event(&mut writer, line) {                 Ok(_) => {}                 Err(e) => panic!(""Write error: {}"", e)             },             Err(e) => panic!(""Input error: {}"", e)         }     } } The code example above also demonstrates how to create a writer out of its configuration. Similar thing also works with EventReader. The library provides an XML event building DSL which helps to construct complex events, e.g. ones having namespace definitions. Some examples: // <a:hello a:param=""value"" xmlns:a=""urn:some:document""> XmlEvent::start_element(""a:hello"").attr(""a:param"", ""value"").ns(""a"", ""urn:some:document"")  // <hello b:config=""name"" xmlns=""urn:default:uri""> XmlEvent::start_element(""hello"").attr(""b:config"", ""value"").default_ns(""urn:defaul:uri"")  // <![CDATA[some unescaped text]]> XmlEvent::cdata(""some unescaped text"") Of course, one can create XmlEvent enum variants directly instead of using the builder DSL. There are more examples in xml::writer::XmlEvent documentation. The writer has multiple configuration options; see EmitterConfig documentation for more information. Other things No performance tests or measurements are done. The implementation is rather naive, and no specific optimizations are made. Hopefully the library is sufficiently fast to process documents of common size. I intend to add benchmarks in future, but not until more important features are added. Known issues All known issues are present on GitHub issue tracker: http://github.com/netvl/xml-rs/issues. Feel free to post any found problems there. License This library is licensed under MIT license. Copyright (C) Vladimir Matveev, 2014-2015 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/netvl/xml-rs"	"— a streaming XML library"	"true"
"Encoding"	""	"https://travis-ci.org/netvl/xml-rs"	"— a streaming XML library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a streaming XML library"	"true"
"Encoding"	"chyh1990/yaml-rust"	"https://github.com/chyh1990/yaml-rust"	"— The missing YAML 1.2 implementation for Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"88"	"5"	"7"	"GitHub - chyh1990/yaml-rust: A pure rust YAML implementation. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 88 Fork 7 chyh1990/yaml-rust Code Issues 3 Pull requests 1 Pulse Graphs A pure rust YAML implementation. 80 commits 3 branches 0 releases Fetching contributors Rust 44.3% C++ 32.7% PHP 22.4% Ruby 0.6% Rust C++ PHP Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags alias gh-pages master Nothing to show Nothing to show New pull request Latest commit bcb0c6e Jun 23, 2016 chyh1990 committed on GitHub Merge pull request #25 from hoodie/bug/infinite_loop … Fix logic error that caused infinite loop Permalink Failed to load latest commit information. examples Add LICENSE and build status May 31, 2015 src Fix logic error that caused infinite loop Jun 23, 2016 tests remove trailing space Jun 30, 2015 .gitignore Ignore untracked files May 27, 2016 .travis.yml CI: remove put to rust-ci.org Jun 22, 2016 Cargo.toml Bump to 0.3.3 Jun 1, 2016 LICENSE-APACHE Relicense under MIT/Apache-2.0 Jan 11, 2016 LICENSE-MIT Relicense under MIT/Apache-2.0 Jan 11, 2016 README.md added crates.io shields to readme Mar 10, 2016 appveyor.yml Add appveyor and example May 30, 2015 README.md yaml-rust The missing YAML 1.2 implementation for Rust. yaml-rust is a pure Rust YAML 1.2 implementation without any FFI and crate dependencies, which enjoys the memory safe property and other benefits from the Rust language. The parser is heavily influenced by libyaml and yaml-cpp. This crate works on all Rust supported platforms and Rust 1.0.0 and nightly! See Document NOTE: This library is still under heavily development. WARNING: This library needs more tests and it is NOT ready for parsing arbitrary user input from untrusted source. Quick Start Adding the following to the Cargo.toml in your project: [dependencies] yaml-rust = ""*""  or [dependencies.yaml-rust] git = ""https://github.com/chyh1990/yaml-rust.git""  and import using extern crate: extern crate yaml_rust; Use yaml::YamlLoader to load the YAML documents and access it as Vec/HashMap: extern crate yaml_rust; use yaml_rust::{YamlLoader, YamlEmitter};  fn main() {     let s = "" foo:     - list1     - list2 bar:     - 1     - 2.0 "";     let docs = YamlLoader::load_from_str(s).unwrap();      // Multi document support, doc is a yaml::Yaml     let doc = &docs[0];      // Debug support     println!(""{:?}"", doc);      // Index access for map & array     assert_eq!(doc[""foo""][0].as_str().unwrap(), ""list1"");     assert_eq!(doc[""bar""][1].as_f64().unwrap(), 2.0);      // Chained key/array access is checked and won't panic,     // return BadValue if they are not exist.     assert!(doc[""INVALID_KEY""][100].is_badvalue());      // Dump the YAML object     let mut out_str = String::new();     {         let mut emitter = YamlEmitter::new(&mut out_str);         emitter.dump(doc).unwrap(); // dump the YAML object to a String     }     println!(""{}"", out_str); } Note that yaml::Yaml implements Index<&'a str> & Index<usize>: Index<usize> assumes the container is an Array Index<&'a str> assumes the container is a string to value Map otherwise, Yaml::BadValue is returned If your document does not conform to this convention (e.g. map with complex type key), you can use the Yaml::as_XXX family API to access your documents. Features Pure Rust Ruby-like Array/Hash access API Low-level YAML events emission Specification Compliance This implementation aims to provide YAML parser fully compatible with the YAML 1.2 specification. The parser can correctly parse almost all examples in the specification, except for the following known bugs: Empty plain scalar in certain contexts However, the widely used library libyaml also fails to parse these examples, so it may not be a huge problem for most users. Goals Encoder Tag directive Alias while desearilization License Licensed under either of Apache License, Version 2.0 (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Fork & PR on Github. Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/chyh1990/yaml-rust"	"— The missing YAML 1.2 implementation for Rust."	"true"
"Encoding"	""	"https://travis-ci.org/chyh1990/yaml-rust"	"— The missing YAML 1.2 implementation for Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— The missing YAML 1.2 implementation for Rust."	"true"
"Encoding"	"dtolnay/serde-yaml"	"https://github.com/dtolnay/serde-yaml"	"[] — YAML support for framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"2"	"2"	"GitHub - dtolnay/serde-yaml: YAML support for Serde Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 10 Fork 2 dtolnay/serde-yaml Code Issues 3 Pull requests 1 Pulse Graphs YAML support for Serde https://dtolnay.github.io/serde-yaml/ 58 commits 3 branches 8 releases Fetching contributors Rust 94.2% Shell 5.8% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master push_ser Nothing to show 0.3.0 0.2.5 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 0.1.0 Nothing to show New pull request Latest commit 71771bf Jul 13, 2016 dtolnay Simplify serialize_seq and serialize_map implementation Permalink Failed to load latest commit information. docs scripts yaml yaml_tests .gitignore .travis.yml LICENSE-APACHE LICENSE-CC LICENSE-MIT README.md rustfmt.toml README.md Serde YAML Serialization Library This crate is a Rust library for using the Serde serialization framework with data in YAML file format. This library does not reimplement a YAML parser; it uses yaml-rust which is a pure Rust YAML 1.2 implementation. Installation Version 0.2.x of this crate works with 0.7.x of Serde. Both can be found on crates.io with a Cargo.toml like: [dependencies] serde = ""^0.7"" serde_yaml = ""^0.2"" Release notes are available under GitHub releases. Using Serde YAML API documentation is available in rustdoc form but the general idea is: extern crate serde; extern crate serde_yaml;  use std::collections::BTreeMap;  fn main() {     let mut map = BTreeMap::new();     map.insert(""x"".to_string(), 1.0);     map.insert(""y"".to_string(), 2.0);      let s = serde_yaml::to_string(&map).unwrap();     assert_eq!(s, ""---\n\""x\"": 1\n\""y\"": 2"");      let deserialized_map: BTreeMap<String, f64> = serde_yaml::from_str(&s).unwrap();     assert_eq!(map, deserialized_map); } It can also be used with Serde's automatic serialization library, serde_macros. First add this to Cargo.toml: [dependencies] serde = ""^0.7"" serde_macros = ""^0.7"" serde_yaml = ""^0.2"" Then use: #![feature(plugin)] #![plugin(serde_macros)]  extern crate serde; extern crate serde_yaml;  #[derive(Debug, PartialEq, Serialize, Deserialize)] struct Point {     x: f64,     y: f64, }  fn main() {     let point = Point { x: 1.0, y: 2.0 };      let s = serde_yaml::to_string(&point).unwrap();     assert_eq!(s, ""---\n\""x\"": 1\n\""y\"": 2"");      let deserialized_point: Point = serde_yaml::from_str(&s).unwrap();     assert_eq!(point, deserialized_point); } License Licensed under either of Apache License, Version 2.0 (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Build scripts are licensed under Creative Commons CC0 1.0 Universal (LICENSE-CC or https://creativecommons.org/publicdomain/zero/1.0/legalcode). Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in Serde YAML by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dtolnay/serde-yaml"	"[] — YAML support for framework"	"true"
"Encoding"	"serde_yaml"	"https://crates.io/crates/serde_yaml"	"[] — YAML support for framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] — YAML support for framework"	"true"
"Encoding"	""	"https://travis-ci.org/dtolnay/serde-yaml"	"[] — YAML support for framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] — YAML support for framework"	"true"
"Encoding"	"kimhyunkang/libyaml-rust"	"https://github.com/kimhyunkang/libyaml-rust"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17"	"6"	"9"	"GitHub - kimhyunkang/libyaml-rust: LibYAML bindings for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 17 Fork 9 kimhyunkang/libyaml-rust Code Issues 1 Pull requests 0 Pulse Graphs LibYAML bindings for Rust 209 commits 1 branch 12 releases Fetching contributors Rust 95.9% C 4.1% Rust C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 v0.0.12 v0.0.11 0.0.9 0.0.8 0.0.5 0.0.4 0.0.3 Nothing to show New pull request Latest commit bd6c107 Jun 20, 2016 kimhyunkang Ignore .gitconfig Permalink Failed to load latest commit information. src tests .gitignore .travis.yml Cargo.toml Version bump: v0.2.0 May 15, 2015 LICENSE README.md build.rs README.md libyaml-rust LibYAML bindings for Rust Dependencies LibYAML 0.1.4 or higher Rust 1.3.0 nightly This crate does not work on Rust 1.0, due to the dependency on libc Usage Parse from memory extern crate yaml;  use yaml::constructor::*;  yaml::parse_bytes_utf8(""[1, 2, 3]"".as_bytes()); // => Ok(vec![YamlSequence(~[YamlInteger(1), YamlInteger(2), YamlInteger(3)])]) Parse from Reader extern crate yaml;  use std::io::BufReader; use yaml::constructor::*;  let data = ""[1, 2, 3]""; let mut reader = BufReader::new(data.as_bytes());  yaml::parse_io_utf8(&mut reader); // => Ok(vec![YamlSequence(~[YamlInteger(1), YamlInteger(2), YamlInteger(3)])]) Todo In the order of what I want to do... Emitter functions Document iterator UTF-16 support Complete YAML 1.1 specs Tag support Timestamp type Int parser Float parser Token functions Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kimhyunkang/libyaml-rust"	"— bindings"	"true"
"Encoding"	"libyaml"	"http://pyyaml.org/wiki/LibYAML"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LibYAML – PyYAML     Search: Login Help/Guide About Trac Preferences Wiki Timeline Roadmap Browse Source View Tickets Search wiki:LibYAML Context Navigation Start Page Index History Last modified 2 years ago LibYAML LibYAML is a YAML 1.1 parser and emitter written in C. LibYAML Download and Installation Development and bug reports Documentation Scope Events Event Types Essential Event Attributes Stylistic Event Attributes API Parser API Synopsis Emitter API Synopsis Examples Copyright Download and Installation The current release of LibYAML: 0.1.5 (2014-02-04). Download the source package: http://pyyaml.org/download/libyaml/yaml-0.1.5.tar.gz. To build and install LibYAML, run $ ./configure $ make # make install  You may check out the latest development code of LibYAML from the Mercurial repository  https://bitbucket.org/xi/libyaml: $ hg clone https://bitbucket.org/xi/libyaml  If you checked out the LibYAML source code from the Subversion repository, you may build LibYAML with the commands: $ ./bootstrap $ ./configure $ make # make install  Development and bug reports You may check out the LibYAML source code from  LibYAML HG repository. If you find a bug in LibYAML, please  file a bug report. You may review open bugs through  the list of open tickets. You may discuss LibYAML at  the YAML-core mailing list. Documentation Scope LibYAML covers presenting and parsing  processes. Thus LibYAML defines the following two processors: Parser, which takes an input stream of bytes and produces a sequence of parsing events. Emitter, which takes a sequence of events and produces a stream of bytes. The processes of parsing and presenting are inverse to each other. Any sequence of events produced by parsing a well-formed YAML document should be acceptable by the Emitter, which should produce an equivalent document. Similarly, any document produced by emitting a sequence of events should be acceptable for the Parser, which should produce an equivalent sequence of events. The job of resolving implicit tags, composing and serializing representation trees, as well as constructing and representing native objects is left to applications and bindings. Although some of these processes may be covered in the latter releases, they are not in the scope of the initial release of LibYAML. Events Event Types The Parser produces while the Emitter accepts the following types of events: STREAM-START STREAM-END DOCUMENT-START DOCUMENT-END ALIAS SCALAR SEQUENCE-START SEQUENCE-END MAPPING-START MAPPING-END A valid sequence of events should obey the grammar: stream ::= STREAM-START document* STREAM-END document ::= DOCUMENT-START node DOCUMENT-END node ::= ALIAS | SCALAR | sequence | mapping sequence ::= SEQUENCE-START node* SEQUENCE-END mapping ::= MAPPING-START (node node)* MAPPING-END  Essential Event Attributes The following attributes affect the intepretation of a YAML document. ALIAS anchor - the alias anchor; [0-9a-zA-Z_-]+; not NULL. SCALAR anchor - the node anchor; [0-9a-zA-Z_-]+; may be NULL. tag - the node tag; should either start with ! (local tag) or be a valid URL (global tag); may be NULL or ! in which case either plain_implicit or quoted_implicit should be True. plain_implicit - True if the node tag may be omitted whenever the scalar value is presented in the plain style. quoted_implicit - True if the node tag may be omitted whenever the scalar value is presented in any non-plain style. value - the scalar value; a valid utf-8 sequence and may contain NUL characters; not NULL. length - the length of the scalar value. SEQUENCE-START anchor - the node anchor; [0-9a-zA-Z_-]+; may be NULL. tag - the node tag; should either start with ! (local tag) or be a valid URL (global tag); may be NULL or ! in which case implicit should be True. implicit - True if the node tag may be omitted. MAPPING-START anchor - the node anchor; [0-9a-zA-Z_-]+; may be NULL. tag - the node tag; should either start with ! (local tag) or be a valid URL (global tag); may be NULL or ! in which case implicit should be True. implicit - True if the node tag may be omitted. Stylistic Event Attributes The following attributes don't affect the interpretation of a YAML document. While parsing a YAML document, an application should not consider these attributes for resolving implicit tags and constructing representation graphs or native objects. The Emitter may ignore these attributes if they cannot be satisfied. STREAM-START encoding - the document encoding; utf-8|utf-16-le|utf-16-be. DOCUMENT-START version_directive - the version specified with the %YAML directive; the only valid value is 1.1; may be NULL. tag_directives - a set of tag handles and the corresponding tag prefixes specified with the %TAG directive; tag handles should match !|!!|![0-9a-zA-Z_-]+! while tag prefixes should be prefixes of valid local or global tags; may be empty. implicit - True if the document start indicator --- is not present. DOCUMENT-END implicit - True if the document end indicator ... is not present. SCALAR style - the value style; plain|single-quoted|double-quoted|literal|folded. SEQUENCE-START style - the sequence style; block|flow. MAPPING-START style - the mapping style; block|flow. any event start_mark - the position of the event beginning; attributes: index (in characters), line and column (starting from 0). end_mark - the position of the event end; attributes: index (in characters), line and column (starting from 0). API Note: the API may change drastically. You may also check the header file:  https://bitbucket.org/xi/libyaml/src/tip/include/yaml.h Parser API Synopsis #include <yaml.h>  yaml_parser_t parser; yaml_event_t event;  int done = 0;  /* Create the Parser object. */ yaml_parser_initialize(&parser);  /* Set a string input. */ char *input = ""...""; size_t length = strlen(input);  yaml_parser_set_input_string(&parser, input, length);  /* Set a file input. */ FILE *input = fopen(""..."", ""rb"");  yaml_parser_set_input_file(&parser, input);  /* Set a generic reader. */ void *ext = ...; int read_handler(void *ext, char *buffer, int size, int *length) {     /* ... */     *buffer = ...;     *length = ...;     /* ... */     return error ? 0 : 1; }  yaml_parser_set_input(&parser, read_handler, ext);  /* Read the event sequence. */ while (!done) {      /* Get the next event. */     if (!yaml_parser_parse(&parser, &event))         goto error;      /*       ...       Process the event.       ...     */      /* Are we finished? */     done = (event.type == YAML_STREAM_END_EVENT);      /* The application is responsible for destroying the event object. */     yaml_event_delete(&event);  }  /* Destroy the Parser object. */ yaml_parser_delete(&parser);  return 1;  /* On error. */ error:  /* Destroy the Parser object. */ yaml_parser_delete(&parser);  return 0;  Emitter API Synopsis #include <yaml.h>  yaml_emitter_t emitter; yaml_event_t event;  /* Create the Emitter object. */ yaml_emitter_initialize(&emitter);  /* Set a file output. */ FILE *output = fopen(""..."", ""wb"");  yaml_emitter_set_output_file(&emitter, output);  /* Set a generic writer. */ void *ext = ...; int write_handler(void *ext, char *buffer, int size) {     /*        ...        Write `size` bytes.        ...     */     return error ? 0 : 1; }  yaml_emitter_set_output(&emitter, write_handler, ext);  /* Create and emit the STREAM-START event. */ yaml_stream_start_event_initialize(&event, YAML_UTF8_ENCODING); if (!yaml_emitter_emit(&emitter, &event))     goto error;  /*   ...   Emit more events.   ... */  /* Create and emit the STREAM-END event. */ yaml_stream_end_event_initialize(&event); if (!yaml_emitter_emit(&emitter, &event))     goto error;  /* Destroy the Emitter object. */ yaml_emitter_delete(&emitter);  return 1;  /* On error. */ error:  /* Destroy the Emitter object. */ yaml_emitter_delete(emitter);  return 0;  Examples You may check  tests and examples in the source distribution. Copyright The LibYAML library is written by Kirill Simonov. LibYAML is released under the MIT license. This project is developed for  Python Software Foundation as a part of  Google Summer of Code under the mentorship of  Clark Evans. Download in other formats: Plain Text Powered by Trac 0.12.2 By Edgewall Software. Visit the Trac open source project at http://trac.edgewall.org/"	"null"	"null"	"— bindings"	"true"
"Encoding"	""	"https://travis-ci.org/kimhyunkang/libyaml-rust"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Game development"	"SiegeLord/RustAllegro"	"https://github.com/SiegeLord/RustAllegro"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"28"	"7"	"7"	"GitHub - SiegeLord/RustAllegro: A Rust wrapper and bindings of Allegro 5 game programming library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 28 Fork 7 SiegeLord/RustAllegro Code Issues 0 Pull requests 0 Pulse Graphs A Rust wrapper and bindings of Allegro 5 game programming library 338 commits 3 branches 0 releases Fetching contributors Rust 98.7% Python 1.3% Rust Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix_build_script gh-pages master Nothing to show Nothing to show New pull request Latest commit 7720f4b Jun 19, 2016 SiegeLord committed with SiegeLord Fix script. Permalink Failed to load latest commit information. allegro-sys Bump version to 0.0.2 May 28, 2016 allegro Bump version to 0.0.2 May 29, 2016 allegro_acodec-sys Bump version to 0.0.2 May 29, 2016 allegro_acodec Bump version to 0.0.2 May 29, 2016 allegro_audio-sys Bump version to 0.0.2 May 29, 2016 allegro_audio Bump version to 0.0.2 May 29, 2016 allegro_color-sys Bump version to 0.0.2 May 29, 2016 allegro_color Bump version to 0.0.2 May 29, 2016 allegro_dialog-sys Bump version to 0.0.2 May 29, 2016 allegro_dialog Bump version to 0.0.2 May 29, 2016 allegro_font-sys Bump version to 0.0.2 May 29, 2016 allegro_font Bump version to 0.0.2 May 29, 2016 allegro_image-sys Bump version to 0.0.2 May 29, 2016 allegro_image Bump version to 0.0.2 May 29, 2016 allegro_primitives-sys Bump version to 0.0.2 May 29, 2016 allegro_primitives Bump version to 0.0.2 May 29, 2016 allegro_ttf-sys Bump version to 0.0.2 May 29, 2016 allegro_ttf Bump version to 0.0.2 May 29, 2016 allegro_util Bump version to 0.0.2 May 29, 2016 doc Bump version to 0.0.2 May 29, 2016 examples Bump version to 0.0.2 May 29, 2016 .gitignore Split out the FFI bindings. Jan 3, 2015 .travis.yml Forgot to add shaders.rs. May 12, 2016 LICENSE Add license Apr 12, 2014 Readme.md Nicities for Windows Dec 5, 2015 cargo_util.py Fix script. Jun 19, 2016 Readme.md RustAllegro A very much WIP binding of Allegro 5 to the Rust programming language. Both stable and unstable branches of Allegro are supported. Documentation See here. Note that it is very incomplete. Packages The included packages are: Wrappers: allegro allegro_acodec allegro_audio allegro_dialog allegro_font allegro_image allegro_primitives allegro_ttf Bindings: allegro-sys allegro_acodec-sys allegro_audio-sys allegro_dialog-sys allegro_font-sys allegro_image-sys allegro_primitives-sys allegro_ttf-sys Examples: allegro_examples General usage notes The allegro-sys package (and, transitively, the rest of the packages) detects which version of Allegro to bind by parsing the C header. The build script will look for it in some common locations, but sometimes you will need to help it by specifying the ALLEGRO_INCLUDE_DIR environment variable when invoking cargo build. This directory should contain the allegro5 directory with all of the headers inside it. The build script will define the following two metadata entries that the crates that depend on it can use to determine which version is used: sub_version - The sub version of Allegro (e.g. for 5.1.10 the sub version is 1) wip_version - The wip version of Allegro (e.g. for 5.1.10 the wip version is 10). Note that the Core::init() will attempt to verify that the binding corresponds to the version of the library you're linking to. There are a few features that might come in useful: link_none - Do not try to link the standard Allegro libraries, in case you want to link the monolith library or have other needs. link_debug - Link to the debug versions of the Allegro libraries. Can be combined with link_static. link_static - Link to the static versions of the Allegro libraries. Note that you'll have to link the various dependency libraries yourself. Can be combined with link_debug. Windows notes RustAllegro works well with the official pre-compiled binaries. First, download the official binaries from http://liballeg.org. You'll want to match the ABI of your Rust installation. GNU ABI on 32 bit can load Allegro 32 bit MSVC binaries, but otherwise you'll want to match the platform and ABI exactly. Let's say you extract the binaries to C:/allegro. That directory will contain the include, bin and lib directories. To compile and run the RustAllegro examples, do the following from the RustAllegro's examples directory: If you're using MSYS: export ALLEGRO_INCLUDE_DIR=C:/allegro/include export RUST_ALLEGRO_EXAMPLE_LINK_PATH=C:/allegro/lib cargo build  If you're using cmd directly: set ALLEGRO_INCLUDE_DIR=C:/allegro/include set RUST_ALLEGRO_EXAMPLE_LINK_PATH=C:/allegro/lib cargo build  Now you need to copy the Allegro DLLs next to the generated executables (which will probably be under target/debug directory). Now you should be able to run the examples (make sure to run them from RustAllegro's examples directory, so they can find the various data files they require). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/SiegeLord/RustAllegro"	"— bindings"	"true"
"Game development"	"Allegro 5"	"http://liballeg.org/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"243"	"39"	"75"	"GitHub - liballeg/allegro5: The official Allegro 5 git repository. Pull requests welcome! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 39 Star 243 Fork 75 liballeg/allegro5 Code Issues 141 Pull requests 4 Pulse Graphs The official Allegro 5 git repository. Pull requests welcome! http://liballeg.org 11,119 commits 30 branches 165 releases 35 contributors C 74.3% C++ 12.3% Objective-C 6.0% CMake 2.7% Python 2.0% Java 1.6% Other 1.1% C C++ Objective-C CMake Python Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 4.2 4.3-xdummy-system 4.3 4.3.10plus 4.4 4.9-elias-display 4.9-fshook 4.9-newgfx 4.9-scons 4.9-trentg 4.9 5.0 5.0.8-pre 5.0.10-pre 5.1--gles-lock-bitmap-bb-proxy 5.1-ouya-ljoy 5.1-refactoring-experiment 5.1 5.1.12 5.1.13 5.2.0 allegro_console_branch allegro_4_0_branch gh-pages master mouse_api new_api_branch unix-pthreads vendor vfs-work-4.3 Nothing to show v4-2-3 v4-2-3-1 v4-2-2 v4-2-2-rc1 v4-2-1 v4-2-0@5476 v4-2-0 v4-2-0-rc2@5374 v4-2-0-rc2 v4-2-0-rc1@5325 v4-2-0-rc1 v4-2-0-beta4@5221 v4-2-0-beta4 v4-2-0-beta3@5108 v4-2-0-beta3 v4-2-0-beta2@5043 v4-2-0-beta2 v4-2-0-beta1@5002 v4-2-0-beta1 v4-1-18@4829 v4-1-18 v4-1-17@4722 v4-1-17 v4-1-16@4545 v4-1-16 v4-1-15@4357 v4-1-15 v4-1-14@4150 v4-1-14 v4-1-13@4091 v4-1-13 v4-1-12@3911 v4-1-12 v4-1-11@3621 v4-1-11 v4-1-10@3560 v4-1-10 v4-1-9@2943 v4-1-9 v4-1-8@2768 v4-1-8 v4-1-7@2742 v4-1-7 v4-1-6@2723 v4-1-6 v4-1-5@2695 v4-1-5 v4-1-4@2620 v4-1-4 v4-1-3@2511 v4-1-3 v4-1-2@2458 v4-1-2 v4-1-1@2341 v4-1-1 v4-1-0@2243 v4-1-0 v4-0-3@1892 v4-0-3 v4-0-2@1892 v4-0-2 v4-0-1@1892 v4-0-1 v4-0-0@1758 v4-0-0 v3-9-40@1561 v3-9-40 v3-9-39@1366 v3-9-39 v3-9-38@1107 v3-9-38 v3-9-37@764 v3-9-37 v3-9-36@566 v3-9-36 v3-9-35@443 v3-9-35 v3-9-34@322 v3-9-34 v3-9-33 v3-9-32 start new_api_branch_point@4418 new_api_branch_point merge_HEAD_to_new_api_3@4963 merge_HEAD_to_new_api_3 merge_HEAD_to_new_api_2@4916 merge_HEAD_to_new_api_2 merge_HEAD_to_new_api_1@4487 merge_HEAD_to_new_api_1 allegro_5_fork_point@1845 allegro_5_fork_point allegro_4_0_branch_point@1892 allegro_4_0_branch_point allegro_console_branch_point@3789 allegro_console_branch_point 5.2.0.0 5.1.13.1 5.1.13.0 5.1.12.0 Nothing to show New pull request Latest commit f4ad4db Jul 15, 2016 goobliata Optimize Raspberry Pi build. -Os seems the best. Permalink Failed to load latest commit information. addons Switch destructors to using a linked list with backreferences. Jul 4, 2016 android Fixed bogus display destruction on Android. Feb 23, 2016 cmake Optimize Raspberry Pi build. -Os seems the best. Jul 15, 2016 demos Use PROJECT_SOURCE_DIR and PROJECT_BINARY_DIR instead of CMAKE_SOURCE… Apr 16, 2016 docs Link to the master branch in the source links. May 12, 2016 examples Use 0.5 offsets for lines and rectangles Jun 12, 2016 include/allegro5 Switch destructors to using a linked list with backreferences. Jul 4, 2016 misc Create library when archiving in iOS project Jul 9, 2016 python Use PROJECT_SOURCE_DIR and PROJECT_BINARY_DIR instead of CMAKE_SOURCE… Apr 16, 2016 src Fix system mouse cursor stuff on Pi. Jul 10, 2016 tests Allow marking tests as being hardware only. May 12, 2016 tools Remove AL_CONST everywhere. Mar 2, 2010 .gitignore Add .gitignore and ignore build/ dir May 7, 2016 .travis.yml Build the debug version of Allegro on travis for extra assertions. Jul 4, 2016 CMakeLists.txt Specify the Android toolchain file on the command line now. Jun 26, 2016 CONTRIBUTORS.txt Update CONTRIBUTORS.txt Mar 30, 2016 LICENSE.txt Squashed commit of the following: Sep 6, 2015 README.md Add a symlink README.md pointing to README.txt. Mar 24, 2016 README.txt Opus codec support. Apr 25, 2016 README_android.txt Specify the Android toolchain file on the command line now. Jun 27, 2016 README_cmake.txt Split up readme_a5.txt; try to streamline the build instructions. Jun 14, 2010 README_iphone.txt Fix spelling of the cmake Xcode generator in the readme. May 31, 2015 README_macosx.txt Add retina display support to OSX. Jun 2, 2015 README_make.txt Add .gitignore and ignore build/ dir May 7, 2016 README_msvc.txt Minor updates to the build documentation. Jan 8, 2011 README_packaging.txt Add a readme for packagers. Oct 25, 2010 README_pkgconfig.txt Mention path and static linking for pkg-config. Apr 26, 2015 README_raspberrypi.txt Add notes about running Raspberry Pi VM with qemu. Dec 27, 2012 README_releasing.txt --numeric-ids is the secret sauce to rsync working with gna.org Jan 24, 2016 README_windows.txt Don't link to xinput and d3dx9. Mar 19, 2016 allegro5.cfg Rework TTF locking a bit. Feb 21, 2016 appveyor.yml Use AllegroDeps version 1.4.0 for AppVeyor. Feb 1, 2016 indent.pro Added -bls and -l80 and some types to indent.pro. Sep 23, 2008 README.md Welcome to Allegro! Allegro is a cross-platform library mainly aimed at video game and multimedia programming. It handles common, low-level tasks such as creating windows, accepting user input, loading data, drawing images, playing sounds, etc. and generally abstracting away the underlying platform. However, Allegro is not a game engine: you are free to design and structure your program as you like. Allegro 5 has the following additional features: Supported on Windows, Linux, Mac OSX, iPhone and Android User-friendly, intuitive C API usable from C++ and many other languages Hardware accelerated bitmap and graphical primitive drawing support (via OpenGL or Direct3D) Audio recording support Font loading and drawing Video playback Abstractions over shaders and low-level polygon drawing And more! This readme contains general information which applies to all platforms that Allegro builds on. README_cmake.txt discusses some build options for cmake. README_msvc.txt discusses compilation on Windows with Microsoft Visual C/C++. README_make.txt discusses compilation with GNU make. This applies to Unix-like operating systems such as Linux, MacOS X and MinGW on Windows. README_macosx.txt has a few additional notes for MacOS X. README_iphone.txt discusses iPhone operating systems. Requirements We assume you have C and C++ compilers installed and functioning. We support gcc, clang and MSVC. Allegro also requires CMake 2.8.5 or later to build. You may download it from http://www.cmake.org/ Library dependencies Allegro is divided into a core library and a number of addon libraries. The core library depends on certain libraries to function. If you don't have those, nothing will work. These are required for the core library: DirectX SDK (Windows only) You can get this for MSVC from the Microsoft web site (large download). Alternatively, smaller downloads for MSVC and MinGW are available here: http://liballeg.org/download.html#miscellaneous-files. Some MinGW distributions come with sufficient DirectX SDK to support compiling Allegro. X11 development libraries (Linux/Unix only) The libraries will be part of your Linux distribution, but you may have to install them explicitly. OpenGL development libraries (optional only on Windows) The addons, too, may require additional libraries. Since the addons are strictly optional, they are not required to build Allegro, but a lot of functionality may be disabled if they are not present. Windows users may find some precompiled binaries for the additional libraries from http://gnuwin32.sourceforge.net/. You need to get the bin and lib packages. The bin packages contain DLLs, and the lib packages contain the headers and import libraries. Mac users may find some dependencies in Homebrew, Fink or MacPorts. http://brew.sh/, http://www.finkproject.org/ and http://www.macports.org/ Linux users likely have all the dependencies already, except PhysicsFS and DUMB. If your distribution uses separate development packages, they will need to be installed. The packages are probably named *-dev or *-devel. These are the dependencies required for the addons: libpng and zlib, for PNG image support (Unix and older MinGW only) Home page: http://www.libpng.org/pub/png/ Windows binaries: http://gnuwin32.sourceforge.net/packages/libpng.htm On Windows/Mac OS X/iPhone/Android, PNG image support is available by using the native facilities on the respective operating systems, so libpng is not required. libjpeg, for JPEG image support (Unix and older MinGW only) Home page: http://www.ijg.org/ Windows binaries: http://gnuwin32.sourceforge.net/packages/jpeg.htm On Windows/Mac OS X/iPhone/Android, JPEG image support is available by using the native facilities on the respective operating systems, so libjpeg is not required. FreeType, for TrueType font support. Home page: http://freetype.sourceforge.net/ Windows binaries: http://gnuwin32.sourceforge.net/packages/freetype.htm Ogg Vorbis, a free lossy audio format. (libogg, libvorbis, libvorbisfile) Home page: http://www.vorbis.com/ Opus, a free lossy audio codec. (libogg, libopus, libopusfile) Home page: http://www.opus-codec.org/ FLAC, a free lossless audio codec. (libFLAC, libogg) Home page: http://flac.sourceforge.net/ DUMB, an IT, XM, S3M and MOD player library. (libdumb) Home page: http://dumb.sourceforge.net/ OpenAL, a 3D audio API. The audio addon can use OpenAL, although the 3D capabilities aren't used. http://kcat.strangesoft.net/openal.html On Mac OS X, OpenAL is required but should come with the OS anyway. On Linux and Windows, OpenAL will only be used if you request it, hence there is no reason to install it specifically. PhysicsFS, provides access to archives, e.g. .zip files. Home page: http://icculus.org/physfs/ On Windows it may be a pain to place all these libraries such that they can be found. Please see the README_cmake.txt section on the ""deps subdirectory"" when the time comes. API documentation To build the documentation you will need Pandoc. Pandoc's home page is http://johnmacfarlane.net/pandoc/ Installing Pandoc from source can be challenging, but you can build Allegro without building the documentation. Online documentation is available on the Allegro web site: http://docs.liballeg.org/ Building with CMake Building with CMake is a two step process. During the configuration step, cmake will detect your compiler setup and find the libraries which are installed on your system. At the same time, you may select options to customise your build. If you are unsure of what you are doing, leave all the options at the defaults. Once the configuration step is successful, you will invoke another tool to build Allegro. The tool depends on your compiler, but is usually either make, or your IDE. To avoid problems, unpack Allegro into a directory without spaces or other ""weird"" characters in the path. This is a known problem. Now read README_msvc.txt, README_make.txt or README_macosx.txt. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/liballeg/allegro5"	"— bindings"	"true"
"Game development"	""	"https://travis-ci.org/SiegeLord/RustAllegro"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Game development"	"ebkalderon/amethyst"	"https://github.com/ebkalderon/amethyst"	"— data-oriented game engine"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"1"	"23"	"GitHub - ebkalderon/amethyst: Data-oriented game engine written in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 7 Fork 23 ebkalderon/amethyst forked from amethyst/amethyst Code Pull requests 1 Pulse Graphs Data-oriented game engine written in Rust 347 commits 4 branches 0 releases 7 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master resources Nothing to show Nothing to show New pull request Pull request Compare This branch is even with amethyst:master. Latest commit 2d491f5 Mar 31, 2016 ebkalderon Merge pull request #41 from amethyst/develop … Update Cargo.toml files Permalink Failed to load latest commit information. book Update links in preparation for repo transfer Mar 23, 2016 examples remove task_sched.rs, add supplementary crate data Jan 22, 2016 src Update Cargo.toml files Mar 31, 2016 .gitignore add rustfmt backups to .gitignore Jan 1, 2016 .travis.yml Merge remote-tracking branch 'origin/ecs' Mar 31, 2016 AUTHORS.md clean codebase with rustfmt, add AUTHORS.md Jan 1, 2016 CHANGELOG.md Update CHANGELOG.md Mar 31, 2016 CONTRIBUTING.md Document branching model in CONTRIBUTING.md Mar 31, 2016 COPYING reassign copyright to all devs Feb 1, 2016 Cargo.toml Bump versions of engine and renderer, update to latest GFX Mar 31, 2016 README.md Point to new website in README.md Mar 31, 2016 README.md Amethyst This project is a work in progress and is very incomplete; pardon the dust! Read a summary of what happened this past week at This Week in Amethyst. Vision Amethyst aims to be a fast, data-oriented, and data-driven game engine suitable for rapid prototyping and iteration. It also tries to push the Rust programming language to its limits, driving further improvement and hopefully attracting more game developers toward the young and vibrant Rust ecosystem. The engine's design draws much inspiration from the industrial-strength Bitsquid Engine (now called Autodesk Stingray). However, Amethyst does not aim to be API-compatible with it in any way. Some goals include: Simple game state management in the form of a pushdown automaton. Massively parallel architecture, especially in rendering. Correct entity-component-system model, with entities and prefabs largely defined in YAML files. Abstract scripting API that can be bound to a variety of embedded languages, such as mruby, Lua, etc. Renderer optimized for modern graphics APIs, e.g. Vulkan, Direct3D 12+, Metal. Easy integration with useful third-party game development libraries, e.g. Piston. Traditional ""mega-editor"" split into several small but well-integrated tools, adhering to the Unix philosophy. Usage Read the online book for a comprehensive tutorial to using Amethyst. There is also an online crate-level API reference. Quick Example See the Getting Started chapter in the book for the full-blown ""Hello, World!"" tutorial. For the sake of brevity, you can generate an empty game project with the Amethyst CLI tool and build it. Follow along below: $ cargo install amethyst_tools $ amethyst new mygame $ cd mygame $ amethyst run  If everything goes well, you should see the following print out to the terminal: Game started! Hello from Amethyst! Game stopped!  Building Documentation You can build the book locally with: $ cargo install mdbook $ mdbook build book  The text can be found in book/html/index.html. To generate the API documentation locally, do: $ cargo doc  The API reference can be found in target/doc/amethyst/index.html. Contributing We are a community project that welcomes contribution from anyone. If you're interested in helping out, please read the CONTRIBUTING.md file before getting started. Don't know what to hack on? See the Development Roadmap on our wiki, or search though our issue tracker. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ebkalderon/amethyst"	"— data-oriented game engine"	"true"
"Game development"	""	"https://travis-ci.org/ebkalderon/amethyst"	"— data-oriented game engine"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— data-oriented game engine"	"true"
"Game development"	"lucidscape/corange-rs"	"https://github.com/lucidscape/corange-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"21"	"5"	"1"	"GitHub - lucidscape/corange-rs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 21 Fork 1 lucidscape/corange-rs Code Issues 1 Pull requests 0 Pulse Graphs No description or website provided. 8 commits 1 branch 0 releases Fetching contributors C 77.3% Rust 14.5% GLSL 7.5% Other 0.7% C Rust GLSL Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. examples src .gitignore Cargo.lock Cargo.toml LICENSE README.md README.md CORANGE-RS This crate provides an interface to the Corange game engine, written in Pure C, SDL and OpenGL by Daniel Holden. Features include: deferred rendering, UI rendering, text rendering, multiple lights, post-processing effects, SSAO, shadow mapping, color correction, skeletal animation, inverse kinematics, collision detection, OpenCL support, asset management, entity management, terrain, file loaders including .dds, .wav, .bmp, .obj, .smd, 3D math. [dependencies] corange-rs = { git = ""https://github.com/lucidscape/corange-rs.git"" } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lucidscape/corange-rs"	"— bindings"	"true"
"Game development"	"Corange"	"https://github.com/orangeduck/Corange"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"470"	"59"	"62"	"GitHub - orangeduck/Corange: Pure C Game Engine Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 59 Star 470 Fork 62 orangeduck/Corange Code Issues 1 Pull requests 0 Pulse Graphs Pure C Game Engine http://www.youtube.com/watch?v=482GxqTWXtA 320 commits 1 branch 0 releases 6 contributors C 91.1% GLSL 7.6% Other 1.3% C GLSL Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f78964d May 14, 2016 orangeduck Merge pull request #17 from dave-kennedy/master … Line endings Permalink Failed to load latest commit information. assets_core renamed deferred renderer to just renderer Nov 25, 2014 demos Normalize all the line endings Apr 30, 2016 include Normalize all the line endings Apr 30, 2016 src Normalize all the line endings Apr 30, 2016 .gitattributes Enforce LF line endings Apr 30, 2016 .gitignore Fixed Cube Mapping Feb 16, 2013 LICENCE.md reorganized shaders Mar 31, 2012 Makefile fixed compilation errors and removed ^M Nov 25, 2014 README.md Update README.md Apr 17, 2016 corange.ico Added windows resource files and window icon. Mar 16, 2012 corange.rc Added windows resource files and window icon. Mar 16, 2012 README.md Corange game engine Version 0.8.0 Written in Pure C, SDL and OpenGL. Running Corange is a library, but to take a quick look at some of the things it does you can Look at some of the Demos. Warning: Some things shown are from a previous version and may not remain the same in this version. Compiling To compile on Windows you need MinGW and then you should be able to run ""make"" as usual. You will need to have installed SDL, SDL_Mixer and SDL_Net. make  To compile on Linux you need to install SDL2. Then you should run ""make"" sudo apt-get install libsdl2-dev sudo apt-get install libsdl2-mixer-dev sudo apt-get install libsdl2-net-dev make  Overview Small, Simple, Powerful, Cross platform Clean and easy Asset, UI, Entity management Modern Deferred renderer Demos I'm a graphics programmer by trade so apologies that most of the demos are graphical apps; they're just what I love! renderers Shows off the various renderers with shaders, shadows, animation etc. metaballs Uses OpenCL/OpenGL interop to do Metaball rendering. noise Feedback based noise pattern on screen using shader. Can generate tileable perlin noise in software. platformer Basic platforming game. Fairly well commented. sea Renders a sea-like surface, a ship, and some collision detection. scotland Demonstrates terrain system. tessellation Demo showing tessellation shaders in OpenGL 4. FAQ How is that pronounced? Rhymes with Purple. Why not C++? There are plenty of C++ engines which do what I've done here and better. Pure C game engines on the other hand are much rarer. Corange provided me an outlet to practice my C skills. Of course if you are just linking to it you can still program your game/executable using C++. What stuff does it do? I've used it as a platform for trying out all sorts of techniques and effects. These features are not out-of-the-box or plug-in-and-play, but if you are a developer who has knowledge of what they are, you should be able to utilize what I have written. Some are WIP or rough around the edges. Deferred Rendering / UI Rendering / Text Rendering. Multiple Lights. Post effects. SSAO. Shadow Mapping. Color Correction. Skeletal Animation. Inverse Kinematics. Collision Detection. OpenCL support. Asset / Entity / UI Management. Terrain. File loaders including .dds, .wav, .bmp, .obj, .smd. Maths and Geometry. And More... Can I use this for 2D stuff? Certainly. Though Corange doesn't provide a 2D renderer for you. That you can write yourself. Believe it or not, making a generalized 2D renderer can be exceedingly complicated when you have to optimise for different sprites, tile sets, dynamic objects and all sorts of other effects. You're better off writing the rendering code application specific. Can I contact you about something? Yes - contact@theorangeduck.com Using / Contributing This is still mainly a personal project and so there are going to be lots of bugs, unfinished features and messy bits of code. The engine is heavily WIP and subject to sweeping changes. It isn't really viable to use without also being part of the project development and in communication with me. Rather than a full game engine like Unity, Corange is more of a framework and gives you access to features at about the same level as XNA. I have a big backlog of Work in Progress changes I need to push up to the repository once they get to a reasonable point so if you are interested in those please contact me. Saying that, it is a great excuse to practise your C and I very much welcome help. If the project appeals to you here are a couple of quick things that might help get you started. First take a look at the demos. These give a brief overview of how Corange can be used. The platformer demo is probably the most commented. There is no real documentation so your first port of call is the header files and your second is the c files. The code has very minimal comments but should be pretty clear most of the time. Corange doesn't hide anything from you. OpenGL and SDL calls are in the namespace so you've got access to the basics. The corange_init and corange_finish functions are fairly short so it is even possible to not call them and only use the components you want. Structs are typedefed without their pointer. The reason for this is a personal choice but there are also quite a few data types which are passed by value on the stack (vectors, matrices, spheres, boxes). I didn't want the notion of these to get confused. Some important parts of the engine are the asset, UI and entity managers. These basically let you access and store assets (models, textures - objects in the file system) and entities (lights, cameras, engine objects) and UI elements. They clean up memory on destruction and let you get pointers from all parts of the code. Corange mangles the namespace pretty badly, taking names such as ""error"", ""warning"", ""vec2"" and ""image"". It isn't a general purpose library. But I've still tried to decouple stuff so it should be possible to extract certain code if you need it. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/orangeduck/Corange"	"— bindings"	"true"
"Game development"	"Piston"	"http://www.piston.rs"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1347"	"120"	"112"	"GitHub - PistonDevelopers/piston: A modular game engine written in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 120 Star 1,347 Fork 112 PistonDevelopers/piston Code Issues 22 Pull requests 2 Wiki Pulse Graphs A modular game engine written in Rust http://www.piston.rs 1,708 commits 1 branch 2 releases 57 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show V0.23.0 V0.5.0 Nothing to show New pull request Latest commit e81ca8a Jul 3, 2016 bvssvni committed on GitHub Merge pull request #1100 from bvssvni/master … Updated crates.io Permalink Failed to load latest commit information. images New logo Mar 6, 2016 scripts Fix DOCS_REPO Apr 9, 2015 src Updated crates.io Jul 3, 2016 .gitignore Ignore Cargo.lock Aug 3, 2014 .travis.yml Fix doc deploying Jul 25, 2015 CONTRIBUTING.md Removed COPYRIGHT May 30, 2016 Cargo.png Use `From` to convert to and from `u32` Aug 1, 2015 Cargo.toml Updated crates.io Jul 3, 2016 GUIDE.md fix indentation on nightlies links Sep 6, 2014 LICENSE Initial commit May 19, 2014 README.md Update README.md to latest piston_window Apr 25, 2016 README.md A modular game engine written in Rust Maintainers of Piston core libraries: @bvssvni Examples Overview List of features List of games made with Piston Piston online docs How to contribute Discussion forum Start new project with Piston You should know how to build ""hello world"" with Rust, see http://www.rust-lang.org/. How to install FreeType Piston uses FreeType for font rendering. Drawing a red rectangle Add piston_window to your Cargo.toml, for example: [dependencies] piston_window = ""0.44.0""  In ""src/main.rs"", type the following code: extern crate piston_window;  use piston_window::*;  fn main() {     let mut window: PistonWindow =         WindowSettings::new(""Hello Piston!"", [640, 480])         .exit_on_esc(true).build().unwrap();     while let Some(e) = window.next() {         window.draw_2d(&e, |c, g| {             clear([1.0; 4], g);             rectangle([1.0, 0.0, 0.0, 1.0], // red                       [0.0, 0.0, 100.0, 100.0],                       c.transform, g);         });     } } Use cargo run to start the application. It should clear the screen in white color and draw a red rectangle. Goals The Piston project is a large collaboration among many developers. There are libraries for 2D, 3D, event programming, AI, image processing etc. By sharing the maintenance, we get more time to build new stuff. Piston is as much a community project as it is a collection of libraries. Writing and maintaining code is expensive, and by sharing this cost we reach our goals faster. We believe that seeking personal goals and ambitions, while helping each other, results in higher quality. Our main goal is to free up time for maintainers and the people involved ... such that we can create new amazing stuff and reach our personal goals ... by making more people use Rust for game development and become engaged in open source In addition we do research or plan to in the following areas: Graphics, 2D and 3D Idiomatic Rust game design Interactive applications AI programming Animation Sound and music Network Dependency graph Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PistonDevelopers/piston"	"—"	"true"
"Game development"	""	"https://travis-ci.org/PistonDevelopers/piston"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Game development"	"sdl"	"https://crates.io/keywords/sdl"	"SDL []"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"SDL []"	"true"
"Game development"	"AngryLawyer/rust-sdl2"	"https://github.com/AngryLawyer/rust-sdl2"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"386"	"32"	"149"	"GitHub - AngryLawyer/rust-sdl2: SDL2 bindings for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 386 Fork 149 AngryLawyer/rust-sdl2 Code Issues 28 Pull requests 1 Pulse Graphs SDL2 bindings for Rust 1,104 commits 3 branches 5 releases 93 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master surface-finishing Nothing to show 0.11 0.10 0.9 0.8 0.1.0 Nothing to show New pull request Latest commit 4f844fb Jul 11, 2016 AngryLawyer committed on GitHub Merge pull request #522 from malleusinferni/master … Add public interface for creating Palettes Permalink Failed to load latest commit information. examples Added fullscreen_state to Window Jun 3, 2016 sdl2-sys Add public interface for creating Palettes Jul 9, 2016 src/sdl2 Free dropped palettes Jul 11, 2016 tests Make all examples work and all tests pass after the error/rect changes Feb 11, 2016 .gitignore Add a centering mutator and constructor to rects Feb 19, 2016 .travis.yml Regenerated access token Jul 22, 2015 Cargo.toml Bumped version Jul 5, 2016 LICENSE Started adding the bare basics in documentation Aug 17, 2013 README.md Bumped version Jul 5, 2016 README.md Rust-SDL2 Bindings for SDL2 in Rust Overview Rust-SDL2 is a library for talking to the new SDL2.0 libraries from Rust. Low-level C components are wrapped in Rust code to make them more idiomatic and abstract away inappropriate manual memory management. Rust-SDL2 uses the MIT license. If you want a library compatible with earlier versions of SDL, please see here Documentation http://angrylawyer.github.io/rust-sdl2/sdl2/ Where are SDL_image, SDL_mixer, and SDL_ttf? These live outside of the repo. https://github.com/xsleonard/rust-sdl2_image https://github.com/andelf/rust-sdl2_ttf https://github.com/andelf/rust-sdl2_mixer https://github.com/andelf/rust-sdl2_gfx https://github.com/Limvot/rust-sdl2_net Requirements Rust We currently compile against the Master branch. I'd recommend using the Nightly installer, as that has the greatest chance of working. SDL2.0 development libraries Linux Install these through your favourite package management tool, or via http://www.libsdl.org/ Ubuntu example: sudo apt-get install libsdl2-dev Fedora example: sudo dnf install SDL2-devel You might also need a C compiler (gcc). Mac OS X If you are using homebrew On OSX, it's a good idea to install these via homebrew. brew install sdl2 Then add the following to your ~/.bash_profile if not already present. export LIBRARY_PATH=""$LIBRARY_PATH:/usr/local/lib"" Otherwise if you are using macports You can also get sdl2 via macports. sudo port install libsdl2 Then add the following to your ~/.bash_profile if not already present. export LIBRARY_PATH=""$LIBRARY_PATH:/opt/local/lib/"" If you're having issues with either homebrew or macports, see here. If you are using the SDL2 framework You can download and install the SDL2 Mac OS X framework from: https://www.libsdl.org/download-2.0.php To make the sdl2 crate link with the SDL2 framework, you will need to enable the use_mac_framework feature. To build and test the sdl2 crate with this feature, use: cargo test --features use_mac_framework To depend on the sdl2 crate with this feature enabled, put the following in your project's Cargo.toml file: [dependencies.sdl2] features = [""use_mac_framework""] version = ...  # Whichever version you are using Alternatively, you can re-export the feature in your package by putting the following in your Cargo.toml file: [features] default = [] use_sdl2_mac_framework = [""sdl2/use_mac_framework""] Windows (MinGW) On Windows, make certain you are using the MinGW version of SDL; the native version will crash on sdl2::init. Download mingw development libraries from http://www.libsdl.org/ (SDL2-devel-2.0.x-mingw.tar.gz). Unpack to a folder of your choosing (You can delete it afterwards). Copy all lib files from SDL2-devel-2.0.x-mingw\SDL2-2.0.x\x86_64-w64-mingw32\lib inside C:\Rust\bin\rustlib\x86_64-pc-windows-gnu\lib For Multirust Users, this folder will be in C:\Users{Your Username}\AppData\Local.multirust\toolchains{current toolchain}\lib\rustlib\x86_64-pc-windows-gnu\lib Copy SDL2.dll from SDL2-devel-2.0.x-mingw\SDL2-2.0.x\x86_64-w64-mingw32\bin into your cargo project, right next to your Cargo.toml. Installation If you're using cargo to manage your project, you can download through Crates.io:     [dependencies]     sdl2 = ""0.21"" Alternatively, pull it from GitHub     [dependencies.sdl2]     git = ""https://github.com/AngryLawyer/rust-sdl2"" Otherwise, clone this repo and run cargo cargo build Demo We have some simple example projects included: cargo run --example demo cargo run --example audio-whitenoise OpenGL If you want to use OpenGL, you also need the gl-rs package. If you're using cargo, just add these lines to your Cargo.toml:     [dependencies.gl]     git = ""https://github.com/bjz/gl-rs"" Then you need to add this to add this initialization code to establish the bindings: let sdl_context = sdl2::init().unwrap(); let video_subsystem = sdl_context.video().unwrap();  gl::load_with(|name| video_subsystem.gl_get_proc_address(name) as *const _); Note that these bindings are very raw, and many of the calls will require unsafe blocks. When things go wrong Rust, and Rust-SDL2, are both still heavily in development, and you may run into teething issues when using this. Before panicking, check that you're using the latest version of both Rust and Cargo, check that you've updated Rust-SDL2 to the latest version, and run cargo clean. If that fails, please let us know on the issue tracker. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/AngryLawyer/rust-sdl2"	"— bindings"	"true"
"Game development"	"SDL1"	"http://www.libsdl.org/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Simple DirectMedia Layer - Homepage Get the current stable SDL version 2.0.4 Main About Bugs   Licensing Credits Feedback Documentation Wiki   Forums   Mailing Lists Download SDL 2.0 SDL 1.2 SDL Mercurial Bindings About SDL Simple DirectMedia Layer is a cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware via OpenGL and Direct3D. It is used by video playback software, emulators, and popular games including Valve's award winning catalog and many Humble Bundle games. SDL officially supports Windows, Mac OS X, Linux, iOS, and Android. Support for other platforms may be found in the source code. SDL is written in C, works natively with C++, and there are bindings available for several other languages, including C# and Python. SDL 2.0 is distributed under the zlib license. This license allows you to use SDL freely in any software. Made with SDL: X-COM: Terror from the Deep Made with SDL: The Night of the Rabbit Light Theme Dark Theme"	"null"	"null"	"— bindings"	"true"
"Game development"	""	"https://travis-ci.org/AngryLawyer/rust-sdl2"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Game development"	"brson/rust-sdl"	"https://github.com/brson/rust-sdl"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"160"	"17"	"46"	"GitHub - brson/rust-sdl: SDL bindings for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 160 Fork 46 brson/rust-sdl Code Issues 8 Pull requests 1 Pulse Graphs SDL bindings for Rust 409 commits 1 branch 3 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show release-0.6 0.8 0.3.6 Nothing to show New pull request Latest commit 78bd0e7 May 27, 2015 lgrz Remove `feature(libc)` Permalink Failed to load latest commit information. src Remove `feature(libc)` May 27, 2015 .gitignore oh well, fixed .travis.yml and .gitignore again. Aug 27, 2014 .travis.yml Test all release channels May 27, 2015 Cargo.toml Add missing dependency `libc` May 27, 2015 LICENSE.txt Added License information (MIT) Sep 10, 2012 README.md Remove blurb about nightlies not working Feb 9, 2015 README.md Rust-SDL Bindings for SDL in Rust Overview Rust-SDL is a library for talking to SDL from Rust. Low-level C components are wrapped in Rust code to make them more idiomatic and abstract away inappropriate manual memory management. In addition, it provides optional APIs to a number of common SDL extension libraries. Rust-SDL uses the MIT license. Requirements Rust - You can get the Rust compiler from http://www.rust-lang.org SDL 1.2 development libraries - install through your favourite package management tool, or via http://www.libsdl.org/ Optional SDL_Mixer and SDL_Image - also available through most package managers, or through http://www.libsdl.org/projects/SDL_mixer/ and http://www.libsdl.org/projects/SDL_image/ Installation Clone this repo, run cargo build. To see an example of the code in use, rustc -L ./target src/sdl-demo/main.rs. SDL_mixer and SDL_image are available through separate packages, from within their respective directories, run cargo build to build. They depend on the main SDL library. When things go wrong Rust, and Rust-SDL, are both still heavily in development, and you may run into teething issues when using this. Before panicking, check that you're using the latest Master branch of Rust, check that you've updated Rust-SDL to the latest version, and run cargo clean. If that fails, please let us know on the issue tracker. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/brson/rust-sdl"	"— bindings"	"true"
"Game development"	""	"https://travis-ci.org/brson/rust-sdl"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Game development"	"jeremyletang/rust-sfml"	"https://github.com/jeremyletang/rust-sfml"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"209"	"19"	"38"	"GitHub - jeremyletang/rust-sfml: SFML bindings for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 209 Fork 38 jeremyletang/rust-sfml Code Issues 6 Pull requests 3 Wiki Pulse Graphs SFML bindings for Rust 708 commits 3 branches 10 releases 21 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.11 gl_proc_address master Nothing to show v0.11.2 v0.11.1 v0.11.0 v0.10.1 v0.10.0 v0.9.3 rust0.11 rust0.10 rust0.9 rust0.8 Nothing to show New pull request Latest commit cb62603 Jul 13, 2016 crumblingstatue committed on GitHub Merge pull request #133 from SpaceManiac/unicode … Use Unicode functions in Text's string handling (fixes #132) Permalink Failed to load latest commit information. csfml-audio-sys Remove libc and csfml-types dependencies for crates that do not need it May 27, 2016 csfml-graphics-sys Derive useful traits for graphics::Color Jun 13, 2016 csfml-network-sys Remove sfml-types dependency from csfml-network-sys May 28, 2016 csfml-system-sys Remove libc and csfml-types dependencies for crates that do not need it May 27, 2016 csfml-window-sys Remove libc and csfml-types dependencies for crates that do not need it May 27, 2016 examples Re-export `event::Event`, don't ""spill"" its variants into `event` Jun 24, 2016 src Use Unicode functions in Text's string handling (fixes #132) Jul 12, 2016 tests Fix incorrect IpAddress::to_string implementation Sep 26, 2015 .gitignore Ignore Cargo.lock Apr 7, 2015 .travis.cargo.config travis: Migrate to container based infrastructure Oct 8, 2015 .travis.yml travis: Test on all release channels Mar 3, 2016 Cargo.toml Make use of Cargo's workspace feature Jul 9, 2016 LICENSE.txt Begin of impl of FTP network classes. Jun 14, 2013 README.md README.md: Remove broken clippy badge Jun 25, 2016 clippy.toml Apply clippy `doc_markdown` lint May 13, 2016 rustfmt.toml Add rustfmt.toml Mar 6, 2016 README.md rust-sfml Rust bindings for SFML, the Simple and Fast Multimedia Library. Requirements Linux, Windows, or OS X Rust 1.9 or newer SFML 2.3 CSFML 2.3 Examples Examples are located under the examples directory: 0.11.0 (Latest release) master (Latest development version) License This software is a binding of the SFML library created by Laurent Gomila, which is provided under the Zlib/png license. This software is provided under the same license than the SFML, the Zlib/png license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jeremyletang/rust-sfml"	"— bindings"	"true"
"Game development"	"SFML"	"http://www.sfml-dev.org/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"SFML Learn Download Community Development Home Français Donate Flattr Simple and Fast Multimedia Library SFML is multi-media SFML provides a simple interface to the various components of your PC, to ease the development of games and multimedia applications. It is composed of five modules: system, window, graphics, audio and network. Discover their features more in detail in the tutorials and the API documentation. SFML is multi-platform With SFML, your application can compile and run out of the box on the most common operating systems: Windows, Linux, Mac OS X and soon Android & iOS. Pre-compiled SDKs for your favorite OS are available on the download page. SFML is multi-language SFML has official bindings for the C and .Net languages. And thanks to its active community, it is also available in many other languages such as Java, Ruby, Python, Go, and more. Learn more about them on the bindings page. SFML is licensed under the terms and conditions of the zlib/png license. Copyright © Laurent Gomila"	"null"	"null"	"— bindings"	"true"
"Game development"	""	"https://travis-ci.org/jeremyletang/rust-sfml"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Game development"	"slide-rs/specs"	"https://github.com/slide-rs/specs"	"— Specs Parallel ECS"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"129"	"19"	"11"	"GitHub - slide-rs/specs: Specs - Parallel ECS Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 129 Fork 11 slide-rs/specs Code Issues 11 Pull requests 0 Pulse Graphs Specs - Parallel ECS https://slide-rs.github.io/specs/ 166 commits 3 branches 0 releases 7 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master v0.6.0 Nothing to show Nothing to show New pull request Latest commit 499055c Jul 7, 2016 csherratt committed on GitHub Merge pull request #65 from malleusinferni/master … Test for stillborn entities Permalink Failed to load latest commit information. benches AtomBitSet is now a Sparse Bitset Apr 26, 2016 examples Switched instant entity management to require &mut World. Added `fetc… Jul 4, 2016 src use correct index Jul 7, 2016 tests Test for stillborn entities Jul 7, 2016 .gitignore Basic README and Cargo config Apr 5, 2016 .travis.yml Extended Cargo description Apr 12, 2016 Cargo.toml Version bump to 0.7 Jul 4, 2016 LICENSE Initial commit Apr 5, 2016 README.md Version bump and a System example for README Apr 27, 2016 README.md specs Specs is an Entity-Component System written in Rust. It aims for parallel systems execution with high ergonomics and flexibility. The name can be interpret in a number of ways: ""SPECS Parallel ECS"" ""Super Powerful ECS"" ""Special ECS"" Classification According to ECS Design Crossroads, specs fulfills all the requirements, has In-place modification updates, and Generational ID entities. Features Automatic execution of the systems in parallel. Follows Rust ownership rules, where each component storage behaves as a variable. Depends on the order, in which systems are started. Component storage is abstract behind the trait. One can use vectors, hashmaps, trees, or whatever else. New components can be registered at any point from user modules. They don't have to be POD. No virtual calls, low overhead. Why is it fast Do you know many other natively parallel ECS in Rust? Abstract storage means you can choose the most efficient one according to your needs. You can even roll in your own. No virtual calls during systems processing means you work with the data directly. See ecs_bench for single- and multi-threaded performance comparisons. Why is it cool Your system can be as simple as a closure working on some components, no redundant info or boilerplate is needed. At the same time, you can manually fiddle with entities and components, and it would still be safe and convenient. Your components can be anything (as long as they implement Component)! Neither Copy or even Clone bounds are needed. Your component storages can be anything. Consider crazy stuff like a BSP tree, or a database over the network. Some storages can safely allow sharing their components between entities, some can not - but it's up to you to choose. Examples Entity creation: let mut planner = {     let mut w = specs::World::new();     // All components types should be registered before working with them     w.register::<Position>();     w.register::<Speed>();     // create_now() of World provides with an EntityBuilder to add components to an Entity     w.create_now().with(Position(0)).with(Speed(2)).build();     w.create_now().with(Position(-1)).with(Speed(100)).build();     w.create_now().with(Position(127)).build();     // Planner is used to run systems on the specified world with a specified number of threads     specs::Planner::new(w, 4) }; System run: planner.run1w1r(|p: &mut Position, s: &Speed| {     *p += *s; }); Custom system: impl System<u32> for MySystem {     fn run(&mut self, arg: RunArg, context: u32) {         let mut numbers = arg.fetch(|w| w.write::<u32>());         for n in (&numbers).iter() {             *n += context;         }     } } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/slide-rs/specs"	"— Specs Parallel ECS"	"true"
"Game development"	"bbodi/rust-voxlap"	"https://github.com/bbodi/rust-voxlap"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"1"	"3"	"GitHub - bbodi/rust-voxlap: Voxlap binding for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 8 Fork 3 bbodi/rust-voxlap Code Issues 0 Pull requests 0 Pulse Graphs Voxlap binding for Rust 30 commits 1 branch 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src .gitignore Cargo.toml Readme.md voxlib.txt Readme.md Voxlap binding for Rust. See here for use case and pictures. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bbodi/rust-voxlap"	"— bindings"	"true"
"Game development"	"Voxlap"	"http://advsys.net/ken/voxlap.htm"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Ken Silverman's Voxlap Page Ken Silverman's Voxlap Page 2014: PND3D demo released: an abandoned, yet worthy sequel to Voxlap. 2005: Complete Voxlap source code released. 2004: Voxlap library released. (A subset of the 2005 Voxlap source code release) 2003 screenshots and first demo executable! 2002 screenshots of an unreleased Voxlap prototype game Even older screenshots When I graduated college in May, 2000, I started working on a new voxel engine called ""Voxlap"". (For those newbies out there, the word ""voxel"" is derived from ""volume + pixel"". It's like a 2D pixel, but in 3D - just a fancy name for a cube.) Most game engines these days use polygons. Polygons and voxels each have their advantages and disadvantages. For example, it's a lot easier to destroy a wall in a voxel engine. Also, there's no penalty for drawing curved surfaces over flat surfaces in a voxel engine. I must say though, that polygons do have one really big (and unfair) advantage - all the 3D accelerators support them, and this makes them quite hard to compete with. It takes a strong will (and perhaps a guy with nothing better to do) to continue, but someday, voxels will rule the world! (I hope) In June 2001, Tom Dobrowolski joined my ""team"" as a programmer. He's currently a student in Poland and he's been writing the game code for my voxlap engine demo in his spare time. He's a talented guy and it's great having him working with me on this project. Tom has his own website - he's got old demos and screenshots of his own there. Here are the features that Voxlap currently supports: 6 Degrees of Freedom (move anywhere, look anywhere) Room over room built-in, no hacks necessary Accurate intersections so voxels look like perfect cubes up close Fast CSG operations for: boxes, spheres, ellipsoids, cylinders, sectors, and 3D convex hulls Voxel sprites with full matrix rotation (using .KV6 output format from SLAB6) Support for sprite bending or twisting (great for animation such as a fish swimming) Full-screen Z-buffer for bug-free clipping of sprites Fog of any depth or color. Mip-mapping for both world and sprites. Support for Mercator-projection panoramas and converter for cubic panoramas (see KUBE / KUBEGL) Smooth collision detection and sliding Real-time WYSIWYG editor Real-time lighting function Support for procedural textures (wood, etc...) Includes all basic functions necessary for a game - including my own sample game code Automatically detects floating objects and makes them fall 1024x1024x256 board map (this is plenty big if you take advantage of the depth) My own optimized decompression library for PNG, JPG, GIF, TGA, BMP and ZIP files. Everything in pure 32-bit color (with emulation for 24,16,15,8 bit color) Uses modern compiler & OS: MS Visual C++ 6.0, Masm 6.15, Win95/98/ME/NT/2000/XP DirectDraw, DirectSound, DirectInput fully supported Optimized assembly code, supporting SSE (Pentium III) or 3DNow! (Athlon) instructions Doesn't require a 3D accelerator :) 08/15/2006: Peter Houska has been doing experiments with voxels lately. Many of his demos support my own data formats from Voxlap, Groudraw, and Slab6. If you're a fan of voxels, you should check out his work. Here's a collection of 7 more heightmap voxel demos, showing how I progressed from my first demo (April 1993) to some more advanced ones that lead up to Voxlap. Also included is a specially designed heightmap terrain generator from Tom Dobrowolski. Full source code included. GROUDRAW.ZIP (535,022 bytes, 03/11/2006) (DOS32 mostly/OpenWatcom 1.3) Here's an early voxel demo of mine that I wrote in April, 1994. It features ceilings and floors, depth shading, and some primitive modification to the cave. Includes source code. CAVE.ZIP (46,975 bytes, 05/29/2005) (DOS32) Cave.exe screen shot Want to make your own voxel engine, but don't know how to get started? Take a look at this little snippet of Qbasic code. It's slow in Qbasic, but if you port it to C, then it'll run MUCH faster. (Sorry, my voxlap algorithm is way too complex to explain here!) GROUFST2.BAS (1,903 bytes) (DOS) Groufst2.bas screen shot Back to Ken Silverman's Official Home Page"	"null"	"null"	"— bindings"	"true"
"Geospatial"	"geo"	"https://crates.io/keywords/geo"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"— bindings"	"true"
"Geospatial"	"gis"	"https://crates.io/keywords/gis"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"— bindings"	"true"
"Geospatial"	"Georust"	"https://github.com/georust"	"— geospatial tools and libraries written in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"GeoRust · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization GeoRust A collection of geospatial tools and libraries written in Rust #rust-geo on Mozilla IRC https://plus.google.com/communities/112708816294364931014 Repositories People 8 Filters Sources Forks Rust 1 1 rust-polyline Google Encoded Polyline encoding & decoding in Rust. Updated Jul 14, 2016 Rust 28 9 rust-geo Simple geospatial primitives for Rust Updated Jul 13, 2016 Rust 11 4 rust-gdal Rust bindings for GDAL Updated Jun 30, 2016 Rust 32 7 rust-geojson Library for serializing the GeoJSON vector GIS file format Updated May 25, 2016 Rust 12 2 rust-geohash Geohash for Rust Updated May 25, 2016 Rust 6 0 rust-wkt Rust read/write support for well-known text (WKT) Updated Apr 16, 2016 Rust 2 1 rust-geocoding Geocoding library for Rust. Updated Jan 11, 2016 Rust 0 1 rust-world-file Rust read/write support for world files Updated Jan 11, 2016 Rust 1 1 rust-proj Rust bindings for proj Updated Jan 4, 2016 Rust 4 1 rust-osm OSM XML serialization and other OpenStreetMap utilities Updated Jun 6, 2015 Rust 1 0 rust-topojson TopoJSON bindings and utilities for Rust Updated Jan 30, 2015 Rust 1 1 rust-shapefile Rust read/write support for shapefiles Updated Jan 21, 2015 Rust 2 1 rust-gpx Rust read/write support for GPS Exchange Format (GPX) Updated Jan 21, 2015 8 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/georust"	"— geospatial tools and libraries written in Rust"	"true"
"Graphics"	"graphics"	"https://crates.io.keywords/graphics"	"— geospatial tools and libraries written in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"— geospatial tools and libraries written in Rust"	"false"
"Graphics"	"gfx-rs/gfx"	"https://github.com/gfx-rs/gfx"	"— A high-performance, bindless graphics API for Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"623"	"45"	"114"	"GitHub - gfx-rs/gfx: A high-performance, bindless graphics API for Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 45 Star 623 Fork 114 gfx-rs/gfx Code Issues 108 Pull requests 2 Pulse Graphs A high-performance, bindless graphics API for Rust. http://gfx-rs.github.io/ 2,151 commits 8 branches 0 releases 73 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto gh-pages master v0.7 v0.8 v0.9 v0.10 v0.11 Nothing to show Nothing to show New pull request Latest commit d976351 Jul 14, 2016 homu Auto merge of #1001 - ebaklund:master, r=kvark … Proposal to #283  A bit worried that init_buffer() is not much used. Would like to have more tests than only --example instancing. Also, semantics of usage-flags differ significantly between glBufferStorage and glBufferData. Kind regards, Erik. Permalink Failed to load latest commit information. examples Fixes regressions in migration to std::time. Jul 13, 2016 info Update readme Jun 15, 2015 src Updated to according to comments for PR#1001. Jul 13, 2016 tests Updated draw_state dependency, bumped all the versions Apr 29, 2016 .gitignore PSO - ShaderLink and DataLink traits and their implementations with n… Dec 20, 2015 .travis.yml Changes to appveyor and travis scripts to include testing of submodules. Jun 5, 2016 CHANGELOG.md All-around version bumps in preparation to 0.12 release Jun 23, 2016 Cargo.toml Replace time with std::time (#995) Jul 11, 2016 LICENSE Added a license file Aug 21, 2014 README.md Some updates to README.md inspired from discussion in (#1000) Jul 11, 2016 appveyor.yml Changes to appveyor and travis scripts to include testing of submodules. Jun 5, 2016 README.md Documentation | Blog gfx-rs gfx is a high-performance, bindless graphics API for the Rust programming language. It aims to be the default API for Rust graphics: for one-off applications, or higher level libraries or engines. Motivation Graphics APIs are mostly designed with C and C++ in mind, and hence are dangerous and error prone, with little static safety guarantees. Providing type safe wrappers around platform-specific APIs is feasible, but only pushes the problem of platform independence to a higher level of abstraction, often to the game or rendering engine. Modern graphics APIs, whilst providing a great degree of flexibility and a high level of performance, often have a much higher barrier to entry than traditional fixed-function APIs. Graphics APIs like OpenGL still require the developer to 'bind' and 'unbind' objects in order to perform operations on them. This results in a large amount of boiler plate code, and brings with it the usual problems associated with global state. Getting started The gfx-rs git repository contains a number of examples. Those examples are automatically downloaded if you clone the gfx directory: $ cd <my_dir> $ git clone https://github.com/gfx-rs/gfx  where <my_dir> is a directory name of your choice. Once gfx is downloaded you can build any of the gfx examples. The examples are listed in the <my_dir>/gfx/Cargo.toml file. For example try: $ cd gfx $ cargo run --example cube  If you compile the the example for the first time, it may take some while since all dependencies must be compiled too. If you want to build your own stand-alone gfx program, add the following to your new Cargo.toml: [dependencies] gfx = ""*""  For gfx to work, it need access to the graphics system of the OS. This is typically provided through the some window initialization API. gfx can use a couple of those to acquire graphical contexts. For example; glfw or glutin. To see how the graphic context is acquired, see the cube example or the triangle example. To use glfw or glutin, your Cargo.toml must be extended with the following dependencies: [dependencies] ... glutin =""*"" gfx_window_glutin = ""*""  or [dependencies] ... glfw = ""*"" gfx_window_glfw = ""*""  You may want to inspect <my_dir>/gfx/Cargo.toml for other modules typically used in gfx programs. Who's using it? People are! Note gfx is still in the early stages of development. Help is most appreciated. If you are interested in helping out, you can contact the developers on Gitter. See contrib.md for contact information and contribution guidelines. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gfx-rs/gfx"	"— A high-performance, bindless graphics API for Rust."	"true"
"Graphics"	""	"https://travis-ci.org/gfx-rs/gfx"	"— A high-performance, bindless graphics API for Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— A high-performance, bindless graphics API for Rust."	"true"
"Graphics"	"opengl"	"https://crates.io/keywords/opengl"	"OpenGL []"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"OpenGL []"	"true"
"Graphics"	"bjz/gl-rs"	"https://github.com/bjz/gl-rs"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"222"	"12"	"74"	"GitHub - bjz/gl-rs: An OpenGL function pointer loader for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 222 Fork 74 bjz/gl-rs Code Issues 7 Pull requests 0 Pulse Graphs An OpenGL function pointer loader for Rust 799 commits 1 branch 68 releases 50 contributors Rust 99.0% Other 1.0% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show khronos_api-v1.0.0 khronos_api-v0.0.8 khronos_api-v0.0.7 khronos_api-v0.0.6 khronos_api-v0.0.5 khronos_api-v0.0.4 khronos_api-v0.0.3 khronos_api-v0.0.2 khronos_api-v0.0.1 gl_generator-v0.5.2 gl_generator-v0.5.1 gl_generator-v0.5.0 gl_generator-v0.4.2 gl_generator-v0.4.1 gl_generator-v0.4.0 gl_generator-v0.3.0 gl_generator-v0.2.0 gl_generator-v0.1.0 gl_generator-v0.0.28 gl_generator-v0.0.27 gl_generator-v0.0.26 gl_generator-v0.0.25 gl_generator-v0.0.24 gl_generator-v0.0.23 gl_generator-v0.0.22 gl_generator-v0.0.21 gl_generator-v0.0.20 gl_generator-v0.0.19 gl_generator-v0.0.18 gl_generator-v0.0.17 gl_generator-v0.0.16 gl_generator-v0.0.15 gl_generator-v0.0.14 gl_generator-v0.0.13 gl_generator-v0.0.12 gl_generator-v0.0.11 gl_generator-v0.0.10 gl_generator-v0.0.9 gl_generator-v0.0.8 gl_generator-v0.0.7 gl_generator-v0.0.6 gl_generator-v0.0.5 gl_generator-v0.0.4 gl_common-v0.2.0 gl_common-v0.1.0 gl_common-v0.0.4 gl_common-v0.0.3 gl_common-v0.0.1 gl-v0.6.1 gl-v0.6.0 gl-v0.5.2 gl-v0.5.1 gl-v0.5.0 gl-v0.4.0 gl-v0.3.0 gl-v0.2.0 gl-v0.1.0 gl-v0.0.12 gl-v0.0.11 gl-v0.0.10 gl-v0.0.9 gl-v0.0.8 gl-v0.0.7 gl-v0.0.6 gl-v0.0.5 gl-v0.0.4 gl-v0.0.3 gl-v0.0.2 Nothing to show New pull request Latest commit e4a3bb7 Jul 2, 2016 bjz committed on GitHub Merge pull request #408 from bjz/update-gl_generator-and-gl … Update gl_generator and gl versions Permalink Failed to load latest commit information. bin Fix cargo script Dec 19, 2015 gl Update gl_generator and gl versions Jul 2, 2016 gl_generator Update gl_generator and gl versions Jul 2, 2016 gl_tests Fix duplicate definitions when adding registries Mar 24, 2016 khronos_api Split out READMEs into subdirectories Nov 28, 2015 .gitignore Share target directory to speed up builds Nov 28, 2015 .gitmodules Crate reorganization Mar 9, 2015 .travis.yml Add a better script command for doing batch operations Nov 28, 2015 LICENSE Add LICENSE and AUTHORS, update README Sep 28, 2013 README.md Bump version numbers of gl_generator and gl crates Mar 24, 2016 README.md gl-rs Overview This repository contains the necessary building blocks for OpenGL wrapper libraries. For more information on each crate, see their respective READMEs listed below. The following crates are contained in this repository: gl README An OpenGL function pointer loader for the Rust Programming Language. [dependencies] gl = ""0.6.0"" gl_generator README Code generators for creating bindings to the Khronos OpenGL APIs. [build-dependencies] gl_generator = ""0.5.0"" khronos_api README The Khronos XML API Registry, exposed as byte string constants. [build-dependencies] khronos_api = ""1.0.0"" Compiling from source khronos_api uses a git submodule. You will need to initialize it before building: git submodule update --init A batch cargo script is provided at bin/cargo. See the script for some example usages. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bjz/gl-rs"	"—"	"true"
"Graphics"	""	"https://travis-ci.org/bjz/gl-rs"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Graphics"	"PistonDevelopers/glfw-rs"	"https://github.com/PistonDevelopers/glfw-rs"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"217"	"19"	"83"	"GitHub - PistonDevelopers/glfw-rs: GLFW3 bindings and idiomatic wrapper for Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 217 Fork 83 PistonDevelopers/glfw-rs Code Issues 16 Pull requests 0 Pulse Graphs GLFW3 bindings and idiomatic wrapper for Rust. 890 commits 1 branch 1 release 61 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.6-compatible Nothing to show New pull request Latest commit c57014b Jul 3, 2016 bvssvni committed on GitHub Merge pull request #353 from bvssvni/master … Updated dependencies Permalink Failed to load latest commit information. examples fix events example to check new FileDrop event May 31, 2016 src Dropped -> FileDrop May 31, 2016 .gitignore Use syntax extension to generate link arguments Aug 5, 2014 .travis.yml Add missing X libraries Feb 1, 2015 AUTHORS Add new folks to AUTHORS Dec 11, 2013 Cargo.toml Updated dependencies Jul 3, 2016 LICENSE Add LICENSE and copyright comments May 31, 2013 README.md Add docs regarding travis-ci/travis-ci#2030 Feb 1, 2015 README.md glfw-rs GLFW bindings and wrapper for The Rust Programming Language. Example extern crate glfw;  use glfw::{Action, Context, Key};  fn main() {     let mut glfw = glfw::init(glfw::FAIL_ON_ERRORS).unwrap();      let (mut window, events) = glfw.create_window(300, 300, ""Hello this is window"", glfw::WindowMode::Windowed)         .expect(""Failed to create GLFW window."");      window.set_key_polling(true);     window.make_current();      while !window.should_close() {         glfw.poll_events();         for (_, event) in glfw::flush_messages(&events) {             handle_window_event(&mut window, event);         }     } }  fn handle_window_event(window: &mut glfw::Window, event: glfw::WindowEvent) {     match event {         glfw::WindowEvent::Key(Key::Escape, _, Action::Press, _) => {             window.set_should_close(true)         }         _ => {}     } } Using glfw-rs Prerequisites Make sure you have compiled and installed GLFW 3.x. You might be able to find it on your package manager, for example on OS X: brew install --static glfw3 (you may need to run brew tap homebrew/versions). If not you can download and build the library from the source supplied on the GLFW website. Note that if you compile GLFW with CMake on Linux, you will have to supply the -DCMAKE_C_FLAGS=-fPIC argument. You may install GLFW to your PATH, otherwise you will have to specify the directory containing the library binaries when you call make or make lib: GLFW_LIB_DIR=path/to/glfw/lib/directory make  Including glfw-rs in your project Add this to your Cargo.toml: [dependencies.glfw] git = ""https://github.com/bjz/glfw-rs.git"" On Windows By default, glfw-rs will try to compile the glfw library. If you want to link to your custom build of glfw or if the build doesn't work (which is probably the case on Windows), you can disable this: [dependencies.glfw] git = ""https://github.com/bjz/glfw-rs.git"" default-features = false A note about Travis CI You may encounter the following error when attempting to build your project on Travis: CMake Error at CMakeLists.txt:3 (cmake_minimum_required):   CMake 2.8.9 or higher is required.  You are running version 2.8.7  This is because Travis CI still hasn't updated their CMake version almost a year since the issue was reported (See travis-ci/travis-ci#2030). Because of this, you will need to add the following build commands to your .travis.yml: before_install:   # install a newer cmake since at this time Travis only has version 2.8.7   - yes | sudo add-apt-repository ppa:kalakris/cmake   - sudo apt-get update -qq install: sudo apt-get install cmake Support Contact bjz on irc.mozilla.org #rust and #rust-gamedev, or post an issue on Github. glfw-rs in use sebcrozet/kiss3d Jeaye/q3 cyndis/rsmc mozilla/servo ozkriff/marauder Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PistonDevelopers/glfw-rs"	"—"	"true"
"Graphics"	""	"https://travis-ci.org/PistonDevelopers/glfw-rs"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Graphics"	"tomaka/glium"	"https://github.com/tomaka/glium"	"— safe OpenGL wrapper for the Rust language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"998"	"61"	"95"	"GitHub - tomaka/glium: Safe OpenGL wrapper for the Rust language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 61 Star 998 Fork 95 tomaka/glium Code Issues 185 Pull requests 12 Wiki Pulse Graphs Safe OpenGL wrapper for the Rust language. 2,445 commits 11 branches 43 releases 55 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags buffers-rework clock-ticks-to-time gh-pages impl-notes-rm master pub-any raw-write tex-binding-improvements teximpl-to-any uniform-arrays uniforms-reform Nothing to show v0.13.5 v0.13.4 v0.13.2 v0.13.1 v0.13.0 v0.12.4 v0.12.3 v0.12.2 v0.12.0 v0.11.0 v0.10.0 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.7 v0.8.6 v0.8.5 v0.8.4 v0.8.3 v0.8.2 v0.8.1 v0.8.0 v0.7.1 v0.7.0 v0.6.7 v0.6.6 v0.6.5 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.6 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.2 v0.4.1 v0.4.0 Nothing to show New pull request Latest commit 66d0b5b Jul 14, 2016 tomaka committed on GitHub Merge pull request #1500 from abadd/master … Adjust compute shader example Permalink Failed to load latest commit information. benches Add a program creation benchmark Oct 15, 2015 book book: Fix various typos and minor wording mistakes. Jun 26, 2016 build Update gl_generator to v0.5.1 Mar 24, 2016 examples Adjust compute shader example Jul 13, 2016 macros Stop maintaining glium_macros Apr 19, 2015 src Fixed erroneous TransformFeedbackNotSupported error Jul 9, 2016 tests Unignore some tests that work now May 18, 2016 .gitignore Replace the website with a book Sep 11, 2015 .travis.yml travis: have coverage skip non-code, and add kcov workaround Jun 17, 2016 CHANGELOG.md Publish 0.14.0 Apr 11, 2016 Cargo.toml Updated dependencies Jul 3, 2016 LICENSE Move LICENSE to the top Oct 3, 2014 README.md Remove the features section Feb 8, 2016 circle.yml Add temporary workaround for CircleCI problem Apr 10, 2016 README.md glium Elegant and safe OpenGL wrapper. Glium is an intermediate layer between OpenGL and your application. You still need to manually handle the graphics pipeline, but without having to use OpenGL's old and error-prone API. [dependencies] glium = ""*"" Its objectives: Be safe to use. Many aspects of OpenGL that can trigger a crash if misused are automatically handled by glium. Provide an API that enforces good pratices such as RAII or stateless function calls. Be compatible with all OpenGL versions that support shaders, providing a unified API when things diverge. Avoid all OpenGL errors beforehand. Produce optimized OpenGL function calls, and allow the user to easily use modern OpenGL techniques. Link to the documentation If you have some knowledge of OpenGL, the documentation and the examples should get you easily started. Link to a work-in-progress tutorial Why should I use Glium instead of raw OpenGL calls? Easy to use: Functions are higher level in glium than in OpenGL. Glium's API tries to be as Rusty as possible, and shouldn't be much different than using any other Rust library. Glium should allow you to do everything that OpenGL allows you to do, just through high-level functions. If something is missing, please open an issue. You can directly pass vectors, matrices and images to glium instead of manipulating low-level data. Thanks to glutin, glium is very easy to setup compared to raw OpenGL. Glium provides easier ways to do common tasks. For example the VertexBuffer struct contains information about the vertex bindings, because you usually don't use several different bindings with the same vertex buffer. This reduces the overall complexity of OpenGL. Glium handles framebuffer objects, samplers, and vertex array objects for you. You no longer need to create them explicitely as they are automatically created when needed and destroyed when their corresponding object is destroyed. Glium is stateless. There are no set_something() functions in the entire library, and everything is done by parameter passing. The same set of function calls will always produce the same results, which greatly reduces the number of potential problems. Safety: Glium detects what would normally be errors or undefined behaviors in OpenGL, and panics, without calling glGetError which would be too slow. Examples include requesting a depth test when you don't have a depth buffer available, not binding any value to an attribute or uniform, or binding multiple textures with different dimensions to the same framebuffer. If the OpenGL context triggers an error, then you have found a bug in glium. Please open an issue. Just like Rust does everything it can to avoid crashes, glium does everything it can to avoid OpenGL errors. The OpenGL context is automatically handled by glium. You don't need to worry about thread safety, as it is forbidden to change the thread in which OpenGL objects operate. Glium also allows you to safely replace the current OpenGL context with another one that shares the same lists. Glium enforces RAII. Creating a Texture2d struct creates a texture, and destroying the struct destroys the texture. It also uses Rust's borrow system to ensure that objects are still alive and in the right state when you use them. Glium provides the same guarantees with OpenGL objects that you have with regular objects in Rust. High-level functions are much easier to use and thus less error-prone. For example there is no risk of making a mistake while specifying the names and offsets of your vertex attributes, since Glium automatically generates this data for you. Robustness is automatically handled. If the OpenGL context is lost (because of a crash in the driver for example) then swapping buffers will return an error. Compatibility: In its default mode, Glium should be compatible with both OpenGL and OpenGL ES. If something doesn't work on OpenGL ES, please open an issue. During initialization, Glium detects whether the context provides all the required functionality, and returns an Err if the device is too old. Glium tries to be as tolerant as possible, and should work with the majority of the OpenGL2-era devices. Glium will attempt to use the latest, optimized versions of OpenGL functions. This includes buffer and texture immutable storage and direct state access. It will automatically fall back to older functions if they are not available. Glium comes with a set of tests that you can run with cargo test. If your project/game doesn't work on specific hardware, you can try running Glium's tests on it to see what is wrong. Performances: State changes are optimized. The OpenGL state is only modified if the state actually differs. For example if you call draw with the IfLess depth test twice in a row, then glDepthFunc(GL_LESS) and glEnable(GL_DEPTH_TEST) will only be called the first time. If you then call draw with IfGreater, then only glDepthFunc(GL_GREATER) will be called. Just like Rust is theoretically slower than C because of additional safety checks, glium is theoretically slower than well-prepared and optimized raw OpenGL calls. However in practice the difference is very low. Fully optimized OpenGL code uses advanced techniques such as persistent mapping or bindless textures. These are hard to do and error-prone, but trivially easy to do with glium. You can easily get a huge performance boost just by doing the right function calls. Since glium automatically avoids all OpenGL errors, you can safely use the GL_KHR_no_error extension when it is available. Using this extension should provide a good performance boost (but it is also very recent and not available anywhere for the moment). Limitations: Robustness isn't supported everywhere yet, so you can still get crashes if you do incorrect things in your shaders. Glium gives you access to all the tools but doesn't prevent you from doing horribly slow things. Some knowledge of modern techniques is required if you want to reach maximum performances. Glium pushes the Rust compiler to its limits. Stack overflows (inside the compiler), internal compiler errors, one-hour compile time, etc. happen more often than in smaller libraries. Rust plugins are not stable, so you will have to use macros such as implement_vertex!(MyStruct) instead of #[derive(GliumVertex)]. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tomaka/glium"	"— safe OpenGL wrapper for the Rust language."	"true"
"Graphics"	""	"https://travis-ci.org/tomaka/glium"	"— safe OpenGL wrapper for the Rust language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— safe OpenGL wrapper for the Rust language."	"true"
"Graphics"	"tomaka/glutin"	"https://github.com/tomaka/glutin"	"— Rust alternative to"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"481"	"35"	"151"	"GitHub - tomaka/glutin: Pure Rust alternative to GLFW Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 481 Fork 151 tomaka/glutin Code Issues 127 Pull requests 16 Pulse Graphs Pure Rust alternative to GLFW 1,345 commits 9 branches 50 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix-winapi-0.2 gbm gh-pages headless-test master opt-xlibs raspi-videocore semver xsync Nothing to show v0.4.2 0.4.1 0.4.0 0.3.5 0.3.4 0.3.3 0.3.2 0.3.0 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 0.0.31 0.0.30 0.0.29 0.0.28 0.0.27 0.0.26 0.0.25 0.0.24 0.0.23 0.0.22 0.0.21 0.0.20 0.0.19 0.0.18 0.0.17 0.0.16 0.0.15 0.0.14 0.0.13 0.0.12 0.0.11 0.0.10 0.0.9 0.0.8 0.0.7 0.0.6 0.0.5 0.0.4 0.0.4-pre 0.0.3-pre 0.0.2 Nothing to show New pull request Latest commit 9a26f29 Jul 5, 2016 tomaka committed on GitHub Merge pull request #800 from emilio/compose-upstream … x11: handle X11's multi-key, a.k.a compose key. Permalink Failed to load latest commit information. examples Generalize WindowBuilder::with_title May 8, 2016 src x11: handle X11's multi-key, a.k.a compose key. Jul 4, 2016 tests Construct cocoa headless context based on args Jan 18, 2016 .gitattributes Initial commit Jul 27, 2014 .gitignore win32: Bump user32-sys req for MapVirtualKeyA Sep 22, 2015 .gitmodules Add basic support for Android Sep 11, 2014 .travis.yml Fix docs publication not working May 21, 2015 Cargo.toml Publish 0.6.1 Jun 19, 2016 LICENSE Initial commit Jul 27, 2014 README.md Fix the usage example in the README Jan 23, 2016 appveyor.yml Fix the appveyor build Sep 24, 2015 build.rs Update gl_generator to v0.5 Mar 24, 2016 README.md glutin - OpenGL, UTilities and INput Alternative to GLFW in pure Rust. [dependencies] glutin = ""*"" Documentation Try it! git clone https://github.com/tomaka/glutin cd glutin cargo run --example window Usage Glutin is an OpenGL context creation library and doesn't directly provide OpenGL bindings for you. [dependencies] gl = ""*"" libc = ""*"" extern crate gl; extern crate glutin; extern crate libc;  fn main() {     let window = glutin::Window::new().unwrap();      unsafe { window.make_current() };      unsafe {         gl::load_with(|symbol| window.get_proc_address(symbol) as *const _);          gl::ClearColor(0.0, 1.0, 0.0, 1.0);     }      for event in window.wait_events() {         unsafe { gl::Clear(gl::COLOR_BUFFER_BIT) };         window.swap_buffers();          match event {             glutin::Event::Closed => break,             _ => ()         }     } } Note that glutin aims at being a low-level brick in your rendering infrastructure. You are encouraged to write another layer of abstraction between glutin and your application. Platform-specific notes Android To compile the examples for android, initialize the submodules, go to deps/apk-builder/apk-builder and run cargo build, then go back to glutin and call ANDROID_HOME=/path/to/sdk NDK_HOME=/path/to/ndk NDK_STANDALONE=/path/to/standalone cargo test --no-run --target=arm-linux-androideabi X11 The plan is that glutin tries to dynamically link-to and use wayland if possible. If it doesn't work, it will try xlib instead. If it doesn't work, it will try libcaca. This is work-in-progress. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tomaka/glutin"	"— Rust alternative to"	"true"
"Graphics"	"GLFW"	"http://www.glfw.org/"	"— Rust alternative to"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2062"	"245"	"563"	"GitHub - glfw/glfw: A multi-platform library for OpenGL, window and input Skip to content Personal Open source Business Explore Join GitHub Sign in Pricing Blog Support Search GitHub This repository Watch 245 Star 2,062 Fork 563 glfw/glfw Code Issues 106 Pull requests 16 Wiki Pulse Graphs A multi-platform library for OpenGL, window and input http://www.glfw.org/ 3,025 commits 12 branches 9 releases 73 contributors C 88.3% Objective-C 9.2% CMake 1.4% Mathematica 1.1% C Objective-C CMake Mathematica Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags capturecursor ci horrible-keyname-hacks inithint latest master mirroring per-monitor-dpi thirteen touch transparent-window xsync Nothing to show 3.2 3.1.2 3.1.1 3.1 3.0.4 3.0.3 3.0.2 3.0.1 3.0 Nothing to show New pull request Latest commit 4888d7d Jul 14, 2016 elmindreda Documentation work … [ci skip] Permalink Failed to load latest commit information. .github Documentation work Jul 14, 2016 CMake Add check for VULKAN_SDK envvar on Windows Mar 5, 2016 deps Fix matrix rotation regression Jul 13, 2016 docs Documentation work Jul 14, 2016 examples Update email address Jun 1, 2016 include/GLFW Documentation work Jul 6, 2016 src Win32: Fix GLFW_MAXIMIZED ignored by first window Jul 12, 2016 tests Fix test program line endings Jun 15, 2016 .appveyor.yml Remove CRLF line endings Feb 18, 2016 .gitignore Add Xcode CMake output patterns to .gitignore Mar 6, 2016 .travis.yml Add build directory for CI Feb 4, 2016 CMakeLists.txt Start 3.2.1 Jun 15, 2016 COPYING.txt Update email address Jun 1, 2016 README.md Documentation work Jul 14, 2016 cmake_uninstall.cmake.in Formatting. Aug 19, 2012 README.md GLFW Introduction GLFW is a free, Open Source, multi-platform library for OpenGL, OpenGL ES and Vulkan application development. It provides a simple, platform-independent API for creating windows, contexts and surfaces, reading input, handling events, etc. The current stable release is version 3.2. See the downloads page for details and files, or fetch the latest branch, which always points to the latest stable release. Each release starting with 3.0 also has a corresponding annotated tag. This is version 3.2.1, which is not yet described. If you are new to GLFW, you may find the tutorial for GLFW 3 useful. If you have used GLFW 2 in the past, there is a transition guide for moving to the GLFW 3 API. Compiling GLFW GLFW itself needs only the headers and libraries for your window system. It does not need the headers for any context creation API (WGL, GLX, EGL, NSGL) or rendering API (OpenGL, OpenGL ES, Vulkan) to enable support for them. GLFW supports compilation on Windows with Visual C++ 2010 and later, MinGW and MinGW-w64, on OS X with Clang and on Linux and other Unix-like systems with GCC and Clang. It will likely compile in other environments as well, but this is not regularly tested. There are also pre-compiled Windows binaries available for all compilers supported on that platform. See the compilation guide in the documentation for more information. Using GLFW See the building application guide guide in the documentation for more information. System requirements GLFW supports Windows XP and later, OS X 10.7 Lion and later, and Linux and other Unix-like systems with the X Window System. Experimental implementations for the Wayland protocol and the Mir display server are available but not yet officially supported. See the compatibility guide in the documentation for more information. Dependencies The examples and test programs depend on a number of tiny libraries. These are located in the deps/ directory. getopt_port for examples with command-line options TinyCThread for threaded examples An OpenGL 3.2 core loader generated by glad for examples using modern OpenGL linmath.h for linear algebra in examples Vulkan headers for Vulkan tests The Vulkan example additionally requires the Vulkan SDK to be installed, or it will not be included in the build. The documentation is generated with Doxygen. If CMake does not find Doxygen, the documentation will not be generated. Reporting bugs Bugs are reported to our issue tracker. Please check the contribution guide for information on what to include when reporting a bug. Changelog Bugfix: Single compilation unit builds failed due to naming conflicts (#783) Bugfix: The range checks for glfwSetCursorPos used the wrong minimum (#773) [Win32] Bugfix: glfwSetClipboardString created an unnecessary intermediate copy of the string [Win32] Bugfix: Examples failed to build on Visual C++ 2010 due to C99 in linmath.h (#785) [Win32] Bugfix: The first shown window ignored the GLFW_MAXIMIZED hint when the process was provided a STARTUPINFO (#780) [GLX] Bugfix: Dynamically loaded entry points were not verified [EGL] Bugfix: Dynamically loaded entry points were not verified Contact The official website for GLFW is glfw.org. There you can find the latest version of GLFW, as well as news, documentation and other information about the project. If you have questions related to the use of GLFW, we have a support forum, and the IRC channel #glfw on Freenode. If you have a bug to report, a patch to submit or a feature you'd like to request, please file it in the issue tracker on GitHub. Finally, if you're interested in helping out with the development of GLFW or porting it to your favorite platform, join us on GitHub or IRC. Acknowledgements GLFW exists because people around the world donated their time and lent their skills. Bobyshev Alexander artblanc arturo Matt Arsenault Keith Bauer John Bartholomew Niklas Behrens Niklas Bergström Doug Binks blanco Martin Capitanio Chi-kwan Chan Lambert Clara Andrew Corrigan Noel Cower Jarrod Davis Olivier Delannoy Paul R. Deppe Michael Dickens Роман Донченко Mario Dorn Jonathan Dummer Ralph Eastwood Siavash Eliasi Michael Fogleman Gerald Franz GeO4d Marcus Geelnard Eloi Marín Gratacós Stefan Gustavson Sylvain Hellegouarch Matthew Henry heromyth Lucas Hinderberger Paul Holden IntellectualKitty Aaron Jacobs Toni Jovanoski Arseny Kapoulkine Osman Keskin Cameron King Peter Knut Christoph Kubisch Eric Larson Robin Leffmann Glenn Lewis Shane Liesegang Eyal Lotem Дмитри Малышев Martins Mozeiko Tristam MacDonald Hans Mackowiak Zbigniew Mandziejewicz Kyle McDonald David Medlock Bryce Mehring Jonathan Mercier Marcel Metz Jonathan Miller Kenneth Miller Bruce Mitchener Jack Moffitt Jeff Molofee Jon Morton Pierre Moulon Julian Møller Kamil Nowakowski Ozzy Andri Pálsson Peoro Braden Pellett Arturo J. Pérez Orson Peters Emmanuel Gil Peyrot Cyril Pichard Pieroman Jorge Rodriguez Ed Ropple Aleksey Rybalkin Riku Salminen Brandon Schaefer Sebastian Schuberth Matt Sealey SephiRok Steve Sexton Systemcluster Yoshiki Shibukawa Dmitri Shuralyov Daniel Skorupski Bradley Smith Julian Squires Johannes Stein Justin Stoecker Elviss Strazdins Nathan Sweet TTK-Bandit Sergey Tikhomirov Arthur Tombs Ioannis Tsakpinis Samuli Tuomola urraka Jari Vetoniemi Ricardo Vieira Nicholas Vitovitch Simon Voordouw Torsten Walluhn Patrick Walton Xo Wang Jay Weisskopf Frank Wille yuriks Santi Zupancic Jonas Ådahl Lasse Öörni All the unmentioned and anonymous contributors in the GLFW community, for bug reports, patches, feedback, testing and encouragement Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/glfw/glfw"	"— Rust alternative to"	"true"
"Graphics"	""	"https://travis-ci.org/tomaka/glutin"	"— Rust alternative to"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Rust alternative to"	"true"
"Graphics"	"Vulkan"	"https://www.khronos.org/vulkan/"	"[]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"16"	"44"	"2"	"GitHub - KhronosGroup/DataFormat: Khronos Data Format Specification Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 44 Star 16 Fork 2 KhronosGroup/DataFormat Code Issues 0 Pull requests 0 Pulse Graphs Khronos Data Format Specification 4 commits 2 branches 0 releases Fetching contributors C 35.9% TeX 27.3% XSLT 17.0% CSS 15.6% Makefile 2.1% HTML 1.4% JavaScript 0.7% C TeX XSLT CSS Makefile HTML JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: 1.1 Switch branches/tags Branches Tags 1.0 1.1 Nothing to show Nothing to show New pull request Latest commit 2ead3f0 Mar 9, 2016 Andrew Garrard Revision 5 … Switch to new official Khronos .svg. Removed unneeded/outdated scripts. Restored missing spec title. Permalink Failed to load latest commit information. config Revision 4 Mar 9, 2016 dblatex Revision 5 Mar 9, 2016 headers Data format 1.1 with compressed texture formats and floating point de… Feb 16, 2016 images Revision 5 Mar 10, 2016 out Revision 4 Mar 9, 2016 Makefile Revision 4 Mar 9, 2016 astc.txt Revision 4 Mar 9, 2016 bptc.txt Revision 4 Mar 9, 2016 compformats.txt Data format 1.1 with compressed texture formats and floating point de… Feb 16, 2016 df-docinfo.xml Revision 5 Mar 10, 2016 df.txt Revision 5 Mar 10, 2016 etc1.txt Revision 4 Mar 9, 2016 etc2.txt Revision 4 Mar 9, 2016 htmltitle.txt Revision 5 Mar 10, 2016 pdftitle.txt Data format 1.1 with compressed texture formats and floating point de… Feb 16, 2016 rgtc.txt Revision 4 Mar 9, 2016 s3tc.txt Revision 4 Mar 9, 2016 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/KhronosGroup/DataFormat"	"[]"	"true"
"Graphics"	"vulkan"	"https://crates.io/keywords/vulkan"	"[]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[]"	"true"
"Graphics"	"tomaka/vulkano"	"https://github.com/tomaka/vulkano"	"[] —"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"424"	"31"	"18"	"GitHub - tomaka/vulkano: Safe and rich Rust wrapper around the Vulkan API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 424 Fork 18 tomaka/vulkano Code Issues 30 Pull requests 5 Wiki Pulse Graphs Safe and rich Rust wrapper around the Vulkan API 945 commits 6 branches 0 releases 10 contributors Rust 98.6% Other 1.4% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cb draft-std-cb gh-pages master pool-capacity texel-buffer-work Nothing to show Nothing to show New pull request Latest commit a26fc00 Jul 13, 2016 tomaka committed on GitHub Merge pull request #174 from tomaka/sys-pipeline-barrier … Add pipeline_barrier() to UnsafeCommandBufferBuilder Permalink Failed to load latest commit information. examples Fix warnings Jun 16, 2016 glsl-to-spirv Update glslang May 25, 2016 vk-sys Rename the COLORSPACE_SRGB_NONLINEAR_KHR enum Jun 29, 2016 vulkano-shaders Fix warnings Jun 16, 2016 vulkano-win Update winit version to 0.5.1 May 24, 2016 vulkano Add pipeline_barrier() to UnsafeCommandBufferBuilder Jul 13, 2016 www Slight fix in the tutorial May 21, 2016 .gitlab-ci.yml Fix examples so that cargo test works Apr 15, 2016 .gitmodules Make glslang work on Linux Feb 19, 2016 .travis.yml Try fix docs import in travis May 6, 2016 LICENSE-APACHE Add license everywhere Mar 26, 2016 LICENSE-MIT Add license everywhere Mar 26, 2016 README.md Fix device leaking May 30, 2016 TROUBLES.md Add buffer_slice_field! macro May 2, 2016 vkspec.pdf Add the vulkan specs Feb 16, 2016 README.md Vulkano Note: requires Rust 1.9. This library would highly benefit from multiple upcoming features in Rust. Therefore it is likely that in the future you will need to update your version of Rust to continue using vulkano. Vulkano is a Rust wrapper around the Vulkan graphics API. It follows the Rust philosophy, which is that as long as you don't use unsafe code you shouldn't be able to trigger any undefined behavior. In the case of Vulkan, this means that non-unsafe code should always conform to valid API usage. What does vulkano do? Provides a low-levelish API around Vulkan. It doesn't hide what it does, but provides some comfort types. Plans to prevents all invalid API usages, even the most obscure ones. The purpose of vulkano is not to draw a teapot, but to cover all possible usages of Vulkan and detect all the possible problems. Invalid API usage is prevented thanks to both compile-time checks and runtime checks. Handles synchronization on the GPU side for you, as this aspect of Vulkan is both annoying to handle and error-prone. Dependencies between submissions are automatically detected, and semaphores are managed automatically. The behavior of the library can be customized thanks to unsafe trait implementations. Tries to be convenient to use. Nobody is going to use a library that requires you to browse the documentation for hours for every single operation. Warning: this library breaks every five minutes for the moment. Documentation To get started you are encouraged to read the examples in examples/src/bin, starting with the triangle example. Structure This repository contains four libraries: vulkano is the main one. vulkano-shaders can analyse SPIR-V shaders at compile-time. vulkano-win provides a safe link between vulkano and the winit library which can create a window where to render to. glsl-to-spirv can compile GLSL to SPIR-V by wrapping around glslang. License Licensed under either of Apache License, Version 2.0 (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tomaka/vulkano"	"[] —"	"true"
"Graphics"	"vulkano"	"https://crates.io/crates/vulkano"	"[] —"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] —"	"true"
"Graphics"	""	"https://travis-ci.org/tomaka/vulkano"	"[] —"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"[] —"	"true"
"GUI"	"gui"	"https://crates.io/keywords/gui"	"[] —"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[] —"	"true"
"GUI"	"PistonDevelopers/conrod"	"https://github.com/PistonDevelopers/conrod/"	"— An easy-to-use, immediate-mode, 2D GUI library written entirely in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"719"	"97"	"81"	"GitHub - PistonDevelopers/conrod: An easy-to-use, 2D GUI library written entirely in Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 97 Star 719 Fork 81 PistonDevelopers/conrod Code Issues 81 Pull requests 1 Pulse Graphs An easy-to-use, 2D GUI library written entirely in Rust. 1,382 commits 4 branches 0 releases 41 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bugfix master no-sudo-false revert-676-master Nothing to show Nothing to show New pull request Latest commit f6cddbe Jul 8, 2016 mitchmindtree committed on GitHub Merge pull request #747 from mitchmindtree/scrollbar_thickness … Add a method to Scrollbar for setting the thickness. Permalink Failed to load latest commit information. assets Added rust.png logo for image.rs example Feb 28, 2016 benches Reorganized assets (fonts & images) May 7, 2015 examples Updated dependencies Jul 7, 2016 scripts Enable doc deploying May 10, 2015 src Address new warnings that have appeared since updating to rustc 1.10 Jul 8, 2016 .gitignore Fixed gitignore and examples structure Aug 10, 2014 .travis.yml Add beta build to travis Jun 28, 2016 Cargo.png Re-organized images, as per review comment May 22, 2015 Cargo.toml Increment tiny version for non-breaking change Jul 8, 2016 LICENSE-APACHE Rename LICENSE-APACHE2 to LICENSE-APACHE as this seems to be standard Feb 5, 2016 LICENSE-MIT Re-license conrod under either MIT or Apache2 at the option of the us… Feb 5, 2016 README.md Remove all references to the Freetype library, which is no longer nec… Apr 15, 2016 README.md Conrod An easy-to-use, 2D GUI library written entirely in Rust. The API Documentation. The Guide: What is Conrod? A Brief Summary Screenshots and Videos Feature Overview Available Widgets Primitive Widgets Common Use Widgets Immediate Mode What is it? Why use it? Is Conrod Immediate or Retained? The Builder Pattern Getting Started Installing Rust and Cargo Running the Conrod Examples Let's Create a GUI Setup a Basic Window (using piston_window) Conrod Setup Instantiating Widgets Widget Positioning and Layout Using and Customising Themes What is a Theme? Custom Themes Serializing Themes Designing Custom Widgets (using the Widget trait) The Widget trait The widget_style! macro The builder_methods! macro Making a Button widget Custom Graphics and Window Backends Demonstration of Backend Implementation (using glium and glutin) Internals The Ui's Widget Graph Ui::set_widgets - How does it work? FAQ The Guide is a work-in-progress. If a section is not linked, it is likely not yet implemented. Current State We're just starting to reach a stable-ish API pattern! There will still be some large changes, however these are more likely to be new features than API overhauls. To get a clearer idea of where we're at see the issues and in particular, the 1.0.0 milestone. Contributing Want to help out? See Piston's how to contribute guide. License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contributions Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Example Assets Google Noto (Apache2) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PistonDevelopers/conrod/"	"— An easy-to-use, immediate-mode, 2D GUI library written entirely in Rust"	"true"
"GUI"	""	"https://travis-ci.org/PistonDevelopers/conrod"	"— An easy-to-use, immediate-mode, 2D GUI library written entirely in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— An easy-to-use, immediate-mode, 2D GUI library written entirely in Rust"	"true"
"GUI"	"servo/rust-cocoa"	"https://github.com/servo/cocoa-rs"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"192"	"27"	"50"	"GitHub - servo/cocoa-rs: Cocoa/Objective-C bindings for the Rust programming language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 192 Fork 50 servo/cocoa-rs Code Issues 2 Pull requests 1 Pulse Graphs Cocoa/Objective-C bindings for the Rust programming language 325 commits 3 branches 12 releases 40 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto backport-20150306 master Nothing to show v0.4.0 v0.3.4 v0.3.2 v0.3.1 v0.3.0 v0.2.5 v0.2.4 v0.2.1 v0.2.0 v0.1.5 v0.1.4 v0.1.3 Nothing to show New pull request Latest commit 520a755 Jul 11, 2016 bors-servo committed on GitHub Auto merge of #138 - burtonageo:NSImage, r=pcwalton … Add more NSImage methods, and add associated enums + string constants  Adds:  - most remaining NSImage methods,  - NSImage name and hint constants,  - NSCompositingOperation, NSImageCacheMode, NSTIFFCompression, NSImageLoadStatus  <!-- Reviewable:start --> --- This change is [<img src=""https://reviewable.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.io/reviews/servo/cocoa-rs/138) <!-- Reviewable:end --> Permalink Failed to load latest commit information. examples Delete no longer used value Sep 23, 2015 src Add more NSImage methods, and add associated enums + string constants Jul 10, 2016 tests Added basic NSFastEnumeration implementation Mar 31, 2016 .gitignore Cargoify rust-cocoa Aug 25, 2014 .travis.yml Remove now default 'sudo: false' Feb 27, 2016 COPYRIGHT Add license headers Apr 4, 2013 Cargo.toml Add NSData and associated constants Jul 3, 2016 LICENSE-APACHE Add license Apr 3, 2013 LICENSE-MIT Add license Apr 4, 2013 README.md add README Jun 6, 2016 README.md Cocoa-rs This crate provides Rust bindings to Cocoa for OSX. It's dual-licensed MIT / Apache 2.0. If you'd like to help improve cocoa-rs, check out the Servo contributing guide! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/servo/cocoa-rs"	""	"true"
"GUI"	"IUP"	"http://webserver2.tecgraf.puc-rio.br/iup/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"IUP - Portable User Interface <body> <p>This page uses frames, but your browser doesn&#39;t support them.</p> </body>"	"null"	"null"	""	"true"
"GUI"	"dcampbell24/iup-rust"	"https://github.com/dcampbell24/iup-rust"	"— IUP bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"19"	"4"	"8"	"GitHub - dcampbell24/iup-rust: Rust binding for IUP Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 19 Fork 8 dcampbell24/iup-rust Code Issues 11 Pull requests 0 Pulse Graphs Rust binding for IUP 101 commits 3 branches 0 releases 3 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master travis Nothing to show Nothing to show New pull request Latest commit 3daddd1 Oct 30, 2015 thelink2012 Merge pull request #30 from oli-obk/master … update iup to current rust Permalink Failed to load latest commit information. examples Closes #22 Jun 3, 2015 src update iup to current rust Oct 30, 2015 .gitignore prepare for publishing iup-sys on crates.io May 30, 2015 .travis.yml fix the documentation url Jun 1, 2015 Cargo.toml Add me Jun 2, 2015 LICENSE add license and readme Feb 7, 2015 README.md Update README.md Jun 5, 2015 README.md IUP Rust This library provides a high level wrapper around IUP, a multi-platform toolkit for building graphical user interfaces. See rust-iup-sys for low level bindings. IUP is a multi-platform toolkit for building graphical user interfaces. It's purpose is to allow a program to run in different systems without changes - the toolkit provides the application portability. Supported systems include: GTK+, Motif and Windows. IUP has some advantages over other interface toolkits available: Simplicity: due to the small number of functions and to its attribute mechanism, the learning curve for a new user is often faster. Portability: the same functions are implemented in each one of the platforms, thus assuring the interface system's portability. Customization: the dialog specification language (LED) is a mechanisms in which it is possible to customize an application for a specific user with a simple-syntax text file. Flexibility: its abstract layout mechanism provides flexibility to dialog creation. Extensibility: the programmer can create new interface elements as needed. The Rust binding provides a way to do things in a more Rustic way but without moving out of IUP base nameclatures and philosophy in such a way that one can program on this binding by reading the original IUP documentation. Documentation Click the link above or run cargo doc on this repository to view the documentation locally. Installation See rust-iup-sys for information on installing the IUP system libraries needed to use this library. After you have the IUP system libraries just add this to your Cargo.toml: [dependencies.iup] git = ""https://github.com/dcampbell24/iup-rust""  Contribute Contributions are welcome both in the form of ideas and of code. If you want to work on something, please open a issue to let others know what you are working on. If you are not sure what to work on, check our issues to see what must be worked on. If you find any issues with the library, please create a GitHub issue for it. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dcampbell24/iup-rust"	"— IUP bindings"	"true"
"GUI"	""	"https://travis-ci.org/dcampbell24/iup-rust"	"— IUP bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— IUP bindings"	"true"
"GUI"	"Kiss-ui"	"https://github.com/KISS-UI/kiss-ui"	"— a simple UI framework built on IUP"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"256"	"14"	"18"	"GitHub - KISS-UI/kiss-ui: A simple UI framework for Rust built on top of IUP (http://webserver2.tecgraf.puc-rio.br/iup/) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 256 Fork 18 KISS-UI/kiss-ui Code Issues 11 Pull requests 0 Pulse Graphs A simple UI framework for Rust built on top of IUP (http://webserver2.tecgraf.puc-rio.br/iup/) 102 commits 5 branches 0 releases 8 contributors Rust 99.9% Shell 0.1% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages guide iup-safe master panic_safety Nothing to show Nothing to show New pull request Latest commit a4a0487 Dec 5, 2015 cybergeek94 Merge pull request #46 from honorabrutroll/master … Update README.md with current documentation link Permalink Failed to load latest commit information. examples included set/get_name Jun 24, 2015 screenshots Add Linux screenshot of new image gen May 27, 2015 src Typo fix Jul 12, 2015 .gitignore Init repo Apr 26, 2015 .travis.yml Don Jul 8, 2015 Cargo.toml Use dcampbell's iup-sys from Crates Jun 1, 2015 LICENSE Initial commit Apr 26, 2015 README.md Update README.md with current documentation link Dec 4, 2015 SCREENSHOTS.md Update SCREENSHOTS.md May 27, 2015 build_docs.sh Import build_docs.sh from gh-pages branch Jul 3, 2015 kiss-app.manifest Minor fixes May 18, 2015 README.md KISS-UI A UI framework for Rust based on the KISS (Keep It Simple, Stupid!) philosophy. Powered by the IUP GUI library for C by Tecgraf, via the bindings created for iup-rust. (No relation to the equally awesome kiss3d.) Contents Documentation Usage Installing IUP Binaries Windows Linux OS X Comparison to Other UI Frameworks Enabling Visual Styles on Windows Documentation kiss-ui docs hosted on Github Pages Usage Simply add the following to your Cargo.toml: [dependencies.kiss-ui] git = ""https://github.com/cybergeek94/kiss-ui""  Import KISS-UI's macros and common types: #[macro_use] extern crate kiss_ui;  use kiss_ui::prelude::*; KISS-UI builds on all Rust release channels! Installing IUP Binaries You will need to install the IUP binaries for your system, which are available for download here. Consult the following for which files to download and where to install them. The specific steps depend on your platform and preferred method of linking: dynamic or static. PRs amending or adding instructions for any platform are very welcome. Windows Dynamic linking Navigate to Windows Libraries/Dynamic 32-bit: Download iup-3.14_Win32_dllw4_lib.zip 64-bit: Download iup-3.14_Win64_dllw4_lib.zip Extract all .dll files to a folder where the linker can find them (pick one): <Rust install>/bin/rustlib/<platform target>/lib/ (recommended) (using MinGW/MSYS) <MinGW/MSYS install>/usr/lib <Your cargo repository>/bin/<platform target> Copy the same DLLs to a folder in your PATH (pick one): <Rust install>/bin/ (recommended) Create a folder anywhere and add it to your PATH. Add one of the folders from step 2 to your PATH. You should NEVER place arbitrary files in your Windows install folder, no matter how benign. Static Linking Static linking with IUP on Windows is not currently possible as it requires resource scripts (.rc) files from IUP to be compiled and linked in, which Rust does not currently support. Linux The Linux binary packages for IUP include both static and dynamic libraries. While efforts are underway to create up-to-date packages for various distributions' package managers, the currently most well supported methods of obtaining IUP binaries are to either compile them from source or download precompiled binaries from the creators. Compile from Source To compile from source, see this page. The instructions to check-out the source tree are available here. If you understand how to build projects with Makefiles, then it shouldn't be too difficult. Download the Precompiled Binaries However, if you would rather download the precompiled binaries, begin by going to the download page. Navigate to the Linux Libraries folder. Identify your kernel version. This can be done by entering the command uname -r into a terminal. If you don't know if your Linux is 32-bit or 64-bit, use the command uname -a and look for the following: x86_64: Your system is 64-bit. x86: Your system is 32-bit. Select and download the tarball for your kernel version and bit-arity. For 32-bit (x86), there is only one package: iup-3.14_Linux32_lib.tar.gz For 64-bit (x86_64), select one of the following based on your kernel version: >= 3.19: iup-3.14_Linux319_64_lib.tar.gz >= 3.13: iup-3.14_Linux313_64_lib.tar.gz >= 3.5: iup-3.14_Linux35_64_lib.tar.gz >= 3.2: iup-3.14_Linux32_64_lib.tar.gz 2.6: iup-3.14_Linux26g4_64_lib.tar.gz Navigate to the folder where you downloaded the tarball to in a terminal. Extract the tarball: mkdir iup_libs/ tar -xzvf <tarball file> -C iup_libs/ Install the binaries: cd iup_libs/ (The install script must be run in its folder.) You can run either, or both, of the following two commands: To install the dynamic libraries: sudo ./install To install the static libraries: sudo ./install_dev Follow the prompts in the installer. Once the installer completes, you are finished. If you later want to uninstall IUP, open that iup_libs/ folder in a terminal and run sudo ./uninstall. Otherwise, you may now delete the tarball and/or the iup_libs/ folder. OS X Before you install IUP, you need to install GTK+. (An IUP driver for Cocoa was under development, but as of 7/5/2015 is not being worked on.) You can use version 2.x or 3.x, IUP will work with both. To install GTK+ 2: brew install gtk+  To install GTK+ 3: brew install gtk+3  Note: if you have troubles building after installing GTK+ 3, please consult this StackOverflow answer. Once GTK+ is installed, you can download and install the precompiled Mac OS X IUP binary available here. It appears the only download available is for OS X 10.10 64-bit. Once you have downloaded the tarball, the installation process should be equivalent to Linux's starting at Step 4. Comparison to Other UI Frameworks NOTE: This list is far from exhaustive and may contain outdated information. Pull requests for corrections and additions are welcome! KISS-UI Build Status: Supported Platforms: Windows (using Win32 APIs), Linux and Mac (using GTK+) Native Look and Feel: Yes ""Hello, World!"" LOC: 18 External Crates: 2 External Native Libs: 1 PistonDevelopers/conrod Build Status: Supported Platforms: Windows, Mac, Linux Native Look and Feel: No ""Hello, World!"" LOC: 40 (estimated based on linked example) External Crates: 9 (not including testing crates and transitive dependencies) External Native Libs: ~0 (depends on backend used) rust-gnome/gtk Build Status: Supported Platforms: Windows, Mac, Linux Native Look and Feel: Yes ""Hello, World!"" LOC: 23 External Crates: 10 (1 local but pulled from Crates.io) External Native Libs: ~5 (installed on most Linux distros/external on Windows, Mac) Lines of code should be listed based on the # sloc stat on the Github file page. The raw linecount includes empty lines, which can arbitrarily affect the linecount. Enabling Visual Styles on Windows Since Rust/Cargo currently do not support adding resource items to executables, Windows XP and later need an external manifest file to enable visual styles in KISS-UI applications. Otherwise the visual style will be Windows Classic. However, we have made this very simple to do! Simply copy the kiss-app.manifest file from this repo into the folder of your KISS-UI based executable, rename the file to <executable name>.manifest (including the .exe extension, e.g. my_executable.exe.manifest), and run the executable as-is. You may need to delete and replace or rebuild the executable for this to take effect, as Windows appears to cache manifest file data, likely to avoid reparsing it on each run. Optionally, you can edit the name= and the <description> values in the manifest file, using any text editor. However, it is unclear to the author what these actually affect. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/KISS-UI/kiss-ui"	"— a simple UI framework built on IUP"	"true"
"GUI"	""	"https://travis-ci.org/cybergeek94/kiss-ui"	"— a simple UI framework built on IUP"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a simple UI framework built on IUP"	"true"
"GUI"	"GTK+"	"http://www.gtk.org"	"[]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"The GTK+ Project The GTK+ Project About Features Download Screenshots Documentation Development Support News Feed Follow the GTK+ project on: blog | Twitter | identi.ca | Google+ What is GTK+, and how can I use it? GTK+, or the GIMP Toolkit, is a multi-platform toolkit for creating graphical user interfaces. Offering a complete set of widgets, GTK+ is suitable for projects ranging from small one-off tools to complete application suites. Where can I use it? Everywhere! GTK+ is cross-platform and boasts an easy to use API, speeding up your development time. Take a look at the screenshots to see a number of platforms GTK+ will run. What languages are supported? GTK+ is written in C but has been designed from the ground up to support a wide range of languages, not only C/C++. Using GTK+ from languages such as Perl and Python (especially in combination with the Glade GUI builder) provides an effective method of rapid application development. Are there any licensing restrictions? GTK+ is free software and part of the GNU Project. However, the licensing terms for GTK+, the GNU LGPL, allow it to be used by all developers, including those developing proprietary software, without any license fees or royalties. Get an overview of GTK+. Understand who started it, the basic architecture and why we use the license we do. GTK+ has been involved in many projects and some big platforms. To get a glimpse of what people think of GTK+ and how it has been used in commercial projects, read the success stories... To find out how more about what GTK+ can do for you, visit our features page. If you want to contribute, you are more than welcome. Copyright © 2007-2016 The GTK+ Team | Valid XHTML and CSS"	"null"	"null"	"[]"	"true"
"GUI"	"gtk"	"https://crates.io/keywords/gtk"	"[]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[]"	"true"
"GUI"	"gtk-rs/gtk"	"https://github.com/gtk-rs/gtk"	"— GTK+ bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"312"	"25"	"42"	"GitHub - gtk-rs/gtk: GTK+ 3.x bindings and wrappers for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 312 Fork 42 gtk-rs/gtk Code Issues 21 Pull requests 3 Pulse Graphs GTK+ 3.x bindings and wrappers for Rust http://gtk-rs.org/ 1,568 commits 3 branches 1 release 46 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags crate gkoz-patch-1 master Nothing to show v0.0.7 Nothing to show New pull request Latest commit fe14338 Jun 14, 2016 gkoz committed on GitHub Merge pull request #361 from GuillaumeGomez/versions … Update sys crates version Permalink Failed to load latest commit information. gir @ 4d68d19 Update gir submodule May 14, 2016 gir-files @ 11e0e6d Add gir and gir-files submodules and implement `make gir` Jan 17, 2016 resources Clean up the readme Jan 26, 2016 src Add popup method for Menu Jun 10, 2016 .gitignore Add gir and gir-files submodules and implement `make gir` Jan 17, 2016 .gitmodules Add gir and gir-files submodules and implement `make gir` Jan 17, 2016 .travis.yml Travis: update examples url Mar 2, 2016 CHANGELOG.md Bump versions Apr 7, 2016 COPYRIGHT Update authors Jun 11, 2016 Cargo.toml Update sys crates version Jun 14, 2016 Gir.toml regen Jun 5, 2016 LGPL Update the authors list and add the LGPL file Apr 16, 2015 LICENSE Fix the copyright line Nov 27, 2015 Makefile Rewrite makefile to use `cargo install` Apr 19, 2016 README.md Fix cargo features syntax and add `cargo doc` example Jun 3, 2016 appveyor.yml Update rust version in appveyor script Jun 7, 2016 build.rs lgpl-docs API update Mar 14, 2016 check_init_asserts Make the check_init_asserts script more robust and readable Apr 21, 2016 rust_setup.png Add HowTo for using the msys2 toolchain in README Jan 3, 2016 README.md gtk Project site | Online documentation Rust bindings and wrappers for GLib, GDK 3, GTK+ 3 and Cairo. Building gtk expects GTK+, GLib and Cairo development files to be installed on your system. See the requirements page. Using We recommend using crates from crates.io, as demonstrated here. If you want to track the bleeding edge, use the git dependency instead: [dependencies] gtk = { git = ""https://github.com/gtk-rs/gtk.git"" } Avoid mixing versioned and git crates like this: # This will not compile [dependencies] gdk = ""0.2"" gtk = { git = ""https://github.com/gtk-rs/gtk.git"" } Documentation The majority of the documentation is kept in a separate repo due to licensing issues. You can pull it in with cargo: > cargo build --features embed-lgpl-docs Changes to those doc-comments should be submitted to the lgpl-docs repo. Avoid including those embedded doc-comments in PRs to this repo. The opposite feature removes all of those docs regardless of edits: > cargo build --features purge-lgpl-docs These features rewrite the crate sources so it's sufficient to enable them once. Omitting them in the following cargo invocations will not undo their effects! Generate the docs: > cargo doc --features v3_16 (if the installed GTK+ version is lower than 3.16, adjust the feature name accordingly). Contribute Contributor you're welcome! See the general bindings documentation. Most of the bindings (src/auto) are generated by gir using this configuration file. After editing Gir.toml the sources can be regenerated with > make gir When opening a PR please put the changes to the src/auto directory in a separate commit. License gtk is available under the MIT License, please refer to it. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gtk-rs/gtk"	"— GTK+ bindings"	"true"
"GUI"	""	"https://travis-ci.org/gtk-rs/gtk"	"— GTK+ bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— GTK+ bindings"	"true"
"GUI"	"libui"	"https://github.com/andlabs/libui"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3460"	"155"	"158"	"GitHub - andlabs/libui: Simple and portable (but not inflexible) GUI library in C that uses the native GUI technologies of each platform it supports. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 155 Star 3,460 Fork 158 andlabs/libui Code Issues 68 Pull requests 15 Pulse Graphs Simple and portable (but not inflexible) GUI library in C that uses the native GUI technologies of each platform it supports. 2,685 commits 1 branch 4 releases 10 contributors C 37.9% C++ 35.9% Objective-C 24.7% CMake 1.5% C C++ Objective-C CMake Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show alpha3.1 alpha3 alpha2 alpha1 Nothing to show New pull request Latest commit d93bb2c Jun 21, 2016 andlabs Formatting fixes. Permalink Failed to load latest commit information. _wip Added uiGrid on OS X. Now to fix build errors. Jun 11, 2016 common Quick fix in the meantime. Jun 13, 2016 darwin Made alignment work on uiGrid on OS X. Jun 18, 2016 doc More documentation stuff. Jun 16, 2016 examples Expanded the control gallery a bit further. Jun 17, 2016 test Formatting fixes. Jun 21, 2016 unix Stop uiProgressBar pulsing on destroy on GTK+. Fixes #163. Jun 21, 2016 windows Added uiNewVerticalSeparator(). Jun 17, 2016 .travis.yml Round 3 Jun 17, 2016 ANNOUNCE.md Split old announcements and updates out. Jun 9, 2016 CMakeLists.txt More TODOs. Jun 17, 2016 Changelog.md Split old announcements and updates out. Jun 9, 2016 Compatibility.md More future plans. Jun 12, 2016 LICENSE Split into a new repository and added a LICENSE. Apr 16, 2015 README.md More announcements. Jun 18, 2016 TODO.md More TODOs. Jun 17, 2016 oldhaiku.tgz Discontinued the Haiku port for now. Apr 24, 2016 ui.h Started mapping out uiTable and uiTree. Jun 20, 2016 ui_darwin.h Added a facility to the OS X port to be notified when a child's visib… Jun 14, 2016 ui_unix.h Implemented uiGrid on GTK+. Jun 9, 2016 ui_windows.h Implemented visibility change detection on Windows. Now to refine the… Jun 14, 2016 uitable.h Stop uiProgressBar pulsing on destroy on GTK+. Fixes #163. Jun 21, 2016 README.md libui: a portable GUI library for C This README is being written. Announcements 18 June 2016 Help decide the design of tables and trees in libui; the implementation starts within the next few days, if not tomorrow! 17 June 2016 CMake 3.1.0 is now required. This is due to CMake's rapid development pace in the past few years adding things libui needs to build on as many systems as possible. If your OS is supported by libui but its repositories ship with an older version of CMake, you will need to find an updated one somewhere. Please help plan out a better menu API. 5 June 2016 Alpha 3.1 is here. This was a much-needed update to Alpha 3 that changes a few things: The build system is now cmake. cmake 2.8.11 or higher is needed. Static linking is now fully possible. MinGW linking is back, but static only. Old announcements can be found in the ANNOUNCE.md file. Updates Note that today's entry (Eastern Time) may be updated later today. 17 June 2016 uiMainSteps() no longer takes any arguments and no longer needs to invoke a function to do the work. You still need to call it, but once you do, it will return immediately and you can then get right to your main loop. CMake 3.1.0 is now required. This is due to CMake's rapid development pace in the past few years adding things libui needs to build on as many systems as possible. If your OS is supported by libui but its repositories ship with an older version of CMake, you will need to find an updated one somewhere. Added uiNewVerticalSeparator() to complement uiNewHorizontalSeparator(). 16 June 2016 Added uiWindowContentSize(), uiWindowSetContentSize(), and uiWindowOnContentSizeChanged() methods for manipulating uiWindow content sizes. Note the use of ""content size""; the size you work with does NOT include window decorations (titlebars, menus, etc.). Added uiWindowFullscreen() and uiWindowSetFullscreen() to allow making fullscreen uiWindows, taking advantage of OS facilities for fullscreen and without changing the screen resolution (!). Added uiWindowBorderless() and uiWindowSetBorderless() for allowing borderless uiWindows. Added uiMainSteps(). You call this instead of uiMain() if you want to run the main loop yourself. You pass in a function that will be called; within that function, you call uiMainStep() repeatedly until it returns 0, doing whatever you need to do in the meantime. (This was needed because just having uiMainStep() by itself only worked on some systems.) Added uiProgressBarValue() and allowed passing -1 to uiProgressBarSetValue() to make an indeterminate progress bar. Thanks to @emersion. 15 June 2016 Added uiFormDelete(); thanks to @emersion. Added uiWindowPosition(), uiWindowSetPosition(), uiWindowCenter(), and uiWindowOnPositionChanged(), methods for manipulating uiWindow position. 14 June 2016 uiDarwinControl now has a ChildVisibilityChanged() method and a corresponding NotifyVisibilityChanged() function that is called by the default show/hide handlers. This is used to make visibility changes work on OS X; uiBox, uiForm, and uiGrid all respect these now. The same has been done on the Windows side as well. Hiding and showing controls and padding calculations are now correct on Windows at long last. Hiding a control in a uiForm now hides its label on all platforms. 13 June 2016 intmax_t and uintmax_t are no longer used for libui API functions; now we use int. This should make things much easier for bindings. int should be at least 32 bits wide; this should be sufficient for all but the most extreme cases. 12 June 2016 Added uiGrid, a new container control that arranges controls in rows and columns, with stretchy (""expanding"") rows, stretchy (""expanding"") columns, cells that span rows and columns, and cells whose content is aligned in either direction rather than just filling. It's quite powerful, is it? =P 8 June 2016 Added uiForm, a new container control that arranges controls vertically, with properly aligned labels on each. Have fun! 6 June 2016 Added uiRadioButtonsSelected(), uiRadioButtonsSetSelected(), and uiRadioButtonsOnSelected() to control selection of a radio button and catch an event when such a thing happens. 5 June 2016 Added uiNewPasswordEntry(), which creates a new uiEntry suitable for entering passwords. Added uiNewSearchEntry(), which creates a new uiEntry suitable for searching. On some systems, the OnChanged() event will be slightly delayed and/or combined, to produce a more natural feel when searching. Old updates can be found in the Changelog.md file. Runtime Requirements Windows: Windows Vista SP2 with Platform Update or newer Unix: GTK+ 3.10 or newer Mac OS X: OS X 10.8 or newer Build Requirements All platforms: CMake 3.1.0 or newer Windows: either Microsoft Visual Studio 2013 or newer (2013 is needed for va_copy()) — you can build either a static or a shared library MinGW-w64 (other flavors of MinGW may not work) — you can only build a static library; shared library support will be re-added once the following features come in: Isolation awareness, which is how you get themed controls from a DLL without needing a manifest Unix: nothing else specific Mac OS X: nothing else specific, so long as you can build Cocoa programs Building Out-of-tree builds typical of cmake are preferred: $ # you must be in the top-level libui directory, otherwise this won't work $ mkdir build $ cd build $ cmake ..  Pass -DBUILD_SHARED_LIBS=OFF to cmake to build a static library. The standard cmake build configurations are provided; if none is specified, Debug is used. If you use a makefile generator with cmake, then $ make $ make tester         # for the test program $ make examples       # for examples  and pass VERBOSE=1 to see build commands. Build targets will be in the build/out folder. Project file generators should work, but are untested by me. On Windows, I use the Unix Makefiles generator and GNU make (built using the build_w32.bat script included in the source and run in the Visual Studio command line). In this state, if MinGW-w64 (either 32-bit or 64-bit) is not in your %PATH%, cmake will use MSVC by default; otherwise, cmake will use with whatever MinGW-w64 is in your path. set PATH=%PATH%;c:\msys2\mingw(32/64)\bin should be enough to temporarily change to a MinGW-w64 build for the current command line session only if you installed MinGW-w64 through MSYS2; no need to change global environment variables constantly. Installation Arch Linux Can be built from AUR: https://aur.archlinux.org/packages/libui-git/ Documentation Needs to be written. Consult ui.h and the examples for details for now. Language Bindings libui was originally written as part of my package ui for Go. Now that libui is separate, package ui has become a binding to libui. As such, package ui is the only official binding. Other people have made bindings to other languages: Language Bindings C#/.net LibUI.Binding, SharpUI Crystal libui.cr D DerelictLibui Euphoria libui-euphoria Haskell libui-haskell JavaScript libui.js (merged into libui-node?) Julia Libui.jl Lua libuilua, libui-lua Nim ui Node.js libui-node Python pylibui Ruby libui-ruby Rust libui-rs Screenshots From examples/controlgallery: Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/andlabs/libui"	""	"true"
"GUI"	"pcwalton/libui-rs"	"https://github.com/pcwalton/libui-rs"	"— libui bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"77"	"18"	"4"	"GitHub - pcwalton/libui-rs: Rust bindings to the minimalist, native, cross-platform UI toolkit `libui` Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 77 Fork 4 pcwalton/libui-rs Code Issues 4 Pull requests 3 Pulse Graphs Rust bindings to the minimalist, native, cross-platform UI toolkit `libui` 13 commits 1 branch 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 13299d2 May 23, 2016 pcwalton Factor into a `-sys` crate and build `libui` ourselves Permalink Failed to load latest commit information. ui-sys Factor into a `-sys` crate and build `libui` ourselves May 23, 2016 ui Factor into a `-sys` crate and build `libui` ourselves May 24, 2016 .gitmodules Factor into a `-sys` crate and build `libui` ourselves May 24, 2016 LICENSE-APACHE Factor into a `-sys` crate and build `libui` ourselves May 24, 2016 LICENSE-MIT Factor into a `-sys` crate and build `libui` ourselves May 24, 2016 README.md Factor into a `-sys` crate and build `libui` ourselves May 24, 2016 README.md These are work-in-progress Rust bindings to the minimalistic native UI library libui. Author: Patrick Walton (@pcwalton) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pcwalton/libui-rs"	"— libui bindings"	"true"
"GUI"	""	"https://travis-ci.org/pcwalton/libui-rs"	"— libui bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— libui bindings"	"true"
"GUI"	"ncurses"	"http://www.gnu.org/software/ncurses/"	"[]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Announcing ncurses 6.0 - GNU Project - Free Software   Foundation (FSF) Announcing ncurses 6.0 Overview The ncurses (new curses) library is a free software emulation of curses in System V Release 4.0 (SVr4), and more. It uses terminfo format, supports pads and color and multiple highlights and forms characters and function-key mapping, and has all the other SVr4-curses enhancements over BSD curses. SVr4 curses is better known today as X/Open Curses. In mid-June 1995, the maintainer of 4.4BSD curses declared that he considered 4.4BSD curses obsolete, and encouraged the keepers of unix releases such as BSD/OS, FreeBSD and NetBSD to switch over to ncurses. Since 1995, ncurses has been ported to many systems: It is used in almost every system based on the Linux kernel (aside from some embedded applications). It is used as the system curses library on OpenBSD, FreeBSD and OSX. It is used in environments such as Cygwin and MinGW. The first of these was EMX on OS/2 Warp. It is used (though usually not as the system curses) on all of the vendor unix systems, e.g., AIX, HP-UX, IRIX64, SCO, Solaris, Tru64. It should work readily on any ANSI/POSIX-conforming unix. The distribution includes the library and support utilities, including captoinfo, a termcap conversion tool clear, utility for clearing the screen infocmp, the terminfo decompiler tabs, set tabs on a terminal tic, the terminfo compiler toe, list (table of) terminfo entries tput, utility for retrieving terminal capabilities in shell scripts tset, to initialize the terminal Full manual pages are provided for the library and tools. The ncurses distribution is available via anonymous FTP at the GNU distribution site ftp://ftp.gnu.org/gnu/ncurses/ http://ftp.gnu.org/gnu/ncurses/ It is also available at ftp://invisible-island.net/ncurses/ http://invisible-mirror.net/archives/ncurses/ Release Notes These notes are for ncurses 6.0, released August 8, 2015. This release is designed to be source-compatible with ncurses 5.0 through 5.9; providing a new application binary interface (ABI). Although the source can still be configured to support the ncurses 5 ABI, the intent of the release is to provide extensions which are generally useful, but binary-incompatible with ncurses 5: Extend the cchar_t structure to allow more than 16 colors to be encoded. Modify the encoding of mouse state to make room for a 5th mouse button. That allows one to use ncurses with a wheel mouse with xterm or similar X terminal emulators. There are, of course, numerous other improvements, including fixes made based on the Clang and Coverity static analyzers. memory leak fixes using Valgrind The release notes mention some bug-fixes, but are focused on new features and improvements to existing features log since ncurses 5.9 release. While the intent of the release is to provide a new stable ABI, there are other development activities which are summarized below. The original release plan, e.g., for ""5.10"" was to improve the MinGW port. Ultimately that was completed (wide-character support, mouse, etc), but was deferred to focus on termcap support and performance issues. Also, pinpointing the problems with Console2 took a while. A review of termcap compatibility in 2011 led to several minor fixes in the library and improvements to utilities. To do this properly, a review of the various extent termcap implementations was needed. The termcap library checker (tctest) (not part of ncurses) was one result. A followup review of performance using ncurses-examples in 2014 led to additional improvements. Output buffering provided a further, but worthwhile distraction. A bug report in 2012 regarding the use of signal handlers in ncurses) pointed out a problem with the use of unsafe functions for handling SIGTSTP. Other signals could be addressed with workarounds; repairing SIGTSTP required a different approach. The solution required changing internal behavior of the library: how it handles output buffering. Now ncurses buffers its own output, independently of the standard output. A few applications relied upon the library's direct reuse of the standard output buffering; however that is unspecified behavior and has never been a recommended practice. Identifying these applications as well as refining the change to permit low-level applications to work consistently took time. Since the introduction of the experimental support for 256 colors early in 2005 (released in ncurses 5.5), there has been increased user interest. Almost all packagers continue providing the ncurses ABI 5 which cannot support 256 colors. Symbol versioning, or the lack of it in ncurses, is the main reason why packagers would be reluctant to add a new ncurses ABI. This release provides the new ABI along with script-generated lists of versioned symbols which can be used for both ABI 5 and 6 (with distinct names to keep the two separate). This took time to development, as reported in Symbol versioning in ncurses. Library improvements Output buffering X/Open curses provides more than one initialization function: initscr (the simplest) accepts no parameters. newterm accepts parameters for the stream input and output setupterm (the low-level function) accepts a parameter for the file descriptor of the output. They are documented in X/Open as if initscr calls newterm using stdout for output stream, and in turn newterm calls setupterm using fileno(stdout) for the file descriptor. As long as an implementation acts as if it does this, it conforms. In practice, implementations do what is implied. This creates a problem: the low-level setupterm function's file descriptor is unbuffered, while newterm implies buffered output. X/Open Curses says that all output is done through the file descriptor, and does not say how the output stream is actually used. Initially, ncurses used the file descriptor (obtained from the output stream passed to newterm) for changing the terminal modes, and relied upon the output parameter of newterm for buffered output. Later (to avoid using unsafe buffered I/O in signal handlers), ncurses was modified to use the file descriptor (unbuffered output) when cleaning up on receipt of a signal. Otherwise (when not handling a signal), it continued to use the buffered output. That approach worked reasonably well and as a side effect, using the same buffered output as an application might use for printf meant that no flushing was needed when switching between normal- and screen-modes. There were a couple of problems: to get good performance, curses (not only ncurses, but SVr4 curses in general) set an output buffer using setbuf or similar function. There is no standard (or portable) way to turn that output buffer off, and revert to line-buffering. The NCURSES_NO_SETBUF environment variable did make it optional. to handle SIGTSTP (the “stop” signal), ncurses relied upon unsafe functions. That is, due to the complexity of the feature, it relied upon reusing existing functions which should not have been called via the signal handler. Conveniently, solving the second problem (by making ncurses do its own output buffering) also fixed the first one. But there were special cases to resolve: low-level functions such as mvcur, putp, vidattr explicitly use the standard output. Those functions were reused internally, and required modification to distinguish whether they were used by the high-level or low-level interfaces. Finally, there may still be a few programs which should be modified to improve their portability, e.g., adding an  fflush(stdout);  when switching from “shell” mode to “program” (curses) mode. Those are fairly rare because most programmers have learned not to mix printf and printw. Symbol versioning This release introduces symbol-versioning to ncurses because without it, the change of ABI would be less successful. A lengthy discussion will be presented in Symbol versioning in ncurses. These notes summarize what has changed, and what can be done with the new release. Symbol-versioning allows the developers of a library to mark each public symbol (both data and functions) with an identifier denoting the library name and the version for which it was built. By doing this, users of the library have a way to help ensure that applications do not accidentally load an incompatible library. In addition, private symbols can be hidden entirely. This release provides sample files for the four principal configurations of ncurses libraries: ncurses, ncursesw, ncursest and ncursestw. Each sample is given in two forms: “.map” These list all public symbols, together with version names. “.sym” These list all public symbols, without version names. The sample files are generated by scripts which take into account a few special cases such as tack to omit many of the ncurses private symbols (beginning with “_nc_”). Here are counts of globals versus locals: Config Symbols Globals Locals ""_nc_"" ncurses 976 796 180 332 ncursesw 1089 905 184 343 ncursest 979 804 175 358 ncursestw 1098 914 184 372 Although only four sample configurations are presented, each is formed by merging symbols from several combinations of configure-script options, taking into account advice from downstream packagers. Because they are formed by merging, the sample files may list a symbol which is not in a given package. That is expected. The samples have been tested and are working with systems (such as Fedora, FreeBSD and Debian) which fully support this feature. There are other systems which do not support the feature, and a few (such as Solaris) which provide incomplete support. The version-naming convention used allows these sample files to build distinct libraries for ABI 5 and 6. Version names consist of configuration name, e.g., “NCURSESW” for the wide-character libraries ABI version (if not 5) library name for two special cases which have the same interface across configurations: “TINFO” and “TIC” release version patch date (for the release version) For example, running nm -D on the libraries in the ncurses6 test package shows these symbol-versions:  0000000000000000 A NCURSES6_TIC_5.0.19991023 0000000000000000 A NCURSES6_TIC_5.1.20000708 0000000000000000 A NCURSES6_TIC_5.5.20051010 0000000000000000 A NCURSES6_TIC_5.7.20081102 0000000000000000 A NCURSES6_TIC_5.9.20150530 0000000000000000 A NCURSES6_TINFO_5.0.19991023 0000000000000000 A NCURSES6_TINFO_5.1.20000708 0000000000000000 A NCURSES6_TINFO_5.2.20001021 0000000000000000 A NCURSES6_TINFO_5.3.20021019 0000000000000000 A NCURSES6_TINFO_5.4.20040208 0000000000000000 A NCURSES6_TINFO_5.5.20051010 0000000000000000 A NCURSES6_TINFO_5.6.20061217 0000000000000000 A NCURSES6_TINFO_5.7.20081102 0000000000000000 A NCURSES6_TINFO_5.8.20110226 0000000000000000 A NCURSES6_TINFO_5.9.20150530 0000000000000000 A NCURSESW6_5.1.20000708 0000000000000000 A NCURSESW6_5.3.20021019 0000000000000000 A NCURSESW6_5.4.20040208 0000000000000000 A NCURSESW6_5.5.20051010 0000000000000000 A NCURSESW6_5.6.20061217 0000000000000000 A NCURSESW6_5.7.20081102 0000000000000000 A NCURSESW6_5.8.20110226 0000000000000000 A NCURSESW6_5.9.20150530  As a special case, this release (which makes the final change for ABI 5) is marked with release version 5.9 and patch date 20150530. Miscellaneous The new release has several improvements for performance and building. For instance: several files in ncurses- and progs-directories were modified to allow const data used in internal tables to be put by the linker into the readonly text segment. various improvements were made to building the Ada95 binding, both in simplifying the generated files as well as improving the way it uses gnatmake There are also new features in the libraries: added use_tioctl function added wgetdelay to retrieve _delay member of WINDOW if it happens to be opaque, e.g., in the pthread configuration. added A_ITALIC extension. added form library extension O_DYNAMIC_JUSTIFY option which can be used to override the different treatment of justification for static versus dynamic fields . rewrote putwin and getwin, making an extended version which is capable of reading screen-dumps between the wide/normal ncurses configurations. These are text files, except for a magic code at the beginning:  0       string          \210\210        Screen-dump (ncurses)  several changes to mouse support include: added decoder for xterm SGR 1006 mouse mode. added experimental support for “%u” format to terminfo. improved behavior of wheel-mice for xterm protocol: noting that there are only button-presses for buttons “4” and “5”, so there is no need to wait to combine events into double-clicks . There are a few new configure options dealing with library customization: add “--enable-ext-putwin” configure option to turn on the extended putwin/getwin. By default, this is enabled for ABI 6 and disabled with ABI 5. add “--enable-string-hacks” option to control whether strlcat and strlcpy may be used. Because ncurses already does the requisite buffer-limit checks, this feature is mainly of interest to quiet compiler-warnings on a few systems. add configure option “--with-tparm-arg” to allow tparm's parameters to be something more likely to be the same size as a pointer, e.g., intptr_t (again, the default is set for ABI 6). Program improvements Utilities Most of the termcap-related changes based on development of tctest (termcap library checker) are implemented in the tic and infocmp programs rather than affecting the library. As noted in the discussion of tctest, ncurses's ability to translate between terminfo and termcap formats has been improved at different times, but subject to feedback from ""real"" termcap users. There are very few of those. Nowadays, virtually all termcap users are using ncurses (or NetBSD, with its own terminfo library) and their programs are actually using terminfo rather than termcap data. Still, there are a few. A comment about the translation of the ASCII NUL character prompted a review: Both terminfo and termcap store string capabilities as NUL-terminated strings. In terminfo, a \0 in a terminal description is stored as \200. There are no (known) terminals which would behave differently when sent \0 or \200. When translating to terminfo format (or displaying a printable version of an entry using infocmp), ncurses shows \200 as \0. It has done this since 1998 (quoting from the NEWS file):  980103 ...         + modify _nc_tic_expand() to generate \0 rather than \200. ...         + correct translation of terminfo ""^@"", to \200, like \0.  However, the _nc_tic_expand function (which optionally produces terminfo or termcap format) did not address this special case for termcap. Even the later 4.4BSD cgetstr interprets a \0 literally, ending that string (rather than using the terminfo improvement). As a result of the review, several improvements were made to ncurses translation to/from termcap format — and improving the checks made in tic for consistency of entries. Most of these are not of general interest, except for two new command-line options for tic and infocmp: the “-0” option generates termcap/terminfo source on a single line. the “-K” option provides stricter BSD-compatibility for termcap output. Other user-visible improvements and new features include: added “-D” option to tic and infocmp, to show the database locations that it could use. added “-s” option to toe, to sort its output. extended “-c” and “-n” options of infocmp to allow comparing more than two entries. modified toe's report when “-a” and “-s” options are combined, to add a column showing which entries belong to a given database. modified the clear program to take into account the “E3” extended capability to clear the terminal's scrollback buffer. Examples Along with the library and utilities, many improvements were made to the ncurses-examples. Some were made to allow building (and comparison-testing) against NetBSD curses and PDCurses. Both lack some of the X/Open Curses features, necessitating customization. But this activity was useful because it showed some remaining performance issues (which have been resolved in this release). These changes were made to verify compatibility or compare performance of ncurses: made workarounds for compiling test-programs with NetBSD curses, though it lacks some common functions such as use_env. added dots_termcap test-program added dots_curses test-program, for comparison with the low-level examples. added test_setupterm test-proram to demonstrate normal/error returns from the setupterm and restartterm functions. added “-d”, “-e” and “-q” options to the demo_terminfo and demo_termcap test-programs. added “-y” option to demo_termcap and test/demo_terminfo test-programs to demonstrate behavior with/without extended capabilities. modified demo_termcap and demo_terminfo test-programs to make their options more directly comparable, and add “-i” option to specify a terminal description filename to parse for names to lookup. rewrote the tests for mvderwin and test for recursive mvwin in the movewindow test-program. These changes were made to help with the MinGW port: added test-screens to the ncurses test-program to show 256-characters at a time, to help with MinGW port. modified the view test-program to load UTF-8 when built with MinGW by using regular win32 API because the MinGW functions mblen and mbtowc do not work. added “-s” option to the view test-program to allow it to start in single-step mode, reducing size of trace files when it is used for debugging MinGW changes. These changes were made to verify new extensions in ncurses: added form_driver_w entrypoint to wide-character forms library, as well as form_driver_w test-program. modified ncurses test-program's b/B tests to display lines only for the attributes which a given terminal supports, to make room for an italics test. modified ncurses test-program, adding “-E” and “-T” options to demonstrate use_env versus use_tioctl. modified ncurses test-program's c/C tests to cycle through subsets of the total number of colors, to better illustrate 8/16/88/256-colors by providing directly comparable screens. modified the ncurses test-program to also show position reports in 'a' test. These changes were made to make the examples more useful: added scripts for building dpkg and rpm test-packages modified the hanoi test-program to show the minimum number of moves possible for the given number of tiles. modified the knight test-program to show the number of choices possible for each position in automove option, e.g., to allow user to follow Warnsdorff's rule to solve the puzzle. Terminal database This release provides improvements to tic's “-c” checking option, which was used for example to make sgr in several entries agree with other caps. correct padding in some entries where earlier versions had miscounted the number of octal digits. There are several new terminal descriptions: mlterm is now aliased to mlterm3 nsterm is now derived from nsterm-256color putty-sco teken is FreeBSD's ""xterm"" console. terminator terminology tmux is derived from screen. several screen.XXX entries support the respective variations for 256 colors. simpleterm is now 0.5 vte is aliased to vte-2012 vt520ansi A few entries use extensions (user-defined terminal capabilities): E3, used in linux, putty and xterm-basic is tested in the clear program to erase a terminal's scrollback. TS is used in the xterm+sl building block to help deprecate the misuse of tsl for xterm's title-string. XT is used in some terminfo entries to improve usefulness for other applications than screen, which would like to pretend that xterm's title is a status-line. xm is used in examples xterm-1005 and xterm-1006 to illustrate a way to make mouse handling more general A few terminals support italics and/or dim capabilities. In particular, screen does not. Documented that, and accommodated the terminals where this feature works with the A_ITALIC extension. konsole, mlterm3 (italics) nsterm (dim) screen (dim) vte (dim, italics) xterm (dim, italics) Documentation As usual, this release improves documentation by describing new features, attempts to improve the description of features which users have found confusing fills in overlooked descriptions of features which were described in the NEWS file but treated sketchily in manual pages. In addition, the mechanism for producing HTML versions of the documentation has been improved: use an improved version of man2html to generate html manpages. regenerated NCURSES-Programming-HOWTO.html to fix some of the broken html emitted by docbook. Interesting bug-fixes Ada95 binding: modify makefile rules to ensure that the PIC option is not used when building a static library make Ada95 build-fix for big-endian architectures such as sparc. This undoes one of the fixes from 20110319, which added an “Unused” member to representation clauses, replacing that with pragmas to suppress warnings about unused bits. Color and attributes: parenthesize parameter of COLOR_PAIR and PAIR_NUMBER in curses.h in case it happens to be a comma-expression. improve 20021221 workaround for broken acs, handling a case where that ACS_xxx character is not in the acsc string but there is a known wide-character which can be used. modify init_pair to accept -1's for color value after assume_default_colors has been called. add a check in start_color to limit color-pairs to 256 when extended colors are not supported. Resizing the screen: propagate error-returns from wresize, i.e., the internal increase_size and decrease_size functions through resize_term. add check for zero/negative dimensions for resizeterm and resize_term. modify resizeterm to always push a KEY_RESIZE onto the fifo, even if screensize is unchanged. Modify library to push a KEY_RESIZE if there was a SIGWINCH, even if it does not call resizeterm). These changes eliminate the case where a SIGWINCH is received, but ERR is returned from wgetch or wgetnstr because the screen dimensions did not change. Low-level interfaces fix an old bug in the termcap emulation; “%i” was ignored in tparm because the parameters to be incremented were already on the internal stack. change “%l” behavior in tparm to push the string length onto the stack rather than saving the formatted length into the output buffer. modify name-comparison for tgetstr, etc., to accommodate legacy applications as well as to improve compatbility with BSD 4.2 termcap implementations (see note for 980725). High-level interfaces modify internal recursion in wgetch which handles cooked mode to check if the call to wgetnstr returned an error. This can happen when both nocbreak and nodelay are set, for instance (see note for 960418). add a check in internal function waddch_nosync to ensure that tab characters are treated as control characters; some broken locales claim they are printable. modify menu library to ensure that a menu's top-row is adjusted as needed to ensure that the current item is on the screen fix special case where double-width character overwrites a single- width character in the first column. Configuration changes Major changes The ncurses 6.0 configure script makes changes to the default value of several configure options, depending on the --with-abi-version option (i.e., whether its value is “5” or “6”): --enable-const Feature introduced in 970405 supports the use of const where X/Open Curses should have, but did not. NetBSD curses does something similar with const. --enable-ext-colors Extends the cchar_t structure to allow more than 16 colors to be encoded. This applies only to the wide-character (--enable-widec) configuration. --enable-ext-mouse Modifies the encoding of mouse state to make room for a 5th mouse button. That allows one to use ncurses with a wheel mouse with xterm or similar X terminal emulators. --enable-ext-putwin Modifies the file-format written by putwin to use printable text rather than binary files, allowing getwin to read screen dumps written by differently-configured ncurses libraries. The extended getwin can still read binary screen dumps from the same configuration of ncurses. This does not change the ABI (the binary interface seen by calling applications). --enable-interop Modifies the FIELDTYPE structure used for the form library to make it more generic. --enable-lp64 Allows an application to define _LP64 to declare chtype and mmask_t as simply “unsigned” rather than the configured types using the --with-chtype and --with-mmask_t options. --enable-sp-funcs Compile-in support for extended functions which accept a SCREEN pointer, reducing the need for juggling the global SP value with set_term and delscreen. --with-chtype=uint32_t Makes chtype explicitly a 32-bit unsigned value. --with-mmask_t=uint32_t Makes mmask_t explicitly a 32-bit unsigned value. --with-tparm-arg=intptr_t X/Open Curses declares tparm using long for each of the parameters aside from the formatting string, presuming that long and char* are the same size. This configure option uses intptr_t which provides a better guarantee of the sizes. The configure script no longer checks for antique compilers; c89 is assumed as a minimum. There are a few features from later revisions which are used when available. The configure script makes checks to turn on useful warnings from clang, gcc and icc. You should be able to build ncurses 6.0 with any of the current (or not so current) C compilers available in 2015. The configure script, by the way, makes changes which do not work with systems whose /bin/sh is non-POSIX. This mainly affects Solaris (the other vendor unix systems have followed the POSIX guidelines for the past twenty years). If you must build on Solaris, its xpg4 binaries suffice, e.g., #!/bin/sh WHAT=`hostname|sed -e 's/\..*//'` OUT=configure.out cat >>$OUT <<EOF/ ** `date` ** node: $WHAT ** user: `id` ** conf: $* EOF/   SHELL=/bin/sh if test -f /usr/xpg4/bin/sh then         CONFIG_SHELL=/usr/xpg4/bin/sh         export CONFIG_SHELL         SHELL=$CONFIG_SHELL fi   rm -f config.status config.cache TOP=$HOME/$WHAT $SHELL ./configure --verbose \         --disable-echo \         --disable-overwrite \         --enable-warnings \         --with-warnings \         --prefix=$TOP $* 2>&1 | tee -a $OUT Other major changes to the configure script include: ABI 6 is now the default, intending that the existing ABI 5 should build as before using the “--with-abi-version=5” option. added --with-extra-suffix option to help with installing nonconflicting ncurses6 packages, e.g., avoiding header- and library-conflicts. NOTE: as a side-effect, this renames adacurses-config to adacurses5-config and adacursesw-config to adacursesw5-config the configure script looks for gnatgcc if the Ada95 binding is built, in preference to the default gcc/cc. The script also ensures that the Ada95 binding is built with the level of optimization as the C libraries. the configure script captures define's related to -D_XOPEN_SOURCE from the configure check and adds those to the *-config and *.pc files, to simplify use for the wide-character libraries. Configuration options There are several new (or extended) configure options: --disable-db-install Do not install the terminal database. This is used to omit features for packages, as done with --without-progs. The option simplifies building cross-compile support packages. --disable-gnat-projects This option is used for regression testing --disable-lib-suffixes Suppress the “w”, “t” or “tw” suffixes which normally would be added to the library names for the --enable-widec and --with-pthread options. --with-cxx-shared When --with-shared is set, build libncurses++ as a shared library. This implicitly relies upon building with gcc/g++, since other compiler suites may have differences in the way shared libraries are built. libtool by the way has similar limitations. --with-hashed-db Extended this configure option to simplify building with different versions of Berkeley database using FreeBSD ports. --with-pc-suffix If "".pc"" files are installed, optionally add a suffix to the files and corresponding package names to separate unusual configurations. If no option value is given (or if it is ""none""), no suffix is added. This option is used in the test package for ncurses6. --with-xterm-kbs Configure xterm's terminfo entries to use either BS (^H, i.e., ASCII backspace) or DEL (^?, or 127). Portability MinGW Most of the portability-related work since ncurses 5.9 extended and improved the MinGW port introduced in ncurses 5.8. The MinGW port can be readily cross-compiled: modified configure script to allow creating dll's for MinGW when cross-compiling. enforced Windows-style path-separator if cross-compiling, added scripts for test-builds of cross-compiled packages for ncurses6 to MinGW. added pc-files to the MinGW cross-compiling test-packages. added script for building test-packages of binaries cross-compiled to MinGW using NSIS. added nc_mingw.h to installed headers for MinGW port; this is needed for cross-compiling ncurses-examples. added test-packages for cross-compiling ncurses-examples using the MinGW test-packages. The MinGW-specific Windows driver accounts for several changes: wide-character display is made usable by replacing MinGW's non-working wcrtomb and wctomb functions. implemented some display features: beep, flash, curs_set. the driver handles repainting on endwin/refresh combination. modified treatment of TERM variable for MinGW port to allow explicit use of the Windows console driver by checking if $TERM is set to “#win32console” or an abbreviation of that. the Windows driver also matches the special TERM value “unknown” the driver now returns characters for special keys, (like ansi.sys does), when keypad mode is off, rather than returning nothing at all. the driver checks a new environment variable NCURSES_CONSOLE2 to optionally work around a deficiency in Console2 (and its descendent ConsoleZ) which hang when an application creates a console buffer. Finally, there are other improvements: MinGW is one of the configurations where ncurses installs by default into /usr configuration for cross-compiling uses AC_CHECK_TOOLS in preference to AC_PATH_PROGS when searching for ncurses*-config, e.g., in Ada95/configure and test/configure. extend Windows support to work with MSYS2; this works with a scenario where there is an ANSI-escape handler such as ansicon running in the console window. wrap isatty calls with a macro, provide a corresponding set of support routines to address differences between MinGW and MSYS2. ensure WINVER is defined in makefiles rather than using headers. add check for the gnatprep “-T” option. work around a bug introduced by gcc 4.8.1 in MinGW which breaks ""trace"" feature. add a driver-name method to each of the drivers. Other ports These changes affect certain platforms (ports): the configure script knows how to build shared libraries with DragonFlyBSD and Interix. support for AIX shared libraries is improved, tested with AIX 5.3, 6.1 and 7.1 with both gcc 4.2.4 and cc: the shared-library suffix for AIX 5 and 6 is now "".so"" the -brtl option is used with AIX 5-7; it is needed to link with the shared libraries. the configure --enable-pc-files option takes into account the PKG_CONFIG_PATH variable. the configure option --with-pkg-config-libdir provides control over the actual directory into which pc-files are installed. the build scripts add explicit -ltinfo, etc., to the generated "".pc"" file when ld option “--as-needed” is used, or when ncurses and tinfo are installed without using rpath. the configure script disallows conflicting options “--with-termlib” and “--enable-term-driver”. the check for missing c++ compiler to work when no error is reported, and no variables set is improved (see note for 20021206). the misc/gen_edit.sh script selects a ""linux"" entry which works with the current kernel rather than assuming it is always ""linux3.0"" the test/configure script makes it simpler to override names of curses-related libraries, to help with linking with pdcurses in MinGW environment. the configure-script/ifdef's allow the BSD OLD_TTY feature to be suppressed if the type of ospeed is configured using the option --with-ospeed to not be a short. By default, it is a short for termcap-compatibility. the MKlib_gen.sh script works around a recent change in gcc 5 (released mid-2015) which essentially emits multiple #line statements for the same position in a file. the configure script works with Minix3.2 (see note on portability) OS/2 redux: the configure script supports OS/2 kLIBC. the --with-lib-prefix option allows configuring for old/new flavors of OS/2 EMX. improved configure-script checks for _XOPEN_SOURCE: the definition works starting with Solaris 10. the definition is suppressed for IRIX64, since its header files have a conflict versus _SGI_SOURCE. Features of ncurses The ncurses package is fully upward-compatible with SVr4 (System V Release 4) curses: All of the SVr4 calls have been implemented (and are documented). ncurses supports all of the for SVr4 curses features including keyboard mapping, color, forms-drawing with ACS characters, and automatic recognition of keypad and function keys. ncurses provides these SVr4 add-on libraries (not part of X/Open Curses): the panels library, supporting a stack of windows with backing store. the menus library, supporting a uniform but flexible interface for menu programming. the form library, supporting data collection through on-screen forms. ncurses's terminal database is fully compatible with that used by SVr4 curses. ncurses supports user-defined capabilities which it can see, but which are hidden from SVr4 curses applications using the same terminal database. It can be optionally configured to match the format used in related systems such as AIX and Tru64. Alternatively, ncurses can be configured to use hashed databases rather than the directory of files used by SVr4 curses. The ncurses utilities have options to allow you to filter terminfo entries for use with less capable curses/terminfo versions such as the HP/UX and AIX ports. The ncurses package also has many useful extensions over SVr4: The API is 8-bit clean and base-level conformant with the X/OPEN curses specification, XSI curses (that is, it implements all BASE level features, and most EXTENDED features). It includes many function calls not supported under SVr4 curses (but portability of all calls is documented so you can use the SVr4 subset only). Unlike SVr3 curses, ncurses can write to the rightmost-bottommost corner of the screen if your terminal has an insert-character capability. Ada95 and C++ bindings. Support for mouse event reporting with X Window xterm and FreeBSD and OS/2 console windows. Extended mouse support via Alessandro Rubini's gpm package. The function wresize allows you to resize windows, preserving their data. The function use_default_colors allows you to use the terminal's default colors for the default color pair, achieving the effect of transparent colors. The functions keyok and define_key allow you to better control the use of function keys, e.g., disabling the ncurses KEY_MOUSE, or by defining more than one control sequence to map to a given key code. Support for 256-color terminals, such as modern xterm. Support for 16-color terminals, such as aixterm and modern xterm. Better cursor-movement optimization. The package now features a cursor-local-movement computation more efficient than either BSD's or System V's. Super hardware scrolling support. The screen-update code incorporates a novel, simple, and cheap algorithm that enables it to make optimal use of hardware scrolling, line-insertion, and line-deletion for screen-line movements. This algorithm is more powerful than the 4.4BSD curses quickch routine. Real support for terminals with the magic-cookie glitch. The screen-update code will refrain from drawing a highlight if the magic- cookie unattributed spaces required just before the beginning and after the end would step on a non-space character. It will automatically shift highlight boundaries when doing so would make it possible to draw the highlight without changing the visual appearance of the screen. It is possible to generate the library with a list of pre-loaded fallback entries linked to it so that it can serve those terminal types even when no terminfo tree or termcap file is accessible (this may be useful for support of screen-oriented programs that must run in single-user mode). The tic/captoinfo utility provided with ncurses has the ability to translate many termcaps from the XENIX, IBM and AT&T extension sets. A BSD-like tset utility is provided. The ncurses library and utilities will automatically read terminfo entries from $HOME/.terminfo if it exists, and compile to that directory if it exists and the user has no write access to the system directory. This feature makes it easier for users to have personal terminfo entries without giving up access to the system terminfo directory. You may specify a path of directories to search for compiled descriptions with the environment variable TERMINFO_DIRS (this generalizes the feature provided by TERMINFO under stock System V.) In terminfo source files, use capabilities may refer not just to other entries in the same source file (as in System V) but also to compiled entries in either the system terminfo directory or the user's $HOME/.terminfo directory. The table-of-entries utility toe makes it easy for users to see exactly what terminal types are available on the system. The library meets the XSI requirement that every macro entry point have a corresponding function which may be linked (and will be prototype-checked) if the macro definition is disabled with #undef. Extensive documentation is provided (see the Additional Reading section of the ncurses FAQ for online documentation). Applications using ncurses The ncurses distribution includes a selection of test programs (including a few games). These are available separately as ncurses-examples The ncurses library has been tested with a wide variety of applications including: cdk Curses Development Kit http://invisible-island.net/cdk/ ded directory-editor http://invisible-island.net/ded/ dialog the underlying application used in Slackware's setup, and the basis for similar install/configure applications on many systems. http://invisible-island.net/dialog/ lynx the text WWW browser http://lynx.isc.org/ Midnight Commander file manager http://www.midnight-commander.org/ mutt mail utility http://www.mutt.org/ ncftp file-transfer utility http://www.ncftp.com/ nvi New vi uses ncurses. https://sites.google.com/a/bostic.com/keithbostic/nvi tin newsreader, supporting color, MIME http://www.tin.org/ as well as some that use ncurses for the terminfo support alone: minicom terminal emulator for serial modem connections http://alioth.debian.org/projects/minicom/ mosh a replacement for ssh. https://mosh.mit.edu/ tack terminfo action checker http://invisible-island.net/ncurses/tack.html tmux terminal multiplexor http://tmux.github.io/ vile vi-like-emacs may be built to use the terminfo, termcap or curses interfaces. http://invisible-island.net/vile/ and finally, those which use only the termcap interface: emacs text editor http://www.gnu.org/software/emacs/ screen terminal multiplexor http://www.gnu.org/software/screen/ vim text editor http://www.vim.org/ Development activities Zeyd Ben-Halim started ncurses from a previous package pcurses, written by Pavel Curtis. Eric S. Raymond continued development. Jürgen Pfeifer wrote most of the form and menu libraries. Ongoing development work is done by Thomas Dickey. Thomas Dickey also acts as the maintainer for the Free Software Foundation, which holds the copyright on ncurses. Contact the current maintainers at bug-ncurses@gnu.org To join the ncurses mailing list, please write email to bug-ncurses-request@gnu.org containing the line: subscribe <name>@<host.domain> This list is open to anyone interested in helping with the development and testing of this package. Beta versions of ncurses and patches to the current release are made available at ftp://invisible-island.net/ncurses/ . There is an archive of the mailing list here: http://lists.gnu.org/archive/html/bug-ncurses (also https) Related resources The release notes make scattered references to these pages, which may be interesting by themselves: man2html ncurses licensing Symbol versioning in ncurses The MinGW port of ncurses tack – terminfo action checker tar versus portability tctest – termcap library checker Terminal Database Other resources The distribution provides a newer version of the terminfo-format terminal description file once maintained by Eric Raymond . Unlike the older version, the termcap and terminfo data are provided in the same file, and provides several user-definable extensions beyond the X/Open specification. You can find lots of information on terminal-related topics not covered in the terminfo file at Richard Shuford's archive . Overview Release Notes Library improvements Output buffering Symbol versioning Miscellaneous Program improvements Utilities Examples Terminal database Documentation Interesting bug-fixes Configuration changes Major changes Configuration options Portability MinGW Other ports Features of ncurses Applications using ncurses Development activities Related resources Other resources Return to GNU's home page. Please send FSF & GNU inquiries & questions to gnu@gnu.org. There are also other ways to contact the FSF. Please send comments on these web pages to webmasters@www.gnu.org, send other questions to gnu@gnu.org. Copyright © 1998,2000,2004,2005,2006,2008,2011,2015 Free Software Foundation, Inc., 51 Franklin Street, Boston, MA 02110-1301, USA Verbatim copying and distribution of this entire article is permitted in any medium, provided this notice is preserved. Updated: $Date: 2015/08/10 10:56:30 $ $Author: dickey $"	"null"	"null"	"[]"	"true"
"GUI"	"ncurses"	"https://crates.io/keywords/ncurses"	"[]"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"[]"	"true"
"GUI"	"jeaye/ncurses-rs"	"https://github.com/jeaye/ncurses-rs"	"— ncurses bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"193"	"9"	"55"	"GitHub - jeaye/ncurses-rs: A safe ncurses wrapper for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 193 Fork 55 jeaye/ncurses-rs Code Issues 9 Pull requests 0 Pulse Graphs A safe ncurses wrapper for Rust 235 commits 1 branch 0 releases 41 contributors Rust 99.1% Makefile 0.9% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 162839b Apr 3, 2016 jeaye Mention example 7 in the readme Permalink Failed to load latest commit information. examples Add example for get_wch Apr 3, 2016 src Report keycodes as i32 in *get_wch functions for consistency Apr 3, 2016 .gitignore Added Cargo.lock to .gitignore, changed `std::mem::transmute` to Jan 10, 2015 .travis.yml Switch Travis-CI to use cargo instead of make. Feb 2, 2015 Cargo.toml Version bump Dec 15, 2015 LICENSE Update license (still MIT) Jan 11, 2016 Makefile fix build for rustc nightly Jan 24, 2015 README.md Mention example 7 in the readme Apr 3, 2016 README.md ncurses-rs This is a very thin wrapper around the ncurses TUI lib. Building The compiled library will go to the target directory. cargo build  Note that you must to have the ncurses library installed and linkable for ncurses-rs to work. On Linux, this should be trivial. On OS X, consider installing ncurses using Homebrew. (Note that you have to force Homebrew to link the library to /usr/local/lib: brew link --force ncurses and set that path to LIBRARY_PATH environmental variable.) Examples Examples are built automagically. To run them, check the bin directory. Example numbers increase along with the complexity of the example. Current examples: 1. Hello World 2. Basic Input & Attributes 3. Simple Pager 4. Window Movement 5. Menu Library (requires rust nightly) 6. Pager & Syntax Highlighting 7. Basic Input & Attributes (Unicode) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jeaye/ncurses-rs"	"— ncurses bindings"	"true"
"GUI"	""	"https://travis-ci.org/jeaye/ncurses-rs"	"— ncurses bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— ncurses bindings"	"true"
"GUI"	"Qt"	"http://doc.qt.io"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Qt Documentation We bake cookies in your browser for a better experience. Using this site means that you consent. Read More Menu Partners Blog Download Device Creation Application Development Services Developers EN RU ZH Wiki Documentation Forum Bug Reports Code Review Qt Documentation Getting Started Getting Started Guides What's New in Qt 5 Qt Licensing Examples and Tutorials Advanced Topics Qt Reference Documentation Development Topics Supported Platforms Qt Tools Highlighted Features Qt for Device Creation Emulator Qt Charts Qt Quick Compiler Qt Data Visualization Qt Purchasing Qt Virtual Keyboard Qt Quick 2D Renderer Qt Versions Qt 5.7 Qt 4.8 Tools Manuals Qt Creator Qt Designer Qt Linguist Qt Assistant Qt Installer Framework Build Tools: qmake Build Tools: Qbs Build Tools: CMake Qt Visual Studio Add-in Archives and Snapshots Documentation Snapshots View Archives © 2016 The Qt Company Ltd. Documentation contributions included herein are the copyrights of their respective owners. The documentation provided herein is licensed under the terms of the GNU Free Documentation License version 1.3 as published by the Free Software Foundation. Qt and respective logos are trademarks of The Qt Company Ltd in Finland and/or other countries worldwide. All other trademarks are property of their respective owners. About us Training & Events News Resource Center Partners Careers Locations Product Qt Framework Qt Features Qt Quick Qt for Device Creation Qt for Mobile Apps Qt in Use Developers Documentation Examples & Tutorials Tools Wiki Forums Contribute to Qt Services Support Technology Evaluation Proof of Concept Design & Implementation Productization Qt Cloud Services Download Free 30-Day Trial Enterprise Professional Community Legal | Terms & Conditions Sign In Feedback Contact us © 2015 The Qt Company"	"null"	"null"	""	"true"
"GUI"	"cyndis/qmlrs"	"https://github.com/cyndis/qmlrs"	"— QtQuick bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"276"	"31"	"36"	"GitHub - cyndis/qmlrs: QtQuick interface for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 276 Fork 36 cyndis/qmlrs Code Issues 9 Pull requests 1 Pulse Graphs QtQuick interface for Rust 109 commits 2 branches 3 releases 9 contributors Rust 57.2% C++ 39.4% CMake 2.7% QML 0.7% Rust C++ CMake QML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ghstatic master Nothing to show v0.1.1 v0.1.0 v0.0.1 Nothing to show New pull request Latest commit ff28b56 Apr 4, 2016 florianjacob Merge branch 'master' of github.com:cyndis/qmlrs Permalink Failed to load latest commit information. examples Combine example math module files Feb 1, 2016 ext/libqmlrswrapper fix trailing whitespace in qrsdynamicobject Apr 4, 2016 src Fix unused import Apr 1, 2016 tests Increased timer interval to work with travis Feb 1, 2016 .gitignore added ext/libqmlrswrapper/build to gitignore Aug 18, 2015 .travis.yml use travis-cargo for code coverage via coveralls Feb 5, 2016 CHANGELOG.md updated changelog for 0.1.1 Mar 9, 2016 Cargo.toml set Cargo.toml release number to 0.1.1 Mar 9, 2016 LICENSE-APACHE Add license Dec 13, 2014 LICENSE-MIT Add license Dec 13, 2014 README.md Update factorial example in the README Apr 1, 2016 build.rs Determine Qt5 path from QTDIR env vars, if set, on OS X Apr 1, 2016 README.md qmlrs - QtQuick bindings for Rust qmlrs allows the use of QML/QtQuick code from Rust, specifically Rust code can create a QtQuick engine (QQmlApplicationEngine) with a loaded QML script QML code can invoke Rust functions …with certain limitations. The library should be safe (as in not unsafe) to use, but no promises at this time. Reviews of the code would be welcome. News See the Changelog for the version history and what's waiting in master to be released. Requirements The library consists of a Rust part and a C++ part. The C++ part will be compiled automatically when building with Cargo. You will need cmake, Qt5 and a C++ compiler that can compile Qt5 code. Your Qt5 installation should have at least the following modules: Core, Gui, Qml, Quick and Quick Controls. If you are installing Qt5 from source, please note that passing ""-noaccessibility"" to the configure script disables the qtquickcontrols module. Usage Add the latest version of qmlrs from crates.io in your project's Cargo.toml. Example This is the Rust code for an application allowing the calculation of factorials. You can find the corresponding QML code in the examples directory. #[macro_use] extern crate qmlrs;  struct Factorial; impl Factorial {     fn calculate(&self, x: i64) -> i64 {         (1..x+1).fold(1, |t,c| t * c)     } }  Q_OBJECT! { Factorial:     slot fn calculate(i64); }  fn main() {     let mut engine = qmlrs::Engine::new();      engine.set_property(""factorial"", Factorial);     engine.load_local_file(""examples/factorial_ui.qml"");      engine.exec(); }  To run the above example, execute cargo run --example factorial in the project's root directory. Note regarding the Qt event loop and threads Creating an Engine automatically initializes the Qt main event loop if one doesn't already exist. At least on some operating systems, the event loop must run on the main thread. Qt will tell you if you mess up. The .exec() method on views starts the event loop. This will block the thread until the window is closed. Licensing The code in this library is dual-licensed under the MIT license and the Apache License (version 2.0). See LICENSE-APACHE and LICENSE-MIT for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cyndis/qmlrs"	"— QtQuick bindings"	"true"
"GUI"	""	"https://travis-ci.org/cyndis/qmlrs"	"— QtQuick bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— QtQuick bindings"	"true"
"GUI"	"Sciter"	"http://sciter.com/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"310"	"42"	"34"	"GitHub - oskca/sciter: Golang bindings of Sciter: the Embeddable HTML/CSS/script engine for modern UI development Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 42 Star 310 Fork 34 oskca/sciter Code Issues 7 Pull requests 2 Pulse Graphs Golang bindings of Sciter: the Embeddable HTML/CSS/script engine for modern UI development 41 commits 1 branch 0 releases 3 contributors Go 47.3% C++ 35.4% C 17.3% Go C++ C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 4fcee17 Jun 28, 2016 oskca committed on GitHub Merge pull request #31 from kuznetsovin/osx_support … LGTM Permalink Failed to load latest commit information. examples correct value returning in goLPCBYTE_RECEIVER to fix #21 Jun 28, 2016 include init branch Jun 10, 2016 rice change github username to oskca :) Oct 16, 2015 window Porting function for correct working on Mac OS X 10.11 Jun 10, 2016 .gitignore sciter golang biding Oct 15, 2015 README.md make it clear that OSX is not supported yet Nov 24, 2015 callbacks.c wrap ValueEnumElements for key&value enumeration of sciter object typ… Feb 28, 2016 generate.go sciter golang biding Oct 15, 2015 sciter-x-api.c init branch Jun 10, 2016 sciter.go correct value returning in goLPCBYTE_RECEIVER to fix #21 Jun 28, 2016 sciter_darwin.go Porting function for correct working on Mac OS X 10.11 Jun 10, 2016 sciter_linux.go sciter golang biding Oct 15, 2015 sciter_windows.go sciter golang biding Oct 15, 2015 types.go fix DefaultWindowCreaetFlag typo Feb 13, 2016 types_string.go sciter golang biding Oct 15, 2015 utils.go sciter golang biding Oct 15, 2015 value.go fix typo in IsObjectFunction Feb 25, 2016 wrapper.go sciter golang biding Oct 15, 2015 README.md This package provides a Golang bindings of Sciter using cgo. Using go sciter you must have the platform specified sciter dynamic library downloaded from sciter-sdk, the library itself is rather small (under 5MB, less than 2MB when upxed) . Most Sciter API are supported, including: Html string/file loading DOM manipulation/callback/event handling DOM state/attribute handling Custom resource loading Sciter Behavior Sciter Options Sciter Value support NativeFunctor (used in sciter scripting) And the API are organized in more or less a gopher friendly way. Things that are not supported: Sciter Node API TIScript Engine API Getting Started Download the sciter-sdk Extract the sciter runtime library from sciter-sdk to system PATH The runtime libraries lives in bin bin.gtk bin.osx with suffix like dll so or dylib (osx is not supported yet, due to the lack of osx computer) The system PATH is os specific, under Windows simply copying sciter32.dll or sciter64.dll to c:\windows\system32 is just enough. Set up GCC envrionmnet for CGO mingw64-gcc (5.2.0 is tested) is recommended for Windows users. Under Linux gcc(4.8 or above) and gtk+-3.0 are needed. Due to the dependencies of gkt version of Sciter runtime library, only debian 8 is tested but not for other distributions. go get -x github.com/oskca/sciter Run the example and enjoy :) Sciter Desktop UI Examples Sciter Version Support Currently supports Sciter version 3.3.0.3 - latest About Sciter Sciter is an Embeddable HTML/CSS/script engine for modern UI development, Web designers, and developers, can reuse their experience and expertise in creating modern looking desktop applications. In my opinion, Sciter , though not open sourced, is an great desktop UI development envrionment using the full stack of web technologies, which is rather small (under 5MB) especially compared to CEF,Node Webkit and Atom Electron. :) Finally, according to Andrew Fedoniouk the author and the Sciter END USER LICENSE AGREEMENT , the binary form of the Sciter dynamic libraries are totally free to use for commercial or non-commercial applications. The Tailered Sciter C Headers This binding ueses a tailored version of the sciter C Headers, which lives in directory: include. The included c headers are a modified version of the sciter-sdk standard headers. It seems Sciter is developed using C++, and the included headers in the Sciter SDK are a mixture of C and C++, which is not quite suitable for an easy golang binding. I'm not much fond of C++ since I started to use Golang, so I made this modification and hope Andrew Fedoniouk the author would provide pure C header files for Sciter. :) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/datagoes/sciter"	""	"true"
"GUI"	"pravic/rust-sciter"	"https://github.com/pravic/rust-sciter"	"— Sciter bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"26"	"2"	"2"	"GitHub - pravic/rust-sciter: Rust bindings for Sciter Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 26 Fork 2 pravic/rust-sciter Code Issues 4 Pull requests 0 Pulse Graphs Rust bindings for Sciter http://sciter.com 70 commits 3 branches 5 releases 2 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags appveyor gh-pages master Nothing to show v0.4.0 v0.3.0 v0.2.0 v0.1.0 0.4.0 Nothing to show New pull request Latest commit 01a9390 Jun 7, 2016 pravic example: fix interop sum arguments Permalink Failed to load latest commit information. examples example: fix interop sum arguments Jun 7, 2016 src fix: add missing OsWindow::from for linux and mac May 14, 2016 tests fix 1.7.0 issues Apr 4, 2016 .gitignore git ignore Mar 18, 2016 Cargo.toml fix 1.7.0 issues Apr 4, 2016 README.md update license Apr 18, 2016 appveyor.yml add appveyor integration Apr 4, 2016 README.md Rust bindings for Sciter Check this page for another language bindings. Sciter is an embeddable multiplatform HTML/CSS/script engine with GPU accelerated rendering designed to render modern desktop application UI. It's a compact, single dll/dylib/so file (4-8 mb), engine without any additional dependencies. Check the screenshot gallery of the desktop UI examples and DirectX UI integration via Rust GFX. Physically Sciter is a mono library which contains: HTML and CSS rendering engine based on the H-SMILE core used in HTMLayout, JavaScript alike Scripting engine – core of TIScript which by itself is based on c-smile engine, Persistent Database (a.k.a. JSON DB) based on excellent DB products of Konstantin Knizhnik. Graphics module using excellent AGG library of Maxim Shemanarev at www.antigrain.com. Network communication module, it relies on Libcurl, the Great. Internally it contains the following modules: CSS – CSS parser and collection of parsed CSS rules, etc. HTML DOM – HTML parser and DOM tree implementation. layout managers – collection of various layout managers – text layout, default block layout, flex layouts. Support of positioned floating elements is also here. This module does layout calculations heavy lifting. This module is also responsible for rendering of layouts. input behaviors – collection of built-in behaviors – code behind ""active"" DOM elements: <input>, <select>, <textarea>, etc. script module – source-to-bytecode compiler and virtual machine (VM) with compacting garbage collector (GC). This module also contains runtime implementation of standard classes and objects: Array, Object, Function and others. script DOM – runtime classes that expose DOM and DOM view (a.k.a. window) to the script. graphics abstraction layer – abstract graphics implementation that isolates modules above from particular platform details Direct2D/DirectWrite graphics backend implementation (Windows); GDI+ graphics backend implementation (Windows); CoreGraphics backend implementation (Mac OS X); Cairo backend implementation (GTK on all platforms including Linuxes); core primitives – set of common primitives: string, arrays, hash maps and so on. Sciter supports all standard elements defined in HTML5 specification with some additions. CSS extended to better support Desktop UI development, e.g. flow and flex units, vertical and horizontal alignment, OS theming. Sciter SDK comes with demo ""browser"" with builtin DOM inspector, script debugger and documentation browser: Check http://sciter.com website and its documentation resources for engine principles, architecture and more. Getting started: Download Sciter SDK and extract it somewhere. Add target platform binaries to PATH (bin, bin.osx or bin.gtk) and install Sciter shared library to your LIBRARY_PATH. Build library and run the minimal sciter sample: cargo run --example minimal. For your apps add the following dependency to the Cargo.toml: sciter-rs = ""*"". Brief look: Here is a minimal sciter app: extern crate sciter;  fn main() {     let mut frame = sciter::Window::new();     frame.load_file(""minimal.htm"");     frame.run_app(true); } It looks similar like this: Interoperability In respect of tiscript functions calling: use sciter::{Element, Value};  let root = Element::from_window(hwnd); let result: Value = root.call_function(""namespace.name"", &make_args!(1,""2"",3)); Calling rust from script can be implemented as following: struct Handler;  impl Handler {   fn calc_sum(&self, a: i32, b: i32) -> i32 {     a + b   } }  impl sciter::EventHandler for Handler {   dispatch_script_call! {     fn calc_sum(i32, i32);   } } And we can access this function from script: // `view` represents window where script is runnung. // `stdout` stream is a standard output stream (shell or debugger console, for example)  stdout.printf(""2 + 3 = %d\n"", view.calc_sum(2, 3)); Check rust-sciter/examples folder for more complex usage. Library documentation. What supported right now: sciter::window which brings together window creation, host and event handlers sciter::host with basic event handling, needs to be redesigned sciter::event_handler with event handling and auto dispatching script calls to naive code sciter::dom for HTML DOM access and manipulation methods sciter::value Rust wrapper with sciter::script_error and sciter::native_function support sciter::behavior_factory - global factory for native behaviors sciter::graphics - platform independent graphics native interface (can be used in native behaviors) sciter::request - resource request object, used for custom resource downloading and handling sciter::video - custom video rendering sciter::archive - Sciter's compressed archive produced by sdk/bin/packfolder Platforms: Windows OSX Linux License Bindings library licensed under MIT license. Sciter Engine has the own license terms and end used license agreement for SDK usage. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pravic/rust-sciter"	"— Sciter bindings"	"true"
"GUI"	""	"https://ci.appveyor.com/project/pravic/rust-sciter"	"— Sciter bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"AppVeyor AppVeyor Projects Environments Docs Support Sign in {{Session.user().fullName}} User Profile Change password Change email Notifications API token Account Account details Billing NuGet Team Tools Encrypt data Validate YAML System Settings Scheduled tasks Sign out Trial period expires {{ Session.trialExpires() }}. Select plan to keep running your builds. After trial period is over only projects with public repositories will run. If you have any questions or need to extend your trial feel free to contact us. Your account has unpaid invoice that was due on {{ Session.anniversaryDate() }} and will be switched to Free plan {{ Session.cancellationDate() }} if outstanding balance is not paid. Go to Billing page to update your credit card details and/or pay for the outstanding invoice. Contact us if you have any questions."	"null"	"null"	"— Sciter bindings"	"true"
"GUI"	"Termbox"	"https://github.com/nsf/termbox"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"855"	"60"	"71"	"GitHub - nsf/termbox: Library for writing text-based user interfaces Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 855 Fork 71 nsf/termbox Code Issues 4 Pull requests 1 Pulse Graphs Library for writing text-based user interfaces http://code.google.com/p/termbox 232 commits 1 branch 0 releases 30 contributors C 67.3% C++ 18.8% Python 13.9% C C++ Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 7f76940 Jul 10, 2016 nsf Use proper mouse enter/exit sequence on built-in database as well. … Go implemention does it the same way. Permalink Failed to load latest commit information. src Use proper mouse enter/exit sequence on built-in database as well. Jul 10, 2016 tools Zero is not required at the end of funcs sequence. Jul 29, 2013 .gitignore Move termboxmodule.pyx to its own directory. Aug 3, 2013 COPYING Update README and COPYING. Aug 5, 2013 README.rst Add a link to D wrapper Mar 5, 2016 package.json fixed source paths May 7, 2015 setup.py Workaround for changes in 3.4 CPython Sep 15, 2014 test_termboxmodule.py test_termboxmodule: Use defined API for colors Jun 21, 2015 waf Update waf. Fixes #39. Sep 15, 2014 wscript Port wide char display hack from termbox-go Mar 10, 2015 README.rst Termbox is a library that provides minimalistic API which allows the programmer to write text-based user interfaces. It is based on a very simple abstraction. The main idea is viewing terminals as a table of fixed-size cells and input being a stream of structured messages. Would be fair to say that the model is inspired by windows console API. The abstraction itself is not perfect and it may create problems in certain areas. The most sensitive ones are copy & pasting and wide characters (mostly Chinese, Japanese, Korean (CJK) characters). When it comes to copy & pasting, the notion of cells is not really compatible with the idea of text. And CJK runes often require more than one cell to display them nicely. Despite the mentioned flaws, using such a simple model brings benefits in a form of simplicity. And KISS principle is important. At this point one should realize, that CLI (command-line interfaces) aren't really a thing termbox is aimed at. But rather pseudo-graphical user interfaces. INSTALLATION Termbox comes with a waf-based build scripts. In order to configure, build and install it, do the following: ./waf configure --prefix=/usr                                (configure) ./waf                                                        (build) ./waf install --destdir=DESTDIR                              (install)  By default termbox will install the header file and both shared and static libraries. If you want to install a shared library or static library alone, use the following as an install command: ./waf install --targets=termbox_shared --destdir=PREFIX      (shared library)  or: ./waf install --targets=termbox_static --destdir=PREFIX      (static library)  PYTHON In order to install the python module, use the following command (as root or via sudo): python setup.py install  for Python 3: python3 setup.py install  GETTING STARTED Termbox's interface only consists of 12 functions: tb_init() // initialization tb_shutdown() // shutdown  tb_width() // width of the terminal screen tb_height() // height of the terminal screen  tb_clear() // clear buffer tb_present() // sync internal buffer with terminal  tb_put_cell() tb_change_cell() tb_blit() // drawing functions  tb_select_input_mode() // change input mode tb_peek_event() // peek a keyboard event tb_poll_event() // wait for a keyboard event  See src/termbox.h header file for full detail. LINKS http://pecl.php.net/package/termbox - PHP Termbox wrapper https://github.com/nsf/termbox-go - Go pure Termbox implementation https://github.com/gchp/rustbox - Rust Termbox wrapper https://github.com/fouric/cl-termbox - Common Lisp Termbox wrapper https://github.com/zyedidia/termbox-d - D Termbox wrapper If you want me to add your project here, send me a pull request or drop a note via email, you can find my email below. BUGS & QUESTIONS Report bugs to the https://github.com/nsf/termbox issue tracker. Send rants and questions to me: no.smile.face@gmail.com. CHANGES v1.1.0 (not released yet): API: tb_width() and tb_height() are guaranteed to be negative if the termbox wasn't initialized. API: Output mode switching is now possible, adds 256-color and grayscale color modes. API: Better tb_blit() function. Thanks, Gunnar Zötl <gz@tset.de>. Bug fixes in code and documentation. v1.0.0: Remove the Go directory. People generally know about termbox-go and where to look for it. Remove old terminfo-related python scripts and backport the new one from termbox-go. Remove cmake/make-based build scripts, use waf. Add a simple terminfo database parser. Now termbox prefers using the terminfo database if it can be found. Otherwise it still has a fallback built-in database for most popular terminals. Some internal code cleanups and refactorings. The most important change is that termbox doesn't leak meaningless exported symbols like 'keys' and 'funcs' now. Only the ones that have 'tb_' as a prefix are being exported. API: Remove unsigned ints, use plain ints instead. API: Rename UTF-8 functions 'utf8_*' -> 'tb_utf8_*'. API: TB_DEFAULT equals 0 now, it means you can use attributes alones assuming the default color. API: Add TB_REVERSE. API: Add TB_INPUT_CURRENT. Move python module to its own directory and update it due to changes in the termbox library. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nsf/termbox"	""	"true"
"GUI"	"gchp/rustbox"	"https://github.com/gchp/rustbox"	"— a Rust implementation of Termbox"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"204"	"19"	"43"	"GitHub - gchp/rustbox: Rust implementation of the termbox library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 204 Fork 43 gchp/rustbox Code Issues 12 Pull requests 7 Pulse Graphs Rust implementation of the termbox library 179 commits 1 branch 33 releases 22 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.8.1 0.8.0 0.7.2 0.7.1 0.7.0 0.6.3 0.6.2 0.6.1 0.6.0 0.5.1 0.5.0 0.4.5 0.4.4 0.4.3 0.4.2 0.4.1 0.4.0 0.3.2 0.3.1 0.3.0 0.2.17 0.2.16 0.2.15 0.2.14 0.2.13 0.2.12 0.2.11 0.2.10 0.2.9 0.2.8 0.2.7 0.2.6 0.2.5 Nothing to show New pull request Latest commit 56b2450 Apr 18, 2016 gchp Merge pull request #66 from kindlychung/patch-1 …   Projects that use this crate Permalink Failed to load latest commit information. examples fix issue #51 Jan 8, 2016 src Remove libc dependency Mar 11, 2016 .gitignore Ignore vim swp files Mar 9, 2015 .gitmodules Remove termbox-sys to external repo Dec 18, 2014 .travis.yml Test on 1.5 Jan 15, 2016 Cargo.toml Remove libc dependency Mar 11, 2016 LICENSE Update LICENSE Dec 9, 2014 README.md Projects that use this crate Apr 15, 2016 README.md Rustbox Rustbox is a Rust implementation of termbox. Currently, this is just a wrapper of the C library by nsf, though my plan is to convert it to be a pure Rust implementation and remove the requirement on the C library. The original implementation of this was inspired by Aaron Pribadi, so big props to him for the original work. NOTE This is under development, and the APIs may change as I figure out more how Rust works and as the language itself changes Usage In your Cargo.toml add the following: [dependencies] rustbox = ""*"" You can also use the current git version by instead adding: [dependencies.rustbox] git = ""https://github.com/gchp/rustbox.git"" Then, in your src/example.rs: #![feature(core)]  extern crate rustbox;  use std::error::Error; use std::default::Default;  use rustbox::{Color, RustBox}; use rustbox::Key;  fn main() {     let rustbox = match RustBox::init(Default::default()) {         Result::Ok(v) => v,         Result::Err(e) => panic!(""{}"", e),     };      rustbox.print(1, 1, rustbox::RB_BOLD, Color::White, Color::Black, ""Hello, world!"");     rustbox.print(1, 3, rustbox::RB_BOLD, Color::White, Color::Black,                   ""Press 'q' to quit."");     rustbox.present();     loop {         match rustbox.poll_event(false) {             Ok(rustbox::Event::KeyEvent(key)) => {                 match key {                     Key::Char('q') => { break; }                     _ => { }                 }             },             Err(e) => panic!(""{}"", e.description()),             _ => { }         }     } } NOTE: this example can also be run with cargo run --example hello-world. Projects that use this crate: hostblock rust-2048 marching-squares Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gchp/rustbox"	"— a Rust implementation of Termbox"	"true"
"GUI"	""	"https://travis-ci.org/gchp/rustbox"	"— a Rust implementation of Termbox"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a Rust implementation of Termbox"	"true"
"Image processing"	"chyh1990/imageproc"	"https://github.com/chyh1990/imageproc"	"— An advanced image processing library for Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"38"	"4"	"3"	"GitHub - chyh1990/imageproc: An advanced image processing library for Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 38 Fork 3 chyh1990/imageproc Code Issues 1 Pull requests 1 Pulse Graphs An advanced image processing library for Rust. 23 commits 1 branch 0 releases 2 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 9ab7417 May 29, 2015 SenseTime-Cloud Add ping image interface Permalink Failed to load latest commit information. 3rdparty Add examples May 12, 2015 examples Remove warnings May 14, 2015 src Add ping image interface May 29, 2015 tests Add examples May 12, 2015 .gitignore Add resize May 11, 2015 .gitmodules Add conversion May 10, 2015 .travis.yml Update nalgebra for Rust 1.0.0 May 29, 2015 Cargo.toml Update nalgebra for Rust 1.0.0 May 28, 2015 LICENSE Add readme and CI May 12, 2015 README.md Add ping image interface May 28, 2015 build.rs Add conversion May 10, 2015 README.md ImageProc Maintainers: @chyh1990 Note: this project is under active depvelopment, API may change! imageproc is a advanced image proccessing library for the Rust language in order to provide: generic pixel, image, geometry data structure alike OpenCV Image IO for variable image file format image transformations image processing routines, e.g. convolution, gaussian blur, etc. canvas and rasterization (TBD) This library is inspired by the following projects: OpenCV PistonDevelopers/image Usage Adding the following to the Cargo.toml in your project: [dependencies.imageproc] git = ""https://github.com/chyh1990/imageproc.git""  and import using extern crate: extern crate imageproc; Most data structures and routines are exposed uder imageproc prefix: extern crate imageproc;  use std::path::Path; use imageproc::image::*; use imageproc::conv; use imageproc::imageio::{ImageIO, FreeImageIO};   fn main() {     let img: ImageBgra = FreeImageIO::from_path(&Path::new(""cat.jpg"")).unwrap();     let out = conv::gaussian_blur(&img, 11, 0f32);      let target = Path::new(""out.png"");     FreeImageIO::save(&target, &out).unwrap(); }  Supported Image Format imageproc use cross-platform native library to decode/encode images. The only supported backend is FreeImage, it includes decoders for most image formats, and encoders for most common used formats. Contribution Fork & pull request on Github. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/chyh1990/imageproc"	"— An advanced image processing library for Rust."	"true"
"Image processing"	""	"https://travis-ci.org/chyh1990/imageproc"	"— An advanced image processing library for Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— An advanced image processing library for Rust."	"true"
"Image processing"	"cybergeek94/img-hash"	"https://github.com/cybergeek94/img_hash"	"— Perceptual image hashing and comparison for equality and similarity."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"33"	"2"	"6"	"GitHub - cybergeek94/img_hash: A library for getting perceptual hash values of images Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 33 Fork 6 cybergeek94/img_hash Code Issues 2 Pull requests 0 Pulse Graphs A library for getting perceptual hash values of images 80 commits 8 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.6 crates-bitvec crates f64-simd git_image master simd stream-dct Nothing to show Nothing to show New pull request Latest commit 43553eb May 4, 2016 cybergeek94 Merge pull request #17 from palfrey/zero-length-hash … Handle empty strings in ImgHash::from_base64() Permalink Failed to load latest commit information. src .gitignore .travis.yml Cargo.toml LICENSE README.md README.md img_hash Now builds on stable Rust! (But needs nightly to bench.) A library for getting perceptual hash values of images. Thanks to Dr. Neal Krawetz for the outlines of the Mean (aHash), Gradient (dHash), and DCT (pHash) perceptual hash algorithms: http://www.hackerfactor.com/blog/?/archives/432-Looks-Like-It.html (Accessed August 2014) With the rust-image feature, this crate can operate directly on buffers from the PistonDevelopers/image crate. Usage Documentation on Rust-CI Add img_hash to your Cargo.toml: [dependencies.img_hash] git = ""https://github.com/cybergeek94/img_hash"" # For interop with `image`: features = [""rust-image""]  Example program: extern crate image; extern crate img_hash;  use std::path::Path; use img_hash::{ImageHash, HashType};  fn main() {     let image1 = image::open(&Path::new(""image1.png"")).unwrap();     let image2 = image::open(&Path::new(""image2.png"")).unwrap();      // These two lines produce hashes with 64 bits (8 ** 2),     // using the Gradient hash, a good middle ground between      // the performance of Mean and the accuracy of DCT.     let hash1 = ImageHash::hash(&image1, 8, HashType::Gradient);     let hash2 = ImageHash::hash(&image2, 8, HashType::Gradient);      println!(""Image1 hash: {}"", hash1.to_base64());     println!(""Image2 hash: {}"", hash2.to_base64());      println!(""% Difference: {}"", hash1.dist_ratio(&hash2)); } Benchmarking In order to build and test on Rust stable, the benchmarks have to be placed behind a feature gate. If you have Rust nightly installed and want to run benchmarks, use the following command: cargo bench --features bench  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cybergeek94/img_hash"	"— Perceptual image hashing and comparison for equality and similarity."	"true"
"Image processing"	"PistonDevelopers/image"	"https://github.com/PistonDevelopers/image"	"— Basic imaging processing functions and methods for converting to and from image formats"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"327"	"76"	"104"	"GitHub - PistonDevelopers/image: Encoding and decoding images in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 76 Star 327 Fork 104 PistonDevelopers/image Code Issues 46 Pull requests 5 Pulse Graphs Encoding and decoding images in Rust 979 commits 3 branches 1 release 71 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master nwin-patch-1 Nothing to show v0.1 Nothing to show New pull request Latest commit 0e133ed Jul 2, 2016 nwin committed on GitHub Merge pull request #551 from philipc/bufread … Avoid using BufReader when loading from memory Permalink Failed to load latest commit information. benches Add more bmp benchmarks Jun 20, 2016 examples Use num's constituent crates. Apr 20, 2016 src Merge pull request #551 from philipc/bufread Jul 2, 2016 tests Merge pull request #551 from philipc/bufread Jul 2, 2016 .gitattributes Use gitattributes to specify behaviour of binary files Apr 1, 2015 .gitignore Ignore Cargo.lock Aug 3, 2014 .travis.yml Add hdr feature build test to travis Jun 18, 2016 CHANGES.md Update docs for 0.4. Oct 21, 2015 Cargo.toml Merge pull request #550 from red75prime/hdr_pr Jul 2, 2016 LICENSE Initial commit May 25, 2014 README.md Add support for encoding ICO files May 4, 2016 README.md Image Maintainers: @nwin, @ccgn How to contribute An Image Processing Library This crate provides basic imaging processing functions and methods for converting to and from image formats. All image processing functions provided operate on types that implement the GenericImage trait and return an ImageBuffer. Usage Add the following to the Cargo.toml in your project: [dependencies] image = ""*"" and import using extern crate: extern crate image;  //Use image:: 1. Documentation http://www.piston.rs/image/image/index.html 2. Supported Image Formats image provides implementations of common image format encoders and decoders. 2.1 Supported Image Formats Format Decoding Encoding PNG All supported color types Same as decoding JPEG Baseline and progressive Baseline JPEG GIF Yes Yes BMP Yes No ICO Yes Yes TIFF Baseline(no fax and packbits support) + LZW No Webp Lossy(Luma channel only) No PPM No Yes 2.2 The ImageDecoder Trait All image format decoders implement the ImageDecoder trait which provides the following methods: dimensions: Return a tuple containing the width and height of the image colortype: Return the color type of the image. row_len: Returns the length in bytes of one decoded row of the image read_scanline: Read one row from the image into buf Returns the row index read_image: Decode the entire image and return it as a Vector load_rect: Decode a specific region of the image 3 Pixels image provides the following pixel types: Rgb: RGB pixel Rgba: RGBA pixel Luma: Grayscale pixel LumaA: Grayscale with alpha All pixels are parameterised by their component type. 4 Images 4.1 The GenericImage Trait A trait that provides functions for manipulating images, parameterised over the image's pixel type. pub trait GenericImage {     /// The pixel type.     type Pixel: Pixel;      /// The width and height of this image.     fn dimensions(&self) -> (u32, u32);      /// The bounding rectangle of this image.     fn bounds(&self) -> (u32, u32, u32, u32);      /// Return the pixel located at (x, y)     fn get_pixel(&self, x: u32, y: u32) -> P;      /// Put a pixel at location (x, y)     fn put_pixel(&mut self, x: u32, y: u32, pixel: P);      /// Return an Iterator over the pixels of this image.     /// The iterator yields the coordinates of each pixel     /// along with their value     fn pixels(&self) -> Pixels<Self>; } 4.2 Representation of Images image provides two main ways of representing image data: 4.2.1 ImageBuffer An image parametarised by its Pixel types, represented by a width and height and a vector of pixels. It provides direct access to its pixels and implements the GenericImage trait. extern crate image;  use image::{     GenericImage,     ImageBuffer };   //Construct a new ImageBuffer with the specified width and height. let img = ImageBuffer::new(512, 512);  //Construct a new by repeated calls to the supplied closure. let img = ImageBuffer::from_fn(512, 512, |x, y| {     if x % 2 == 0 {         image::Luma([0u8])     } else {         image::Luma([255u8])     } });  //Obtain the image's width and height let (width, height) = img.dimensions();  //Access the pixel at coordinate (100, 100) let pixel = img[(100, 100)];  //or using the ```get_pixel``` method from the ```GenericImage``` trait let pixel = img.get_pixel(100, 100);  //Put a pixel at coordinate (100, 100) img.put_pixel(100, 100, pixel);  //Iterate over all pixels in the image for pixel in img.pixels() {     //Do something with pixel } 4.2.2 DynamicImage A DynamicImage is an enumeration over all supported ImageBuffer<P> types. Its exact image type is determined at runtime. It is the type returned when opening an image. For convenience DynamicImage's reimplement all image processing functions. DynamicImage implement the GenericImage trait for RGBA pixels. 4.2.3 SubImage A view into another image, delimited by the coordinates of a rectangle. This is used to perform image processing functions on a subregion of an image. extern crate image;  use image::{     GenericImage,     ImageBuffer,     imageops };  let ref mut img = ImageBuffer::new(512, 512); let subimg  = imageops::crop(img, 0, 0, 100, 100);  assert!(subimg.dimensions() == (100, 100)); 5 Image Processing Functions These are the functions defined in the imageops module. All functions operate on types that implement the GenericImage trait. blur: Performs a Gaussian blur on the supplied image. brighten: Brighten the supplied image contrast: Adjust the contrast of the supplied image crop: Return a mutable view into an image filter3x3: Perform a 3x3 box filter on the supplied image. flip_horizontal: Flip an image horizontally flip_vertical: Flip an image vertically grayscale: Convert the supplied image to grayscale invert: Invert each pixel within the supplied image This function operates in place. resize: Resize the supplied image to the specified dimensions rotate180: Rotate an image 180 degrees clockwise. rotate270: Rotate an image 270 degrees clockwise. rotate90: Rotate an image 90 degrees clockwise. unsharpen: Performs an unsharpen mask on the supplied image 6 Examples 6.1 Opening And Saving Images image provides the open function for opening images from a path. The image format is determined from the path's file extension. extern crate image;  use std::fs::File; use std::path::Path;  use image::GenericImage;  fn main() {     // Use the open function to load an image from a Path.     // ```open``` returns a dynamic image.     let img = image::open(&Path::new(""test.jpg"")).unwrap();      // The dimensions method returns the images width and height     println!(""dimensions {:?}"", img.dimensions());      // The color method returns the image's ColorType     println!(""{:?}"", img.color());      let ref mut fout = File::create(&Path::new(""test.png"")).unwrap();      // Write the contents of this image to the Writer in PNG format.     let _ = img.save(fout, image::PNG).unwrap(); } 6.2 Generating Fractals //!An example of generating julia fractals. extern crate num; extern crate image;  use std::fs::File; use std::path::Path;  use num::complex::Complex;  fn main() {     let max_iterations = 256u16;      let imgx = 800;     let imgy = 800;      let scalex = 4.0 / imgx as f32;     let scaley = 4.0 / imgy as f32;      // Create a new ImgBuf with width: imgx and height: imgy     let mut imgbuf = image::ImageBuffer::new(imgx, imgy);      // Iterate over the coordiantes and pixels of the image     for (x, y, pixel) in imgbuf.enumerate_pixels_mut() {         let cy = y as f32 * scaley - 2.0;         let cx = x as f32 * scalex - 2.0;          let mut z = Complex::new(cx, cy);         let c = Complex::new(-0.4, 0.6);          let mut i = 0;          for t in (0..max_iterations) {             if z.norm() > 2.0 {                 break             }             z = z * z + c;             i = t;         }          // Create an 8bit pixel of type Luma and value i         // and assign in to the pixel at position (x, y)         *pixel = image::Luma([i as u8]);      }       // Save the image as “fractal.png”     let ref mut fout = File::create(&Path::new(""fractal.png"")).unwrap();      // We must indicate the image’s color type and what format to save as     let _ = image::ImageLuma8(imgbuf).save(fout, image::PNG); } Example output: 6.3 Writing raw buffers If the high level interface is not needed because the image was obtained by other means, image provides the function save_buffer to save a buffer to a file. extern crate image;  fn main() {      let buffer: &[u8] = ...; // Generate the image data      // Save the buffer as ""image.png""     image::save_buffer(&Path::new(""image.png""), buffer, 800, 600, image::RGB(8)) }  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PistonDevelopers/image"	"— Basic imaging processing functions and methods for converting to and from image formats"	"true"
"Image processing"	""	"https://travis-ci.org/PistonDevelopers/image"	"— Basic imaging processing functions and methods for converting to and from image formats"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Basic imaging processing functions and methods for converting to and from image formats"	"true"
"Machine learning"	"machine learning"	"https://crates.io/keywords/machine-learning"	"— Basic imaging processing functions and methods for converting to and from image formats"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cargo This site requires that JavaScript to be enabled."	"null"	"null"	"— Basic imaging processing functions and methods for converting to and from image formats"	"true"
"Machine learning"	"About Rust’s Machine Learning Community"	"https://medium.com/@autumn_eng/about-rust-s-machine-learning-community-4cda5ec8a790#.hvkp56j3f"	"— Basic imaging processing functions and methods for converting to and from image formats"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"About Rust’s Machine Learning Community — Medium Homepage Sign in / Sign up 17 1 Autumn EngineeringBlockedUnblockFollowFollowing Creating Automated Decision Making Intelligence. Follow us on Github. github.com/autumnai Jan 64 min read About Rust’s Machine Learning Community The conversations on the introduction of the latest Rust Machine Learning crate, which was also the birthplace of the new rust-machine-learning IRC (thanks for the setup, @Argorak) lead to the essential question “What is this IRC all about?”. I thought it to be helpful to give a broad overview on the current affairs of Machine Learning in Rust, trying to fill the void that now exists and pushing Machine Learning in Rust forward. To us, Rust seems to be a worthy alternative to the big players in the field of Machine Learning, namely C++, Python and Lua. Rust’s unequaled trade-off between performance, control and convenient high-levelness, could prove that Machine Learning in Rust is more performant than the current state-of-the-art tools in C++ and Lua. While Rust is highly performant, it is at the same time comfortably accessible. At a certain stage, this could prove important, for the adoption of Rust and the Rust ML tools from various scientific fields outside of Rust. In fact, we spoke with a noticeable amount of physicist and also Machine Learners, who would use Rust for their work, if there only was, at least, something like numpy. But everyone interested in Rust and its scientific computation, Machine Learning and Artificial Intelligence soon realizes, that although the language, the community, and the concepts are all sound, the right tools just don’t exist, yet. The lack of mature crates for Machine Learning can demotivate even the longest long-term approaches, to consider Rust as the platform of their work. And as a Machine Learning Framework is essentially nothing more than a layer on top of very performant data management, computation and mathematic libraries it is very unfortunate that there are no solid building blocks for those either, which actually leads Machine Learning, Artificial Intelligence and other fields of scientific computation to the same dead end. I would hope, that the Rust Machine Learning community attracts people from different scientific fields to create the tools all parties of scientific computation will need. Summing up the current Machine Learning field, there are around 15 Rust Machine Learning libraries on Github, with the lion’s share of those abandoned and none of them in a stage where it would be safe to consider them for serious applications. (including our own Machine Intelligence Framework, Leaf). Experimentation would be apt to summarize the current state of Rust’s ML community. Following, a quick overview of the status of the more active repositories, to provide some hard facts. AtheMathmo/rusty-machine: (170 commits, 1 Contributor, 22 Stars, 0.1.0, active) maciejkula/rustlearn: (24 commits, 1 Contributor, 110 Stars, 0.2.0, active) autumnai/leaf: (68 commits, 5 Contributors, 835 Stars, 0.1.2, active) daniel-e/rustml: (318 commits, 1 Contributor, 10 Stars, 0.0.5, active? (Nov.15)) natal/frog: (25 commits, 2 Contributors, 11 Stars, ?, active? (Oct.15)) jramapuram/hal: (52 commits, 1 Contributor, 6 Stars, 0.1.0, active? (Sept.15)) The versions and amount of commits/contributors prove that none of the Frameworks are ready for show-time, yet. But the situation is even worse, as all frameworks implement their own data structures (Vector, Matrix, Tensor, ndArray) as something like numpy doesn’t exist in Rust, yet. Num seems to be the only crate the frameworks felt they could rely on. Worth mentioning here is ndarray which looks promising and could resolve the issue of a missing data structure crate. bluss/rust-ndarray: (534 commits, 2 Contributors, 41 Stars, 0.3.0-alpha2, active) On the scientific computation side, it hardly looks any better. Many, many repositories that tried to kick something off but unfortunately, went nowhere. So following a quick overview of the more actively looking projects in the field of scientific computation in Rust. autumnai/collenchyma: (94 commits, 5 Contributors, 113 Stars, 0.0.7, active) GuillaumeGomez/rust-GSL: (236 commits, 6 Contributors, 24 Stars, 0.4.25, active? (Nov.15)) indigits/scirust: (309 commits, 5 Contributors, 48 Stars, 0.0.5, active? (Sept.15)) sankha93/numrs: (40 commits, 1 Contributor, 4 Stars, 0.1.0, active? (Sept.15)) Like with the Machine Learning libraries, Num seems to be the only crate that seemed relevant enough to the scientific crates, that they would rely on it. One crate we think worth mentioning here as an example for a successful and valuable (I think) scientific computation framework, is rust-bio. rust-bio/rust-bio: (365 commits, 8 Contributors, 131 Stars, 0.3.20, active) Concluding, for now, ndarray seems to move into the right direction and would be highly valuable for Rust’s ML community. We at Autumn are looking forward engaging with ndarray and hope that it turns, in fact, into Rust’s very own numpy. Many important crates for computation and data management are still missing, though. But done right, we believe that those Rust crates could have significant improvements over similar projects in other languages. But keeping more of that, for another article. I hope, that the machine learning IRC helps us — the Rust ML community — to move from experimental to something we all feel confident of backing. Also, thanks to the initiative of @idadesub, @Argorak and @ttaubert there will be a Rust talk about Machine Learning, Leaf and Collenchyma in Berlin on February 3rd. This might be Rust’s first ML community get-together. MJ and hobofan Machine LearningArtificial IntelligenceRust 17 1 BlockedUnblockFollowFollowing Autumn Engineering Creating Automated Decision Making Intelligence. Follow us on Github. github.com/autumnai × Don’t miss Autumn Engineering’s next story BlockedUnblockFollowFollowing Autumn Engineering"	"null"	"null"	"— Basic imaging processing functions and methods for converting to and from image formats"	"true"
"Machine learning"	"AtheMathmo/rusty-machine"	"https://github.com/AtheMathmo/rusty-machine"	"— Machine learning library for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"189"	"20"	"18"	"GitHub - AtheMathmo/rusty-machine: Machine Learning library for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 189 Fork 18 AtheMathmo/rusty-machine Code Issues 6 Pull requests 1 Pulse Graphs Machine Learning library for Rust https://crates.io/crates/rusty-machine/ 413 commits 5 branches 17 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags convolution gh-pages k-means-example master paramul Nothing to show v0.4.0 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.8 v0.2.7 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.8 v0.1.7 v0.1.6 v0.1.5 Nothing to show New pull request Latest commit 7803047 Jul 11, 2016 AtheMathmo Updating README link in Cargo.toml Permalink Failed to load latest commit information. examples Linalg separation and v0.4.0 release (#101) Jul 11, 2016 src Linalg separation and v0.4.0 release (#101) Jul 12, 2016 tests Linalg separation and v0.4.0 release (#101) Jul 12, 2016 .gitignore Linalg separation and v0.4.0 release (#101) Jul 12, 2016 .mailmap .mailmap Apr 27, 2016 .travis.yml Linalg separation and v0.4.0 release (#101) Jul 12, 2016 CHANGELOG.md Linalg separation and v0.4.0 release (#101) Jul 12, 2016 CONTRIBUTING.md Linalg separation and v0.4.0 release (#101) Jul 12, 2016 Cargo.toml Updating README link in Cargo.toml Jul 11, 2016 DEVELOPMENT.md Linalg separation and v0.4.0 release (#101) Jul 12, 2016 LICENSE.md Updating with master. Updating exponential to use rand crate. Jan 24, 2016 README.md Linalg separation and v0.4.0 release (#101) Jul 12, 2016 README.md rusty-machine Here is the API documentation for the rust crate. Currently up to date for version 0.4.0. API Documentation And here is a document detailing development efforts. Including a projected timeline for immediate features. Please feel free to give feedback and let me know if there any features you believe should take precedence. Development Summary Rusty-machine is a general purpose machine learning library implemented entirely in Rust. It aims to combine speed and ease of use - without requiring a huge number of external dependencies. This project began as a way for me to learn Rust and brush up on some less familiar machine learning algorithms and techniques. Now the project aims to provide a complete, easy to use, machine learning library for Rust. This library is still very much in early stages of development. Although there are a good number of algorithms many other things are missing. Rusty-machine is probably not the best choice for any serious projects - but hopefully that can change in the near future! Contributing This project is currently looking for contributors of all capacities! I have now created a dedicated page for contributing. If you're interested please take a look. Implementation This project is implemented using Rust. Currently there are no other dependencies! Though, we are planning on introducing optional BLAS/LAPACK dependencies soon. Current Progress Rusty-machine uses rulinalg for its linear algebra back end. This is fairly complete but there is still lots of room for optimization and we should provide BLAS/LAPACK support. Machine Learning Linear Regression Logistic Regression Generalized Linear Models K-Means Clustering Neural Networks Gaussian Process Regression Support Vector Machines Gaussian Mixture Models Naive Bayes Classifiers There is also a basic stats module behind a feature flag. Usage The library usage is described well in the API documentation - including example code. I will provide a brief overview of the library in it's current state and intended usage. Installation The library is most easily used with cargo. Simply include the following in your Cargo.toml file: [dependencies] rusty-machine=""0.4.0"" And then import the library using: extern crate rusty_machine as rm; The library consists of two core components. The linear algebra module and the learning module. Linalg The linear algebra module contains reexports from the rulinalg crate. This is to provide easy access to components which are used frequently within rusty-machine. More detailed coverage can be found in the API documentation. Learning The learning module contains machine learning models. The machine learning implementations are designed with simpicity and customization in mind. This means you can control the optimization algorithms but still retain the ease of using default values. This is an area I am actively trying to improve on! The models all provide predict and train methods enforced by the SupModel and UnSupModel traits. There are some examples within this repository that can help you familiarize yourself with the library. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/AtheMathmo/rusty-machine"	"— Machine learning library for Rust"	"true"
"Machine learning"	""	"https://travis-ci.org/AtheMathmo/rusty-machine"	"— Machine learning library for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Machine learning library for Rust"	"true"
"Machine learning"	"autumnai/leaf"	"https://github.com/autumnai/leaf"	"— Open Machine Intelligence framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4228"	"180"	"169"	"GitHub - autumnai/leaf: Open Machine Intelligence Framework for Hackers. (GPU/CPU) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 180 Star 4,228 Fork 169 autumnai/leaf Code Issues 23 Pull requests 5 Pulse Graphs Open Machine Intelligence Framework for Hackers. (GPU/CPU) http://autumnai.com/leaf/book 163 commits 4 branches 6 releases Fetching contributors Rust 99.0% Other 1.0% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto gh-pages homu-tmp master Nothing to show 0.2.1 0.2.0 0.1.2 0.1.1 0.1.0 0.0.1 Nothing to show New pull request Latest commit 37d1994 Apr 28, 2016 homu Auto merge of #99 - radarhere:patch-1, r=MichaelHirn … Fixed typo Permalink Failed to load latest commit information. benches fix/benches: fix `cargo bench` compilation [SKIP_CHANGELOG] Mar 30, 2016 capnp feat/serialization: add serialization Apr 6, 2016 doc docs/readme: add leaf book to readme Apr 20, 2016 examples docs/features: add feature flags guide Mar 15, 2016 perf feat/everything: introduce most of the changes for 0.2.0 Feb 22, 2016 src Merge branch 'master' into book Apr 19, 2016 tests feat/serialization: add deserialization Apr 17, 2016 .clog.toml chore/changelog: add CHANGELOG Jan 22, 2016 .gitignore feat/serialization: add deserialization Apr 17, 2016 .travis.yml feat/serialization: add deserialization Apr 17, 2016 CHANGELOG.md docs/changelog: Fixed typo Apr 27, 2016 CONTRIBUTING.md docs/contributing: add commit message examples Feb 24, 2016 Cargo.toml chore/version: prepare for 0.2.1 release Apr 21, 2016 FEATURE-FLAGS.md docs/features: add feature flags guide Mar 15, 2016 LICENSE-APACHE feat/license: change license to dual MIT/Apache-2.0 Feb 22, 2016 LICENSE-MIT feat/license: change license to dual MIT/Apache-2.0 Feb 22, 2016 README.md chore/version: prepare for 0.2.1 release Apr 21, 2016 RELEASE.md chore/realease: fix release image Mar 4, 2016 build.rs feat/serialization: add serialization Apr 6, 2016 rustfmt.toml style(everything): rustfmt everything Oct 26, 2015 README.md Leaf • Introduction Leaf is a open Machine Learning Framework for hackers to build classical, deep or hybrid machine learning applications. It was inspired by the brilliant people behind TensorFlow, Torch, Caffe, Rust and numerous research papers and brings modularity, performance and portability to deep learning. Leaf has one of the simplest APIs, is lean and tries to introduce minimal technical debt to your stack. See the Leaf - Machine Learning for Hackers book for more. Leaf is a few months old, but thanks to its architecture and Rust, it is already one of the fastest Machine Intelligence Frameworks available. See more Deep Neural Networks benchmarks on Deep Learning Benchmarks. Leaf is portable. Run it on CPUs, GPUs, and FPGAs, on machines with an OS, or on machines without one. Run it with OpenCL or CUDA. Credit goes to Collenchyma and Rust. Leaf is part of the Autumn Machine Intelligence Platform, which is working on making AI algorithms 100x more computational efficient. We see Leaf as the core of constructing high-performance machine intelligence applications. Leaf's design makes it easy to publish independent modules to make e.g. deep reinforcement learning, visualization and monitoring, network distribution, automated preprocessing or scaleable production deployment easily accessible for everyone. Disclaimer: Leaf is currently in an early stage of development. If you are experiencing any bugs with features that have been implemented, feel free to create a issue. Getting Started Documentation To learn how to build classical, deep or hybrid machine learning applications with Leaf, check out the Leaf - Machine Learning for Hackers book. For additional information see the Rust API Documentation or the Autumn Website. Or start by running the Leaf examples. We are providing a Leaf examples repository, where we and others publish executable machine learning models build with Leaf. It features a CLI for easy usage and has a detailed guide in the project README.md. Leaf comes with an examples directory as well, which features popular neural networks (e.g. Alexnet, Overfeat, VGG). To run them on your machine, just follow the install guide, clone this repoistory and then run # The examples currently require CUDA support. cargo run --release --no-default-features --features cuda --example benchmarks alexnet Installation Leaf is build in Rust. If you are new to Rust you can install Rust as detailed here. We also recommend taking a look at the official Rust - Getting Started Guide. To start building a machine learning application (Rust only for now. Wrappers are welcome) and you are using Cargo, just add Leaf to your Cargo.toml: [dependencies] leaf = ""0.2.1"" If you are on a machine that doesn't have support for CUDA or OpenCL you can selectively enable them like this in your Cargo.toml: [dependencies] leaf = { version = ""0.2.1"", default-features = false }  [features] default = [""native""] # include only the ones you want to use, in this case ""native"" native  = [""leaf/native""] cuda    = [""leaf/cuda""] opencl  = [""leaf/opencl""] More information on the use of feature flags in Leaf can be found in FEATURE-FLAGS.md Contributing If you want to start hacking on Leaf (e.g. adding a new Layer) you should start with forking and cloning the repository. We have more instructions to help you get started in the CONTRIBUTING.md. We also has a near real-time collaboration culture, which happens here on Github and on the Leaf Gitter Channel. Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as below, without any additional terms or conditions. Ecosystem / Extensions We designed Leaf and the other crates of the Autumn Platform to be as modular and extensible as possible. More helpful crates you can use with Leaf: Cuticula: Preprocessing Framework for Machine Learning Collenchyma: Portable, HPC-Framework on any hardware with CUDA, OpenCL, Rust Support / Contact With a bit of luck, you can find us online on the #rust-machine-learning IRC at irc.mozilla.org, but we are always approachable on Gitter/Leaf For bugs and feature request, you can create a Github issue For more private matters, send us email straight to our inbox: developers@autumnai.com Refer to Autumn for more information Changelog You can find the release history at the CHANGELOG.md. We are using Clog, the Rust tool for auto-generating CHANGELOG files. License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/autumnai/leaf"	"— Open Machine Intelligence framework."	"true"
"Machine learning"	""	"https://travis-ci.org/autumnai/leaf"	"— Open Machine Intelligence framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Open Machine Intelligence framework."	"true"
"Machine learning"	"maciejkula/rustlearn"	"https://github.com/maciejkula/rustlearn"	"— Machine learning crate for Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"150"	"13"	"5"	"GitHub - maciejkula/rustlearn: Machine learning crate for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 150 Fork 5 maciejkula/rustlearn Code Issues 3 Pull requests 0 Pulse Graphs Machine learning crate for Rust 39 commits 5 branches 2 releases 2 contributors Rust 97.1% Python 2.9% Rust Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags compressed_sparse_mat gh-pages libsvm master roc_auc_score Nothing to show 0.3.1 0.2.0 Nothing to show New pull request Latest commit 3643e62 Jul 13, 2016 maciejkula committed on GitHub Fix most clippy warning.s Permalink Failed to load latest commit information. dependencies/libsvm Add libsvm bindings and C-SVC model. Dec 14, 2015 examples Add the DOROTHEA dataset example. Dec 6, 2015 pythontests Add ROC AUC score function. Dec 22, 2015 scripts Add cicle.yml. Dec 4, 2015 src Fix most clippy warning.s Jul 13, 2016 test_data/newsgroups Initial public commit. Dec 3, 2015 .gitignore Add ROC AUC score function. Dec 22, 2015 Cargo.toml Bump bincode to fix upstream breakage. Mar 1, 2016 LICENSE Initial public commit. Dec 3, 2015 build.rs Add libsvm bindings and C-SVC model. Dec 14, 2015 changelog.md Bump bincode to fix upstream breakage. Mar 1, 2016 circle.yml Move all benchmarks to conditional modules. Dec 4, 2015 readme.md Update readme.md Jan 17, 2016 readme.md rustlearn A machine learning package for Rust. For full usage details, see the API documentation. Introduction This crate is mostly an excuse for me to learn Rust. Nevertheless, it contains reasonably effective implementations of a number of common machine learning algorithms. At the moment, rustlearn uses its own basic dense and sparse array types, but I will be happy to use something more robust once a clear winner in that space emerges. Features Matrix primitives dense matrices sparse matrices Models logistic regression using stochastic gradient descent, support vector machines using the libsvm library, decision trees using the CART algorithm, and random forests using CART decision trees. All the models support fitting and prediction on both dense and sparse data, and the implementations should be roughly competitive with Python sklearn implementations, both in accuracy and performance. Cross-validation k-fold cross-validation shuffle split Metrics accuracy ROC AUC score Model serialization Model serialization is supported via rustc_serialize. This will probably change to serde once compiler plugins land in stable. Using rustlearn Usage should be straightforward. import the prelude for alll the linear algebra primitives and common traits: use rustlearn::prelude::*; import individual models and utilities from submodules: use rustlearn::prelude::*;  use rustlearn::linear_models::sgdclassifier::Hyperparameters; // more imports Examples Logistic regression use rustlearn::prelude::*; use rustlearn::datasets::iris; use rustlearn::cross_validation::CrossValidation; use rustlearn::linear_models::sgdclassifier::Hyperparameters; use rustlearn::metrics::accuracy_score;   let (X, y) = iris::load_data();  let num_splits = 10; let num_epochs = 5;  let mut accuracy = 0.0;  for (train_idx, test_idx) in CrossValidation::new(X.rows(), num_splits) {      let X_train = X.get_rows(&train_idx);     let y_train = y.get_rows(&train_idx);     let X_test = X.get_rows(&test_idx);     let y_test = y.get_rows(&test_idx);      let mut model = Hyperparameters::new(X.cols())                                     .learning_rate(0.5)                                     .l2_penalty(0.0)                                     .l1_penalty(0.0)                                     .one_vs_rest();      for _ in 0..num_epochs {         model.fit(&X_train, &y_train).unwrap();     }      let prediction = model.predict(&X_test).unwrap();     accuracy += accuracy_score(&y_test, &prediction); }  accuracy /= num_splits as f32;  Random forest use rustlearn::prelude::*;  use rustlearn::ensemble::random_forest::Hyperparameters; use rustlearn::datasets::iris; use rustlearn::trees::decision_tree;  let (data, target) = iris::load_data();  let mut tree_params = decision_tree::Hyperparameters::new(data.cols()); tree_params.min_samples_split(10)     .max_features(4);  let mut model = Hyperparameters::new(tree_params, 10)     .one_vs_rest();  model.fit(&data, &target).unwrap();  // Optionally serialize and deserialize the model  // let encoded = bincode::rustc_serialize::encode(&model, //                                                bincode::SizeLimit::Infinite).unwrap(); // let decoded: OneVsRestWrapper<RandomForest> = bincode::rustc_serialize::decode(&encoded).unwrap();  let prediction = model.predict(&data).unwrap(); Contributing Pull requests are welcome. To run basic tests, run cargo test. Running cargo test --features ""all_tests"" --release runs all tests, including generated and slow tests. Running cargo bench --features bench (only on the nightly branch) runs benchmarks. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/maciejkula/rustlearn"	"— Machine learning crate for Rust."	"true"
"Machine learning"	""	"https://circleci.com/gh/maciejkula/rustlearn"	"— Machine learning crate for Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Continuous Integration and Deployment Hello there noscripter! CircleCI uses JavaScript pretty heavily to provide a good experience and to allow us to develop code a lot faster. We recognize that the tradeoff is that people using noscript get a worse experience, and we apologize for that. So let us pitch you quickly on why you should enable JavaScript and view our site. CircleCI is powerful, fast, and easy-to-use Continuous Integration and Deployment for web applications. CircleCI is easy to set up, incredibly fast, allows you to get your code to customers faster, and will even automatically parallelize your tests over many machines to get results to you faster. If that sounds useful, we'd encourage you to whitelist us in noscript and read about it yourself :)"	"null"	"null"	"— Machine learning crate for Rust."	"true"
"Markup language"	"google/pulldown-cmark"	"https://github.com/google/pulldown-cmark"	"— parser in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"228"	"17"	"28"	"GitHub - google/pulldown-cmark Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 228 Fork 28 google/pulldown-cmark Code Issues 10 Pull requests 4 Pulse Graphs No description or website provided. 77 commits 2 branches 2 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags issue20 master Nothing to show v0.0.6 v0.0.5 Nothing to show New pull request Latest commit c6b4b5a Apr 11, 2016 raphlinus Add flags to regex … Support for flags. A fairly major change, as we had to add new parse nodes and VM insns to support the new options. In addition, parsing is now done without regexes, because dealing with optional whitespace and comments in a regex would be painful (though not at all impossible).  Also, some minor fixes, making things more robust, and more tests, as well as a bit more writeup in the README. Permalink Failed to load latest commit information. fancy-regex specs src tools Change license to MIT Aug 10, 2015 .gitignore CONTRIBUTING.md Cargo.toml LICENSE README.md README.md pulldown-cmark This library is a pull parser for CommonMark, written in Rust. It comes with a simple command-line tool, useful for rendering to HTML, and is also designed to be easy to use from as a library. It is designed to be: Fast; a bare minimum of allocation and copying Safe; written in pure Rust with no unsafe blocks Versatile; in particular source-maps are supported Correct; the goal is 100% compliance with the CommonMark spec Why a pull parser? There are many parsers for Markdown and its variants, but to my knowledge none use pull parsing. Pull parsing has become popular for XML, especially for memory-conscious applications, because it uses dramatically less memory than construcing a document tree, but is much easier to use than push parsers. Push parsers are notoriously difficult to use, and also often error-prone because of the need for user to delicately juggle state in a series of callbacks. In a clean design, the parsing and rendering stages are neatly separated, but this is often sacrificed in the name of performance and expedience. Many Markdown implementations mix parsing and rendering together, and even designs that try to separate them (such as the popular hoedown), make the assumption that the rendering process can be fully represented as a serialized string. Pull parsing is in some sense the most versatile architecture. It's possible to drive a push interface, also with minimal memory, and quite straightforward to construct an AST. Another advantage is that source-map information (the mapping between parsed blocks and offsets within the source text) is readily available; you basically just call get_offset() as you consume events. While manipulating AST's is the most flexible way to transform documents, operating on iterators is surprisingly easy, and quite efficient. Here, for example, is the code to transform soft line breaks into hard breaks: let parser = parser.map(|event| match event {     Event::SoftBreak => Event::HardBreak,     _ => event }); Or expanding an abbreviation in text: let parser = parser.map(|event| match event {     Event::Str(text) => Event::Str(text.replace(""abbr"", ""abbreviation"")),     _ => event }); Another simple example is code to determine the max nesting level: let mut max_nesting = 0; let mut level = 0; for event in parser {     match event {         Event::Start(_) => {             level += 1;             max_nesting = std::cmp::max(max_nesting, level);         }         Event::End(_) => level -= 1,         _ => ()     } } Using Rust idiomatically A lot of the internal scanning code is written at a pretty low level (it pretty much scans byte patterns for the bits of syntax), but the external interface is designed to be idiomatic Rust. Pull parsers are at heart an iterator of events (start and end tags, text, and other bits and pieces). The parser data structure implements the Rust Iterator trait directly, and Event is an enum. Thus, you can use the full power and expressivity of Rust's iterator infrastructure, including for loops and map (as in the examples above), collecting the events into a vector (for recording, playback, and manipulation), and more. Further, the Str event (representing text) is a copy-on-write string (note: this isn't quite true yet). The vast majority of text fragments are just slices of the source document. For these, copy-on-write gives a convenient representation that requires no allocation or copying, but allocated strings are available when they're needed. Thus, when rendering text to HTML, most text is copied just once, from the source document to the HTML buffer. Authors The main author is Raph Levien. Contributions We gladly accept contributions via GitHub pull requests, as long as the author has signed the Google Contributor License. Please see CONTRIBUTIONS.md for more details. Disclaimer This is not an official Google product (experimental or otherwise), it is just code that happens to be owned by Google. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/pulldown-cmark"	"— parser in Rust"	"true"
"Markup language"	"CommonMark"	"http://commonmark.org/"	"— parser in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3113"	"140"	"177"	"GitHub - jgm/CommonMark: CommonMark spec, with reference implementations in C and JavaScript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 140 Star 3,113 Fork 177 jgm/CommonMark Code Issues 18 Pull requests 2 Wiki Pulse Graphs CommonMark spec, with reference implementations in C and JavaScript http://commonmark.org 1,618 commits 3 branches 21 releases 57 contributors Python 96.6% Makefile 3.4% Python Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master mom newformat Nothing to show 0.26 0.25 0.24 0.23 0.22 0.21.1 0.21 0.20 0.19 0.18 0.17 0.16 0.15 0.14 0.13 0.12 0.11 0.10 0.9 0.7 0.6 Nothing to show New pull request Latest commit 91e045c Jul 15, 2016 jgm Bump version to 0.26, update changelog. Permalink Failed to load latest commit information. test spec_tests.py: exit code is sum of failures and errors. Jun 2, 2016 tools make interact more button-like and clearer Jun 4, 2016 .editorconfig Removed JS specific stuff from .editorconfig. Jan 24, 2015 .gitignore Added spec.html to .gitignore. Jun 26, 2015 CommonMark.dtd CommonMark.dtd - allow item in custom_block. Dec 31, 2015 LICENSE Update license year range to 2016 Jan 26, 2016 Makefile New format for spec tests, new lua formatter for specs. Jan 10, 2016 README.md Add closing paranthesis to README.md Mar 16, 2016 alternative-html-blocks.txt Initial commit Aug 13, 2014 changelog.txt Bump version to 0.26, update changelog. Jul 15, 2016 spec.txt Bump version to 0.26, update changelog. Jul 15, 2016 README.md CommonMark CommonMark is a rationalized version of Markdown syntax, with a spec and BSD-licensed reference implementations in C and JavaScript. Try it now! For more details, see http://commonmark.org. This repository contains the spec itself, along with tools for running tests against the spec, and for creating HTML and PDF versions of the spec. The reference implementations live in separate repositories: https://github.com/jgm/cmark (C) https://github.com/jgm/commonmark.js (JavaScript) There is a list of third-party libraries in a dozen different languages here. Running tests against the spec The spec contains over 500 embedded examples which serve as conformance tests. To run the tests using an executable $PROG: python3 test/spec_tests.py --program $PROG  If you want to extract the raw test data from the spec without actually running the tests, you can do: python3 test/spec_tests.py --dump-tests  and you'll get all the tests in JSON format. The spec The source of the spec is spec.txt. This is basically a Markdown file, with code examples written in a shorthand form: ```````````````````````````````` example Markdown source . expected HTML output ````````````````````````````````  To build an HTML version of the spec, do make spec.html. To build a PDF version, do make spec.pdf. For both versions, you must have the lua rock lcmark installed: after installing lua and lua rocks, luarocks install lcmark. For the PDF you must also have xelatex installed. The spec is written from the point of view of the human writer, not the computer reader. It is not an algorithm---an English translation of a computer program---but a declarative description of what counts as a block quote, a code block, and each of the other structural elements that can make up a Markdown document. Because John Gruber's canonical syntax description leaves many aspects of the syntax undetermined, writing a precise spec requires making a large number of decisions, many of them somewhat arbitrary. In making them, we have appealed to existing conventions and considerations of simplicity, readability, expressive power, and consistency. We have tried to ensure that ""normal"" documents in the many incompatible existing implementations of Markdown will render, as far as possible, as their authors intended. And we have tried to make the rules for different elements work together harmoniously. In places where different decisions could have been made (for example, the rules governing list indentation), we have explained the rationale for our choices. In a few cases, we have departed slightly from the canonical syntax description, in ways that we think further the goals of Markdown as stated in that description. For the most part, we have limited ourselves to the basic elements described in Gruber's canonical syntax description, eschewing extensions like footnotes and definition lists. It is important to get the core right before considering such things. However, we have included a visible syntax for line breaks and fenced code blocks. Differences from original Markdown There are only a few places where this spec says things that contradict the canonical syntax description: It allows all punctuation symbols to be backslash-escaped, not just the symbols with special meanings in Markdown. We found that it was just too hard to remember which symbols could be escaped. It introduces an alternative syntax for hard line breaks, a backslash at the end of the line, supplementing the two-spaces-at-the-end-of-line rule. This is motivated by persistent complaints about the “invisible” nature of the two-space rule. Link syntax has been made a bit more predictable (in a backwards-compatible way). For example, Markdown.pl allows single quotes around a title in inline links, but not in reference links. This kind of difference is really hard for users to remember, so the spec allows single quotes in both contexts. The rule for HTML blocks differs, though in most real cases it shouldn't make a difference. (See the section on HTML Blocks for details.) The spec's proposal makes it easy to include Markdown inside HTML block-level tags, if you want to, but also allows you to exclude this. It is also makes parsing much easier, avoiding expensive backtracking. It does not collapse adjacent bird-track blocks into a single blockquote: > this is two  > blockquotes  > this is a single > > blockquote with two paragraphs  Rules for content in lists differ in a few respects, though (as with HTML blocks), most lists in existing documents should render as intended. There is some discussion of the choice points and differences in the subsection of List Items entitled Motivation. We think that the spec's proposal does better than any existing implementation in rendering lists the way a human writer or reader would intuitively understand them. (We could give numerous examples of perfectly natural looking lists that nearly every existing implementation flubs up.) The spec stipulates that two blank lines break out of all list contexts. This is an attempt to deal with issues that often come up when someone wants to have two adjacent lists, or a list followed by an indented code block. Changing bullet characters, or changing from bullets to numbers or vice versa, starts a new list. We think that is almost always going to be the writer's intent. The number that begins an ordered list item may be followed by either . or ). Changing the delimiter style starts a new list. The start number of an ordered list is significant. Fenced code blocks are supported, delimited by either backticks (```) or tildes (~~~). Contributing There is a forum for discussing CommonMark; you should use it instead of github issues for questions and possibly open-ended discussions. Use the github issue tracker only for simple, clear, actionable issues. Authors The spec was written by John MacFarlane, drawing on his experience writing and maintaining Markdown implementations in several languages, including the first Markdown parser not based on regular expression substitutions (pandoc) and the first markdown parsers based on PEG grammars (peg-markdown, lunamark) a detailed examination of the differences between existing Markdown implementations using BabelMark 2, and extensive discussions with David Greenspan, Jeff Atwood, Vicent Marti, Neil Williams, and Benjamin Dumke-von der Ehe. Since the first announcement, many people have contributed ideas. Kārlis Gaņģis was especially helpful in refining the rules for emphasis, strong emphasis, links, and images. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jgm/CommonMark"	"— parser in Rust"	"true"
"Mobile"	"tomaka/android-rs-glue"	"https://github.com/tomaka/android-rs-glue"	"— glue between Rust and Android"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"279"	"32"	"30"	"GitHub - tomaka/android-rs-glue: Glue between Rust and Android Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 279 Fork 30 tomaka/android-rs-glue Code Issues 19 Pull requests 1 Pulse Graphs Glue between Rust and Android 234 commits 1 branch 0 releases 14 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 91359a4 Jul 13, 2016 tomaka committed on GitHub Merge pull request #110 from Thraein/master … Additional configurations for AndroidManifest Permalink Failed to load latest commit information. cargo-apk Add multiple configurations for AndroidManifest Jul 12, 2016 examples Icon example Jul 12, 2016 glue Fix 'load_asset' May 12, 2016 .gitignore Initial commit Sep 5, 2014 .travis.yml Bump to 0.1.0 and publish cargo-apk on build success Apr 20, 2016 LICENSE Initial commit Sep 5, 2014 README.md Update README Apr 17, 2016 README.md Usage Setting up your environment Before you can compile for Android, you need to setup your environment. This needs to be done only once per system. Install rustup. Run rustup target add arm-linux-androideabi, or any other target that you want to compile to. Install the Java JDK and Ant (on Ubuntu, sudo apt-get install openjdk-8-jdk ant) Download and unzip the Android NDK Download and unzip the Android SDK (under SDK Tools Only at the bottom) Update the SDK: ./android-sdk-linux/tools/android update sdk -u Install cargo-apk with cargo install cargo-apk. Compiling Run cargo apk. This will build an Android package in target/android-artifacts/build/bin. Testing on an Android emulator Start the emulator, then run: adb install -r target/your_crate This will install your application on the emulator. Interfacing with Android An application is not very useful if it doesn't have access to the screen, the user inputs, etc. The android_glue crate provides FFI with the Android environment for things that are not in the stdlib. How it works The build process The build process works by invoking cargo rustc and: Always compiles your crate as a shared library. Injects the android_native_app_glue file provided by the Android NDK. Injects some glue libraries in Rust, which ties the link between android_native_app_glue and the main function of your crate. This first step outputs a shared library, and is run once per target architecture. The command then sets up an Android build environment, which includes some Java code, in target/android-artifacts and puts the shared libraries in it. Then it runs ant. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tomaka/android-rs-glue"	"— glue between Rust and Android"	"true"
"Mobile"	""	"https://travis-ci.org/tomaka/android-rs-glue"	"— glue between Rust and Android"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— glue between Rust and Android"	"true"
"Mobile"	"TimNN/cargo-lipo"	"https://github.com/TimNN/cargo-lipo"	"— a cargo lipo subcommand which automatically creates a universal library for use with your iOS application."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"11"	"1"	"1"	"GitHub - TimNN/cargo-lipo: Cargo subcommand to automatically create universal libraries for iOS. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 11 Fork 1 TimNN/cargo-lipo Code Issues 0 Pull requests 0 Pulse Graphs Cargo subcommand to automatically create universal libraries for iOS. 11 commits 1 branch 1 release 1 contributor Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.0 Nothing to show New pull request Latest commit f6eef4e Mar 29, 2016 TimNN better toml placeholder Permalink Failed to load latest commit information. src update clap app config Mar 29, 2016 .gitignore unignore Cargo.lock Mar 29, 2016 .travis.yml test with rust starting at version 1.7 Mar 29, 2016 Cargo.lock unignore Cargo.lock Mar 29, 2016 Cargo.toml dual licence under apache/mit Mar 29, 2016 LICENSE-APACHE dual licence under apache/mit Mar 29, 2016 LICENSE-MIT dual licence under apache/mit Mar 29, 2016 README.md better toml placeholder Mar 29, 2016 README.md cargo lipo Provides a cargo lipo subcommand which automatically creates a universal library for use with your iOS application. Usage From anywhere you would usually run cargo you can now run cargo lipo or cargo lipo --release to create a universal library for ios, which can be found in $target/universal/{release|debug}/$lib_name.a. Make sure you have a library target in your Cargo.toml with a crate type of staticlib: [lib] name = ""..."" crate-type = [""staticlib""] Installation Install cargo lipo with cargo install cargo-lipo. cargo lipo can be build with rust 1.7 and later. You also need a rust compiler which can compile for the iOS targets. If you use rustup all you should have to do is rustup target add aarch64-apple-ios rustup target add armv7-apple-ios rustup target add armv7s-apple-ios rustup target add i386-apple-ios rustup target add x86_64-apple-ios If you use a recent version of multirust multirust add-target aarch64-apple-ios multirust add-target armv7-apple-ios multirust add-target armv7s-apple-ios multirust add-target i386-apple-ios multirust add-target x86_64-apple-ios should work. Note: both will only work on stable starting with the 1.8 release. Alternatively you can build a rust compiler with iOS support yourself. Troubleshooting Cargo fails with error: can't find crate for `std`: Your rust compiler most likely does not support cross-compiling to iOS. License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TimNN/cargo-lipo"	"— a cargo lipo subcommand which automatically creates a universal library for use with your iOS application."	"true"
"Mobile"	""	"https://travis-ci.org/TimNN/cargo-lipo"	"— a cargo lipo subcommand which automatically creates a universal library for use with your iOS application."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a cargo lipo subcommand which automatically creates a universal library for use with your iOS application."	"true"
"Mobile"	"vhbit/ObjCrust"	"https://github.com/vhbit/ObjCrust"	"— using Rust to create an iOS static library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"2"	"8"	"GitHub - vhbit/ObjCrust: Using Rust to create an iOS static library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 36 Fork 8 vhbit/ObjCrust forked from shilgapira/ObjCrust Code Pull requests 0 Pulse Graphs Using Rust to create an iOS static library 19 commits 3 branches 1 release 3 contributors Objective-C 46.0% Rust 25.6% Shell 16.9% C 6.5% Makefile 5.0% Objective-C Rust Shell C Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags arm64-device files-arm64 master Nothing to show 0.0.1 Nothing to show New pull request Pull request Compare This branch is 14 commits ahead, 2 commits behind shilgapira:master. Latest commit 06dbc10 Jul 4, 2015 vhbit Switched to cargo builds Permalink Failed to load latest commit information. Rust Switched to cargo builds Jul 4, 2015 iOS Switched to cargo builds Jul 4, 2015 .gitignore Switched to cargo builds Jul 4, 2015 README.md Updated README for recent changes Jan 9, 2015 README.md ObjCrust A modified ObjCrust which uses Rust cross-compiler. Cross-compiler needs to be built first (note: it is on a separate branch now, so don't forget to checkout it before building). Requires Xcode 5 and the iOS 7 SDK. Based on doublec/rust-from-c-example Usage git clone https://github.com/vhbit/ObjCrust.git change CROSS_IOS_RUST_ROOT to your local cross compiler root cd ObjCrust/Rust make cd ../iOS open ObjCrust.xcodeproj Build and run in Xcode Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vhbit/ObjCrust"	"— using Rust to create an iOS static library"	"true"
"Mobile"	""	"https://travis-ci.org/vhbit/ObjCrust"	"— using Rust to create an iOS static library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— using Rust to create an iOS static library"	"true"
"Mobile"	"andars/pebble.rs"	"https://github.com/andars/pebble.rs"	"— a crate that allows Rust to be used to develop Pebble applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"30"	"5"	"0"	"GitHub - andars/pebble.rs: rust on pebble - functional with limited capabilities Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 30 Fork 0 andars/pebble.rs Code Issues 1 Pull requests 0 Pulse Graphs rust on pebble - functional with limited capabilities 16 commits 1 branch 0 releases Fetching contributors Rust 96.5% Shell 3.5% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 89bf37e Nov 18, 2015 andars remove aebi memset for now & update readme Permalink Failed to load latest commit information. liballoc_system src .gitignore Cargo.toml Cargo.toml.alloc Cargo.toml.alloc_system Cargo.toml.core Add liballoc to the mix Nov 16, 2015 README.md arm-none-eabi.json build.sh README.md Pebble.rs Pebble.rs is a crate that allows rust to be used to develop Pebble applications. It is compatible with SDK 3.0 and is known to work on the aplite platform. It should also work on basalt, but I don't currently have one to test. To see an example application using Pebble.rs, look here. This is very much a work in progress and currently has very limited capabilities. But it does work ;) NOTE: As of now, this library requires a patch to the pebble sdk. When bundling the app, the pebble sdk parses the output of readelf with the assumption that there will never be more than 100 sections. Some example lines from readelf:   [ 1] .header           PROGBITS        00000000 008000 000082 00   A  0   0  1   [11] .data             PROGBITS        00000e60 008e60 0000b4 00  WA  0   0  4  Note that the close bracket is at index 5 in both cases. As a result, in the process of parsing, the pebble sdk uses line[6:]. When the second numbers get to 3 digits, however, the close bracket is no longer in position 6, which breaks the bundling process. Paths are relative to root of pebble sdk. In file Pebble/.waf-1.7.11-cf7e1a867a97a34ac27942862f927bc2/waflib/extras/inject_metadata.py (not sure if that hash changes, if it does update it to yours): Change line = line[6:]  on line 71 to if not ']' in line:     continue line=line[line.index(']')+1:]  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/andars/pebble.rs"	"— a crate that allows Rust to be used to develop Pebble applications."	"true"
"Network programming"	"mattnenterprise/rust-ftp"	"https://github.com/mattnenterprise/rust-ftp"	"— an client for Rust"	"null"	"null"	"null"	"FTP"	"https://en.wikipedia.org/wiki/File_Transfer_Protocol"	"null"	"null"	"19"	"6"	"11"	"GitHub - mattnenterprise/rust-ftp: FTP client for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 19 Fork 11 mattnenterprise/rust-ftp Code Issues 5 Pull requests 1 Pulse Graphs FTP client for Rust 99 commits 3 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags add_testing gh-pages master Nothing to show Nothing to show New pull request Latest commit a6ad79f Jun 15, 2016 mattnenterprise Adding creates.io badge Permalink Failed to load latest commit information. examples Merge pull request #34 from matt2xu/pasv Feb 29, 2016 src Panic on SSL context creation fail Apr 10, 2016 tests added simple upload test, fixed pasv method and anonymous login Mar 31, 2016 .gitignore Rename FTPStream, support multiple line replies, add buffered read Feb 9, 2016 .travis.yml Only doing stable build Apr 6, 2016 CHANGELOG.md Update CHANGELOG Apr 8, 2016 Cargo.toml Putting licenses in ABC order Jun 15, 2016 LICENSE-APACHE Relicense to dual MIT/Apache-2.0 Jan 10, 2016 LICENSE-MIT Relicense to dual MIT/Apache-2.0 Jan 11, 2016 README.md Adding creates.io badge Jun 15, 2016 README.md rust-ftp FTP client for Rust Documentation Installation Add ftp via your Cargo.toml [dependencies] ftp = ""*"" FTPS support is disabled by default. To enable it secure should be activated in Cargo.toml. [dependencies] ftp = { version = ""*"", features = [""secure""] } Usage extern crate ftp;  use std::str; use std::io::Cursor; use ftp::FtpStream;  fn main() {     let mut ftp_stream = match FtpStream::connect(""127.0.0.1"", 21) {         Ok(s) => s,         Err(e) => panic!(""{}"", e)     };      match ftp_stream.login(""username"", ""password"") {         Ok(_) => (),         Err(e) => panic!(""{}"", e)     }      match ftp_stream.current_dir() {         Ok(dir) => println!(""{}"", dir),         Err(e) => panic!(""{}"", e)     }      match ftp_stream.change_dir(""test_data"") {         Ok(_) => (),         Err(e) => panic!(""{}"", e)     }      //An easy way to retreive a file     let remote_file = match ftp_stream.simple_retr(""ftpext-charter.txt"") {         Ok(file) => file,         Err(e) => panic!(""{}"", e)     };      match str::from_utf8(&remote_file.into_inner()) {         Ok(s) => print!(""{}"", s),         Err(e) => panic!(""Error reading file data: {}"", e)     };      //Store a file     let file_data = format!(""Some awesome file data man!!"");     let reader: &mut Cursor<Vec<u8>> = &mut Cursor::new(file_data.into_bytes());     match ftp_stream.stor(""my_random_file.txt"", reader) {         Ok(_) => (),         Err(e) => panic!(""{}"", e)     }      let _ = ftp_stream.quit(); }  License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mattnenterprise/rust-ftp"	"— an client for Rust"	"true"
"Network programming"	""	"https://travis-ci.org/mattnenterprise/rust-ftp"	"— an client for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— an client for Rust"	"true"
"Network programming"	"libpnet/libpnet"	"https://github.com/libpnet/libpnet"	"— a cross-platform, low level networking"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"327"	"23"	"55"	"GitHub - libpnet/libpnet: Cross-platform, low level networking using the Rust programming language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 327 Fork 55 libpnet/libpnet Code Issues 34 Pull requests 2 Pulse Graphs Cross-platform, low level networking using the Rust programming language. 398 commits 2 branches 3 releases 24 contributors Rust 96.3% Shell 1.5% C 1.5% Other 0.7% Rust Shell C Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto master Nothing to show v0.12.0 v0.11.1 v0.11.0 Nothing to show New pull request Latest commit ab6ed4f Jul 15, 2016 homu Auto merge of #193 - moosingin3space:feature/read-write-timeouts, r=m… … …rmonday  Implemented read and write timeouts  WinPcap is not supported here.  Needs unit tests and other platform backends. - [x] Linux backend - [x] BPF backend - [x] Netmap backend - [x] Cross-platform unit tests Permalink Failed to load latest commit information. benches Make channel take Config ownership Jul 11, 2016 examples Make channel take Config ownership Jul 11, 2016 pnet_macros Version bump Jul 12, 2016 pnet_macros_plugin Introduce syntex to enable libpnet to work on beta Rust. Jan 2, 2016 pnet_macros_support Auto merge of #135 - mrmonday:fix-appveyor, r=mrmonday Dec 6, 2015 src relax libc version restrictions Jul 14, 2016 .gitignore relax libc version restrictions Jul 14, 2016 .travis.yml Add deprecated message, bump minimum rustc to 1.9 Jul 11, 2016 Cargo.toml relax libc version restrictions Jul 14, 2016 LICENSE-APACHE Initial commit. Sep 2, 2014 LICENSE-MIT Begin support for supporting multiple DLTs Jan 24, 2016 Makefile Fix Travis on OS X. Feb 9, 2015 README.md Bump version to 0.12 Jul 14, 2016 appveyor.yml Add deprecated message, bump minimum rustc to 1.9 Jul 11, 2016 build.rs Basic implementation of GRE packets. Jun 15, 2016 build.sh icmp: catch up with upstream May 22, 2016 rustfmt.toml Initial rustfmt pass for libpnet. Nov 18, 2015 README.md libpnet Linux ∪ OS X Build Status: Windows Build Status: Discussion and support: #libpnet on freenode / #rust-networking on irc.mozilla.org / #rust on irc.mozilla.org. libpnet provides a cross-platform API for low level networking using Rust. There are four key components: The packet module, allowing safe construction and manipulation of packets The pnet_macros crate, providing infrastructure for the packet module The transport module, which allows implementation of transport protocols The datalink module, which allows sending and receiving data link packets directly Why? There are lots of reasons to use low level networking, and many more to do it using Rust. A few are outlined here: Developing Transport Protocols There are usually two ways to go about developing a new transport layer protocol: Write it in a scripting language such as Python Write it using C The former is great for trying out new ideas and rapid prototyping, however not so great as a real-world implementation. While you can usually get reasonable performance out of these implementations, they're generally significantly slower than an implementation in C, and not suitable for any ""heavy lifting"". The next option is to write it in C - this will give you great performance, but comes with a number of other issues: Lack of memory safety - this is a huge source of security vulnerabilities and other bugs in C-based network stacks. It is far too easy to forget a bounds check or use a pointer after it is freed. Lack of thread safety - you have to be very careful to make sure the correct locks are used, and used correctly. Lack of high level abstractions - part of the appeal of scripting languages such as Python is the higher level of abstraction which enables simpler APIs and ease of programming. Using libpnet and Rust, you get the best of both worlds. The higher level abstractions, memory and thread safety, alongside the performance of C. Network Utilities Many networking utilities such as ping and traceroute rely on being able to manipulate network and transport headers, which isn't possible with standard networking stacks such as those provided by std::io::net. Data Link Layer It can be useful to work directly at the data link layer, to see packets as they are ""on the wire"". There are lots of uses for this, including network diagnostics, packet capture and traffic shaping. Documentation API documentation for the latest build can be found here: http://octarineparrot.com/assets/libpnet/doc/pnet/. Usage To use libpnet in your project, add the following to your Cargo.toml: [dependencies.pnet] version = ""0.12.0""  libpnet should work on any Rust channel (stable, beta, or nightly), starting with Rust 1.9. When using a nightly version of Rust, you may wish to use pass --no-default-features --features nightly to Cargo, to enable faster build times. When running the test suite, there are a number of networking tests which will likely fail - the easiest way to workaround this is to run cargo test as a root or administrative user. This can often be avoided, however it is more involved. Windows There are three requirements for building on Windows: You must use a nightly version of Rust which uses the MSVC toolchain You must have WinPcap installed (tested with version 4.1.3) You must place Packet.lib from the WinPcap Developers pack in a directory named lib, in the root of this repository. For the 64 bit toolchain it is in WpdPack/Lib/x64/Packet.lib, for the 32 bit toolchain, it is in WpdPack/Lib/Packet.lib. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libpnet/libpnet"	"— a cross-platform, low level networking"	"true"
"Network programming"	""	"https://travis-ci.org/libpnet/libpnet"	"— a cross-platform, low level networking"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a cross-platform, low level networking"	"true"
"Network programming"	"thehydroimpulse/nanomsg.rs"	"https://github.com/thehydroimpulse/nanomsg.rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"174"	"15"	"25"	"GitHub - thehydroimpulse/nanomsg.rs: Nanomsg library for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 174 Fork 25 thehydroimpulse/nanomsg.rs Code Issues 16 Pull requests 0 Pulse Graphs Nanomsg library for Rust 503 commits 8 branches 0 releases 16 contributors Rust 99.4% Other 0.6% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags contributors gh-pages idiomatic_examples master revert-91-stable_1.0 stable_1.0 test update_travis Nothing to show Nothing to show New pull request Latest commit 2a235bc Jul 10, 2016 blabaere committed on GitHub Merge pull request #153 from blabaere/master … Adds contributors Permalink Failed to load latest commit information. examples Updates version number, both libnanomsg and rust bindings May 16, 2016 nanomsg_sys Removes commented out code Jul 10, 2016 src Fixes minor hiccup in some doctests for Socket Jul 4, 2016 .gitignore Support for automatically building nanomsg Jul 4, 2016 .travis.yml Reverts erronous changes Jul 5, 2016 Cargo.toml Adds a sudo to the cargo test call for nanomsg_sys Jul 4, 2016 LICENSE progress Sep 7, 2013 Makefile Adds verbose option to ldcaonfig call Jul 10, 2016 README.md Adds contributors Jul 10, 2016 appveyor.yml Changes Windows build to x64 and Visual Studio Jun 29, 2016 deploy.sh removed sub folder Dec 17, 2014 README.md Nanomsg Documentation Nanomsg is a modern messaging library that is the successor to ZeroMQ, written in C by Martin Sustrik and colleagues. The nanomsg library is licensed under MIT/X11 license. ""nanomsg"" is a trademark of 250bpm s.r.o. http://nanomsg.org/ https://github.com/nanomsg/nanomsg Requirements Nanomsg 1.0.0 Installing nanomsg: make deps  Installation [dependencies] nanomsg = ""0.6.0"" Simply import the crate to use it: extern crate nanomsg; Creating a Socket The basis of Nanomsg is a Socket. Each socket can be of a certain type. The type of a socket defines it's behaviour and limitations (such as only being able to send and not receive). use nanomsg::{Socket, Protocol, Error};  /// Creating a new `Pull` socket type. Pull sockets can only receive messages /// from a `Push` socket type. fn create_socket() -> Result<(), Error> {     let mut socket = try!(Socket::new(Protocol::Pull));     Ok(()) } Now, each socket that is created can be bound to multiple endpoints. Each binding can return an error, so we'll take advantage of the try! macro. use nanomsg::{Socket, Protocol, Error};  /// Creating a new `Pull` socket type. Pull sockets can only receive messages /// from a `Push` socket type. fn create_socket() -> Result<(), Error> {     let mut socket = try!(Socket::new(Protocol::Pull));      // Create a new endpoint bound to the following protocol string. This returns     // a new `Endpoint` that lives at-most the lifetime of the original socket.     let mut endpoint = try!(socket.bind(""ipc:///tmp/pipeline.ipc""));      Ok(()) } The socket is ready to be used now! Because this is a Pull socket, we'll implement reading any messages we receive. // ... After the endpoint we created, we'll start reading some data. let mut msg = String::new(); loop {     try!(socket.read_to_string(&mut msg));     println!(""We got a message: {}"", &*msg);     msg.clear(); } // ... That's awesome! But... we have no packets being sent to the socket, so we'll read nothing. To fix this, let's implement the accompanying pair Push socket. use nanomsg::{Socket, Protocol, Error};  fn pusher() -> Result<(), Error> {     let mut socket = try!(Socket::new(Protocol::Push));     let mut endpoint = try!(socket.connect(""ipc:///tmp/pipeline.ipc""));      socket.write(b""message in a bottle"");      endpoint.shutdown();     Ok(()) } Contributors (In arbitrary order): Daniel Fagnan (@TheHydroImpulse) Jason E. Aten (@glycerine) David C. Bishop (@dcbishop) Dennis Lawler (@evenodder) Zachary Tong (@polyfractal) Dan Burkert (@danburkert) Benoît Labaere (@blabaere) Kevin Butler (@Ryman) Andrew (@GGist) Chip Collier (@photex) Zeke Foppa (@bfops) Philippe Delrieu (@musitdev) Daniel Kozlowski (@dkhenry) Vinzent Steinberg (@vks) Paul Woolcock (@pwoolcoc) Gabriel Martinez (@mystal) License The MIT License (MIT) Copyright (c) 2013-2014 Jason E. Aten, Ph.D. @glycerine Copyright (c) 2014 Daniel Fagnan @thehydroimpulse Copyright (c) 2015-2016 Benoît Labaere @blabaere Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/thehydroimpulse/nanomsg.rs"	"— bindings"	"true"
"Network programming"	"nanomsg"	"http://nanomsg.org/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"nanomsg Home Download Documentation Development Community nanomsg is a socket library that provides several common communication patterns. It aims to make the networking layer fast, scalable, and easy to use. Implemented in C, it works on a wide range of operating systems with no further dependencies. The communication patterns, also called ""scalability protocols"", are basic blocks for building distributed systems. By combining them you can create a vast array of distributed applications. The following scalability protocols are currently available: PAIR - simple one-to-one communication BUS - simple many-to-many communication REQREP - allows to build clusters of stateless services to process user requests PUBSUB - distributes messages to large sets of interested subscribers PIPELINE - aggregates messages from multiple sources and load balances them among many destinations SURVEY - allows to query state of multiple applications in a single go Scalability protocols are layered on top of the transport layer in the network stack. At the moment, the nanomsg library supports the following transports mechanisms: INPROC - transport within a process (between threads, modules etc.) IPC - transport between processes on a single machine TCP - network transport via TCP The library exposes a BSD-socket-like C API to the applications. It is licensed under MIT/X11 license. ""nanomsg"" is a trademark of Martin Sustrik"	"null"	"null"	"— bindings"	"true"
"Network programming"	""	"https://travis-ci.org/thehydroimpulse/nanomsg.rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Network programming"	"mattnenterprise/rust-nntp"	"https://github.com/mattnenterprise/rust-nntp"	"— an client for Rust"	"null"	"null"	"null"	"NNTP"	"https://en.wikipedia.org/wiki/Network_News_Transfer_Protocol"	"null"	"null"	"4"	"1"	"3"	"GitHub - mattnenterprise/rust-nntp: NNTP client for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 3 mattnenterprise/rust-nntp Code Issues 1 Pull requests 0 Pulse Graphs NNTP client for Rust 16 commits 1 branch 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src .gitignore .travis.yml Cargo.toml Incrementing version number Jan 11, 2016 LICENSE-APACHE LICENSE-MIT Relicense to dual MIT/Apache-2.0 Jan 10, 2016 README.md example.rs README.md rust-nntp NNTP Client for Rust Installation Add nntp via your Cargo.toml: [dependencies] nntp = ""*"" Usage extern crate nntp;  use nntp::{Article, NNTPStream};  fn main() {     let mut nntp_stream = match NNTPStream::connect(""nntp.aioe.org"", 119) {         Ok(stream) => stream,         Err(e) => panic!(""{}"", e)     };      match nntp_stream.capabilities() {         Ok(lines) => {             for line in lines.iter() {                 print!(""{}"", line);             }         },         Err(e) => panic!(e)     }      match nntp_stream.list() {         Ok(groups) => {             for group in groups.iter() {                 println!(""Name: {}, High: {}, Low: {}, Status: {}"", group.name, group.high, group.low, group.status)             }          },         Err(e) => panic!(e)     };      match nntp_stream.group(""comp.sys.raspberry-pi"") {         Ok(_) => (),         Err(e) => panic!(e)     }      match nntp_stream.article_by_number(6187) {         Ok(Article{headers, body}) => {             for (key, value) in headers.iter() {                 println!(""{}: {}"", key, value)             }             for line in body.iter() {                 print!(""{}"", line)             }         },         Err(e) => panic!(e)     }      match nntp_stream.article_by_id(""<cakj55F1dofU5@mid.individual.net>"") {         Ok(Article{headers, body}) => {             for (key, value) in headers.iter() {                 println!(""{}: {}"", key, value)             }             for line in body.iter() {                 print!(""{}"", line)             }         },         Err(e) => panic!(e)     }         let _ = nntp_stream.quit(); }  License MIT License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mattnenterprise/rust-nntp"	"— an client for Rust"	"true"
"Network programming"	""	"https://travis-ci.org/mattnenterprise/rust-nntp"	"— an client for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— an client for Rust"	"true"
"Network programming"	"mattnenterprise/rust-pop3"	"https://github.com/mattnenterprise/rust-pop3"	"— a client for Rust"	"null"	"null"	"null"	"POP3"	"https://en.wikipedia.org/wiki/Post_Office_Protocol"	"null"	"null"	"3"	"1"	"4"	"GitHub - mattnenterprise/rust-pop3: POP3 client for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 3 Fork 4 mattnenterprise/rust-pop3 Code Issues 1 Pull requests 0 Pulse Graphs POP3 client for Rust 25 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 8e1d130 Jul 2, 2016 mattnenterprise Adding crates badge to README.md Permalink Failed to load latest commit information. src .gitignore Initial Commit Nov 16, 2014 .travis.yml Cleaning up code, and uploading docs, and test results to coveralls Jun 18, 2016 Cargo.toml Cleaning up code, and uploading docs, and test results to coveralls Jun 18, 2016 LICENSE Initial Commit Nov 17, 2014 README.md example.rs Updating the client to the alpha version of rust Jan 14, 2015 README.md rust-pop3 POP3 Client for Rust This client has SSL support. SSL is configured using an SSLContext that is passed into the connect method of a POP3Stream. If no SSL support is wanted just pass in None. The library rust-openssl is used to support SSL for this project. Installation Add pop3 via your Cargo.toml: [dependencies] pop3 = ""*"" Usage extern crate pop3; extern crate openssl;  use openssl::ssl::{SslContext, SslMethod}; use pop3::POP3Stream; use pop3::POP3Result::{POP3Stat, POP3List, POP3Message};  fn main() {     let mut gmail_socket = match POP3Stream::connect(""pop.gmail.com"", 995, Some(SslContext::new(SslMethod::Sslv23).unwrap())) {         Ok(s) => s,         Err(e) => panic!(""{}"", e)     };      gmail_socket.login(""username"", ""password"");      let stat = gmail_socket.stat();     match stat {         POP3Stat {num_email,                   mailbox_size} => println!(""num_email: {},  mailbox_size:{}"", num_email, mailbox_size),         _ => println!(""Err for stat""),     }      let list_all = gmail_socket.list(None);     match list_all {         POP3List {emails_metadata} => {             for i in emails_metadata.iter() {                 println!(""message_id: {},  message_size: {}"", i.message_id, i.message_size);             }         },         _ => println!(""Err for list_all""),     }      let message_25 = gmail_socket.retr(25);     match message_25 {         POP3Message{raw} => {             for i in raw.iter() {                 println!(""{}"", i);             }         },         _ => println!(""Error for message_25""),     }      gmail_socket.quit(); } License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mattnenterprise/rust-pop3"	"— a client for Rust"	"true"
"Network programming"	""	"https://travis-ci.org/mattnenterprise/rust-pop3"	"— a client for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a client for Rust"	"true"
"Network programming"	"alexcrichton/ssh2-rs"	"https://github.com/alexcrichton/ssh2-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"52"	"4"	"23"	"GitHub - alexcrichton/ssh2-rs: Rust bindings for libssh2 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 52 Fork 23 alexcrichton/ssh2-rs Code Issues 4 Pull requests 0 Pulse Graphs Rust bindings for libssh2 http://alexcrichton.com/ssh2-rs 242 commits 4 branches 2 releases 16 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags cmake-test gh-pages master msys2 Nothing to show libssh2-sys-0.1.37 0.2.12 Nothing to show New pull request Latest commit bd64d00 Jun 19, 2016 alexcrichton Bump to 0.2.12 Permalink Failed to load latest commit information. libssh2-sys Test for .git directory Apr 8, 2016 src ssh2::FileStat should derive Eq/PartialEq and Clone May 26, 2016 systest Add automated testing of FFI bindings Oct 7, 2015 tests Add tests for errors before exit_status() Apr 28, 2016 .gitignore Update to rust master Jan 28, 2015 .gitmodules Move libssh2 to a submodule Jul 31, 2015 .travis.yml Just build on stable instead of 1.0.0 Nov 3, 2015 Cargo.toml Bump to 0.2.12 Jun 19, 2016 README.md Fix CI on README Dec 12, 2015 appveyor.yml Try to pick up `make` on appveyor May 6, 2016 README.md ssh2-rs Documentation Rust bindings to libssh2 # Cargo.toml [dependencies] ssh2 = ""0.2"" Building on OSX 10.10+ Currently libssh2 requires linking against OpenSSL, and to compile libssh2 it also needs to find the OpenSSL headers. On OSX 10.10+ the OpenSSL headers have been removed, but if you're using Homebrew you can install them via: brew install openssl To get this library to pick them up the standard rust-openssl instructions can be used to transitively inform libssh2-sys about where the header files are: export OPENSSL_INCLUDE_DIR=`brew --prefix openssl`/include export OPENSSL_LIB_DIR=`brew --prefix openssl`/lib Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alexcrichton/ssh2-rs"	"— bindings"	"true"
"Network programming"	"libssh2"	"http://www.libssh2.org/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"111"	"36"	"80"	"GitHub - libssh2/libssh2: the SSH library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 36 Star 111 Fork 80 libssh2/libssh2 Code Issues 26 Pull requests 13 Pulse Graphs the SSH library https://www.libssh2.org/ 1,838 commits 1 branch 38 releases 59 contributors C 85.8% M4 3.9% Makefile 3.4% Shell 2.8% CMake 2.5% Clean 1.4% Other 0.2% C M4 Makefile Shell CMake Clean Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show start libssh2-1.7.0 libssh2-1.6.0 libssh2-1.5.0 libssh2-1.4.3 libssh2-1.4.2 libssh2-1.4.1 libssh2-1.4.0 libssh2-1.3.0 libssh2-1.2.9 libssh2-1.2.8 libssh2-1.2.7 libssh2-1.2.6 libssh2-1.2.5 libssh2-1.2.4 libssh2-1.2.3 libssh2-1.2.2 libssh2-1.2.1 libssh2-1.2 beforenb2-0.14 beforenb-0.14 RELEASE.1.1 RELEASE.1.0 RELEASE.0.18 RELEASE.0.17 RELEASE.0.16 RELEASE.0.15 RELEASE.0.14 RELEASE.0.13 RELEASE.0.12 RELEASE.0.11 RELEASE.0.10 RELEASE.0.8 RELEASE.0.7 RELEASE.0.6 RELEASE.0.5 RELEASE.0.3 RELEASE.0.1 Nothing to show New pull request Latest commit 7934c9c Apr 8, 2016 willco007 committed with bagder Merge pull request #103 from willco007/patch-2 … Fix for security issue CVE-2016-0787 Permalink Failed to load latest commit information. cmake CMake build system. Mar 12, 2015 docs Normalize line endings in libssh2_sftp_get_channel.3. Mar 15, 2016 example url updates, HTTP => HTTPS Feb 24, 2016 include VMS can't use %zd for off_t format. Mar 15, 2016 m4 Ignore libssh2_config.h.in and stamp-h2 in example/ and remove .cvsig… Jan 30, 2010 nw url updates, HTTP => HTTPS Feb 24, 2016 os400 os400: fix an ILE/RPG prototype Jan 18, 2016 src Merge pull request #103 from willco007/patch-2 Apr 9, 2016 tests cmake: include CMake files in the release tarballs Jul 2, 2015 vms Tweak VMS help file building. Mar 15, 2016 win32 Fix MSVC 14 compilation errors Apr 2, 2016 .gitattribute Ensure that win32/libssh2.dsp will be generated with CRLF line endings Oct 17, 2009 .gitignore .gitignore: don't ignore INSTALL Mar 7, 2015 .travis.yml Add continuous integration configurations. Mar 15, 2015 CMakeLists.txt web: the site is now HTTPS Feb 23, 2016 COPYING COPYING: bump the copyright year Aug 31, 2014 Makefile.OpenSSL.inc Move automake conditionals added by commit d512b25 out of Makefile.inc Nov 13, 2013 Makefile.WinCNG.inc Added Windows Cryptography API: Next Generation based backend Mar 16, 2014 Makefile.am os400: implement character encoding conversion support Jan 18, 2016 Makefile.inc Move automake conditionals added by commit d512b25 out of Makefile.inc Nov 13, 2013 Makefile.libgcrypt.inc Move automake conditionals added by commit d512b25 out of Makefile.inc Nov 13, 2013 Makefile.os400qc3.inc Add interface for OS/400 crypto library QC3 Jan 18, 2016 NEWS NEWS: auto-generated from git Apr 4, 2011 NMakefile NMake build: added support for WinCNG build. Nov 30, 2014 README url updates, HTTP => HTTPS Feb 24, 2016 RELEASE-NOTES url updates, HTTP => HTTPS Feb 24, 2016 acinclude.m4 Fix shell usage. Sep 23, 2009 appveyor.yml Allow CI failures with VS 2008 x64. Feb 18, 2016 buildconf Make it portable; test uses = for string comparison (not ==). Indent. Feb 23, 2010 config.rpath Revert ""config.rpath: generated file, no need to keep in git"" Jun 11, 2012 configure.ac configure: build ""silent"" if possible Feb 11, 2016 get_ver.awk Added copyright define to libssh2.h and use it for binary builds. Aug 15, 2010 git2news.pl NEWS: auto-generated from git Apr 4, 2011 libssh2-style.el helper script for emacs users to get the code style done libssh2-style Dec 20, 2008 libssh2.pc.in url updates, HTTP => HTTPS Feb 24, 2016 maketgz maketgz: use git2news.pl by the correct name Apr 5, 2011 README libssh2 - SSH2 library ======================  libssh2 is a library implementing the SSH2 protocol, available under the revised BSD license.  Web site: https://www.libssh2.org/  Mailing list: https://cool.haxx.se/mailman/listinfo/libssh2-devel  License: see COPYING  Source code: https://github.com/libssh2/libssh2  Web site source code: https://github.com/libssh2/www  Installation instructions are in:  - docs/INSTALL_CMAKE for CMake  - docs/INSTALL_AUTOTOOLS for Autotools  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libssh2/libssh2"	"— bindings"	"true"
"Network programming"	""	"https://travis-ci.org/alexcrichton/ssh2-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Network programming"	"zslayton/stomp-rs"	"https://github.com/zslayton/stomp-rs"	"— a client implementation in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"38"	"4"	"3"	"GitHub - zslayton/stomp-rs: A STOMP client in Rust. Compatible with RabbitMQ, ActiveMQ. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 38 Fork 3 zslayton/stomp-rs Code Issues 11 Pull requests 0 Wiki Pulse Graphs A STOMP client in Rust. Compatible with RabbitMQ, ActiveMQ. 229 commits 6 branches 25 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop examples master reconnect revert-87-master use-mai Nothing to show v0.11.0 v0.10.2 v0.10.1 v0.10.0 v0.9.0 v0.8.4 v0.8.3 v0.8.2 v0.8.1 v0.8.0 v0.7.0 v0.6.0 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.3.7 v0.3.6 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 0b35e1d May 29, 2016 zslayton Update README.md Permalink Failed to load latest commit information. examples Version bump, cleanup. May 26, 2015 src Copy over the error callback when reconnecting. Nov 2, 2015 .gitignore allow callback before sending and receiving frames Aug 17, 2015 .travis.yml Made compatible with 1.0 stable. May 21, 2015 Cargo.toml Version bump to v0.11.0 Aug 24, 2015 LICENSE Initial commit Apr 26, 2014 README.md Update README.md May 29, 2016 README.md NOTE: This currently depends on mio v0.3.x, which was broken by language changes. Work is underway to upgrade to mio v0.5.x in this branch. This work is being tracked as issue #94. stomp-rs stomp-rs provides a full STOMP 1.2 client implementation for the Rust programming language. This allows programs written in Rust to interact with message queueing services like ActiveMQ, RabbitMQ, HornetQ and OpenMQ. Connect Subscribe Send Acknowledge (Auto/Client/ClientIndividual) Transactions Receipts Disconnect Heartbeats The APIs for stomp-rs are not yet stable and are likely to fluctuate before v1.0. Examples Connect / Subscribe / Send extern crate stomp; use stomp::frame::Frame; use stomp::subscription::AckOrNack::Ack;  fn main() {    let destination = ""/topic/messages"";   let mut message_count: u64 = 0;    let mut session = match stomp::session(""127.0.0.1"", 61613).start() {       Ok(session) => session,       Err(error)  => panic!(""Could not connect to the server: {}"", error)    };    session.subscription(destination, |frame: &Frame| {     message_count += 1;     println!(""Received message #{}:\n{}"", message_count, frame);     Ack   }).start();    session.message(destination, ""Animal"").send();   session.message(destination, ""Vegetable"").send();   session.message(destination, ""Mineral"").send();    session.listen(); // Loops infinitely, awaiting messages    session.disconnect(); } Session Configuration use stomp::header::header::Header; use stomp::connection::{HeartBeat, Credentials}; // ... let mut session = match stomp::session(""127.0.0.1"", 61613)   .with(Credentials(""sullivan"", ""m1k4d0""))   .with(HeartBeat(5000, 2000))   .with(Header::new(""custom-client-id"", ""hmspna4""))   .start() {       Ok(session) => session,       Err(error)  => panic!(""Could not connect to the server: {}"", error)    }; Message Configuration use stomp::header::{Header, SuppressedHeader, ContentType}; // ... session.message(destination, ""Hypoteneuse"".as_bytes())   .with(ContentType(""text/plain""))   .with(Header::new(""persistent"", ""true""))   .with(SuppressedHeader(""content-length"")   .send(); Subscription Configuration use stomp::subscription::AckMode; use stomp::header::Header; use stomp::frame::Frame; // ...   let id = session.subscription(destination, |frame: &Frame| {     message_count += 1;     println!(""Received message #{}:\n{}"", message_count, frame);     Ack   })   .with(AckMode::Client)   .with(Header::new(""custom-subscription-header"", ""lozenge""))   .start(); Transactions match session.begin_transaction() {   Ok(mut transaction) => {     transaction.message(destination, ""Animal"").send();     transaction.message(destination, ""Vegetable"").send();     transaction.message(destination, ""Mineral"").send();     transaction.commit(); },   Err(error)  => panic!(""Could not connect to the server: {}"", error) }; Handling RECEIPT frames If you include a ReceiptHandler in your message, the client will request that the server send a receipt when it has successfully processed the frame. session.message(destination, ""text/plain"", ""Hypoteneuse"".as_bytes())   .with(ReceiptHandler::new(|frame: &Frame| println!(""Got a receipt for 'Hypoteneuse'."")))   .send(); Handling ERROR frames To handle errors, you can register an error handler session.on_error(|frame: &Frame| {   panic!(""ERROR frame received:\n{}"", frame); }); Manipulating inbound and outbound frames In some cases, brokers impose rules or restrictions which may make it necessary to directly modify frames in ways that are not conveniently exposed by the API. In such cases, you can use the on_before_send and on_before_receive methods to specify a callback to perform this custom logic prior to the sending or receipt of each frame. For example: // Require that all NACKs include a header specifying an optional requeue policy session.on_before_send(|frame: &mut Frame| {   if frame.command == ""NACK"" {     frame.headers.push(Header::new(""requeue"", ""false""));   } });  session.on_before_receive(|frame: &mut Frame| {   if frame.command == ""MESSAGE"" {     // Modify the frame   } }); Cargo.toml [package]  name = ""stomp_test"" version = ""0.0.1"" authors = [""your_name_here""]  [[bin]]  name = ""stomp_test""  [dependencies.stomp]  stomp = ""*"" keywords: Stomp, Rust, rust-lang, rustlang, cargo, ActiveMQ, RabbitMQ, HornetQ, OpenMQ, Message Queue, MQ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zslayton/stomp-rs"	"— a client implementation in Rust"	"true"
"Network programming"	"STOMP 1.2"	"http://stomp.github.io/stomp-specification-1.2.html"	"— a client implementation in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"STOMP 1.2 Implementations STOMP Protocol Specification, Version 1.2 Abstract Overview Background Protocol Overview Changes in the Protocol Design Philosophy Conformance STOMP Frames Value Encoding Body Standard Headers Header content-length Header content-type Header receipt Repeated Header Entries Size Limits Connection Lingering Connecting CONNECT or STOMP Frame CONNECTED Frame Protocol Negotiation Heart-beating Client Frames SEND SUBSCRIBE SUBSCRIBE id Header SUBSCRIBE ack Header UNSUBSCRIBE ACK NACK BEGIN COMMIT ABORT DISCONNECT Server Frames MESSAGE RECEIPT ERROR Frames and Headers Augmented BNF License Abstract STOMP is a simple interoperable protocol designed for asynchronous message passing between clients via mediating servers. It defines a text based wire-format for messages passed between these clients and servers. STOMP has been in active use for several years and is supported by many message brokers and client libraries. This specification defines the STOMP 1.2 protocol and is an update to STOMP 1.1. Please send feedback to the stomp-spec@googlegroups.com mailing list. Overview Background STOMP arose from a need to connect to enterprise message brokers from scripting languages such as Ruby, Python and Perl. In such an environment it is typically logically simple operations that are carried out such as 'reliably send a single message and disconnect' or 'consume all messages on a given destination'. It is an alternative to other open messaging protocols such as AMQP and implementation specific wire protocols used in JMS brokers such as OpenWire. It distinguishes itself by covering a small subset of commonly used messaging operations rather than providing a comprehensive messaging API. More recently STOMP has matured into a protocol which can be used past these simple use cases in terms of the wire-level features it now offers, but still maintains its core design principles of simplicity and interoperability. Protocol Overview STOMP is a frame based protocol, with frames modelled on HTTP. A frame consists of a command, a set of optional headers and an optional body. STOMP is text based but also allows for the transmission of binary messages. The default encoding for STOMP is UTF-8, but it supports the specification of alternative encodings for message bodies. A STOMP server is modelled as a set of destinations to which messages can be sent. The STOMP protocol treats destinations as opaque string and their syntax is server implementation specific. Additionally STOMP does not define what the delivery semantics of destinations should be. The delivery, or “message exchange”, semantics of destinations can vary from server to server and even from destination to destination. This allows servers to be creative with the semantics that they can support with STOMP. A STOMP client is a user-agent which can act in two (possibly simultaneous) modes: as a producer, sending messages to a destination on the server via a SEND frame as a consumer, sending a SUBSCRIBE frame for a given destination and receiving messages from the server as MESSAGE frames. Changes in the Protocol STOMP 1.2 is mostly backwards compatible with STOMP 1.1. There are only two incompatible changes: it is now possible to end frame lines with carriage return plus line feed instead of only line feed message acknowledgment has been simplified and now uses a dedicated header Apart from these, STOMP 1.2 introduces no new features but focuses on clarifying some areas of the specification such as: repeated frame header entries use of the content-length and content-type headers required support of the STOMP frame by servers connection lingering scope and uniqueness of subscription and transaction identifiers meaning of the RECEIPT frame with regard to previous frames Design Philosophy The main philosophies driving the design of STOMP are simplicity and interoperability. STOMP is designed to be a lightweight protocol that is easy to implement both on the client and server side in a wide range of languages. This implies, in particular, that there are not many constraints on the architecture of servers and many features such as destination naming and reliability semantics are implementation specific. In this specification we will note features of servers which are not explicitly defined by STOMP 1.2. You should consult your STOMP server's documentation for the implementation specific details of these features. Conformance The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119. Implementations may impose implementation-specific limits on unconstrained inputs, e.g. to prevent denial of service attacks, to guard against running out of memory, or to work around platform-specific limitations. The conformance classes defined by this specification are STOMP clients and STOMP servers. STOMP Frames STOMP is a frame based protocol which assumes a reliable 2-way streaming network protocol (such as TCP) underneath. The client and server will communicate using STOMP frames sent over the stream. A frame's structure looks like: COMMAND header1:value1 header2:value2  Body^@ The frame starts with a command string terminated by an end-of-line (EOL), which consists of an OPTIONAL carriage return (octet 13) followed by a REQUIRED line feed (octet 10). Following the command are zero or more header entries in <key>:<value> format. Each header entry is terminated by an EOL. A blank line (i.e. an extra EOL) indicates the end of the headers and the beginning of the body. The body is then followed by the NULL octet. The examples in this document will use ^@, control-@ in ASCII, to represent the NULL octet. The NULL octet can be optionally followed by multiple EOLs. For more details, on how to parse STOMP frames, see the Augmented BNF section of this document. All commands and header names referenced in this document are case sensitive. Value Encoding The commands and headers are encoded in UTF-8. All frames except the CONNECT and CONNECTED frames will also escape any carriage return, line feed or colon found in the resulting UTF-8 encoded headers. Escaping is needed to allow header keys and values to contain those frame header delimiting octets as values. The CONNECT and CONNECTED frames do not escape the carriage return, line feed or colon octets in order to remain backward compatible with STOMP 1.0. C style string literal escapes are used to encode any carriage return, line feed or colon that are found within the UTF-8 encoded headers. When decoding frame headers, the following transformations MUST be applied: \r (octet 92 and 114) translates to carriage return (octet 13) \n (octet 92 and 110) translates to line feed (octet 10) \c (octet 92 and 99) translates to : (octet 58) \\ (octet 92 and 92) translates to \ (octet 92) Undefined escape sequences such as \t (octet 92 and 116) MUST be treated as a fatal protocol error. Conversely when encoding frame headers, the reverse transformation MUST be applied. The STOMP 1.0 specification included many example frames with padding in the headers and many servers and clients were implemented to trim or pad header values. This causes problems if applications want to send headers that SHOULD not get trimmed. In STOMP 1.2, clients and servers MUST never trim or pad headers with spaces. Body Only the SEND, MESSAGE, and ERROR frames MAY have a body. All other frames MUST NOT have a body. Standard Headers Some headers MAY be used, and have special meaning, with most frames. Header content-length All frames MAY include a content-length header. This header is an octet count for the length of the message body. If a content-length header is included, this number of octets MUST be read, regardless of whether or not there are NULL octets in the body. The frame still needs to be terminated with a NULL octet. If a frame body is present, the SEND, MESSAGE and ERROR frames SHOULD include a content-length header to ease frame parsing. If the frame body contains NULL octets, the frame MUST include a content-length header. Header content-type If a frame body is present, the SEND, MESSAGE and ERROR frames SHOULD include a content-type header to help the receiver of the frame interpret its body. If the content-type header is set, its value MUST be a MIME type which describes the format of the body. Otherwise, the receiver SHOULD consider the body to be a binary blob. The implied text encoding for MIME types starting with text/ is UTF-8. If you are using a text based MIME type with a different encoding then you SHOULD append ;charset=<encoding> to the MIME type. For example, text/html;charset=utf-16 SHOULD be used if your sending an HTML body in UTF-16 encoding. The ;charset=<encoding> SHOULD also get appended to any non text/ MIME types which can be interpreted as text. A good example of this would be a UTF-8 encoded XML. Its content-type SHOULD get set to application/xml;charset=utf-8 All STOMP clients and servers MUST support UTF-8 encoding and decoding. Therefore, for maximum interoperability in a heterogeneous computing environment, it is RECOMMENDED that text based content be encoded with UTF-8. Header receipt Any client frame other than CONNECT MAY specify a receipt header with an arbitrary value. This will cause the server to acknowledge the processing of the client frame with a RECEIPT frame (see the RECEIPT frame for more details). SEND destination:/queue/a receipt:message-12345  hello queue a^@ Repeated Header Entries Since messaging systems can be organized in store and forward topologies, similar to SMTP, a message may traverse several messaging servers before reaching a consumer. A STOMP server MAY 'update' header values by either prepending headers to the message or modifying a header in-place in the message. If a client or a server receives repeated frame header entries, only the first header entry SHOULD be used as the value of header entry. Subsequent values are only used to maintain a history of state changes of the header and MAY be ignored. For example, if the client receives: MESSAGE foo:World foo:Hello  ^@ The value of the foo header is just World. Size Limits To prevent malicious clients from exploiting memory allocation in a server, servers MAY place maximum limits on: the number of frame headers allowed in a single frame the maximum length of header lines the maximum size of a frame body If these limits are exceeded the server SHOULD send the client an ERROR frame and then close the connection. Connection Lingering STOMP servers must be able to support clients which rapidly connect and disconnect. This implies a server will likely only allow closed connections to linger for short time before the connection is reset. As a consequence, a client may not receive the last frame sent by the server (for instance an ERROR frame or the RECEIPT frame in reply to a DISCONNECT frame) before the socket is reset. Connecting A STOMP client initiates the stream or TCP connection to the server by sending the CONNECT frame: CONNECT accept-version:1.2 host:stomp.github.org  ^@ If the server accepts the connection attempt it will respond with a CONNECTED frame: CONNECTED version:1.2  ^@ The server can reject any connection attempt. The server SHOULD respond back with an ERROR frame explaining why the connection was rejected and then close the connection. CONNECT or STOMP Frame STOMP servers MUST handle a STOMP frame in the same manner as a CONNECT frame. STOMP 1.2 clients SHOULD continue to use the CONNECT command to remain backward compatible with STOMP 1.0 servers. Clients that use the STOMP frame instead of the CONNECT frame will only be able to connect to STOMP 1.2 servers (as well as some STOMP 1.1 servers) but the advantage is that a protocol sniffer/discriminator will be able to differentiate the STOMP connection from an HTTP connection. STOMP 1.2 clients MUST set the following headers: accept-version : The versions of the STOMP protocol the client supports. See Protocol Negotiation for more details. host : The name of a virtual host that the client wishes to connect to. It is recommended clients set this to the host name that the socket was established against, or to any name of their choosing. If this header does not match a known virtual host, servers supporting virtual hosting MAY select a default virtual host or reject the connection. STOMP 1.2 clients MAY set the following headers: login : The user identifier used to authenticate against a secured STOMP server. passcode : The password used to authenticate against a secured STOMP server. heart-beat : The Heart-beating settings. CONNECTED Frame STOMP 1.2 servers MUST set the following headers: version : The version of the STOMP protocol the session will be using. See Protocol Negotiation for more details. STOMP 1.2 servers MAY set the following headers: heart-beat : The Heart-beating settings. session : A session identifier that uniquely identifies the session. server : A field that contains information about the STOMP server. The field MUST contain a server-name field and MAY be followed by optional comment fields delimited by a space character. The server-name field consists of a name token followed by an optional version number token. server = name [""/"" version] *(comment) Example: server:Apache/1.3.9 Protocol Negotiation From STOMP 1.1 and onwards, the CONNECT frame MUST include the accept-version header. It SHOULD be set to a comma separated list of incrementing STOMP protocol versions that the client supports. If the accept-version header is missing, it means that the client only supports version 1.0 of the protocol. The protocol that will be used for the rest of the session will be the highest protocol version that both the client and server have in common. For example, if the client sends: CONNECT accept-version:1.0,1.1,2.0 host:stomp.github.org  ^@ The server will respond back with the highest version of the protocol that it has in common with the client: CONNECTED version:1.1  ^@ If the client and server do not share any common protocol versions, then the sever MUST respond with an ERROR frame similar to the following and then close the connection: ERROR version:1.2,2.1 content-type:text/plain  Supported protocol versions are 1.2 2.1^@ Heart-beating Heart-beating can optionally be used to test the healthiness of the underlying TCP connection and to make sure that the remote end is alive and kicking. In order to enable heart-beating, each party has to declare what it can do and what it would like the other party to do. This happens at the very beginning of the STOMP session, by adding a heart-beat header to the CONNECT and CONNECTED frames. When used, the heart-beat header MUST contain two positive integers separated by a comma. The first number represents what the sender of the frame can do (outgoing heart-beats): 0 means it cannot send heart-beats otherwise it is the smallest number of milliseconds between heart-beats that it can guarantee The second number represents what the sender of the frame would like to get (incoming heart-beats): 0 means it does not want to receive heart-beats otherwise it is the desired number of milliseconds between heart-beats The heart-beat header is OPTIONAL. A missing heart-beat header MUST be treated the same way as a “heart-beat:0,0” header, that is: the party cannot send and does not want to receive heart-beats. The heart-beat header provides enough information so that each party can find out if heart-beats can be used, in which direction, and with which frequency. More formally, the initial frames look like: CONNECT heart-beat:<cx>,<cy>  CONNECTED: heart-beat:<sx>,<sy> For heart-beats from the client to the server: if <cx> is 0 (the client cannot send heart-beats) or <sy> is 0 (the server does not want to receive heart-beats) then there will be none otherwise, there will be heart-beats every MAX(<cx>,<sy>) milliseconds In the other direction, <sx> and <cy> are used the same way. Regarding the heart-beats themselves, any new data received over the network connection is an indication that the remote end is alive. In a given direction, if heart-beats are expected every <n> milliseconds: the sender MUST send new data over the network connection at least every <n> milliseconds if the sender has no real STOMP frame to send, it MUST send an end-of-line (EOL) if, inside a time window of at least <n> milliseconds, the receiver did not receive any new data, it MAY consider the connection as dead because of timing inaccuracies, the receiver SHOULD be tolerant and take into account an error margin Client Frames A client MAY send a frame not in this list, but for such a frame a STOMP 1.2 server MAY respond with an ERROR frame and then close the connection. SEND SUBSCRIBE UNSUBSCRIBE BEGIN COMMIT ABORT ACK NACK DISCONNECT SEND The SEND frame sends a message to a destination in the messaging system. It has one REQUIRED header, destination, which indicates where to send the message. The body of the SEND frame is the message to be sent. For example: SEND destination:/queue/a content-type:text/plain  hello queue a ^@ This sends a message to a destination named /queue/a. Note that STOMP treats this destination as an opaque string and no delivery semantics are assumed by the name of a destination. You should consult your STOMP server's documentation to find out how to construct a destination name which gives you the delivery semantics that your application needs. The reliability semantics of the message are also server specific and will depend on the destination value being used and the other message headers such as the transaction header or other server specific message headers. SEND supports a transaction header which allows for transactional sends. SEND frames SHOULD include a content-length header and a content-type header if a body is present. An application MAY add any arbitrary user defined headers to the SEND frame. User defined headers are typically used to allow consumers to filter messages based on the application defined headers using a selector on a SUBSCRIBE frame. The user defined headers MUST be passed through in the MESSAGE frame. If the sever cannot successfully process the SEND frame for any reason, the server MUST send the client an ERROR frame and then close the connection. SUBSCRIBE The SUBSCRIBE frame is used to register to listen to a given destination. Like the SEND frame, the SUBSCRIBE frame requires a destination header indicating the destination to which the client wants to subscribe. Any messages received on the subscribed destination will henceforth be delivered as MESSAGE frames from the server to the client. The ack header controls the message acknowledgment mode. Example: SUBSCRIBE id:0 destination:/queue/foo ack:client  ^@ If the sever cannot successfully create the subscription, the server MUST send the client an ERROR frame and then close the connection. STOMP servers MAY support additional server specific headers to customize the delivery semantics of the subscription. Consult your server's documentation for details. SUBSCRIBE id Header Since a single connection can have multiple open subscriptions with a server, an id header MUST be included in the frame to uniquely identify the subscription. The id header allows the client and server to relate subsequent MESSAGE or UNSUBSCRIBE frames to the original subscription. Within the same connection, different subscriptions MUST use different subscription identifiers. SUBSCRIBE ack Header The valid values for the ack header are auto, client, or client-individual. If the header is not set, it defaults to auto. When the ack mode is auto, then the client does not need to send the server ACK frames for the messages it receives. The server will assume the client has received the message as soon as it sends it to the client. This acknowledgment mode can cause messages being transmitted to the client to get dropped. When the ack mode is client, then the client MUST send the server ACK frames for the messages it processes. If the connection fails before a client sends an ACK frame for the message the server will assume the message has not been processed and MAY redeliver the message to another client. The ACK frames sent by the client will be treated as a cumulative acknowledgment. This means the acknowledgment operates on the message specified in the ACK frame and all messages sent to the subscription before the ACK'ed message. In case the client did not process some messages, it SHOULD send NACK frames to tell the server it did not consume these messages. When the ack mode is client-individual, the acknowledgment operates just like the client acknowledgment mode except that the ACK or NACK frames sent by the client are not cumulative. This means that an ACK or NACK frame for a subsequent message MUST NOT cause a previous message to get acknowledged. UNSUBSCRIBE The UNSUBSCRIBE frame is used to remove an existing subscription. Once the subscription is removed the STOMP connections will no longer receive messages from that subscription. Since a single connection can have multiple open subscriptions with a server, an id header MUST be included in the frame to uniquely identify the subscription to remove. This header MUST match the subscription identifier of an existing subscription. Example: UNSUBSCRIBE id:0  ^@ ACK ACK is used to acknowledge consumption of a message from a subscription using client or client-individual acknowledgment. Any messages received from such a subscription will not be considered to have been consumed until the message has been acknowledged via an ACK. The ACK frame MUST include an id header matching the ack header of the MESSAGE being acknowledged. Optionally, a transaction header MAY be specified, indicating that the message acknowledgment SHOULD be part of the named transaction. ACK id:12345 transaction:tx1  ^@ NACK NACK is the opposite of ACK. It is used to tell the server that the client did not consume the message. The server can then either send the message to a different client, discard it, or put it in a dead letter queue. The exact behavior is server specific. NACK takes the same headers as ACK: id (REQUIRED) and transaction (OPTIONAL). NACK applies either to one single message (if the subscription's ack mode is client-individual) or to all messages sent before and not yet ACK'ed or NACK'ed (if the subscription's ack mode is client). BEGIN BEGIN is used to start a transaction. Transactions in this case apply to sending and acknowledging - any messages sent or acknowledged during a transaction will be processed atomically based on the transaction. BEGIN transaction:tx1  ^@ The transaction header is REQUIRED, and the transaction identifier will be used for SEND, COMMIT, ABORT, ACK, and NACK frames to bind them to the named transaction. Within the same connection, different transactions MUST use different transaction identifiers. Any started transactions which have not been committed will be implicitly aborted if the client sends a DISCONNECT frame or if the TCP connection fails for any reason. COMMIT COMMIT is used to commit a transaction in progress. COMMIT transaction:tx1  ^@ The transaction header is REQUIRED and MUST specify the identifier of the transaction to commit. ABORT ABORT is used to roll back a transaction in progress. ABORT transaction:tx1  ^@ The transaction header is REQUIRED and MUST specify the identifier of the transaction to abort. DISCONNECT A client can disconnect from the server at anytime by closing the socket but there is no guarantee that the previously sent frames have been received by the server. To do a graceful shutdown, where the client is assured that all previous frames have been received by the server, the client SHOULD: send a DISCONNECT frame with a receipt header set. Example: DISCONNECT receipt:77 ^@ wait for the RECEIPT frame response to the DISCONNECT. Example: RECEIPT receipt-id:77 ^@ close the socket. Note that, if the server closes its end of the socket too quickly, the client might never receive the expected RECEIPT frame. See the Connection Lingering section for more information. Clients MUST NOT send any more frames after the DISCONNECT frame is sent. Server Frames The server will, on occasion, send frames to the client (in addition to the initial CONNECTED frame). These frames MAY be one of: MESSAGE RECEIPT ERROR MESSAGE MESSAGE frames are used to convey messages from subscriptions to the client. The MESSAGE frame MUST include a destination header indicating the destination the message was sent to. If the message has been sent using STOMP, this destination header SHOULD be identical to the one used in the corresponding SEND frame. The MESSAGE frame MUST also contain a message-id header with a unique identifier for that message and a subscription header matching the identifier of the subscription that is receiving the message. If the message is received from a subscription that requires explicit acknowledgment (either client or client-individual mode) then the MESSAGE frame MUST also contain an ack header with an arbitrary value. This header will be used to relate the message to a subsequent ACK or NACK frame. The frame body contains the contents of the message: MESSAGE subscription:0 message-id:007 destination:/queue/a content-type:text/plain  hello queue a^@ MESSAGE frames SHOULD include a content-length header and a content-type header if a body is present. MESSAGE frames will also include all user defined headers that were present when the message was sent to the destination in addition to the server specific headers that MAY get added to the frame. Consult your server's documentation to find out the server specific headers that it adds to messages. RECEIPT A RECEIPT frame is sent from the server to the client once a server has successfully processed a client frame that requests a receipt. A RECEIPT frame MUST include the header receipt-id, where the value is the value of the receipt header in the frame which this is a receipt for. RECEIPT receipt-id:message-12345  ^@ A RECEIPT frame is an acknowledgment that the corresponding client frame has been processed by the server. Since STOMP is stream based, the receipt is also a cumulative acknowledgment that all the previous frames have been received by the server. However, these previous frames may not yet be fully processed. If the client disconnects, previously received frames SHOULD continue to get processed by the server. ERROR The server MAY send ERROR frames if something goes wrong. In this case, it MUST then close the connection just after sending the ERROR frame. See the next section about connection lingering. The ERROR frame SHOULD contain a message header with a short description of the error, and the body MAY contain more detailed information (or MAY be empty). ERROR receipt-id:message-12345 content-type:text/plain content-length:171 message: malformed frame received  The message: ----- MESSAGE destined:/queue/a receipt:message-12345  Hello queue a! ----- Did not contain a destination header, which is REQUIRED for message propagation. ^@ If the error is related to a specific frame sent from the client, the server SHOULD add additional headers to help identify the original frame that caused the error. For example, if the frame included a receipt header, the ERROR frame SHOULD set the receipt-id header to match the value of the receipt header of the frame which the error is related to. ERROR frames SHOULD include a content-length header and a content-type header if a body is present. Frames and Headers In addition to the standard headers described above (content-length, content-type and receipt), here are all the headers defined in this specification that each frame MUST or MAY use: CONNECT or STOMP REQUIRED: accept-version, host OPTIONAL: login, passcode, heart-beat CONNECTED REQUIRED: version OPTIONAL: session, server, heart-beat SEND REQUIRED: destination OPTIONAL: transaction SUBSCRIBE REQUIRED: destination, id OPTIONAL: ack UNSUBSCRIBE REQUIRED: id OPTIONAL: none ACK or NACK REQUIRED: id OPTIONAL: transaction BEGIN or COMMIT or ABORT REQUIRED: transaction OPTIONAL: none DISCONNECT REQUIRED: none OPTIONAL: receipt MESSAGE REQUIRED: destination, message-id, subscription OPTIONAL: ack RECEIPT REQUIRED: receipt-id OPTIONAL: none ERROR REQUIRED: none OPTIONAL: message In addition, the SEND and MESSAGE frames MAY include arbitrary user defined headers that SHOULD be considered as being part of the carried message. Also, the ERROR frame SHOULD include additional headers to help identify the original frame that caused the error. Finally, STOMP servers MAY use additional headers to give access to features like persistency or expiration. Consult your server's documentation for details. Augmented BNF A STOMP session can be more formally described using the Backus-Naur Form (BNF) grammar used in HTTP/1.1 RFC 2616. NULL                = <US-ASCII null (octet 0)> LF                  = <US-ASCII line feed (aka newline) (octet 10)> CR                  = <US-ASCII carriage return (octet 13)> EOL                 = [CR] LF  OCTET               = <any 8-bit sequence of data>  frame-stream        = 1*frame  frame               = command EOL                       *( header EOL )                       EOL                       *OCTET                       NULL                       *( EOL )  command             = client-command | server-command  client-command      = ""SEND""                       | ""SUBSCRIBE""                       | ""UNSUBSCRIBE""                       | ""BEGIN""                       | ""COMMIT""                       | ""ABORT""                       | ""ACK""                       | ""NACK""                       | ""DISCONNECT""                       | ""CONNECT""                       | ""STOMP""  server-command      = ""CONNECTED""                       | ""MESSAGE""                       | ""RECEIPT""                       | ""ERROR""  header              = header-name "":"" header-value header-name         = 1*<any OCTET except CR or LF or "":""> header-value        = *<any OCTET except CR or LF or "":""> License This specification is licensed under the Creative Commons Attribution v3.0 license."	"null"	"null"	"— a client implementation in Rust"	"true"
"Network programming"	""	"https://travis-ci.org/zslayton/stomp-rs"	"— a client implementation in Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a client implementation in Rust"	"true"
"Network programming"	"meqif/rust-utp"	"https://github.com/meqif/rust-utp"	"— a (Micro Transport Protocol) library for Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"38"	"8"	"18"	"GitHub - meqif/rust-utp: A µTP (Micro/uTorrent Transport Library) library implemented in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 38 Fork 18 meqif/rust-utp Code Issues 3 Pull requests 6 Pulse Graphs A µTP (Micro/uTorrent Transport Library) library implemented in Rust 939 commits 7 branches 21 releases 4 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags clippy-fixes cloneable-socket gh-pages improve_examples master set_read_timeout timeout_on_receive Nothing to show 0.6.3 0.6.2 0.6.1 0.6.0 0.5.1 0.5.0 0.4.0 0.3.1 0.3.0 0.2.8 0.2.7 0.2.6 0.2.5 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 0.1.5 0.1.1 0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. benches Fix benchmarks Jul 14, 2016 examples Expunge all instances of `unwrap` in examples Oct 25, 2015 src Replace num crate with num_traits Jul 15, 2016 tests Check thread status on tests Oct 26, 2015 .gitignore Update gitignore. Aug 9, 2014 .travis.yml Enable caching of Cargo packages in Travis Apr 28, 2016 CHANGELOG.md Bump version to 0.6.3 Oct 23, 2015 COPYRIGHT Add licensing terms (MIT + Apache). Jul 23, 2014 Cargo.toml Replace num crate with num_traits Jul 15, 2016 LICENSE-APACHE Add licensing terms (MIT + Apache). Jul 23, 2014 LICENSE-MIT Add licensing terms (MIT + Apache). Jul 23, 2014 README.md Add Dependency CI badge Jul 12, 2016 appveyor.yml Add appveyor configuration file. May 17, 2015 README.md rust-utp A Micro Transport Protocol library implemented in Rust. API documentation Overview The Micro Transport Protocol is a reliable transport protocol built over UDP. Its congestion control algorithm is LEDBAT, which tries to use as much unused bandwidth as it can but readily yields to competing flows, making it useful for bulk transfers without introducing congestion in the network. The current implementation is somewhat incomplete, lacking a complete implementation of congestion control. However, it does support packet loss detection (except by timeout) the Selective Acknowledgment extension, handles unordered and duplicate packets and presents a stream interface (UtpStream). Usage To use utp, add this to your Cargo.toml: [dependencies] utp = ""*"" Then, import it in your crate root or wherever you need it: extern crate utp; Examples The simplest example program would be: extern crate utp;  use utp::UtpStream; use std::io::Write;  fn main() {     // Connect to an hypothetical local server running on port 8080     let addr = ""127.0.0.1:8080"";     let mut stream = UtpStream::connect(addr).expect(""Error connecting to remote peer"");      // Send a string     stream.write(""Hi there!"".as_bytes()).expect(""Write failed"");      // Close the stream     stream.close().expect(""Error closing connection""); } Check out the files under the ""examples"" directory for more example programs, or run them with cargo run --example <example_name>. Roadmap congestion control proper connection closing handle both RST and FIN send FIN on close automatically send FIN on drop if not already closed sending RST on mismatch setters and getters that hide header field endianness conversion SACK extension handle packet loss send triple-ACK to re-request lost packet (fast resend request) rewind send window and resend in reply to triple-ACK (fast resend) resend packet on ACK timeout stream interface handle unordered packets duplicate packet handling listener abstraction incoming connections iterator time out connection after too many retransmissions path MTU discovery License This library is distributed under similar terms to Rust: dual licensed under the MIT license and the Apache license (version 2.0). See LICENSE-APACHE, LICENSE-MIT, and COPYRIGHT for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/meqif/rust-utp"	"— a (Micro Transport Protocol) library for Rust."	"true"
"Network programming"	"uTP"	"http://www.bittorrent.org/beps/bep_0029.html"	"— a (Micro Transport Protocol) library for Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"BitTorrent.org Home For Users For Developers Developer mailing list Forums (archive) BEP: 29 Title: uTorrent transport protocol Version: c168b24850eae2dfaf0caeb0c490bc23b79f4e59 Last-Modified: Wed Aug 5 10:23:13 2015 -0700 Author: Arvid Norberg <arvid@bittorrent.com> Status: Draft Type: Standards Track Content-Type: text/x-rst Created: 22-Jun-2009 Post-History: 20-Oct-2012 (arvid@bittorrent.com), update the loss factor from 0.78 to 0.5. Removed 'bitfield' extension header. Fixed typo in uTP header (type and version were swapped) uTorrent Transport Protocol credits The uTorrent transport protocol was designed by Ludvig Strigeus, Greg Hazel, Stanislav Shalunov, Arvid Norberg and Bram Cohen. rationale The motivation for uTP is for BitTorrent clients to not disrupt internet connections, while still utilizing the unused bandwidth fully. The problem is that DSL and cable modems typically have a send buffer disproportional to their max send rate, which can hold several seconds worth of packets. BitTorrent traffic is typically background transfers, and should have lower priority than checking email, phone calls and browsing the web, but when using regular TCP connections BitTorrent quickly fills up the send buffer, adding multiple seconds delay to all interactive traffic. The fact that BitTorrent uses multiple TCP connections gives it an unfair advantage when competing with other services for bandwidth, which exaggerates the effect of BitTorrent filling the upload pipe. The reason for this is because TCP distributes the available bandwidth evenly across connections, and the more connections one application uses, the larger share of the bandwidth it gets. The traditional solution to this problem is to cap the upload rate of the BitTorrent client to 80% of the up-link capacity. 80% leaves some head room for interactive traffic. The main drawbacks with this solution are: The user needs to configure his/her BitTorrent client, it won't work out-of-the-box. The user needs to know his/her internet connection's upload capacity. This capacity may change, especially on laptops that may connect to a large number of different networks. The headroom of 20% is arbitrary and wastes bandwidth. Whenever there is no interactive traffic competing with BitTorrent, the extra 20% are wasted. Whenever there is competing interactive traffic, it cannot use more than 20% of the capacity. uTP solves this problem by using the modem queue size as a controller for its send rate. When the queue grows too large, it throttles back. This lets it utilize the full upload capacity when there is no competition for it, and it lets it throttle back to virtually nothing when there is a lot of interactive traffic. overview This document assumes some knowledge of how TCP and window based congestion control works. uTP is a transport protocol layered on top of UDP. As such, it must (and has the ability to) implement its own congestion control. The main difference compared to TCP is the delay based congestion control. See the congestion control section. Like TCP, uTP uses window based congestion control. Each socket has a max_window which determines the maximum number of bytes the socket may have in-flight at any given time. Any packet that has been sent, but not yet acked, is considered to be in-flight. The number of bytes in-flight is cur_window. A socket may only send a packet if cur_window + packet_size is less than or equal to min(max_window, wnd_size). The packet size may vary, see the packet sizes section. wnd_size is the advertised window from the other end. It sets an upper limit on the number of packets in-flight. An implementation MAY violate the above rule if the max_window is smaller than the packet size, and it paces the packets so that the average cur_window is less than or equal to max_window. Each socket keeps a state for the last delay measurement from the other endpoint (reply_micro). Whenever a packet is received, this state is updated by subtracting timestamp_microseconds from the hosts current time, in microseconds (see header format). Every time a packet is sent, the sockets reply_micro value is put in the timestamp_difference_microseconds field of the packet header. Unlike TCP, sequence numbers and ACKs in uTP refers to packets, not bytes. This means uTP cannot repackage data when resending it. Each socket keeps a state of the next sequence number to use when sending a packet, seq_nr. It also keeps a state of the sequence number that was last received, ack_nr. The oldest unacked packet is seq_nr - cur_window. header format version 1 header:  0       4       8               16              24              32 +-------+-------+---------------+---------------+---------------+ | type  | ver   | extension     | connection_id                 | +-------+-------+---------------+---------------+---------------+ | timestamp_microseconds                                        | +---------------+---------------+---------------+---------------+ | timestamp_difference_microseconds                             | +---------------+---------------+---------------+---------------+ | wnd_size                                                      | +---------------+---------------+---------------+---------------+ | seq_nr                        | ack_nr                        | +---------------+---------------+---------------+---------------+  All fields are in network byte order (big endian). version This is the protocol version. The current version is 1. connection_id This is a random, unique, number identifying all the packets that belong to the same connection. Each socket has one connection ID for sending packets and a different connection ID for receiving packets. The endpoint initiating the connection decides which ID to use, and the return path has the same ID + 1. timestamp_microseconds This is the 'microseconds' parts of the timestamp of when this packet was sent. This is set using gettimeofday() on posix and QueryPerformanceTimer() on windows. The higher resolution this timestamp has, the better. The closer to the actual transmit time it is set, the better. timestamp_difference_microseconds This is the difference between the local time and the timestamp in the last received packet, at the time the last packet was received. This is the latest one-way delay measurement of the link from the remote peer to the local machine. When a socket is newly opened and doesn't have any delay samples yet, this must be set to 0. wnd_size Advertised receive window. This is 32 bits wide and specified in bytes. The window size is the number of bytes currently in-flight, i.e. sent but not acked. The advertised receive window lets the other end cap the window size if it cannot receive any faster, if its receive buffer is filling up. When sending packets, this should be set to the number of bytes left in the socket's receive buffer. extension The type of the first extension in a linked list of extension headers. 0 means no extension. There is currently one extension: Selective acks Extensions are linked, just like TCP options. If the extension field is non-zero, immediately following the uTP header are two bytes:  0               8               16 +---------------+---------------+ | extension     | len           | +---------------+---------------+  where extension specifies the type of the next extension in the linked list, 0 terminates the list. And len specifies the number of bytes of this extension. Unknown extensions can be skipped by simply advancing len bytes. Selective ACK Selective ACK is an extension that can selectively ACK packets non-sequentially. Its payload is a bitmask of at least 32 bits, in multiples of 32 bits. Each bit represents one packet in the send window. Bits that are outside of the send window are ignored. A set bit specifies that packet has been received, a cleared bit specifies that the packet has not been received. The header looks like this:  0               8               16 +---------------+---------------+---------------+---------------+ | extension     | len           | bitmask +---------------+---------------+---------------+---------------+                                 | +---------------+---------------+  Note that the len field of extensions refer to bytes, which in this extension must be at least 4, and in multiples of 4. The selective ACK is only sent when at least one sequence number was skipped in the received stream. The first bit in the mask therefore represents ack_nr + 2. ack_nr + 1 is assumed to have been dropped or be missing when this packet was sent. A set bit represents a packet that has been received, a cleared bit represents a packet that has not yet been received. The bitmask has reverse byte order. The first byte represents packets [ack_nr + 2, ack_nr + 2 + 7] in reverse order. The least significant bit in the byte represents ack_nr + 2, the most significant bit in the byte represents ack_nr + 2 + 7. The next byte in the mask represents [ack_nr + 2 + 8, ack_nr + 2 + 15] in reverse order, and so on. The bitmask is not limited to 32 bits but can be of any size. Here is the layout of a bitmask representing the first 32 packet acks represented in a selective ACK bitfield:  0               8               16 +---------------+---------------+---------------+---------------+ | 9 8 ...   3 2 | 17   ...   10 | 25   ...   18 | 33   ...   26 | +---------------+---------------+---------------+---------------+  The number in the diagram maps the bit in the bitmask to the offset to add to ack_nr in order to calculate the sequence number that the bit is ACKing. type The type field describes the type of packet. It can be one of: ST_DATA = 0 regular data packet. Socket is in connected state and has data to send. An ST_DATA packet always has a data payload. ST_FIN = 1 Finalize the connection. This is the last packet. It closes the connection, similar to TCP FIN flag. This connection will never have a sequence number greater than the sequence number in this packet. The socket records this sequence number as eof_pkt. This lets the socket wait for packets that might still be missing and arrive out of order even after receiving the ST_FIN packet. ST_STATE = 2 State packet. Used to transmit an ACK with no data. Packets that don't include any payload do not increase the seq_nr. ST_RESET = 3 Terminate connection forcefully. Similar to TCP RST flag. The remote host does not have any state for this connection. It is stale and should be terminated. ST_SYN = 4 Connect SYN. Similar to TCP SYN flag, this packet initiates a connection. The sequence number is initialized to 1. The connection ID is initialized to a random number. The syn packet is special, all subsequent packets sent on this connection (except for re-sends of the ST_SYN) are sent with the connection ID + 1. The connection ID is what the other end is expected to use in its responses. When receiving an ST_SYN, the new socket should be initialized with the ID in the packet header. The send ID for the socket should be initialized to the ID + 1. The sequence number for the return channel is initialized to a random number. The other end expects an ST_STATE packet (only an ACK) in response. seq_nr This is the sequence number of this packet. As opposed to TCP, uTP sequence numbers are not referring to bytes, but packets. The sequence number tells the other end in which order packets should be served back to the application layer. ack_nr This is the sequence number the sender of the packet last received in the other direction. connection setup Here is a diagram illustrating the exchanges and states to initiate a connection. The c.* refers to a state in the socket itself, pkt.* refers to a field in the packet header.  initiating endpoint                           accepting endpoint            | c.state = CS_SYN_SENT                         |           | c.seq_nr = 1                                  |           | c.conn_id_recv = rand()                       |           | c.conn_id_send = c.conn_id_recv + 1           |           |                                               |           |                                               |           | ST_SYN                                        |           |   seq_nr=c.seq_nr++                           |           |   ack_nr=*                                    |           |   conn_id=c.rcv_conn_id                       |           | >-------------------------------------------> |           |             c.receive_conn_id = pkt.conn_id+1 |           |             c.send_conn_id = pkt.conn_id      |           |             c.seq_nr = rand()                 |           |             c.ack_nr = pkt.seq_nr             |           |             c.state = CS_SYN_RECV             |           |                                               |           |                                               |           |                                               |           |                                               |           |                     ST_STATE                  |           |                       seq_nr=c.seq_nr++       |           |                       ack_nr=c.ack_nr         |           |                       conn_id=c.send_conn_id  |           | <------------------------------------------<  |           | c.state = CS_CONNECTED                        |           | c.ack_nr = pkt.seq_nr                         |           |                                               |           |                                               |           |                                               |           | ST_DATA                                       |           |   seq_nr=c.seq_nr++                           |           |   ack_nr=c.ack_nr                             |           |   conn_id=c.conn_id_send                      |           | >-------------------------------------------> |           |                        c.ack_nr = pkt.seq_nr  |           |                        c.state = CS_CONNECTED |           |                                               |           |                                               | connection established      .. ..|.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..|.. ..           |                                               |           |                     ST_DATA                   |           |                       seq_nr=c.seq_nr++       |           |                       ack_nr=c.ack_nr         |           |                       conn_id=c.send_conn_id  |           | <------------------------------------------<  |           | c.ack_nr = pkt.seq_nr                         |           |                                               |           |                                               |           V                                               V  Connections are identified by their conn_id header. If the connection ID of a new connection collides with an existing connection, the connection attempt will fails, since the ST_SYN packet will be unexpected in the existing stream, and ignored. packet loss If the packet with sequence number (seq_nr - cur_window) has not been acked (this is the oldest packet in the send buffer, and the next one expected to be acked), but 3 or more packets have been acked past it (through Selective ACK), the packet is assumed to have been lost. Similarly, when receiving 3 duplicate acks, ack_nr + 1 is assumed to have been lost (if a packet with that sequence number has been sent). This is applied to selective acks as well. Each packet that is acked in the selective ack message counts as one duplicate ack, which, if it 3 or more, should trigger a re-send of packets that had at least 3 packets acked after them. When a packet is lost, the max_window is multiplied by 0.5 to mimic TCP. timeouts Every packet that is ACKed, either by falling in the range (last_ack_nr, ack_nr] or by explicitly being acked by a Selective ACK message, should be used to update an rtt (round trip time) and rtt_var (rtt variance) measurement. last_ack_nr here is the last ack_nr received on the socket before the current packet, and ack_nr is the field in the currently received packet. The rtt and rtt_var is only updated for packets that were sent only once. This avoids problems with figuring out which packet was acked, the first or the second one. rtt and rtt_var are calculated by the following formula, every time a packet is ACKed:  delta = rtt - packet_rtt rtt_var += (abs(delta) - rtt_var) / 4; rtt += (packet_rtt - rtt) / 8;  The default timeout for packets associated with the socket is also updated every time rtt and rtt_var is updated. It is set to:  timeout = max(rtt + rtt_var * 4, 500);  Where timeout is specified in milliseconds. i.e. the minimum timeout for a packet is 1/2 second. Every time a socket sends or receives a packet, it updates its timeout counter. If no packet has arrived within timeout number of milliseconds from the last timeout counter reset, the socket triggers a timeout. It will set its packet_size and max_window to the smallest packet size (150 bytes). This allows it to send one more packet, and this is how the socket gets started again if the window size goes down to zero. The initial timeout is set to 1000 milliseconds, and later updated according to the formula above. For every packet consecutive subsequent packet that times out, the timeout is doubled. packet sizes In order to have as little impact as possible on slow congested links, uTP adjusts its packet size down to as small as 150 bytes per packet. Using packets that small has the benefit of not clogging a slow up-link, with long serialization delay. The cost of using packets that small is that the overhead from the packet headers become significant. At high rates, large packet sizes are used, at slow rates, small packet sizes are used. congestion control The overall goal of the uTP congestion control is to use one way buffer delay as the main congestion measurement, as well as packet loss, like TCP. The point is to avoid running with full send buffers whenever data is being sent. This is specifically a problem for DSL/Cable modems, where the send buffer in the modem often has room for multiple seconds worth of data. The ideal buffer utilization for uTP (or any background traffic protocol) is to run at 0 bytes buffer utilization. i.e. any other traffic can at any time send without being obstructed by background traffic clogging up the send buffer. In practice, the uTP target delay is set to 100 ms. Each socket aims to never see more than 100 ms delay on the send link. If it does, it will throttle back. This effectively makes uTP yield to any TCP traffic. This is achieved by including a high resolution timestamp in every packet that's sent over uTP, and the receiving end calculates the difference between its own high resolution timer and the timestamp in the packet it received. This difference is then fed back to the original sender of the packet (timestamp_difference_microseconds). This value is not meaningful as an absolute value. The clocks in the machines are most likely not synchronized, especially not down to microsecond resolution, and the time the packet is in transit is also included in the difference of these timestamps. However, the value is useful in comparison to previous values. Each socket keeps a sliding minimum of the lowest value for the last two minutes. This value is called base_delay, and is used as a baseline, the minimum delay between the hosts. When subtracting the base_delay from the timestamp difference in each packet you get a measurement of the current buffering delay on the socket. This measurement is called our_delay. It has a lot of noise it it, but is used as the driver to determine whether to increase or decrease the send window (which controls the send rate). The CCONTROL_TARGET is the buffering delay that the uTP accepts on the up-link. Currently the delay target is set to 100 ms. off_target is how far the actual measured delay is from the target delay (calculated from CCONTROL_TARGET - our_delay). The window size in the socket structure specifies the number of bytes we may have in flight (not acked) in total, on the connection. The send rate is directly correlated to this window size. The more bytes in flight, the faster send rate. In the code, the window size is called max_window. Its size is controlled, roughly, by the following expression:  delay_factor = off_target / CCONTROL_TARGET; window_factor = outstanding_packet / max_window; scaled_gain = MAX_CWND_INCREASE_PACKETS_PER_RTT * delay_factor * window_factor;  Where the first factor scales the off_target to units of target delays. The scaled_gain is then added to the max_window:  max_window += scaled_gain;  This will make the window smaller if off_target is greater than 0 and grow the window if off target is less than 0. If max_window becomes less than 0, it is set to 0. A window size of zero means that the socket may not send any packets. In this state, the socket will trigger a timeout and force the window size to one packet size, and send one packet. See the section on timeouts for more information."	"null"	"null"	"— a (Micro Transport Protocol) library for Rust."	"true"
"Network programming"	""	"https://travis-ci.org/meqif/rust-utp"	"— a (Micro Transport Protocol) library for Rust."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a (Micro Transport Protocol) library for Rust."	"true"
"Network programming"	"erickt/rust-zmq"	"https://github.com/erickt/rust-zmq"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"183"	"19"	"58"	"GitHub - erickt/rust-zmq: Rust zeromq bindings. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 183 Fork 58 erickt/rust-zmq Code Issues 10 Pull requests 10 Pulse Graphs Rust zeromq bindings. 349 commits 4 branches 11 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master rust-0.8 wip Nothing to show v0.7.0 v0.6.0 v0.2 v0.1 0.6.7 0.6.6 0.6.5 0.6.4 0.6.3 0.6.2 0.6.1 Nothing to show New pull request Latest commit 87a6bd2 Nov 6, 2015 jedisct1 Merge pull request #82 from petehayes102/fix-libc-v0.2 … Fixed compat with libc v0.2 Permalink Failed to load latest commit information. examples add zguide example for multiple socket reader Jun 26, 2015 src Fixed compat with libc v0.2. Locked Cargo to 0.2.* to avoid future br… Nov 6, 2015 tests Use travis-cargo Sep 21, 2015 zmq-sys Fixed compat with libc v0.2. Locked Cargo to 0.2.* to avoid future br… Nov 6, 2015 .appveyor.yml Add appveyor script Sep 21, 2015 .gitignore add zguide example for multiple socket reader Jun 26, 2015 .travis.yml Use travis-cargo Sep 22, 2015 Cargo.toml Fixed compat with libc v0.2. Locked Cargo to 0.2.* to avoid future br… Nov 6, 2015 LICENSE-APACHE Add MIT/ASL2 license Feb 21, 2014 LICENSE-MIT Add MIT/ASL2 license Feb 22, 2014 README.md Add more badges Sep 21, 2015 README.md Rust ZeroMQ bindings. Installation rust-zmq uses cargo to install. Users should add this to their Cargo.toml file: [dependencies.zmq] git = ""https://github.com/erickt/rust-zmq.git""  Install for developers: % git clone https://github.com/erickt/rust-zmq % cd rust-zmq % cargo build  Usage rust-zmq is a pretty straight forward port of the C API into Rust: extern crate zmq;  fn main() {     let mut ctx = zmq::Context::new();      let mut socket = match ctx.socket(zmq::REQ) {       Ok(socket) => { socket },       Err(e) => { panic!(e) }     };      match socket.connect(""tcp://127.0.0.1:1234"") {       Ok(()) => (),       Err(e) => panic!(e)     }      match socket.send_str(""hello world!"", 0) {       Ok(()) => (),       Err(e) => panic!(e)     } } You can find more usage examples in https://github.com/erickt/rust-zmq/tree/master/examples. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/erickt/rust-zmq"	"— bindings"	"true"
"Network programming"	"ZeroMQ"	"http://zeromq.org/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Distributed Messaging - zeromq zeromq Create account or Sign in Distributed Messaging ZeroMQ \zero-em-queue\, \ØMQ\:  Ø  Connect your code in any language, on any platform.  Ø  Carries messages across inproc, IPC, TCP, TIPC, multicast.  Ø  Smart patterns like pub-sub, push-pull, and router-dealer.  Ø  High-speed asynchronous I/O engines, in a tiny library.  Ø  Backed by a large and active open source community.  Ø  Supports every modern language and platform.  Ø  Build any architecture: centralized, distributed, small, or large.  Ø  Free software with full commercial support. Learn the Basics Get the Software Solve a Problem Join the Community Paid Support Buy the Book Web site design and content is copyright (c) 2014 iMatix Corporation. Contact us for professional support. Site content licensed under cc-by-sa 3.0 ØMQ is copyright (c) Copyright (c) 2007-2014 iMatix Corporation and Contributors. ØMQ is free software licensed under the LGPL. ØMQ and ZEROMQ are trademarks of iMatix Corporation. Terms of Use — Privacy Policy Click here to edit contents of this page. Click here to toggle editing of individual sections of the page (if possible). Watch headings for an ""edit"" link when available. Append content without editing the whole page source. Check out how this page has evolved in the past. If you want to discuss contents of this page - this is the easiest way to do it. View and manage file attachments for this page. A few useful tools to manage this Site. See pages that link to and include this page. Change the name (also URL address, possibly the category) of the page. View wiki source for this page without editing. View/set parent page (used for creating breadcrumbs and structured layout)."	"null"	"null"	"— bindings"	"true"
"Network programming"	""	"https://travis-ci.org/erickt/rust-zmq"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Parser"	"Geal/nom"	"https://github.com/Geal/nom"	"— parser combinator library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"877"	"41"	"95"	"GitHub - Geal/nom: Rust parser combinator framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 41 Star 877 Fork 95 Geal/nom Code Issues 41 Pull requests 16 Wiki Pulse Graphs Rust parser combinator framework 909 commits 13 branches 34 releases 49 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0 1.1.0 aggregated-errors custom-error-position-type early-return-errors incomplete-closure incomplete inference-test iterator joelself-methods-merge master soro-experiments typed-errors Nothing to show 1.2.2 1.2.1 1.2.0 1.1.0 1.0.1 1.0.0 1.0.0-beta2 1.0.0-beta 1.0.0-alpha2 1.0.0-alpha 0.5.0 0.4.0 0.3.11 0.3.10 0.3.9 0.3.8 0.3.7 0.3.6 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.2 0.2.1 0.2.0 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 6937d8e Jun 26, 2016 Geal committed on GitHub Merge pull request #267 from pwoolcoc/add-rest_s-fn … Add rest_s function Permalink Failed to load latest commit information. assets add links.txt to the assets Nov 16, 2015 src Merge pull request #267 from pwoolcoc/add-rest_s-fn Jun 26, 2016 tests fix some warnings May 10, 2016 .gitignore Move the test files to the assets subdirectory Nov 7, 2015 .travis.yml Deactivate building with regexp_macros feature on nightly for now May 10, 2016 CHANGELOG.md Bump version to 1.2.3 and update changelog May 10, 2016 CONTRIBUTING.md doc: Add a contribution guideline Mar 26, 2016 Cargo.toml Bump version to 1.2.3 and update changelog May 10, 2016 LICENSE add MIT license Feb 23, 2015 README.md Add XFS crate May 19, 2016 README.md nom, eating data byte by byte nom is a parser combinators library written in Rust. Its goal is to provide tools to build safe parsers without compromising the speed or memory consumption. To that end, it uses extensively Rust's strong typing, zero copy parsing, push streaming, pull streaming, and provides macros and traits to abstract most of the error prone plumbing. nom can handle any format, binary or textual, with grammars from regular to context sensitive. There are already a lot of example parsers available on Github. If you need any help developing your parsers, please ping geal on IRC (mozilla, freenode, geeknode, oftc), go to #nom on Mozilla IRC, or on the Gitter chat room. Features Here are the current and planned features, with their status: byte-oriented: the basic type is &[u8] and parsers will work as much as possible on byte array slices (but are not limited to them) bit-oriented: nom can address a byte slice as a bit stream string-oriented: the same kind of combinators can apply on UTF-8 strings as well zero-copy: in the parsers: a parsing chain will almost always return a slice of its input data in the producers and consumers: some copying still happens streaming: push: a data producer can continuously feed consumers and parsers, as long as there is data available pull: a consumer will handle the produced data and drive seeking in the producer macro based syntax: easier parser building through macro usage state machine handling: consumers provide a basic way of managing state machines descriptive errors: the parsers can aggregate a list of error codes with pointers to the incriminated input slice. Those error lists can be pattern matched to provide useful messages. custom error types: you can provide a specific type to improve errors returned by parsers safe parsing: nom leverages Rust's safe memory handling and powerful types, and parsers are routinely fuzzed and tested with real world data. So far, the only flaws found by fuzzing were in code written outside of nom speed: benchmarks have shown that nom parsers often outperform many parser combinators library like Parsec and attoparsec, some regular expression engines and even handwritten C parsers Reference documentation is available here. Some benchmarks are available on Github. Installation nom is available on crates.io and can be included in your Cargo enabled project like this: [dependencies] nom = ""^1.2.3"" Then include it in your code like this: #[macro_use] extern crate nom; NOTE: if you have existing code using nom below the 1.0 version, please take a look at the upgrading documentation to handle the breaking changes. There are a few compilation features: core: enables no_std builds regexp: enables regular expression parsers with the regex crate regexp_macros: enables regular expression parsers with the regex and regex_macros crates. Regular expressions can be defined at compile time, but it requires a nightly version of rustc You can activate those features like this: [dependencies.nom] version = ""^1.2.3"" features = [""regexp""] Usage Parser combinators Parser combinators are an approach to parsers that is very different from software like lex and yacc. Instead of writing the grammar in a separate file and generating the corresponding code, you use very small functions with very specific purpose, like ""take 5 bytes"", or ""recognize the word 'HTTP'"", and assemble then in meaningful patterns like ""recognize 'HTTP', then a space, then a version"". The resulting code is small, and looks like the grammar you would have written with other parser approaches. This has a few advantages: the parsers are small and easy to write the parsers components are easy to reuse (if they're general enough, please add them to nom!) the parsers components are easy to test separately (unit tests and property-based tests) the parser combination code looks close to the grammar you would have written you can build partial parsers, specific to the data you need at the moment, and ignore the rest Here is an example of one such parser, to recognize text between parentheses: named!(parens, delimited!(char!('('), is_not!("")""), char!(')'))); It defines a function named parens, which will recognize a sequence of the character '(', the longest byte array not containing ')', then the character ')', and will return the byte array in the middle. Here is another parser, written without using nom's macros this time: fn take4(i:&[u8]) -> IResult<&[u8], &[u8]>{   if i.len() < 4 {     IResult::Incomplete(Needed::Size(4))   } else {     IResult::Done(&i[4..],&i[0..4])   } } This function takes a byte array as input, and tries to consume 4 bytes. With macros, you would write it like this: named!(take4, take!(4)); A parser in nom is a function which, for an input type I, an output type O, and an optional error type E, will have the following signature: fn parser(input: I) -> IResult<I, O, E>; Or like this, if you don't want to specify a custom error type (it will be u32 by default): fn parser(input: I) -> IResult<I, O>; IResult is an enumeration that can represent: a correct result Done(I,O) with the first element being the rest of the input (not parsed yet), and the second being the output value an error Error(Err) with Err an enum that can represent an error with, optionally, position information and a chain of accumulated errors an Incomplete(Needed) indicating that more input is necessary. Needed can indicate how much data is needed pub enum IResult<I,O,E=u32> {   Done(I,O),   Error(Err<I,E>),   Incomplete(Needed) }  pub enum Err<P,E=u32>{   /// an error code   Code(ErrorKind<E>),   /// an error code, and the next error in the parsing chain   Node(ErrorKind<E>, Box<Err<P,E>>),   /// an error code and the related input position   Position(ErrorKind<E>, P),   /// an error code, the related input position, and the next error in the parsing chain   NodePosition(ErrorKind<E>, P, Box<Err<P,E>>) }  pub enum Needed {   /// needs more data, but we do not know how much   Unknown,   /// contains the required data size   Size(usize) } There is already a large list of basic parsers available, like: length_value: a byte indicating the size of the following buffer not_line_ending: returning as much data as possible until a line ending (\r or \n) is found line_ending: matches a line ending alpha: will return the longest alphabetical array from the beginning of the input digit: will return the longest numerical array from the beginning of the input alphanumeric: will return the longest alphanumeric array from the beginning of the input space: will return the longest array containing only spaces multispace: will return the longest array containing space, \r or \n be_u8, be_u16, be_u32, be_u64 to parse big endian unsigned integers of multiple sizes be_i8, be_i16, be_i32, be_i64 to parse big endian signed integers of multiple sizes be_f32, be_f64 to parse big endian floating point numbers eof: a parser that is successful only if the input is over. In any other case, it returns an error. Please refer to the documentation for an exhaustive list of parsers. Making new parsers with macros Macros are the main way to make new parsers by combining other ones. Those macros accept other macros or function names as arguments. You then need to make a function out of that combinator with named!, or a closure with closure!. Here is how you would do, with the tag! and take! combinators: named!(abcd_parser, tag!(""abcd"")); // will consume bytes if the input begins with ""abcd""   named!(take_10, take!(10));                // will consume 10 bytes of input The named! macro can take three different syntaxes: named!(my_function( &[u8] ) -> &[u8], tag!(""abcd""));  named!(my_function<&[u8], &[u8]>, tag!(""abcd""));  named!(my_function, tag!(""abcd"")); // when you know the parser takes &[u8] as input, and returns &[u8] as output IMPORTANT NOTE: Rust's macros can be very sensitive to the syntax, so you may encounter an error compiling parsers like this one: named!(my_function<&[u8], Vec<&[u8]>>, many0!(tag!(""abcd""))); You will get the following error: ""error: expected an item keyword"". This happens because >> is seen as an operator, so the macro parser does not recognize what we want. There is a way to avoid it, by inserting a space: named!(my_function<&[u8], Vec<&[u8]> >, many0!(tag!(""abcd""))); This will compile correctly. I am very sorry for this inconvenience. Common combinators Here are the basic macros available: tag!: will match the byte array provided as argument is_not!: will match the longest array not containing any of the bytes of the array provided to the macro is_a!: will match the longest array containing only bytes of the array provided to the macro take_while!: will walk the whole array and apply the closure to each suffix until the function fails take!: will take as many bytes as the number provided take_until!: will take as many bytes as possible until it encounters the provided byte array, and will leave it in the remaining input take_until_and_consume!: will take as many bytes as possible until it encounters the provided byte array, and will skip it take_until_either_and_consume!: will take as many bytes as possible until it encounters one of the bytes of the provided array, and will skip it take_until_either!: will take as many bytes as possible until it encounters one of the bytes of the provided array, and will leave it in the remaining input map!: applies a function to the output of a IResult and puts the result in the output of a IResult with the same remaining input flat_map!: applies a parser to the output of a IResult and returns a new IResult with the same remaining input. map_opt!: applies a function returning an Option to the output of IResult, returns Done(input, o) if the result is Some(o), or Error(0) map_res!: applies a function returning a Result to the output of IResult, returns Done(input, o) if the result is Ok(o), or Error(0) Please refer to the documentation for an exhaustive list of combinators. Combining parsers There are more high level patterns, like the alt! combinator, which provides a choice between multiple parsers. If one branch fails, it tries the next, and returns the result of the first parser that succeeds: named!(alt_tags, alt!(tag!(""abcd"") | tag!(""efgh"")));  assert_eq!(alt_tags(b""abcdxxx""), Done(b""xxx"", b""abcd"")); assert_eq!(alt_tags(b""efghxxx""), Done(b""xxx"", b""efgh"")); assert_eq!(alt_tags(b""ijklxxx""), Error(1)); The pipe | character is used as separator. The opt! combinator makes a parser optional. If the child parser returns an error, opt! will succeed and return None: named!( abcd_opt, opt!( tag!(""abcd"") ) );  assert_eq!(abcd_opt(b""abcdxxx""), Done(b""xxx"", Some(b""abcd""))); assert_eq!(abcd_opt(b""efghxxx""), Done(b""efghxxx"", None)); many0! applies a parser 0 or more times, and returns a vector of the aggregated results: use std::str; named!(multi< Vec<&str> >, many0!( map_res!(tag!( ""abcd"" ), str::from_utf8) ) ); let a = b""abcdef""; let b = b""abcdabcdef""; let c = b""azerty""; assert_eq!(multi(a), Done(&b""ef""[..],     vec![""abcd""])); assert_eq!(multi(b), Done(&b""ef""[..],     vec![""abcd"", ""abcd""])); assert_eq!(multi(c), Done(&b""azerty""[..], Vec::new())); Here are some basic combining macros available: opt!: will make the parser optional (if it returns the O type, the new parser returns Option) many0!: will apply the parser 0 or more times (if it returns the O type, the new parser returns Vec) many1!: will apply the parser 1 or more times Please refer to the documentation for an exhaustive list of combinators. There are more complex (and more useful) parsers like chain! and tuple!, which are used to apply a series of parsers then assemble their results. Example with tuple!: named!(tpl<&[u8], (u16, &[u8], &[u8]) >,   tuple!(     be_u16 ,     take!(3),     tag!(""fg"")   ) );  assert_eq!(   tpl(&b""abcdefgh""[..]),   Done(     &b""h""[..],     (0x6162u16, &b""cde""[..], &b""fg""[..])   ) ); assert_eq!(tpl(&b""abcde""[..]), Incomplete(Needed::Size(7))); let input = &b""abcdejk""[..]; assert_eq!(tpl(input), Error(Position(ErrorKind::Tag, &input[5..]))); Example with chain!: struct A {   a: u8,   b: u8 }  fn ret_int1(i:&[u8]) -> IResult<&[u8], u8> { Done(i,1) } fn ret_int2(i:&[u8]) -> IResult<&[u8], u8> { Done(i,2) }  named!(f<&[u8],A>,   chain!(    // the parser takes a byte array as input, and returns an A struct     tag!(""abcd"")  ~      // begins with ""abcd""     tag!(""abcd"")? ~      // the question mark indicates an optional parser     aa: ret_int1  ~      // the return value of ret_int1, if it does not fail, will be stored in aa     tag!(""efgh"")  ~     bb: ret_int2  ~     tag!(""efgh"")  ,      // end the chain with a comma      ||{A{a: aa, b: bb}} // the final closure will be able to use the variable defined previously   ) );  let r = f(b""abcdabcdefghefghX""); assert_eq!(r, Done(b""X"", A{a: 1, b: 2}));  let r2 = f(b""abcdefghefghX""); assert_eq!(r2, Done(b""X"", A{a: 1, b: 2})); The tilde ~ is used as separator between every parser in the sequence, the comma , indicates the parser chain ended, and the last closure can see the variables storing the result of parsers. More examples of chain and tuple usage can be found in the INI file parser example. Parsers written with nom Here is a list of known projects using nom: Text file formats: Ceph Crush XFS Runtime Stats CSV FASTQ INI ISO 8601 dates libconfig-like configuration file format torrc configuration file Web archive Interface definition formats: Thrift Audio, video and image formats: GIF Document formats: TAR torrent files Database formats: Redis database files Network protocol formats: IRC Pcap-NG Want to create a new parser using nom? A list of not yet implemented formats is available here. Want to add your parser here? Create a pull request for it! TODO: example for new producers and consumers Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Geal/nom"	"— parser combinator library"	"true"
"Parser"	""	"https://travis-ci.org/Geal/nom"	"— parser combinator library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— parser combinator library"	"true"
"Parser"	"ivanceras/inquerest"	"https://github.com/ivanceras/inquerest"	"— an URL parameter parser for rest filter inquiry"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"2"	"1"	"GitHub - ivanceras/inquerest: url parameter parser for rest filter inquiry Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 14 Fork 1 ivanceras/inquerest Code Issues 0 Pull requests 0 Pulse Graphs url parameter parser for rest filter inquiry 76 commits 2 branches 2 releases Fetching contributors Rust 99.9% Shell 0.1% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 0.0.9 0.0.8 Nothing to show New pull request Latest commit 3ef9194 Jun 13, 2016 ivanceras update dep Permalink Failed to load latest commit information. examples put grouping on the example Nov 9, 2015 src Releasing 0.1.0 to crates.io Jun 12, 2016 tests Releasing 0.1.0 to crates.io Jun 12, 2016 unused added from and joins Nov 10, 2015 .gitignore Working except for case filter 6 Nov 7, 2015 .travis.yml Update .travis.yml Apr 8, 2016 Cargo.lock updated peg dependency Jun 13, 2016 Cargo.toml update dep Jun 13, 2016 LICENSE Added MIT license Nov 9, 2015 README.md touching to rebuild on latest nightlies Jan 7, 2016 appveyor.yml add more badges Nov 9, 2015 update-docs.sh Commiting docs to github pages Nov 7, 2015 README.md Inquerest A complex url parameter parser for rest filter queries Example age=lt.13&(student=eq.true|gender=eq.M)&group_by=sum(age),grade,gender&having=min(age)=gt.13&order_by=age.desc,height.asc&page=20&page_size=100&x=123&y=456   Will resolve into Query {         filters: [             Filter {                 connector: None,                 condition: Condition {                     left: Column(""age""),                     equality: LT,                     right: Number(13)                 },                 subfilter: [                     Filter {                         connector: Some(AND),                         condition: Condition {                             left: Column(""student""),                             equality: EQ,                             right: Boolean(true)                         },                         subfilter: [                             Filter {                                 connector: Some(OR),                                 condition: Condition {                                     left: Column(""gender""),                                     equality: EQ,                                     right: Column(""M"")                                 },                             }                         ]                     }                 ]             }         ],         group_by: [             Function(                 Function {                     function: ""sum"",                     params: [Column(""age"")]                 }             ),             Column(""grade""),             Column(""gender"")         ],         having: [             Filter {                 connector: None,                 condition: Condition {                     left: Function(                         Function {                             function: ""min"",                             params: [Column(""age"")]                         }                     ),                     equality: GT,                     right: Number(13)                 },             }         ],         order_by: [             Order {                 column: ""age"",                 direction: DESC             },             Order {                 column: ""height"",                 direction: ASC             }         ],         range: Some(Page(              Page{ page: 20, page_size:100 }          )),         equations: [             Equation {                 left: Column(""x""),                 right: Number(123)             },             Equation {                 left: Column(""y""),                 right: Number(456)             }         ]     }  More examples in examples tests Inspired by Postgrest Filter expressions Similar projects rustless/queryst If you like this library, please consider supporting the project on Gratipay. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ivanceras/inquerest"	"— an URL parameter parser for rest filter inquiry"	"true"
"Parser"	""	"https://travis-ci.org/ivanceras/inquerest"	"— an URL parameter parser for rest filter inquiry"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— an URL parameter parser for rest filter inquiry"	"true"
"Parser"	"kevinmehall/rust-peg"	"https://github.com/kevinmehall/rust-peg"	"— Parsing Expression Grammar (PEG) parser generator"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"288"	"19"	"40"	"GitHub - kevinmehall/rust-peg: Parsing Expression Grammar (PEG) parser generator for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 288 Fork 40 kevinmehall/rust-peg Code Issues 23 Pull requests 3 Pulse Graphs Parsing Expression Grammar (PEG) parser generator for Rust 286 commits 5 branches 28 releases 25 contributors Rust 99.9% Shell 0.1% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags context errpos master trace travis Nothing to show 0.3.14 0.3.13 0.3.12 0.3.11 0.3.10 0.3.9 0.3.8 0.3.7 0.3.6 0.3.5 0.3.4 0.3.3 0.3.2 0.3.1 0.3.0 0.2.3 0.2.2 0.2.1 0.2.0 0.1.9 0.1.8 0.1.7 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 Nothing to show New pull request Latest commit 4260800 Jul 3, 2016 kevinmehall 0.3.14 Permalink Failed to load latest commit information. benches Memoization May 24, 2015 src rust: Update for libsyntax changes Jul 3, 2016 tests rust: Remove deprecated IntoCow Feb 12, 2016 .gitignore Test with `cargo test`. Mar 8, 2015 .travis.yml travis: use Rust nightly May 19, 2015 Cargo.toml 0.3.14 Jul 3, 2016 LICENSE Add license (MIT) Sep 13, 2013 README.md Updated README May 26, 2015 bootstrap.sh rust: Update for libsyntax changes Jul 3, 2016 README.md Parsing Expression Grammars in Rust This is a simple parser generator based on the Parsing Expression Grammar formalism. Usage rust-peg relies on the unstable libsyntax crate, and only works on Nightly builds of Rust. However, generated parsers are compatible with 1.0 stable, so you can generate stable code by using the peg command line tool described below. As a syntax extension Add to your Cargo.toml: [dependencies] peg = ""0.3.0""  Add to your crate root: #![feature(plugin)] #![plugin(peg_syntax_ext)]  Use peg_file! modname(""mygrammarfile.rustpeg""); to include the grammar from an external file. The macro expands into a module called modname with functions corresponding to the #[pub] rules in your grammar. Or, use peg! modname(r#""   // grammar rules here ""#);`  to embed a short PEG grammar inline in your Rust source file. Example. As a standalone code generator Run peg input_file.rustpeg to compile a grammar and generate Rust code on stdout. This code works with stable Rust. Grammar Syntax use super::name;  The grammar may begin with a series of use declarations, just like in Rust, which are included in the generated module. Since the grammar is in its own module, you must use super::StructName; to access a structure from the parent module. #[pub] rule_name -> type    = expression  If a rule is marked with #[pub], the generated module has a public function that begins parsing at that rule. . - match any single character ""literal"" - match a literal string [a-z] - match a single character from a set [^a-z] - match a single character not in a set rule - match a production defined elsewhere in the grammar and return its result expression* - Match zero or more repetitions of expression and return the results as a Vec expression+ - Match one or more repetitions of expression and return the results as a Vec expression? - Match one or zero repetitions of expression. Returns an Option &expression - Match only if expression matches at this position, without consuming any characters !expression - Match only if expression does not match at this position, without consuming any characters expression ** delim - Match zero or more repetitions of expression delimited with delim and return the results as a Vec expression ++ delim - Match one or more repetitions of expression delimited with delim and return the results as a Vec e1 / e2 / e3 - Try to match e1. If the match succeeds, return its result, otherwise try e2, and so on. e1 e2 e3 - Match expressions in sequence a:e1 b:e2 c:e3 { rust } - Match e1, e2, e3 in sequence. If they match successfully, run the Rust code in the block and return its return value. The variable names before the colons in the preceding sequence are bound to the results of the corresponding expressions. The Rust code must contain matched curly braces, including those in strings and comments. a:e1 b:e2 c:e3 {? rust } - Like above, but the Rust block returns a Result instead of a value directly. On Ok(v), it matches successfully and returns v. On Err(e), the match of the entire expression fails and it tries alternatives or reports a parse error with the &str e. Match actions can extract data from the match using these variables: match_str - the matched string, as a &str slice. Examples: name -> String   = [a-zA-Z0-9_]+ { match_str.to_string() }  number -> int   = [0-9]+ { from_str::<u64>(match_str).unwrap() }  start_pos - the byte index into the string at which the match starts, inclusive pos - the byte index into the string at which the match ends, exclusive Tracing If you pass the peg/trace feature to Cargo when building your project, a trace of the parsing will be output to stdout when running the binary. For example, $ cargo run --features peg/trace ... [PEG_TRACE] Matched rule type at 8:5 [PEG_TRACE] Attempting to match rule ident at 8:12 [PEG_TRACE] Attempting to match rule letter at 8:12 [PEG_TRACE] Failed to match rule letter at 8:12 ...  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kevinmehall/rust-peg"	"— Parsing Expression Grammar (PEG) parser generator"	"true"
"Parser"	"m4rw3r/chomp"	"https://github.com/m4rw3r/chomp"	"– A fast monadic-style parser combinator"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"108"	"9"	"8"	"GitHub - m4rw3r/chomp: A fast monadic-style parser combinator designed to work on stable Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 108 Fork 8 m4rw3r/chomp Code Issues 12 Pull requests 2 Pulse Graphs A fast monadic-style parser combinator designed to work on stable Rust. 266 commits 7 branches 9 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags Chomp-0.2 feature/applicative feature/input_trait feature/nom_adapter features/applicative_alternative gh-pages master Nothing to show 0.2.6 0.2.5 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 0.1.2 0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. benches examples src tests .gitignore .travis.yml CHANGELOG.md Cargo.toml README.md README.md Chomp Chomp is a fast monadic-style parser combinator library designed to work on stable Rust. It was written as the culmination of the experiments detailed in these blog posts: Part 1 Part 2 Part 3 Chomp 0.1 Announcement For its current capabilities, you will find that Chomp performs consistently as well, if not better, than optimized C parsers, while being vastly more expressive. For an example that builds a performant HTTP parser out of smaller parsers, see http_parser.rs. Installation Add the following line to the dependencies section of your Cargo.toml: [dependencies] chomp = ""0.2.6"" Usage Parsers are functions from a slice over an input type Input<I> to a ParseResult<I, T, E>, which may be thought of as either a success resulting in type T, an error of type E, or a partially completed result which may still consume more input of type I. The input type is almost never manually manipulated. Rather, one uses parsers from Chomp by invoking the parse! macro. This macro was designed intentionally to be as close as possible to Haskell's do-syntax or F#'s ""computation expressions"", which are used to sequence monadic computations. At a very high level, usage of this macro allows one to declaratively: Sequence parsers, while short circuiting the rest of the parser if any step fails. Bind previous successful results to be used later in the computation. Return a composite datastructure using the previous results at the end of the computation. In other words, just as a normal Rust function usually looks something like this: fn f() -> (u8, u8, u8) {     let a = read_digit();     let b = read_digit();     launch_missiles();     return (a, b, a + b); } A Chomp parser with a similar structure looks like this: fn f(i: Input<u8>) -> U8Result<(u8, u8, u8)> {     parse!{i;         let a = read_digit();         let b = read_digit();         string(b""missiles"");         ret (a, b, a + b);     } } And to implement read_digit we can utilize the map function to manipulate any success value while preserving any error or incomplete state: // Standard rust, no error handling: fn read_digit() -> u8 {     let mut s = String::new();     std::io::stdin().read_line(&mut s).unwrap();     s.trim().parse().unwrap() }  // Chomp, error handling built in, and we make sure we only get a number: fn read_digit(i: Input<u8>) -> U8Result<u8> {     satisfy(i, |c| b'0' <= c && c <= b'9').map(|c| c - b'0') } For more documentation, see the rust-doc output. Example #[macro_use] extern crate chomp;  use chomp::{Input, U8Result, parse_only}; use chomp::{take_while1, token};  #[derive(Debug, Eq, PartialEq)] struct Name<'a> {     first: &'a [u8],     last:  &'a [u8], }  fn name(i: Input<u8>) -> U8Result<Name> {     parse!{i;         let first = take_while1(|c| c != b' ');                     token(b' ');  // skipping this char         let last  = take_while1(|c| c != b'\n');          ret Name{             first: first,             last:  last,         }     } }  fn main() {     assert_eq!(parse_only(name, ""Martin Wernstål\n"".as_bytes()), Ok(Name{         first: b""Martin"",         last: ""Wernstål"".as_bytes()     })); } Contact You can contact the author either through an issue here on GitHub, or you can query him at m4rw3r on mozilla's irc network. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/m4rw3r/chomp"	"– A fast monadic-style parser combinator"	"true"
"Parser"	""	"https://travis-ci.org/m4rw3r/chomp"	"– A fast monadic-style parser combinator"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"– A fast monadic-style parser combinator"	"true"
"Parser"	"Marwes/combine"	"https://github.com/Marwes/combine"	"— parser combinator library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"159"	"13"	"13"	"GitHub - Marwes/combine: A parser combinator library for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 159 Fork 13 Marwes/combine Code Issues 6 Pull requests 2 Pulse Graphs A parser combinator library for Rust https://marwes.github.io/combine/combine/index.html 265 commits 6 branches 9 releases 9 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0.0 gh-pages http input_as_param-2.0.0 master position_in_stream-2.0.0 Nothing to show v1.3.0 v1.2.1 v1.2.0 v1.1.1 v1.1.0 v1.0.2 v1.0.1 v1.0.0 v0.7.0 Nothing to show New pull request Latest commit abb1de7 Apr 17, 2016 Marwes perf: Possibly improve performance of the RangeStream impl for &str … If nothing else this should make the llvm's work a bit easier Permalink Failed to load latest commit information. benches perf: Possibly improve performance of the RangeStream impl for &str Apr 17, 2016 src perf: Possibly improve performance of the RangeStream impl for &str Apr 17, 2016 tests style: Run rustfmt Feb 15, 2016 .gitignore Initial commit Jan 11, 2015 .travis.yml Added the buffered_stream feature to hide the BufferedStream for stab… Sep 26, 2015 CHANGELOG.md Version 1.2.0 Nov 29, 2015 Cargo.toml feat: Version 1.3.0 Apr 16, 2016 LICENSE Licensed the project under the MIT license Jan 24, 2015 README.md Mention that SliceStream can be used for the old slice behaviour Nov 23, 2015 rustfmt.toml Run rustfmt Nov 28, 2015 README.md combine (Previously named parser-combinators) An implementation of parser combinators for Rust, inspired by the Haskell library Parsec. As in Parsec the parsers are LL(1) by default but they can opt-in to arbitrary lookahead using the try combinator. Example extern crate combine; use combine::{many, Parser}; use combine::char::letter;  let result = many(letter()).parse(""hello world""); assert_eq!(result, Ok((""hello"".to_string(), "" world""))); Larger examples can be found in the tests and benches folders. Links Documentation and examples crates.io About A parser combinator is, broadly speaking, a function which takes several parsers as arguments and returns a new parser, created by combining those parsers. For instance, the many parser takes one parser, p, as input and returns a new parser which applies p zero or more times. Thanks to the modularity that parser combinators gives it is possible to define parsers for a wide range of tasks without needing to implement the low level plumbing while still having the full power of Rust when you need it. The library adheres to semantic versioning. If you end up trying it I welcome any feedback from your experience with it. I am usually reachable within a day by opening an issue or sending an email. I am also testing gitter for smaller questions. Experimental additions Though combine is stable now that does not mean it is done. To make it as easy as possible to opt-in to these upcoming changes cargo features is used. If you include one or more of these features in your project you may experience breaking changes between versions. As these changes are unstable I really appreciate any and all feedback on these to help make the additions the best they can be. range_stream Adds parsers for zero copy parsing through the use of the RangeStream trait. buffered_stream Adds the BufferedStream type which can be used to read input from sources which cannot be freely cloned such as files. Extra There is an additional crate which has parsers to lex and parse programming languages in combine-language. You can find older versions of combine (parser-combinators) here. Contributing The easiest way to contribute is to just open an issue about any problems you encounter using combine but if you are interested in adding something to the library here is a list of some of the easier things to work on to get started. Add additional parsers There is a list of parsers which aren't implemented here but if you have a suggestion for another parser just leave a suggestion on the issue itself. Add additional examples More examples for using combine will always be useful! Add and improve the docs Not the fanciest of work but one cannot overstate the importance of good documentation. Breaking changes Here is a list containing most of the breaking changes in older versions of combine (parser-combinators). 1.0.0 &[T] streams has had the Item type changed from &T to T and requires a T: Copy bound. If you need the old behavior you can wrap the &[T] in the SliceStream newtype i.e parser.parse(SliceStream(slice)). 1.0.0-beta.3 Error::Unexpected holds an Info<T, R> instead of just a T to make it consistent with the other variants. 1.0.0-beta.2 Info<T> and Error<T> has had their signatures changed to Info<T, R> and Error<T, R>. Info has a new variant which is specified by R and defines the type for range errors. ParseError<T: Positioner> has been changed to ParseError<S: Stream> (S is the stream type of the parser). If you were using ParseResult from primitives you should no longer specify the item type of the stream. 0.7.0 Stream::uncons changed its signature to allow it to return errors. Return Error::end_of_input() instead of () if you implemented Stream. 0.6.0 Addition of Parser::parse_lazy, should not break anything but I can't say for certain. 0.5.0 any_char -> any, uncons_char -> uncons Introduction of the Positioner trait which needs to be implemented on an custom token types. satisfy is moved to the combinators module and made generic, might cause type inference issues. 0.4.0 any_char is no longer a free function but returns a parser when called as all parser functions (and its called any after 0.5.0) Cow is replaced by Info in the error messages. 0.3.2 / 0.3.0 Added variant to Error which can hold any kind of ::std::error::Error choice_vec and choice_slice is replaced by just choice 0.2.6 Iterators cannot directly be used as streams but must be wrapped using from_iter function If you have trouble updating to a newer version feel free to open an issue and I can take a look. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Marwes/combine"	"— parser combinator library"	"true"
"Parser"	""	"https://travis-ci.org/Marwes/combine"	"— parser combinator library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— parser combinator library"	"true"
"Parser"	"nikomatsakis/lalrpop"	"https://github.com/nikomatsakis/lalrpop"	"— LR(1) parser generator for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"254"	"20"	"27"	"GitHub - nikomatsakis/lalrpop: LR(1) parser generator for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 254 Fork 27 nikomatsakis/lalrpop Code Issues 32 Pull requests 4 Pulse Graphs LR(1) parser generator for Rust 477 commits 4 branches 0 releases 15 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages inline master table-driven Nothing to show Nothing to show New pull request Latest commit 4893dda Jun 29, 2016 nikomatsakis committed on GitHub Merge pull request #116 from ashleygwilliams/calc3 … fix spacing and add trailing commas to calc3 example Permalink Failed to load latest commit information. doc fix spacing and add trailing commas to calc3 example Jun 29, 2016 lalrpop-intern Update Cargo.toml to v0.11.0 Feb 25, 2016 lalrpop-snap Update Cargo.toml to v0.11.0 Feb 25, 2016 lalrpop-test use TokenSet for LR1 lookahead and not Token Jun 1, 2016 lalrpop-util Update Cargo.toml to v0.11.0 Feb 25, 2016 lalrpop do a better job suppressing dead-code warnings Jun 1, 2016 .gitignore ignore generated parser Jul 24, 2015 .travis.yml Fix travis.yml Feb 18, 2016 LICENSE-APACHE Switch license to MIT/Apache2 instead of Unlicense, in an effort to be Jan 24, 2016 LICENSE-MIT Switch license to MIT/Apache2 instead of Unlicense, in an effort to be Jan 24, 2016 README.md Bump the release number to 0.11.0 Feb 28, 2016 RELEASES.md Bump the release number to 0.11.0 Feb 28, 2016 publish.sh add preliminary Pascal grammar and test harness Mar 22, 2016 snap.sh Update snapshot to share reduction code. Aug 11, 2015 version.sh do not bump README version until publishing Jul 27, 2015 README.md LALRPOP LALRPOP is a Rust parser generator framework with usability as its primary goal. You should be able to write compact, DRY, readable grammars. To this end, LALRPOP offers a number of nifty features: Nice error messages in case parser constructor fails. Macros that let you extract common parts of your grammar. This means you can go beyond simple repetition like Id* and define things like Comma<Id> for a comma-separated list of identifiers. Macros can also create subsets, so that you easily do something like Expr<""all""> to represent the full range of expressions, but Expr<""if""> to represent the subset of expressions that can appear in an if expression. Builtin support for operators like * and ?. Compact defaults so that you can avoid writing action code much of the time. Type inference so you can often omit the types of nonterminals. Despite its name, LALRPOP in fact uses LR(1) by default (though you can opt for LALR(1)), and really I hope to eventually move to something general that can handle all CFGs (like GLL, GLR, LL(*), etc). Documentation There is a tutorial available here that covers a fair bit of the features of LALRPOP. For the more advanced things are not yet covered, it also points you to tests that may help give you the idea. I plan eventually to build up a reference manual in the Wiki, but that's not even started. Obligatory disclaimer LALRPOP is still in its relatively early days. Not all the features I want are there, and the error messages are sometimes a bit opaque. But it's quite powerful already. It's also self-hosting, which is fun. Using LALRPOP Configuration cargo There are two ways to use LALRPOP. The recommended way is to configure Cargo to automatically change all .lalrpop files into .rs files by adding a build.rs file. Here is a ""cheat sheet"" for how to do that. This section is for if you already know what you're doing and just want to copy-and-paste some code for adding LALRPOP to your Cargo project. To enable LALRPOP, add the following lines to your Cargo.toml: [package] ... build = ""build.rs"" # LALRPOP preprocessing  # Add a dependency on the LALRPOP runtime library: [dependencies.lalrpop-util] version = ""0.11.0""  [build-dependencies.lalrpop] version = ""0.11.0""  And create a build.rs file that looks like: extern crate lalrpop;  fn main() {     lalrpop::process_root().unwrap(); } (If you already have a build.rs file, you should be able to just call process_root in addition to whatever else that file is doing.) That's it! Running manually If you prefer, you can also run the lalrpop crate as an executable. Simply run cargo install lalrpop and then you will get a lalrpop binary you can execute, like so: lalrpop file.lalrpop  This will generate file.rs for you. Note that it only executes if file.lalrpop is newer than file.rs; if you'd prefer to execute unconditionally, pass -f (also try --help for other options). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nikomatsakis/lalrpop"	"— LR(1) parser generator for Rust"	"true"
"Parser"	""	"https://travis-ci.org/nikomatsakis/lalrpop"	"— LR(1) parser generator for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— LR(1) parser generator for Rust"	"true"
"Parser"	"ptal/oak"	"https://github.com/ptal/oak"	"— a typed PEG parser generator (compiler plugin)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"80"	"6"	"5"	"GitHub - ptal/oak: A typed parser generator embedded in Rust code for Parsing Expression Grammars Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 80 Fork 5 ptal/oak Code Issues 30 Pull requests 0 Pulse Graphs A typed parser generator embedded in Rust code for Parsing Expression Grammars 306 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master simple_ast Nothing to show Nothing to show New pull request Latest commit d2611fd May 17, 2016 ptal [rustc][nightly] fix warning in runtime, do not use char_at anymore. … … …Bump Cargo version. Permalink Failed to load latest commit information. data/test [Tests] Add new data for testing the calc grammar. Sep 16, 2015 doc [Documentation] Use multirust for installing nighly build of Rust. It… Feb 15, 2016 grammars [Grammars] Add identifier and Rust keyword. Oct 12, 2015 runtime [rustc][nightly] fix warning in runtime, do not use char_at anymore. … May 17, 2016 src/liboak Updating to latest Rust nightly. May 16, 2016 tests [Bug][Recursive type] Better analysis of recursive type. Do not provo… Feb 26, 2016 .travis.yml [Architecture][Parsers] Test parsers sub-crate with Travis. Oct 9, 2015 Cargo.toml [rustc][nightly] fix warning in runtime, do not use char_at anymore. … May 17, 2016 LICENSE Initial commit Jul 6, 2014 README.md [rustc][nightly] fix warning in runtime, do not use char_at anymore. … May 17, 2016 README.md Oak Compiled on the nightly channel of Rust. Use rustup for managing compiler channels. Download the exact same version of the compiler used with rustup override add nightly-2016-05-16. Please consult the Oak manual. Features Grammar description as a Rust syntax extension. Generation of both recognizer and parser functions for each rules. Type inference for each parsing expressions. Simplify the AST construction. Build local documentation You might want to build the manual or code documentation from the repository because you need it to be synchronized with a specific version of Oak or simply for offline usage. Here how to do it! Build the manual You need the utility rustbook: git clone https://github.com/steveklabnik/rustbook.git cd rustbook cargo build  Once built, go inside oak/doc and execute rustbook build. The manual is generated inside a local folder named _book. Build the code documentation You should be interested by the runtime documentation which is the one useful for users. cd oak/runtime cargo doc  The documentation is available in oak/runtime/target/doc. If you want the developer documentation of the Oak compiler, go to the root of the project and launch: cd oak rustdoc --no-defaults --passes ""collapse-docs"" --passes ""unindent-comments"" --output=target/dev-doc src/liboak/lib.rs  The documentation will be available inside oak/target/dev-doc. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ptal/oak"	"— a typed PEG parser generator (compiler plugin)"	"true"
"Parser"	"rustless/queryst"	"https://github.com/rustless/queryst"	"— a query string parsing library for Rust inspired by"	"null"	"null"	"null"	"null"	"null"	"https://github.com/ljharb/qs"	"null"	"20"	"3"	"4"	"GitHub - rustless/queryst: Rust query string parser with nesting support Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 20 Fork 4 rustless/queryst Code Issues 0 Pull requests 0 Pulse Graphs Rust query string parser with nesting support 65 commits 4 branches 1 release 5 contributors Rust 98.6% Makefile 1.4% Rust Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/update flaub-master gh-pages master Nothing to show v1.0.0 Nothing to show New pull request Latest commit 6dc53d0 May 1, 2016 s-panferov Merge pull request #6 from rustless/feature/update … Feature/update Permalink Failed to load latest commit information. src feat(*): move to serde May 1, 2016 .gitignore Initial commit Sep 24, 2014 .travis.yml Modified source to compile with rust 1.0.0 alpha Jan 19, 2015 CONTRIBUTING.md chore(CONTRIBUTING): add guide Feb 14, 2015 Cargo.toml docs(README): update May 1, 2016 LICENSE chore: license Dec 6, 2014 Makefile chore: modify CNAME Dec 6, 2014 README.md docs(README): update May 1, 2016 README.md What is Queryst? A query string parsing library for Rust inspired by https://github.com/hapijs/qs. A part of REST-like API micro-framework Rustless. # Cargo.toml  [dependencies] queryst = ""1"" API docs Usage Use queryst library to parse query-string to corresponding json values. use query::parse;  // will contain result as Json value let object = parse(""foo[0][a]=a&foo[0][b]=b&foo[1][a]=aa&foo[1][b]=bb""); Description queryst allows you to create nested objects within your query strings, by surrounding the name of sub-keys with square brackets []. or example, the string 'foo[bar]=baz' converts to this JSON: {   ""foo"": {     ""bar"": ""baz""   } } URI encoded strings work too: parse('a%5Bb%5D=c'); // { ""a"": { ""b"": ""c"" } } You can also nest your objects, like 'foo[bar][baz]=foobarbaz': {   ""foo"": {     ""bar"": {       ""baz"": ""foobarbaz""     }   } } Parsing Arrays queryst can also parse arrays using a similar [] notation: parse('a[]=b&a[]=c'); // { ""a"": [""b"", ""c""] } You may specify an index as well: parse('a[0]=c&a[1]=b'); // { ""a"": [""c"", ""b""] } Note that the only difference between an index in an array and a key in an object is that the value between the brackets must be a number to create an array. queryst does't allow to specify sparse indexes on arrays and will convert target array to object: parse('a[1]=b&a[15]=c'); // { ""a"": {""1"": ""b"", ""15"": ""c""} } Also if you mix notations, queryst will merge the two items into an object: parse('a[0]=b&a[b]=c'); // { ""a"": { ""0"": ""b"", ""b"": ""c"" } } You can also create arrays of objects: parse('a[][b]=c'); // { ""a"": [{ ""b"": ""c"" }] } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rustless/queryst"	"— a query string parsing library for Rust inspired by"	"true"
"Parser"	""	"https://travis-ci.org/rustless/queryst"	"— a query string parsing library for Rust inspired by"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a query string parsing library for Rust inspired by"	"true"
"Platform specific"	"hannobraun/inotify-rs"	"https://github.com/hannobraun/inotify-rs"	"— bindings"	"null"	"null"	"null"	"inotify"	"https://en.wikipedia.org/wiki/Inotify"	"null"	"null"	"40"	"3"	"15"	"GitHub - hannobraun/inotify-rs: inotify bindings for the Rust programming language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 40 Fork 15 hannobraun/inotify-rs Code Issues 1 Pull requests 0 Pulse Graphs inotify bindings for the Rust programming language 167 commits 1 branch 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f5c08bc Feb 4, 2016 hannobraun Update version Permalink Failed to load latest commit information. src Update wrapper.rs Feb 4, 2016 tests Fixed sporadic test failure. Nov 3, 2015 .gitignore Ignore *.swp Jan 9, 2015 .travis.yml Update Travis CI configuration Jan 29, 2016 Cargo.toml Update version Feb 4, 2016 README.md This line is no longer needed Aug 7, 2015 inotify-rs.sublime-project Exclude target directory from Sublime text project Dec 22, 2014 README.md inotify-rs What is inotify-rs? It consists of two things: inotify bindings for the Rust programming language An idiomatic Rust wrapper for those bindings Is it any good? Yes. The bindings are complete (after all, inotify isn't that big of an API). The idiomatic wrapper needs some work, but is already useful as it is. How do I use it? Include it in your Cargo.toml: [dependencies] inotify = ""*"" And here's a little example: extern crate inotify;  use inotify::INotify; use inotify::ffi::*; use std::path::Path;  fn main() {     let mut ino = INotify::init().unwrap();      ino.add_watch(Path::new(""/home""), IN_MODIFY | IN_CREATE | IN_DELETE).unwrap();     loop {         let events = ino.wait_for_events().unwrap();          for event in events.iter() {             if event.is_create() {                 if event.is_dir() {                     println!(""The directory \""{}\"" was created."", event.name);                        } else {                     println!(""The file \""{}\"" was created."", event.name);                 }             } else if event.is_delete() {                 if event.is_dir() {                     println!(""The directory \""{}\"" was deleted."", event.name);                        } else {                     println!(""The file \""{}\"" was deleted."", event.name);                 }             } else if event.is_modify() {                 if event.is_dir() {                     println!(""The directory \""{}\"" was modified."", event.name);                 } else {                     println!(""The file \""{}\"" was modified."", event.name);                 }             }         }     } } Any documentation? The binding is fully documented, but because inotify usage is subject to various caveats, warnings, and recommendations to build a robust and efficient application, programmers should read through the inotify(7) man page. The wrapper is not documented at this time. (But pull requests are appreciated!) What's the license? Copyright (c) 2014, Hanno Braun and contributors Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hannobraun/inotify-rs"	"— bindings"	"true"
"Platform specific"	""	"https://travis-ci.org/hannobraun/inotify-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Platform specific"	"nix-rust/nix"	"https://github.com/nix-rust/nix"	"— Unix-like API bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"335"	"25"	"101"	"GitHub - nix-rust/nix: Rust friendly bindings to *nix APIs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 335 Fork 101 nix-rust/nix Code Issues 38 Pull requests 10 Pulse Graphs Rust friendly bindings to *nix APIs 558 commits 3 branches 7 releases 77 contributors Rust 95.9% C 2.3% Shell 1.8% Rust C Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto gh-pages master Nothing to show v0.6.0 v0.5.1 v0.5.0 v0.4.3 v0.4.2 v0.3.10 v0.3.9 Nothing to show New pull request Latest commit 1033385 Jul 13, 2016 homu Auto merge of #385 - posborne:gh-pages-docs, r=fiveop … Publish docs to gh-pages, add coveralls, update README  See the commit messages for some additional details.  This started out with just an update to publish the docs to gh-pages but snowballed into a few other changes along the way. Permalink Failed to load latest commit information. ci ci: push docs to gh-pages and code cov to coveralls Jul 10, 2016 nix-test test: clean up the test build script Mar 5, 2016 src eventfd: Follow nix conventions Jul 3, 2016 test Added lseek to unistd Jun 13, 2016 .gitignore Test errno defines Feb 19, 2015 .travis.yml ci: only attempt travis-cargo under linux Jul 12, 2016 CONTRIBUTING.md contributing: Add R- architecture-specific label prefix Mar 17, 2016 CONVENTIONS.md doc: Minor whitespace fix in CONVENTIONS.md Mar 28, 2016 Cargo.toml Use git master as libc version Jul 13, 2016 LICENSE Add a license file Feb 2, 2015 README.md docs: update readme to be a bit more useful Jul 12, 2016 build.rs Fix raw_pointer_derive warning Apr 2, 2016 deploy.sh Automatically deploy docs Feb 20, 2015 README.md Rust bindings to *nix APIs Documentation Nix seeks to provide friendly bindings to various *nix platform APIs (Linux, Darwin, ...). The goal is to not provide a 100% unified interface, but to unify what can be while still providing platform specific APIs. For many system APIs, Nix provides a safe alternative to the unsafe APIs exposed by the libc crate. This is done by wrapping the libc functionality with types/abstractions that enforce legal/safe usage. As an example of what Nix provides, examine the differences between what is exposed by libc and nix for the gethostname system call: // libc api (unsafe, requires handling return code/errno) pub unsafe extern fn gethostname(name: *mut c_char, len: size_t) -> c_int;  // nix api (returns a nix::Result) pub fn gethostname(name: &mut [u8]) -> Result<()>; Usage To use nix, first add this to your Cargo.toml: [dependencies] nix = ""0.6.0"" Then, add this to your crate root: extern crate nix; Contributing Contributions are very welcome. Please See CONTRIBUTING for additional details. License Nix is licensed under the MIT license. See LICENSE for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nix-rust/nix"	"— Unix-like API bindings"	"true"
"Platform specific"	""	"https://travis-ci.org/nix-rust/nix"	"— Unix-like API bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Unix-like API bindings"	"true"
"Platform specific"	"zargony/rust-fuse"	"https://github.com/zargony/rust-fuse"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"145"	"14"	"33"	"GitHub - zargony/rust-fuse: Rust library for filesystems in userspace (FUSE) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 145 Fork 33 zargony/rust-fuse Code Issues 15 Pull requests 3 Pulse Graphs Rust library for filesystems in userspace (FUSE) 350 commits 3 branches 8 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master travis_cleanup Nothing to show 0.2.7 0.2.6 0.2.5 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 Nothing to show New pull request Latest commit 98c00fb Mar 29, 2016 zargony Merge pull request #59 from zackmdavis/debug_trait … derive or implement fmt::Debug for public types Permalink Failed to load latest commit information. examples Use libc from crates.io Sep 5, 2015 src derive or implement fmt::Debug for remaining types Feb 29, 2016 .gitignore Remove Makefile and crate attributes since cargo does the build now Oct 28, 2014 .travis.yml Publish documentation for tagged releases only (closes #52) Oct 22, 2015 Cargo.toml Release 0.2.7 Sep 8, 2015 LICENSE.md Provide license in markdown format Oct 27, 2015 README.md Set doc root url and add link to online docs to README Oct 22, 2015 build.rs rename pkg-config crate due to upstream renaming Mar 29, 2015 README.md Rust FUSE - Filesystem in Userspace About Rust library for easy implementation of FUSE filesystems in userspace. This library does not just provide bindings, it is actually an improved rewrite of the original FUSE C library to fully take advantage of Rust's architecture. Documentation Rust-FUSE reference Details A working FUSE filesystem consists of three parts: The kernel driver that registers as a filesystem and forwards operations into a communication channel to a userspace process that handles them. The userspace library (libfuse) that helps the userspace process to establish and run communication with the kernel driver. The userspace implementation that actually processes the filesystem operations. The kernel driver is provided by the FUSE project, the userspace implementation needs to be provided by the developer. This Rust library provides a replacement for the libfuse userspace library between these two. This way, a developer can fully take advantage of the Rust type interface and runtime features when building a FUSE filesystem in Rust. Except for a single setup (mount) function call and a final teardown (umount) function call to libfuse, everything runs in Rust. Usage Put this in your Cargo.toml: [dependencies] fuse = ""0.2"" and in your crate root: extern crate fuse; To create a new filesystem, implement the trait Filesystem. Filesystem operations from the kernel are dispatched to the methods of the Filesystem trait. Most methods get a reply parameter that must be used to eventually answer the request. All methods have default implementations that reply with neutral answers, so if you implement no method at all, you still get a mountable filesystem that does nothing. To actually mount the filesystem, pass an object that implements Filesystem and the path of an (existing) mountpoint to the mount function. mount will not return until the filesystem is unmounted. To mount a filesystem and keep running other code, use spawn_mount instead of mount. spawn_mount spawns a background thread to handle filesystem operations while the filesystem is mounted. It returns a handle that should be stored to reference the mounted filesystem. If the handle is dropped, the filesystem is unmounted. To unmount a filesystem, use any arbitrary unmount/eject method of your OS. See the examples directory for some basic examples. To Do There's still a lot of stuff to be done. Feel free to contribute. Interrupting a filesystem operation isn't handled yet. An additional more high level API would be nice. It should provide pathnames instead inode numbers and automatically handle concurrency and interruption (like the FUSE C library's high level API). In general, see the list of issues on GitHub and search the source files for comments containing ""TODO"" or ""FIXME"" to see what's still missing. Compatibility Developed and tested on Mac OS X with OSXFUSE and on Linux with FUSE, using stable, beta and nightly Rust versions (see Travis CI for details). Support for FUSE on FreeBSD is currently untested (but probably works with minor adjustments). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/zargony/rust-fuse"	"— bindings"	"true"
"Platform specific"	"FUSE"	"https://github.com/libfuse/libfuse"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"301"	"36"	"107"	"GitHub - libfuse/libfuse: The reference implementation of the Linux FUSE (Filesystem in Userspace) interface Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 36 Star 301 Fork 107 libfuse/libfuse Code Issues 18 Pull requests 2 Wiki Pulse Graphs The reference implementation of the Linux FUSE (Filesystem in Userspace) interface 1,121 commits 11 branches 94 releases 24 contributors C 95.3% Python 2.8% Other 1.9% C Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fuse-2_9_bugfix fuse_1_1_bugfix fuse_2_0_bugfix fuse_2_2_bugfix fuse_2_4_bugfix fuse_2_5_bugfix fuse_2_6_bugfix fuse_2_7_bugfix fuse_2_8_bugfix fuse_2_9_bugfix master Nothing to show start fuse_3_0_start fuse_2_9_5 fuse_2_9_4 fuse_2_9_3 fuse_2_9_2 fuse_2_9_1 fuse_2_9_0 fuse_2_9_start fuse_2_8_7 fuse_2_8_6 fuse_2_8_5 fuse_2_8_4 fuse_2_8_3 fuse_2_8_2 fuse_2_8_1 fuse_2_8_0 fuse_2_8_0_pre2 fuse_2_8_start fuse_2_7_5 fuse_2_7_4 fuse_2_7_3 fuse_2_7_2 fuse_2_7_2_before_indent fuse_2_7_1 fuse_2_7_0 fuse_2_7_0_rc1 fuse_2_6_5 fuse_2_6_4 fuse_2_6_3 fuse_2_6_2 fuse_2_6_1 fuse_2_6_0 fuse_2_6_0_rc3 fuse_2_6_0_rc2 fuse_2_6_0_rc1 fuse_2_6_0_pre3 fuse_2_6_0_pre2 fuse_2_6_0_pre1 fuse_2_6_merge3 fuse_2_6_merge2 fuse_2_6_merge1 fuse_2_5_3 fuse_2_5_2 fuse_2_5_0 fuse_2_5_0_pre2 fuse_2_5_0_pre1 fuse_2_4_2 fuse_2_4_1 fuse_2_4_0 fuse_2_4_0_rc1 fuse_2_4_0_pre2 fuse_2_3_0 fuse_2_3_rc1 fuse_2_3_pre7 fuse_2_3_pre6 fuse_2_3_pre5 fuse_2_3_pre4 fuse_2_3_pre3 fuse_2_3_pre2 fuse_2_3_pre1 fuse_2_2_1 fuse_2_2 fuse_2_2_pre6 fuse_2_2_pre5 fuse_2_2_pre4 fuse_2_2_pre1 fuse_2_2_merge3 fuse_2_2_merge2 fuse_2_2_merge1 fuse_2_1 fuse_2_1_pre1 fuse_2_1_pre0 fuse_2_0_pre0 fuse_2_0_merge5 fuse_2_0_merge4 fuse_2_0_merge3 fuse_2_0_merge2 fuse_2_0_merge1 fuse_1_9 fuse_1_4 fuse_1_3 fuse_1_2 fuse_1_1 fuse_1_1_pre2 fuse_1_1_pre1 fuse_1_1_post1 fuse_0_95 fuse_0_9 fuse-2.9.7 fuse-2.9.6 debian_version_1_0-1 debian_version_0_95-1 before_interruptible Nothing to show New pull request Latest commit 81370fc Jun 20, 2016 hbrueckner committed with Nikratio libfuse/fuse_daemonize: wait until daemon child process is ready (#55) … Mounting a FUSE file system remotely using SSH in combination with pseudo-terminal allocation (-t), results in ""Transport endpoint is not connected"" errors when trying to access the file system contents.  For example:    # ssh -t root@localhost  ""cmsfs-fuse /dev/disk/by-path/ccw-0.0.0190 /CMSFS""   Connection to localhost closed.   # ls /CMSFS   ls: cannot access '/CMSFS': Transport endpoint is not connected  The cmsfs-fuse main program (which can also be any other FUSE file system) calls into the fuse_main() libfuse library function. The fuse_main() function later calls fuse_daemonize() to fork the daemon process to handle the FUSE file system I/O.  The fuse_daemonize() function calls fork() as usual.  The child proceeds with setsid() and then redirecting its file descriptors to /dev/null etc.  The parent process, simply exits.  The child's functions and the parent's exit creates a subtle race. This is seen with an SSH connection.  The SSH command above calls cmsfs-fuse on an allocated pseudo-terminal device (-t option).  If the parent exits, SSH receives the command completion and closes the connection, that means, it closes the master side of the pseudo-terminal.  This causes a HUP signal being sent to the process group on the pseudo-terminal.  At this point in time, the child might not have completed the setsid() call and, hence, becomes terminated. Note that fuse daemon sets up its signal handlers after fuse_daemonize() has completed.  Even if the child has the chance to disassociate from its parent process group to become it's own process group with setsid(), the child still has the pseudo-terminal opened as stdin, stdout, and stderr.  So the pseudo-terminal still behave as controlling terminal and might cause a SIGHUP at closing the the master side.  To solve the problem, the parent has to wait until the child (the fuse daemon process) has completed its processing, that means, has become its own process group with setsid() and closed any file descriptors pointing to the pseudo-terminal.  Closes: #27  Reported-by: Ofer Baruch <oferba@il.ibm.com> Reviewed-by: Gerald Schaefer <gerald.schaefer@de.ibm.com> Signed-off-by: Hendrik Brueckner <brueckner@linux.vnet.ibm.com> Permalink Failed to load latest commit information. doc Include documentation in tarball. Jan 28, 2016 example Fix ioctl example May 13, 2016 include Fixup commit 482a49c. Apr 27, 2016 lib libfuse/fuse_daemonize: wait until daemon child process is ready (#55) Jun 20, 2016 test Add 'traceback' as suspicious test output pattern. May 13, 2016 util fusermount, libfuse: send value as unsigned in ""user_id="" and ""group_… Jul 15, 2014 .dir-locals.el Added basic unit tests. Mar 29, 2016 .gitignore libfuse: fuse -> fuse3 Jul 25, 2013 .travis.yml Automatically run CI tests with clang Jun 5, 2016 AUTHORS Update maintainer and contributor list Jan 14, 2016 COPYING Update COPYING* May 26, 2011 COPYING.LIB Update COPYING* May 26, 2011 ChangeLog Merge branch 'clone_fd' Sep 29, 2015 Makefile.am Added Travis integration May 13, 2016 NEWS Add fallocate to NEWS Jul 19, 2012 README.NFS Add fuse_getgroups (high level lib) and fuse_req_getgroups (low Jun 19, 2009 README.md Added basic unit tests. Mar 29, 2016 configure.ac Integrate tests with autotools Mar 29, 2016 fuse3.pc.in ""pkg-config fuse3 --libs"" gives the wrong library name Dec 11, 2013 makeconf.sh Update makeconf.sh Jan 14, 2016 README.md libfuse Warning: unresolved security issue Be aware that FUSE has an unresolved security bug (bug #15): if the default_permissions mount option is not used, the results of the first permission check performed by the file system for a directory entry will be re-used for subsequent accesses as long as the inode of the accessed entry is present in the kernel cache - even if the permissions have since changed, and even if the subsequent access is made by a different user. This bug needs to be fixed in the Linux kernel and has been known since 2006 but unfortunately no fix has been applied yet. If you depend on correct permission handling for FUSE file systems, the only workaround is to use default_permissions (which does not currently support ACLs), or to completely disable caching of directory entry attributes. Alternatively, the severity of the bug can be somewhat reduced by not using the allow_other mount option. About FUSE (Filesystem in Userspace) is an interface for userspace programs to export a filesystem to the Linux kernel. The FUSE project consists of two components: the fuse kernel module (maintained in the regular kernel repositories) and the libfuse userspace library (maintained in this repository). libfuse provides the reference implementation for communicating with the FUSE kernel module. A FUSE file system is typically implemented as a standalone application that links with libfuse. libfuse provides functions to mount the file system, unmount it, read requests from the kernel, and send responses back. libfuse offers two APIs: a ""high-level"", synchronous API, and a ""low-level"" asynchronous API. In both cases, incoming requests from the kernel are passed to the main program using callbacks. When using the high-level API, the callbacks may work with file names and paths instead of inodes, and processing of a request finishes when the callback function returns. When using the low-level API, the callbacks must work with inodes and responses must be sent explicitly using a separate set of API functions. Installation You can download libfuse from https://github.com/libfuse/libfuse/releases. After extracting the tarball, build and install with ./configure make -j8 make install  To run some self tests, you need a Python 3 environment with the py.test module installed. To run the tests, execute python3 -m pytest test/  You may also need to add /usr/local/lib to /etc/ld.so.conf and/or run ldconfig. If you're building from the git repository (instead of using a release tarball), you also need to run ./makeconf.sh to create the configure script. You'll also need a fuse kernel module (Linux kernels 2.6.14 or later contain FUSE support). For more details see the file INSTALL Security implications If you run make install, the fusermount program is installed set-user-id to root. This is done to allow normal users to mount their own filesystem implementations. There must however be some limitations, in order to prevent Bad User from doing nasty things. Currently those limitations are: The user can only mount on a mountpoint, for which it has write permission The mountpoint is not a sticky directory which isn't owned by the user (like /tmp usually is) No other user (including root) can access the contents of the mounted filesystem (though this can be relaxed by allowing the use of the allow_other and allow_root mount options in fuse.conf) Building your own filesystem FUSE comes with several example file systems in the examples directory. For example, the fusexmp example mirrors the contents of the root directory under the mountpoint. Start from there and adapt the code! The documentation of the API functions and necessary callbacks is mostly contained in the files include/fuse.h (for the high-level API) and include/fuse_lowlevel.h (for the low-level API). An autogenerated html version of the API is available in the doc/html directory and at http://libfuse.github.io/doxygen. Getting Help If you need help, please ask on the fuse-devel@lists.sourceforge.net mailing list (subscribe at https://lists.sourceforge.net/lists/listinfo/fuse-devel). Please report any bugs on the GitHub issue tracker at https://github.com/libfuse/libfuse/issues. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/libfuse/libfuse"	"— bindings"	"true"
"Platform specific"	""	"https://camo.githubusercontent.com/fde36b54da31487b21869f23e188788209dd9b0c/68747470733a2f2f7472617669732d63692e6f72672f7a6172676f6e792f727573742d667573652e7376673f6272616e63683d6d6173746572"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"— bindings"	"false"
"Platform specific"	"retep998/winapi-rs"	"https://github.com/retep998/winapi-rs"	"— Windows API bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"177"	"16"	"85"	"GitHub - retep998/winapi-rs: Rust types and constants for WinAPI bindings Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 177 Fork 85 retep998/winapi-rs Code Issues 28 Pull requests 5 Pulse Graphs Rust types and constants for WinAPI bindings https://crates.io/crates/winapi 612 commits 4 branches 0 releases 58 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev lint-fail master new Nothing to show Nothing to show New pull request Latest commit 1026160 Jul 11, 2016 retep998 Bump winapi Permalink Failed to load latest commit information. build Make winapi-build more robust Jul 31, 2015 lib Merge commit 'refs/pull/290/head' of github.com:retep998/winapi-rs in… Jul 11, 2016 src Merge commit 'refs/pull/290/head' of github.com:retep998/winapi-rs in… Jul 12, 2016 tests d3d11 struct tests Feb 6, 2016 .gitignore WinAPI library for all my WinAPI needs. Sep 9, 2014 .travis.yml Test more versions on travis. Feb 6, 2016 CONTRIBUTING.md Clean whitespace Oct 19, 2015 Cargo.toml Bump winapi Jul 11, 2016 LICENSE.md Add more stuff. Jan 18, 2015 README.md Add d3dcompiler things Feb 11, 2016 RabbitCode.md Ambiguity in Rabbit Code Mar 11, 2016 appveyor.yml Simplify appveyor a bit Feb 23, 2016 README.md winapi-rs Documentation Official IRC channel: #winapi on Mozilla IRC This crate provides types and constants for WinAPI FFI bindings. They are gathered by hand using the Windows 10 SDK from Microsoft. I aim to replace all existing Windows FFI in other crates with this set of crates through the ""Embrace, extend, and extinguish"" technique. If this crate is missing something you need, feel free to create an issue, open a pull request, or contact me via other means. This crate depends on Rust 1.4 on Windows. On other platforms this crate is a no-op and should compile with Rust 1.0. Example Cargo.toml: [dependencies] winapi = ""0.2"" winmm-sys = ""0.1"" example.rs: extern crate winapi; extern crate winmm; fn func() {     winmm::PlaySoundA(...); } Functions Bindings to library functions are in separate crates. The source to each crate is in the relevant subdirectory under the lib directory. Usable crates These are the ones that actually have functions in them: advapi32-sys crypt32-sys d2d1-sys d3d9-sys d3d11-sys d3dcompiler-sys dbghelp-sys dsound-sys dwmapi-sys dwrite-sys gdi32-sys hid-sys kernel32-sys ktmw32-sys mpr-sys odbc32-sys ole32-sys oleaut32-sys opengl32-sys psapi-sys secur32-sys shell32-sys user32-sys uuid-sys vssapi-sys winmm-sys ws2_32-sys xinput-sys Reserved crates These are the ones that are reserved for future use: aclui-sys activeds-sys adsiid-sys advpack-sys ahadmin-sys alink-sys amstrmid-sys api-ms-win-net-isolation-l1-1-0-sys apidll-sys appmgmts-sys appmgr-sys appnotify-sys asycfilt-sys audiobaseprocessingobject-sys audioeng-sys audiomediatypecrt-sys authz-sys aux_ulib-sys avifil32-sys avrt-sys basesrv-sys bcrypt-sys bits-sys bluetoothapis-sys bthprops-sys bufferoverflow-sys bufferoverflowu-sys cabinet-sys certadm-sys certca-sys certcli-sys certidl-sys certpoleng-sys cfgmgr32-sys clfsmgmt-sys clfsw32-sys clusapi-sys comctl32-sys comdlg32-sys comppkgsup-sys compstui-sys comsvcs-sys corguids-sys correngine-sys credui-sys cryptdll-sys cryptnet-sys cryptui-sys cryptxml-sys cscapi-sys cscdll-sys d3d10-sys d3d10_1-sys d3dcsx-sys d3dcsxd-sys davclnt-sys dbgeng-sys dciman32-sys dcomp-sys ddraw-sys devenum-sys deviceaccess-sys devmgr-sys dflayout-sys dhcpcsvc-sys dhcpcsvc6-sys dhcpsapi-sys difxapi-sys dinput8-sys dloadhelper-sys dmoguids-sys dnsapi-sys dnscrcli-sys dnslib-sys dnsperf-sys dnsrpc-sys dnsrslvr-sys dpx-sys drt-sys drtprov-sys drttransport-sys dsprop-sys dssec-sys dststlog-sys dsuiext-sys dtchelp-sys dxgi-sys dxguid-sys dxtmsft-sys dxtrans-sys dxva2-sys eappcfg-sys eappprxy-sys easregprov-sys efswrt-sys ehstorguids-sys elfapi-sys els-sys elscore-sys esent-sys evr-sys evr_vista-sys faultrep-sys feclient-sys fhsvcctl-sys fileextd-sys fltlib-sys fontsub-sys format-sys framedyd-sys framedyn-sys fwpuclnt-sys fxsutility-sys gdiplus-sys glmf32-sys glu32-sys gpedit-sys gpmuuid-sys hbaapi-sys hhsetup-sys hlink-sys htmlhelp-sys httpapi-sys iashlpr-sys icm32-sys icmui-sys iepmapi-sys iesetup-sys imagehlp-sys imgutil-sys imm32-sys infocardapi-sys inseng-sys int64-sys iphlpapi-sys iprop-sys irprops-sys iscsidsc-sys jetoledb-sys jsrt-sys kerbcli-sys ksproxy-sys ksuser-sys loadperf-sys locationapi-sys lz32-sys magnification-sys mapi32-sys mbnapi_uuid-sys mciole32-sys mdmregistration-sys mf-sys mf_vista-sys mfcore-sys mfplat-sys mfplat_vista-sys mfplay-sys mfreadwrite-sys mfsrcsnk-sys mfuuid-sys mgmtapi-sys mi-sys mincore-sys mincore_downlevel-sys mmc-sys mmdevapi-sys mprapi-sys mprsnap-sys mqoa-sys mqrt-sys msaatext-sys msacm32-sys mscms-sys mscoree-sys mscorsn-sys msctfmonitor-sys msdasc-sys msdelta-sys msdmo-sys msdrm-sys msi-sys msimg32-sys mspatcha-sys mspatchc-sys mspbase-sys msports-sys msrating-sys mstask-sys msv1_0-sys msvfw32-sys mswsock-sys msxml2-sys msxml6-sys mtx-sys mtxdm-sys muiload-sys ncrypt-sys nddeapi-sys ndfapi-sys ndproxystub-sys netapi32-sys netlib-sys netsh-sys newdev-sys ninput-sys normaliz-sys nt-sys ntdll-sys ntdsa-sys ntdsapi-sys ntdsatq-sys ntdsetup-sys ntfrsapi-sys ntlanman-sys ntmarta-sys ntquery-sys ntstc_libcmt-sys ntstc_msvcrt-sys ntvdm-sys objsel-sys odbcbcp-sys odbccp32-sys oemlicense-sys oleacc-sys olecli32-sys oledb-sys oledlg-sys olepro32-sys olesvr32-sys ondemandconnroutehelper-sys osptk-sys p2p-sys p2pgraph-sys patchwiz-sys pathcch-sys pdh-sys peerdist-sys photoacquireuid-sys portabledeviceguids-sys powrprof-sys prntvpt-sys propsys-sys quartz-sys query-sys qutil-sys qwave-sys rasapi32-sys rasdlg-sys rasuser-sys resutils-sys rometadata-sys rpcexts-sys rpcns4-sys rpcproxy-sys rpcrt4-sys rpcutil-sys rstrtmgr-sys rtm-sys rtutils-sys rtworkq-sys runtimeobject-sys samlib-sys samsrv-sys sapi-sys sas-sys sbtsv-sys scarddlg-sys scecli-sys scesrv-sys schannel-sys scrnsave-sys scrnsavw-sys searchsdk-sys security-sys sens-sys sensapi-sys sensorsapi-sys setupapi-sys sfc-sys shcore-sys shdocvw-sys shfolder-sys shlwapi-sys sisbkup-sys slc-sys slcext-sys slwga-sys snmpapi-sys spoolss-sys sporder-sys srclient-sys ssdpapi-sys sti-sys strmbase-sys strmiids-sys strsafe-sys structuredquery-sys svcguid-sys swdevice-sys synchronization-sys t2embed-sys tapi32-sys tapi32l-sys taskschd-sys tbs-sys tdh-sys thunk32-sys tlbref-sys traffic-sys transcodeimageuid-sys tsec-sys tspubplugincom-sys twain_32-sys twinapi-sys txfw32-sys ualapi-sys uiautomationcore-sys umpdddi-sys unicows-sys urlmon-sys userenv-sys usp10-sys uxtheme-sys vccomsup-sys vdmdbg-sys vds_uuid-sys version-sys vfw32-sys virtdisk-sys vscmgr-sys vss_uuid-sys vstorinterface-sys wbemuuid-sys wcmapi-sys wcmguid-sys wdsbp-sys wdsclientapi-sys wdsmc-sys wdspxe-sys wdstptc-sys webservices-sys websocket-sys wecapi-sys wer-sys wevtapi-sys wiaguid-sys wiaservc-sys wiautil-sys winbio-sys windows-data-pdf-sys windows-networking-sys windows-ui-sys windowscodecs-sys windowssideshowguids-sys winfax-sys winhttp-sys wininet-sys winsatapi-sys winscard-sys winspool-sys winsta-sys winstrm-sys wintrust-sys winusb-sys wlanapi-sys wlanui-sys wldap32-sys wmcodecdspuuid-sys wmdrmsdk-sys wmip-sys wmiutils-sys wmvcore-sys wnvapi-sys workspaceax-sys wow32-sys wsbapp_uuid-sys wsbonline-sys wscapi-sys wsclient-sys wsdapi-sys wsmsvc-sys wsnmp32-sys wsock32-sys wtsapi32-sys wuguid-sys xapobase-sys xaswitch-sys xaudio2-sys xinput9_1_0-sys xmllite-sys xolehlp-sys xpsprint-sys Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/retep998/winapi-rs"	"— Windows API bindings"	"true"
"Platform specific"	""	"https://travis-ci.org/retep998/winapi-rs"	"— Windows API bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Windows API bindings"	"true"
"Web programming"	"Handlebars-rust"	"https://github.com/sunng87/handlebars-rust"	"— as an Iron web framework middleware."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"120"	"10"	"26"	"GitHub - sunng87/handlebars-rust: Rust templating with Handlebars Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 120 Fork 26 sunng87/handlebars-rust Code Issues 6 Pull requests 0 Pulse Graphs Rust templating with Handlebars 380 commits 4 branches 23 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/tojson-derive-extension feature/writer-based-api gh-pages master Nothing to show v0.15.0 v0.14.0 v0.13.2 v0.13.1 v0.13.0 v0.12.1 v0.12.0 v0.11.3 v0.11.1 v0.11.0 v0.10.1 v0.10.0 v0.9.4 v0.9.3 v0.9.2 v0.9.1 v0.8.0 0.18.2 0.18.1 0.18.0 0.17.0 0.16.1 0.16.0 Nothing to show New pull request Latest commit 565c135 Jul 11, 2016 sunng87 (cargo-release) start next development iteration 0.18.3-pre Permalink Failed to load latest commit information. benches (test) improve bench Jun 30, 2016 examples Fix misspelled rustc_ser_type Jul 10, 2016 src Fix misspelled rustc_ser_type Jul 10, 2016 .gitignore (chore) update ignore Mar 30, 2016 .travis.yml (chore) add more rust version to ci Jul 8, 2016 CHANGELOG.md (chore) update CHANGELOG Jun 25, 2016 Cargo.toml (cargo-release) start next development iteration 0.18.3-pre Jul 11, 2016 LICENSE Initial commit Dec 21, 2014 README.md Update README.md Jun 14, 2016 README.md handlebars-rust Rust templating with Handlebars templating language. This library works on stable Rust 1.4.0 and above. In most time, it also works on beta and nightly channel. Getting Started Check examples in the source. The example shows you how to: Create a Handlebars and register the template from files Create a custom Helper with closure or struct implementing HelperDef, and register it Render something Run cargo run --example render to see results. (or RUST_LOG=handlebars=info cargo run --example render for logging output). Checkout examples/ for more concrete demos of current API. From 0.13, you can use either rustc_serialize or serde for your data type. By default we use ToJson from rustc_serialize to convert your data into handlebars internal types. If you use serde framework in your project, you can enable serde_type feature of this crate and we will use Serialize from serde to convert. Documents Rust doc. Changelog Change log is available in the source tree named as CHANGELOG.md. Why (this) Handlebars? Handlebars is a real-world templating system that you can use to build your application without pain. Features Isolation of Rust and HTML This library doesn't attempt to use some macro magic to allow you to write your template within your rust code. I admit that it's fun to do that but it doesn't fit real-world use case. Limited but essential control structure built-in Only essential control directive if and each were built-in. This prevents you to put too much application logic into your template. Extensible helper system You can write your own helper with Rust! It can be a block helper or inline helper. Put you logic into the helper and don't repeat yourself. A helper can be as a simple as a Rust function like: fn hex_helper (_: &Context, h: &Helper, _: &Handlebars, rc: &mut RenderContext) -> Result<(), RenderError> {     // just for example, add error check for unwrap     let param = h.param(0).unwrap().value();     let rendered = format!(""0x{:x}"", param.as_u64().unwrap());     try!(rc.writer.write(rendered.into_bytes().as_ref()));     Ok(()) }  /// register the helper handlebars.register_helper(""hex"", Box::new(hex_helper)); And using it in your template: {{hex my_value}} Template inheritance Every time I look into a templating system, I will investigate its support for template inheritance. Template include is not sufficient for template reuse. In most case you will need a skeleton of page as parent (header, footer, etc.), and embed you page into this parent. You can find a real example for template inheritance in examples/partials.rs, and templates used by this file. Limitations This implementation is not fully compatible with the original javascript version. Specifically, mustache list iteration and null check doesn't work. But you can use #each and #if for same behavior. You will need to make your data ToJson-able, so we can render it. If you were on nightly channel, we have a syntax extension to generate default ToJson implementation for you. If you use serde, you can enable serde_type feature of handlebars-rust and add #derive[Serialize] for your types. Handlebars-js features supported in Handlebars-rust Expression / Block Helpers Built-in helpers each if with lookup partial block include > log Custom helper Parameter and hashes for helper Partials, include Omitting whitespace with ~ Subexpression {{(foo bar)}} Json expression a.b.[0] and a.b.[c] RawHelper syntax {{{{raw-helper}}}}...{{{{/raw-helper}}}} JavaScript implementation features we don't have Mustache block (use if/each instead) Block params (Perhaps using this) Chained else ... Feel free to report an issue if you find something broken. We aren't going to implement all features of handlebars-js, but we should have a workaround for cases we don't support. Handlebars for Iron I have started another project handlebars-iron for the Iron web framework. License This library (handlebars-rust) is open sourced under MIT License. Contact Ning Sun (sunng@about.me) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sunng87/handlebars-rust"	"— as an Iron web framework middleware."	"true"
"Template engine"	""	"https://travis-ci.org/sunng87/handlebars-rust"	"— Handlebars template engine with inheritance, custom helper support."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Handlebars template engine with inheritance, custom helper support."	"true"
"Template engine"	"lfairy/maud"	"https://github.com/lfairy/maud"	"— compile-time HTML templates"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"114"	"6"	"8"	"GitHub - lfairy/maud: Compile-time HTML templates for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 114 Fork 8 lfairy/maud Code Issues 4 Pull requests 0 Pulse Graphs 📝 Compile-time HTML templates for Rust http://lfairy.gitbooks.io/maud/content/ 199 commits 3 branches 27 releases Fetching contributors Rust 99.4% Shell 0.6% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master try Nothing to show v0.9.0 v0.8.1 v0.8.0 v0.7.4 v0.7.3 v0.7.2 v0.7.1 v0.7.0 v0.6.2 v0.6.1 v0.6.0 v0.5.1 v0.5.0 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.0 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit df4ed87 Jul 10, 2016 lfairy Release 0.9.2 Permalink Failed to load latest commit information. maud Release 0.9.0 Jun 12, 2016 maud_macros Release 0.9.2 Jul 10, 2016 .gitignore First commit Dec 17, 2014 .travis.yml Expose `Escaper` type Sep 12, 2015 LICENSE-APACHE First commit Dec 17, 2014 LICENSE-MIT First commit Dec 17, 2014 README.md Change documentation link Apr 27, 2016 maud.png HTML5 rocks Jan 11, 2015 upload-docs Change documentation link Apr 27, 2016 README.md maud Maud is a macro for generating HTML. Documentation API reference Warning The design of Maud is still in flux, and may change or break at any time. Caveat emptor! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lfairy/maud"	"— compile-time HTML templates"	"true"
"Template engine"	""	"https://travis-ci.org/lfairy/maud"	"— compile-time HTML templates"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— compile-time HTML templates"	"true"
"Template engine"	"Stebalien/horrorshow-rs"	"https://github.com/Stebalien/horrorshow-rs"	"— compile-time HTML templates"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"41"	"1"	"2"	"GitHub - Stebalien/horrorshow-rs: A macro-based html builder for rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 41 Fork 2 Stebalien/horrorshow-rs Code Issues 0 Pull requests 0 Pulse Graphs A macro-based html builder for rust https://stebalien.github.io/horrorshow-rs/horrorshow/ 147 commits 5 branches 3 releases Fetching contributors Rust 99.6% Shell 0.4% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags err1 err2 gh-pages master next Nothing to show v0.5.6 v0.5.5 v0.5.4 Nothing to show New pull request Latest commit 9afeb5f Jul 5, 2016 Stebalien disable sudo in travis Permalink Failed to load latest commit information. benches fix maud benchmark Mar 16, 2016 examples fix warning: manually parse `$expr {` Mar 16, 2016 src also implement `RenderOnce` for `Box<RenderBox + Send>` Jun 14, 2016 tests add tests Jun 14, 2016 .gitignore Initial commit. May 2, 2015 .travis.yml disable sudo in travis Jul 5, 2016 AUTHORS Add AUTHORS Jun 6, 2016 Cargo.toml update maud Jun 14, 2016 LICENSE-APACHE Add licenses. May 2, 2015 LICENSE-MIT Add AUTHORS Jun 6, 2016 README.md Format README. Mar 26, 2016 travis_setup.sh travis's gawk is out of date... May 28, 2015 README.md Horrorshow A macro-based html templating library (1.0 compatible). Documentation: https://stebalien.github.io/horrorshow-rs/horrorshow/ Example: #[macro_use] extern crate horrorshow; use horrorshow::prelude::*;  fn main() {     let actual = html! {         html {             head {                 title { : ""Hello world!"" }             }             body {                 // attributes                 h1(id=""heading"") {                     // Insert escaped text                     : ""Hello! This is <html />""                 }                 p {                     // Insert raw text (unescaped)                     : raw!(""Let's <i>count</i> to 10!"")                 }                 ol(id=""count"") {                     // You can embed for loops, while loops, and if statements.                     @ for i in 0..10 {                         li(first? = (i == 0)) {                             // Format some text.                             : format_args!(""{}"", i+1)                         }                     }                 }                 // You need semi-colons for tags without children.                 br; br;                 p {                     // You can also embed closures.                     |tmpl| {                         tmpl << ""Easy!"";                     }                 }             }         }     }.into_string().unwrap();      let expected = ""\     <html>\       <head>\         <title>Hello world!</title>\       </head>\       <body>\         <h1 id=\""heading\"">Hello! This is &lt;html /&gt;</h1>\         <p>Let's <i>count</i> to 10!</p>\         <ol id=\""count\"">\           <li first>1</li>\           <li>2</li>\           <li>3</li>\           <li>4</li>\           <li>5</li>\           <li>6</li>\           <li>7</li>\           <li>8</li>\           <li>9</li>\           <li>10</li>\         </ol>\         <br /><br />\         <p>Easy!</p>\       </body>\     </html>"";     assert_eq!(expected, actual); } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Stebalien/horrorshow-rs"	"— compile-time HTML templates"	"true"
"Template engine"	""	"https://travis-ci.org/Stebalien/horrorshow-rs"	"— compile-time HTML templates"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— compile-time HTML templates"	"true"
"Template engine"	"rustache/rustache"	"https://github.com/rustache/rustache"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"132"	"8"	"15"	"GitHub - rustache/rustache: A flexible template engine for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 132 Fork 15 rustache/rustache Code Issues 4 Pull requests 1 Wiki Pulse Graphs A flexible template engine for Rust https://rustache.github.io 536 commits 2 branches 0 releases Fetching contributors Rust 99.5% HTML 0.5% Rust HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master refactoring Nothing to show Nothing to show New pull request Latest commit 9487ac7 May 21, 2016 jruhland Merge pull request #134 from tqoitc/master … (fix) Fixed build failing Permalink Failed to load latest commit information. examples (test) updated tests and reimplemented end to end test Sep 22, 2014 src Fixed build failing May 21, 2016 test_data (refactor) compiler and parser updates, better whitespace handling Nov 4, 2014 tests Tests pass now! Jul 8, 2015 .gitignore (test) added end to end test, updated gitignore Sep 26, 2014 .travis.yml Update travis.yml to support container tests Jul 27, 2015 CONTRIBUTING.md init Sep 19, 2014 Cargo.toml updated for publish to crates Jul 30, 2015 README.md updated for publish to crates Jul 31, 2015 README.md Rustache Rustache is a Rust implementation of the Mustache spec. Documentation The different Mustache tags are documented at the mustache(5) man page. The project's docs page is located here. Install Install it through Cargo: rustache = ""0.0.1"" Then link it within your crate like so: extern crate rustache; API Methods The main forward interface that users will interact with when using Rustache are the rustache::render_file method and the rustache::render_text methods like so: // Renders the given template file rustache::render_file(""path/to/template.html"", data)  // Renders the given template string rustache::render_text(""{{ name }}"", data) Examples Here's an example of how to pass in data to the render_text method using the HashBuilder: let data = HashBuilder::new()     .insert_string(""name"", ""Bob"");  rustache::render_text(""{{ name }}"", data); Here's an example of how to pass in data in the form of a JSON enum to a render method: let data = json::from_str(r#""{""name"": ""Bob""}""#);  rustache::render_text(""{{ name }}"", data); Testing Simply clone and run: cargo test Roadmap Full Mustache spec compliance. Comment and Section whitespace handling Handle change of delimeters Thread errors through the parser and compiler: Fill out samples folder. Handle Build and Parser operations concurrently Contribute See CONTRIBUTING.md for guidelines on how to contribute. License Copyright (c) 2014 Team Rustache Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Inspired by https://github.com/erickt/rust-mustache: Copyright (c) 2012 Erick Tryzelaar Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rustache/rustache"	"—"	"true"
"Template engine"	""	"https://travis-ci.org/rustache/rustache"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Template engine"	"tailhook/marafet"	"https://github.com/tailhook/marafet"	"— Compiler for Jade-like template language to cito.js-based virtual dom"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"2"	"0"	"GitHub - tailhook/marafet: Compiler for Jade-like template language to cito.js-based virtual dom Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 4 Fork 0 tailhook/marafet Code Issues 0 Pull requests 0 Pulse Graphs Compiler for Jade-like template language to cito.js-based virtual dom 73 commits 1 branch 0 releases Fetching contributors Rust 99.1% Other 0.9% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit dfb7bf2 Sep 8, 2015 tailhook Upgrade ""combine"" to 1.0.0. Remove useless Range type Permalink Failed to load latest commit information. examples Use the brand new sep_end_by combinator Aug 28, 2015 marafet_css Much better css parser Jul 3, 2015 marafet_es5citojs Turn element into fragment if it requires key and is rendered as Aug 20, 2015 marafet_parser Upgrade ""combine"" to 1.0.0. Remove useless Range type Sep 8, 2015 marafet_util Split marafet into libraries for faster compilation Jun 5, 2015 src Upgrade parser-combinators -> combine Aug 6, 2015 vim Add minimal syntax highlighting Jun 19, 2015 .gitignore Initial commit of some partial grammar Jun 3, 2015 Cargo.lock Upgrade ""combine"" to 1.0.0. Remove useless Range type Sep 7, 2015 Cargo.toml Upgrade parser-combinators -> combine Aug 5, 2015 LICENSE Add README and LICENSE Jun 23, 2015 Makefile Add `install` target Jun 5, 2015 README.rst Add README and LICENSE Jun 23, 2015 vagga.yaml Update vagga.yaml Aug 18, 2015 README.rst Marafet A very experimental DSL for creating (mostly) single page applications in HTML. It's mostly a Jade-like (or Haml-like) templating language with few features on the top: Renders Virtual DOM (currently cito.js) Attaches streams to event handlers instead of old crappy callbacks Enables non-verbose CSS scoping with using classnames Provides python-like string formatting Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tailhook/marafet"	"— Compiler for Jade-like template language to cito.js-based virtual dom"	"true"
"Text processing"	"BurntSushi/suffix"	"https://github.com/BurntSushi/suffix"	"— Linear time suffix array construction (with Unicode support)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"3"	"2"	"GitHub - BurntSushi/suffix: Fast suffix arrays for Rust (with Unicode support). Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 36 Fork 2 BurntSushi/suffix Code Issues 0 Pull requests 0 Pulse Graphs Fast suffix arrays for Rust (with Unicode support). 140 commits 2 branches 48 releases Fetching contributors Rust 99.3% Other 0.7% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags byte-oriented master Nothing to show 0.4.0 0.3.2 0.3.1 0.3.0 0.2.10 0.2.9 0.2.8 0.2.7 0.2.6 0.2.5 0.2.4 0.2.3 0.2.2 0.2.1 0.2.0 0.1.35 0.1.34 0.1.33 0.1.32 0.1.31 0.1.30 0.1.29 0.1.28 0.1.27 0.1.26 0.1.25 0.1.22 0.1.21 0.1.20 0.1.19 0.1.18 0.1.17 0.1.16 0.1.15 0.1.14 0.1.13 0.1.12 0.1.11 0.1.10 0.1.9 0.1.8 0.1.7 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 Nothing to show New pull request Latest commit fd38bf3 Jun 17, 2016 BurntSushi 0.4.0 Permalink Failed to load latest commit information. src Reformatting and refactoring. Jun 17, 2016 stree_cmd version bump Aug 30, 2015 suffix_tree 0.2.1 Aug 30, 2015 tests Add a couple quickcheck properties. Jun 17, 2016 .gitignore initial progress Dec 28, 2014 .travis.yml bump minimum version to Rust 1.5 Jun 17, 2016 COPYING dual licensed under MIT and UNLICENSE Apr 15, 2015 Cargo.toml 0.4.0 Jun 17, 2016 LICENSE-MIT dual licensed under MIT and UNLICENSE Apr 15, 2015 Makefile initial progress Dec 28, 2014 NOTES.md An experimental branch for byte-oriented SAIS. Jun 19, 2015 README.md remove * deps Aug 30, 2015 TODO TODO: Use more induced sorting. Jan 15, 2015 UNLICENSE initial progress Dec 28, 2014 ctags.rust initial progress Dec 28, 2014 session.vim initial progress Dec 28, 2014 README.md Fast linear time & space suffix arrays for Rust. Supports Unicode! Dual-licensed under MIT or the UNLICENSE. Documentation The API is mostly documented with examples: http://burntsushi.net/rustdoc/suffix/. If you just want the details on how construction algorithm used, see the documentation for the SuffixTable type. This is where you'll find info on exactly how much overhead is required. Installation This crate works with Cargo and is on crates.io. The package is regularly updated. Add it to your Cargo.toml like so: [dependencies] suffix = ""0.3"" Examples Usage is simple. Just create a suffix array and search: extern crate suffix;  use suffix::SuffixTable;  fn main() {   let st = SuffixTable::new(""the quick brown fox was quick."");   assert_eq!(st.positions(""quick""), vec![4, 24]); } There is also a command line program, stree, that can be used to visualize suffix trees: git clone git://github.com/BurntSushi/suffix cd suffix/stree_cmd cargo build --release ./target/release/stree ""banana"" | dot -Tpng | xv - And here's what it looks like: Status of implementation The big thing missing at the moment is a generalized suffix array. I started out with the intention to build them into the construction algorithm, but this has proved more difficult than I thought. A kind-of-sort-of compromise is to append your distinct texts together, and separate them with a character that doesn't appear in your document. (This is technically incorrect, but maybe your documents don't contain any NUL characters.) During construction of this one giant string, you should record the offsets of where each document starts and stops. Then build a SuffixTable with your giant string. After searching with the SuffixTable, you can find the original document by doing a binary search on your list of documents. I'm currently experimenting with different techniques to do this. Benchmarks Here are some very rough benchmarks that compare suffix table searching with searching in the using standard library functions. Note that these benchmarks explicitly do not include the construction of the suffix table. The premise of a suffix table is that you can afford to do that once---but you hope to gain much faster queries once you do. test search_scan_exists_many            ... bench:       8,601 ns/iter (+/- 85) test search_scan_exists_one             ... bench:          12 ns/iter (+/- 0) test search_scan_not_exists             ... bench:     368,788 ns/iter (+/- 811) test search_suffix_exists_many          ... bench:         414 ns/iter (+/- 15) test search_suffix_exists_many_contains ... bench:         303 ns/iter (+/- 4) test search_suffix_exists_one           ... bench:         250 ns/iter (+/- 1) test search_suffix_exists_one_contains  ... bench:          28 ns/iter (+/- 0) test search_suffix_not_exists           ... bench:         241 ns/iter (+/- 2) test search_suffix_not_exists_contains  ... bench:         179 ns/iter (+/- 3)  The ""many"" benchmarks test repeated queries that match. The ""one"" benchmarks test a single query that matches. The ""not_exists"" benchmarks test a single query that does not match. Finally, the ""contains"" benchmark test existence rather finding all positions. One thing you might take away from here is that you'll get a very large performance boost if many of your queries don't match. A linear scan takes a long time to fail! And here are some completely useless benchmarks on suffix array construction. They compare the linear time algorithm with the naive construction algorithm (call sort on all suffixes, which is O(n^2 * logn)). test naive_dna_medium                   ... bench:  33,676,690 ns/iter (+/- 86,233) test naive_dna_small                    ... bench:   2,574,217 ns/iter (+/- 11,005) test naive_small                        ... bench:         425 ns/iter (+/- 6) test sais_dna_medium                    ... bench:  10,398,456 ns/iter (+/- 133,742) test sais_dna_small                     ... bench:     977,165 ns/iter (+/- 4,125) test sais_small                         ... bench:       4,038 ns/iter (+/- 39)  These benchmarks might make you say, ""Whoa, the special algorithm isn't that much faster."" That's because the data just isn't big enough. And when it is big enough, a micro benchmark is useless. Why? Because using the naive algorithm will just burn your CPUs until the end of the time. It would be more useful to compare this to other suffix array implementations, but I haven't had time yet. Moreover, most (all?) don't support Unicode and instead operate on bytes, which means they aren't paying the overhead of decoding UTF-8. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BurntSushi/suffix"	"— Linear time suffix array construction (with Unicode support)"	"true"
"Text processing"	""	"https://travis-ci.org/BurntSushi/suffix"	"— Linear time suffix array construction (with Unicode support)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Linear time suffix array construction (with Unicode support)"	"true"
"Text processing"	"BurntSushi/tabwriter"	"https://github.com/BurntSushi/tabwriter"	"— Elastic tab stops (i.e. text column alignment)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"31"	"1"	"2"	"GitHub - BurntSushi/tabwriter: Elastic tabstops for Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 31 Fork 2 BurntSushi/tabwriter Code Issues 1 Pull requests 1 Pulse Graphs Elastic tabstops for Rust. 66 commits 1 branch 24 releases Fetching contributors Rust 98.2% Makefile 1.5% VimL 0.3% Rust Makefile VimL Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.1.25 0.1.24 0.1.23 0.1.22 0.1.21 0.1.20 0.1.19 0.1.18 0.1.17 0.1.16 0.1.15 0.1.14 0.1.13 0.1.12 0.1.11 0.1.10 0.1.9 0.1.8 0.1.6 0.1.5 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src tabwriter-bin .gitignore .travis.yml COPYING Cargo.toml LICENSE-MIT Makefile README.md UNLICENSE Initial commit. Sep 7, 2014 session.vim README.md tabwriter is a crate that implements elastic tabstops. It provides both a library for wrapping Rust Writers and a small program that exposes the same functionality at the command line. Dual-licensed under MIT or the UNLICENSE. Simple example of library use std::io::MemWriter; use tabwriter::TabWriter;  let mut tw = TabWriter::new(MemWriter::new()); tw.write_str("" Bruce Springsteen\tBorn to Run Bob Seger\tNight Moves Metallica\tBlack The Boss\tDarkness on the Edge of Town "").unwrap(); tw.flush().unwrap();  let written = String::from_utf8(tw.unwrap().unwrap()).unwrap();  assert_eq!(written.as_slice(), "" Bruce Springsteen  Born to Run Bob Seger          Night Moves Metallica          Black The Boss           Darkness on the Edge of Town ""); You can see an example of real use in my CSV toolkit. Simple example of command line utility [andrew@Liger tabwriter] cat sample | sed 's/   /\\t/g' a\tb\tc abc\tmnopqrstuv\txyz abcmnoxyz\tmore text  a\tb\tc [andrew@Liger tabwriter] ./target/tabwriter < sample a          b           c abc        mnopqrstuv  xyz abcmnoxyz  more text  a   b   c Notice that once a column block is broken, alignment starts over again. Documentation The API is fully documented with some examples: http://burntsushi.net/rustdoc/tabwriter/. Installation This crate works with Cargo. Assuming you have Rust and Cargo installed, simply check out the source and run tests: git checkout git://github.com/BurntSushi/tabwriter cd tabwriter cargo test You can also add tabwriter as a dependency to your project's Cargo.toml: [dependencies] tabwriter = ""0.1"" Dealing with ANSI escape codes If you want tabwriter to be aware of ANSI escape codes, then compile it with the ansi_formatting feature enabled. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/BurntSushi/tabwriter"	"— Elastic tab stops (i.e. text column alignment)"	"true"
"Text processing"	""	"https://travis-ci.org/BurntSushi/tabwriter"	"— Elastic tab stops (i.e. text column alignment)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Elastic tab stops (i.e. text column alignment)"	"true"
"Text processing"	"pwoolcoc/ngrams"	"https://github.com/pwoolcoc/ngrams"	"— Construct from arbitrary iterators"	"null"	"null"	"null"	"n-grams"	"https://en.wikipedia.org/wiki/N-gram"	"null"	"null"	"3"	"1"	"0"	"GitHub - pwoolcoc/ngrams: (Read-only) Generate n-grams Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 3 Fork 0 pwoolcoc/ngrams Code Issues 0 Pull requests 0 Pulse Graphs (Read-only) Generate n-grams https://pwoolcoc.gitlab.io/ngrams/ngrams 33 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit dccbe8b Feb 26, 2016 pwoolcoc build -> builds Permalink Failed to load latest commit information. examples simple little markov generator Jan 22, 2016 src Extract out fill_memory, and make .next() a bit more idiomatic Nov 25, 2015 .editorconfig .gitignore Initial commit of working prototype Nov 13, 2015 .gitlab-ci.yml make sure `public` exists... Feb 25, 2016 .travis.yml add .travis.yml Nov 18, 2015 Cargo.toml github -> gitlab Feb 25, 2016 LICENSE-APACHE add actual licenses Feb 24, 2016 LICENSE-MIT add actual licenses Feb 24, 2016 README.md build -> builds Feb 26, 2016 rustfmt.toml add some infrastructure stuff Nov 17, 2015 README.md N-grams Documentation This crate takes a sequence of tokens and generates an n-gram for it. For more information about n-grams, check wikipedia: https://en.wikipedia.org/wiki/N-gram Note: The canonical version of this crate is hosted on Gitlab Usage Probably the easiest way to use it is to use the iterator adaptor. If your tokens are strings (&str, String, char, or Vec), you don't have to do anything other than generate the token stream: use ngrams::Ngram; let grams: Vec<_> = ""one two three"".split(' ').ngrams(2).collect(); // => vec![ //        vec![""\u{2060}"", ""one""], //        vec![""one"", ""two""], //        vec![""two"", ""three""], //        vec![""three"", ""\u{2060}""], //    ] (re: the ""\u{2060}"": We use the unicode WORD JOINER symbol as padding on the beginning and end of the token stream.) If your token type isn't one of the listed types, you can still use the iterator adaptor by implementing the ngram::Pad trait for your type. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pwoolcoc/ngrams"	"— Construct from arbitrary iterators"	"true"
"Text processing"	""	"https://travis-ci.org/pwoolcoc/ngrams"	"— Construct from arbitrary iterators"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Construct from arbitrary iterators"	"true"
"Text processing"	"rust-lang-nursery/regex"	"https://github.com/rust-lang-nursery/regex"	"— Regular expressions (RE2 style)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"211"	"23"	"70"	"GitHub - rust-lang-nursery/regex Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 211 Fork 70 rust-lang-nursery/regex Code Issues 28 Pull requests 3 Wiki Pulse Graphs http://doc.rust-lang.org/regex 512 commits 4 branches 32 releases 54 contributors Rust 93.4% C++ 2.8% C 2.3% Python 1.2% Shell 0.3% Rust C++ C Python Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fixup-bench gh-pages master rfc Nothing to show regex-syntax-0.2.6 0.1.73 0.1.72 0.1.71 0.1.70 0.1.69 0.1.68 0.1.67 0.1.66 0.1.65 0.1.64 0.1.63 0.1.62 0.1.61 0.1.60 0.1.59 0.1.58 0.1.57 0.1.56 0.1.55 0.1.54 0.1.53 0.1.52 0.1.51 0.1.50 0.1.49 0.1.48 0.1.47 0.1.46 0.1.45 0.1.28 0.1.27 Nothing to show New pull request Latest commit d95d021 Jul 10, 2016 BurntSushi 0.1.73 Permalink Failed to load latest commit information. bench Touch up benchmarks. Jun 17, 2016 examples Fixes a performance bug in bytes::Regex::replace. Apr 22, 2016 regex-capi add module files Jun 16, 2016 regex-debug Major literal optimization refactoring. Mar 27, 2016 regex-syntax regex-syntax 0.3.4 Jul 10, 2016 regex_macros regex_macros 0.1.38 Jul 6, 2016 scripts Major literal optimization refactoring. Mar 28, 2016 src Match (?-u:\B) correctly in the NFA engines when valid UTF-8 is requi… Jul 9, 2016 tests Match (?-u:\B) correctly in the NFA engines when valid UTF-8 is requi… Jul 10, 2016 .gitignore Add wiki directory to .gitignore. May 1, 2016 .travis.yml Add SIMD accelerated multiple pattern search. May 18, 2016 CHANGELOG.md changelog 0.1.73 Jul 10, 2016 Cargo.toml 0.1.73 Jul 10, 2016 HACKING.md Add ASCII word boundaries to the lazy DFA. Apr 8, 2016 LICENSE-APACHE Revert ""[yyyy] [name of copyright owner]"" Aug 28, 2015 LICENSE-MIT Add license files Jun 12, 2015 PERFORMANCE.md Add rure, a C API. Apr 29, 2016 README.md Fix Typo in Readme Jun 18, 2016 appveyor.yml Don't call vcvarsall manually Jul 31, 2015 run-kcov add --verify to coveralls Mar 13, 2016 run-shootout-test A single threaded version of shootout benchmark. Jun 20, 2015 README.md regex A Rust library for parsing, compiling, and executing regular expressions. This particular implementation of regular expressions guarantees execution in linear time with respect to the size of the regular expression and search text by using finite automata. In particular, it makes use of both NFAs and DFAs when matching. Much of the syntax and implementation is inspired by RE2. Documentation Module documentation with examples. The module documentation also include a comprehensive description of the syntax supported. Documentation with examples for the various matching functions and iterators can be found on the Regex type. Usage Add this to your Cargo.toml: [dependencies] regex = ""0.1"" and this to your crate root: extern crate regex; Here's a simple example that matches a date in YYYY-MM-DD format and prints the year, month and day: extern crate regex;  use regex::Regex;  fn main() {     let re = Regex::new(r""(?x) (?P<year>\d{4})  # the year - (?P<month>\d{2}) # the month - (?P<day>\d{2})   # the day "").unwrap();     let caps = re.captures(""2010-03-14"").unwrap();      assert_eq!(""2010"", caps.name(""year"").unwrap());     assert_eq!(""03"", caps.name(""month"").unwrap());     assert_eq!(""14"", caps.name(""day"").unwrap()); } If you have lots of dates in text that you'd like to iterate over, then it's easy to adapt the above example with an iterator: extern crate regex;  use regex::Regex;  const TO_SEARCH: &'static str = "" On 2010-03-14, foo happened. On 2014-10-14, bar happened. "";  fn main() {     let re = Regex::new(r""(\d{4})-(\d{2})-(\d{2})"").unwrap();      for caps in re.captures_iter(TO_SEARCH) {         // Note that all of the unwraps are actually OK for this regex         // because the only way for the regex to match is if all of the         // capture groups match. This is not true in general though!         println!(""year: {}, month: {}, day: {}"",                  caps.at(1).unwrap(),                  caps.at(2).unwrap(),                  caps.at(3).unwrap());     } } This example outputs: year: 2010, month: 03, day: 14 year: 2014, month: 10, day: 14  Usage: Avoid compiling the same regex in a loop It is an anti-pattern to compile the same regular expression in a loop since compilation is typically expensive. (It takes anywhere from a few microseconds to a few milliseconds depending on the size of the regex.) Not only is compilation itself expensive, but this also prevents optimizations that reuse allocations internally to the matching engines. In Rust, it can sometimes be a pain to pass regular expressions around if they're used from inside a helper function. Instead, we recommend using the lazy_static crate to ensure that regular expressions are compiled exactly once. For example: #[macro_use] extern crate lazy_static; extern crate regex;  use regex::Regex;  fn some_helper_function(text: &str) -> bool {     lazy_static! {         static ref RE: Regex = Regex::new(""..."").unwrap();     }     RE.is_match(text) } Specifically, in this example, the regex will be compiled when it is used for the first time. On subsequent uses, it will reuse the previous compilation. Usage: match regular expressions on &[u8] The main API of this crate (regex::Regex) requires the caller to pass a &str for searching. In Rust, an &str is required to be valid UTF-8, which means the main API can't be used for searching arbitrary bytes. To match on arbitrary bytes, use the regex::bytes::Regex API. The API is identical to the main API, except that it takes an &[u8] to search on instead of an &str. By default, . will match any byte using regex::bytes::Regex, while . will match any encoded Unicode codepoint using the main API. This example shows how to find all null-terminated strings in a slice of bytes: use regex::bytes::Regex;  let re = Regex::new(r""(?P<cstr>[^\x00]+)\x00"").unwrap(); let text = b""foo\x00bar\x00baz\x00"";  // Extract all of the strings without the null terminator from each match. // The unwrap is OK here since a match requires the `cstr` capture to match. let cstrs: Vec<&[u8]> =     re.captures_iter(text)       .map(|c| c.name(""cstr"").unwrap())       .collect(); assert_eq!(vec![&b""foo""[..], &b""bar""[..], &b""baz""[..]], cstrs); Notice here that the [^\x00]+ will match any byte except for NUL. When using the main API, [^\x00]+ would instead match any valid UTF-8 sequence except for NUL. Usage: match multiple regular expressions simultaneously This demonstrates how to use a RegexSet to match multiple (possibly overlapping) regular expressions in a single scan of the search text: use regex::RegexSet;  let set = RegexSet::new(&[     r""\w+"",     r""\d+"",     r""\pL+"",     r""foo"",     r""bar"",     r""barfoo"",     r""foobar"", ]).unwrap();  // Iterate over and collect all of the matches. let matches: Vec<_> = set.matches(""foobar"").into_iter().collect(); assert_eq!(matches, vec![0, 2, 3, 4, 6]);  // You can also test whether a particular regex matched: let matches = set.matches(""foobar""); assert!(!matches.matched(5)); assert!(matches.matched(6)); Usage: regex! compiler plugin WARNING: The regex! compiler plugin is orders of magnitude slower than the normal Regex::new(...) usage. You should not use the compiler plugin unless you have a very special reason for doing so. The performance difference may be the temporary, but the path forward at this point isn't clear. The regex! compiler plugin will compile your regexes at compile time. This only works with a nightly compiler. Here is a small example: #![feature(plugin)]  #![plugin(regex_macros)] extern crate regex;  fn main() {     let re = regex!(r""(\d{4})-(\d{2})-(\d{2})"");     let caps = re.captures(""2010-03-14"").unwrap();      assert_eq!(""2010"", caps.at(1).unwrap());     assert_eq!(""03"", caps.at(2).unwrap());     assert_eq!(""14"", caps.at(3).unwrap()); } Notice that we never unwrap the result of regex!. This is because your program won't compile if the regex doesn't compile. (Try regex!(""("").) Usage: a regular expression parser This repository contains a crate that provides a well tested regular expression parser and abstract syntax. It provides no facilities for compilation or execution. This may be useful if you're implementing your own regex engine or otherwise need to do analysis on the syntax of a regular expression. It is otherwise not recommended for general use. Documentation for regex-syntax with examples. License regex is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses. See LICENSE-APACHE, and LICENSE-MIT for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rust-lang-nursery/regex"	"— Regular expressions (RE2 style)"	"true"
"Text processing"	""	"https://travis-ci.org/rust-lang-nursery/regex"	"— Regular expressions (RE2 style)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Regular expressions (RE2 style)"	"true"
"Virtualization"	"ekse/unicorn-rs"	"https://github.com/ekse/unicorn-rs"	"— Rust bindings for the unicorn CPU emulator"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"8"	"2"	"2"	"GitHub - ekse/unicorn-rs: Rust bindings for the unicorn CPU emulator Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 8 Fork 2 ekse/unicorn-rs Code Issues 0 Pull requests 0 Pulse Graphs Rust bindings for the unicorn CPU emulator 44 commits 1 branch 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 8021c8c Jul 12, 2016 ekse Update contributors. Permalink Failed to load latest commit information. examples Format code Jul 11, 2016 src A couple of small changes. Jul 12, 2016 tests A couple of small changes. Jul 12, 2016 .gitignore Add missing m68k constants. Apr 15, 2016 COPYING Adding GNU GPL v2 license to be compatible with the unicorn license. Apr 17, 2016 Cargo.toml Update bitflags crate to 0.6 May 1, 2016 README.md Update contributors. Jul 12, 2016 README.md unicorn-rs Rust bindings for the unicorn CPU emulator. extern crate unicorn;  use unicorn::{Cpu, CpuX86, uc_handle};  fn main() {     let x86_code32 : Vec<u8> = vec![0x41, 0x4a]; // INC ecx; DEC edx      let mut emu = CpuX86::new(unicorn::Mode::MODE_32).expect(""failed to instantiate emulator"");     emu.mem_map(0x1000, 0x4000, unicorn::PROT_ALL);      emu.mem_write(0x1000, &x86_code32);      emu.reg_write_i32(unicorn::RegisterX86::ECX, -10);     emu.reg_write_i32(unicorn::RegisterX86::EDX, -50);      emu.emu_start(0x1000, (0x1000 + x86_code32.len()) as u64, 10 * unicorn::SECOND_SCALE, 1000);     assert_eq!(emu.reg_read_i32(unicorn::RegisterX86::ECX), Ok((-9)));     assert_eq!(emu.reg_read_i32(unicorn::RegisterX86::EDX), Ok((-51))); } Installation This project has been tested on Linux. The bindings are built for the master version of the unicorn git (currently at 1.0). To use this package, first install unicorn from git : Clone unicorn from git with git clone https://github.com/unicorn-engine/unicorn. Build and install with make.sh and make.sh install. Then simply add it as dependency to the Cargo.toml of your program. [dependencies] unicorn = ""0.1.0""  Notes The bindings do not currently support callbacks for tracing interrupts and IN/OUT instructions for x86. Please create an issue (or a pull request) if this something you would like to be added. Contributing Contributions to this project are super appreciated. Pull requests, bug reports, code review, tests, documentation or feedback on your use of the bindings, nothing is too small. Don't hesitate to open an issue if you have questions. Contributors: Sébastien Duquette (@ekse) Israel Hallé (@isra17) for redesigning the callbacks API Richo Healey (@richo) petevine for reviewing the project and adding tests jschievink for his help with the API design Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ekse/unicorn-rs"	"— Rust bindings for the unicorn CPU emulator"	"true"
"Virtualization"	"saurvs/hypervisor-rs"	"https://github.com/saurvs/hypervisor-rs"	"— Hardware-accelerated virtualization on OS X"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3"	"2"	"0"	"GitHub - saurvs/hypervisor-rs: Bindings to the Hypervisor framework in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 3 Fork 0 saurvs/hypervisor-rs Code Issues 0 Pull requests 0 Pulse Graphs Bindings to the Hypervisor framework in Rust 53 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 12ea5ac May 24, 2016 saurvs Bump version of crate to 0.0.8. Update libc version. Permalink Failed to load latest commit information. src Rename destory_vm() tp destroy_vm() and destory() to destroy() May 24, 2016 .gitignore Initial commit Mar 25, 2016 Cargo.toml Bump version of crate to 0.0.8. Update libc version. May 24, 2016 LICENSE.md More refactor Apr 1, 2016 README.md Update README.md Apr 2, 2016 build.rs Initial commit Mar 25, 2016 README.md hypervisor-rs hypervisor is a Rust library that taps into functionality that enables hardware-accelerated execution of virtual machines on OS X. It binds to the Hypervisor framework on OS X, and exposes a safe Rust interface through the hypervisor module, and an unsafe foreign function interface through the hypervisor::ffi module. Documentation Prerequisites To use this library, you need OS X Yosemite (10.10), or newer an Intel processor with the VT-x feature set that includes Extended Page Tables (EPT) and the Unrestricted Mode. To verify this, run and expect the following in your Terminal: $ sysctl kern.hv_support kern.hv_support: 1 Status Accessing x86 registers Accessing model-specific registers (MSRs) Mapping guest physical memory segments into guest physical address space Virtual CPUs Executing and interrupting Force flushing cached state Invalidating translation lookaside buffer (TLB) Accessing floating point (FP) and SIMD state Obtaining cumulative execution time Synchronizing guest timestamp-counters (TSC) Accessing fields of Virtual Machine Control Structures (VMCS) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/saurvs/hypervisor-rs"	"— Hardware-accelerated virtualization on OS X"	"true"
"Web programming"	"Rust web framework comparison"	"https://github.com/flosse/rust-web-framework-comparison"	"— Hardware-accelerated virtualization on OS X"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"177"	"16"	"10"	"GitHub - flosse/rust-web-framework-comparison: A comparison of some web frameworks and libs written in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 177 Fork 10 flosse/rust-web-framework-comparison Code Issues 2 Pull requests 1 Pulse Graphs A comparison of some web frameworks and libs written in Rust 74 commits 1 branch 0 releases 9 contributors Rust 86.8% Nix 13.2% Rust Nix Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 2d462bd Jul 14, 2016 flosse add blog post Permalink Failed to load latest commit information. hyper added hyper example Aug 18, 2015 iron added hello world examples of iron and nickel Aug 16, 2015 nickel added hello world examples of iron and nickel Aug 16, 2015 pencil add pencil example Mar 8, 2016 rustful remove unnecessary 'HandlerFn' struct as suggested in #2 Oct 30, 2015 tiny-http added tiny-http example Aug 18, 2015 .gitignore added hyper and tiny-http Aug 18, 2015 README.md add blog post Jul 14, 2016 dev-env.nix added cargo to nix expression Aug 18, 2015 README.md Rust web framework comparison A comparison of some web frameworks written in Rust. Server frameworks At the moment there are nine interesting framworks to build web applications with Rust: iron (homepage / repository / documentation) nickel (homepage / repository / documentation) rustful ( - / repository / documentation) rustless (homepage / repository / documentation) conduit ( - / repository / - ) rouille ( - / repository / documentation) pencil ( - / repository / documentation) sappers ( - / repository / - ) boron ( - / repository / - ) If you need a more low level control you can choose between five libraries: hyper (homepage / repository / documentation) tiny-http ( - / repository) / documentation) solicit ( - / repository / documentation) kinglet ( - / repository / - ) hydrogen ( - / repository / documentation) Client frameworks To build web clients with Rust, you can choose between three libraries: hyper (homepage / repository / documentation) ease (- / repository / documentation) jsonrpc (- / repository / documentation) Supplemental libraries Websocket websocket (homepage / repository / documentation) ws-rs (homepage / repository / documentation) Templating tera (- / repository / - ) mustache (- / repository / documentation) liquid (- / repository / - ) handlebars (- / repository horrorshow (- / repository / documentation) maud (homepage / repository / documentation) Resources Blog posts A Rust-powered public web page in 5 minutes Rust and Rest Shipping forgettable microservices with Rust Writing a simple REST app in Rust Getting started with Rust Let's Build a Web Server in Rust Creating a basic webservice in Rust Iron on uWSGI Deploying a Rust App to Google App Engine async hyper Introducing Pencil: A Microframework Inspired By Flask For Rust Trying Rust for web services Are we web yet? Reimplementing ashurbanipal.web in Rust A web app with Nickel: From first line to Heroku deployment What features Iron does not have compared to a web server like nginx? Build an API in Rust with JWT Authentication using Nickel.rs Selective Middleware for Iron Rust for the Web - RESTful API in Rust, impressions Demos exoskeleton - Iron Example webapp using React + Webpack - Iron rustwebapp - Iron and Postgres (r2d2) webrust - Iron and Postgres (r2d2) httptest - Iron nickel-todo-backend - Nickel and Postgres (r2d2) rust-playground - Iron Real-world web projects using Rust yaus - Iron and SQLite racerd - Iron rust-passivetotal - Hyper mars - Hyper openfairdb - Nickel and Neo4j (r2d2) ruma - Iron and Posgres (diesel + r2d2) Other Rust for Node developers Comparison General Name iron nickel rustful rustless conduit rouille hyper tiny-http solicit ease jsonrpc websocket ws-rs kinglet pencil sappers hydrogen boron License MIT MIT MIT MIT MIT ? MIT Apache 2.0 MIT MIT CC0-1.0 MIT MIT MIT BSD-3-Clause MIT MPL 2.0 MIT Github Stars 3.1k 1.6k 0.8k 0.3k 0.1k 0k 1.8k 0.2k 0.2k 0.1k 0k 0.2k 0.1k 0.1k 0.6k 0k 0.4k 0k Contributors 57 44 10 8 4 1 95 7 7 2 2 16 2 1 3 0 1 2 Server yes yes yes yes yes yes yes yes yes no no yes yes yes yes yes yes yes Client ? ? ? ? no no yes ? yes yes yes yes yes no no no no no Base framework hyper hyper hyper iron civet tiny-http yes yes yes hyper hyper no no yes hyper hyper yes hyper HTTPS support yes no yes ? ? ? yes yes - - - - yes - ? ? no no HTTP/2 support ? ? ? ? ? ? solicit ? yes ? ? - - - ? ? no no Middleware & Plugins Name iron nickel conduit rouille rustful rustless pencil sappers Static File Serving yes yes yes no ? ? yes ? Mounting yes yes ? no ? ? ? ? Logging yes no ? no ? ? yes ? JSON-Body-Parsing yes yes ? no ? ? ? ? Sessions yes ? ? no ? ? ? ? Cookies yes ? ? no ? ? ? ? PostgreSQL middleware ? yes ? no ? ? ? ? SQLite middleware ? yes ? no ? ? ? ? Redis middleware ? yes ? no ? ? ? ? MySQL middleware ? yes ? no ? ? ? ? Examples To compile or run the examples use Cargo. First clone this repo git clone https://github.com/flosse/rust-web-framework-comparison cd rust-web-framework-comparison/  and change to the desired frameworkd directory (e.g. cd iron/) and type cargo run --example hello_world  Then visit http://localhost:3000 to see the result. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/flosse/rust-web-framework-comparison"	"— Hardware-accelerated virtualization on OS X"	"true"
"Web programming"	"alexcrichton/curl-rust"	"https://github.com/alexcrichton/curl-rust"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"213"	"15"	"59"	"GitHub - alexcrichton/curl-rust: Rust bindings to libcurl Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 213 Fork 59 alexcrichton/curl-rust Code Issues 3 Pull requests 0 Pulse Graphs Rust bindings to libcurl 348 commits 4 branches 5 releases 37 contributors Rust 99.9% Shell 0.1% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master rewrite spaces-are-error Nothing to show curl-sys-0.1.34 curl-sys-0.1.33 0.2.19 0.2.18 0.2.17 Nothing to show New pull request Latest commit d5f84ac Jul 14, 2016 alexcrichton Fail with a nice message for spaces in directories … Closes #110 Permalink Failed to load latest commit information. ci Cross compile from Linux to Windows/musl Jun 6, 2016 curl-sys Fail with a nice message for spaces in directories Jul 14, 2016 src Use CString more aggressively with Part APIs Jun 6, 2016 systest Continue fighting with appveyor May 11, 2016 tests Bind the curl_form APIs Jun 6, 2016 .gitignore Update to rust master Feb 3, 2015 .gitmodules Move the submodule to a curl with ./configure Nov 14, 2014 .travis.yml Don't run tests on Windows Jun 7, 2016 Cargo.toml Initial bindings of the libcurl multi API May 18, 2016 LICENSE Improve the README some and add a license Jul 2, 2014 README.md Tighten up POST example in README Jun 19, 2016 appveyor.yml Let's debug appveyor May 11, 2016 README.md curl-rust libcurl bindings for Rust Documentation Quick Start extern crate curl;  use std::io::{stdout, Write};  use curl::easy::Easy;  // Print a web page onto stdout fn main() {     let mut easy = Easy::new();     easy.url(""https://www.rust-lang.org/"").unwrap();     easy.write_function(|data| {         Ok(stdout().write(data).unwrap())     }).unwrap();     easy.perform().unwrap();      println!(""{}"", easy.response_code().unwrap()); } extern crate curl;  use curl::easy::Easy;  // Capture output into a local `Vec`. fn main() {     let mut dst = Vec::new();     let mut easy = Easy::new();     easy.url(""https://www.rust-lang.org/"").unwrap();      let mut transfer = easy.transfer();     transfer.write_function(|data| {         dst.extend_from_slice(data);         Ok(data.len())     }).unwrap();     transfer.perform().unwrap(); } Post / Put requests The put and post methods on Easy can configure the method of the HTTP request, and then read_function can be used to specify how data is filled in. This interface works particularly well with types that implement Read. extern crate curl;  use std::io::Read; use curl::easy::Easy;  fn main() {     let mut data = ""this is the body"".as_bytes();      let mut easy = Easy::new();     easy.url(""http://www.example.com/upload"").unwrap();     easy.post(true).unwrap();     easy.post_field_size(data.len() as u64).unwrap();      let mut transfer = easy.transfer();     transfer.read_function(|buf| {         Ok(data.read(buf).unwrap_or(0))     }).unwrap();     transfer.perform().unwrap(); } Custom headers Custom headers can be specified as part of the request: extern crate curl;  use curl::easy::{Easy, List};  fn main() {     let mut easy = Easy::new();     easy.url(""http://www.example.com"").unwrap();      let mut list = List::new();     list.append(""Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="").unwrap();     easy.http_headers(list).unwrap();     easy.perform().unwrap(); } Keep alive The handle can be re-used across multiple requests. Curl will attempt to keep the connections alive. extern crate curl;  use curl::easy::Easy;  fn main() {     let mut handle = Easy::new();      handle.url(""http://www.example.com/foo"").unwrap();     handle.perform().unwrap();      handle.url(""http://www.example.com/bar"").unwrap();     handle.perform().unwrap(); } Multiple requests The libcurl library provides support for sending multiple requests simultaneously through the ""multi"" interface. This is currently bound in the multi module of this crate and provides the ability to execute multiple transfers simultaneously. For more information, see that module. Version Support The bindings have been developed using curl version 7.24.0. They should work with any newer version of curl and possibly with older versions, but this has not been tested. License The curl-rust crate is licensed under the MIT license, see LICENSE for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alexcrichton/curl-rust"	"— bindings"	"true"
"Web programming"	"libcurl"	"http://curl.haxx.se/libcurl/"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"libcurl - the multiprotocol file transfer library libcurl index ABI API Bindings Competitors Examples Features Mailing List Related Libs Using libcurl Tutorial Testimonials cURL / libcurl overview libcurl - the multiprotocol file transfer library libcurl is a free and easy-to-use client-side URL transfer library, supporting DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, Telnet and TFTP. libcurl supports SSL certificates, HTTP POST, HTTP PUT, FTP uploading, HTTP form based upload, proxies, cookies, user+password authentication (Basic, Digest, NTLM, Negotiate, Kerberos), file transfer resume, http proxy tunneling and more! libcurl is highly portable, it builds and works identically on numerous platforms, including Solaris, NetBSD, FreeBSD, OpenBSD, Darwin, HPUX, IRIX, AIX, Tru64, Linux, UnixWare, HURD, Windows, Amiga, OS/2, BeOs, Mac OS X, Ultrix, QNX, OpenVMS, RISC OS, Novell NetWare, DOS and more... libcurl is free, thread-safe, IPv6 compatible, feature rich, well supported, fast, thoroughly documented and is already used by many known, big and successful companies and numerous applications. Download Go to the regular curl download page and get the latest curl package, or one of the specific libcurl packages listed. API You use libcurl with the provided C API or one of the over 40 available bindings. The cURL team works hard to keep the API and ABI stable. Howto Check out our using libcurl page for general hints and advice, the free HTTP client library comparison. or read the comparisons against libwww and WinInet. libcurl is most probably the most portable, most powerful and most often used C-based multi-platform file transfer library on this planet - be it open source or commercial."	"null"	"null"	"— bindings"	"true"
"Web programming"	""	"https://travis-ci.org/alexcrichton/curl-rust"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Web programming"	"Hyper"	"https://github.com/hyperium/hyper"	"— a REST-like API micro-framework inspired by and"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1814"	"101"	"308"	"GitHub - hyperium/hyper: An HTTP library for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 101 Star 1,814 Fork 308 hyperium/hyper Code Issues 30 Pull requests 0 Wiki Pulse Graphs An HTTP library for Rust http://hyper.rs 1,098 commits 3 branches 69 releases 103 contributors Rust 99.8% Other 0.2% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.9.x gh-pages master Nothing to show v0.9.10 v0.9.9 v0.9.8 v0.9.7 v0.9.6 v0.9.5 v0.9.4 v0.9.3 v0.9.2 v0.9.1 v0.9.0 v0.8.1 v0.8.0 v0.7.2 v0.7.1 v0.7.0 v0.6.16 v0.6.15 v0.6.14 v0.6.13 v0.6.12 v0.6.11 v0.6.10 v0.6.9 v0.6.8 v0.6.7 v0.6.5 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.3.16 v0.3.15 v0.3.14 v0.3.13 v0.3.12 v0.3.11 v0.3.10 v0.3.9 v0.3.8 v0.3.7 v0.3.6 v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.1 v0.2.0 v0.1.13 v0.1.12 v0.1.11 v0.1.10 v0.1.9 v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 2433780 Jul 15, 2016 seanmonstar committed on GitHub Merge pull request #865 from hyperium/gen-guide … docs(guide): copy over html files, not markdown files Permalink Failed to load latest commit information. .travis docs(guide): copy over html files, not markdown files Jul 15, 2016 doc/guide docs(guide): build and test markdown files in doc directory Jul 14, 2016 examples feat(http): add Decoder.try_read and Encoder.try_write Jul 14, 2016 src feat(headers): add last-event-id header Jul 14, 2016 tests feat(client): implement connection pooling for Client Jul 8, 2016 .appveyor.yml test(windows): Improve appveyor ci Sep 9, 2015 .gitignore init Aug 30, 2014 .travis.yml docs(guide): build and test markdown files in doc directory Jul 15, 2016 CHANGELOG.md v0.9.4 May 9, 2016 CONTRIBUTING.md docs(CONTRIBUTING): link to open easy issues Jul 7, 2015 Cargo.toml docs(guide): copy over html files, not markdown files Jul 15, 2016 LICENSE init Aug 30, 2014 README.md feat(lib): switch to non-blocking (asynchronous) IO May 16, 2016 README.md hyper A Modern HTTP library for Rust. Documentation Released Master Overview hyper is a fast, modern HTTP implementation written in and for Rust. It is a low-level typesafe abstraction over raw HTTP, providing an elegant layer over ""stringly-typed"" HTTP. Hyper offers both an HTTP client and server which can be used to drive complex web applications written entirely in Rust. The documentation is located at http://hyperium.github.io/hyper. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hyperium/hyper"	"— a REST-like API micro-framework inspired by and"	"true"
"Web programming"	""	"https://travis-ci.org/hyperium/hyper"	"— an HTTP implementation"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— an HTTP implementation"	"true"
"Web programming"	"vhbit/curl-rs"	"https://github.com/vhbit/curl-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1"	"1"	"2"	"GitHub - vhbit/curl-rs: A curl(libcurl) mod for rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 1 Fork 2 vhbit/curl-rs forked from andelf/rust-curl Code Pull requests 0 Pulse Graphs A curl(libcurl) mod for rust. 64 commits 2 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev master Nothing to show Nothing to show New pull request Pull request Compare This branch is 41 commits ahead of andelf:master. Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src .gitignore .travis.yml Cargo.toml LICENSE Makefile README.md Updated README Jun 27, 2014 README.md curl Master Dev A lightweight Curl-wrapper for using (mostly) HTTP from Rust. While there are a couple of Rust HTTP libraries like rust-http and its successor teepee. But the first one is considered deprecated and the second one is not pretty usable yet. Plus SSL support comes only with OpenSSL. Curl, in other hand, has pretty good history + allows to use a lot of different SSL backends, for example, it works with Apple security frameworks on Mac/iOS. It also can be used to support other protocols although they're not in plans in near future. I hope situation in Rust-land will change soon and it will be possible to drop this one in favor of Rust-only stack. Docs Available here compile make lib  test make tests  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vhbit/curl-rs"	"— bindings"	"true"
"Web programming"	""	"https://travis-ci.org/vhbit/curl-rs"	"— bindings"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— bindings"	"true"
"Web programming"	"fengsp/pencil"	"https://github.com/fengsp/pencil"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"611"	"25"	"20"	"GitHub - fengsp/pencil: A web application microframework for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 611 Fork 20 fengsp/pencil Code Issues 9 Pull requests 2 Pulse Graphs A web application microframework for Rust https://fengsp.github.io/pencil/ 205 commits 2 branches 6 releases Fetching contributors Rust 99.4% Other 0.6% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 0.2.1 0.2.0 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit 2a6d885 Jun 30, 2016 fengsp Use env to get hello app root path Permalink Failed to load latest commit information. examples/hello Use env to get hello app root path Jun 30, 2016 logo Added favicon.ico Dec 12, 2014 src Use host instead of fake base url Jun 29, 2016 tests Fixed tests May 13, 2016 .gitignore Moved hello example Dec 11, 2014 .travis.yml Updated travis config Dec 13, 2015 CHANGES This is 0.2.0 May 13, 2016 Cargo.toml This is 0.2.1 Jun 16, 2016 LICENSE Updated to 2016 Jan 17, 2016 Makefile Added docs Dec 10, 2014 README.md Added simple guide to readme May 13, 2016 upload-docs.sh Added docs Dec 10, 2014 README.md Pencil A microframework for Rust inspired by Flask. extern crate pencil;  use pencil::{Pencil, Request, Response, PencilResult};  fn hello(_: &mut Request) -> PencilResult {     Ok(Response::from(""Hello World!"")) }  fn main() {     let mut app = Pencil::new(""/web/hello"");     app.get(""/"", ""hello"", hello);     app.run(""127.0.0.1:5000""); } One simple guide: https://fengsp.github.io/blog/2016/3/introducing-pencil/ If you feel anything wrong, feedbacks or pull requests are welcome. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fengsp/pencil"	"—"	"true"
"Web programming"	""	"https://travis-ci.org/fengsp/pencil"	"—"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"—"	"true"
"Web programming"	"Iron"	"https://github.com/iron/iron"	"— a middleware-based server framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3126"	"155"	"234"	"GitHub - iron/iron: An Extensible, Concurrent Web Framework for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 155 Star 3,126 Fork 234 iron/iron Code Issues 44 Pull requests 4 Wiki Pulse Graphs An Extensible, Concurrent Web Framework for Rust http://ironframework.io 813 commits 2 branches 2 releases 60 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feat/autogen master Nothing to show 0.3.0 0.0.4 Nothing to show New pull request Latest commit e8f6464 Jul 4, 2016 reem (release) 0.4.0. Permalink Failed to load latest commit information. examples Change from fields on Url to methods that delegate to rust-url May 6, 2016 src Merge pull request #453 from carols10cents/hold-onto-url Jul 4, 2016 .gitignore Fixes around std::io being renamed to std::old_io Jan 28, 2015 .travis.yml Test both with and without SSL on Travis CI Feb 29, 2016 CONTRIBUTING.md Adjusted contributing readme Jun 13, 2014 Cargo.toml (release) 0.4.0. Jul 4, 2016 LICENSE (chore) Updated license holders. Sep 2, 2014 README.md Include link to params crate in README Feb 8, 2016 README.md Iron Extensible, Concurrency Focused Web Development in Rust. Response Timer Example extern crate iron; extern crate time;  use iron::prelude::*; use iron::{BeforeMiddleware, AfterMiddleware, typemap}; use time::precise_time_ns;  struct ResponseTime;  impl typemap::Key for ResponseTime { type Value = u64; }  impl BeforeMiddleware for ResponseTime {     fn before(&self, req: &mut Request) -> IronResult<()> {         req.extensions.insert::<ResponseTime>(precise_time_ns());         Ok(())     } }  impl AfterMiddleware for ResponseTime {     fn after(&self, req: &mut Request, res: Response) -> IronResult<Response> {         let delta = precise_time_ns() - *req.extensions.get::<ResponseTime>().unwrap();         println!(""Request took: {} ms"", (delta as f64) / 1000000.0);         Ok(res)     } }  fn hello_world(_: &mut Request) -> IronResult<Response> {     Ok(Response::with((iron::status::Ok, ""Hello World""))) }  fn main() {     let mut chain = Chain::new(hello_world);     chain.link_before(ResponseTime);     chain.link_after(ResponseTime);     Iron::new(chain).http(""localhost:3000"").unwrap(); } Overview Iron is a high level web framework built in and for Rust, built on hyper. Iron is designed to take advantage of Rust's greatest features - its excellent type system and its principled approach to ownership in both single threaded and multi threaded contexts. Iron is highly concurrent and can scale horizontally on more machines behind a load balancer or by running more threads on a more powerful machine. Iron avoids the bottlenecks encountered in highly concurrent code by avoiding shared writes and locking in the core framework. Iron is 100% safe code: $ ack unsafe src | wc        0       0       0 Philosophy Iron is meant to be as extensible and pluggable as possible; Iron's core is concentrated and avoids unnecessary features by leaving them to middleware, plugins, and modifiers. Middleware, Plugins, and Modifiers are the main ways to extend Iron with new functionality. Most extensions that would be provided by middleware in other web frameworks are instead addressed by the much simpler Modifier and Plugin systems. Modifiers allow external code to manipulate Requests and Response in an ergonomic fashion, allowing third-party extensions to get the same treatment as modifiers defined in Iron itself. Plugins allow for lazily-evaluated, automatically cached extensions to Requests and Responses, perfect for parsing, accessing, and otherwise lazily manipulating an http connection. Middleware are only used when it is necessary to modify the control flow of a Request flow, hijack the entire handling of a Request, check an incoming Request, or to do final post-processing. This covers areas such as routing, mounting, static asset serving, final template rendering, authentication, and logging. Iron comes with only basic modifiers for setting the status, body, and various headers, and the infrastructure for creating modifiers, plugins, and middleware. No plugins or middleware are bundled with Iron. Performance Iron averages 84,000+ requests per second for hello world and is mostly IO-bound, spending over 70% of its time in the kernel send-ing or recv-ing data.* * Numbers from profiling on my OS X machine, your mileage may vary. Core Extensions Iron aims to fill a void in the Rust web stack - a high level framework that is extensible and makes organizing complex server code easy. Extensions are painless to build, and the core bundle already includes*: Middleware: Routing Mounting Static File Serving Logging Plugins: JSON Body Parsing URL Encoded Data Parsing All-In-One (JSON, URL, & Form Data) Parameter Parsing Cookies Sessions Both: Shared Memory (also used for Plugin configuration) This allows for extremely flexible and powerful setups and allows nearly all of Iron's features to be swappable - you can even change the middleware resolution algorithm by swapping in your own Chain. * Due to the rapidly evolving state of the Rust ecosystem, not everything builds all the time. Please be patient and file issues for breaking builds, we're doing our best. Underlying HTTP Implementation Iron is based on and uses hyper as its HTTP implementation, and lifts several types from it, including its header representation, status, and other core HTTP types. It is usually unnecessary to use hyper directly when using Iron, since Iron provides a facade over hyper's core facilities, but it is sometimes necessary to depend on it as well. Installation If you're using Cargo, just add Iron to your Cargo.toml: [dependencies.iron] version = ""*"" Documentation The documentation is hosted online and auto-updated with each successful release. You can also use cargo doc to build a local copy. Examples Check out the examples directory! You can run an individual example using cargo run --example example-name. Note that for benchmarking you should make sure to use the --release flag, which will cause cargo to compile the entire toolchain with optimizations. Without --release you will get truly sad numbers. Getting Help Feel free to ask questions as github issues in this or other related repos. The best place to get immediate help is on IRC, on any of these channels on the mozilla network: #rust-webdev #iron #rust One of the maintainers or contributors is usually around and can probably help. We encourage you to stop by and say hi and tell us what you're using Iron for, even if you don't have any questions. It's invaluable to hear feedback from users and always nice to hear if someone is using the framework we've worked on. Maintainers Jonathan Reem (reem) is the core maintainer and author of Iron. Commit Distribution (as of 8e55759): Jonathan Reem (415) Zach Pomerantz (123) Michael Sproul (9) Patrick Tran (5) Corey Richardson (4) Bryce Fisher-Fleig (3) Barosl Lee (2) Christoph Burgdorf (2) da4c30ff (2) arathunku (1) Cengiz Can (1) Darayus (1) Eduardo Bautista (1) Mehdi Avdi (1) Michael Sierks (1) Nerijus Arlauskas (1) SuprDewd (1)  License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/iron/iron"	"— a middleware-based server framework"	"true"
"Web programming"	""	"https://travis-ci.org/iron/iron"	"— a middleware-based server framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a middleware-based server framework"	"true"
"Web programming"	"sunng87/handlebars-iron"	"https://github.com/sunng87/handlebars-iron"	"— as an Iron web framework middleware."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"80"	"7"	"20"	"GitHub - sunng87/handlebars-iron: Handlebars middleware for Iron web framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 80 Fork 20 sunng87/handlebars-iron Code Issues 1 Pull requests 0 Pulse Graphs Handlebars middleware for Iron web framework 242 commits 2 branches 20 releases 13 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.12.0 v0.11.1 v0.11.0 v0.10.2 v0.10.1 v0.10.0 v0.9.1 v0.9.0 v0.8.4 v0.8.3 v0.8.2 v0.8.1 0.15.3 0.15.2 0.15.1 0.15.0 0.14.0 0.13.2 0.13.1 0.13.0 Nothing to show New pull request Latest commit 6f2ecbb Jun 25, 2016 sunng87 (chore) update CHANGELOG Permalink Failed to load latest commit information. examples (feat) remove deprecated API and prepare to 0.14 release [#35] Mar 25, 2016 src Fix race condition in the watch feature May 20, 2016 tests (feat) remove deprecated API and prepare to 0.14 release [#35] Mar 25, 2016 .gitignore Merge branch 'master' of github.com:sunng87/handlebars-iron Jan 6, 2015 .travis.yml (chore) drop rust 1.7.0 Jun 7, 2016 CHANGELOG.md (chore) update CHANGELOG Jun 25, 2016 Cargo.toml (cargo-release) start next development iteration 0.15.4-pre Jun 25, 2016 LICENSE (doc) license, travis-ci and README Jan 14, 2015 README.md (doc) add gitter link Jun 7, 2016 README.md handlebars-iron Handlebars middleware for the Iron web framework. The most recent version of handlebars-iron, like Hyper, Iron and Handlebars-rust, now compiles on nightly, beta and latest stable (1.7.0+) channel. Our travis task will track the compatibility on all these channels. Handlebars-iron 0.14.x works with Iron 0.3.x and Hyper 0.8.x. If you were using Iron 0.2.x you can stick with handlebars-iron 0.13.x. Usage Add HandlebarsEngine to your Iron middleware chain as an ""after"" middleware.   /// HandlebarsEngine will look up all files with ""./examples/templates/**/*.hbs""   let mut hbse = HandlebarsEngine::new();   hbse.add(Box::new(DirectorySource::new(""./examples/templates/"", "".hbs"")));    // load templates from all registered sources   if let Err(r) = hbse.reload() {     panic!(""{}"", r.description());   }    chain.link_after(hbse); In your handler, set Template to response. As required by Handlebars-rust, your data should impl serialize::json::ToJson. If you are on nightly channel, it is highly recommended to use tojson_macros to generate default ToJson implementation without repeating yourself. For DirectorySource, handlebars engine will walk the directory specified by prefix, try to register all templates matches the suffix, and extract its name as template name. For instance, ./examples/templates/some/path/index.hbs will be registered as some/path/index. /// render data with ""index"" template /// that is ""./examples/templates/index.hbs"" fn hello_world(_: &mut Request) -> IronResult<Response> {     let mut resp = Response::new();      let data = ...     resp.set_mut(Template::new(""index"", data)).set_mut(status::Ok);     Ok(resp) } By using Template::with You can also render some template without actually register it. But this is not recommended because template string needs to be parsed every time. Consider using a MemorySource if possible. /// render data with ""index"" template /// that is ""./examples/templates/index.hbs"" fn hello_world(_: &mut Request) -> IronResult<Response> {     let mut resp = Response::new();      let data = ...     resp.set_mut(Template::with(""<h1>{{title}}</h1>"", data)).set_mut(status::Ok);     Ok(resp) } Since this is simple library, you may run this example with RUST_LOG=handlebars_iron=info cargo run --example server first, and documentation then. Rust and its ecosystem are still in early stage, this project might been broken for various reasons. I will try my best to keep this library compiles with latest Rust nightly before the 1.0 final release. If you find anything bad, pull requests and issue reporting are always welcomed. Live reload During development you may want to live-reload your templates without having to restart your web server. Here comes the live-reload feature. Since live-reload may only be useful in development phase, we have made it a optional feature. In order to enable it, you will need to add feature watch in your cargo declaration: [features] ## create a feature in your app watch = [""handlebars-iron/watch""]  [dependencies] handlebars-iron = ... Check examples/watch_server.rs for further information. To test it: RUST_LOG=handlebars_iron=info cargo run --example watch_server --features watch. Serde From 0.11.0, by enabling feature serde_type, you can also use serde_json as type system. Typically you can annotate your type with #[derive(Serialize)] to make it work as template data. You can find an working example in examples/server.rs and try to run it via: cargo run --features unstable --example server --no-default-features License MIT, of course. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sunng87/handlebars-iron"	"— as an Iron web framework middleware."	"true"
"Web programming"	""	"https://travis-ci.org/sunng87/handlebars-iron"	"— as an Iron web framework middleware."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— as an Iron web framework middleware."	"true"
"Web programming"	"Nickel"	"https://github.com/nickel-org/nickel.rs/"	"— inspired by"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1584"	"75"	"110"	"GitHub - nickel-org/nickel.rs: An expressjs inspired web framework for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 75 Star 1,584 Fork 110 nickel-org/nickel.rs Code Issues 39 Pull requests 6 Pulse Graphs An expressjs inspired web framework for Rust http://nickel.rs 593 commits 11 branches 11 releases 50 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags auto error_handling gh-pages let-them-read-docs lifetime_craziness master middleware refactor regex static var_paths Nothing to show 0.8.1 0.8.0 0.7.3 0.7.2 0.7.1 0.7.0 0.6.0 0.5.0 0.3.0 0.2.1 0.2.0 Nothing to show New pull request Latest commit b77e4ca May 19, 2016 sfackler committed with homu chore(*): Upgrade hyper and url versions … Also move listen_https to be unconditionally included since openssl isn't required by hyper anymore.  Pull request: #356 Approved by: Ryman Permalink Failed to load latest commit information. examples chore(nightly): conditionally include macro_use attribute in integrat… Jul 9, 2016 src chore(*): Upgrade hyper and url versions Jul 9, 2016 tests doc(examples): add integration testing example Jul 9, 2016 .appveyor.yml chore(appveyor): disable 32bit msvc target until better support lands Nov 9, 2015 .clog.toml chore(*): release 0.7.0 Sep 19, 2015 .gitattributes fix(test): fix examples::template::renders_data test on Windows Jun 23, 2016 .gitignore chore(*): ignore Cargo.lock Aug 3, 2014 .travis.yml fix(travis): don't fail the build if our min rustc version fails May 10, 2016 Cargo.toml chore(*): Upgrade hyper and url versions Jul 9, 2016 LICENSE Initial commit Jun 4, 2014 README.md chore(readme): add license badge Jul 23, 2015 changelog.md chore(*): release 0.8.1 May 10, 2016 contributing.md doc(contributing): fixed commit message convention url Apr 25, 2016 README.md nickel.rs nickel.rs is a simple and lightweight foundation for web applications written in Rust. Its API is inspired by the popular express framework for JavaScript. Hello world #[macro_use] extern crate nickel;  use nickel::{Nickel, HttpRouter};  fn main() {     let mut server = Nickel::new();     server.get(""**"", middleware!(""Hello World""));     server.listen(""127.0.0.1:6767""); } Dependencies You'll need to create a Cargo.toml that looks like this; [package]  name = ""my-nickel-app"" version = ""0.0.1"" authors = [""yourname""]  [dependencies.nickel] version = ""*"" # If you are using the 'nightly' rust channel you can uncomment # the line below to activate unstable features # features = [""unstable""]  # Some examples require the `rustc_serialize` crate, which will # require uncommenting the lines below # [dependencies] # rustc-serialize = ""*"" You can then compile this using Cargo build and run it using Cargo run. After it's running you should visit http://localhost:6767 to see your hello world! More examples More examples can be found in the examples directory and the full documentation can be found here. Contributing nickel.rs is a community effort. We welcome new contributors with open arms. Please read the contributing guide here first. If you're looking for inspiration, there's list of open issues right here on github. If you need a helping hand reach out to @cburgdorf, @Ryman or @SimonPersson. And hey, did you know you can also contribute by just starring the project here on github :) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nickel-org/nickel.rs/"	"— inspired by"	"true"
"Web programming"	"Express"	"http://expressjs.com/"	"— inspired by"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"26295"	"1475"	"4897"	"GitHub - expressjs/express: Fast, unopinionated, minimalist web framework for node. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,475 Star 26,295 Fork 4,897 expressjs/express Code Issues 80 Pull requests 37 Wiki Pulse Graphs Fast, unopinionated, minimalist web framework for node. http://expressjs.com 5,271 commits 12 branches 260 releases 193 contributors JavaScript 99.8% Other 0.2% JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x 2.x 3.x 4.x 5.x 5.0 async-route-handlers benchmark master mscdex-router-optimize slim-benchmark streaming-render Nothing to show 5.0.0-alpha.2 5.0.0-alpha.1 4.14.0 4.13.4 4.13.3 4.13.2 4.13.1 4.13.0 4.12.4 4.12.3 4.12.2 4.12.1 4.12.0 4.11.2 4.11.1 4.11.0 4.10.8 4.10.7 4.10.6 4.10.5 4.10.4 4.10.3 4.10.2 4.10.1 4.10.0 4.9.8 4.9.7 4.9.6 4.9.5 4.9.4 4.9.3 4.9.2 4.9.1 4.9.0 4.8.8 4.8.7 4.8.6 4.8.5 4.8.4 4.8.3 4.8.2 4.8.1 4.8.0 4.7.4 4.7.3 4.7.2 4.7.1 4.7.0 4.6.1 4.6.0 4.5.1 4.5.0 4.4.5 4.4.4 4.4.3 4.4.2 4.4.1 4.4.0 4.3.2 4.3.1 4.3.0 4.2.0 4.1.2 4.1.1 4.1.0 4.0.0 4.0.0-rc4 4.0.0-rc3 4.0.0-rc2 4.0.0-rc1 3.21.2 3.21.1 3.21.0 3.20.3 3.20.2 3.20.1 3.20.0 3.19.2 3.19.1 3.19.0 3.18.6 3.18.5 3.18.4 3.18.3 3.18.2 3.18.1 3.18.0 3.17.8 3.17.7 3.17.6 3.17.5 3.17.4 3.17.3 3.17.2 3.17.1 3.17.0 3.16.10 3.16.9 3.16.8 3.16.7 Nothing to show New pull request Latest commit 9375a9a Jun 16, 2016 dougwilson 4.14.0 Permalink Failed to load latest commit information. benchmarks use 8 threads for benchmarks Dec 22, 2013 examples examples: escape HTML in markdown example May 23, 2016 lib Encode URL in res.location/res.redirect if not already encoded Jun 13, 2016 test Encode URL in res.location/res.redirect if not already encoded Jun 14, 2016 .gitignore build: misc. updates to packaging Oct 17, 2014 .travis.yml build: support Node.js 6.x Jun 13, 2016 Collaborator-Guide.md docs: update location of expressjs.com repo May 12, 2016 Contributing.md docs: add base contributing guide Mar 1, 2016 History.md 4.14.0 Jun 16, 2016 LICENSE Merge tag '3.20.0' Feb 18, 2015 Readme.md docs: fix some links messed up from repository move commit Feb 10, 2016 Security.md build: move repository to expressjs Jan 21, 2016 appveyor.yml build: support Node.js 6.x Jun 14, 2016 index.js perf: enable strict mode Jun 18, 2015 package.json 4.14.0 Jun 16, 2016 Readme.md Fast, unopinionated, minimalist web framework for node. var express = require('express') var app = express()  app.get('/', function (req, res) {   res.send('Hello World') })  app.listen(3000) Installation $ npm install express Features Robust routing Focus on high performance Super-high test coverage HTTP helpers (redirection, caching, etc) View system supporting 14+ template engines Content negotiation Executable for generating applications quickly Docs & Community Website and Documentation - [website repo] #express on freenode IRC Github Organization for Official Middleware & Modules Visit the Wiki Google Group for discussion Gitter for support and discussion Русскоязычная документация PROTIP Be sure to read Migrating from 3.x to 4.x as well as New features in 4.x. Security Issues If you discover a security vulnerability in Express, please see Security Policies and Procedures. Quick Start The quickest way to get started with express is to utilize the executable express(1) to generate an application as shown below: Install the executable. The executable's major version will match Express's: $ npm install -g express-generator@4 Create the app: $ express /tmp/foo && cd /tmp/foo Install dependencies: $ npm install Start the server: $ npm start Philosophy The Express philosophy is to provide small, robust tooling for HTTP servers, making it a great solution for single page applications, web sites, hybrids, or public HTTP APIs. Express does not force you to use any specific ORM or template engine. With support for over 14 template engines via Consolidate.js, you can quickly craft your perfect framework. Examples To view the examples, clone the Express repo and install the dependencies: $ git clone git://github.com/expressjs/express.git --depth 1 $ cd express $ npm install Then run whichever example you want: $ node examples/content-negotiation Tests To run the test suite, first install the dependencies, then run npm test: $ npm install $ npm test People The original author of Express is TJ Holowaychuk The current lead maintainer is Douglas Christopher Wilson List of all contributors License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/expressjs/express"	"— inspired by"	"true"
"Web programming"	""	"https://travis-ci.org/nickel-org/nickel.rs"	"— inspired by"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— inspired by"	"true"
"Web programming"	"Ogeon/rustful"	"https://github.com/Ogeon/rustful"	"— a RESTful web framework for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"752"	"31"	"50"	"GitHub - Ogeon/rustful: A light HTTP framework for Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 752 Fork 50 Ogeon/rustful Code Issues 10 Pull requests 1 Pulse Graphs A light HTTP framework for Rust https://ogeon.github.io/docs/rustful/master/rustful/index.html 483 commits 7 branches 0 releases 10 contributors Rust 97.8% Shell 2.2% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags async auto content_type dep_update fix_appveyor fix_build_script master Nothing to show Nothing to show New pull request Latest commit 8509f7c Jun 24, 2016 Ogeon Relicense under dual MIT/Apache-2.0, closes #89 Permalink Failed to load latest commit information. build Use env::var instead of env! to get the value of $OUT_DIR in the buil… Jun 9, 2016 examples Change the default content type to text/html Jun 16, 2016 scripts Add scripts for automatic changelog and version number updating Nov 24, 2015 src Update hyper, url and anymap Jun 16, 2016 .gitignore Update configs for current Cargo and Travis Nov 14, 2014 .travis.yml Automatically gather features to be tested, from Cargo.toml Sep 15, 2015 CHANGELOG.md Version 0.9.0 Jun 16, 2016 Cargo.toml Relicense under dual MIT/Apache-2.0, closes #89 Jun 24, 2016 LICENSE-APACHE Relicense under dual MIT/Apache-2.0, closes #89 Jun 24, 2016 LICENSE-MIT Relicense under dual MIT/Apache-2.0, closes #89 Jun 24, 2016 README.md Relicense under dual MIT/Apache-2.0, closes #89 Jun 24, 2016 appveyor.yml Bump OpenSSL version (#106) May 20, 2016 version.sh Add scripts for automatic changelog and version number updating Nov 24, 2015 README.md Rustful A light HTTP framework for Rust, with REST-like features. The main purpose of Rustful is to create a simple, modular and non-intrusive foundation for HTTP applications. It has a mainly stateless structure, which naturally allows it to run both as one single server and as multiple instances in a cluster. Some of the features are: Generic response handlers. Just use a function or implement the Handler trait. Some handy macros reduces the risk for typos and makes life easier. Variables in routes, that can capture parts of the requested path. Pluggable request and response filtering. Online documentation. Getting Started Cargo.toml Entries Add the following lines to your Cargo.toml file: [dependencies] rustful = ""0.9"" Cargo Features Some parts of Rustful can be toggled using Cargo features: rustc_json_body - Parse the request body as JSON. Enabled by default. ssl - Enable SSL, and thereby HTTPS. Enabled by default. multipart - Enable parsing of multipart/form-data requests. Enabled by default. Using SSL Note that the ssl feature requires OpenSSL to be installed in one way or another. See https://github.com/sfackler/rust-openssl#building for more instructions. Write Your Server Here is a simple example of what a simple project could look like. Visit http://localhost:8080 or http://localhost:8080/Olivia (if your name is Olivia) to try it. //Include macros to be able to use `insert_routes!`. #[macro_use] extern crate rustful;  #[macro_use] extern crate log; extern crate env_logger;  use std::error::Error;  use rustful::{Server, Context, Response, TreeRouter};  fn say_hello(context: Context, response: Response) {     //Get the value of the path variable `:person`, from below.     let person = match context.variables.get(""person"") {         Some(name) => name,         None => ""stranger"".into()     };      //Use the name from the path variable to say hello.     response.send(format!(""Hello, {}!"", person)); }  fn main() {     env_logger::init().unwrap();      //Build and run the server.     let server_result = Server {         //Turn a port number into an IPV4 host address (0.0.0.0:8080 in this case).         host: 8080.into(),          //Create a TreeRouter and fill it with handlers.         handlers: insert_routes!{             TreeRouter::new() => {                 //Handle requests for root...                 Get: say_hello,                  //...and one level below.                 //`:person` is a path variable and it will be accessible in the handler.                 "":person"" => Get: say_hello             }         },          //Use default values for everything else.         ..Server::default()     }.run();      match server_result {         Ok(_server) => {},         Err(e) => error!(""could not start server: {}"", e.description())     } } Contributing Contributions are always welcome, even if it's a small typo fix (or maybe I should say ""especially typo fixes""). You can fork the project and open a pull request with your changes, or create an issue if you just want to report or request something. Are you not sure about how to implement your change? Is it still a work in progress? Don't worry. You can still open a pull request where we can discuss it and do it step by step. New features are as welcome as fixes, so pull requests and proposals with enhancements are very much appreciated, but please explain your feature and give a good motivation to why it should be included. It makes things much easier, both for reviewing the feature and for those who are not as familiar with how things work. You can always open an issue where we can discuss the feature and see if it should be included. Asking is better than assuming! Testing Rustful is tested on Linux, using Travis, and on Windows, using AppVeyor and a pull request will not be approved unless it passes these tests. It is therefore a good idea to run tests locally, before pushing your changes, so here is a small list of useful commands: cargo test - Basic unit, documentation and compile tests. cargo build --no-default-features - Check if the most minimal version of Rustful builds. cargo build --no-default-features --features ""feature1 feature2"" - Check if Rustful with only feature1 and feature2 enabled builds. cargo run --example example_name - check if the example example_name behaves as expected (see the example directory). Travis and AppVeyor will run the tests with the strict feature enabled. This turns warnings and missing documentation into compile errors, which may be harsh, but it's for the sake of the user. Everything should have a description and it's not nice to see warnings from your dependencies when you are compiling your project, right? It's therefore recommend that you run your own tests with the strict feature enabled before pushing, just to see if you missed something. Automatic Feature Testing User facing Cargo features are automatically gathered from Cargo.toml and tested one at the time, using scripts/test_features.sh. The lack of public and private features forces us to use a special annotation to differ between internal and user facing feature. Here is an simple example snippet of how the Cargo.toml is expected to look: #...  [features] default = [""feature_a"", ""feature_b""] feature_a = [""feature_c""] feature_b = []  #internal feature_c = []  [dependencies.optional_lib] #feature optional=true  #... Features that are supposed to be available to the user has to be declared before the #internal comment. This will tell the test script that these are supposed to be tested. Dependency libraries can also be features, so we have to annotate these as well. Each dependency that is supposed to work as a user facing feature will need a #feature comment somewhere within its declaration. This will only work with features that are declared using the above form, and not the feature_lib = { ... } form. License Licensed under either of Apache License, Version 2.0, (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0) MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT) at your option. Contribution Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Ogeon/rustful"	"— a RESTful web framework for Rust"	"true"
"Web programming"	""	"https://travis-ci.org/Ogeon/rustful"	"— a RESTful web framework for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a RESTful web framework for Rust"	"true"
"Web programming"	"Rustless"	"https://github.com/rustless/rustless"	"— a REST-like API micro-framework inspired by and"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"271"	"11"	"27"	"GitHub - rustless/rustless: REST-like API micro-framework for Rust. Works with Iron. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 271 Fork 27 rustless/rustless Code Issues 12 Pull requests 3 Pulse Graphs REST-like API micro-framework for Rust. Works with Iron. http://rustless.org 231 commits 6 branches 3 releases 8 contributors Rust 99.5% Other 0.5% Rust Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature/bodyparser feature/rustup feature/update flaub-master gh-pages master Nothing to show v0.7.2 v0.7.0 v0.6.0 Nothing to show New pull request Latest commit 72f2caf Apr 21, 2016 Stanislav Panferov docs(*): update README and exaple, remove dsl macro usage Permalink Failed to load latest commit information. .travis chore(travis): update .travis.yml to compile docs Feb 14, 2015 examples docs(*): update README and exaple, remove dsl macro usage Apr 21, 2016 src feat(*): Fix compilation errors with rustc 1.7.0 Apr 2, 2016 tests feat(*): bump rustc Oct 31, 2015 .gitignore feat(example): add new postgres example; extend prelude Feb 8, 2015 .travis.yml refactor(example): move example/postgres to a separate repo Mar 9, 2015 CONTRIBUTING.md chore(CONTRIBUTING): add `examples` to the examples Feb 14, 2015 Cargo.toml chore(ver): 0.7.3 Apr 4, 2016 LICENSE docs: add license Dec 6, 2014 Makefile docs: add makefile Dec 6, 2014 README.md docs(*): update README and exaple, remove dsl macro usage Apr 21, 2016 README.md Table of Contents What is Rustless? Usage warning Basic Usage Complex example Mounting Parameters validation and coercion Use JSON Schema Query strings API versioning Respond with custom HTTP Status Code Use parameters Redirecting Errors firing Errors handling Before and After callbacks Secure API example JSON responses Swagger 2.0 support Integration with PostgreSQL Integration with Deuterium ORM What is Rustless? Rustless is a REST-like API micro-framework for Rust. It's designed to provide a simple DSL to easily develop RESTful APIs on top of the Iron web framework. It has built-in support for common conventions, including multiple formats, subdomain/prefix restriction, content negotiation, versioning and much more. Rustless in a port of Grape library from Ruby world. Based on hyper - an HTTP library for Rust. Like Rust itself, Rustless is still in the early stages of development, so don't be surprised if APIs change and things break. If something's not working properly, file an issue or submit a pull request! # Cargo.toml [dependencies.rustless] git = ""https://github.com/rustless/rustless"" API docs See also Valico - Rust JSON validator and coercer. See Api docs. Queryst - Rust query string parser with nesting support. See Api docs. JsonWay - JSON building DSL and configurable serializers for Rust. See Api docs. Usage warning Rustless is based on Iron, which is based on Hyper, which is synchronous. Hyper has a lot of limitations right now, and can't handle many simultaneous connections, especially with keep-alive. So it is highly recommended to use light asynchronous web server such as Nginx as a reverse proxy server with Rustless. Basic Usage Below is a simple example showing some of the more common features of Rustless. #[macro_use] extern crate rustless; extern crate hyper; extern crate iron; extern crate rustc_serialize as serialize; extern crate valico;  use valico::json_dsl; use hyper::status::StatusCode; use rustless::{     Application, Api, Nesting, Versioning }; use serialize::json::ToJson;  fn main() {      let api = Api::build(|api| {         // Specify API version         api.version(""v1"", Versioning::AcceptHeader(""chat""));         api.prefix(""api"");          // Create API for chats         api.mount(Api::build(|chats_api| {              chats_api.after(|client, _params| {                 client.set_status(StatusCode::NotFound);                 Ok(())             });              // Add namespace             chats_api.namespace(""chats/:id"", |chat_ns| {                  // Valico settings for this namespace                 chat_ns.params(|params| {                     params.req_typed(""id"", json_dsl::u64())                 });                  // Create endpoint for POST /chats/:id/users/:user_id                 chat_ns.post(""users/:user_id"", |endpoint| {                      // Add description                     endpoint.desc(""Update user"");                      // Valico settings for endpoint params                     endpoint.params(|params| {                         params.req_typed(""user_id"", json_dsl::u64());                         params.req_typed(""name"", json_dsl::string())                     });                      endpoint.handle(|client, params| {                         client.json(&params.to_json())                     })                 });              });         }));     });      let app = Application::new(api);      iron::Iron::new(app).http(""0.0.0.0:4000"").unwrap();     println!(""On 4000"");      println!(""Rustless server started!""); } Complex example If you want to see how you can write come complex application using Rustless please see the example. In that example please note these aspects: Complex nested API with versioning. CRUD operations with rust-postgres. Swagger 2.0 intergration. JSON Schema validations. Error reporting. Serializers. File structure. Integration with docopt. Integration with deuterium-orm. Database migrations. Mounting In Rustless you can use three core entities to build your RESTful app: Api, Namespace and Endpoint. Api can mount Api, Namespace and Endpoint Namespace can mount Api, Namespace and Endpoint Api::build(|api| {      // Api inside Api example     api.mount(Api::build(|nested_api| {          // Endpoint definition         nested_api.get(""nested_info"", |endpoint| {             // endpoint.params(|params| {});             // endpoint.desc(""Some description"");              // Endpoint handler             endpoint.handle(|client, _params| {                 client.text(""Some usefull info"".to_string())             })         });      }))      // The namespace method has a number of aliases, including: group,     // resource, resources, and segment. Use whichever reads the best     // for your API.     api.namespace(""ns1"", |ns1| {         ns1.group(""ns2"", |ns2| {             ns2.resource(""ns3"", |ns3| {                 ns3.resources(""ns4"", |ns4| {                     ns4.segment(""ns5"", |ns5| {                         // ...                     );                 })             })         })     }) }) Parameters validation and coercion You can define validations and coercion options for your parameters using a DSL block inside Endpoint and Namespace definition. See Valico for more info about things you can do. api.get(""users/:user_id/messages/:message_id"", |endpoint| {     endpoint.params(|params| {         params.req_typed(""user_id"", Valico::u64());         params.req_typed(""message_id"", Valico::u64());     });      // ... }) Use JSON Schema Also you can use JSON Schema (IETF's draft v4) to validate your parameters. To use schemes in your application you need to make simple setup: use valico::json_schema; use rustless::batteries::schemes;  let scope = json_schema::Scope::new();  // ... You can insert some external schemes here ...  schemes::enable_schemes(&mut app, scope).unwrap(); See Valico for more info about JSON Scheme usage inside DSL blocks. Query strings Rustless is intergated with queryst to allow smart query-string parsing end decoding (even with nesting, like foo[0][a]=a&foo[0][b]=b&foo[1][a]=aa&foo[1][b]=bb). See queryst for more info. API versioning There are three strategies in which clients can reach your API's endpoints: Path AcceptHeader Param Path versioning strategy api.version(""v1"", Path); Using this versioning strategy, clients should pass the desired version in the URL. curl -H http://localhost:3000/v1/chats/  Header versioning strategy api.version(""v1"", AcceptHeader(""chat"")); Using this versioning strategy, clients should pass the desired version in the HTTP Accept head. curl -H Accept:application/vnd.chat.v1+json http://localhost:3000/chats  Accept version format is the same as Github (uses)[https://developer.github.com/v3/media/]. Param versioning strategy api.version(""v1"", Param(""ver"")); Using this versioning strategy, clients should pass the desired version as a request parameter in the URL query. curl -H http://localhost:9292/statuses/public_timeline?ver=v1  Respond with custom HTTP Status Code By default Rustless returns a 200 status code for GET-Requests and 201 for POST-Requests. You can use status and set_status to query and set the actual HTTP Status Code client.set_status(NotFound); Use parameters Request parameters are available through the params: JsonObject inside Endpoint handlers and all callbacks. This includes GET, POST and PUT parameters, along with any named parameters you specify in your route strings. The request: curl -d '{""text"": ""hello from echo""}' 'http://localhost:3000/echo' -H Content-Type:application/json -v  The Rustless endpoint: api.post("""", |endpoint| {     endpoint.handle(|client, params| {         client.json(params)     }) }); In the case of conflict between either of: route string parameters GET, POST and PUT parameters the contents of the request body on POST and PUT route string parameters will have precedence. Redirecting You can redirect to a new url temporarily (302) or permanently (301). client.redirect(""http://google.com""); client.redirect_permanent(""http://google.com""); Errors firing You can abort the execution of an API method by raising errors with error. Define your error like this: use rustless::errors::{Error, ErrorRefExt};  #[deriving(Show)] pub struct UnauthorizedError;  impl std::error::Error for UnauthorizedError {     fn description(&self) -> &str {         return ""UnauthorizedError"";     } } And then throw: client.error(UnauthorizedError); Errors handling By default Rustless wil respond all errors with status::InternalServerError. Rustless can be told to rescue specific errors and return them in the custom API format. api.error_formatter(|err, _media| {     match err.downcast::<UnauthorizedError>() {         Some(_) => {             return Some(Response::from_string(StatusCode::Unauthorized, ""Please provide correct `token` parameter"".to_string()))         },         None => None     } }); Before and After callbacks Blocks can be executed before or after every API call, using before, after, before_validation and after_validation. Before and after callbacks execute in the following order: before before_validation validations after_validation the API call after Steps 4, 5 and 6 only happen if validation succeeds. The block applies to every API call within and below the current nesting level. Secure API example Api::build(|api| {     api.prefix(""api"");     api.version(""v1"", Versioning::Path);      api.error_formatter(|err, _media| {         match err.downcast::<UnauthorizedError>() {             Some(_) => {                 return Some(Response::from_string(StatusCode::Unauthorized, ""Please provide correct `token` parameter"".to_string()))             },             None => None         }     });      api.namespace(""admin"", |admin_ns| {          admin_ns.params(|params| {             params.req_typed(""token"", Valico::string())         });          // Using after_validation callback to check token         admin_ns.after_validation(|&: _client, params| {              match params.get(""token"") {                 // We can unwrap() safely because token in validated already                 Some(token) => if token.as_string().unwrap().as_slice() == ""password1"" { return Ok(()) },                 None => ()             }              // Fire error from callback is token is wrong             return Err(Box::new(UnauthorizedError) as Box<Error>)          });          // This `/api/admin/server_status` endpoint is secure now         admin_ns.get(""server_status"", |endpoint| {             endpoint.handle(|client, _params| {                 {                     let cookies = client.request.cookies();                     let signed_cookies = cookies.signed();                      let user_cookie = Cookie::new(""session"".to_string(), ""verified"".to_string());                     signed_cookies.add(user_cookie);                 }                  client.text(""Everything is OK"".to_string())             })         });     }) }) JSON responses Rustless includes JsonWay library to offer both complex JSON building DSL and configurable serializers for your objects. See API docs for details. Also feel free to use any other serialization library you want. Swagger 2.0 Rustless has a basic implementation of Swagger 2.0 specification. It is not fully complete and in future we need to implement: JSON Schema support (when some appropriate JSON Schema library will appear); Security parts of the specification; But now you can already use Swagger 2.0: let mut app = rustless::Application::new(rustless::Api::build(|api| {     // ...      api.mount(swagger::create_api(""api-docs""));      // ... }))  swagger::enable(&mut app, swagger::Spec {     info: swagger::Info {         title: ""Example API"".to_string(),         description: Some(""Simple API to demonstration"".to_string()),         contact: Some(swagger::Contact {             name: ""Stanislav Panferov"".to_string(),             url: Some(""http://panferov.me"".to_string()),             ..std::default::Default::default()         }),         license: Some(swagger::License {             name: ""MIT"".to_string(),             url: ""http://opensource.org/licenses/MIT"".to_string()         }),         ..std::default::Default::default()     },     host: ""localhost:4000"".to_string(),     ..std::default::Default::default() }); After that you can use /api-docs path in Swagger UI to render your API structure. Integration with PostgreSQL We have an annotated example of such integration in postgres_example. Please try it and feel free to say your opinion. Integration with Deuterium ORM TODO: Example Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rustless/rustless"	"— a REST-like API micro-framework inspired by and"	"true"
"Web programming"	"Grape"	"https://github.com/ruby-grape/grape"	"— a REST-like API micro-framework inspired by and"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7427"	"252"	"892"	"GitHub - ruby-grape/grape: An opinionated framework for creating REST-like APIs in Ruby. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 252 Star 7,427 Fork 892 ruby-grape/grape Code Issues 115 Pull requests 40 Pulse Graphs An opinionated framework for creating REST-like APIs in Ruby. http://www.ruby-grape.org 1,771 commits 6 branches 36 releases 261 contributors Ruby 100.0% Ruby Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags api-meta endpoint-setup fix-incorrect-deprecations fix-router-bugs master v0.2.1-stable Nothing to show v0.16.2 v0.16.1 v0.16.0 v0.15.0 v0.14.0 v0.13.0 v0.12.0 v0.11.0 v0.10.1 v0.10.0 v0.9.0 v0.8.0 v0.7.0 v0.6.1 v0.6.0 v0.5.0 v0.4.1 v0.4.0 v0.3.2 v0.3.1 v0.3.0 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1.1 v0.2.1 v0.2.0 v0.1.5 v0.1.4 v0.1.3 v0.1.1 v0.1.0 v0.0.0.alpha.2 v0.0.0.alpha.1 Nothing to show New pull request Latest commit 5936ee6 Jun 30, 2016 dblock committed on GitHub Amended changelog related to #1398. [ci skip] Permalink Failed to load latest commit information. benchmark Add 'benchmark-ips' as development dependency. Nov 15, 2015 gemfiles Fix: RDoc documentation generation. Apr 26, 2016 lib adding new rescue_from option to rescue all and still use built in Gr… Jun 30, 2016 spec adding new rescue_from option to rescue all and still use built in Gr… Jun 30, 2016 .gitignore Mark spec pending when using Rack <= 1.6.0. Jan 2, 2015 .rspec Fix RBX build, see rspec/rspec-core#1863. Feb 4, 2015 .rubocop.yml Upgraded RuboCop to 0.35.1. Nov 23, 2015 .rubocop_todo.yml Fixed violations that had to do with using {...} for multi-line opera… Apr 28, 2016 .travis.yml Fix: Ruby 2.1 build. Apr 26, 2016 .yardopts Fixed yard documentation generation. Jan 6, 2013 Appraisals Run against Rbx 2.5.8 and ignore failures. Nov 23, 2015 CHANGELOG.md Amended changelog related to #1398. [ci skip] Jun 30, 2016 CONTRIBUTING.md Intridea -> ruby-grape. Aug 4, 2015 Gemfile Fix: RDoc documentation generation. Apr 26, 2016 Guardfile Upgraded RuboCop 0.31.0. Jun 4, 2015 LICENSE Update info in readme and license Mar 6, 2015 README.md adding new rescue_from option to rescue all and still use built in Gr… Jun 30, 2016 RELEASING.md Changes Intridea name to Grape. Aug 6, 2015 Rakefile Upgraded to RuboCop 0.39.0. Apr 26, 2016 UPGRADING.md Fix priority of rescue_from clauses (#1405) May 28, 2016 grape.gemspec Fix: Ruby 2.1 build. Apr 26, 2016 grape.png Document env['api.format'], closes #653. May 27, 2014 README.md Table of Contents What is Grape? Stable Release Project Resources Installation Basic Usage Mounting Rack ActiveRecord without Rails Alongside Sinatra (or other frameworks) Rails Modules Versioning Path Header Accept-Version Header Param Describing Methods Parameters Declared Include Missing Parameter Validation and Coercion Supported Parameter Types Custom Types and Coercions Multipart File Parameters First-Class JSON Types Multiple Allowed Types Validation of Nested Parameters Dependent Parameters Built-in Validators Namespace Validation and Coercion Custom Validators Validation Errors I18n Custom Validation Messages Headers Routes Helpers Path Helpers Parameter Documentation Cookies HTTP Status Code Redirecting Recognizing Path Allowed Methods Raising Exceptions Default Error HTTP Status Code Handling 404 Exception Handling Rails 3.x Logging API Formats JSONP CORS Content-type API Data Formats RESTful Model Representations Grape Entities Hypermedia and Roar Rabl Active Model Serializers Sending Raw or No Data Authentication Describing and Inspecting an API Current Route and Endpoint Before and After Anchoring Using Custom Middleware Grape Middleware Rails Middleware Remote IP Writing Tests Writing Tests with Rack Writing Tests with Rails Stubbing Helpers Reloading API Changes in Development Reloading in Rack Applications Reloading in Rails Applications Performance Monitoring Active Support Instrumentation Monitoring Products Contributing to Grape License Copyright What is Grape? Grape is a REST-like API framework for Ruby. It's designed to run on Rack or complement existing web application frameworks such as Rails and Sinatra by providing a simple DSL to easily develop RESTful APIs. It has built-in support for common conventions, including multiple formats, subdomain/prefix restriction, content negotiation, versioning and much more. Stable Release You're reading the documentation for the next release of Grape, which should be 0.16.3. Please read UPGRADING when upgrading from a previous version. The current stable release is 0.16.2. Project Resources Grape Website Need help? Try Grape Google Group or Gitter Follow us on Twitter Installation Grape is available as a gem, to install it just install the gem: gem install grape  If you're using Bundler, add the gem to Gemfile. gem 'grape'  Run bundle install. Basic Usage Grape APIs are Rack applications that are created by subclassing Grape::API. Below is a simple example showing some of the more common features of Grape in the context of recreating parts of the Twitter API. module Twitter   class API < Grape::API     version 'v1', using: :header, vendor: 'twitter'     format :json     prefix :api      helpers do       def current_user         @current_user ||= User.authorize!(env)       end        def authenticate!         error!('401 Unauthorized', 401) unless current_user       end     end      resource :statuses do       desc 'Return a public timeline.'       get :public_timeline do         Status.limit(20)       end        desc 'Return a personal timeline.'       get :home_timeline do         authenticate!         current_user.statuses.limit(20)       end        desc 'Return a status.'       params do         requires :id, type: Integer, desc: 'Status id.'       end       route_param :id do         get do           Status.find(params[:id])         end       end        desc 'Create a status.'       params do         requires :status, type: String, desc: 'Your status.'       end       post do         authenticate!         Status.create!({           user: current_user,           text: params[:status]         })       end        desc 'Update a status.'       params do         requires :id, type: String, desc: 'Status ID.'         requires :status, type: String, desc: 'Your status.'       end       put ':id' do         authenticate!         current_user.statuses.find(params[:id]).update({           user: current_user,           text: params[:status]         })       end        desc 'Delete a status.'       params do         requires :id, type: String, desc: 'Status ID.'       end       delete ':id' do         authenticate!         current_user.statuses.find(params[:id]).destroy       end     end   end end Mounting Rack The above sample creates a Rack application that can be run from a rackup config.ru file with rackup: run Twitter::API And would respond to the following routes: GET /api/statuses/public_timeline GET /api/statuses/home_timeline GET /api/statuses/:id POST /api/statuses PUT /api/statuses/:id DELETE /api/statuses/:id  Grape will also automatically respond to HEAD and OPTIONS for all GET, and just OPTIONS for all other routes. ActiveRecord without Rails If you want to use ActiveRecord within Grape, you will need to make sure that ActiveRecord's connection pool is handled correctly. The easiest way to achieve that is by using ActiveRecord's ConnectionManagement middleware in your config.ru before mounting Grape, e.g.: use ActiveRecord::ConnectionAdapters::ConnectionManagement  run Twitter::API Alongside Sinatra (or other frameworks) If you wish to mount Grape alongside another Rack framework such as Sinatra, you can do so easily using Rack::Cascade: # Example config.ru  require 'sinatra' require 'grape'  class API < Grape::API   get :hello do     { hello: 'world' }   end end  class Web < Sinatra::Base   get '/' do     'Hello world.'   end end  use Rack::Session::Cookie run Rack::Cascade.new [API, Web] Rails Place API files into app/api. Rails expects a subdirectory that matches the name of the Ruby module and a file name that matches the name of the class. In our example, the file name location and directory for Twitter::API should be app/api/twitter/api.rb. Modify application.rb: config.paths.add File.join('app', 'api'), glob: File.join('**', '*.rb') config.autoload_paths += Dir[Rails.root.join('app', 'api', '*')] Modify config/routes: mount Twitter::API => '/' Additionally, if the version of your Rails is 4.0+ and the application uses the default model layer of ActiveRecord, you will want to use the hashie-forbidden_attributes gem. This gem disables the security feature of strong_params at the model layer, allowing you the use of Grape's own params validation instead. # Gemfile gem 'hashie-forbidden_attributes' See below for additional code that enables reloading of API changes in development. Modules You can mount multiple API implementations inside another one. These don't have to be different versions, but may be components of the same API. class Twitter::API < Grape::API   mount Twitter::APIv1   mount Twitter::APIv2 end You can also mount on a path, which is similar to using prefix inside the mounted API itself. class Twitter::API < Grape::API   mount Twitter::APIv1 => '/v1' end Versioning There are four strategies in which clients can reach your API's endpoints: :path, :header, :accept_version_header and :param. The default strategy is :path. Path version 'v1', using: :path Using this versioning strategy, clients should pass the desired version in the URL. curl http://localhost:9292/v1/statuses/public_timeline  Header version 'v1', using: :header, vendor: 'twitter' Currently, Grape only supports versioned media types in the following format: vnd.vendor-and-or-resource-v1234+format  Basically all tokens between the final - and the + will be interpreted as the version. Using this versioning strategy, clients should pass the desired version in the HTTP Accept head. curl -H Accept:application/vnd.twitter-v1+json http://localhost:9292/statuses/public_timeline  By default, the first matching version is used when no Accept header is supplied. This behavior is similar to routing in Rails. To circumvent this default behavior, one could use the :strict option. When this option is set to true, a 406 Not Acceptable error is returned when no correct Accept header is supplied. When an invalid Accept header is supplied, a 406 Not Acceptable error is returned if the :cascade option is set to false. Otherwise a 404 Not Found error is returned by Rack if no other route matches. Accept-Version Header version 'v1', using: :accept_version_header Using this versioning strategy, clients should pass the desired version in the HTTP Accept-Version header. curl -H ""Accept-Version:v1"" http://localhost:9292/statuses/public_timeline  By default, the first matching version is used when no Accept-Version header is supplied. This behavior is similar to routing in Rails. To circumvent this default behavior, one could use the :strict option. When this option is set to true, a 406 Not Acceptable error is returned when no correct Accept header is supplied and the :cascade option is set to false. Otherwise a 404 Not Found error is returned by Rack if no other route matches. Param version 'v1', using: :param Using this versioning strategy, clients should pass the desired version as a request parameter, either in the URL query string or in the request body. curl http://localhost:9292/statuses/public_timeline?apiver=v1  The default name for the query parameter is 'apiver' but can be specified using the :parameter option. version 'v1', using: :param, parameter: 'v' curl http://localhost:9292/statuses/public_timeline?v=v1  Describing Methods You can add a description to API methods and namespaces. desc 'Returns your public timeline.' do   detail 'more details'   params  API::Entities::Status.documentation   success API::Entities::Entity   failure [[401, 'Unauthorized', 'Entities::Error']]   named 'My named route'   headers XAuthToken: {             description: 'Valdates your identity',             required: true           },           XOptionalHeader: {             description: 'Not really needed',             required: false           }  end get :public_timeline do   Status.limit(20) end detail: A more enhanced description params: Define parameters directly from an Entity success: (former entity) The Entity to be used to present by default this route failure: (former http_codes) A definition of the used failure HTTP Codes and Entities named: A helper to give a route a name and find it with this name in the documentation Hash headers: A definition of the used Headers Parameters Request parameters are available through the params hash object. This includes GET, POST and PUT parameters, along with any named parameters you specify in your route strings. get :public_timeline do   Status.order(params[:sort_by]) end Parameters are automatically populated from the request body on POST and PUT for form input, JSON and XML content-types. The request: curl -d '{""text"": ""140 characters""}' 'http://localhost:9292/statuses' -H Content-Type:application/json -v  The Grape endpoint: post '/statuses' do   Status.create!(text: params[:text]) end Multipart POSTs and PUTs are supported as well. The request: curl --form image_file='@image.jpg;type=image/jpg' http://localhost:9292/upload  The Grape endpoint: post 'upload' do   # file in params[:image_file] end In the case of conflict between either of: route string parameters GET, POST and PUT parameters the contents of the request body on POST and PUT route string parameters will have precedence. Declared Grape allows you to access only the parameters that have been declared by your params block. It filters out the params that have been passed, but are not allowed. Consider the following API endpoint: format :json  post 'users/signup' do   { 'declared_params' => declared(params) } end If we do not specify any params, declared will return an empty Hashie::Mash instance. Request curl -X POST -H ""Content-Type: application/json"" localhost:9292/users/signup -d '{""user"": {""first_name"":""first name"", ""last_name"": ""last name""}}' Response {   ""declared_params"": {} }  Once we add parameters requirements, grape will start returning only the declared params. format :json  params do   requires :user, type: Hash do     requires :first_name, type: String     requires :last_name, type: String   end end  post 'users/signup' do   { 'declared_params' => declared(params) } end Request curl -X POST -H ""Content-Type: application/json"" localhost:9292/users/signup -d '{""user"": {""first_name"":""first name"", ""last_name"": ""last name"", ""random"": ""never shown""}}' Response {   ""declared_params"": {     ""user"": {       ""first_name"": ""first name"",       ""last_name"": ""last name""     }   } } The returned hash is a Hashie::Mash instance, allowing you to access parameters via dot notation:   declared(params).user == declared(params)['user'] The #declared method is not available to before filters, as those are evaluated prior to parameter coercion. Include parent namespaces By default declared(params) includes parameters that were defined in all parent namespaces. If you want to return only parameters from your current namespace, you can set include_parent_namespaces option to false. format :json  namespace :parent do   params do     requires :parent_name, type: String   end    namespace ':parent_name' do     params do       requires :child_name, type: String     end     get ':child_name' do       {         'without_parent_namespaces' => declared(params, include_parent_namespaces: false),         'with_parent_namespaces' => declared(params, include_parent_namespaces: true),       }     end   end end Request curl -X GET -H ""Content-Type: application/json"" localhost:9292/parent/foo/bar Response {   ""without_parent_namespaces"": {     ""child_name"": ""bar""   },   ""with_parent_namespaces"": {     ""parent_name"": ""foo"",     ""child_name"": ""bar""   }, } Include missing By default declared(params) includes parameters that have nil values. If you want to return only the parameters that are not nil, you can use the include_missing option. By default, include_missing is set to true. Consider the following API: format :json  params do   requires :first_name, type: String   optional :last_name, type: String end  post 'users/signup' do   { 'declared_params' => declared(params, include_missing: false) } end Request curl -X POST -H ""Content-Type: application/json"" localhost:9292/users/signup -d '{""user"": {""first_name"":""first name"", ""random"": ""never shown""}}' Response with include_missing:false {   ""declared_params"": {     ""user"": {       ""first_name"": ""first name""     }   } } Response with include_missing:true {   ""declared_params"": {     ""first_name"": ""first name"",     ""last_name"": null   } } It also works on nested hashes: format :json  params do   requires :user, type: Hash do     requires :first_name, type: String     optional :last_name, type: String     requires :address, type: Hash do       requires :city, type: String       optional :region, type: String     end   end end  post 'users/signup' do   { 'declared_params' => declared(params, include_missing: false) } end Request curl -X POST -H ""Content-Type: application/json"" localhost:9292/users/signup -d '{""user"": {""first_name"":""first name"", ""random"": ""never shown"", ""address"": { ""city"": ""SF""}}}' Response with include_missing:false {   ""declared_params"": {     ""user"": {       ""first_name"": ""first name"",       ""address"": {         ""city"": ""SF""       }     }   } } Response with include_missing:true {   ""declared_params"": {     ""user"": {       ""first_name"": ""first name"",       ""last_name"": null,       ""address"": {         ""city"": ""Zurich"",         ""region"": null       }     }   } } Note that an attribute with a nil value is not considered missing and will also be returned when include_missing is set to false: Request curl -X POST -H ""Content-Type: application/json"" localhost:9292/users/signup -d '{""user"": {""first_name"":""first name"", ""last_name"": null, ""address"": { ""city"": ""SF""}}}' Response with include_missing:false {   ""declared_params"": {     ""user"": {       ""first_name"": ""first name"",       ""last_name"": null,       ""address"": { ""city"": ""SF""}     }   } } Parameter Validation and Coercion You can define validations and coercion options for your parameters using a params block. params do   requires :id, type: Integer   optional :text, type: String, regexp: /\A[a-z]+\z/   group :media do     requires :url   end   optional :audio do     requires :format, type: Symbol, values: [:mp3, :wav, :aac, :ogg], default: :mp3   end   mutually_exclusive :media, :audio end put ':id' do   # params[:id] is an Integer end When a type is specified an implicit validation is done after the coercion to ensure the output type is the one declared. Optional parameters can have a default value. params do   optional :color, type: String, default: 'blue'   optional :random_number, type: Integer, default: -> { Random.rand(1..100) }   optional :non_random_number, type: Integer, default:  Random.rand(1..100) end Note that default values will be passed through to any validation options specified. The following example will always fail if :color is not explicitly provided. params do   optional :color, type: String, default: 'blue', values: ['red', 'green'] end The correct implementation is to ensure the default value passes all validations. params do   optional :color, type: String, default: 'blue', values: ['blue', 'red', 'green'] end Supported Parameter Types The following are all valid types, supported out of the box by Grape: Integer Float BigDecimal Numeric Date DateTime Time Boolean String Symbol Rack::Multipart::UploadedFile (alias File) JSON Custom Types and Coercions Aside from the default set of supported types listed above, any class can be used as a type so long as an explicit coercion method is supplied. If the type implements a class-level parse method, Grape will use it automatically. This method must take one string argument and return an instance of the correct type, or raise an exception to indicate the value was invalid. E.g., class Color   attr_reader :value   def initialize(color)     @value = color   end    def self.parse(value)     fail 'Invalid color' unless %w(blue red green).include?(value)     new(value)   end end  # ...  params do   requires :color, type: Color, default: Color.new('blue') end  get '/stuff' do   # params[:color] is already a Color.   params[:color].value end Alternatively, a custom coercion method may be supplied for any type of parameter using coerce_with. Any class or object may be given that implements a parse or call method, in that order of precedence. The method must accept a single string parameter, and the return value must match the given type. params do   requires :passwd, type: String, coerce_with: Base64.method(:decode)   requires :loud_color, type: Color, coerce_with: ->(c) { Color.parse(c.downcase) }    requires :obj, type: Hash, coerce_with: JSON do     requires :words, type: Array[String], coerce_with: ->(val) { val.split(/\s+/) }     optional :time, type: Time, coerce_with: Chronic   end end Example of use of coerce_with with a lambda (a class with a parse method could also have been used) It will parse a string and return an Array of Integers, matching the Array[Integer] type. params do   requires :values, type: Array[Integer], coerce_with: ->(val) { val.split(/\s+/).map(&:to_i) } end Multipart File Parameters Grape makes use of Rack::Request's built-in support for multipart file parameters. Such parameters can be declared with type: File: params do   requires :avatar, type: File end post '/' do   # Parameter will be wrapped using Hashie:   params.avatar.filename # => 'avatar.png'   params.avatar.type     # => 'image/png'   params.avatar.tempfile # => #<File> end First-Class JSON Types Grape supports complex parameters given as JSON-formatted strings using the special type: JSON declaration. JSON objects and arrays of objects are accepted equally, with nested validation rules applied to all objects in either case: params do   requires :json, type: JSON do     requires :int, type: Integer, values: [1, 2, 3]   end end get '/' do   params[:json].inspect end  # ...  client.get('/', json: '{""int"":1}') # => ""{:int=>1}"" client.get('/', json: '[{""int"":""1""}]') # => ""[{:int=>1}]""  client.get('/', json: '{""int"":4}') # => HTTP 400 client.get('/', json: '[{""int"":4}]') # => HTTP 400 Additionally type: Array[JSON] may be used, which explicitly marks the parameter as an array of objects. If a single object is supplied it will be wrapped. params do   requires :json, type: Array[JSON] do     requires :int, type: Integer   end end get '/' do   params[:json].each { |obj| ... } # always works end For stricter control over the type of JSON structure which may be supplied, use type: Array, coerce_with: JSON or type: Hash, coerce_with: JSON. Multiple Allowed Types Variant-type parameters can be declared using the types option rather than type: params do   requires :status_code, types: [Integer, String, Array[Integer, String]] end get '/' do   params[:status_code].inspect end  # ...  client.get('/', status_code: 'OK_GOOD') # => ""OK_GOOD"" client.get('/', status_code: 300) # => 300 client.get('/', status_code: %w(404 NOT FOUND)) # => [404, ""NOT"", ""FOUND""] As a special case, variant-member-type collections may also be declared, by passing a Set or Array with more than one member to type: params do   requires :status_codes, type: Array[Integer,String] end get '/' do   params[:status_codes].inspect end  # ...  client.get('/', status_codes: %w(1 two)) # => [1, ""two""] Validation of Nested Parameters Parameters can be nested using group or by calling requires or optional with a block. In the above example, this means params[:media][:url] is required along with params[:id], and params[:audio][:format] is required only if params[:audio] is present. With a block, group, requires and optional accept an additional option type which can be either Array or Hash, and defaults to Array. Depending on the value, the nested parameters will be treated either as values of a hash or as values of hashes in an array. params do   optional :preferences, type: Array do     requires :key     requires :value   end    requires :name, type: Hash do     requires :first_name     requires :last_name   end end Dependent Parameters Suppose some of your parameters are only relevant if another parameter is given; Grape allows you to express this relationship through the given method in your parameters block, like so: params do   optional :shelf_id, type: Integer   given :shelf_id do     requires :bin_id, type: Integer   end end Built-in Validators allow_blank Parameters can be defined as allow_blank, ensuring that they contain a value. By default, requires only validates that a parameter was sent in the request, regardless its value. With allow_blank: false, empty values or whitespace only values are invalid. allow_blank can be combined with both requires and optional. If the parameter is required, it has to contain a value. If it's optional, it's possible to not send it in the request, but if it's being sent, it has to have some value, and not an empty string/only whitespaces. params do   requires :username, allow_blank: false   optional :first_name, allow_blank: false end values Parameters can be restricted to a specific set of values with the :values option. Default values are eagerly evaluated. Above :non_random_number will evaluate to the same number for each call to the endpoint of this params block. To have the default evaluate lazily with each request use a lambda, like :random_number above. params do   requires :status, type: Symbol, values: [:not_started, :processing, :done]   optional :numbers, type: Array[Integer], default: 1, values: [1, 2, 3, 5, 8] end Supplying a range to the :values option ensures that the parameter is (or parameters are) included in that range (using Range#include?). params do   requires :latitude, type: Float, values: -90.0..+90.0   requires :longitude, type: Float, values: -180.0..+180.0   optional :letters, type: Array[String], values: 'a'..'z' end Note that both range endpoints have to be a #kind_of? your :type option (if you don't supplied the :type option, it will be guessed to be equal to the class of the range's first endpoint). So the following is invalid: params do   requires :invalid1, type: Float, values: 0..10 # 0.kind_of?(Float) => false   optional :invalid2, values: 0..10.0 # 10.0.kind_of?(0.class) => false end The :values option can also be supplied with a Proc, evaluated lazily with each request. For example, given a status model you may want to restrict by hashtags that you have previously defined in the HashTag model. params do   requires :hashtag, type: String, values: -> { Hashtag.all.map(&:tag) } end regexp Parameters can be restricted to match a specific regular expression with the :regexp option. If the value does not match the regular expression an error will be returned. Note that this is true for both requires and optional parameters. params do   requires :email, regexp: /.+@.+/ end The validator will pass if the parameter was sent without value. To ensure that the parameter contains a value, use allow_blank: false. params do   requires :email, allow_blank: false, regexp: /.+@.+/ end mutually_exclusive Parameters can be defined as mutually_exclusive, ensuring that they aren't present at the same time in a request. params do   optional :beer   optional :wine   mutually_exclusive :beer, :wine end Multiple sets can be defined: params do   optional :beer   optional :wine   mutually_exclusive :beer, :wine   optional :scotch   optional :aquavit   mutually_exclusive :scotch, :aquavit end Warning: Never define mutually exclusive sets with any required params. Two mutually exclusive required params will mean params are never valid, thus making the endpoint useless. One required param mutually exclusive with an optional param will mean the latter is never valid. exactly_one_of Parameters can be defined as 'exactly_one_of', ensuring that exactly one parameter gets selected. params do   optional :beer   optional :wine   exactly_one_of :beer, :wine end at_least_one_of Parameters can be defined as 'at_least_one_of', ensuring that at least one parameter gets selected. params do   optional :beer   optional :wine   optional :juice   at_least_one_of :beer, :wine, :juice end all_or_none_of Parameters can be defined as 'all_or_none_of', ensuring that all or none of parameters gets selected. params do   optional :beer   optional :wine   optional :juice   all_or_none_of :beer, :wine, :juice end Nested mutually_exclusive, exactly_one_of, at_least_one_of, all_or_none_of All of these methods can be used at any nested level. params do   requires :food do     optional :meat     optional :fish     optional :rice     at_least_one_of :meat, :fish, :rice   end   group :drink do     optional :beer     optional :wine     optional :juice     exactly_one_of :beer, :wine, :juice   end   optional :dessert do     optional :cake     optional :icecream     mutually_exclusive :cake, :icecream   end   optional :recipe do     optional :oil     optional :meat     all_or_none_of :oil, :meat   end end Namespace Validation and Coercion Namespaces allow parameter definitions and apply to every method within the namespace. namespace :statuses do   params do     requires :user_id, type: Integer, desc: 'A user ID.'   end   namespace ':user_id' do     desc ""Retrieve a user's status.""     params do       requires :status_id, type: Integer, desc: 'A status ID.'     end     get ':status_id' do       User.find(params[:user_id]).statuses.find(params[:status_id])     end   end end The namespace method has a number of aliases, including: group, resource, resources, and segment. Use whichever reads the best for your API. You can conveniently define a route parameter as a namespace using route_param. namespace :statuses do   route_param :id do     desc 'Returns all replies for a status.'     get 'replies' do       Status.find(params[:id]).replies     end     desc 'Returns a status.'     get do       Status.find(params[:id])     end   end end You can also define a route parameter type by passing to route_param's options. namespace :arithmetic do   route_param :n, type: Integer do     desc 'Returns in power'     get 'power' do       params[:n] ** params[:n]     end   end end Custom Validators class AlphaNumeric < Grape::Validations::Base   def validate_param!(attr_name, params)     unless params[attr_name] =~ /\A[[:alnum:]]+\z/       fail Grape::Exceptions::Validation, params: [@scope.full_name(attr_name)], message: 'must consist of alpha-numeric characters'     end   end end params do   requires :text, alpha_numeric: true end You can also create custom classes that take parameters. class Length < Grape::Validations::Base   def validate_param!(attr_name, params)     unless params[attr_name].length <= @option       fail Grape::Exceptions::Validation, params: [@scope.full_name(attr_name)], message: ""must be at the most #{@option} characters long""     end   end end params do   requires :text, length: 140 end You can also create custom validation that use request to validate the attribute. For example if you want to have parameters that are available to only admins, you can do the following. class Admin < Grape::Validations::Base   def validate(request)     # return if the param we are checking was not in request     # @attrs is a list containing the attribute we are currently validating     # in our sample case this method once will get called with     # @attrs being [:admin_field] and once with @attrs being [:admin_false_field]     return unless request.params.key? @attrs.first     # check if admin flag is set to true     return unless @option     # check if user is admin or not     # as an example get a token from request and check if it's admin or not     fail Grape::Exceptions::Validation, params: @attrs, message: 'Can not set admin-only field.' unless request.headers['X-Access-Token'] == 'admin'   end end And use it in your endpoint definition as: params do   optional :admin_field, type: String, admin: true   optional :non_admin_field, type: String   optional :admin_false_field, type: String, admin: false end Validation Errors Validation and coercion errors are collected and an exception of type Grape::Exceptions::ValidationErrors is raised. If the exception goes uncaught it will respond with a status of 400 and an error message. The validation errors are grouped by parameter name and can be accessed via Grape::Exceptions::ValidationErrors#errors. The default response from a Grape::Exceptions::ValidationErrors is a humanly readable string, such as ""beer, wine are mutually exclusive"", in the following example. params do   optional :beer   optional :wine   optional :juice   exactly_one_of :beer, :wine, :juice end You can rescue a Grape::Exceptions::ValidationErrors and respond with a custom response or turn the response into well-formatted JSON for a JSON API that separates individual parameters and the corresponding error messages. The following rescue_from example produces [{""params"":[""beer"",""wine""],""messages"":[""are mutually exclusive""]}]. format :json subject.rescue_from Grape::Exceptions::ValidationErrors do |e|   error! e, 400 end Grape::Exceptions::ValidationErrors#full_messages returns the validation messages as an array. Grape::Exceptions::ValidationErrors#message joins the messages to one string. For responding with an array of validation messages, you can use Grape::Exceptions::ValidationErrors#full_messages. format :json subject.rescue_from Grape::Exceptions::ValidationErrors do |e|   error!({ messages: e.full_messages }, 400) end I18n Grape supports I18n for parameter-related error messages, but will fallback to English if translations for the default locale have not been provided. See en.yml for message keys. Custom Validation messages Grape supports custom validation messages for parameter-related and coerce-related error messages. presence, allow_blank, values, regexp params do   requires :name, values: { value: 1..10, message: 'not in range from 1 to 10' }, allow_blank: { value: false, message: 'cannot be blank' }, regexp: { value: /^[a-z]+$/, message: 'format is invalid' }, message: 'is required' end all_or_none_of params do   optional :beer   optional :wine   optional :juice   all_or_none_of :beer, :wine, :juice, message: ""all params are required or none is required"" end mutually_exclusive params do   optional :beer   optional :wine   optional :juice   mutually_exclusive :beer, :wine, :juice, message: ""are mutually exclusive cannot pass both params"" end exactly_one_of params do   optional :beer   optional :wine   optional :juice   exactly_one_of :beer, :wine, :juice, message: {exactly_one: ""are missing, exactly one parameter is required"", mutual_exclusion: ""are mutually exclusive, exactly one parameter is required""} end at_least_one_of params do   optional :beer   optional :wine   optional :juice   at_least_one_of :beer, :wine, :juice, message: ""are missing, please specify at least one param"" end Coerce params do   requires :int, type: {value: Integer, message: ""type cast is invalid"" } end With Lambdas params do   requires :name, values: { value: -> { (1..10).to_a }, message: 'not in range from 1 to 10' } end Pass symbols for i18n translations You can pass a symbol if you want i18n translations for your custom validation messages. params do   requires :name, message: :name_required end # en.yml  en:   grape:     errors:       format: ! '%{attributes} %{message}'       messages:         name_required: 'must be present' Overriding attribute names You can also override attribute names. # en.yml  en:   grape:     errors:       format: ! '%{attributes} %{message}'       messages:         name_required: 'must be present'       attributes:         name: 'Oops! Name' Will produce 'Oops! Name must be present' With Default You cannot set a custom message option for Default as it requires interpolation %{option1}: %{value1} is incompatible with %{option2}: %{value2}. You can change the default error message for Default by changing the incompatible_option_values message key inside en.yml params do   requires :name, values: { value: -> { (1..10).to_a }, message: 'not in range from 1 to 10' }, default: 5 end Headers Request headers are available through the headers helper or from env in their original form. get do   error!('Unauthorized', 401) unless headers['Secret-Password'] == 'swordfish' end get do   error!('Unauthorized', 401) unless env['HTTP_SECRET_PASSWORD'] == 'swordfish' end You can set a response header with header inside an API. header 'X-Robots-Tag', 'noindex' When raising error!, pass additional headers as arguments. error! 'Unauthorized', 401, 'X-Error-Detail' => 'Invalid token.' Routes Optionally, you can define requirements for your named route parameters using regular expressions on namespace or endpoint. The route will match only if all requirements are met. get ':id', requirements: { id: /[0-9]*/ } do   Status.find(params[:id]) end  namespace :outer, requirements: { id: /[0-9]*/ } do   get :id do   end    get ':id/edit' do   end end Helpers You can define helper methods that your endpoints can use with the helpers macro by either giving a block or a module. module StatusHelpers   def user_info(user)     ""#{user} has statused #{user.statuses} status(s)""   end end  class API < Grape::API   # define helpers with a block   helpers do     def current_user       User.find(params[:user_id])     end   end    # or mix in a module   helpers StatusHelpers    get 'info' do     # helpers available in your endpoint and filters     user_info(current_user)   end end You can define reusable params using helpers. class API < Grape::API   helpers do     params :pagination do       optional :page, type: Integer       optional :per_page, type: Integer     end   end    desc 'Get collection'   params do     use :pagination # aliases: includes, use_scope   end   get do     Collection.page(params[:page]).per(params[:per_page])   end end You can also define reusable params using shared helpers. module SharedParams   extend Grape::API::Helpers    params :period do     optional :start_date     optional :end_date   end    params :pagination do     optional :page, type: Integer     optional :per_page, type: Integer   end end  class API < Grape::API   helpers SharedParams    desc 'Get collection.'   params do     use :period, :pagination   end    get do     Collection       .from(params[:start_date])       .to(params[:end_date])       .page(params[:page])       .per(params[:per_page])   end end Helpers support blocks that can help set default values. The following API can return a collection sorted by id or created_at in asc or desc order. module SharedParams   extend Grape::API::Helpers    params :order do |options|     optional :order_by, type:Symbol, values:options[:order_by], default:options[:default_order_by]     optional :order, type:Symbol, values:%i(asc desc), default:options[:default_order]   end end  class API < Grape::API   helpers SharedParams    desc 'Get a sorted collection.'   params do     use :order, order_by:%i(id created_at), default_order_by: :created_at, default_order: :asc   end    get do     Collection.send(params[:order], params[:order_by])   end end Path Helpers If you need methods for generating paths inside your endpoints, please see the grape-route-helpers gem. Parameter Documentation You can attach additional documentation to params using a documentation hash. params do   optional :first_name, type: String, documentation: { example: 'Jim' }   requires :last_name, type: String, documentation: { example: 'Smith' } end Cookies You can set, get and delete your cookies very simply using cookies method. class API < Grape::API   get 'status_count' do     cookies[:status_count] ||= 0     cookies[:status_count] += 1     { status_count: cookies[:status_count] }   end    delete 'status_count' do     { status_count: cookies.delete(:status_count) }   end end Use a hash-based syntax to set more than one value. cookies[:status_count] = {   value: 0,   expires: Time.tomorrow,   domain: '.twitter.com',   path: '/' }  cookies[:status_count][:value] +=1 Delete a cookie with delete. cookies.delete :status_count Specify an optional path. cookies.delete :status_count, path: '/' HTTP Status Code By default Grape returns a 200 status code for GET-Requests and 201 for POST-Requests. You can use status to query and set the actual HTTP Status Code post do   status 202    if status == 200      # do some thing   end end You can also use one of status codes symbols that are provided by Rack utils post do   status :no_content end Redirecting You can redirect to a new url temporarily (302) or permanently (301). redirect '/statuses' redirect '/statuses', permanent: true Recognizing Path You can recognize the endpoint matched with given path. This API returns an instance of Grape::Endpoint. class API < Grape::API   get '/statuses' do   end end  API.recognize_path '/statuses' Allowed Methods When you add a GET route for a resource, a route for the HEAD method will also be added automatically. You can disable this behavior with do_not_route_head!. class API < Grape::API   do_not_route_head!    get '/example' do     # only responds to GET   end end When you add a route for a resource, a route for the OPTIONS method will also be added. The response to an OPTIONS request will include an ""Allow"" header listing the supported methods. class API < Grape::API   get '/rt_count' do     { rt_count: current_user.rt_count }   end    params do     requires :value, type: Integer, desc: 'Value to add to the rt count.'   end   put '/rt_count' do     current_user.rt_count += params[:value].to_i     { rt_count: current_user.rt_count }   end end curl -v -X OPTIONS http://localhost:3000/rt_count  > OPTIONS /rt_count HTTP/1.1 > < HTTP/1.1 204 No Content < Allow: OPTIONS, GET, PUT You can disable this behavior with do_not_route_options!. If a request for a resource is made with an unsupported HTTP method, an HTTP 405 (Method Not Allowed) response will be returned. curl -X DELETE -v http://localhost:3000/rt_count/  > DELETE /rt_count/ HTTP/1.1 > Host: localhost:3000 > < HTTP/1.1 405 Method Not Allowed < Allow: OPTIONS, GET, PUT Raising Exceptions You can abort the execution of an API method by raising errors with error!. error! 'Access Denied', 401 Anything that responds to #to_s can be given as a first argument to error!. error! :not_found, 404 You can also return JSON formatted objects by raising error! and passing a hash instead of a message. error!({ error: 'unexpected error', detail: 'missing widget' }, 500) You can present documented errors with a Grape entity using the the grape-entity gem. module API   class Error < Grape::Entity     expose :code     expose :message   end end The following example specifies the entity to use in the http_codes definition. desc 'My Route' do  failure [[408, 'Unauthorized', API::Error]] end error!({ message: 'Unauthorized' }, 408) The following example specifies the presented entity explicitly in the error message. desc 'My Route' do  failure [[408, 'Unauthorized']] end error!({ message: 'Unauthorized', with: API::Error }, 408) Default Error HTTP Status Code By default Grape returns a 500 status code from error!. You can change this with default_error_status. class API < Grape::API   default_error_status 400   get '/example' do     error! 'This should have http status code 400'   end end Handling 404 For Grape to handle all the 404s for your API, it can be useful to use a catch-all. In its simplest form, it can be like: route :any, '*path' do   error! # or something else end It is very crucial to define this endpoint at the very end of your API, as it literally accepts every request. Exception Handling Grape can be told to rescue all exceptions and return them in the API format. class Twitter::API < Grape::API   rescue_from :all end Grape can also rescue from all exceptions and still use the built-in exception handing. This will give the same behavior as rescue_from :all with the addition that Grape will use the exception handling defined by all Exception classes that inherit Grape::Exceptions::Base. The intent of this setting is to provide a simple way to cover the most common exceptions and return any unexpected exceptions in the API format. class Twitter::API < Grape::API   rescue_from :grape_exceptions end You can also rescue specific exceptions. class Twitter::API < Grape::API   rescue_from ArgumentError, UserDefinedError end In this case UserDefinedError must be inherited from StandardError. Notice that you could combine these two approaches (rescuing custom errors takes precedence). For example, it's useful for handling all exceptions except Grape validation errors. class Twitter::API < Grape::API   rescue_from Grape::Exceptions::ValidationErrors do |e|     error!(e, 400)   end    rescue_from :all end The error format will match the request format. See ""Content-Types"" below. Custom error formatters for existing and additional types can be defined with a proc. class Twitter::API < Grape::API   error_formatter :txt, ->(message, backtrace, options, env) {     ""error: #{message} from #{backtrace}""   } end You can also use a module or class. module CustomFormatter   def self.call(message, backtrace, options, env)     { message: message, backtrace: backtrace }   end end  class Twitter::API < Grape::API   error_formatter :custom, CustomFormatter end You can rescue all exceptions with a code block. The error! wrapper automatically sets the default error code and content-type. class Twitter::API < Grape::API   rescue_from :all do |e|     error!(""rescued from #{e.class.name}"")   end end Optionally, you can set the format, status code and headers. class Twitter::API < Grape::API   format :json   rescue_from :all do |e|     error!({ error: 'Server error.' }, 500, { 'Content-Type' => 'text/error' })   end end You can also rescue all exceptions with a code block and handle the Rack response at the lowest level. class Twitter::API < Grape::API   rescue_from :all do |e|     Rack::Response.new([ e.message ], 500, { 'Content-type' => 'text/error' }).finish   end end Or rescue specific exceptions. class Twitter::API < Grape::API   rescue_from ArgumentError do |e|     error!(""ArgumentError: #{e.message}"")   end    rescue_from NotImplementedError do |e|     error!(""NotImplementedError: #{e.message}"")   end end By default, rescue_from will rescue the exceptions listed and all their subclasses. Assume you have the following exception classes defined. module APIErrors   class ParentError < StandardError; end   class ChildError < ParentError; end end Then the following rescue_from clause will rescue exceptions of type APIErrors::ParentError and its subclasses (in this case APIErrors::ChildError). rescue_from APIErrors::ParentError do |e|     error!({       error: ""#{e.class} error"",       message: e.message     }, e.status) end To only rescue the base exception class, set rescue_subclasses: false. The code below will rescue exceptions of type RuntimeError but not its subclasses. rescue_from RuntimeError, rescue_subclasses: false do |e|     error!({       status: e.status,       message: e.message,       errors: e.errors     }, e.status) end Helpers are also available inside rescue_from. class Twitter::API < Grape::API   format :json   helpers do     def server_error!       error!({ error: 'Server error.' }, 500, { 'Content-Type' => 'text/error' })     end   end    rescue_from :all do |e|     server_error!   end end The rescue_from block must return a Rack::Response object, call error! or re-raise an exception. The with keyword is available as rescue_from options, it can be passed method name or Proc object. class Twitter::API < Grape::API   format :json   helpers do     def server_error!       error!({ error: 'Server error.' }, 500, { 'Content-Type' => 'text/error' })     end   end    rescue_from :all,          with: :server_error!   rescue_from ArgumentError, with: -> { Rack::Response.new('rescued with a method', 400) } end Rescuing exceptions inside namespaces You could put rescue_from clauses inside a namespace and they will take precedence over ones defined in the root scope: class Twitter::API < Grape::API   rescue_from ArgumentError do |e|     error!(""outer"")   end    namespace :statuses do     rescue_from ArgumentError do |e|       error!(""inner"")     end     get do       raise ArgumentError.new     end   end end Here 'inner' will be result of handling occured ArgumentError. Unrescuable Exceptions Grape::Exceptions::InvalidVersionHeader, which is raised when the version in the request header doesn't match the currently evaluated version for the endpoint, will never be rescued from a rescue_from block (even a rescue_from :all) This is because Grape relies on Rack to catch that error and try the next versioned-route for cases where there exist identical Grape endpoints with different versions. Rails 3.x When mounted inside containers, such as Rails 3.x, errors such as ""404 Not Found"" or ""406 Not Acceptable"" will likely be handled and rendered by Rails handlers. For instance, accessing a nonexistent route ""/api/foo"" raises a 404, which inside rails will ultimately be translated to an ActionController::RoutingError, which most likely will get rendered to a HTML error page. Most APIs will enjoy preventing downstream handlers from handling errors. You may set the :cascade option to false for the entire API or separately on specific version definitions, which will remove the X-Cascade: true header from API responses. cascade false version 'v1', using: :header, vendor: 'twitter', cascade: false Logging Grape::API provides a logger method which by default will return an instance of the Logger class from Ruby's standard library. To log messages from within an endpoint, you need to define a helper to make the logger available in the endpoint context. class API < Grape::API   helpers do     def logger       API.logger     end   end   post '/statuses' do     # ...     logger.info ""#{current_user} has statused""   end end You can also set your own logger. class MyLogger   def warning(message)     puts ""this is a warning: #{message}""   end end  class API < Grape::API   logger MyLogger.new   helpers do     def logger       API.logger     end   end   get '/statuses' do     logger.warning ""#{current_user} has statused""   end end For similar to Rails request logging try the grape_logging or grape-middleware-logger gems. API Formats Your API can declare which content-types to support by using content_type. If you do not specify any, Grape will support XML, JSON, BINARY, and TXT content-types. The default format is :txt; you can change this with default_format. Essentially, the two APIs below are equivalent. class Twitter::API < Grape::API   # no content_type declarations, so Grape uses the defaults end  class Twitter::API < Grape::API   # the following declarations are equivalent to the defaults    content_type :xml, 'application/xml'   content_type :json, 'application/json'   content_type :binary, 'application/octet-stream'   content_type :txt, 'text/plain'    default_format :txt end If you declare any content_type whatsoever, the Grape defaults will be overridden. For example, the following API will only support the :xml and :rss content-types, but not :txt, :json, or :binary. Importantly, this means the :txt default format is not supported! So, make sure to set a new default_format. class Twitter::API < Grape::API   content_type :xml, 'application/xml'   content_type :rss, 'application/xml+rss'    default_format :xml end Serialization takes place automatically. For example, you do not have to call to_json in each JSON API endpoint implementation. The response format (and thus the automatic serialization) is determined in the following order: Use the file extension, if specified. If the file is .json, choose the JSON format. Use the value of the format parameter in the query string, if specified. Use the format set by the format option, if specified. Attempt to find an acceptable format from the Accept header. Use the default format, if specified by the default_format option. Default to :txt. For example, consider the following API. class MultipleFormatAPI < Grape::API   content_type :xml, 'application/xml'   content_type :json, 'application/json'    default_format :json    get :hello do     { hello: 'world' }   end end GET /hello (with an Accept: */* header) does not have an extension or a format parameter, so it will respond with JSON (the default format). GET /hello.xml has a recognized extension, so it will respond with XML. GET /hello?format=xml has a recognized format parameter, so it will respond with XML. GET /hello.xml?format=json has a recognized extension (which takes precedence over the format parameter), so it will respond with XML. GET /hello.xls (with an Accept: */* header) has an extension, but that extension is not recognized, so it will respond with JSON (the default format). GET /hello.xls with an Accept: application/xml header has an unrecognized extension, but the Accept header corresponds to a recognized format, so it will respond with XML. GET /hello.xls with an Accept: text/plain header has an unrecognized extension and an unrecognized Accept header, so it will respond with JSON (the default format). You can override this process explicitly by specifying env['api.format'] in the API itself. For example, the following API will let you upload arbitrary files and return their contents as an attachment with the correct MIME type. class Twitter::API < Grape::API   post 'attachment' do     filename = params[:file][:filename]     content_type MIME::Types.type_for(filename)[0].to_s     env['api.format'] = :binary # there's no formatter for :binary, data will be returned ""as is""     header 'Content-Disposition', ""attachment; filename*=UTF-8''#{CGI.escape(filename)}""     params[:file][:tempfile].read   end end You can have your API only respond to a single format with format. If you use this, the API will not respond to file extensions other than specified in format. For example, consider the following API. class SingleFormatAPI < Grape::API   format :json    get :hello do     { hello: 'world' }   end end GET /hello will respond with JSON. GET /hello.json will respond with JSON. GET /hello.xml, GET /hello.foobar, or any other extension will respond with an HTTP 404 error code. GET /hello?format=xml will respond with an HTTP 406 error code, because the XML format specified by the request parameter is not supported. GET /hello with an Accept: application/xml header will still respond with JSON, since it could not negotiate a recognized content-type from the headers and JSON is the effective default. The formats apply to parsing, too. The following API will only respond to the JSON content-type and will not parse any other input than application/json, application/x-www-form-urlencoded, multipart/form-data, multipart/related and multipart/mixed. All other requests will fail with an HTTP 406 error code. class Twitter::API < Grape::API   format :json end When the content-type is omitted, Grape will return a 406 error code unless default_format is specified. The following API will try to parse any data without a content-type using a JSON parser. class Twitter::API < Grape::API   format :json   default_format :json end If you combine format with rescue_from :all, errors will be rendered using the same format. If you do not want this behavior, set the default error formatter with default_error_formatter. class Twitter::API < Grape::API   format :json   content_type :txt, 'text/plain'   default_error_formatter :txt end Custom formatters for existing and additional types can be defined with a proc. class Twitter::API < Grape::API   content_type :xls, 'application/vnd.ms-excel'   formatter :xls, ->(object, env) { object.to_xls } end You can also use a module or class. module XlsFormatter   def self.call(object, env)     object.to_xls   end end  class Twitter::API < Grape::API   content_type :xls, 'application/vnd.ms-excel'   formatter :xls, XlsFormatter end Built-in formatters are the following. :json: use object's to_json when available, otherwise call MultiJson.dump :xml: use object's to_xml when available, usually via MultiXml, otherwise call to_s :txt: use object's to_txt when available, otherwise to_s :serializable_hash: use object's serializable_hash when available, otherwise fallback to :json :binary: data will be returned ""as is"" Response statuses that indicate no content as defined by Rack here will bypass serialization and the body entity - though there should be none - will not be modified. JSONP Grape supports JSONP via Rack::JSONP, part of the rack-contrib gem. Add rack-contrib to your Gemfile. require 'rack/contrib'  class API < Grape::API   use Rack::JSONP   format :json   get '/' do     'Hello World'   end end CORS Grape supports CORS via Rack::CORS, part of the rack-cors gem. Add rack-cors to your Gemfile, then use the middleware in your config.ru file. require 'rack/cors'  use Rack::Cors do   allow do     origins '*'     resource '*', headers: :any, methods: :get   end end  run Twitter::API  Content-type Content-type is set by the formatter. You can override the content-type of the response at runtime by setting the Content-Type header. class API < Grape::API   get '/home_timeline_js' do     content_type 'application/javascript'     ""var statuses = ...;""   end end API Data Formats Grape accepts and parses input data sent with the POST and PUT methods as described in the Parameters section above. It also supports custom data formats. You must declare additional content-types via content_type and optionally supply a parser via parser unless a parser is already available within Grape to enable a custom format. Such a parser can be a function or a class. With a parser, parsed data is available ""as-is"" in env['api.request.body']. Without a parser, data is available ""as-is"" and in env['api.request.input']. The following example is a trivial parser that will assign any input with the ""text/custom"" content-type to :value. The parameter will be available via params[:value] inside the API call. module CustomParser   def self.call(object, env)     { value: object.to_s }   end end content_type :txt, 'text/plain' content_type :custom, 'text/custom' parser :custom, CustomParser  put 'value' do   params[:value] end You can invoke the above API as follows. curl -X PUT -d 'data' 'http://localhost:9292/value' -H Content-Type:text/custom -v  You can disable parsing for a content-type with nil. For example, parser :json, nil will disable JSON parsing altogether. The request data is then available as-is in env['api.request.body']. RESTful Model Representations Grape supports a range of ways to present your data with some help from a generic present method, which accepts two arguments: the object to be presented and the options associated with it. The options hash may include :with, which defines the entity to expose. Grape Entities Add the grape-entity gem to your Gemfile. Please refer to the grape-entity documentation for more details. The following example exposes statuses. module API   module Entities     class Status < Grape::Entity       expose :user_name       expose :text, documentation: { type: 'string', desc: 'Status update text.' }       expose :ip, if: { type: :full }       expose :user_type, :user_id, if: ->(status, options) { status.user.public? }       expose :digest do |status, options|         Digest::MD5.hexdigest(status.txt)       end       expose :replies, using: API::Status, as: :replies     end   end    class Statuses < Grape::API     version 'v1'      desc 'Statuses index' do       params: API::Entities::Status.documentation     end     get '/statuses' do       statuses = Status.all       type = current_user.admin? ? :full : :default       present statuses, with: API::Entities::Status, type: type     end   end end You can use entity documentation directly in the params block with using: Entity.documentation. module API   class Statuses < Grape::API     version 'v1'      desc 'Create a status'     params do       requires :all, except: [:ip], using: API::Entities::Status.documentation.except(:id)     end     post '/status' do       Status.create! params     end   end end You can present with multiple entities using an optional Symbol argument.   get '/statuses' do     statuses = Status.all.page(1).per(20)     present :total_page, 10     present :per_page, 20     present :statuses, statuses, with: API::Entities::Status   end The response will be   {     total_page: 10,     per_page: 20,     statuses: []   }  In addition to separately organizing entities, it may be useful to put them as namespaced classes underneath the model they represent. class Status   def entity     Entity.new(self)   end    class Entity < Grape::Entity     expose :text, :user_id   end end If you organize your entities this way, Grape will automatically detect the Entity class and use it to present your models. In this example, if you added present Status.new to your endpoint, Grape will automatically detect that there is a Status::Entity class and use that as the representative entity. This can still be overridden by using the :with option or an explicit represents call. You can present hash with Grape::Presenters::Presenter to keep things consistent. get '/users' do   present { id: 10, name: :dgz }, with: Grape::Presenters::Presenter end The response will be {   id:   10,   name: 'dgz' } It has the same result with get '/users' do   present :id, 10   present :name, :dgz end Hypermedia and Roar You can use Roar to render HAL or Collection+JSON with the help of grape-roar, which defines a custom JSON formatter and enables presenting entities with Grape's present keyword. Rabl You can use Rabl templates with the help of the grape-rabl gem, which defines a custom Grape Rabl formatter. Active Model Serializers You can use Active Model Serializers serializers with the help of the grape-active_model_serializers gem, which defines a custom Grape AMS formatter. Sending Raw or No Data In general, use the binary format to send raw data. class API < Grape::API   get '/file' do     content_type 'application/octet-stream'     File.binread 'file.bin'   end end You can set the response body explicitly with body. class API < Grape::API   get '/' do     content_type 'text/plain'     body 'Hello World'     # return value ignored   end end Use body false to return 204 No Content without any data or content-type. You can also set the response to a file with file. class API < Grape::API   get '/' do     file '/path/to/file'   end end If you want a file to be streamed using Rack::Chunked, use stream. class API < Grape::API   get '/' do     stream '/path/to/file'   end end Authentication Basic and Digest Auth Grape has built-in Basic and Digest authentication (the given block is executed in the context of the current Endpoint). Authentication applies to the current namespace and any children, but not parents. http_basic do |username, password|   # verify user's password here   { 'test' => 'password1' }[username] == password end http_digest({ realm: 'Test Api', opaque: 'app secret' }) do |username|   # lookup the user's password here   { 'user1' => 'password1' }[username] end Register custom middleware for authentication Grape can use custom Middleware for authentication. How to implement these Middleware have a look at Rack::Auth::Basic or similar implementations. For registering a Middleware you need the following options: label - the name for your authenticator to use it later MiddlewareClass - the MiddlewareClass to use for authentication option_lookup_proc - A Proc with one Argument to lookup the options at runtime (return value is an Array as Parameter for the Middleware). Example: Grape::Middleware::Auth::Strategies.add(:my_auth, AuthMiddleware, ->(options) { [options[:realm]] } )   auth :my_auth, { realm: 'Test Api'} do |credentials|   # lookup the user's password here   { 'user1' => 'password1' }[username] end  Use warden-oauth2 or rack-oauth2 for OAuth2 support. Describing and Inspecting an API Grape routes can be reflected at runtime. This can notably be useful for generating documentation. Grape exposes arrays of API versions and compiled routes. Each route contains a route_prefix, route_version, route_namespace, route_method, route_path and route_params. You can add custom route settings to the route metadata with route_setting. class TwitterAPI < Grape::API   version 'v1'   desc 'Includes custom settings.'   route_setting :custom, key: 'value'   get do    end end Examine the routes at runtime. TwitterAPI::versions # yields [ 'v1', 'v2' ] TwitterAPI::routes # yields an array of Grape::Route objects TwitterAPI::routes[0].version # => 'v1' TwitterAPI::routes[0].description # => 'Includes custom settings.' TwitterAPI::routes[0].settings[:custom] # => { key: 'value' } Note that Route#route_xyz methods have been deprecated since 0.15.0. Please use Route#xyz instead. Note that difference of Route#options and Route#settings. The options can be referred from your route, it should be set by specifing key and value on verb methods such as get, post and put. The settings can also be referred from your route, but it should be set by specifing key and value on route_setting. Current Route and Endpoint It's possible to retrieve the information about the current route from within an API call with route. class MyAPI < Grape::API   desc 'Returns a description of a parameter.'   params do     requires :id, type: Integer, desc: 'Identity.'   end   get 'params/:id' do     route.route_params[params[:id]] # yields the parameter description   end end The current endpoint responding to the request is self within the API block or env['api.endpoint'] elsewhere. The endpoint has some interesting properties, such as source which gives you access to the original code block of the API implementation. This can be particularly useful for building a logger middleware. class ApiLogger < Grape::Middleware::Base   def before     file = env['api.endpoint'].source.source_location[0]     line = env['api.endpoint'].source.source_location[1]     logger.debug ""[api] #{file}:#{line}""   end end Before and After Blocks can be executed before or after every API call, using before, after, before_validation and after_validation. Before and after callbacks execute in the following order: before before_validation validations after_validation the API call after Steps 4, 5 and 6 only happen if validation succeeds. Examples Using a simple before block to set a header before do   header 'X-Robots-Tag', 'noindex' end Namespaces Callbacks apply to each API call within and below the current namespace: class MyAPI < Grape::API   get '/' do     ""root - #{@blah}""   end    namespace :foo do     before do       @blah = 'blah'     end      get '/' do       ""root - foo - #{@blah}""     end      namespace :bar do       get '/' do         ""root - foo - bar - #{@blah}""       end     end   end end The behaviour is then: GET /           # 'root - ' GET /foo        # 'root - foo - blah' GET /foo/bar    # 'root - foo - bar - blah' Params on a namespace (or whichever alias you are using) will also be available when using before_validation or after_validation: class MyAPI < Grape::API   params do     requires :blah, type: Integer   end   resource ':blah' do     after_validation do       # if we reach this point validations will have passed       @blah = declared(params, include_missing: false)[:blah]     end      get '/' do       @blah.class     end   end end The behaviour is then: GET /123        # 'Fixnum' GET /foo        # 400 error - 'blah is invalid' Versioning When a callback is defined within a version block, it's only called for the routes defined in that block. class Test < Grape::API   resource :foo do     version 'v1', :using => :path do       before do         @output ||= 'v1-'       end       get '/' do         @output += 'hello'       end     end      version 'v2', :using => :path do       before do         @output ||= 'v2-'       end       get '/' do         @output += 'hello'       end     end   end end The behaviour is then: GET /foo/v1       # 'v1-hello' GET /foo/v2       # 'v2-hello' Altering Responses Using present in any callback allows you to add data to a response: class MyAPI < Grape::API   format :json    after_validation do     present :name, params[:name] if params[:name]   end    get '/greeting' do     present :greeting, 'Hello!'   end end The behaviour is then: GET /greeting              # {""greeting"":""Hello!""} GET /greeting?name=Alan    # {""name"":""Alan"",""greeting"":""Hello!""} Instead of altering a response, you can also terminate and rewrite it from any callback using error!, including after. This will cause all subsequent steps in the process to not be called. This includes the actual api call and any callbacks Anchoring Grape by default anchors all request paths, which means that the request URL should match from start to end to match, otherwise a 404 Not Found is returned. However, this is sometimes not what you want, because it is not always known upfront what can be expected from the call. This is because Rack-mount by default anchors requests to match from the start to the end, or not at all. Rails solves this problem by using a anchor: false option in your routes. In Grape this option can be used as well when a method is defined. For instance when your API needs to get part of an URL, for instance: class TwitterAPI < Grape::API   namespace :statuses do     get '/(*:status)', anchor: false do      end   end end This will match all paths starting with '/statuses/'. There is one caveat though: the params[:status] parameter only holds the first part of the request url. Luckily this can be circumvented by using the described above syntax for path specification and using the PATH_INFO Rack environment variable, using env['PATH_INFO']. This will hold everything that comes after the '/statuses/' part. Using Custom Middleware Grape Middleware You can make a custom middleware by using Grape::Middleware::Base. It's inherited from some grape official middlewares in fact. For example, you can write a middleware to log application exception. class LoggingError < Grape::Middleware::Base   def after     return unless @app_response && @app_response[0] == 500     env['rack.logger'].error(""Raised error on #{env['PATH_INFO']}"")   end end Your middleware can overwrite application response as follows, except error case. class Overwriter < Grape::Middleware::Base   def after     [200, { 'Content-Type' => 'text/plain' }, ['Overwritten.']]   end end You can add your custom middleware with use, that push the middleware onto the stack, and you can also control where the middleware is inserted using insert, insert_before and insert_after. class CustomOverwriter < Grape::Middleware::Base   def after     [200, { 'Content-Type' => 'text/plain' }, [@options[:message]]]   end end   class API < Grape::API   use Overwriter   insert_before Overwriter, CustomOverwriter, message: 'Overwritten again.'   insert 0, CustomOverwriter, message: 'Overwrites all other middleware.'    get '/' do   end end Rails Middleware Note that when you're using Grape mounted on Rails you don't have to use Rails middleware because it's already included into your middleware stack. You only have to implement the helpers to access the specific env variable. Remote IP By default you can access remote IP with request.ip. This is the remote IP address implemented by Rack. Sometimes it is desirable to get the remote IP Rails-style with ActionDispatch::RemoteIp. Add gem 'actionpack' to your Gemfile and require 'action_dispatch/middleware/remote_ip.rb'. Use the middleware in your API and expose a client_ip helper. See this documentation for additional options. class API < Grape::API   use ActionDispatch::RemoteIp    helpers do     def client_ip       env['action_dispatch.remote_ip'].to_s     end   end    get :remote_ip do     { ip: client_ip }   end end Writing Tests Writing Tests with Rack Use rack-test and define your API as app. RSpec You can test a Grape API with RSpec by making HTTP requests and examining the response. require 'spec_helper'  describe Twitter::API do   include Rack::Test::Methods    def app     Twitter::API   end    context 'GET /api/statuses/public_timeline' do     it 'returns an empty array of statuses' do       get '/api/statuses/public_timeline'       expect(last_response.status).to eq(200)       expect(JSON.parse(last_response.body)).to eq []     end   end   context 'GET /api/statuses/:id' do     it 'returns a status by id' do       status = Status.create!       get ""/api/statuses/#{status.id}""       expect(last_response.body).to eq status.to_json     end   end end There's no standard way of sending arrays of objects via an HTTP GET, so POST JSON data and specify the correct content-type. describe Twitter::API do   context 'POST /api/statuses' do     it 'creates many statuses' do       statuses = [{ text: '...' }, { text: '...'}]       post '/api/statuses', statuses.to_json, 'CONTENT_TYPE' => 'application/json'       expect(last_response.body).to eq 201     end   end end Airborne You can test with other RSpec-based frameworks, including Airborne, which uses rack-test to make requests. require 'airborne'  Airborne.configure do |config|   config.rack_app = Twitter::API end  describe Twitter::API do   context 'GET /api/statuses/:id' do     it 'returns a status by id' do       status = Status.create!       get ""/api/statuses/#{status.id}""       expect_json(status.as_json)     end   end end MiniTest require 'test_helper'  class Twitter::APITest < MiniTest::Test   include Rack::Test::Methods    def app     Twitter::API   end    def test_get_api_statuses_public_timeline_returns_an_empty_array_of_statuses     get '/api/statuses/public_timeline'     assert last_response.ok?     assert_equal [], JSON.parse(last_response.body)   end    def test_get_api_statuses_id_returns_a_status_by_id     status = Status.create!     get ""/api/statuses/#{status.id}""     assert_equal status.to_json, last_response.body   end end Writing Tests with Rails RSpec describe Twitter::API do   context 'GET /api/statuses/public_timeline' do     it 'returns an empty array of statuses' do       get '/api/statuses/public_timeline'       expect(response.status).to eq(200)       expect(JSON.parse(response.body)).to eq []     end   end   context 'GET /api/statuses/:id' do     it 'returns a status by id' do       status = Status.create!       get ""/api/statuses/#{status.id}""       expect(response.body).to eq status.to_json     end   end end In Rails, HTTP request tests would go into the spec/requests group. You may want your API code to go into app/api - you can match that layout under spec by adding the following in spec/rails_helper.rb. RSpec.configure do |config|   config.include RSpec::Rails::RequestExampleGroup, type: :request, file_path: /spec\/api/ end MiniTest class Twitter::APITest < ActiveSupport::TestCase   include Rack::Test::Methods    def app     Rails.application   end    test 'GET /api/statuses/public_timeline returns an empty array of statuses' do     get '/api/statuses/public_timeline'     assert last_response.ok?     assert_equal [], JSON.parse(last_response.body)   end    test 'GET /api/statuses/:id returns a status by id' do     status = Status.create!     get ""/api/statuses/#{status.id}""     assert_equal status.to_json, last_response.body   end end Stubbing Helpers Because helpers are mixed in based on the context when an endpoint is defined, it can be difficult to stub or mock them for testing. The Grape::Endpoint.before_each method can help by allowing you to define behavior on the endpoint that will run before every request. describe 'an endpoint that needs helpers stubbed' do   before do     Grape::Endpoint.before_each do |endpoint|       allow(endpoint).to receive(:helper_name).and_return('desired_value')     end   end    after do     Grape::Endpoint.before_each nil   end    it 'stubs the helper' do     # ...   end end Reloading API Changes in Development Reloading in Rack Applications Use grape-reload. Reloading in Rails Applications Add API paths to config/application.rb. # Auto-load API and its subdirectories config.paths.add File.join('app', 'api'), glob: File.join('**', '*.rb') config.autoload_paths += Dir[Rails.root.join('app', 'api', '*')] Create config/initializers/reload_api.rb. if Rails.env.development?   ActiveSupport::Dependencies.explicitly_unloadable_constants << 'Twitter::API'    api_files = Dir[Rails.root.join('app', 'api', '**', '*.rb')]   api_reloader = ActiveSupport::FileUpdateChecker.new(api_files) do     Rails.application.reload_routes!   end   ActionDispatch::Callbacks.to_prepare do     api_reloader.execute_if_updated   end end See StackOverflow #3282655 for more information. Performance Monitoring Active Support Instrumentation Grape has built-in support for ActiveSupport::Notifications which provides simple hook points to instrument key parts of your application. The following are currently supported: endpoint_run.grape The main execution of an endpoint, includes filters and rendering. endpoint - The endpoint instance endpoint_render.grape The execution of the main content block of the endpoint. endpoint - The endpoint instance endpoint_run_filters.grape endpoint - The endpoint instance filters - The filters being executed type - The type of filters (before, before_validation, after_validation, after) See the ActiveSupport::Notifications documentation for information on how to subscribe to these events. Monitoring Products Grape integrates with following third-party tools: New Relic - built-in support from v3.10.0 of the official newrelic_rpm gem, also newrelic-grape gem Librato Metrics - grape-librato gem Skylight - skylight gem, documentation Contributing to Grape Grape is work of hundreds of contributors. You're encouraged to submit pull requests, propose features and discuss issues. See CONTRIBUTING. License MIT License. See LICENSE for details. Copyright Copyright (c) 2010-2015 Michael Bleigh, and Intridea, Inc. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ruby-grape/grape"	"— a REST-like API micro-framework inspired by and"	"true"
"Web programming"	""	"https://travis-ci.org/rustless/rustless"	"— a REST-like API micro-framework inspired by and"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a REST-like API micro-framework inspired by and"	"true"
"Web programming"	"tiny-http"	"https://github.com/frewsxcv/tiny-http"	"— Low level HTTP server library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"179"	"9"	"14"	"GitHub - frewsxcv/tiny-http: Low level HTTP server library in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 179 Fork 14 frewsxcv/tiny-http Code Issues 19 Pull requests 0 Pulse Graphs Low level HTTP server library in Rust https://crates.io/crates/tiny_http 384 commits 5 branches 10 releases Fetching contributors Rust 98.4% Shell 1.6% Rust Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags beta fix-test gh-pages http2 master Nothing to show 0.5.2 0.5.1 0.5.0 0.4.1 0.4.0 0.3.0 0.2.1 0.2.0 0.1.1 0.1.0 Nothing to show New pull request Latest commit e800b80 Jun 26, 2016 frewsxcv committed on GitHub Merge pull request #115 from frewsxcv/0.5.2 … Prepare for 0.5.2 release. Permalink Failed to load latest commit information. benches Rework the server creation API Nov 24, 2015 examples Update ascii to version 0.7 Jun 25, 2016 src Update ascii to version 0.7 Jun 25, 2016 tests Request::respond returns a IoResult Nov 30, 2015 .gitattributes Fix line endings Jul 14, 2014 .gitignore Added intellij IDEA ide hidden folder to .gitignore Nov 21, 2014 .travis-bench Revert all changes in fix attempts Jul 18, 2014 .travis.yml Correct documentation generation Dec 2, 2015 CHANGELOG.md Prepare for 0.5.2 release. Jun 26, 2016 Cargo.toml Prepare for 0.5.2 release. Jun 26, 2016 LICENSE Update license file to have better formatting Apr 30, 2015 README.md Update README to reflect current state Nov 29, 2015 README.md tiny-http Documentation Tiny but strong HTTP server in Rust. Its main objectives are to be 100% compliant with the HTTP standard and to provide an easy way to create an HTTP server. What does tiny-http handle? Accepting and managing connections to the clients Parsing requests Requests pipelining Transfer-Encoding and Content-Encoding (not fully implemented yet) Turning user input (eg. POST input) into a contiguous UTF-8 string (not implemented yet) Ranges (not implemented yet) HTTPS Connection: upgrade (used by websockets) Tiny-http handles everything that is related to client connections and data transfers and encoding. Everything else (parsing the values of the headers, multipart data, routing, etags, cache-control, HTML templates, etc.) must be handled by your code. If you want to create a website in Rust, I strongly recommend using a framework instead of this library. Installation Add this to the Cargo.toml file of your project: [dependencies] tiny_http = ""0.5"" Don't forget to add the external crate: extern crate tiny_http; Usage use tiny_http::{Server, Response};  let server = Server::http(""0.0.0.0:8000"").unwrap();  for request in server.incoming_requests() {     println!(""received request! method: {:?}, url: {:?}, headers: {:?}"",         request.method(),         request.url(),         request.headers()     );      let response = Response::from_string(""hello world"");     request.respond(response); } Speed Tiny-http was designed with speed in mind: Each client connection will be dispatched to a thread pool. Each thread will handle one client. If there is no thread available when a client connects, a new one is created. Threads that are idle for a long time (currently 5 seconds) will automatically die. If multiple requests from the same client are being pipelined (ie. multiple requests are sent without waiting for the answer), tiny-http will read them all at once and they will all be available via server.recv(). Tiny-http will automatically rearrange the responses so that they are sent in the right order. One exception to the previous statement exists when a request has a large body (currently > 1kB), in which case the request handler will read the body directly from the stream and tiny-http will wait for it to be read before processing the next request. Tiny-http will never wait for a request to be answered to read the next one. When a client connection has sent its last request (by sending Connection: close header), the thread will immediatly stop reading from this client and can be reclaimed, even when the request has not yet been answered. The reading part of the socket will also be immediatly closed. Decoding the client's request is done lazily. If you don't read the request's body, it will not be decoded. Examples Examples of tiny-http in use: heroku-tiny-http-hello-world - A simple web application demonstrating how to deploy tiny-http to Heroku crate-deps - A web service that generates images of dependency graphs for crates hosted on crates.io Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/frewsxcv/tiny-http"	"— Low level HTTP server library"	"true"
"Web programming"	""	"https://travis-ci.org/frewsxcv/tiny-http"	"— Low level HTTP server library"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— Low level HTTP server library"	"true"
"Web programming"	"WebSocket"	"https://datatracker.ietf.org/doc/rfc6455/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"RFC 6455     Toggle navigation Datatracker Enable Javascript for full functionality. Groups Active WGs Active RGs Other Active Areas Active AGs Active Teams Active Directorates By area/parent Applications and Real-Time General Internet Ops & Mgmt Routing Security Transport IRTF New work Chartering groups BOFs Other groups Concluded groups Non-WG lists Documents Submit a draft Sign in to track docs RFC streams IAB IRTF ISE Meetings Agenda Materials Past proceedings Upcoming Request a session Session requests Other IPR disclosures Liaison statements IESG agenda Tutorials Report a bug User Sign in New account Preferences User Sign in New account Preferences Groups Active WGs Active RGs Other Active Areas Active AGs Active Teams Active Directorates By area/parent Applications and Real-Time General Internet Ops & Mgmt Routing Security Transport IRTF New work Chartering groups BOFs Other groups Concluded groups Non-WG lists Documents Submit a draft Sign in to track docs RFC streams IAB IRTF ISE Meetings Agenda Materials Past proceedings Upcoming Request a session Session requests Other IPR disclosures Liaison statements IESG agenda Tutorials Report a bug The WebSocket Protocol RFC 6455 Document IESG evaluation record IESG writeups Email expansions History Versions 17 Document Type RFC - Proposed Standard (December 2011; Errata) Was draft-ietf-hybi-thewebsocketprotocol (hybi WG) Last updated 2015-10-14 Replaces draft-hixie-thewebsocketprotocol Stream IETF Formats plain text pdf html bibtex Stream WG state WG Document Document shepherd Salvatore Loreto Shepherd write-up Show (last changed 2011-09-01) IESG IESG state RFC 6455 (Proposed Standard) Consensus Unknown Telechat date Responsible AD Peter Saint-Andre Send notices to (None) Email authors IPR References Referenced by Nits Search lists IETF Mail Archive Google Internet Engineering Task Force (IETF)                          I. Fette Request for Comments: 6455                                  Google, Inc. Category: Standards Track                                    A. Melnikov ISSN: 2070-1721                                               Isode Ltd.                                                            December 2011                           The WebSocket Protocol  Abstract     The WebSocket Protocol enables two-way communication between a client    running untrusted code in a controlled environment to a remote host    that has opted-in to communications from that code.  The security    model used for this is the origin-based security model commonly used    by web browsers.  The protocol consists of an opening handshake    followed by basic message framing, layered over TCP.  The goal of    this technology is to provide a mechanism for browser-based    applications that need two-way communication with servers that does    not rely on opening multiple HTTP connections (e.g., using    XMLHttpRequest or <iframe>s and long polling).  Status of This Memo     This is an Internet Standards Track document.     This document is a product of the Internet Engineering Task Force    (IETF).  It represents the consensus of the IETF community.  It has    received public review and has been approved for publication by the    Internet Engineering Steering Group (IESG).  Further information on    Internet Standards is available in Section 2 of RFC 5741.     Information about the current status of this document, any errata,    and how to provide feedback on it may be obtained at    http://www.rfc-editor.org/info/rfc6455.  Copyright Notice     Copyright (c) 2011 IETF Trust and the persons identified as the    document authors.  All rights reserved.     This document is subject to BCP 78 and the IETF Trust's Legal    Provisions Relating to IETF Documents    (http://trustee.ietf.org/license-info) in effect on the date of    publication of this document.  Please review these documents    carefully, as they describe your rights and restrictions with respect    to this document.  Code Components extracted from this document must  Fette & Melnikov             Standards Track                    [Page 1] RFC 6455                 The WebSocket Protocol            December 2011     include Simplified BSD License text as described in Section 4.e of    the Trust Legal Provisions and are provided without warranty as    described in the Simplified BSD License.  Table of Contents     1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4      1.1.  Background . . . . . . . . . . . . . . . . . . . . . . . .  4      1.2.  Protocol Overview  . . . . . . . . . . . . . . . . . . . .  5      1.3.  Opening Handshake  . . . . . . . . . . . . . . . . . . . .  6      1.4.  Closing Handshake  . . . . . . . . . . . . . . . . . . . .  9      1.5.  Design Philosophy  . . . . . . . . . . . . . . . . . . . .  9      1.6.  Security Model . . . . . . . . . . . . . . . . . . . . . . 10      1.7.  Relationship to TCP and HTTP . . . . . . . . . . . . . . . 11      1.8.  Establishing a Connection  . . . . . . . . . . . . . . . . 11      1.9.  Subprotocols Using the WebSocket Protocol  . . . . . . . . 12    2.  Conformance Requirements . . . . . . . . . . . . . . . . . . . 12      2.1.  Terminology and Other Conventions  . . . . . . . . . . . . 13    3.  WebSocket URIs . . . . . . . . . . . . . . . . . . . . . . . . 14    4.  Opening Handshake  . . . . . . . . . . . . . . . . . . . . . . 14      4.1.  Client Requirements  . . . . . . . . . . . . . . . . . . . 14      4.2.  Server-Side Requirements . . . . . . . . . . . . . . . . . 20        4.2.1.  Reading the Client's Opening Handshake . . . . . . . . 21        4.2.2.  Sending the Server's Opening Handshake . . . . . . . . 22      4.3.  Collected ABNF for New Header Fields Used in Handshake . . 25      4.4.  Supporting Multiple Versions of WebSocket Protocol . . . . 26    5.  Data Framing . . . . . . . . . . . . . . . . . . . . . . . . . 27      5.1.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . 27      5.2.  Base Framing Protocol  . . . . . . . . . . . . . . . . . . 28      5.3.  Client-to-Server Masking . . . . . . . . . . . . . . . . . 32      5.4.  Fragmentation  . . . . . . . . . . . . . . . . . . . . . . 33      5.5.  Control Frames . . . . . . . . . . . . . . . . . . . . . . 36        5.5.1.  Close  . . . . . . . . . . . . . . . . . . . . . . . . 36        5.5.2.  Ping . . . . . . . . . . . . . . . . . . . . . . . . . 37        5.5.3.  Pong . . . . . . . . . . . . . . . . . . . . . . . . . 37      5.6.  Data Frames  . . . . . . . . . . . . . . . . . . . . . . . 38      5.7.  Examples . . . . . . . . . . . . . . . . . . . . . . . . . 38      5.8.  Extensibility  . . . . . . . . . . . . . . . . . . . . . . 39  Show full document text ISOC IETF Trust RFC Editor IRTF IESG IETF IAB IASA & IAOC IETF Tools IANA About | IETF Datatracker | Version 6.27.0.p1 | 2016-07-15 | Report a bug"	"null"	"null"	""	"true"
"Web programming"	"cyderize/rust-websocket"	"https://github.com/cyderize/rust-websocket"	"— a framework for dealing with WebSocket connections (both clients and servers)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"218"	"16"	"52"	"GitHub - cyderize/rust-websocket: A WebSocket (RFC6455) library written in Rust Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 218 Fork 52 cyderize/rust-websocket Code Issues 11 Pull requests 3 Pulse Graphs A WebSocket (RFC6455) library written in Rust http://cyderize.github.io/rust-websocket/ 264 commits 5 branches 0 releases 19 contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.11.3 gh-pages html master permessage-deflate Nothing to show Nothing to show New pull request Latest commit 7b40c07 May 15, 2016 cyderize Update readme Permalink Failed to load latest commit information. autobahn Use different ports for autobahn Jan 27, 2015 examples Make client example available on stable Oct 25, 2015 src Update bitflags to 0.7 May 15, 2016 .gitattributes Added .gitattributes & .gitignore files Nov 27, 2014 .gitignore Updated .gitignore Nov 27, 2014 .travis.yml Update .travis.yml Oct 25, 2015 Cargo.toml Update bitflags to 0.7 May 15, 2016 README.md Update readme May 15, 2016 README.md Rust-WebSocket Rust-WebSocket is a WebSocket (RFC6455) library written in Rust. Rust-WebSocket provides a framework for dealing with WebSocket connections (both clients and servers). The library is currently in an experimental state, but provides functionality for both normal and secure WebSockets, a message level API supporting fragmentation, a data frame level API, and the ability to extend and customize behaviour. Installation To add a library release version from crates.io to a Cargo project, add this to the 'dependencies' section of your Cargo.toml: websocket = ""0.17.1"" To add the library's Git repository to a Cargo project, add this to your Cargo.toml: [dependencies.websocket]  git = ""https://github.com/cyderize/rust-websocket.git"" And add extern crate websocket; to your project. Usage The library can be compiled with tests and benches and some extra capabilities on Rust nightly. To enable the nightly features, use cargo --features nightly .... See the documentation for the latest release of the library here, and also the examples, which are located in /examples and can be run with: cargo run --example server  And in a separate terminal: cargo run --example client  Testing The library can be tested using cargo test to run tests and cargo bench to run bench tests. A number of tests are included, which ensure core WebSocket functionality works as expected. These tests are not yet comprehensive, and are still being worked on. Autobahn TestSuite Rust-WebSocket uses the Autobahn TestSuite to test conformance to RFC6455. If you have Autobahn TestSuite installed you can run these tests yourself using the commands: wstest -m fuzzingserver cargo run --example autobahn-client  To test the client implementation, and wstest -m fuzzingclient cargo run --example autobahn-server  To test the server implementation. The spec files are available here. The results of these tests are available here. License The MIT License (MIT) Copyright (c) 2014-2015 Cyderize Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/cyderize/rust-websocket"	"— a framework for dealing with WebSocket connections (both clients and servers)"	"true"
"Web programming"	""	"https://travis-ci.org/cyderize/rust-websocket"	"— a framework for dealing with WebSocket connections (both clients and servers)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— a framework for dealing with WebSocket connections (both clients and servers)"	"true"
"Web programming"	"housleyjk/ws-rs"	"https://github.com/housleyjk/ws-rs"	"— lightweight, event-driven WebSockets for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"160"	"16"	"16"	"GitHub - housleyjk/ws-rs: Lightweight, event-driven WebSockets for Rust. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 160 Fork 16 housleyjk/ws-rs Code Issues 5 Pull requests 0 Pulse Graphs Lightweight, event-driven WebSockets for Rust. 130 commits 3 branches 0 releases Fetching contributors Rust 100.0% Rust Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master ssl-windows stable Nothing to show Nothing to show New pull request Latest commit f6c4f77 Jul 8, 2016 housleyjk Merge branch 'master' of github.com:housleyjk/ws-rs Permalink Failed to load latest commit information. examples Merge branch 'stable' Jul 8, 2016 src Merge branch 'stable' Jun 27, 2016 tests feat: Support permessage-deflate extension Jun 15, 2016 .gitignore Ready for Github Aug 28, 2015 .travis.yml chore: Update travis.yml to avoid github pages Jun 15, 2016 CHANGELOG.md chore: Update changelog Jun 15, 2016 Cargo.toml chore: Merge permessage-deflate back to master Jun 16, 2016 LICENSE feat: Support permessage-deflate extension Jun 15, 2016 README.md fix: Links on readme Jun 16, 2016 README.md WS-RS Lightweight, event-driven WebSockets for Rust. /// A WebSocket echo server listen(""127.0.0.1:3012"", |out| {     move |msg| {         out.send(msg)     } }) Introduction Homepage API Documentation This library provides an implementation of WebSockets, RFC6455 using MIO. It allows for handling multiple connections on a single thread, and even spawning new client connections on the same thread. This makes for very fast and resource efficient WebSockets. The API design abstracts away the menial parts of the WebSocket protocol and allows you to focus on application code without worrying about protocol conformance. However, it is also possible to get low-level access to individual WebSocket frames if you need to write extensions or want to optimize around the WebSocket protocol. Getting Started For detailed installation and usage instructions, check out the guide. Features WS-RS provides a complete implementation of the WebSocket specification. There is also support for ssl and permessage-deflate. Testing WS-RS is thoroughly tested and passes the Autobahn Test Suite for WebSockets, including the tests for permessage-deflate. Visit ws-rs.org to view the results of the latest test run. Contributing Please report bugs and make feature requests here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/housleyjk/ws-rs"	"— lightweight, event-driven WebSockets for Rust"	"true"
"Web programming"	""	"https://travis-ci.org/housleyjk/ws-rs"	"— lightweight, event-driven WebSockets for Rust"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Travis CI - Test and Deploy Your Code with Confidence Hey there! Looks like you have JavaScript disabled. The Travis CI webclient needs JavaScript to work properly. Please enable JavaScript to get the best Travis CI experience. Thank you!"	"null"	"null"	"— lightweight, event-driven WebSockets for Rust"	"true"
