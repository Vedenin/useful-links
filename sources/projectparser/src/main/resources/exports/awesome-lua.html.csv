"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Implementations, Interpreters, and Bindings"	"Lua"	"http://www.lua.org/download.html"	"Lua's original ANSI C interpreter."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"975"	"78"	"91"	"GitHub - LewisJEllis/awesome-lua: A curated list of quality Lua packages and resources. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 78 Star 975 Fork 91 LewisJEllis/awesome-lua Code Issues 3 Pull requests 6 Pulse Graphs A curated list of quality Lua packages and resources. 72 commits 1 branch 0 releases 17 contributors Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 5d8e9bd Feb 23, 2016 LewisJEllis Merge pull request #29 from JaredSartin/master … Adds more game engines. Permalink Failed to load latest commit information. contributing.md First commit of awesome-lua. Aug 17, 2014 readme.md Merge pull request #29 from JaredSartin/master Feb 23, 2016 readme.md Awesome Lua A curated list of quality Lua packages and resources. Inspired by the lists awesome, awesome-awesomeness, and awesome-nodejs. Packages Implementations, Interpreters, and Bindings Package Managers Debugging and Profiling IDEs and Plugins Utility Belts Game Engines Game Development Logging Web/Networking Platforms OpenResty Command-line Utilities Concurrency and Multithreading Templating Documentation Object-oriented Programming Filesystem and OS Time and Date Image Manipulation Digital Signal Processing Hardware and Embedded Systems Math and Scientific Computing Parsing Humanize Compression Cryptography Network Data Stores Testing Foreign Function Interfaces Analysis Tools and ASTs Experimental, etc Scriptable by Lua Miscellaneous Resources References Style Guides Tutorials Articles Talks & Slides Books Other Lists Implementations, Interpreters, and Bindings Lua - Lua's original ANSI C interpreter. LuaJIT - High-performance Just-In-Time compiler for Lua. LLVM-Lua - Compiles Lua to LLVM. lua.vm.js - Lua VM on the web; a direct port of the C interpreter via LLVM, emscripten, and asm.js. Moonshine - A Lua VM implemented in JavaScript. Slower than lua.vm.js, but with better docs, examples, and JS interfacing. MoonSharp - A Lua interpreter written entirely in C# for the .NET, Mono and Unity platforms. UniLua - A pure C# implementation of Lua 5.2, focused on compatibility with the Unity game engine. lupa - Python bindings to LuaJIT2. golua - Golang bindings to the Lua C API. GopherLua - Lua 5.1 VM and compiler implemented in Go with Go APIs. Note: From LuaJIT to Lua to lua.vm.js to Moonshine, a basic benchmark sees performance drop by roughly a factor of 6 with each hop. Package Managers LuaRocks - Allows you to install Lua modules as packages called ""rocks"", which contain version and dependency information. Much like npm or pip. MoonRocks - Public Lua rock repository, website, and uploading tool. Default server used by LuaRocks. Debugging and Profiling ProFi - Simple profiler that works with LuaJIT and produces a report file. luatrace - Toolset for tracing/analyzing/profiling script execution and generating detailed reports. StackTracePlus - Drop-in upgrade to Lua's stack traces which adds local context and improves readability. MobDebug - Powerful remote debugger with breakpoints and stack inspection. Used by ZeroBraneStudio. lovebird - Browser-based debug console. Originally made for LÖVE, but works in any project with LuaSocket support. IDEs and Plugins Lua Development Tools - Eclipse plugin which provides code completion, debugging, and more. Built on Metalua. Lua for IDEA - IntelliJ IDEA plugin which, among other things, provides code completion, smart highlighting, and experimental debugging. ZeroBraneStudio - Lightweight, customizable, cross-platform Lua-dedicated IDE with code completion and analysis, written in Lua. Has broad debugging support for numerous Lua engines. Babelua - Lua editor/debugger, extension for Visual Studio 2012/2013. Has code highlight, auto-completion, syntax checking and formatting, file previewing, debugging capabilities integrated into Visual Studio. Utility Belts Lua Fun - High-performance functional programming library designed for LuaJIT. Moses - Functional programming utility belt, inspired by Underscore.js. Penlight - Broad, heavyweight utility library, inspired by Python's standard libs. Provides the batteries that Lua doesn't. lua-stdlib - Middle-weight standard library extension; adds some useful data structures, utility functions, and basic functional stuff. Microlight - A little library of useful Lua functions; the 'extra light' version of Penlight. Game Engines LÖVE 2D - Desktop game development platform. Cross-platform, feature-complete, well-adopted. Corona SDK - Development platform for iOS and Android. Proprietary, but used by numerous top games and apps, totaling over 150 million downloads. MOAI - Open source, cross-platform, mobile game development framework. Minimalist C++ engine powered by Lua scripting. Drystal - Open source, games can run on Linux or on any platform with a recent web browser. Amulet - Open source, audio/visual toolkit suitable for small games and experimentation. It runs on Windows, Mac, Linux, HTML5 and iOS. gengine - A 2d game engine for fast development, using entities and components system, for Linux, Windows and HTML5. Game Development Corona Coronium.io - Simple cloud platform supporting analytics, data objects, user management, and more. LÖVE awesome-love2d - A list like this one, but focused on game dev and the LÖVE platform. lurker - Shortens the iteration cycle by auto-swapping changed Lua files in a running LÖVE project. HUMP - A set of lightweight helpers for LÖVE; a game-oriented utility belt. MOAI moaifiddle - Edit and share short scripts for the MOAI game engine and run them in the browser using WebGL. Jumper - Fast, lightweight, and easy-to-use pathfinding library for grid-based games. lume - Utility belt library geared toward game development. NoobHub - Network multiplayer for Corona, LÖVE, and more, following a simple pub-sub model. Collision detection bump.lua - Minimal rectangle-based collision detection which handles tunnelling and basic collision resolution. HardonCollider - Detect collisions between arbitrarily positioned and rotated shapes of any type. Tweening flux - A fast, lightweight tweening library for Lua with easing functions and the ability to group tweens together. tween.lua - Small library for tweening, with several easing functions. Examples termtris - A tetris clone, written in literate style with ""an emphasis on learn-from-ability"". PacPac - A Pac-man clone, made with LÖVE. Mari0 - Fusion of Mario and Portal, made with LÖVE. See also its wikipedia entry. Journey to the Center of Hawkthorne - 2D platformer based on Community's Digital Estate Planning episode, made with LÖVE. Logging log-lua - Asynchronous logging library with pluggable writers for filesystem, network, ZeroMQ, and more. Web/Networking Platforms OpenResty - A fast and scalable web application platform created by extending Nginx with Lua. Today's de-facto Lua web platform, used heavily by Cloudflare, Taobao, Tencent, and others. turbo - Event-driven, non-blocking, LuaJIT-based networking suite and framework, inspired by Tornado. Kepler Project - A collection of web-oriented projects using a common set of standards and components. Pegasus.lua - Pegasus.lua is a http server to work with web applications written in Lua language. OpenResty awesome-resty - A list like this one, but focused on OpenResty. Core platform ngx_lua - The core piece of OpenResty. Embeds Lua in Nginx and exposes, among other things, the cosocket API for non-blocking sockets (compatible with LuaSocket's API). OpenResty GitHub Organization - Home of the repositories for ngx_lua, ngx_openresty, and many related modules. Third-party modules lua-resty-http - Lua HTTP client driver, built on the cosocket API. Frameworks & tools Lapis - Full-stack framework for Lua and OpenResty. Like the Django or Rails of Lua. Supports Moonscript. ledge - Lua module providing scriptable, RFC-compliant HTTP cache functionality. Sailor — An MVC web framework compatible with OpenResty, Apache and other webservers. Kong - Microservice & API Management Layer Search this page for 'OpenResty' to find related packages under other categories (data stores in particular). Command-line Utilities ansicolors - Simple function for printing to the console in color. cliargs - A simple command-line argument parsing module. lua-term - Terminal operations and manipulations. argparse - A feature-rich command line parser inspired by argparse for Python. Concurrency and Multithreading Coroutine-based multitasking: Lumen - Simple concurrent task scheduling. ConcurrentLua - Implements an Erlang-style message-passing concurrency model. Multithreading: llthreads - A simple wrapper for low-level pthreads & WIN32 threads. lanes - Library implementing a message passing model with one OS thread per Lua thread. luaproc - Message-passing model which allows multiple threads per OS thread and easily generalizes across a network. See also the paper where it originated. For more on the differences (particularly between lanes and luaproc), see this comparison of options; somewhat dated, but covers how each one works and the significant differences. Templating lustache - Mustache template implementation. etlua - Embedded Lua templates, ERB-style. lua-resty-template - Lua-oriented template engine for OpenResty, somewhat Jinja-like. Documentation LDoc - Documentation generator which modernizes and extends LuaDoc. Locco - Lua port of Docco, the ""quick-and-dirty, hundred-line-long, literate-programming-style documentation generator"". docroc - Parse comments into a Lua table to generate documentation. Object-oriented Programming 30log - Minimalist OOP library with basic classes, inheritance, and mixins in 30 lines. middleclass - Simple but robust OOP library with inheritance, methods, metamethods, class variables and mixins. Filesystem and OS LuaFileSystem - Extends and complements Lua's built-in set of filesystem functions. luaposix - Bindings for POSIX APIs, including curses. Time and Date LuaDate - Date and time module with parsing, formatting, addition/subtraction, localization, and ISO 8601 support. cron.lua - Time-related functions for Lua, inspired by JavaScript's setTimeout and setInterval. Image Manipulation magick - Lua bindings to ImageMagick for LuaJIT using FFI. Digital Signal Processing LuaFFT - An easy to use Fast Fourier Transformation package in pure Lua. Worp - Sound/music/DSP engine written for LuaJIT. Hardware and Embedded Systems eLua - Lua, extended with optimizations and specific features for efficient and portable embedded software development. Math and Scientific Computing SciLua - Numerical/scientific computing framework built on LuaJIT, with an interface to R. Torch7 - Scientific computing framework with wide support for machine learning algorithms, used by Facebook, Google, and more. lhf's Lua Tools - Assorted libraries and tools, many math-related. Parsing JSON lua-cjson - Blazing fast JSON encoding/decoding implemented in C and exposed to Lua. luajson - JSON encoder/decoder implemented in Lua on top of LPeg. dkjson - JSON encoder/decoder implemented in pure Lua. XML LuaExpat - SAX XML parser via binding to the Expat library. SLAXML - Pure Lua SAX-like streaming XML parser. lyaml - YAML encoding/decoding via binding to LibYAML. LPeg - A pattern-matching library for Lua, based on Parsing Expression Grammars. lunamark - Converts Markdown to other textual formats including HTML and LaTeX. Uses LPeg for fast parsing. Humanize i18n.lua - Internationalization library with locales, formatting, and pluralization. inspect.lua - Human-readable representation of Lua tables. serpent - Serializer and pretty printer. Ser - Dead simple serializer with good performance. Compression lua-zlib - Simple streaming interface to zlib for gzip/gunzip. lua-zip - Lua binding to libzip. Reads and writes zip files. Cryptography LuaCrypto - Lua bindings to OpenSSL. lua-lockbox - A collection of cryptographic primitives written in pure Lua. Network LuaSocket - Networking extension which provides a socket API for TCP and UDP, and implements HTTP, FTP, and SMTP. lua-websockets - WebSocket client and server modules. Webserver-agnostic, implemented in Lua on top of LuaSocket. Data Stores LuaSQL - Simple interface for connecting to ODBC, ADO, Oracle, MySQL, SQLite and PostgreSQL. redis-lua - Pure Lua client library for Redis. pgmoon - Lua PostgreSQL driver for OpenResty and others. lua-resty-mysql - Lua MySQL driver for OpenResty. lua-resty-redis - Lua Redis client driver for OpenResty. lua-resty-cassandra - Lua Cassandra client driver for OpenResty and others. Testing busted - BDD-style unit testing framework with great docs and Moonscript support. telescope - Flexible and highly customizable testing library. luassert - Assertion library extending Lua's built-in assertions. lust - Minimal test framework. Foreign Function Interfaces LuaJIT FFI - LuaJIT's mechanism for calling external C functions and using C data structures from pure Lua code. luaffi - Standalone FFI library, compatible with the LuaJIT FFI interface. Analysis Tools and ASTs luadec51 - Lua Decompiler for Lua version 5.1. luacov - Simple coverage analyzer, used by busted and telescope for checking test coverage. luacheck - Simple static analyzer which detects accidental globals and undefined or shadowed locals. Metalua - Pure Lua parser and compiler, used for generating ASTs. A number of other tools make use of the Metalua parser in this way. LuaInspect - Lua's most powerful code analysis and linting tool, built on Metalua. Used by ZeroBraneStudio, among others. LuaMinify - Minifier which also brings its own static analysis tools, lexer, and parser. Typed Lua - A typed superset of Lua that compiles to plain Lua. Experimental, etc punchdrunk.js - Moonshine + LÖVE API reimplementation = run LÖVE games in the browser. luvit - Node.js's underlying architecture (libUV) with Lua on top instead of JavaScript. graphql-lua - Lua implementation of GraphQL. Scriptable by Lua luakit - Fast, small, webkit based browser framework extensible by Lua. Hammerspoon - A powerful, extensible OS X automation tool. A community-maintained fork of Mjolnir. kpie - A scripting utility to juggle windows. lumail - A console-based mail client, with extensive scripting capabilities. AwesomeWM - A highly configurable and extensible window manager for X, scripted and configured by Lua. Textadept - Extremely lightweight, customizable, cross-platform editor, written (mostly) in (and scripted by) Lua. KoReader - An ebook reader application supports PDF, DJVU, EPUB, FB2 and much more, running on Kindle, Kobo, PocketBook and Android devices. Miscellaneous MoonScript - Moonscript is a dynamic scripting language that compiles to Lua. It reduces verbosity and provides a rich set of features like comprehensions and classes. Its author calls it 'CoffeeScript for Lua'. sitegen - A static site generator which uses MoonScript and supports HTML and Markdown, page grouping, and plugins. Resources References Reference Manual - The official definition of the Lua language. lua-users wiki - A large community-maintained collection of Lua information and resources, supplementing the official website. Lua Unofficial FAQ - Answers all sorts of Lua-related questions, including many of the form 'How to ___?'. lua-l - The official Lua mailing list, and one of the focal points of the Lua community. Style Guides Lua-users style guide - A general, high-level style guide; unopinionated, easily agreed on. Olivine style guide - A more opinionated and specific, and therefore more rigorous, guide. Tutorials Lua Crash Course - Short crash course readover, or reference for when you forget the basics. Learn Lua in 15 Minutes - A well-commented example file which covers the basics. Learning Lua from JS - An overview of the similarities and differences between Lua and JS; a great start for JavaScript folks looking to pick up Lua. lua-users tutorial - In-depth collection of tutorials aimed at newcomers. Lua Missions - A series of 'Missions' to work through which are designed to teach aspects of Lua along the way. Creating an Image Server - Walks through setting up and using OpenResty to build a simple image processing server; a great starting point for playing with OpenResty. Articles Embedding Lua in C - An introductory walkthrough of embedding Lua in a C program. A bit dated, but still a great walkthrough. Lua: Good, bad, and ugly parts - A thorough summary of the good, different, bad, and ugly aspects of Lua, including many subtle quirks, by the author of ZeroBraneStudio. Lua states, libraries, coroutines and memory - Diagrams and explains some more advanced concepts of the Lua VM, particularly when interfacing with C. Talks & Slides Roberto's Talks - History of talks given by Lua's chief architect, with slides for each. Lua Workshop Talks - High-quality talks are given at each ~annual Lua Workshop, and a history of them is online, slides included. Books Programming in Lua - The authoritative intro to all aspects of Lua programming, written by Lua's chief architect. Three editions released; first edition available online. Programming Gems - A collection of articles covering existing wisdom and practices on programming well in Lua, in a broad variety of use cases. Lua Programming - A shorter overview of the language, up to date for Lua 5.2, and available online. Other Lists awesome-resty - A list like this one, but focused on OpenResty. awesome-love2d - A list like this one, but focused on game dev and the LÖVE platform. awesome-lua by @forhappy - Another list similar to this one. It goes into more depth in a few categories, but has less breadth. Where Lua is Used - A comprehensive list of stand-alone programs written in or extensible using Lua. Contribute Contributions welcome and wanted! Read the contribution guidelines first. License To the extent possible under law, Lewis Ellis has waived all copyright and related or neighboring rights to this work. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/LewisJEllis/awesome-lua"	"Lua's original ANSI C interpreter."	"true"
"Implementations, Interpreters, and Bindings"	"LuaJIT"	"http://luajit.org/luajit.html"	"High-performance Just-In-Time compiler for Lua."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LuaJIT LuaJIT LuaJIT Home LuaJIT Download ⇩ Installation Running Extensions FFI Library FFI Tutorial ffi.* API FFI Semantics jit.* Library Lua/C API Status Changes FAQ Performance on x86/x64 on ARM on PPC on PPC/e500 on MIPS Wiki » Mailing List Sponsors LuaJIT is a Just-In-Time Compiler (JIT) for the Lua programming language. Lua is a powerful, dynamic and light-weight programming language. It may be embedded or used as a general-purpose, stand-alone language. LuaJIT is Copyright © 2005-2016 Mike Pall, released under the MIT open source license. Compatibility Windows Linux BSD OSX POSIX Embedded Android iOS PS3 PS4 PS Vita Xbox 360 GCC CLANG LLVM MSVC x86 x64 ARM PPC e500 MIPS Lua 5.1 API+ABI + JIT + BitOp + FFI Drop-in DLL/.so Overview 3x -  100x 115 KB VM 90 KB JIT 63 KLOC C 24 KLOC ASM 11 KLOC Lua LuaJIT has been successfully used as a scripting middleware in games, appliances, network and graphics apps, numerical simulations, trading platforms and many other specialty applications. It scales from embedded devices, smartphones, desktops up to server farms. It combines high flexibility with high performance and an unmatched low memory footprint. LuaJIT has been in continuous development since 2005. It's widely considered to be one of the fastest dynamic language implementations. It has outperformed other dynamic languages on many cross-language benchmarks since its first release — often by a substantial margin. For LuaJIT 2.0, the whole VM has been rewritten from the ground up and relentlessly optimized for performance. It combines a high-speed interpreter, written in assembler, with a state-of-the-art JIT compiler. An innovative trace compiler is integrated with advanced, SSA-based optimizations and highly tuned code generation backends. A substantial reduction of the overhead associated with dynamic languages allows it to break into the performance range traditionally reserved for offline, static language compilers. More ... Please select a sub-topic in the navigation bar to learn more about LuaJIT. Copyright © 2005-2016 Mike Pall · Contact – IMPRESSUM"	"null"	"null"	"High-performance Just-In-Time compiler for Lua."	"true"
"Implementations, Interpreters, and Bindings"	"LLVM-Lua"	"https://github.com/neopallium/llvm-lua"	"Compiles Lua to LLVM."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"0"	"1"	"GitHub - Neopallium/llvm-lua: Automatically exported from code.google.com/p/llvm-lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 0 Star 10 Fork 1 Neopallium/llvm-lua Code Issues 4 Pull requests 0 Pulse Graphs Automatically exported from code.google.com/p/llvm-lua 147 commits 2 branches 0 releases 2 contributors C 65.2% Lua 16.8% C++ 13.9% CMake 3.0% Other 1.1% C Lua C++ CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master wiki Nothing to show Nothing to show New pull request Latest commit 65123d2 Jun 18, 2012 Neopallium Major cleanup of lua-compiler & lua-cross-compiler scripts. … Remove dead/old/broken compiling modes. Permalink Failed to load latest commit information. cmake Remove debug print. Jun 16, 2012 doc Update to Official Lua-5.1.4 Sep 19, 2008 etc Remove old broken Makefiles. Jun 2, 2012 llvm-lua Major cleanup of lua-compiler & lua-cross-compiler scripts. Jun 18, 2012 src Fix coroutine support for ARM Thumb mode. Jun 17, 2012 test Initial 0.1 release Aug 23, 2008 tools Add script to split HG patch sets. Jun 2, 2012 .gitignore Move .svnignore to .gitignore Jun 2, 2012 .hgignore Add hgignore Jun 2, 2012 AUTHORS Added ChangeLog, Improved lua-compiler & lua-cross-compiler. Oct 18, 2009 CMakeLists.txt Add some sane CROSS_COMPILE defaults. Jun 16, 2012 COPYRIGHT Initial 0.1 release Aug 23, 2008 ChangeLog Update to LLVM 2.7 API. Apr 22, 2010 HISTORY Initial 0.1 release Aug 23, 2008 INSTALL Initial 0.1 release Aug 23, 2008 README Initial 0.1 release Aug 23, 2008 README.llvm-lua Update install instructions. Mar 28, 2012 TODO Update TODO list. Feb 6, 2011 cmake_uninstall.cmake.in Added MacOSX framework support. Oct 7, 2009 gen_changelog.sh Added ChangeLog, Improved lua-compiler & lua-cross-compiler. Oct 18, 2009 README README for Lua 5.1  See INSTALL for installation instructions. See HISTORY for a summary of changes since the last released version.  * What is Lua?   ------------   Lua is a powerful, light-weight programming language designed for extending   applications. Lua is also frequently used as a general-purpose, stand-alone   language. Lua is free software.    For complete information, visit Lua's web site at http://www.lua.org/ .   For an executive summary, see http://www.lua.org/about.html .    Lua has been used in many different projects around the world.   For a short list, see http://www.lua.org/uses.html .  * Availability   ------------   Lua is freely available for both academic and commercial purposes.   See COPYRIGHT and http://www.lua.org/license.html for details.   Lua can be downloaded at http://www.lua.org/download.html .  * Installation   ------------   Lua is implemented in pure ANSI C, and compiles unmodified in all known   platforms that have an ANSI C compiler. In most Unix-like platforms, simply   do ""make"" with a suitable target. See INSTALL for detailed instructions.  * Origin   ------   Lua is developed at Lua.org, a laboratory of the Department of Computer   Science of PUC-Rio (the Pontifical Catholic University of Rio de Janeiro   in Brazil).   For more information about the authors, see http://www.lua.org/authors.html .  (end of README)  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/neopallium/llvm-lua"	"Compiles Lua to LLVM."	"true"
"Implementations, Interpreters, and Bindings"	"lua.vm.js"	"https://github.com/kripken/lua.vm.js"	"Lua VM on the web; a direct port of the C interpreter via LLVM, emscripten, and asm.js."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"562"	"53"	"64"	"GitHub - daurnimator/lua.vm.js: The Lua VM, on the Web Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 53 Star 562 Fork 64 daurnimator/lua.vm.js Code Issues 14 Pull requests 0 Wiki Pulse Graphs The Lua VM, on the Web 196 commits 2 branches 0 releases Fetching contributors C 46.2% HTML 29.5% JavaScript 20.5% Lua 1.3% Makefile 0.9% CSS 0.7% Other 0.9% C HTML JavaScript Lua Makefile CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 7ec5ef0 May 22, 2016 daurnimator src/lua.js: Give each state their own 'refs' array. … This prevents an issue where multiple VMs on the one page can get confused that they already have an object referenced Permalink Failed to load latest commit information. dist src/lua.js: Give each state their own 'refs' array. May 22, 2016 lua Export emscripten Module object Mar 9, 2016 src src/lua.js: Give each state their own 'refs' array. May 22, 2016 .gitignore add gitignore May 26, 2013 COPYING README, COPYING: Update copyright Mar 9, 2016 README.markdown Updates links May 22, 2016 package.json Updates links May 22, 2016 README.markdown lua.vm.js The Lua VM, on the Web Online demo: http://daurnimator.github.io/lua.vm.js/lua.vm.js.html Status This began as an experiment to see how fast the Lua VM can run on the web. That was successful (performance is quite good in both firefox and chrome). Next step is to iterate on the Lua <=> JS interoperability. Clever solutions to the lack of finalisers in Javascript are being searched for. Building To build, run make emscripten in the lua subdirectory Usage from NodeJS $ npm install lua.vm.js  And inside your script: var LuaVM = require('lua.vm.js');  var l = new LuaVM.Lua.State(); l.execute('print(""Hello, world"")');  License This project is MIT/X11 licensed. Please see the COPYING file in the source package for more information. Copyright (c) 2013 Alon Zakai (kripken) Copyright (c) 2014-2016 Daurnimator Lua is licensed under MIT. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kripken/lua.vm.js"	"Lua VM on the web; a direct port of the C interpreter via LLVM, emscripten, and asm.js."	"true"
"Implementations, Interpreters, and Bindings"	"Moonshine"	"https://github.com/gamesys/moonshine"	"A Lua VM implemented in JavaScript. Slower than lua.vm.js, but with better docs, examples, and JS interfacing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"348"	"23"	"21"	"GitHub - gamesys/moonshine: A lightweight Lua VM for the browser Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 348 Fork 21 gamesys/moonshine Code Issues 11 Pull requests 3 Wiki Pulse Graphs A lightweight Lua VM for the browser http://moonshinejs.org 490 commits 4 branches 16 releases Fetching contributors Lua 57.7% JavaScript 39.4% CSS 1.1% Groff 0.7% HTML 0.6% ActionScript 0.5% Lua JavaScript CSS Groff HTML ActionScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bugfix_modulo dev master pattern-fixes Nothing to show 0.2.1 0.1.4 0.1.3 0.1.0 0.0.12 0.0.11 0.0.10 0.0.9 0.0.8 0.0.7 0.0.6 0.0.5 0.0.4 0.0.3 0.0.2 0.0.1 Nothing to show New pull request Latest commit ddec86a Jul 23, 2015 jkempster Updated package.json for tagging Permalink Failed to load latest commit information. bin Merge pull request #13 from goto-bus-stop/patch-1 Jan 30, 2015 distillery License changed: GPL -> MIT Jan 28, 2015 extensions License changed: GPL -> MIT Jan 28, 2015 test Added minified and test-package files Jul 22, 2015 vm Added minified and test-package files Jul 22, 2015 .gitignore More debugger overhaul. Sep 9, 2013 LICENSE.txt License changed: GPL -> MIT Jan 28, 2015 README.md License changed: GPL -> MIT Jan 28, 2015 index.js License changed: GPL -> MIT Jan 28, 2015 package.json Updated package.json for tagging Jul 23, 2015 README.md Moonshine A lightweight Lua virtual machine. http://moonshinejs.org Getting started Please read the Getting Started guide on the Moonshine site. Reporting issues Please report any bugs/issue in the Github Issue tracker. Contributing If you wish to contribute to the Moonshine project, please make every effort to match the existing coding style, conventions and layout. Thanks. License Moonshine is released under MIT license. Copyright (c) 2013-2015 Gamesys Limited. All rights reserved. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gamesys/moonshine"	"A Lua VM implemented in JavaScript. Slower than lua.vm.js, but with better docs, examples, and JS interfacing."	"true"
"Implementations, Interpreters, and Bindings"	"MoonSharp"	"https://github.com/xanathar/moonsharp"	"A Lua interpreter written entirely in C# for the.NET, Mono and Unity platforms."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"248"	"51"	"43"	"GitHub - xanathar/moonsharp: An interpreter for the Lua language, written entirely in C# for the .NET, Mono, Xamarin and Unity3D platforms, including handy remote debugger facilities. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 51 Star 248 Fork 43 xanathar/moonsharp Code Issues 25 Pull requests 3 Pulse Graphs An interpreter for the Lua language, written entirely in C# for the .NET, Mono, Xamarin and Unity3D platforms, including handy remote debugger facilities. http://www.moonsharp.org 285 commits 4 branches 26 releases 7 contributors C# 67.4% Lua 27.3% JavaScript 2.8% CSS 1.0% HTML 0.7% Makefile 0.4% Other 0.4% C# Lua JavaScript CSS HTML Makefile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop feature/Hardwire_commandline_support master release/1.5.0.0 Nothing to show v1.6.0.0 v1.5.0.1 v.1.2.1.0 v1.1.0.0 v1.0.0.0 v0.9.8.0 v0.9.0 v0.8.5.1 v0.8.5 v0.8.2.1 v0.8.2 v0.8.1 v0.8.0 v0.7.0 v0.6.0 v0.5.5 v0.5.3 v0.5.0 v0.2.0.0 v0.1.9.1 post-0.1.1 0.9.6.2 0.9.6 0.9.4 0.9.2 0.1.9 Nothing to show New pull request Latest commit 8799723 Jul 7, 2016 xanathar Fast stack dynamic fixes Permalink Failed to load latest commit information. src Fast stack dynamic fixes Jul 7, 2016 .gitattributes other files Jun 18, 2014 .gitignore Flash debugger Nov 4, 2014 .travis.yml Final ver of proxy objects. Commented AOT tests in Travis build. Seem… Jan 23, 2016 LICENSE REPL Mar 31, 2015 README.md updated readme. May 27, 2016 bfg.jar UnityTestsUpdate Mar 20, 2015 README.md MoonSharp http://www.moonsharp.org A complete Lua solution written entirely in C# for the .NET, Mono, Xamarin and Unity3D platforms. Features: 99% compatible with Lua 5.2 (with the only unsupported feature being weak tables support) Support for metalua style anonymous functions (lambda-style) Easy to use API Source based remote debugger accessible with a web browser and Flash (PCL targets not supported) Runs on .NET 3.5, .NET 4.x, Mono, Xamarin and Unity3D Runs on Ahead-of-time platforms like iOS Runs on IL2CPP converted code Runs on platforms requiring a .NET 4.x portable class library (e.g. Windows Phone) No external dependencies, implemented in as few targets as possible Easy and performant interop with CLR objects, with runtime code generation where supported Interop with methods, extension methods, overloads, fields, properties and indexers supported Support for the complete Lua standard library with very few exceptions (mostly located on the 'debug' module) and a few extensions (in the string library, mostly) Async methods for .NET 4.x targets Supports dumping/loading bytecode for obfuscation and quicker parsing at runtime Easy opt-out of Lua standard library modules to sandbox what scripts can access Easy to use error handling (script errors are exceptions) Support for coroutines, including invocation of coroutines as C# iterators REPL interpreter, plus facilities to easily implement your own REPL in few lines of code Complete XML help, and walkthroughs on http://www.moonsharp.org For highlights on differences between MoonSharp and standard Lua, see http://www.moonsharp.org/moonluadifferences.html Please see http://www.moonsharp.org for downloads, infos, tutorials, etc. License The program and libraries are released under a 3-clause BSD license - see the license section. Parts of the string library are based on the KopiLua project (https://github.com/NLua/KopiLua). Debugger icons are from the Eclipse project (https://www.eclipse.org/). Usage Use of the library is easy as: double MoonSharpFactorial() {     string script = @""             -- defines a factorial function         function fact (n)             if (n == 0) then                 return 1             else                 return n*fact(n - 1)             end         end      return fact(5)"";      DynValue res = Script.RunString(script);     return res.Number; } For more in-depth tutorials, samples, etc. please refer to http://www.moonsharp.org/getting_started.html Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/xanathar/moonsharp"	"A Lua interpreter written entirely in C# for the.NET, Mono and Unity platforms."	"true"
"Implementations, Interpreters, and Bindings"	"UniLua"	"https://github.com/xebecnan/UniLua"	"A pure C# implementation of Lua 5.2, focused on compatibility with the Unity game engine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"688"	"158"	"253"	"GitHub - xebecnan/UniLua: A pure c# implementation of Lua 5.2 focus on compatibility with Unity Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 158 Star 688 Fork 253 xebecnan/UniLua Code Issues 17 Pull requests 0 Wiki Pulse Graphs A pure c# implementation of Lua 5.2 focus on compatibility with Unity 59 commits 1 branch 0 releases Fetching contributors C# 58.3% Lua 41.6% C 0.1% C# Lua C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit b6277d6 Feb 13, 2015 xebecnan Merge pull request #56 from oinkgms/fix-cjk-problem … Fix cjk problem Permalink Failed to load latest commit information. Assets change: using StreamReader Feb 12, 2015 ProjectSettings upgrade project to Unity3D 4.3.1 May 25, 2014 .gitignore 增加从 AssetBundle 中加载字节码并运行的示例代码 Nov 3, 2013 LICENSE init commit Jan 25, 2013 README.md Update README.md Aug 2, 2014 README.md UniLua A pure C# implementation of Lua 5.2 focus on compatibility with Unity3D. UniLua是一个纯C#的Lua 5.2实现，专注于与Unity3D的兼容性。 一些补充说明 UniLua 主要关注的还是对 lua 本身的实现，而不是怎么把 Unity3D 引擎提供的功能都引入到 lua 里。 从 lua 调用 C# 函数不建议使用 FFI 库(虽然示例工程里用了，看起来方便，但是并不完善，效率也不好)。建议参考 从 Lua 调用 C# 函数 ( Calling C# funcitons from Lua ) 来自己实现封装函数。 示例工程 ( Sample Project ) To demonstrate the basic use of UniLua, a sample project is included. Open Assets\Stages\GameMain.unity with Unity3D, and just click the ""Play"" button. An icon will appear in the screen, and you can move it around with WSAD keys. 项目中包含了一个微型的示例工程，用来演示 UniLua 的基本使用。 用 Unity3D 打开 Assets\Stages\GameMain.unity 然后直接点击播放按钮运行。 屏幕上会显示一个小图标，你可以用 WSAD 键控制它四处移动。 开发状况 ( Development Status ) 基本特性 ( Basic features ) 所有 Lua 的基本语言特性都已实现，包括协程和元表，并且与 Lua5.2 标准实现一致。部分 GC 相关的元方法如 __gc 和 __mode 未实现 ( All language features are implemented exactly the same as the standard Lua 5.2, including coroutine and metatable, except some GC-related metamethods like __gc and __mode. ) 内置库 ( Libraries ) Base lib: done Package lib: done Coroutine lib: done Table lib: done IO lib: not implemented 因为暂时没有需求 ( not needed in our games right now ) OS lib: not implemented 因为暂时没有需求 ( not needed in our games right now ) String lib: partially implemented 因为暂时没有需求 ( not needed in our games right now ) Debug lib: partially implemented 勉强够用了 ( barely enough ) 额外实现的库 ( Additional Libraries ) FFI lib: basicly done 实验性质,不建议在要求性能的环境下使用 ( experimental. not suggested to use in performance-critical situation ) Encoding lib: basicly done 支持在 UTF-8 编码和 UTF-16 编码间进行转换 ( support convert between UTF-8 and UTF-16 ) TODO Complete string lib. Complete debug lib. 已知的问题 ( Known Issues ) Metamethod '__gc' will not working. 因为没有自己实现GC机制,而是依赖于C#的GC ( for directly depending on C#'s GC mechanism ) Weak tables is not supported: '__mode' will not working. 原因同上 ( the same reason mentioned above ) full userdata is not supported SciMark test on Unity3D 4.3.1, Windows 7, Intel i5-3470 FFT 1.07 [1024] SOR 2.51 [100] MC 0.66 SPARSE 1.59 [1000, 5000] LU 1.84 [100] SciMark 1.53 [small problem sizes] 常用链接 ( Links ) Wiki首页 (Wiki Homepage) 一些简单的说明 ( Quick Start ) 从 C# 调用 Lua ( Calling Lua function from C# ) 从 Lua 调用 C# 函数 ( Calling C# funcitons from Lua ) 从AssetBundle加载代码 ( Loading code from asset bundles ) UTF-8 support Reference: Lua functions Reference: C# API Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/xebecnan/UniLua"	"A pure C# implementation of Lua 5.2, focused on compatibility with the Unity game engine."	"true"
"Implementations, Interpreters, and Bindings"	"lupa"	"https://github.com/scoder/lupa"	"Python bindings to LuaJIT2."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"311"	"17"	"38"	"GitHub - scoder/lupa: Lua in Python Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 311 Fork 38 scoder/lupa Code Issues 23 Pull requests 1 Pulse Graphs Lua in Python http://pypi.python.org/pypi/lupa 409 commits 3 branches 24 releases 9 contributors Python 99.8% C++ 0.2% Python C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix-locking master table_from Nothing to show lupa-1.2 lupa-1.1 lupa-1.0.1 lupa-1.0 lupa-1.0b1 lupa-0.21 lupa-0.20 lupa-0.19 lupa-0.18 lupa-0.17 lupa-0.16 lupa-0.15 lupa-0.14 lupa-0.13.1 lupa-0.13 lupa-0.12 lupa-0.10 lupa-0.8 lupa-0.7 lupa-0.6 lupa-0.5 lupa-0.4 lupa-0.3 lupa-0.2 Nothing to show New pull request Latest commit e2e3d32 Apr 12, 2016 scoder prepare release of Lupa 1.3 Permalink Failed to load latest commit information. lupa clarify name of global constant Apr 12, 2016 .gitignore update VCS ignore lists Mar 12, 2014 .hgignore update VCS ignore lists Mar 12, 2014 .hgtags Added tag lupa-1.2 for changeset ad51e2f1242b Oct 10, 2015 .travis.yml Enable Travis pip caching Apr 6, 2016 CHANGES.rst changelog Apr 12, 2016 INSTALL.rst Add pkg-config to OS X installation instructions Jun 6, 2015 LICENSE.txt relicense to MIT, prepare release of 0.14 Aug 31, 2010 MANIFEST.in remove MANIFEST file from sdist Oct 11, 2014 README.rst README: Syntax highlight doctests Oct 14, 2015 requirements.txt Enable Travis pip caching Apr 6, 2016 setup.py prepare release of Lupa 1.3 Apr 12, 2016 tox.ini Use tox-travis Apr 6, 2016 README.rst Lupa Lupa integrates the runtimes of Lua or LuaJIT2 into CPython. It is a partial rewrite of LunaticPython in Cython with some additional features such as proper coroutine support. For questions not answered here, please contact the Lupa mailing list. Major features Why the name? Why use it? Examples Python objects in Lua Iteration in Lua None vs. nil Lua Tables Python Callables Lua Coroutines Threading Restricting Lua access to Python objects Importing Lua binary modules Major features separate Lua runtime states through a LuaRuntime class Python coroutine wrapper for Lua coroutines iteration support for Python objects in Lua and Lua objects in Python proper encoding and decoding of strings (configurable per runtime, UTF-8 by default) frees the GIL and supports threading in separate runtimes when calling into Lua tested with Python 2.6/3.2 and later written for LuaJIT2 (tested with LuaJIT 2.0.2), but also works with the normal Lua interpreter (5.1 and 5.2) easy to hack on and extend as it is written in Cython, not C Why the name? In Latin, ""lupa"" is a female wolf, as elegant and wild as it sounds. If you don't like this kind of straight forward allegory to an endangered species, you may also happily assume it's just an amalgamation of the phonetic sounds that start the words ""Lua"" and ""Python"", two from each to keep the balance. Why use it? It complements Python very well. Lua is a language as dynamic as Python, but LuaJIT compiles it to very fast machine code, sometimes faster than many statically compiled languages for computational code. The language runtime is very small and carefully designed for embedding. The complete binary module of Lupa, including a statically linked LuaJIT2 runtime, only weighs some 700KB on a 64 bit machine. With standard Lua 5.1, it's less than 400KB. However, the Lua ecosystem lacks many of the batteries that Python readily includes, either directly in its standard library or as third party packages. This makes real-world Lua applications harder to write than equivalent Python applications. Lua is therefore not commonly used as primary language for large applications, but it makes for a fast, high-level and resource-friendly backup language inside of Python when raw speed is required and the edit-compile-run cycle of binary extension modules is too heavy and too static for agile development or hot-deployment. Lupa is a very fast and thin wrapper around Lua or LuaJIT. It makes it easy to write dynamic Lua code that accompanies dynamic Python code by switching between the two languages at runtime, based on the tradeoff between simplicity and speed. Examples >>> import lupa >>> from lupa import LuaRuntime >>> lua = LuaRuntime(unpack_returned_tuples=True)  >>> lua.eval('1+1') 2  >>> lua_func = lua.eval('function(f, n) return f(n) end')  >>> def py_add1(n): return n+1 >>> lua_func(py_add1, 2) 3  >>> lua.eval('python.eval("" 2 ** 2 "")') == 4 True >>> lua.eval('python.builtins.str(4)') == '4' True The function lua_type(obj) can be used to find out the type of a wrapped Lua object in Python code, as provided by Lua's type() function: >>> lupa.lua_type(lua_func) 'function' >>> lupa.lua_type(lua.eval('{}')) 'table' To help in distinguishing between wrapped Lua objects and normal Python objects, it returns None for the latter: >>> lupa.lua_type(123) is None True >>> lupa.lua_type('abc') is None True >>> lupa.lua_type({}) is None True Note the flag unpack_returned_tuples=True that is passed to create the Lua runtime. It is new in Lupa 0.21 and changes the behaviour of tuples that get returned by Python functions. With this flag, they explode into separate Lua values: >>> lua.execute('a,b,c = python.eval(""(1,2)"")') >>> g = lua.globals() >>> g.a 1 >>> g.b 2 >>> g.c is None True When set to False, functions that return a tuple pass it through to the Lua code: >>> non_explode_lua = lupa.LuaRuntime(unpack_returned_tuples=False) >>> non_explode_lua.execute('a,b,c = python.eval(""(1,2)"")') >>> g = non_explode_lua.globals() >>> g.a (1, 2) >>> g.b is None True >>> g.c is None True Since the default behaviour (to not explode tuples) might change in a later version of Lupa, it is best to always pass this flag explicitly. Python objects in Lua Python objects are either converted when passed into Lua (e.g. numbers and strings) or passed as wrapped object references. >>> wrapped_type = lua.globals().type     # Lua's own type() function >>> wrapped_type(1) == 'number' True >>> wrapped_type('abc') == 'string' True Wrapped Lua objects get unwrapped when they are passed back into Lua, and arbitrary Python objects get wrapped in different ways: >>> wrapped_type(wrapped_type) == 'function'  # unwrapped Lua function True >>> wrapped_type(len) == 'userdata'       # wrapped Python function True >>> wrapped_type([]) == 'userdata'        # wrapped Python object True Lua supports two main protocols on objects: calling and indexing. It does not distinguish between attribute access and item access like Python does, so the Lua operations obj[x] and obj.x both map to indexing. To decide which Python protocol to use for Lua wrapped objects, Lupa employs a simple heuristic. Pratically all Python objects allow attribute access, so if the object also has a __getitem__ method, it is preferred when turning it into an indexable Lua object. Otherwise, it becomes a simple object that uses attribute access for indexing from inside Lua. Obviously, this heuristic will fail to provide the required behaviour in many cases, e.g. when attribute access is required to an object that happens to support item access. To be explicit about the protocol that should be used, Lupa provides the helper functions as_attrgetter() and as_itemgetter() that restrict the view on an object to a certain protocol, both from Python and from inside Lua: >>> lua_func = lua.eval('function(obj) return obj[""get""] end') >>> d = {'get' : 'value'}  >>> value = lua_func(d) >>> value == d['get'] == 'value' True  >>> value = lua_func( lupa.as_itemgetter(d) ) >>> value == d['get'] == 'value' True  >>> dict_get = lua_func( lupa.as_attrgetter(d) ) >>> dict_get == d.get True >>> dict_get('get') == d.get('get') == 'value' True  >>> lua_func = lua.eval( ...     'function(obj) return python.as_attrgetter(obj)[""get""] end') >>> dict_get = lua_func(d) >>> dict_get('get') == d.get('get') == 'value' True Note that unlike Lua function objects, callable Python objects support indexing in Lua: >>> def py_func(): pass >>> py_func.ATTR = 2  >>> lua_func = lua.eval('function(obj) return obj.ATTR end') >>> lua_func(py_func) 2 >>> lua_func = lua.eval( ...     'function(obj) return python.as_attrgetter(obj).ATTR end') >>> lua_func(py_func) 2 >>> lua_func = lua.eval( ...     'function(obj) return python.as_attrgetter(obj)[""ATTR""] end') >>> lua_func(py_func) 2 Iteration in Lua Iteration over Python objects from Lua's for-loop is fully supported. However, Python iterables need to be converted using one of the utility functions which are described here. This is similar to the functions like pairs() in Lua. To iterate over a plain Python iterable, use the python.iter() function. For example, you can manually copy a Python list into a Lua table like this: >>> lua_copy = lua.eval(''' ...     function(L) ...         local t, i = {}, 1 ...         for item in python.iter(L) do ...             t[i] = item ...             i = i + 1 ...         end ...         return t ...     end ... ''')  >>> table = lua_copy([1,2,3,4]) >>> len(table) 4 >>> table[1]   # Lua indexing 1 Python's enumerate() function is also supported, so the above could be simplified to: >>> lua_copy = lua.eval(''' ...     function(L) ...         local t = {} ...         for index, item in python.enumerate(L) do ...             t[ index+1 ] = item ...         end ...         return t ...     end ... ''')  >>> table = lua_copy([1,2,3,4]) >>> len(table) 4 >>> table[1]   # Lua indexing 1 For iterators that return tuples, such as dict.iteritems(), it is convenient to use the special python.iterex() function that automatically explodes the tuple items into separate Lua arguments: >>> lua_copy = lua.eval(''' ...     function(d) ...         local t = {} ...         for key, value in python.iterex(d.items()) do ...             t[key] = value ...         end ...         return t ...     end ... ''')  >>> d = dict(a=1, b=2, c=3) >>> table = lua_copy( lupa.as_attrgetter(d) ) >>> table['b'] 2 Note that accessing the d.items method from Lua requires passing the dict as attrgetter. Otherwise, attribute access in Lua would use the getitem protocol of Python dicts and look up d['items'] instead. None vs. nil While None in Python and nil in Lua differ in their semantics, they usually just mean the same thing: no value. Lupa therefore tries to map one directly to the other whenever possible: >>> lua.eval('nil') is None True >>> is_nil = lua.eval('function(x) return x == nil end') >>> is_nil(None) True The only place where this cannot work is during iteration, because Lua considers a nil value the termination marker of iterators. Therefore, Lupa special cases None values here and replaces them by a constant python.none instead of returning nil: >>> _ = lua.require(""table"") >>> func = lua.eval(''' ...     function(items) ...         local t = {} ...         for value in python.iter(items) do ...             table.insert(t, value == python.none) ...         end ...         return t ...     end ... ''')  >>> items = [1, None ,2] >>> list(func(items).values()) [False, True, False] Lupa avoids this value escaping whenever it's obviously not necessary. Thus, when unpacking tuples during iteration, only the first value will be subject to python.none replacement, as Lua does not look at the other items for loop termination anymore. And on enumerate() iteration, the first value is known to be always a number and never None, so no replacement is needed. >>> func = lua.eval(''' ...     function(items) ...         for a, b, c, d in python.iterex(items) do ...             return {a == python.none, a == nil,   -->  a == python.none ...                     b == python.none, b == nil,   -->  b == nil ...                     c == python.none, c == nil,   -->  c == nil ...                     d == python.none, d == nil}   -->  d == nil ... ...         end ...     end ... ''')  >>> items = [(None, None, None, None)] >>> list(func(items).values()) [True, False, False, True, False, True, False, True]  >>> items = [(None, None)]   # note: no values for c/d => nil in Lua >>> list(func(items).values()) [True, False, False, True, False, True, False, True] Note that this behaviour changed in Lupa 1.0. Previously, the python.none replacement was done in more places, which made it not always very predictable. Lua Tables Lua tables mimic Python's mapping protocol. For the special case of array tables, Lua automatically inserts integer indices as keys into the table. Therefore, indexing starts from 1 as in Lua instead of 0 as in Python. For the same reason, negative indexing does not work. It is best to think of Lua tables as mappings rather than arrays, even for plain array tables. >>> table = lua.eval('{10,20,30,40}') >>> table[1] 10 >>> table[4] 40 >>> list(table) [1, 2, 3, 4] >>> list(table.values()) [10, 20, 30, 40] >>> len(table) 4  >>> mapping = lua.eval('{ [1] = -1 }') >>> list(mapping) [1]  >>> mapping = lua.eval('{ [20] = -20; [3] = -3 }') >>> mapping[20] -20 >>> mapping[3] -3 >>> sorted(mapping.values()) [-20, -3] >>> sorted(mapping.items()) [(3, -3), (20, -20)]  >>> mapping[-3] = 3     # -3 used as key, not index! >>> mapping[-3] 3 >>> sorted(mapping) [-3, 3, 20] >>> sorted(mapping.items()) [(-3, 3), (3, -3), (20, -20)] To simplify the table creation from Python, the LuaRuntime comes with a helper method that creates a Lua table from Python arguments: >>> t = lua.table(1, 2, 3, 4) >>> lupa.lua_type(t) 'table' >>> list(t) [1, 2, 3, 4]  >>> t = lua.table(1, 2, 3, 4, a=1, b=2) >>> t[3] 3 >>> t['b'] 2 A second helper method, .table_from(), is new in Lupa 1.1 and accepts any number of mappings and sequences/iterables as arguments. It collects all values and key-value pairs and builds a single Lua table from them. Any keys that appear in multiple mappings get overwritten with their last value (going from left to right). >>> t = lua.table_from([1, 2, 3], {'a': 1, 'b': 2}, (4, 5), {'b': 42}) >>> t['b'] 42 >>> t[5] 5 A lookup of non-existing keys or indices returns None (actually nil inside of Lua). A lookup is therefore more similar to the .get() method of Python dicts than to a mapping lookup in Python. >>> table[1000000] is None True >>> table['no such key'] is None True >>> mapping['no such key'] is None True Note that len() does the right thing for array tables but does not work on mappings: >>> len(table) 4 >>> len(mapping) 0 This is because len() is based on the # (length) operator in Lua and because of the way Lua defines the length of a table. Remember that unset table indices always return nil, including indices outside of the table size. Thus, Lua basically looks for an index that returns nil and returns the index before that. This works well for array tables that do not contain nil values, gives barely predictable results for tables with 'holes' and does not work at all for mapping tables. For tables with both sequential and mapping content, this ignores the mapping part completely. Note that it is best not to rely on the behaviour of len() for mappings. It might change in a later version of Lupa. Similar to the table interface provided by Lua, Lupa also supports attribute access to table members: >>> table = lua.eval('{ a=1, b=2 }') >>> table.a, table.b (1, 2) >>> table.a == table['a'] True This enables access to Lua 'methods' that are associated with a table, as used by the standard library modules: >>> string = lua.eval('string')    # get the 'string' library table >>> print( string.lower('A') ) a Python Callables As discussed earlier, Lupa allows Lua scripts to call Python functions and methods: >>> def add_one(num): ...     return num + 1 >>> lua_func = lua.eval('function(num, py_func) return py_func(num) end') >>> lua_func(48, add_one) 49  >>> class MyClass(): ...     def my_method(self): ...         return 345 >>> obj = MyClass() >>> lua_func = lua.eval('function(py_obj) return py_obj:my_method() end') >>> lua_func(obj) 345 Lua doesn't have a dedicated syntax for named arguments, so by default Python callables can only be called using positional arguments. A common pattern for implementing named arguments in Lua is passing them in a table as the first and only function argument. See http://lua-users.org/wiki/NamedParameters for more details. Lupa supports this pattern by providing two decorators: lupa.unpacks_lua_table for Python functions and lupa.unpacks_lua_table_method for methods of Python objects. Python functions/methods wrapped in these decorators can be called from Lua code as func(foo, bar), func{foo=foo, bar=bar} or func{foo, bar=bar}. Example: >>> @lupa.unpacks_lua_table ... def add(a, b): ...     return a + b >>> lua_func = lua.eval('function(a, b, py_func) return py_func{a=a, b=b} end') >>> lua_func(5, 6, add) 11 >>> lua_func = lua.eval('function(a, b, py_func) return py_func{a, b=b} end') >>> lua_func(5, 6, add) 11 If you do not control the function implementation, you can also just manually wrap a callable object when passing it into Lupa: >>> import operator >>> wrapped_py_add = lupa.unpacks_lua_table(operator.add)  >>> lua_func = lua.eval('function(a, b, py_func) return py_func{a, b} end') >>> lua_func(5, 6, wrapped_py_add) 11 There are some limitations: Avoid using lupa.unpacks_lua_table and lupa.unpacks_lua_table_method for functions where the first argument can be a Lua table. In this case py_func{foo=bar} (which is the same as py_func({foo=bar}) in Lua) becomes ambiguous: it could mean either ""call py_func with a named foo argument"" or ""call py_func with a positional {foo=bar} argument"". One should be careful with passing nil values to callables wrapped in lupa.unpacks_lua_table or lupa.unpacks_lua_table_method decorators. Depending on the context, passing nil as a parameter can mean either ""omit a parameter"" or ""pass None"". This even depends on the Lua version. It is possible to use python.none instead of nil to pass None values robustly. Arguments with nil values are also fine when standard braces func(a, b, c) syntax is used. Because of these limitations lupa doesn't enable named arguments for all Python callables automatically. Decorators allow to enable named arguments on a per-callable basis. Lua Coroutines The next is an example of Lua coroutines. A wrapped Lua coroutine behaves exactly like a Python coroutine. It needs to get created at the beginning, either by using the .coroutine() method of a function or by creating it in Lua code. Then, values can be sent into it using the .send() method or it can be iterated over. Note that the .throw() method is not supported, though. >>> lua_code = '''\ ...     function(N) ...         for i=0,N do ...             coroutine.yield( i%2 ) ...         end ...     end ... ''' >>> lua = LuaRuntime() >>> f = lua.eval(lua_code)  >>> gen = f.coroutine(4) >>> list(enumerate(gen)) [(0, 0), (1, 1), (2, 0), (3, 1), (4, 0)] An example where values are passed into the coroutine using its .send() method: >>> lua_code = '''\ ...     function() ...         local t,i = {},0 ...         local value = coroutine.yield() ...         while value do ...             t[i] = value ...             i = i + 1 ...             value = coroutine.yield() ...         end ...         return t ...     end ... ''' >>> f = lua.eval(lua_code)  >>> co = f.coroutine()   # create coroutine >>> co.send(None)        # start coroutine (stops at first yield)  >>> for i in range(3): ...     co.send(i*2)  >>> mapping = co.send(None)   # loop termination signal >>> sorted(mapping.items()) [(0, 0), (1, 2), (2, 4)] It also works to create coroutines in Lua and to pass them back into Python space: >>> lua_code = '''\ ...   function f(N) ...         for i=0,N do ...             coroutine.yield( i%2 ) ...         end ...   end ; ...   co1 = coroutine.create(f) ; ...   co2 = coroutine.create(f) ; ... ...   status, first_result = coroutine.resume(co2, 2) ;   -- starting! ... ...   return f, co1, co2, status, first_result ... '''  >>> lua = LuaRuntime() >>> f, co, lua_gen, status, first_result = lua.execute(lua_code)  >>> # a running coroutine:  >>> status True >>> first_result 0 >>> list(lua_gen) [1, 0] >>> list(lua_gen) []  >>> # an uninitialised coroutine:  >>> gen = co(4) >>> list(enumerate(gen)) [(0, 0), (1, 1), (2, 0), (3, 1), (4, 0)]  >>> gen = co(2) >>> list(enumerate(gen)) [(0, 0), (1, 1), (2, 0)]  >>> # a plain function:  >>> gen = f.coroutine(4) >>> list(enumerate(gen)) [(0, 0), (1, 1), (2, 0), (3, 1), (4, 0)] Threading The following example calculates a mandelbrot image in parallel threads and displays the result in PIL. It is based on a benchmark implementation for the Computer Language Benchmarks Game. lua_code = '''\     function(N, i, total)         local char, unpack = string.char, unpack         local result = """"         local M, ba, bb, buf = 2/N, 2^(N%8+1)-1, 2^(8-N%8), {}         local start_line, end_line = N/total * (i-1), N/total * i - 1         for y=start_line,end_line do             local Ci, b, p = y*M-1, 1, 0             for x=0,N-1 do                 local Cr = x*M-1.5                 local Zr, Zi, Zrq, Ziq = Cr, Ci, Cr*Cr, Ci*Ci                 b = b + b                 for i=1,49 do                     Zi = Zr*Zi*2 + Ci                     Zr = Zrq-Ziq + Cr                     Ziq = Zi*Zi                     Zrq = Zr*Zr                     if Zrq+Ziq > 4.0 then b = b + 1; break; end                 end                 if b >= 256 then p = p + 1; buf[p] = 511 - b; b = 1; end             end             if b ~= 1 then p = p + 1; buf[p] = (ba-b)*bb; end             result = result .. char(unpack(buf, 1, p))         end         return result     end '''  image_size = 1280   # == 1280 x 1280 thread_count = 8  from lupa import LuaRuntime lua_funcs = [ LuaRuntime(encoding=None).eval(lua_code)               for _ in range(thread_count) ]  results = [None] * thread_count def mandelbrot(i, lua_func):     results[i] = lua_func(image_size, i+1, thread_count)  import threading threads = [ threading.Thread(target=mandelbrot, args=(i,lua_func))             for i, lua_func in enumerate(lua_funcs) ] for thread in threads:     thread.start() for thread in threads:     thread.join()  result_buffer = b''.join(results)  # use PIL to display the image import Image image = Image.fromstring('1', (image_size, image_size), result_buffer) image.show() Note how the example creates a separate LuaRuntime for each thread to enable parallel execution. Each LuaRuntime is protected by a global lock that prevents concurrent access to it. The low memory footprint of Lua makes it reasonable to use multiple runtimes, but this setup also means that values cannot easily be exchanged between threads inside of Lua. They must either get copied through Python space (passing table references will not work, either) or use some Lua mechanism for explicit communication, such as a pipe or some kind of shared memory setup. Restricting Lua access to Python objects Lupa provides a simple mechanism to control access to Python objects. Each attribute access can be passed through a filter function as follows: >>> def filter_attribute_access(obj, attr_name, is_setting): ...     if isinstance(attr_name, unicode): ...         if not attr_name.startswith('_'): ...             return attr_name ...     raise AttributeError('access denied')  >>> lua = lupa.LuaRuntime( ...           register_eval=False, ...           attribute_filter=filter_attribute_access) >>> func = lua.eval('function(x) return x.__class__ end') >>> func(lua) Traceback (most recent call last):  ... AttributeError: access denied The is_setting flag indicates whether the attribute is being read or set. Note that the attributes of Python functions provide access to the current globals() and therefore to the builtins etc. If you want to safely restrict access to a known set of Python objects, it is best to work with a whitelist of safe attribute names. One way to do that could be to use a well selected list of dedicated API objects that you provide to Lua code, and to only allow Python attribute access to the set of public attribute/method names of these objects. Since Lupa 1.0, you can alternatively provide dedicated getter and setter function implementations for a LuaRuntime: >>> def getter(obj, attr_name): ...     if attr_name == 'yes': ...         return getattr(obj, attr_name) ...     raise AttributeError( ...         'not allowed to read attribute ""%s""' % attr_name)  >>> def setter(obj, attr_name, value): ...     if attr_name == 'put': ...         setattr(obj, attr_name, value) ...         return ...     raise AttributeError( ...         'not allowed to write attribute ""%s""' % attr_name)  >>> class X(object): ...     yes = 123 ...     put = 'abc' ...     noway = 2.1  >>> x = X()  >>> lua = lupa.LuaRuntime(attribute_handlers=(getter, setter)) >>> func = lua.eval('function(x) return x.yes end') >>> func(x)  # getting 'yes' 123 >>> func = lua.eval('function(x) x.put = ""ABC""; end') >>> func(x)  # setting 'put' >>> print(x.put) ABC >>> func = lua.eval('function(x) x.noway = 42; end') >>> func(x)  # setting 'noway' Traceback (most recent call last):  ... AttributeError: not allowed to write attribute ""noway"" Importing Lua binary modules This will usually work as is, but here are the details, in case anything goes wrong for you. To use binary modules in Lua, you need to compile them against the header files of the LuaJIT sources that you used to build Lupa, but do not link them against the LuaJIT library. Furthermore, CPython needs to enable global symbol visibility for shared libraries before loading the Lupa module. This can be done by calling sys.setdlopenflags(flag_values). Importing the lupa module will automatically try to set up the correct dlopen flags if it can find the platform specific DLFCN Python module that defines the necessary flag constants. In that case, using binary modules in Lua should work out of the box. If this setup fails, however, you have to set the flags manually. When using the above configuration call, the argument flag_values must represent the sum of your system's values for RTLD_NEW and RTLD_GLOBAL. If RTLD_NEW is 2 and RTLD_GLOBAL is 256, you need to call sys.setdlopenflags(258). Assuming that the Lua luaposix (posix) module is available, the following should work on a Linux system: >>> import sys >>> orig_dlflags = sys.getdlopenflags() >>> sys.setdlopenflags(258) >>> import lupa >>> sys.setdlopenflags(orig_dlflags)  >>> lua = lupa.LuaRuntime() >>> posix_module = lua.require('posix')     # doctest: +SKIP Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/scoder/lupa"	"Python bindings to LuaJIT2."	"true"
"Implementations, Interpreters, and Bindings"	"golua"	"https://github.com/aarzilli/golua"	"Golang bindings to the Lua C API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"275"	"26"	"90"	"GitHub - aarzilli/golua: Go bindings for Lua C API - in progress Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 275 Fork 90 aarzilli/golua forked from afitz/golua Code Issues 5 Pull requests 0 Wiki Pulse Graphs Go bindings for Lua C API - in progress 112 commits 4 branches 0 releases Fetching contributors Go 45.5% C 30.4% C++ 23.8% Lua 0.3% Go C C++ Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags afitz-dev lua5.2 master tests Nothing to show Nothing to show New pull request Pull request Compare This branch is 67 commits ahead of afitz:master. Latest commit d4351ab Apr 6, 2016 shanemhansen committed with Shane Hansen Use map to track gostate rather than slice … Fixes #44 and removes 4 byte per lua State leak. Permalink Failed to load latest commit information. example replaced example allocator in example/alloc.go with one that isn't br… Aug 6, 2013 lua Use map to track gostate rather than slice Apr 6, 2016 LICENSE added licensing info (MIT) Sep 22, 2010 README.md Insured that code that uses the old version of ArgCheck does not compile Dec 1, 2015 TODO new todo item Oct 27, 2012 README.md Go Bindings for the lua C API Simplest way to install: # go get -u github.com/aarzilli/golua/lua  Will work as long as your compiler can find a shared object called lua5.1 on linux, or lua anywhere else. If your linux system uses ""lua"" as the shared object name for lua (for example, Fedora Core does this) you can install using: # go get -u -tags llua github.com/aarzilli/golua/lua  You can then try to run the examples: $ cd /usr/local/go/src/pkg/github.com/aarzilli/golua/example/ $ go run basic.go $ go run alloc.go $ go run panic.go $ go run userdata.go  QUICK START Create a new Virtual Machine with: L := lua.NewState() L.OpenLibs() defer L.Close() Lua's Virtual Machine is stack based, you can call lua functions like this: // push ""print"" function on the stack L.GetField(lua.LUA_GLOBALSINDEX, ""print"") // push the string ""Hello World!"" on the stack L.PushString(""Hello World!"") // call print with one argument, expecting no results L.Call(1, 0) Of course this isn't very useful, more useful is executing lua code from a file or from a string: // executes a string of lua code err := L.DoString(""..."") // executes a file err = L.DoFile(filename) You will also probably want to publish go functions to the virtual machine, you can do it by: func adder(L *lua.State) int {     a := L.ToInteger(1)     b := L.ToInteger(2)     L.PushInteger(a + b)     return 1 // number of return values }  func main() {     L := lua.NewState()     defer L.Close()     L.OpenLibs()      L.Register(""adder"", adder)     L.DoString(""print(adder(2, 2))"") } ON ERROR HANDLING Lua's exceptions are incompatible with Go, golua works around this incompatibility by setting up protected execution environments in lua.State.DoString, lua.State.DoFile and lua.State.Call and turning every exception into a Go panic. This means that: In general you can't do any exception handling from Lua, pcall and xpcall are renamed to unsafe_pcall and unsafe_xpcall. They are only safe to be called from Lua code that never calls back to Go. Use at your own risk. The call to lua.State.Error, present in previous versions of this library, has been removed as it is nonsensical Method calls on a newly created lua.State happen in an unprotected environment, if Lua throws an exception as a result your program will be terminated. If this is undesirable perform your initialization like this: func LuaStateInit(L *lua.State) int {     … initialization goes here…     return 0 }  … L.PushGoFunction(LuaStateInit) err := L.Call(0, 0) … ON THREADS AND COROUTINES 'lua.State' is not thread safe, but the library itself is. Lua's coroutines exist but (to my knowledge) have never been tested and are likely to encounter the same problems that errors have, use at your own peril. ODDS AND ENDS Support for lua 5.2 is in the lua5.2 branch, this branch only supports lua5.1. Compiling from source yields only a static link library (liblua.a), you can either produce the dynamic link library on your own or use the luaa build tag. LUAJIT To link with luajit-2.0.x, you can use CGO_CFLAGS and CGO_LDFLAGS environment variables $ CGO_CFLAGS=`pkg-config luajit --cflags` $ CGO_LDFLAGS=`pkg-config luajit --libs` $ go get -f -u github.com/aarzilli/golua/lua  CONTRIBUTORS Adam Fitzgerald (original author) Alessandro Arzilli Steve Donovan Harley Laue James Nurmi Ruitao Xushiwei Isaint hsinhoyeh Viktor Palmkvist HongZhen Peng Admin36 Pierre Neidhardt (@Ambrevar) SEE ALSO Luar is a reflection layer on top of golua API providing a simplified way to publish go functions to a Lua VM. Licensing GoLua is released under the MIT license. Please see the LICENSE file for more information. Lua is Copyright (c) Lua.org, PUC-Rio. All rights reserved. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/aarzilli/golua"	"Golang bindings to the Lua C API."	"true"
"Implementations, Interpreters, and Bindings"	"GopherLua"	"https://github.com/yuin/gopher-lua"	"Lua 5.1 VM and compiler implemented in Go with Go APIs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1238"	"76"	"100"	"GitHub - yuin/gopher-lua: GopherLua: VM and compiler for Lua in Go Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 76 Star 1,238 Fork 100 yuin/gopher-lua Code Issues 2 Pull requests 0 Wiki Pulse Graphs GopherLua: VM and compiler for Lua in Go 179 commits 1 branch 0 releases 16 contributors Go 67.0% Lua 29.9% Yacc 2.5% Other 0.6% Go Lua Yacc Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit e57b640 Jul 15, 2016 yuin committed on GitHub Merge pull request #78 from bontibon/etcet … fix collectgarbage comment in README Permalink Failed to load latest commit information. .github Update the issue template May 5, 2016 _glua-tests Add more tests Apr 15, 2016 _lua5.1-tests Implement pattern match without the regexp package Oct 1, 2015 _tools Change inlinning comment position Oct 9, 2015 ast go fmt May 12, 2016 cmd/glua optimize multiline for glua Nov 9, 2015 parse go fmt May 12, 2016 pm Refactoring Oct 4, 2015 .travis.yml Add 1.6 Feb 22, 2016 LICENSE add a license file Feb 16, 2015 Makefile Add Makefile Oct 1, 2015 README.rst Merge pull request #78 from bontibon/etcet Jul 15, 2016 _state.go Refactoring Mar 4, 2016 _vm.go Improve performance Oct 9, 2015 alloc.go Preformance improvements Feb 22, 2016 auxlib.go Issue #74 : fix the bug to load empty file May 27, 2016 auxlib_test.go add failed test to find a bug to load empty file. May 27, 2016 baselib.go Issue #67 : fix the issue dofile report a wrong error Apr 25, 2016 channellib.go Using constants for module names. Fixed bad typecast in stringlib.go. Jan 20, 2016 channellib_test.go add more channellib tests Apr 28, 2015 compile.go Issue #37 : fixed compiler bugs in the function call expression Jul 5, 2015 config.go Implement pattern match without the regexp package Oct 1, 2015 coroutinelib.go Using constants for module names. Fixed bad typecast in stringlib.go. Jan 20, 2016 debuglib.go Refactoring Mar 4, 2016 function.go add GETTABLEKS, SETTABLEKS opecodes May 15, 2015 iolib.go Using constants for module names. Fixed bad typecast in stringlib.go. Jan 20, 2016 linit.go More fixes towards #55, #60. Jan 20, 2016 loadlib.go Using constants for module names. Fixed bad typecast in stringlib.go. Jan 20, 2016 mathlib.go Using constants for module names. Fixed bad typecast in stringlib.go. Jan 20, 2016 opcode.go optimize bulk OP_MOVE(introduce OP_MOVEN) May 17, 2015 oslib.go Using constants for module names. Fixed bad typecast in stringlib.go. Jan 20, 2016 package.go go fmt Apr 11, 2015 script_test.go Add more tests Apr 15, 2016 state.go Refactoring Mar 4, 2016 state_test.go Allow skipping of opening all libraries by default Sep 27, 2015 stringlib.go Add more tests Apr 15, 2016 table.go Improve docs Oct 9, 2015 table_test.go Add more tests Apr 15, 2016 tablelib.go Using constants for module names. Fixed bad typecast in stringlib.go. Jan 20, 2016 testutils_test.go add auxlib tests Apr 30, 2015 utils.go Preformance improvements Feb 22, 2016 value.go Issue #62 : debug.traceback now can take the 'level' arg Mar 4, 2016 vm.go Improve performance Oct 9, 2015 README.rst GopherLua: VM and compiler for Lua in Go. GopherLua is a Lua5.1 VM and compiler written in Go. GopherLua has a same goal with Lua: Be a scripting language with extensible semantics . It provides Go APIs that allow you to easily embed a scripting language to your Go host programs. Contents Design principle How about performance? Installation Usage Differences between Lua and GopherLua Standalone interpreter How to Contribute Libraries for GopherLua Donation License Author Design principle Be a scripting language with extensible semantics. User-friendly Go API The stack based API like the one used in the original Lua implementation will cause a performance improvements in GopherLua (It will reduce memory allocations and concrete type <-> interface conversions). GopherLua API is not the stack based API. GopherLua give preference to the user-friendliness over the performance. How about performance? GopherLua is not fast but not too slow, I think. There are some benchmarks on the wiki page . Installation go get github.com/yuin/gopher-lua GopherLua supports >= Go1.4. Usage GopherLua APIs perform in much the same way as Lua, but the stack is used only for passing arguments and receiving returned values. GopherLua supports channel operations. See ""Goroutines"" section. Import a package. import (     ""github.com/yuin/gopher-lua"" ) Run scripts in the VM. L := lua.NewState() defer L.Close() if err := L.DoString(`print(""hello"")`); err != nil {     panic(err) } L := lua.NewState() defer L.Close() if err := L.DoFile(""hello.lua""); err != nil {     panic(err) } Refer to Lua Reference Manual and Go doc for further information. Note that elements that are not commented in Go doc equivalent to Lua Reference Manual , except GopherLua uses objects instead of Lua stack indices. Data model All data in a GopherLua program is an LValue . LValue is an interface type that has following methods. String() string Type() LValueType Objects implement an LValue interface are Type name Go type Type() value Constants LNilType (constants) LTNil LNil LBool (constants) LTBool LTrue, LFalse LNumber float64 LTNumber - LString string LTString - LFunction struct pointer LTFunction - LUserData struct pointer LTUserData - LState struct pointer LTThread - LTable struct pointer LTTable - LChannel chan LValue LTChannel - You can test an object type in Go way(type assertion) or using a Type() value. lv := L.Get(-1) // get the value at the top of the stack if str, ok := lv.(lua.LString); ok {     // lv is LString     fmt.Println(string(str)) } if lv.Type() != lua.LTString {     panic(""string required."") } lv := L.Get(-1) // get the value at the top of the stack if tbl, ok := lv.(*lua.LTable); ok {     // lv is LTable     fmt.Println(L.ObjLen(tbl)) } Note that LBool , LNumber , LString is not a pointer. To test LNilType and LBool, You must use pre-defined constants. lv := L.Get(-1) // get the value at the top of the stack  if lv == LTrue { // correct }  if bl, ok == lv.(lua.LBool); ok && bool(bl) { // wrong } In Lua, both nil and false make a condition false. LVIsFalse and LVAsBool implement this specification. lv := L.Get(-1) // get the value at the top of the stack if LVIsFalse(lv) { // lv is nil or false }  if LVAsBool(lv) { // lv is neither nil nor false } Objects that based on go structs(LFunction. LUserData, LTable) have some public methods and fields. You can use these methods and fields for performance and debugging, but there are some limitations. Metatable does not work. No error handlings. Callstack & Registry size Size of the callstack & registry is fixed for mainly performance. You can change the default size of the callstack & registry. lua.RegistrySize = 1024 * 20 lua.CallStackSize = 1024 L := lua.NewState() defer L.Close() You can also create an LState object that has the callstack & registry size specified by Options . L := lua.NewState(lua.Options{     CallStackSize: 120,     RegistrySize:  120*20, }) An LState object that has been created by *LState#NewThread() inherits the callstack & registry size from the parent LState object. Miscellaneous lua.NewState options Options.SkipOpenLibs bool(default false) By default, GopherLua opens all built-in libraries when new LState is created. You can skip this behaviour by setting this to true . Using the various OpenXXX(L *LState) int functions you can open only those libraries that you require, for an example see below. Options.IncludeGoStackTrace bool(default false) By default, GopherLua does not show Go stack traces when panics occur. You can get Go stack traces by setting this to true . API Refer to Lua Reference Manual and Go doc(LState methods) for further information. Calling Go from Lua func Double(L *lua.LState) int {     lv := L.ToInt(1)             /* get argument */     L.Push(lua.LNumber(lv * 2)) /* push result */     return 1                     /* number of results */ }  func main() {     L := lua.NewState()     defer L.Close()     L.SetGlobal(""double"", L.NewFunction(Double)) /* Original lua_setglobal uses stack... */ } print(double(20)) -- > ""40"" Any function registered with GopherLua is a lua.LGFunction, defined in value.go type LGFunction func(*LState) int Working with coroutines. co := L.NewThread() /* create a new thread */ fn := L.GetGlobal(""coro"").(*lua.LFunction) /* get function from lua */ for {     st, err, values := L.Resume(co, fn)     if st == lua.ResumeError {         fmt.Println(""yield break(error)"")         fmt.Println(err.Error())         break     }      for i, lv := range values {         fmt.Printf(""%v : %v\n"", i, lv)     }      if st == lua.ResumeOK {         fmt.Println(""yield break(ok)"")         break     } } Opening a subset of builtin modules The following demonstrates how to open a subset of the built-in modules in Lua, say for example to avoid enabling modules with access to local files or system calls. main.go func main() {     L := lua.NewState(lua.Options{SkipOpenLibs: true})     defer L.Close()     for _, pair := range []struct {         n string         f lua.LGFunction     }{         {lua.LoadLibName, lua.OpenPackage}, // Must be first         {lua.BaseLibName, lua.OpenBase},         {lua.TabLibName, lua.OpenTable},     } {         if err := L.CallByParam(lua.P{             Fn:      L.NewFunction(pair.f),             NRet:    0,             Protect: true,         }, lua.LString(pair.n)); err != nil {             panic(err)         }     }     if err := L.DoFile(""main.lua""); err != nil {         panic(err)     } } Creating a module by Go mymodule.go package mymodule  import (     ""github.com/yuin/gopher-lua"" )  func Loader(L *lua.LState) int {     // register functions to the table     mod := L.SetFuncs(L.NewTable(), exports)     // register other stuff     L.SetField(mod, ""name"", lua.LString(""value""))      // returns the module     L.Push(mod)     return 1 }  var exports = map[string]lua.LGFunction{     ""myfunc"": myfunc, }  func myfunc(L *lua.LState) int {     return 0 } mymain.go package main  import (     ""./mymodule""     ""github.com/yuin/gopher-lua"" )  func main() {     L := lua.NewState()     defer L.Close()     L.PreloadModule(""mymodule"", mymodule.Loader)     if err := L.DoFile(""main.lua""); err != nil {         panic(err)     } } main.lua local m = require(""mymodule"") m.myfunc() print(m.name) Calling Lua from Go L := lua.NewState() defer L.Close() if err := L.DoFile(""double.lua""); err != nil {     panic(err) } if err := L.CallByParam(lua.P{     Fn: L.GetGlobal(""double""),     NRet: 1,     Protect: true,     }, lua.LNumber(10)); err != nil {     panic(err) } ret := L.Get(-1) // returned value L.Pop(1)  // remove received value If Protect is false, GopherLua will panic instead of returning an error value. User-Defined types You can extend GopherLua with new types written in Go. LUserData is provided for this purpose. type Person struct {     Name string }  const luaPersonTypeName = ""person""  // Registers my person type to given L. func registerPersonType(L *lua.LState) {     mt := L.NewTypeMetatable(luaPersonTypeName)     L.SetGlobal(""person"", mt)     // static attributes     L.SetField(mt, ""new"", L.NewFunction(newPerson))     // methods     L.SetField(mt, ""__index"", L.SetFuncs(L.NewTable(), personMethods)) }  // Constructor func newPerson(L *lua.LState) int {     person := &Person{L.CheckString(1)}     ud := L.NewUserData()     ud.Value = person     L.SetMetatable(ud, L.GetTypeMetatable(luaPersonTypeName))     L.Push(ud)     return 1 }  // Checks whether the first lua argument is a *LUserData with *Person and returns this *Person. func checkPerson(L *lua.LState) *Person {     ud := L.CheckUserData(1)     if v, ok := ud.Value.(*Person); ok {         return v     }     L.ArgError(1, ""person expected"")     return nil }  var personMethods = map[string]lua.LGFunction{     ""name"": personGetSetName, }  // Getter and setter for the Person#Name func personGetSetName(L *lua.LState) int {     p := checkPerson(L)     if L.GetTop() == 2 {         p.Name = L.CheckString(2)         return 0     }     L.Push(lua.LString(p.Name))     return 1 }  func main() {     L := lua.NewState()     defer L.Close()     registerPersonType(L)     if err := L.DoString(`         p = person.new(""Steeve"")         print(p:name()) -- ""Steeve""         p:name(""Alice"")         print(p:name()) -- ""Alice""     `); err != nil {         panic(err)     } } Goroutines The LState is not goroutine-safe. It is recommended to use one LState per goroutine and communicate between goroutines by using channels. Channels are represented by channel objects in GopherLua. And a channel table provides functions for performing channel operations. Some objects can not be sent over channels due to having non-goroutine-safe objects inside itself. a thread(state) a function an userdata a table with a metatable You must not send these objects from Go APIs to channels. func receiver(ch, quit chan lua.LValue) {     L := lua.NewState()     defer L.Close()     L.SetGlobal(""ch"", lua.LChannel(ch))     L.SetGlobal(""quit"", lua.LChannel(quit))     if err := L.DoString(`     local exit = false     while not exit do       channel.select(         {""|<-"", ch, function(ok, v)           if not ok then             print(""channel closed"")             exit = true           else             print(""received:"", v)           end         end},         {""|<-"", quit, function(ok, v)             print(""quit"")             exit = true         end}       )     end   `); err != nil {         panic(err)     } }  func sender(ch, quit chan lua.LValue) {     L := lua.NewState()     defer L.Close()     L.SetGlobal(""ch"", lua.LChannel(ch))     L.SetGlobal(""quit"", lua.LChannel(quit))     if err := L.DoString(`     ch:send(""1"")     ch:send(""2"")   `); err != nil {         panic(err)     }     ch <- lua.LString(""3"")     quit <- lua.LTrue }  func main() {     ch := make(chan lua.LValue)     quit := make(chan lua.LValue)     go receiver(ch, quit)     go sender(ch, quit)     time.Sleep(3 * time.Second) } Go API ToChannel, CheckChannel, OptChannel are available. Refer to Go doc(LState methods) for further information. Lua API channel.make([buf:int]) -> ch:channel Create new channel that has a buffer size of buf. By default, buf is 0. channel.select(case:table [, case:table, case:table ...]) -> {index:int, recv:any, ok} Same as the select statement in Go. It returns the index of the chosen case and, if that case was a receive operation, the value received and a boolean indicating whether the channel has been closed. case is a table that outlined below. receiving: {""|<-"", ch:channel [, handler:func(ok, data:any)]} sending: {""<-|"", ch:channel, data:any [, handler:func(data:any)]} default: {""default"" [, handler:func()]} channel.select examples: local idx, recv, ok = channel.select(   {""|<-"", ch1},   {""|<-"", ch2} ) if not ok then     print(""closed"") elseif idx == 1 then -- received from ch1     print(recv) elseif idx == 2 then -- received from ch2     print(recv) end channel.select(   {""|<-"", ch1, function(ok, data)     print(ok, data)   end},   {""<-|"", ch2, ""value"", function(data)     print(data)   end},   {""default"", function()     print(""default action"")   end} ) channel:send(data:any) Send data over the channel. channel:receive() -> ok:bool, data:any Receive some data over the channel. channel:close() Close the channel. The LState pool pattern To create per-thread LState instances, You can use the sync.Pool like mechanism. type lStatePool struct {     m     sync.Mutex     saved []*lua.LState }  func (pl *lStatePool) Get() *lua.LState {     pl.m.Lock()     defer pl.m.Unlock()     n := len(pl.saved)     if n == 0 {         return pl.New()     }     x := pl.saved[n-1]     pl.saved = pl.saved[0 : n-1]     return x }  func (pl *lStatePool) New() *lua.LState {     L := lua.NewState()     // setting the L up here.     // load scripts, set global variables, share channels, etc...     return L }  func (pl *lStatePool) Put(L *lua.LState) {     pl.m.Lock()     defer pl.m.Unlock()     pl.saved = append(pl.saved, L) }  func (pl *lStatePool) Shutdown() {     for _, L := range pl.saved {         L.Close()     } }  // Global LState pool var luaPool = &lStatePool{     saved: make([]*lua.LState, 0, 4), } Now, you can get per-thread LState objects from the luaPool . func MyWorker() {    L := luaPool.Get()    defer luaPool.Put(L)    /* your code here */ }  func main() {     defer luaPool.Shutdown()     go MyWorker()     go MyWorker()     /* etc... */ } Differences between Lua and GopherLua Goroutines GopherLua supports channel operations. GopherLua has a type named channel. The channel table provides functions for performing channel operations. Unsupported functions string.dump os.setlocale lua_Debug.namewhat package.loadlib debug hooks Miscellaneous notes collectgarbage does not take any arguments and runs the garbage collector for the entire Go program. file:setvbuf does not support a line buffering. Daylight saving time is not supported. GopherLua has a function to set an environment variable : os.setenv(name, value) Standalone interpreter Lua has an interpreter called lua . GopherLua has an interpreter called glua . go get github.com/yuin/gopher-lua/cmd/glua glua has same options as lua . How to Contribute See Guidlines for contributors . Libraries for GopherLua gopher-luar : Custom type reflection for gopher-lua gluamapper : Mapping a Lua table to a Go struct gluare : Regular expressions for gopher-lua gluahttp : HTTP request module for gopher-lua gopher-json : A simple JSON encoder/decoder for gopher-lua gluayaml : Yaml parser for gopher-lua glua-lfs : Partially implements the luafilesystem module for gopher-lua gluaurl : A url parser/builder module for gopher-lua gluahttpscrape : A simple HTML scraper module for gopher-lua Donation BTC: 1NEDSyUmo4SMTDP83JJQSWi1MvQUGGNMZB License MIT Author Yusuke Inuzuka Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/yuin/gopher-lua"	"Lua 5.1 VM and compiler implemented in Go with Go APIs."	"true"
"Package Managers"	"LuaRocks"	"http://luarocks.org/en"	"Allows you to install Lua modules as packages called ""rocks"", which contain version and dependency information. Much like npm or pip."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"658"	"64"	"143"	"Home · keplerproject/luarocks Wiki · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 64 Star 658 Fork 143 keplerproject/luarocks Code Issues 74 Pull requests 10 Wiki Pulse Graphs Home Hisham Muhammad edited this page Mar 18, 2015 · 5 revisions Pages 54 Home add Addon author's guide Browse rocks build Config file format Creating a Makefile that plays nice with LuaRocks Creating a rock Creating LuaRocks with GNU autotools Credits Dependencies Development Documentation Download download File formats File locations help install Installation instructions for Mac OS X Installation instructions for Unix Installation instructions for Windows Integrating distro modules with LuaRocks License list luarocks luarocks admin LuaRocks through a proxy Mailing list make make manifest make_manifest Manifest file format pack path Paths and external dependencies Platform agnostic external dependencies Platform overrides Recommended practices for Makefiles refresh cache Related work Release checklist Release history remove remove (luarocks admin) Rocks repositories Rockspec format search show To do list Types of rocks unpack upload Using LuaRocks Show 39 more pages… Clone this wiki locally Clone in Desktop This is LuaRocks, a deployment and management system for Lua modules. LuaRocks allows you to install Lua modules as self-contained packages called ""rocks"", which also contain dependency information. LuaRocks supports both local and remote repositories, and multiple local rocks trees. Download and install LuaRocks on Unix and Windows. Documentation is available from this wiki. LuaRocks is free software and uses the same license as Lua. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"null"	"Allows you to install Lua modules as packages called ""rocks"", which contain version and dependency information. Much like npm or pip."	"true"
"Package Managers"	"MoonRocks"	"https://rocks.moonscript.org/"	"Public Lua rock repository, website, and uploading tool. Default server used by LuaRocks."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LuaRocks - The Lua package manager Install · Docs · Log In · Register LuaRocks is the package manager for Lua modules. It allows you to create and install Lua modules as self-contained packages called rocks. You can download and install LuaRocks on Unix and Windows. Get started LuaRocks is free software and uses the same license as Lua. Recent Modules (View all) (Recent versions) stormpath-nginx by edjiang — downloads: 2 A Stormpath + nginx integration lua-resty-waf by p0pr0ck5 — downloads: 13 High-performance WAF built on the OpenResty stack dromozoa-dyld by moyu — downloads: 6 Dynamic linker utility lua-basex by un.def — downloads: 3 Base encoding/decoding of any given alphabet using bitcoin style leading zero compression wcwidth by aperezdc — downloads: 7 Pure Lua implementation of the wcwidth() function Most Downloaded(This week) lua-resty-string by rsander — downloads: 274,027 LuaSocket by luarocks — downloads: 273,270 Network support for the Lua language lua-cjson by luarocks — downloads: 261,599 Fast JSON encoding/parsing support for Lua LuaFileSystem by hisham — downloads: 261,027 File System Library for the Lua Programming Language LuaSec by brunoos — downloads: 248,653 A binding for OpenSSL library to provide TLS/SSL communication over LuaSocket. Daily Module Downloads(More graphs & stats) Quick Start Installing LuaRocks in a Unix system: $ wget http://luarocks.org/releases/luarocks-2.3.0.tar.gz $ tar zxpf luarocks-2.3.0.tar.gz $ cd luarocks-2.3.0 $ ./configure; sudo make bootstrap $ sudo luarocks install luasocket $ lua Lua 5.3.2 Copyright (C) 1994-2015 Lua.org, PUC-Rio > require ""socket""  On Windows? Installation instructions for Windows. Contributing Modules Anyone can upload and host Lua modules. Register an account and upload a .rockspec to create a new module. If your module name is not taken it will be added to the root manifest. After you have uploaded a .rockspec, you can upload .rock files for a specific version by going to the version’s page. Rock files ensure that your module will be installable as long as this site is up. The most recent version of LuaRocks supports uploading modules with the upload command: $ luarocks upload my_thing-1.0-1.rockspec  For older LuaRocks installations, you can use moonrocks: $ luarocks install moonrocks $ moonrocks upload my_thing-1.0-1.rockspec  Read more on the About Page. @luarocksorg · c67b64e · Source · IssuesHome · Search · Root Manifest · Manifests · Modules · Changes · About"	"null"	"null"	"Public Lua rock repository, website, and uploading tool. Default server used by LuaRocks."	"true"
"Debugging and Profiling"	"ProFi"	"https://gist.github.com/perky/2838755"	"Simple profiler that works with LuaJIT and produces a report file."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"ProFi, a simple lua profiler that works with LuaJIT and prints a pretty report file in columns. · GitHub Skip to content All gists GitHub Sign up for a GitHub account Sign in Create a gist now Instantly share code, notes, and snippets. Star 69 Fork 11 perky/ProFi.lua Created May 30, 2012 Embed What would you like to do? Embed Embed this gist in your website. Embed Share Copy sharable URL for this gist. Share Clone via HTTPS Clone with Git or checkout with SVN using the repository's web address. HTTPS Learn more about clone URLs Download ZIP Code Revisions 12 Stars 69 Forks 11 ProFi, a simple lua profiler that works with LuaJIT and prints a pretty report file in columns. Raw ProFi.lua --[[ ProFi v1.3, by Luke Perkin 2012. MIT Licence http://www.opensource.org/licenses/mit-license.php. Example: ProFi = require 'ProFi' ProFi:start() some_function() another_function() coroutine.resume( some_coroutine ) ProFi:stop() ProFi:writeReport( 'MyProfilingReport.txt' ) API: *Arguments are specified as: type/name/default. ProFi:start( string/once/nil ) ProFi:stop() ProFi:checkMemory( number/interval/0, string/note/'' ) ProFi:writeReport( string/filename/'ProFi.txt' ) ProFi:reset() ProFi:setHookCount( number/hookCount/0 ) ProFi:setGetTimeMethod( function/getTimeMethod/os.clock ) ProFi:setInspect( string/methodName, number/levels/1 ) ]] ----------------------- -- Locals: ----------------------- local ProFi = {} local onDebugHook, sortByDurationDesc, sortByCallCount, getTime local DEFAULT_DEBUG_HOOK_COUNT = 0 local FORMAT_HEADER_LINE = ""| %-50s: %-40s: %-20s: %-12s: %-12s: %-12s|\n"" local FORMAT_OUTPUT_LINE = ""| %s: %-12s: %-12s: %-12s|\n"" local FORMAT_INSPECTION_LINE = ""> %s: %-12s\n"" local FORMAT_TOTALTIME_LINE = ""| TOTAL TIME = %f\n"" local FORMAT_MEMORY_LINE = ""| %-20s: %-16s: %-16s| %s\n"" local FORMAT_HIGH_MEMORY_LINE = ""H %-20s: %-16s: %-16sH %s\n"" local FORMAT_LOW_MEMORY_LINE = ""L %-20s: %-16s: %-16sL %s\n"" local FORMAT_TITLE = ""%-50.50s: %-40.40s: %-20s"" local FORMAT_LINENUM = ""%4i"" local FORMAT_TIME = ""%04.3f"" local FORMAT_RELATIVE = ""%03.2f%%"" local FORMAT_COUNT = ""%7i"" local FORMAT_KBYTES = ""%7i Kbytes"" local FORMAT_MBYTES = ""%7.1f Mbytes"" local FORMAT_MEMORY_HEADER1 = ""\n=== HIGH & LOW MEMORY USAGE ===============================\n"" local FORMAT_MEMORY_HEADER2 = ""=== MEMORY USAGE ==========================================\n"" local FORMAT_BANNER = [[ ############################################################################################################### ##### ProFi, a lua profiler. This profile was generated on: %s ##### ProFi is created by Luke Perkin 2012 under the MIT Licence, www.locofilm.co.uk ##### Version 1.3. Get the most recent version at this gist: https://gist.github.com/2838755 ############################################################################################################### ]] ----------------------- -- Public Methods: ----------------------- --[[ Starts profiling any method that is called between this and ProFi:stop(). Pass the parameter 'once' to so that this methodis only run once. Example: ProFi:start( 'once' ) ]] function ProFi:start( param ) if param == 'once' then if self:shouldReturn() then return else self.should_run_once = true end end self.has_started = true self.has_finished = false self:resetReports( self.reports ) self:startHooks() self.startTime = getTime() end --[[ Stops profiling. ]] function ProFi:stop() if self:shouldReturn() then return end self.stopTime = getTime() self:stopHooks() self.has_finished = true end function ProFi:checkMemory( interval, note ) local time = getTime() local interval = interval or 0 if self.lastCheckMemoryTime and time < self.lastCheckMemoryTime + interval then return end self.lastCheckMemoryTime = time local memoryReport = { ['time'] = time; ['memory'] = collectgarbage('count'); ['note'] = note or ''; } table.insert( self.memoryReports, memoryReport ) self:setHighestMemoryReport( memoryReport ) self:setLowestMemoryReport( memoryReport ) end --[[ Writes the profile report to a file. Param: [filename:string:optional] defaults to 'ProFi.txt' if not specified. ]] function ProFi:writeReport( filename ) if #self.reports > 0 or #self.memoryReports > 0 then filename = filename or 'ProFi.txt' self:sortReportsWithSortMethod( self.reports, self.sortMethod ) self:writeReportsToFilename( filename ) print( string.format(""[ProFi]\t Report written to %s"", filename) ) end end --[[ Resets any profile information stored. ]] function ProFi:reset() self.reports = {} self.reportsByTitle = {} self.memoryReports = {} self.highestMemoryReport = nil self.lowestMemoryReport = nil self.has_started = false self.has_finished = false self.should_run_once = false self.lastCheckMemoryTime = nil self.hookCount = self.hookCount or DEFAULT_DEBUG_HOOK_COUNT self.sortMethod = self.sortMethod or sortByDurationDesc self.inspect = nil end --[[ Set how often a hook is called. See http://pgl.yoyo.org/luai/i/debug.sethook for information. Param: [hookCount:number] if 0 ProFi counts every time a function is called. if 2 ProFi counts every other 2 function calls. ]] function ProFi:setHookCount( hookCount ) self.hookCount = hookCount end --[[ Set how the report is sorted when written to file. Param: [sortType:string] either 'duration' or 'count'. 'duration' sorts by the time a method took to run. 'count' sorts by the number of times a method was called. ]] function ProFi:setSortMethod( sortType ) if sortType == 'duration' then self.sortMethod = sortByDurationDesc elseif sortType == 'count' then self.sortMethod = sortByCallCount end end --[[ By default the getTime method is os.clock (CPU time), If you wish to use other time methods pass it to this function. Param: [getTimeMethod:function] ]] function ProFi:setGetTimeMethod( getTimeMethod ) getTime = getTimeMethod end --[[ Allows you to inspect a specific method. Will write to the report a list of methods that call this method you're inspecting, you can optionally provide a levels parameter to traceback a number of levels. Params: [methodName:string] the name of the method you wish to inspect. [levels:number:optional] the amount of levels you wish to traceback, defaults to 1. ]] function ProFi:setInspect( methodName, levels ) if self.inspect then self.inspect.methodName = methodName self.inspect.levels = levels or 1 else self.inspect = { ['methodName'] = methodName; ['levels'] = levels or 1; } end end ----------------------- -- Implementations methods: ----------------------- function ProFi:shouldReturn( ) return self.should_run_once and self.has_finished end function ProFi:getFuncReport( funcInfo ) local title = self:getTitleFromFuncInfo( funcInfo ) local funcReport = self.reportsByTitle[ title ] if not funcReport then funcReport = self:createFuncReport( funcInfo ) self.reportsByTitle[ title ] = funcReport table.insert( self.reports, funcReport ) end return funcReport end function ProFi:getTitleFromFuncInfo( funcInfo ) local name = funcInfo.name or 'anonymous' local source = funcInfo.short_src or 'C_FUNC' local linedefined = funcInfo.linedefined or 0 linedefined = string.format( FORMAT_LINENUM, linedefined ) return string.format(FORMAT_TITLE, source, name, linedefined) end function ProFi:createFuncReport( funcInfo ) local name = funcInfo.name or 'anonymous' local source = funcInfo.source or 'C Func' local linedefined = funcInfo.linedefined or 0 local funcReport = { ['title'] = self:getTitleFromFuncInfo( funcInfo ); ['count'] = 0; ['timer'] = 0; } return funcReport end function ProFi:startHooks() debug.sethook( onDebugHook, 'cr', self.hookCount ) end function ProFi:stopHooks() debug.sethook() end function ProFi:sortReportsWithSortMethod( reports, sortMethod ) if reports then table.sort( reports, sortMethod ) end end function ProFi:writeReportsToFilename( filename ) local file, err = io.open( filename, 'w' ) assert( file, err ) self:writeBannerToFile( file ) if #self.reports > 0 then self:writeProfilingReportsToFile( self.reports, file ) end if #self.memoryReports > 0 then self:writeMemoryReportsToFile( self.memoryReports, file ) end file:close() end function ProFi:writeProfilingReportsToFile( reports, file ) local totalTime = self.stopTime - self.startTime local totalTimeOutput = string.format(FORMAT_TOTALTIME_LINE, totalTime) file:write( totalTimeOutput ) local header = string.format( FORMAT_HEADER_LINE, ""FILE"", ""FUNCTION"", ""LINE"", ""TIME"", ""RELATIVE"", ""CALLED"" ) file:write( header ) for i, funcReport in ipairs( reports ) do local timer = string.format(FORMAT_TIME, funcReport.timer) local count = string.format(FORMAT_COUNT, funcReport.count) local relTime = string.format(FORMAT_RELATIVE, (funcReport.timer / totalTime) * 100 ) local outputLine = string.format(FORMAT_OUTPUT_LINE, funcReport.title, timer, relTime, count ) file:write( outputLine ) if funcReport.inspections then self:writeInpsectionsToFile( funcReport.inspections, file ) end end end function ProFi:writeMemoryReportsToFile( reports, file ) file:write( FORMAT_MEMORY_HEADER1 ) self:writeHighestMemoryReportToFile( file ) self:writeLowestMemoryReportToFile( file ) file:write( FORMAT_MEMORY_HEADER2 ) for i, memoryReport in ipairs( reports ) do local outputLine = self:formatMemoryReportWithFormatter( memoryReport, FORMAT_MEMORY_LINE ) file:write( outputLine ) end end function ProFi:writeHighestMemoryReportToFile( file ) local memoryReport = self.highestMemoryReport local outputLine = self:formatMemoryReportWithFormatter( memoryReport, FORMAT_HIGH_MEMORY_LINE ) file:write( outputLine ) end function ProFi:writeLowestMemoryReportToFile( file ) local memoryReport = self.lowestMemoryReport local outputLine = self:formatMemoryReportWithFormatter( memoryReport, FORMAT_LOW_MEMORY_LINE ) file:write( outputLine ) end function ProFi:formatMemoryReportWithFormatter( memoryReport, formatter ) local time = string.format(FORMAT_TIME, memoryReport.time) local kbytes = string.format(FORMAT_KBYTES, memoryReport.memory) local mbytes = string.format(FORMAT_MBYTES, memoryReport.memory/1024) local outputLine = string.format(formatter, time, kbytes, mbytes, memoryReport.note) return outputLine end function ProFi:writeBannerToFile( file ) local banner = string.format(FORMAT_BANNER, os.date()) file:write( banner ) end function ProFi:writeInpsectionsToFile( inspections, file ) local inspectionsList = self:sortInspectionsIntoList( inspections ) file:write('\n==^ INSPECT ^======================================================================================================== COUNT ===\n') for i, inspection in ipairs( inspectionsList ) do local line = string.format(FORMAT_LINENUM, inspection.line) local title = string.format(FORMAT_TITLE, inspection.source, inspection.name, line) local count = string.format(FORMAT_COUNT, inspection.count) local outputLine = string.format(FORMAT_INSPECTION_LINE, title, count ) file:write( outputLine ) end file:write('===============================================================================================================================\n\n') end function ProFi:sortInspectionsIntoList( inspections ) local inspectionsList = {} for k, inspection in pairs(inspections) do inspectionsList[#inspectionsList+1] = inspection end table.sort( inspectionsList, sortByCallCount ) return inspectionsList end function ProFi:resetReports( reports ) for i, report in ipairs( reports ) do report.timer = 0 report.count = 0 report.inspections = nil end end function ProFi:shouldInspect( funcInfo ) return self.inspect and self.inspect.methodName == funcInfo.name end function ProFi:getInspectionsFromReport( funcReport ) local inspections = funcReport.inspections if not inspections then inspections = {} funcReport.inspections = inspections end return inspections end function ProFi:getInspectionWithKeyFromInspections( key, inspections ) local inspection = inspections[key] if not inspection then inspection = { ['count'] = 0; } inspections[key] = inspection end return inspection end function ProFi:doInspection( inspect, funcReport ) local inspections = self:getInspectionsFromReport( funcReport ) local levels = 5 + inspect.levels local currentLevel = 5 while currentLevel < levels do local funcInfo = debug.getinfo( currentLevel, 'nS' ) if funcInfo then local source = funcInfo.short_src or '[C]' local name = funcInfo.name or 'anonymous' local line = funcInfo.linedefined local key = source..name..line local inspection = self:getInspectionWithKeyFromInspections( key, inspections ) inspection.source = source inspection.name = name inspection.line = line inspection.count = inspection.count + 1 currentLevel = currentLevel + 1 else break end end end function ProFi:onFunctionCall( funcInfo ) local funcReport = ProFi:getFuncReport( funcInfo ) funcReport.callTime = getTime() funcReport.count = funcReport.count + 1 if self:shouldInspect( funcInfo ) then self:doInspection( self.inspect, funcReport ) end end function ProFi:onFunctionReturn( funcInfo ) local funcReport = ProFi:getFuncReport( funcInfo ) if funcReport.callTime then funcReport.timer = funcReport.timer + (getTime() - funcReport.callTime) end end function ProFi:setHighestMemoryReport( memoryReport ) if not self.highestMemoryReport then self.highestMemoryReport = memoryReport else if memoryReport.memory > self.highestMemoryReport.memory then self.highestMemoryReport = memoryReport end end end function ProFi:setLowestMemoryReport( memoryReport ) if not self.lowestMemoryReport then self.lowestMemoryReport = memoryReport else if memoryReport.memory < self.lowestMemoryReport.memory then self.lowestMemoryReport = memoryReport end end end ----------------------- -- Local Functions: ----------------------- getTime = os.clock onDebugHook = function( hookType ) local funcInfo = debug.getinfo( 2, 'nS' ) if hookType == ""call"" then ProFi:onFunctionCall( funcInfo ) elseif hookType == ""return"" then ProFi:onFunctionReturn( funcInfo ) end end sortByDurationDesc = function( a, b ) return a.timer > b.timer end sortByCallCount = function( a, b ) return a.count > b.count end ----------------------- -- Return Module: ----------------------- ProFi:reset() return ProFi agladysh commented Jan 7, 2013 Please consider moving this to a proper GitHub repo. robertwahler commented Feb 1, 2013 +1 for moving this to a repo, super useful, thanks for sharing. mindreframer commented Apr 5, 2013 +1 for a dedicated repo :))) mindreframer commented Apr 5, 2013 https://github.com/mindreframer/ProFi.lua poke me, when you have a proper git repository jucor commented May 8, 2013 +1 for a repo -- that would make keeping up-to-date, forking, reporting issues, etc, much easier :) wqren commented Jul 8, 2015 +1 for a repo. hanoixan commented Jan 5, 2016 I tested this code, and it looks like it has a fundamental flaw: it isn't compatible with recursion. In onFunctionReturn(), the funcReport is based on the funcInfo, which is singleton to each function. While funcReport.count is incremented correctly, funcReport.startTime will be reset on each successive onFunctionCall in the recursion. Each successive onFunctionRetrun will compute its time delta based on the last call to onFunctionCall in the recursion. I recommend tracking the start times in a stack, instead of the funcReport. AshishBora commented May 6, 2016 • edited I see that some functions take more time than overall (>100%). How can that be? Example output : ############################################################################################################### ProFi, a lua profiler. This profile was generated on: Fri May 6 01:18:22 2016 ProFi is created by Luke Perkin 2012 under the MIT Licence, www.locofilm.co.uk Version 1.3. Get the most recent version at this gist: https://gist.github.com/2838755 ############################################################################################################### | TOTAL TIME = 97.560000 | FILE : FUNCTION : LINE : TIME : RELATIVE : CALLED | | ...4001/ashishb/torch-cl/install/share/lua/5.1/nn/: clear : 203 : 68413.910 : 70124.96% : 188 | | get_example_C.lua : get_example : 11 : 60829.610 : 62350.97% : 23 | | ...01/ashishb/torch-cl/install/share/lua/5.1/torch: isTensor : 171 : 1901.330 : 1948.88% : 2027 | | training_funcs.lua : nextBatch : 107 : 72.140 : 73.94% : 11 | | preproc.lua : preprocess : 45 : 51.170 : 52.45% : 4224 | Sign up for free to join this conversation on GitHub. Already have an account? Sign in to comment Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://gist.github.com/perky/2838755"	"Simple profiler that works with LuaJIT and produces a report file."	"true"
"Debugging and Profiling"	"luatrace"	"https://github.com/geoffleyland/luatrace"	"Toolset for tracing/analyzing/profiling script execution and generating detailed reports."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"93"	"10"	"16"	"GitHub - geoffleyland/luatrace: A tool for tracing Lua script execution and analysing time profiles and coverage Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 93 Fork 16 geoffleyland/luatrace Code Issues 4 Pull requests 0 Pulse Graphs A tool for tracing Lua script execution and analysing time profiles and coverage 143 commits 1 branch 0 releases Fetching contributors Lua 90.0% C 6.5% Makefile 3.5% Lua C Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit d9d8918 Nov 30, 2015 geoffleyland Merge pull request #10 from urzds/fix/top-of-stack-may-be-nil … Prevent a nil-value error when events above the recorded stack are encountered Permalink Failed to load latest commit information. c fixed c89 errors reported for MSVC by Oskar Forsslund Oct 6, 2011 correct-traces update traces to match new luatrace May 1, 2011 lua Prevent a nil-value error when events above the recorded stack are en… Nov 24, 2015 rockspec fixed up scm-2 rockspec Sep 2, 2011 sh fixed up tracing to a given file, and added a note in the readme Feb 10, 2014 .gitignore added .dll to gitignore Apr 14, 2011 AUTHORS luatrace is a tool for tracing lua script execution and analysing tim… Mar 31, 2011 LICENSE luatrace is a tool for tracing lua script execution and analysing tim… Mar 31, 2011 README.md fixed up tracing to a given file, and added a note in the readme Feb 10, 2014 collect-traces updated the correct traces Apr 14, 2011 makefile moved -std=c89 to darwin only - that way I can see (some) MSVC proble… Mar 20, 2012 run-tests run tests tells you which lua it's using so you can be sure Apr 8, 2011 README.md luatrace - tracing, profiling and coverage for Lua 1. What? luatrace is a Lua module that collects information about what your code is doing and how long it takes, and can analyse that information to generate profile and coverage reports. luatrace adds a layer on top of Lua's debug hooks to make it easier to collect information for profiling and coverage analysis. luatrace traces of every line executed, not just calls. luatrace can trace through coroutine resumes and yields, and through xpcalls, pcalls and errors. On some platforms it uses high resolution timers to collect times of the order of nanoseconds. To use it, install luatrace with sudo make install, run your code with lua -luatrace <your lua file> and then analyse it with luatrace.profile. The profiler will display a list of the top 20 functions by time, and write a copy of all the source traced annotated with times for each line. Alternatively, you can local luatrace = require(""luatrace"") and surround the code you wish to trace with luatrace.tron() and luatrace.troff(). If you wish to use the profiler directly rather than on a trace file you can use lua -luatrace.profile <your lua file> or local luatrace = require(""luatrace.profile""). You can pass settings to luatrace.tron. Probably the only interesting one is the name of the file to write the trace to, for example, you might have Lua code that calls luatrace.tron{trace_file_name=""mytrace.txt""}. Later, you can run the profiler on this trace with the command-line luatrace.profile mytrace.txt. luatrace runs under ""plain"" Lua and LuaJIT with the -joff option (LuaJIT doesn't call hooks in compiled code, and luatrace loses track of where it's up to) luatrace is brought to you by Incremental (info@incremental.co.nz) and is available under the MIT Licence. 2. How? luatrace is separated into two parts - the trace collector, and the backends that record and process the traces. The trace collector uses Lua's debug hooks and adds timing information and a little bit of processing to make the traces easier to use. Timing is provided in one of three ways: Lua - with a debug hook calling os.clock LuaJIT - with a debug hook calling ffi.C.clock - os.clock is not yet implemented as a fast function Lua and LuaJIT - if the c_hook has been built then that's used instead of the Lua or LuaJIT hook. It's always better to use the C hook. By default the C hook uses the C library's clock and should call it closer to actual code execution, so the traces should be more accurate. On some plaforms the C hook uses a high-resolution timer: On mach plaforms (ie OS X), the c_hook uses the mach_absolute_time On Linux, it uses clock_gettime On Windows, it uses QueryPerformanceCounter However, although the timing might be collected at nanosecond resolution, there are many reasons why profiles are not accurate to within a nanosecond! The collector outputs traces by calling a recorder's record function with a range of arguments: (""S"", <filename>, <line>) - the trace has started somewhere in a function defined on line ("">"", <filename>, <line>) - there's been a call to a function defined on line (""T"", <filename>, <line>) - there's been a tailcall to a function defined on line (LuaJIT only) (""<"") - return from a function (""R"", <thread_id>) - Resume the thread thread_id (""Y"") - Yield (""P"") - pcall - the current line is protected for the duration of the following call (""E"") - Error - unwind the stack looking for a ""P"" (<line>, <time in microseconds>) - this many microseconds were just spent on this line of the current file At the moment, there's two recorders - luatrace.trace_file and luatrace.profile. trace_file is the default backend. It just writes the trace out to a file in a simple format, which it can also read. When it reads a file, it reads it to another recorder as if the recorder were watching the program execute. profile provides limited profile information. Backends will improve as I need them or as you patch/fork. 3. Requirements Lua or LuaJIT. 4. Issues It's really slow Tracing is overcomplicated and has to check the stack depth too frequently Profiling is very complicated when there's a lot on one line (one line functions) Times probably aren't accurate because of the time spent getting between user code and the hooks There aren't many backends 5. Wishlist More of the hook should be in C It would be nice if the recorder was in a separate Lua state and a separate thread 6. Alternatives See the Lua Wiki for a list of profiling alternatives. luacov provides coverage analysis. -jannotate - Annotate code with LuaJIT trace information 1. What? annotate.lua collects information about the traces LuaJIT is attempting and summarises that information in a format that doesn't contain as much information as -jdump, but which might be more useful for you. annotate.lua is installed with luatrace. To use it, luajit -jannotate mylua.lua. When your program exits, it will write a report to stdout detailing how many traces were attempted, how many were successful and how many were aborted. For the aborted traces, you'll get summaries of the reasons for the aborts, and the lines that caused the aborts. The report then lists bytecode for all the traces next to the source code. This listing is a little problematic, since bytecode order doesn't necessarily match source order, and traces cross function boundaries. The traces are listed in source order as much as practicable to make them easier to read. If you want to write the report to a separate file, then luajit -jannotate=report.txt. You can also use annotate.lua as a module: local annotate = require(""jit.annotate"") annotate.on() ... annotate.off() annotate.report(io.open(""report.txt"", ""w""))  2. Requirements LuaJIT (this won't work with plain Lua) 3. Wishlist It'd be nice to incorporate timing information from a profiler 4. Alternatives -jdump, -jbc, -jv etc LuaJIT trace API -jannotate uses some internal LuaJIT APIs. These are not intended for public use, and are subject to change without notice, however, here's some of what I've managed to learn. What follows is a bit rough, inaccurate, and very incomplete. These functions are used in several of the -j library files. dump.lua is probably a good place to start if you're looking for more information jit.attach You can attach callbacks to a number of compiler events with jit.attach. The callback can be called: when a function has been compiled to bytecode (""bc""); when trace recording starts or stops (""trace""); as a trace is being recorded (""record""); or when a trace exits through a side exit (""texit""). Set a callback with jit.attach(callback, ""event"") and clear the same callback with jit.attach(callback) The arguments passed to the callback depend on the event being reported: ""bc"": callback(func). func is the function that's just been recorded. ""trace"": callback(what, tr, func, pc, otr, oex) what is a description of the trace event: ""flush"", ""start"", ""stop"", ""abort"". Available for all events. tr is the trace number. Not available for flush. func is the function being traced. Available for start and abort. pc is the program counter - the bytecode number of the function being recorded (if this a Lua function). Available for start and abort. otr start: the parent trace number if this is a side trace, abort: abort code (integer)? oex start: the exit number for the parent trace, abort: abort reason (string) ""record"": callback(tr, func, pc, depth). The first arguments are the same as for trace start. depth is the depth of the inlining of the current bytecode. ""texit"": callback(tr, ex, ngpr, nfpr). tr is the trace number as before ex is the exit number ngpr and nfpr are the number of general-purpose and floating point registers that are active at the exit. jit.util.funcinfo(func, pc) When passed func and pc from a jit.attach callback, jit.util.funcinfo returns a table of information about the function, much like debug.getinfo. The fields of the table are: linedefined: as for debug.getinfo lastlinedefined: as for debug.getinfo params: the number of parameters the function takes stackslots: the number of stack slots the function's local variable use upvalues: the number of upvalues the function uses bytecodes: the number of bytecodes it the compiled function gcconsts: ?? nconsts: ?? currentline: as for debug.getinfo isvararg: if the function is a vararg function` source: as for debug.getinfo loc: a string describing the source and currentline, like ""<source>:<line>"" ffid: the fast function id of the function (if it is one). In this case only upvalues above and addr below are valid addr: the address of the function (if it is not a Lua function). If it's a C function rather than a fast function, only upvalues above is valid Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/geoffleyland/luatrace"	"Toolset for tracing/analyzing/profiling script execution and generating detailed reports."	"true"
"Debugging and Profiling"	"StackTracePlus"	"https://github.com/ignacio/StackTracePlus"	"Drop-in upgrade to Lua's stack traces which adds local context and improves readability."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"108"	"16"	"15"	"GitHub - ignacio/StackTracePlus: StackTracePlus provides enhanced stack traces for Lua. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 16 Star 108 Fork 15 ignacio/StackTracePlus Code Issues 5 Pull requests 0 Pulse Graphs StackTracePlus provides enhanced stack traces for Lua. 45 commits 2 branches 3 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master test Nothing to show 0.1.2-1 0.1.1-1 0.1.0-1 Nothing to show New pull request Latest commit 9b4aef9 Feb 10, 2016 ignacio Adds note that OpenResty works too [ci skip] … OpenResty allows to override the function to generate stack traces so one is allowed to do:  ``` local STP = require ""StackTracePlus"" debug.traceback = STP.stacktrace ```  somewhere and gets nice traces. Permalink Failed to load latest commit information. rockspecs Adds luacheck to CI Feb 9, 2016 src Adds luacheck to CI Feb 9, 2016 test Guess function name when entry is a table field. Feb 3, 2014 unittest Adds support for Lua 5.3 Jan 20, 2015 .travis.yml Adds luacheck to CI Feb 9, 2016 LICENSE Added license (MIT) Nov 4, 2010 README.md Adds note that OpenResty works too [ci skip] Feb 10, 2016 README.md StackTracePlus StackTracePlus provides enhanced stack traces for Lua 5.1, Lua 5.2, Lua 5.3, LuaJIT and OpenResty. StackTracePlus can be used as a replacement for debug.traceback. It gives detailed information about locals, tries to guess function names when they're not available, etc, so, instead of lua5.1.exe: D:\trunk_git\sources\stacktraceplus\test\test.lua:10: attempt to concatenate a nil value stack traceback:     D:\trunk_git\sources\stacktraceplus\test\test.lua:10: in function <D:\trunk_git\sources\stacktraceplus\test\test.lua:7>     (tail call): ?     D:\trunk_git\sources\stacktraceplus\test\test.lua:15: in main chunk     [C]: ?  you'll get lua5.1.exe: D:\trunk_git\sources\stacktraceplus\test\test.lua:10: attempt to concatenate a nil value Stack Traceback =============== (2)  C function 'function: 00A8F418' (3) Lua function 'g' at file 'D:\trunk_git\sources\stacktraceplus\test\test.lua:10' (best guess)     Local variables:      fun = table module      str = string: ""hey""      tb = table: 027DCBE0  {dummy:1, blah:true, foo:bar}      (*temporary) = nil      (*temporary) = string: ""text""      (*temporary) = string: ""attempt to concatenate a nil value"" (4) tail call (5) main chunk of file 'D:\trunk_git\sources\stacktraceplus\test\test.lua' at line 15 (6)  C function 'function: 002CA480'  Usage StackTracePlus can be used as a replacement for debug.traceback, as an xpcall error handler or even from C code. Note that only the Lua 5.1 interpreter and OpenResty allows the traceback function to be replaced ""on the fly"". Interpreters for LuaJIT, Lua 5.2 and 5.3 always calls luaL_traceback internally so there is no easy way to override that. local STP = require ""StackTracePlus""  debug.traceback = STP.stacktrace function test()     local s = ""this is a string""     local n = 42     local t = { foo = ""bar"" }     local co = coroutine     local cr = coroutine.create      error(""an error"") end test() That script will output (only with Lua 5.1): lua5.1: example.lua:11: an error Stack Traceback =============== (2)  C function 'function: 006B5758' (3) global C function 'error' (4) Lua global 'test' at file 'example.lua:11'         Local variables:          s = string: ""this is a string""          n = number: 42          t = table: 006E5220  {foo:bar}          co = coroutine table          cr = C function: 003C7080 (5) main chunk of file 'example.lua' at line 14 (6)  C function 'function: 00637B30'  StackTracePlus is aware of the usual Lua libraries, like coroutine, table, string, io, etc and functions like print, pcall, assert, and so on. You can also make STP aware of your own tables and functions by calling add_known_function and add_known_table. local STP = require ""StackTracePlus""  debug.traceback = STP.stacktrace local my_table = {     f = function() end } function my_function() end  function test(data, func)     local s = ""this is a string""      error(""an error"") end  STP.add_known_table(my_table, ""A description for my_table"") STP.add_known_function(my_function, ""A description for my_function"")  test( my_table, my_function ) Will output: lua5.1: ..\test\example2.lua:13: an error Stack Traceback =============== (2)  C function 'function: 0073AAA8' (3) global C function 'error' (4) Lua global 'test' at file '..\test\example2.lua:13'         Local variables:          data = A description for my_table          func = Lua function 'A description for my_function' (defined at line 7 of chunk ..\test\example2.lua)          s = string: ""this is a string"" (5) main chunk of file '..\test\example2.lua' at line 19 (6)  C function 'function: 00317B30'  Installation The easiest way to install is with LuaRocks. luarocks install stacktraceplus If you don't want to use LuaRocks, just copy StackTracePlus.lua to Lua's path. License StackTracePlus is available under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ignacio/StackTracePlus"	"Drop-in upgrade to Lua's stack traces which adds local context and improves readability."	"true"
"Debugging and Profiling"	"MobDebug"	"https://github.com/pkulchenko/MobDebug"	"Powerful remote debugger with breakpoints and stack inspection. Used by ZeroBraneStudio."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"254"	"29"	"58"	"GitHub - pkulchenko/MobDebug: Remote debugger for Lua. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 254 Fork 58 pkulchenko/MobDebug Code Issues 3 Pull requests 2 Pulse Graphs Remote debugger for Lua. 267 commits 2 branches 14 releases 3 contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags far-support master Nothing to show 0.63 0.62 0.61 0.60 0.55 0.54 0.53 0.52 0.51 0.50 0.49 0.48 0.47 0.45 Nothing to show New pull request Latest commit 65c2c1d May 18, 2016 pkulchenko Updated to reference one source for all hook masks. Permalink Failed to load latest commit information. examples Fixed typo in the test. Dec 21, 2015 misc Updated documentation for 0.63. Jan 25, 2016 src Updated to reference one source for all hook masks. May 18, 2016 CHANGELOG.md Updated documentation for 0.63. Jan 26, 2016 LICENSE Updated documentation for Lua 5.3 support and added features. Nov 23, 2014 README.md Updated formatting in README. Jan 25, 2016 README.md Project Description MobDebug is a remote debugger for Lua (including Lua 5.1, Lua 5.2, Lua 5.3, and LuaJIT 2.x). Features MobDebug allows to control the execution of another Lua program remotely, set breakpoints, and inspect the current state of the program. MobDebug is based on RemDebug and extends it in several ways: added new commands: LOAD, RELOAD, OUT, STACK, DONE; added support for debugging wxwidgets applications; added ability to pause and abort running applications; added pretty printing and handling of multiple results in EXEC; added stack and local/upvalue value reporting (STACK); added on/off commands to turn debugging on and off (to improve performance); added support for coroutine debugging (see examples/README for details); added support for Moai debugging; added support for Lua 5.2 and Lua 5.3; added support for varargs in stack trace; added support for LuaJIT debugging (see note in Dependencies); added support for nginx/OpenResty and Lapis debugging; added support for cross-platform debugging (with client and server running on different platforms/filesystems); removed dependency on LuaFileSystem; provided integration with ZeroBrane Studio IDE. Usage -- to start a server you can use to debug your application > lua -e ""require('mobdebug').listen()""  -- to debug a script, add the following line to it: require(""mobdebug"").start() Installation Make src/mobdebug.lua available to your script. See examples/README and examples/*.lua for examples of how to use the module. Dependencies MobDebug depends on LuaSocket 2.0+ and has been tested with Lua 5.1, Lua 5.2, and Lua 5.3. MobDebug also works with LuaJIT v2.0; using loop and scratchpad methods requires v2.0.1. Author Paul Kulchenko (paul@kulchenko.com) License See LICENSE file Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pkulchenko/MobDebug"	"Powerful remote debugger with breakpoints and stack inspection. Used by ZeroBraneStudio."	"true"
"Debugging and Profiling"	"lovebird"	"https://github.com/rxi/lovebird"	"Browser-based debug console. Originally made for LÖVE, but works in any project with LuaSocket support."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"95"	"5"	"7"	"GitHub - rxi/lovebird: A browser-based debug console for LÖVE Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 95 Fork 7 rxi/lovebird Code Issues 0 Pull requests 0 Pulse Graphs A browser-based debug console for LÖVE 95 commits 1 branch 0 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 0ce551b Sep 13, 2015 rxi Version 0.4.0 Permalink Failed to load latest commit information. LICENSE README.md Replaced `localhost` -> `127.0.0.1` in README Aug 21, 2015 lovebird.lua Version 0.4.0 Sep 13, 2015 README.md lovebird A browser-based debug console for the LÖVE framework. Usage Drop the lovebird.lua file into an existing project and place the following line at the top of your love.update() function: require(""lovebird"").update() The console can then be accessed by opening the following URL in a web browser: http://127.0.0.1:8000  If you want to access lovebird from another computer on the same network then 127.0.0.1 should be replaced with the IP address of the computer which LÖVE is running on. Additional Functionality To make use of additional functionality, the module can be assigned to a variable when it is required: lovebird = require ""lovebird"" Any configuration variables should be set before lovebird.update() is called. lovebird.port The port which lovebird listens for connections on. By default this is 8000 lovebird.whitelist A table of hosts which lovebird will accept connections from. Any connection made from a host which is not on the whitelist is logged and closed immediately. If lovebird.whitelist is set to nil then all connections are accepted. The default is { ""127.0.0.1"", ""192.168.*.*"" }. lovebird.wrapprint Whether lovebird should wrap the print() function or not. If this is true then all the calls to print will also be output to lovebird's console. This is true by default. lovebird.echoinput Whether lovebird should display inputted commands in the console's output buffer; true by default. lovebird.maxlines The maximum number of lines lovebird should store in its console's output buffer. By default this is 200. lovebird.updateinterval The interval in seconds that the page's information is updated; this is 0.5 by default. lovebird.allowhtml Whether prints should allow HTML. If this is true then any HTML which is printed will be rendered as HTML; if it false then all HTML is rendered as text. This is false by default. lovebird.print(...) Prints its arguments to lovebird's console. If lovebird.wrapprint is set to true this function is automatically called when print() is called. lovebird.clear() Clears the contents of the console, returning it to an empty state. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rxi/lovebird"	"Browser-based debug console. Originally made for LÖVE, but works in any project with LuaSocket support."	"true"
"IDEs and Plugins"	"Lua Development Tools"	"http://www.eclipse.org/koneki/ldt/"	"Eclipse plugin which provides code completion, debugging, and more. Built on Metalua."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Archived Projects Skip to main content Create account Log in Download Download Getting Started Members Projects Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM More Community Marketplace Events Planet Eclipse Newsletter Videos Participate Report a Bug Forums Mailing Lists Wiki IRC How to Contribute Working Groups Automotive Internet of Things LocationTech Long-Term Support PolarSys Science OpenMDM Toggle navigation Breadcrumbs Home Projects Archived Projects Home Wiki Archived Eclipse Projects You are seeing this because the project you were looking for has been archived. When projects are archived their data(downloads,source and website), is collected into a single tar.gz file. Please note: Some projects did not have all of the above data. Please note: The source files (if available) included in these files are direct copies of the available CVS/SVN data. You will need to load them into a local CVS/SVN repository to access the history. ALF project. Archived: January 2009 Albireo project. Archived: January 2011 AM3 project. Archived: November 2012 Apogee project. Archived: January 2011 Athena project. Archived: January 2012 AMW project. Archived: March 2015 DSDP Blinki project. Archived: October 2010. BPMN project. Archived: January 2012 CDTK project. Archived: January 2012 CME project. Archived: January 2006 Corona project. Archived: April 2010 Cosmos project. Archived: January 2012 Cobol project. Archived: February 2010 DSDP DD project. Archived: October 2010. DSDP project. Archived: September 2011. Doc2Model project. Archived: January 2015. ESL project. Archived: January 2012 EMFindex project. Archived: July 2012 ERCP project. Archived: December 2012 Examples project. Archived: January 2014 Featuremodel project. Archived: March 2015 Fproj project. Archived: January 2012 Ganomatic project. Archived: January 2012 Gems project. Archived: January 2015 Glimmer project. Archived: January 2011 g-Eclipse project. Archived: January 2014 Hibachi project. Archived: January 2011 Iam project. Archived: January 2012 Incquery project. Archived: February 2016 IMM project. Archived: January 2015 IDE4EDU project. Archived: January 2014 Imp project. Archived: January 2014 JCRM project. Archived: July 2013. Js4emf project. Archived: January 2015. Koi project. Archived: April 2006 Koneki project. Archived: September 2015 Kepler project. Archived: July 2008 Laszlo project. Archived: December 2006 Lepido project. Archived: June 2006 Maynstall project. Archived: January 2011 MDDi project. Archived: August 2008. Mihini project. Archived: September 2015 Mint project. Archived: November 2012. MDT EODM project. Archived: October 2008. Mofscript project. Archived: November 2012. MDT MST project. Archived: November 2012. MTF project. Archived: November 2012. MXF project. Archived: November 2012. DSDP Nab project. Archived: October 2010. EMF4Net project. Archived: January 2015. Net4J project. Archived: June 2010. OHF project. Archived: January 2012 OFMP project. Archived: January 2012 OMELET project. Archived: August 2005 Ormf project. Archived: January 2011 Pave project. Archived: December 2012 Phoenix project. Archived: February 2013 PMF project. Archived: January 2013. Polinate project. Archived: December 2005 EMF Query2 project. Archived: May 2013. Rat project. Archived: May 2012 SBVR project. Archived: July 2013. SDO project. Archived: July 2013. Servus project. Archived: November 2012. Search project. Archived: July 2013. Sketch project. Archived: January 2014. SOC project. Archived: January 2011 Spaces project. Archived: January 2011 Scalamodules project. Archived: July 2010 Stellation project. Archived: June 2005 STP project. Archived: September 2012 Swordfish project. Archived: January 2014 TCS project. Archived: November 2012. Temporality project. Archived: November 2012. TMW project. Archived: March 2012 TPTP Monitoring project. Archived: June 2010 TPTP project. Archived: May 2016 Umlx project. Archived: December 2012 UFacekit project. Archived: March 2014 Visual editor project. Archived: June 2011 Voice Tools project. Archived: May 2016 Woolsey project. Archived: December 2012 WTP Datatools project. Archived: February 2013 Xtend project. Archived: June 2013 Back to the top Eclipse Foundation About us Contact Us Donate Governance Logo and Artwork Board of Directors Legal Privacy Policy Updated Terms of Use Updated Copyright Agent Eclipse Public License Legal Resources Useful Links Report a Bug Documentation How to Contribute Mailing Lists Forums Marketplace Other IDE and Tools Community of Projects Working Groups Copyright © 2016 The Eclipse Foundation. All Rights Reserved. Back to the top"	"null"	"null"	"Eclipse plugin which provides code completion, debugging, and more. Built on Metalua."	"true"
"IDEs and Plugins"	"Lua for IDEA"	"https://bitbucket.org/sylvanaar2/lua-for-idea/wiki/Home"	"IntelliJ IDEA plugin which, among other things, provides code completion, smart highlighting, and experimental debugging."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"sylvanaar2 / Lua For IDEA / wiki / Home — Bitbucket  Bitbucket Features Pricing owner/repository English English 日本語 Sign up Log in Lua For IDEA Actions Clone Compare Fork Navigation Overview Source Commits Branches 1 Pull requests 60 Issues Wiki Downloads Settings HTTPS HTTPS SSH Need help cloning? Learn how to clone a repository. Clone in SourceTree Atlassian SourceTree is a free Git and Mercurial client for Windows. Atlassian SourceTree is a free Git and Mercurial client for Mac. Jon Akhtar Lua For IDEA Wiki Clone wiki HTTPS HTTPS SSH Need help cloning? Learn how to clone a repository. Clone in SourceTree Atlassian SourceTree is a free Git and Mercurial client for Windows. Atlassian SourceTree is a free Git and Mercurial client for Mac. Lua For IDEA / Home View History Lua for (A Full Featured Lua IDE) | This plugin is licensed under the Apache 2 license. Project to realize support for Lua in IntelliJ IDEA. Plugin site at Jetbrains If you use it, be sure to vote for it on ohloh. Coming Soon! : Single Option based Configuration For Supported API's First: Download the FREE IntelliJ IDEA Second: Install the plugin from the plugin manager in the IDE (Settings|Plugins) - scroll down on this page and follow the pictures if you need help with this You do not need to download the plugin from here Basic IDE Setup Screencast Installing a Custom API (API support has been updated. You may need to reinstall the API) Corona API Support World of Warcraft API Support Rift API Support Screencast Collection Setting Up Custom API's Setting Up Custom Libraries Setting Up Custom Documentation Join The Project Interested in joining the project? Feel like you have something to contribute? Contact me, I would love to hear from you! Help Pick a New Name For the Project! Please send your suggestions to any of the contacts addresses below Contact Info (I want to hear from you!) Another way is to use the Jetbrains IDETalk plugin. My name there is: sylvanaar at talk.google.com Email: sylvanaar at mindspring dot com Twitter: Jon S Akhtar Automated Exceptions: If you want to follow up on an automated exception submission use this link Special Thanks Thanks to YourKit for supporting open-source, and providing me with a license to to their profiler tool. YourKit, LLC is the creator of innovative and intelligent tools for profiling Java and .NET applications. Take a look at YourKit's leading software products: YourKit Java Profiler and YourKit .NET Profiler. Features Support for LuaJ and Kahlua for Lua code execution. Annotated Listing File Generation Control-flow and Data-flow analysis (Experimental) Type inference based completions(Experimental) Introduce Variable Refactoring (Experimental) Modules support Debugger support (Experimental) LuaDoc Support (Experimental) Lua SDK REPL Console (Experimental) Live Templates Basic Completions Quick Documentation with Multiple documentation providers Resolving Globals in project and libraries Custom API Support including custom function signatures (Experimental) Function Information via Quickhelp Lua Standard Library Information via Quickhelp (ctrl-Q) Hilighting of Upvalues and Fields Goto Symbol Safe Delete (Experimental) Rename Identifier (Experimental) JavaHelp For Lua 5.1 Execution in the Kahlua interpreter Go to definition find usages Code formatting Keyword completion 1 quickfix 5 code intentions 6 code inspection Highlighting global vs local variables Script execution and run configurations Kahlua interpreter window for interactive script execution (repl) Comes with an embedded Lua compiler written in Java (Kahlua) Structure view Syntax checking Syntax highlighting - including proper handling of extended syntax comments and quotes Customizable highlighting colors Code folding for code blocks and comments Brace Matching for do blocks, long strings and comments, and (, { , [ Minor feature: comment in/out. Updated 2016-06-12 Blog Support Plans & pricing Documentation API Site status Version info Terms of service Privacy policy English Git 2.7.4.1.g5468f9e Mercurial 3.6.3 Django 1.7.11 Python 2.7.3 b7520e3d05e9 / b7520e3d05e9 @ app-124 JIRA Software Confluence Bamboo SourceTree HipChat Atlassian Help Online help Learn Git Keyboard shortcuts Latest features Bitbucket tutorials Site status Support"	"null"	"null"	"IntelliJ IDEA plugin which, among other things, provides code completion, smart highlighting, and experimental debugging."	"true"
"IDEs and Plugins"	"ZeroBraneStudio"	"http://studio.zerobrane.com/"	"Lightweight, customizable, cross-platform Lua-dedicated IDE with code completion and analysis, written in Lua. Has broad debugging support for numerous Lua engines."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1124"	"115"	"283"	"GitHub - pkulchenko/ZeroBraneStudio: Lightweight Lua-based IDE for Lua with code completion, syntax highlighting, live coding, remote debugger, and code analyzer; supports Lua 5.1, 5.2, 5.3, LuaJIT and other Lua interpreters on Windows, OSX, and Linux Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 115 Star 1,124 Fork 283 pkulchenko/ZeroBraneStudio Code Issues 28 Pull requests 0 Pulse Graphs Lightweight Lua-based IDE for Lua with code completion, syntax highlighting, live coding, remote debugger, and code analyzer; supports Lua 5.1, 5.2, 5.3, LuaJIT and other Lua interpreters on Windows, OSX, and Linux http://studio.zerobrane.com/ 3,100 commits 5 branches 28 releases 29 contributors Lua 98.9% Other 1.1% Lua Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages lfs-win32 master static-analysis-typedlua wxwidgets31x-upgrade Nothing to show 1.30 1.20 1.10 1.00 0.381 0.361 0.95 0.90 0.80 0.70 0.60 0.50 0.40 0.39 0.38 0.37 0.36 0.35 0.34 0.33 0.32 0.31 0.30 0.29 0.28 0.27 0.26 0.25 Nothing to show New pull request Latest commit f283212 Jul 12, 2016 pkulchenko Added `UpdateStatus` interpreter method (#166). Permalink Failed to load latest commit information. api Updated Gideros API for version 2016.06. Jul 5, 2016 bin Upgraded Lua 5.3 interpreter to 5.3.1 on Linux (x86 and x64). Oct 7, 2015 build Updated Windows build script to use openssl 1.0.2h (#260). Jun 24, 2016 cfg add quantifier and fix typo Jun 22, 2016 interpreters Removed deprecated `DebuggerAttachDefault` call from interpreters. Jul 12, 2016 lualibs Update metalua to properly report `identifier expected` error in tabl… Jun 30, 2016 packages Refactored `BreakpointToggle` method to make it work consistently wit… Jun 18, 2016 spec Fixed indentation of fragments with partial long strings/comments (fi… May 15, 2016 src Added `UpdateStatus` interpreter method (#166). Jul 12, 2016 t Updated Gideros API for version 2016.06. Jul 5, 2016 tools removing old luxinia related files, now found at https://github.com/p… Feb 14, 2016 zbstudio Removed interpreters filter as it's not longer needed or used. May 23, 2016 CHANGELOG.md Updated CHANGELOG for 1.30. Jan 21, 2016 CONTRIBUTING.md Updated links in CONTRIBUTING documentation. Dec 3, 2014 LICENSE Added Scintilla license. May 23, 2016 README.md Updated README to use better wording. Apr 16, 2016 zbstudio.exe Updated `SetDllDirectory` handling to avoid breaking dlopen with wxwi… Oct 26, 2015 zbstudio.sh Add support for armhf architecture Nov 25, 2014 README.md Project Description ZeroBrane Studio is a lightweight cross-platform Lua IDE with code completion, syntax highlighting, remote debugger, code analyzer, live coding, and debugging support for several Lua engines (Lua 5.1, Lua 5.2, Lua 5.3, LuaJIT, LÖVE, Moai, Gideros, Corona, Marmalade Quick, Cocos2d-x, OpenResty/Nginx, Torch7, Redis, GSL-shell, Adobe Lightroom, Lapis, Moonscript, and others). It originated from the Estrela Editor. Features Written in Lua, so easily customizable. Small, portable, and cross-platform (Windows, Mac OSX, and Linux). Auto-completion for functions, keywords, and custom APIs. Interactive console to directly test code snippets with local and remote execution. Integrated debugger with local and remote debugging for Lua 5.1, Lua 5.2, Lua 5.3, LuaJIT, and other Lua engines. Live coding with Lua, LÖVE, Gideros, Moai, Corona SDK, GSL-shell, and other engines. Function outline. Fuzzy search with Go To File, project-wide Go To Symbol, and Insert Library Function. Several ways to extend the current functionality: specs (spec/): specifications for file syntax, lexer, and keywords; apis (api/): descriptions for code completion and tooltips; interpreters (interpreters/): components for setting debugging and run-time project environment; packages (packages/): plugins that provide additional functionality; config (cfg/): settings for styles, color themes, and other preferences; translations (cfg/i18n/): translations of the menus and messages to other languages; tools (tools/): additional tools. Documentation A short and simple overview for those who are new to this development environment. A list of frequently asked questions about the IDE. Tutorials and demos that cover debugging and live coding for different environments. Tips and tricks. Installation ZeroBrane Studio can be installed into and run from any folder. No compilation is needed, although the scripts to compile required libraries for Windows, OSX, and Linux platforms are available in the build/ folder. Usage Open file(s):   zbstudio [option] [<project directory>] <filename> [<filename>...]   non-options are treated as a project directory to set or a file to open  Set project directory:   zbstudio <project directory> [<filename>...]   (0.39+) a directory passed as a parameter will be set as the project directory  Overwrite default configuration:   zbstudio -cfg ""<lua configuration code>"" [<filename>]   e.g.: zbstudio -cfg ""editor.fontsize=12"" somefile.lua  Load custom configuration:   zbstudio -cfg path/file.lua [<filename>]   e.g.: zbstudio -cfg cfg/estrela.lua  If you are loading a file, you can also request the cursor to be set on a particular line or at a particular position by using filename:<line> and filename:p<pos> syntax (0.71+). Contributing See CONTRIBUTING. Author ZeroBrane Studio and MobDebug ZeroBrane LLC: Paul Kulchenko (paul@kulchenko.com) Estrela Editor Luxinia Dev: Christoph Kubisch (crazybutcher@luxinia.de) Where is Estrela? The Estrela project has been merged into ZeroBrane Studio. If you have used Estrela for graphics shader authoring or luxinia, create/modify the cfg/user.lua and add include ""estrela"" (1.21+) to load all tools and specifications by default again. License See LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pkulchenko/ZeroBraneStudio"	"Lightweight, customizable, cross-platform Lua-dedicated IDE with code completion and analysis, written in Lua. Has broad debugging support for numerous Lua engines."	"true"
"IDEs and Plugins"	"Babelua"	"http://babelua.codeplex.com/"	"Lua editor/debugger, extension for Visual Studio 2012/2013. Has code highlight, auto-completion, syntax checking and formatting, file previewing, debugging capabilities integrated into Visual Studio."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"babelua - Home Updating... CodePlexProject Hosting for Open Source Software Register Sign In babelua home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki & Documentation Subscribe a free lua editor/debuger (vs2012/2013/2015 extension) Advance features: Editor: code highlight and auto completion; syntax error check; lightweight project management; preview file outline and jump; list token references quickly; object-oriented model support; Formatting code; Debugger: deeply integrate into visual studio. run debugger/set breakpoint/watch variable/call stack and so on, just like use native debugger. Requirements: Visual Studio 2012 Standard Edition or higher. preview images: Revisions: V3.2.2.0 - 2015.09.29 New feature: Lua exe path & Working path support relative path; Stability improvement: Optimize the speed of synchronize files & folders; V3.2.1.0 - 2015.09.22 New feature: Goto symbol shortcut key: ""Ctrl+P"" or ""Alt+O""; Stability improvement: fix a bug: synchronize files & folders; V3.2.0.0 - 2015.09.16 New feature: support VS2015; add Logcat; add synchronize files & folders function; watch variable support Hexadecimal Display; recover shortcut key ""Ctrl+P""; V3.0.1.0 - 2015.04.03 New feature: support create ""Lua Project"" to manage lua files, replace ""Folder Explorer""; improve auto completion, support multiple auto completion list, optimize auto completion for cocos2d; V2.1.4.0 - 2015.01.16 New feature: Stability improvement: fix a bug that analyze auto completion list; fix a bug can't hit breakpoint when using lua coroutine; V2.1.3.0 - 2014.12.29 New feature: code segment; parenthesis matching; can set: Output more debugging information in ""output window""; Stability improvement: Optimize the speed of watch variable; V2.1.2.0 - 2014.12.15 New feature: Stability improvement: recover shortcut key ""Ctrl+P""; Improve ""self"" complement; V2.1.1.0 - 2014.12.09 New feature: delete 'All word' completion; Performance improvement: reducing memory footprint; V2.0.6.0 - 2014.11.13 New feature: Stability improvement: use double click to goto the location of item in ""Outline Explorer"" window; delete files/directory moved to the recycle bin in ""Folder Explorer""; V2.0.5.0 - 2014.11.12 New feature: Stability improvement: support VS2013 (the version is higher than update 2) auto completion; some other bug fix; V2.0.4.0 - 2014.11.07 New feature: Recover Shotcut keys : Ctrl+2,Ctrl+3,Ctrl+4; Stability improvement: Optimize the speed of analysis Lua file; V2.0.3.0 - 2014.11.06 New feature: Add BabeLua toolbar; Delete Shortcut keys : Ctrl+2,Ctrl+3,Ctrl+4; Highlight Lua5.1 library; V2.0.2.0 - 2014.11.03 New feature: Provide loading and unloading ""Current setting""; Folder Explorer provides the refresh function; Stability improvement: Improve the speed of editing; Improve the speed of loading and parsing Lua files; some other bug fix; V2.0.1.0 - 2014.10.27 New feature: Auto completion support multi-level; Auto completion support Intelligent matching and All word matching; Add navigation to window ( ctrl+3 or Ctrl+P ),including search files, quickly search function and variable; Stability improvement: some other bug fix; V1.6.8.0 - 2014.9.5 New feature: watch string variable values during debugging, support multiple languages: English, Simplified Chinese, Traditional Chinese; Stability improvement: optimize the speed of debugging; V1.6.7.0 - 2014.8.21 New feature: add a file search window ( ctrl+1 or Alt+L ), like The file search in VC Assistant; Stability improvement: performance improvement when BabeLua load/unload; performance improvement when debugger load lua files; V1.6.5.1 - 2014.8.7 New feature: Formatting code; Stability improvement: fix a bug that pop up error ""System.Net.WebResponse EndGetResponse""; V1.6.4.0 - 2014.7.21 New feature: ""print"" content display to the ""output"" window; Stability improvement: fix a bug that the breakpoint will not currently be hit, because the lua file path is special ( just like c:\proj\.\script\config.lua ); V1.6.3.0 - 2014.7.15 Important changes: use ""package.path"" as lua search path when debugging; V1.6.2.0 - 2014.7.3 Important changes: ""outline explorer"" display functions & variables list in current open file; Other changes: adjust the settings interface layout,adapt to low resolution display; output information does not set focus; Stability improvement: fix a bug that functions & variables list is not correct when use split window; some other bug fix; V1.6.1.0 - 2014.6.26 New feature: display lua file name in auto completion; Stability improvement: changed 'tostirng' to 'tostring' in lua5.1.lua; fix a bug that may cause an exception when you search the word; fix a bug that may cause VS crash on cocos2d-x3.0; V1.6.0.0 - 2014.6.18 New feature: add a simple code autocompletion feature; add more search features in ""search result 1/2""; Stability improvement: fix memory leaks; V1.5.7.0 - 2014.6.6 Stability improvement: use ""lua scripts folder"" as lua search path when debugging; V1.5.6.0 - 2014.5.30 New feature: support debug quick-cocos2d-x project now; support text search in scripts folder now, you can use this function in Search Result Window; V1.5.5 - 2014.5.23 New feature: support lua5.1 keywords auto completion; debug message would write to output window now; editor outline combobox’s members now will sorting by the first letter; Stability improvement: fix a bug that when search in a file which not exists in current setting folder , result of switch relative path function would not correct; Some other bug fix; V1.5.4 - 2014.5.14 Performance improvement: decrease the sensitive of syntax analysis when document content changes, New feature: Auto Completion database extend is supported now. Look up our documents for more details; watch local variables when switch between debug stacks is supported now; relative or absolute path view is supported at Search Result Window, you can switch them freely; Stability improvement: fix a bug that when file contains mac’s line end(‘\r’) ,its line number would calculate wrong; fix a bug that comment would not highlight sometimes; Some other bug fix; V1.5.3 - 2014.5.6 Stability improvement: support relative path when debugging lua files; improve variable view function in debugger; fix a bug that when a file is loaded at runtime , its breakpoints would not take effect; some other bug fix; New feature: improve tool windows color scheme to look better with different vs themes; comment/uncomment code block easily; some other improve; V1.5.2 - 2014.4.24 Stability improvement: fix a bug that may cause vs unresponsive when disable a breakpoint; fix a bug that can not watch table members like table[‘number’] structure when debugging; fix a bug that the item may disappear at Folder Explorer when modify file out of vs; fix a bug that may cause an exception when use ‘find reference’ function within a file which contain syntax errors; other bugs fix; New feature: watch variable directly with cursor move over it when debugging; show line number can be use now; other improvements; V1.5.1 - 2014.4.15 Stability improvement: fix a bug that may cause vs crash when user choose an invalid folder as lua script folder; fix a bug that may cause a problem when switch files quickly at Folder Explorer Window; fix a bug that may cause vs unresponsive when debugging and step over a breakpoint ; change the editor default lua table and function view colors form (0,0,0) to (200,100,0).you can change them at ‘Setting.xml’later; V1.5.0 - 2014.4.11 New feature: integrate debug tools into babelua , now you can debug lua code in vs just like c++ or c#; V1.0.7 - 2014.4.10 Stability improvement: fix a bug that may cause an exception when edit words in editor; V1.0.6 - 2014.4.8 Performance improvement: optimize auto completion mechanism ; add a setting item so that you can change lua executable file working path; update some tool windows so that they can show better at vs 2013; Stability improvement: fix a bug when typein some words in editor the cursor may not been controled up/down by keyboard; fix a bug that may throw an exception when a file is opened by other application; fix a bug when typein chinese character behind comment may cause an exception; V1.0.5 - 2014.3.21 Stability improvement: fix a bug that may cause vs crash when click an item at search result view; fix a bug that may cause vs crash when trigger quick search at editor window; fix a calculate error in editor outline; V1.0.4 - 2014.3.17 New feature: support user define object definition and constructor keyword; V1.0.3 - 2014.3.14 New feature: support user define table and function color ; add user keywords groups to at most 15; V1.0.2 - 2014.3.13 Performance improvement: V1.0.1 - 2014.3.11 Stability improvement: fix a bug that may cause vs crash when mark a line at editor window; fix a bug when delete a file outside vs ,folder window may not update sync; Getting Started : 1,Open Settings Window from menu - LUA - Settings; 2,Change Tab to [Lua Folder]; 3,Choose your working path and other info from [New folder setting],then click [save]; 4,Choose the setting you added at step 3, click Select; 5,Now you can see the files from [Folder Explorer] window. 6,A temp_ project would be created for debug when first lua file be opened, you should set this project as StartUp Project. Compatibility: tested: Lua5.1 for windows ; Cocos2d-x ; Babe2D(Boyaa); testing: Lua5.2, LuaJIT, Love2d, Moai, Gideros, Marmalade Quick, Corona, GSL-shell; Not implement: attach to running process; remote debugging, such as connect to a mobile device Blog:(chinese) http://blog.csdn.net/babestudio About: Author : RugbbyLi , LilongLg, CarefreeLi BabeStudio http://www.boyaa.com CodePlex: https://babelua.codeplex.com Special thanks : Irony; VSLua; Decoda; Python Project; Last edited Sep 29, 2015 at 10:17 AM by babestudio, version 64 downloads activity downloads 421 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031"	"null"	"null"	"Lua editor/debugger, extension for Visual Studio 2012/2013. Has code highlight, auto-completion, syntax checking and formatting, file previewing, debugging capabilities integrated into Visual Studio."	"true"
"Utility Belts"	"Lua Fun"	"https://github.com/rtsisyk/luafun"	"High-performance functional programming library designed for LuaJIT."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"858"	"56"	"42"	"GitHub - rtsisyk/luafun: Lua Fun is a high-performance functional programming library for Lua designed with LuaJIT's trace compiler in mind. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 56 Star 858 Fork 42 rtsisyk/luafun Code Issues 6 Pull requests 2 Pulse Graphs Lua Fun is a high-performance functional programming library for Lua designed with LuaJIT's trace compiler in mind. http://rtsisyk.github.io/luafun/ 41 commits 3 branches 3 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master stable Nothing to show 0.1.3 0.1.2 0.1.1 Nothing to show New pull request Latest commit 892f943 Jan 20, 2016 rtsisyk Changes required by Debian maintainer Permalink Failed to load latest commit information. debian Changes required by Debian maintainer Jan 20, 2016 doc Bump version to 0.1.3 Jan 18, 2016 rpm Bump version to 0.1.3 Jan 18, 2016 tests Fix #21: support for Lua 5.3 Jan 16, 2016 .gitignore Fix #18: Create Debian package Jan 16, 2016 .travis.yml Use container-based infrastructure on Travis CI Jan 16, 2016 CONTRIBUTING.md Initial import Nov 19, 2013 COPYING.md Update copyright year Jan 18, 2016 README.md Tune up README Jan 18, 2016 fun-scm-1.rockspec Tune up rockspec Jan 18, 2016 fun.lua Update copyright year Jan 18, 2016 README.md Lua Functional Lua Fun is a high-performance functional programming library for Lua designed with LuaJIT's trace compiler in mind. Lua Fun provides a set of more than 50 programming primitives typically found in languages like Standard ML, Haskell, Erlang, JavaScript, Python and even Lisp. High-order functions such as map, filter, reduce, zip, etc., make it easy to write simple and efficient functional code. Let's see an example: > -- Functional style > require ""fun"" () > -- calculate sum(x for x^2 in 1..n) > n = 100 > print(reduce(operator.add, 0, map(function(x) return x^2 end, range(n)))) 328350  > -- Object-oriented style > local fun = require ""fun"" > -- calculate sum(x for x^2 in 1..n) > print(fun.range(n):map(function(x) return x^2 end):reduce(operator.add, 0)) 328350  Lua Fun takes full advantage of the innovative tracing JIT compiler to achieve transcendental performance on nested functional expressions. Functional compositions and high-order functions can be translated into efficient machine code. Can you believe it? Just try to run the example above with luajit -jdump and see what happens: -- skip some initilization code -- ->LOOP: 0bcaffd0  movaps xmm5, xmm7 0bcaffd3  movaps xmm7, xmm1 0bcaffd6  addsd xmm7, xmm5 0bcaffda  ucomisd xmm7, xmm0 0bcaffde  jnb 0x0bca0024        ->5 0bcaffe4  movaps xmm5, xmm7 0bcaffe7  mulsd xmm5, xmm5 0bcaffeb  addsd xmm6, xmm5 0bcaffef  jmp 0x0bcaffd0        ->LOOP ---- TRACE 1 stop -> loop  The functional chain above was translated by LuaJIT to (!) one machine loop containing just 10 CPU assembly instructions without CALL. Unbelievable! Readable? Efficient? Can your Python/Ruby/V8 do better? Status Lua Fun is in an early alpha stage. The library fully documented and covered with unit tests. LuaJIT 2.1 alpha is recommended. The library designed in mind of fact that LuaJIT traces tail-, up- and down-recursion and has a lot of byte code optimizations. Lua 5.1-5.3 are also supported. This is master (development) branch. API may be changed without any special notice. Please use stable branch for your production deployments. If you still want to use master, please don't forget to grep git log for Incompatible API changes message. Thanks! Please check out documentation for more information. Misc Lua Fun is distributed under the MIT/X11 License - (same as Lua and LuaJIT). The library was written to use with Tarantool - an efficient in-memory store and an asynchronous Lua application server. See Also Documentation RockSpec RPM/DEB packages lua-l@lists.lua.org luajit@freelists.org roman@tsisyk.com Please ""Star"" the project on GitHub to help it to survive! Thanks! Lua Fun. Simple, Efficient and Functional. In Lua. With JIT. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rtsisyk/luafun"	"High-performance functional programming library designed for LuaJIT."	"true"
"Utility Belts"	"Moses"	"https://github.com/Yonaba/Moses"	"Functional programming utility belt, inspired by Underscore.js."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"254"	"24"	"43"	"GitHub - Yonaba/Moses: Utility library for functional programming  in Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 254 Fork 43 Yonaba/Moses Code Issues 1 Pull requests 7 Pulse Graphs Utility library for functional programming in Lua http://yonaba.github.io/Moses 239 commits 2 branches 1 release 7 contributors Lua 97.6% Shell 2.4% Lua Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Moses-1.4.0-1 Nothing to show New pull request Latest commit daf91d0 Aug 28, 2015 Yonaba Merge pull request #19 from ignacio/master … Adds ._nth Permalink Failed to load latest commit information. .travis Updates Travis scripts and fixes 5.2 and 5.3 compatibility. Aug 27, 2015 doc Adds ._nth Aug 26, 2015 rockspec Fixed copy_directories Jul 14, 2014 spec Adds ._nth Aug 26, 2015 .gitignore Exclude luacov Jun 14, 2014 .travis.yml Updates Travis scripts and fixes 5.2 and 5.3 compatibility. Aug 27, 2015 CHANGELOG.md Prepare for 1.4.0 release Jul 14, 2014 LICENSE Updated LICENSE Jun 14, 2014 README.md Added Gitter badge Apr 12, 2015 moses.lua Merge pull request #19 from ignacio/master Aug 28, 2015 moses_min.lua Added minified version Jul 13, 2014 README.md A Lua utility-belt library for functional programming. It complements the built-in Lua table library, making easier operations on arrays, lists, collections. Moses was deeply inspired by Underscore.js. Download & Installation Bash git clone git://github.com/Yonaba/Moses.git Archive zip: latest stable 1.4.0 | current | all tarball: latest stable 1.4.0 | current | all LuaRocks luarocks install moses  MoonRocks moonrocks install moses or : luarocks install --server=http://rocks.moonscript.org/manifests/Yonaba moses Usage Put the file moses.lua inside your project folder and call it using require command. Note: the full source moses.lua is quite heavy (~59 kiB). You can alternatively use the minified version (~17.5 kiB). Tutorial Find a complete set of code examples in tutorial.md Documentation Available in HTML-format for download : see doc. Read it in your browser : see online doc Credits and Acknowledgement Jeremy Ashkenas, for the amazing Underscore.js Marcus Irven's and JTArchie's 1-to-1 ports that also inspired this. LDoc (from Steve Donovan) used to generate the current HTML documentation. Specification Spec tests have been included. Run them using Telescope with the following command from the root folder: tsc -f spec/* License This work is under MIT-LICENSE Copyright (c) 2012-2014 Roland Yonaba. See LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Yonaba/Moses"	"Functional programming utility belt, inspired by Underscore.js."	"true"
"Utility Belts"	"Penlight"	"https://github.com/stevedonovan/Penlight"	"Broad, heavyweight utility library, inspired by Python's standard libs. Provides the batteries that Lua doesn't."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"563"	"51"	"101"	"GitHub - stevedonovan/Penlight: A set of pure Lua libraries focusing on input data handling (such as reading configuration files), functional programming (such as map, reduce, placeholder expressions,etc), and OS path management.  Much of the functionality is inspired by the Python standard libraries. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 51 Star 563 Fork 101 stevedonovan/Penlight Code Issues 50 Pull requests 15 Pulse Graphs A set of pure Lua libraries focusing on input data handling (such as reading configuration files), functional programming (such as map, reduce, placeholder expressions,etc), and OS path management. Much of the functionality is inspired by the Python standard libraries. http://stevedonovan.github.com/Penlight/ 513 commits 1 branch 21 releases 31 contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.3.2 1.3.1 1.3.0 1.2.1 1.2.0 1.1.1 1.1.0 1.0.3a 1.0.2 1.0.1 1.0.0 0.9.8 0.9.7 0.9.6 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 0.8.5 Nothing to show New pull request Latest commit 16d1493 Jan 1, 2016 stevedonovan Merge pull request #179 from mpeterv/quote-string-brackets … Fix stringx.quote_string when string end matches ']=*' Permalink Failed to load latest commit information. doc Update SIP guide [ci skip] Sep 28, 2015 examples PL passes tests with no-compat Lua 5.2; utils.unpack exported, now al… Aug 25, 2013 lua/pl Merge pull request #179 from mpeterv/quote-string-brackets Jan 1, 2016 tests Merge pull request #179 from mpeterv/quote-string-brackets Jan 1, 2016 .travis.yml Add coverage gathering Sep 13, 2015 CHANGES.md doc updates; moved changes to CHANGES Sep 11, 2015 CONTRIBUTING.md This is Penlight, not Busted May 6, 2013 LICENSE.md changed .txt to .md files May 6, 2013 README.md Update README.md [ci skip] Sep 16, 2015 penlight-scm-1.rockspec Added up-to-date scm-1 rockspec Mar 3, 2015 run.lua doc fixes, plus embarrassing func.curry has been renamed bind1 (curry… Sep 18, 2013 README.md Penlight Lua Libraries Why a new set of libraries? Penlight brings together a set of generally useful pure Lua modules, focusing on input data handling (such as reading configuration files), functional programming (such as map, reduce, placeholder expressions,etc), and OS path management. Much of the functionality is inspired by the Python standard libraries. Module Overview Paths, Files and Directories path: queries like isdir,isfile,exists, splitting paths like dirname and basename dir: listing files in directories (getfiles,getallfiles) and creating/removing directory paths file: copy,move; read/write contents with read and write Application Support app: require_here to rebase require to work with main script path; simple argument parsing parse_args lapp: sophisticated usage-text-driven argument parsing for applications config: flexibly read Unix config files and Windows INI files strict: check for undefined global variables - can use strict.module for modules utils,compat: Penlight support for unified Lua 5.1/5.2 codebases types: predicates like is_callable and is_integer; extended type function. Extra String Operations utils: can split a string with a delimiter using utils.split stringx: extended string functions covering the Python string type stringio: open strings for reading, and creating strings using standard Lua IO methods lexer: lexical scanner for splitting text into tokens; special cases for Lua and C text: indenting and dedenting text, wrapping paragraphs; optionally make % work as in Python template: small but powerful template expansion engine sip: Simple Input Patterns - higher-level string patterns for parsing text Extra Table Operations tablex: copying, comparing and mapping over pretty: pretty-printing Lua tables, and various safe ways to load Lua as data List: implementation of Python 'list' type - slices, concatenation and partitioning Map, Set, OrderedMap: classes for specialized kinds of tables Data: reading tabular data into 2D arrays and efficient queries array2d: operations on 2D arrays permute: generate permutations Iterators, OOP and Functional seq: working with iterator pipelines; collecting iterators as tables class: a simple reusable class framework func: symbolic manipulation of expressions and lambda expressions utils: utils.string_lambda converts short strings like '|x| x^2' into functions comprehension: list comprehensions: C'x for x=1,4'()=={1,2,3,4} Requirements The file and directory functions depend on LuaFileSystem (lfs). If you want dir.copyfile to work elegantly on Windows, then you need Alien. Both are present in Lua for Windows. Installation The directory structure is lua     pl         (module files) examples     (examples) tests     (tests) docs     (index.html)     api         (index.html)         modules  All you need to do is copy the pl directory into your Lua module path, which is typically /usr/local/share/lua/5.1 on a Linux system (of course, you can set LUA_PATH appropriately.) With Lua for Windows, if LUA stands for 'c:\Program Files\Lua\5.1', then pl goes into LUA\lua, docs goes into LUA\examples\penlight and both examples and tests goes into LUA\examples Building the Documentation Requires ldoc, which is available through LuaRocks. Then it's a simple matter of running ldoc in the docs folder. Penlight/docs$ ldoc . Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/stevedonovan/Penlight"	"Broad, heavyweight utility library, inspired by Python's standard libs. Provides the batteries that Lua doesn't."	"true"
"Utility Belts"	"lua-stdlib"	"https://github.com/lua-stdlib/lua-stdlib"	"Middle-weight standard library extension; adds some useful data structures, utility functions, and basic functional stuff."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"131"	"12"	"18"	"GitHub - lua-stdlib/lua-stdlib: General Lua libraries Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 131 Fork 18 lua-stdlib/lua-stdlib Code Issues 8 Pull requests 0 Pulse Graphs General Lua libraries https://lua-stdlib.github.io/lua-stdlib 1,404 commits 6 branches 50 releases 4 contributors Lua 99.2% Makefile 0.8% Lua Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix-require-version gary/ext-hygiene gh-pages master release v34-maint Nothing to show v41.2.0 v41.1.1 v41.1.0 v41.0.0 v40 v39 v38 v37 v36 v35 v34.1 v34 v34-2 v33 v32 v31 v30 v29 v28 release-v41.2.0 release-v41.1.1 release-v41.1.0 release-v41.0.0 release-v40 release-v39 release-v38 release-v37 release-v36 release-v35 release-v34.1 release-v34 release-v34-2 release-v33 release-v32 release-v31 release-v30 release-v29 rel-27 rel-26 rel-25 rel-24 rel-23 rel-22 rel-21 rel-20 rel-19 rel-18 rel-17 rel-16 rel- Nothing to show New pull request Latest commit c529fb9 Jun 4, 2016 rrthomas std/table.lua: fix a comment typo Permalink Failed to load latest commit information. doc refactor: split object system out into its own package. Feb 5, 2016 lib/std std/table.lua: fix a comment typo Jun 4, 2016 specs refactor: split object system out into its own package. Feb 5, 2016 .gitignore configury: remove in favour of LuaRocks builtin build type. Jan 31, 2016 .travis.yml travis: really don't uninstall the stdlib rock specl depends on! Jan 31, 2016 AUTHORS.md configury: remove in favour of LuaRocks builtin build type. Jan 31, 2016 LICENSE.md LICENSE: make sure this is a valid markdown format file. Feb 3, 2016 Makefile refactor: split object system out into its own package. Feb 5, 2016 NEWS.md refactor: split object system out into its own package. Feb 5, 2016 README.md README.md: Fix a typo in the install instructions. Feb 5, 2016 STYLE.md configury: remove in favour of LuaRocks builtin build type. Jan 31, 2016 stdlib-git-1.rockspec rockspec: install _base module with the correct name. Feb 5, 2016 README.md Standard Lua libraries by the stdlib project This is a collection of Lua libraries for Lua 5.1 (including LuaJIT), 5.2 and 5.3. The libraries are copyright by their authors 2000-2016 (see the AUTHORS file for details), and released under the MIT license (the same license as Lua itself). There is no warranty. stdlib has no run-time prerequisites beyond a standard Lua system, though it will take advantage of strict and typecheck if they are installed. Installation The simplest and best way to install stdlib is with LuaRocks. To install the latest release (recommended):     luarocks install stdlib To install current git master (for testing, before submitting a bug report for example):     luarocks install http://raw.githubusercontent.com/lua-stdlib/lua-stdlib/master/stdlib-git-1.rockspec The best way to install without LuaRocks is to copy the std folder and its contents into a directory on your package search path. Documentation The latest release of these libraries is documented in LDoc. Pre-built HTML files are included in the release. Bug reports and code contributions These libraries are written and maintained by their users. Please make bug reports and suggestions as GitHub Issues. Pull requests are especially appreciated. But first, please check that your issue has not already been reported by someone else, and that it is not already fixed by master in preparation for the next release (see Installation section above for how to temporarily install master with LuaRocks). There is no strict coding style, but please bear in mind the following points when proposing changes: Follow existing code. There are a lot of useful patterns and avoided traps there. 2-character indentation using SPACES in Lua sources. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lua-stdlib/lua-stdlib"	"Middle-weight standard library extension; adds some useful data structures, utility functions, and basic functional stuff."	"true"
"Utility Belts"	"Microlight"	"https://github.com/stevedonovan/Microlight"	"A little library of useful Lua functions; the 'extra light' version of Penlight."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"76"	"11"	"13"	"GitHub - stevedonovan/Microlight: A little library of useful Lua functions, intended as the 'light' version of Penlight Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 76 Fork 13 stevedonovan/Microlight Code Issues 5 Pull requests 2 Pulse Graphs A little library of useful Lua functions, intended as the 'light' version of Penlight http://stevedonovan.github.com/microlight/ 35 commits 1 branch 3 releases Fetching contributors Lua 99.9% Shell 0.1% Lua Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.1.1 1.1 1.0 Nothing to show New pull request Latest commit e08ccaa Apr 7, 2015 stevedonovan Merge pull request #8 from ncopa/master … Issue #7: fix for Lua 5.3 Permalink Failed to load latest commit information. examples Issue #5: Array.sort function is optional Sep 2, 2013 compress.lua compress.lua: knocks ml down from 28K to 13k Dec 29, 2012 config.ld 1.1 version changes Dec 27, 2012 microlight-1.1-1.rockspec new rockspec Dec 27, 2012 ml.lua Issue #7: fix for Lua 5.3 Apr 6, 2015 ml_module.lua 1.1 version changes Dec 27, 2012 ml_properties.lua 1.1 version changes Dec 27, 2012 ml_range.lua 1.1 version changes Dec 27, 2012 mod52.lua 1.1 version changes Dec 27, 2012 readme.md added imapfilter, Array.methods, Array.foreach. Updated docs Dec 29, 2012 test 1.1 version changes Dec 27, 2012 test-mod52.lua 1.1 version changes Dec 27, 2012 test.bat 1.1 version changes Dec 27, 2012 readme.md A Small but Useful Lua library The Lua standard library is deliberately kept small, based on the abstract platform defined by the C89 standard. It is intended as a base for further development, so Lua programmers tend to collect small useful functions for their projects. Microlight is an attempt at 'library golf', by analogy to the popular nerd sport 'code golf'. The idea here is to try capture some of these functions in one place and document them well enough so that it is easier to use them than to write them yourself. This library is intended to be a 'extra light' version of Penlight, which has nearly two dozen modules and hundreds of functions. In Lua, anything beyond the core involves 'personal' choice, and this list of functions does not claim to aspire to 'canonical' status. It emerged from discussion on the Lua Mailing list started by Jay Carlson, and was implemented by myself and Dirk Laurie. Strings THere is no built-in way to show a text representation of a Lua table, which can be frustrating for people first using the interactive prompt. Microlight provides tstring. Please note that globally redefining tostring is not a good idea for Lua application development! This trick is intended to make experimation more satisfying: > require 'ml'.import() > tostring = tstring > = {10,20,name='joe'} {10,20,name=""joe""}  The Lua string functions are particularly powerful but there are some common functions missing that tend to come up in projects frequently. There is table.concat for building a string out of a table, but no table.split to break a string into a table. >  = split('hello dolly') {""hello"",""dolly""} > = split('one,two',',') {""one"",""two""}  The second argument is a string pattern that defaults to spaces. Although it's not difficult to do string interpolation in Lua, there's no little function to do it directly. So Microlight provides ml.expand. > = expand(""hello $you, from $me"",{you='dolly',me='joe'}) hello dolly, from joe  expand also understands the alternative ${var} and may also be given a function, just like string.gsub. (But pick one or the other consistently.) Lua string functions match using string patterns, which are a powerful subset of proper regular expressions: they contain 'magic' characters like '.','$' etc which you need to escape before using. escape is used when you wish to match a string literally: > = ('woo%'):gsub(escape('%'),'hoo') ""woohoo""   1 > = split(""1.2.3"",escape(""."")) {""1"",""2"",""3""}  Files and Paths Although access is available on most platforms, it's not part of the standard, (which is why it's spelt _access on Windows). So to test for the existance of a file, you need to attempt to open it. So the exist function is easy to write: function ml.exists (filename)     local f = io.open(filename)     if not f then         return nil     else         f:close()         return filename     end end  The return value is not a simple true or false; it returns the filename if it exists so we can easily find an existing file out of a group of candidates: > = exists 'README' or exists 'readme.txt' or exists 'readme.md' ""readme.md""  Lua is good at slicing and dicing text, so a common strategy is to read all of a not-so-big file and process the string. This is the job of readfile. For instance, this returns the first 128 bytes of the file opened in binary mode: > txt = readfile('readme.md',true):sub(1,128)  Note I said bytes, not characters, since strings can contain any byte sequence. If readfile can't open a file, or can't read from it, it will return nil and an error message. This is the pattern followed by io.open and many other Lua functions; it is considered bad form to raise an error for a routine problem. Breaking up paths into their components is done with splitpath and splitext: > = splitpath(path) ""/path/to/dogs"" ""bonzo.txt"" > = splitext(path) ""/path/to/dogs/bonzo""   "".txt"" > = splitpath 'frodo.txt' """"      ""frodo.txt"" > = splitpath '/usr/' ""/usr""  """" > = splitext '/usr/bin/lua' ""/usr/bin/lua""  """" >  These functions return two strings, one of which may be the empty string (rather than nil). On Windows, they use both forward- and back-slashes, on Unix only forward slashes. Inserting and Extending Most of the Microlight functions work on Lua tables. Although these may be both arrays and hashmaps, generally we tend to use them as one or the other. From now on, we'll use array and map as shorthand terms for tables update adds key/value pairs to a map, and extend appends an array to an array; they are two complementary ways to add multiple items to a table in a single operation. > a = {one=1,two=2} > update(a,{three=3,four=4}) > = a {one=1,four=4,three=3,two=2} > t = {10,20,30} > extend(t,{40,50}) > = t {10,20,30,40,50}  As from version 1.1, both of these functions take an arbitrary number of tables. To 'flatten' a table, just unpack it and use extend: > pair = {{1,2},{3,4}} > = extend({},unpack(pair)) {1,2,3,4}  extend({},t) would just be a shallow copy of a table. More precisely, extend takes an indexable and writeable object, where the index runs from 1 to #O with no holes, and starts adding new elements at O[#O+1]. Simularly, the other arguments are indexable but need not be writeable. These objects are typically tables, but don't need to be. You can exploit the guarantee that extend always goes sequentially from 1 to #T, and make the first argument an object: > obj = setmetatable({},{ __newindex = function(t,k,v) print(v) end }) > extend(obj,{1,2,3}) 1 2 3  To insert multiple values into a position within an array, use insertvalues. It works like table.insert, except that the third argument is an array of values. If you do want to overwrite values, then use true for the fourth argument: > t = {10,20,30,40,50} > insertvalues(t,2,{11,12}) > = t {10,11,12,20,30,40,50} > insertvalues(t,3,{2,3},true) > = t {10,11,2,3,30,40,50}  (Please note that the original table is modified by these functions.) update' works likeextend`. except that all the key value pairs from the input tables are copied into the first argument. Keys may be overwritten by subsequent tables. > t = {} > update(t,{one=1},{ein=1},{one='ONE'}) > = t {one=""ONE"",ein=1}  import is a specialized version of update; if the first argument is nil then it's assumed to be the global table. If no tables are provided, it brings in the ml table itself (hence the lazy require ""ml"".import() idiom). If the arguments are strings, then we try to require them. So this brings in LuaFileSystem and imports lfs into the global table. So it's a lazy way to do a whole bunch of requires. A module 'package.mod' will be brought in as mod. Note that the second form actually does bring all of lpeg's functions in. > import(nil,'lfs') > import(nil,require 'lpeg')  Extracting and Mapping The opposite operation to extending is extracting a number of items from a table. There's sub, which works just like string.sub and is the equivalent of list slicing in Python: > numbers = {10,20,30,40,50} > = sub(numbers,1,1) {10} > = sub(numbers,2) {20,30,40,50} > = sub(numbers,1,-2) {10,20,30,40}  indexby indexes a table by an array of keys: > = indexby(numbers,{1,4}) {10,40} > = indexby({one=1,two=2,three=3},{'three','two'}) {[3,2}  Here is the old standby imap, which makes a new array by applying a function to the original elements: > words = {'one','two','three'} > = imap(string.upper,words) {""ONE"",""TWO"",""THREE""} > s = {'10','x','20'} > ns = imap(tonumber,s) > = ns {10,false,20}  imap must always return an array of the same size - if the function returns nil, then we avoid leaving a hole in the array by using false as a placeholder. Another popular function indexof does a linear search for a value and returns the 1-based index, or nil if not successful: > = indexof(numbers,20) 2 > = indexof(numbers,234) nil  This function takes an optional third argument, which is a custom equality function. In general, you want to match something more than just equality. ifind will return the first value that satisfies the given function. > s = {'x','10','20','y'} > = ifind(s,tonumber) ""10""  The standard function tonumber returns a non-nil value, so the corresponding value is returned - that is, the string. To get all the values that match, use ifilter: > = ifilter(numbers,tonumber) {""10"",""20""}  There is a useful hybrid between imap and ifilter called imapfilter which is particularly suited to Lua use, where a function commonly returns either something useful, or nothing. (Phillip Janda originally suggested calling this transmogrify, since no-one has preconceptions about it, except that it's a cool toy for imaginative boys). > = imapfilter(tonumber,{'one',1,'f',23,2}) {1,23,2}  collect makes a array out of an iterator. 'collectuntilcan be given a custom predicate andcollectntakes up to a maximum number of values, which is useful for iterators that never terminate. (Note that we need to pass it either a proper iterator, likepairs, or a function or exactly one function - which isn't the case withmath.random`) > s = 'my dog ate your homework' > words = collect(s:gmatch '%a+') > = words {""my"",""dog"",""ate"",""your"",""homework""} > R = function() return math.random() end > = collectn(3,R) {0.0012512588885159,0.56358531449324,0.19330423902097} > lines = collectuntil(4,io.lines()) one two three four > = lines {""one"",""two"",""three"",""four""}  A simple utility to sort standard input looks like this: require 'ml'.import() lines = collect(io.lines()) table.sort(lines) print(table.concat(lines,'\n'))  Another standard function that can be used here is string.gmatch. LuaFileSystem defines an iterator over directory contents. collect(lfs.dir(D)) gives you an array of all files in directory D. Finally, removerange removes a range of values from an array, and takes the same arguments as sub. Unlike the filters filters, it works in-place. Sets and Maps indexof is not going to be your tool of choice for really big tables, since it does a linear search. Lookup on Lua hash tables is faster, if we can get the data into the right shape. invert turns a array of values into a table with those values as keys: > m = invert(numbers) > = m {[20]=2,[10]=1,[40]=4,[30]=3,[50]=5} > = m[20] 2 > = m[30] 3 > = m[25] nil > m = invert(words) > = m {one=1,three=3,two=2}  So from a array we get a reverse lookup map. This is also exactly what we want from a set: fast membership test and unique values. Sets don't particularly care about the actual value, as long as it evaluates as true or false, hence: > = issubset(m,{one=true,two=true}) true  makemap takes another argument and makes up a table where the keys come from the first array and the values from the second array: > = makemap({'a','b','c'},{1,2,3}) {a=1,c=3,b=2}  Higher-order Functions Functions are first-class values in Lua, so functions may manipulate them, often called 'higher-order' functions. By callable we either mean a function or an object which has a __call metamethod. The callable function checks for this case. Function composition is often useful: > printf = compose(io.write,string.format) > printf(""the answer is %d\n"",42) the answer is 42  bind1 and bind2 specialize functions by creating a version that has one less argument. bind1 gives a function where the first argument is bound to some value. This can be used to pass methods to functions expecting a plain function. In Lua, obj:f() is shorthand for obj.f(obj,...). Just using a dot is not enough, since there is no implicit binding of the self argument. This is precisely what bind1 can do: > ewrite = bind1(io.stderr.write,io.stderr) > ewrite 'hello\n'  We want a logging function that writes a message to standard error with a line feed; just bind the second argument to '\n': > log = bind2(ewrite,'\n') > log 'hello' hello  Note that sub(t,1) does a simple array copy: > copy = bind2(sub,1) > t = {1,2,3} > = copy(t) {1,2,3}  It's easy to make a 'predicate' for detecting empty or blank strings: > blank = bind2(string.match,'^%s*$') > = blank '' """" > = blank '  ' ""  "" > = blank 'oy vey' nil  I put 'predicate' in quotes because it's again not classic true/false; Lua actually only developed false fairly late in its career. Operationally, this is a fine predicate because nil matches as 'false' and any string matches as 'true'. This pattern generates a whole family of classification functions, e.g. hex (using '%x+'), upcase ('%u+'), iden ('%a[%w_]*') and so forth. You can keep the binding game going (after all, bind2 is just a function like any other.) > matcher = bind1(bind2,string.match) > hex = matcher '^%x+$'  Predicates are particularly useful for ifind and ifilter. It's now easy to filter out strings from a array that match blank or hex, for instance. It is not uncommon for Lua functions to return multiple useful values; sometimes the one you want is the second value - this is what take2 does: > p = lfs.currentdir() > = p ""C:\\Users\\steve\\lua\\Microlight"" > = splitpath(p) ""C:\\Users\\steve\\lua"" ""Microlight"" > basename = take2(splitpath) > = basename(p) ""Microlight"" > extension = take2(splitext) > = extension 'bonzo.dog' "".dog""  There is a pair of functions map2fun and fun2map which convert indexable objects into callables and vice versa. Say I have a table of key/value pairs, but an API requires a function - use map2fun. Alternatively, the API might want a lookup table and you only have a lookup function. Say we have an array of objects with a name field. The find method will give us an object with a particular name: > obj = objects:find ('X.name=Y','Alfred') {name='Afred',age=23} > by_name = function(name) return objects:find('X.name=Y',name) end > lookup = fun2map(by_name) > = lookup.Alfred {name='Alfred',age=23}  Now if you felt particularly clever and/or sadistic, that anonymous function could be written like so: (note the different quotes needed to get a nested string lambda): by_name = bind1('X:find(""X.name==Y"",Y)',objects)  Classes Lua and Javascript have two important things in common; objects are associative arrays, with sugar so that t.key == t['key']; there is no built-in class mechanism. This causes a lot of (iniital) unhappiness. It's straightforward to build a class system, and so it is reinvented numerous times in incompatible ways. class works as expected: Animal = ml.class() Animal.sound = '?'  function Animal:_init(name)     self.name = name end  function Animal:speak()     return self._class.sound..' I am '..self.name end  Cat = class(Animal) Cat.sound = 'meow'  felix = Cat('felix')  assert(felix:speak() == 'meow I am felix') assert(felix._base == Animal) assert(Cat.classof(felix)) assert(Animal.classof(felix))  It creates a table (what else?) which will contain the methods; if there's a base class, then that will be copied into the table. This table becomes the metatable of each new instance of that class, with __index pointing to the metatable itself. If obj.key is not found, then Lua will attempt to look it up in the class. In this way, each object does not have to carry references to all of its methods, which gets inefficient. The class is callable, and when called it returns a new object; if there is an _init method that will be called to do any custom setup; if not then the base class constructor will be called. All classes have a _class field pointing to itself (which is how Animal.speak gets its polymorphic behaviour) and a classof function. Array Class Since Lua 5.1, the string functions can be called as methods, e.g. s:sub(1,2). People commonly would like this convenience for tables as well. But Lua tables are building blocks; to build abstract data types you need to specialize your tables. So ml provides a Array class: local Array = ml.class()  -- A constructor can return a _specific_ object function Array:_init(t)     if not t then return nil end  -- no table, make a new one     if getmetatable(t)==Array then  -- was already a Array: copy constructor!         t = ml.sub(t,1)     end     return t end  function Array:map(f,...) return Array(ml.imap(f,self,...)) end  Note that if a constructor does return a value, then it becomes the new object. This flexibility is useful if you want to wrap existing objects. We can't just add imap, because the function signature is wrong; the first argument is the function and it returns a plain jane array. But we can add methods to the class directly if the functions have the right first argument, and don't return anything: ml.import(Array,{     -- straight from the table library     concat=table.concat,sort=table.sort,insert=table.insert,     remove=table.remove,append=table.insert, ... })  ifilter and sub are almost right, but they need to be wrapped so that they return Arrays as expected. > words = Array{'frodo','bilbo','sam'} > = words:sub(2) {""bilbo"",""sam""} > words:sort() > = words {""bilbo"",""frodo"",""sam""} > = words:concat ',' ""bilbo,frodo,sam"" > = words:filter(string.match,'o$'):map(string.upper) {""BILBO"",""FRODO""}  Arrays are easier to use and involve less typing because the table functions are directly available from them. Methods may be chained, which (I think) reads better than the usual functional application order from right to left. For instance, the sort utility discussed above simply becomes: local Array = require 'ml'.Array print(Array.collect(io.lines()):sort():concat '\n')  I don't generally recommend putting everything on one line, but it can be done if the urge is strong ;) The ml table functions are available as methods: > l = Array.range(10,50,10) > = l:indexof(30) 3 > = l:indexby {1,3,5} {10,30,50} > = l:map(function(x) return x + 1 end) {11,21,31,41,51}  Lua anonymous functions have a somewhat heavy syntax; three keywords needed to define a short lambda. It would be cool if the shorthand syntax |x| x+1 used by Metalua would make into mainstream Lua, but there seems to be widespread resistance to this little convenience. In the meantime, there are string lambdas. All ml functions taking function args go through function_arg which raises an error if the argument isn't callable. But it will also understand 'X+1' as a shorthand for the above anonymous function. Such strings are expressions containing the placeholder variables X,Y and Z corresponding to the first, second and third arguments. > A = Array > a1 = A{1,2} > a2 = A{10,20} > = a1:map2('X+Y',a2) {11,21}  String lambdas are more limited. There's no easy (or efficient) way for them to access local variables like proper functions; they only see the global environment. BUt I consider this a virtue, since they are intended to be 'pure' functions with no side-effects. Array is a useful class from which to derive more specialized classes, and it has a very useful 'class method' to make adding new methods easy. In this case, we intend to keep strings in this subclass, so it should have appropriate methods for 'bulk operations' using string methods. Strings = class(Array)  Strings:mappers {  -- NB: note the colon: class method     upper = string.upper,     match = string.match, }  local s = Strings{'one','two','three'}  assert(s:upper() == Strings{'ONE','TWO','THREE'}) assert(s:match '.-e$' == Strings{'one','three'}) assert(s:sub(1,2):upper() == Strings{'ONE','TWO'})  In fact, Array has been designed to be extended. Note that the inherited method sub is actually returning a Strings object, not a vanilla Array. This property is usually known as covariance. It's useful to remember that there is nothing special about Array methods; they are just functions which take an array-like table as the first argument. Saying Array.map(t,f) where t is some random array-like table or object is fine - but the result will be an Array. Experiments! Every library project has a few things which didn't make the final cut, and this is particularly true of Microlight. The ml_properties module allows you to define properties in your classes. This comes from `examples/test.lua': local props = require 'ml_properties'  local P = class()  -- will be called after setting _props function P:update (k,v)     last_set = k end  -- any explicit setters will be called on construction function P:set_name (name)     self.myname = name end  function P:get_name ()     last_get = 'name'     return self.myname end  -- have to call this after any setters or getters are defined... props(P,{     __update = P.update;     enabled = true,  -- these are default values     visible = false,     name = 'foo', -- has both a setter and a getter })  local p = P()  -- initial state asserteq (p,{myname=""foo"",_enabled=true,_visible=false})  p.visible = true  -- P.update fired! asserteq(last_set,'visible')  ml_range (constributed by Dirk Laurie for this release) returns a function which works like ml.range, except that it returns a Vector class which has element-wise addition and multiplication operators. ml_module is a Lua 5.2 module constructor which shows off that interesting function ml.import. Here is the example in the distribution: -- mod52.lua local _ENV = require 'ml_module' (nil, -- no wholesale access to _G     'print','assert','os', -- quoted global values brought in     'lfs', -- not global, so use require()!     table -- not quoted, import the whole table into the environment!     )  function format (s)     local out = {'Hello',s,'at',os.date('%c'),'here is',lfs.currentdir()}     -- remember table.* has been brought in..     return concat(out,' ') end  function message(s)     print(format(s)) end  -- no, we didn't bring anything else in assert(setmetatable == nil)  -- NB return the _module_, not the _environment_! return _M  This uses a 'shadow table' trick; the environment _ENV contains all the imports, plus the exported functions; the actual module _M only contains the exported functions. So it's equivalent to the old-fashioned module('mod',package.seeall) technique, except that there is no way of accessing the environment of the module without using the debug module - which you would never allow into a sandboxed environment anyway. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/stevedonovan/Microlight"	"A little library of useful Lua functions; the 'extra light' version of Penlight."	"true"
"Game Engines"	"LÖVE 2D"	"http://love2d.org/"	"Desktop game development platform. Cross-platform, feature-complete, well-adopted."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LÖVE - Free 2D Game Engine LÖVE Hi there! LÖVE is an *awesome* framework you can use to make 2D games in Lua. It's free, open-source, and works on Windows, Mac OS X, Linux, Android and iOS. Download LÖVE 0.10.1 (release notes) Windows XP+ 32-bit installer 32-bit zipped 64-bit installer 64-bit zipped Mac OS X 10.7+ 64-bit zipped Ubuntu 14.04 – 16.04 PPA 32-bit: liblove · love · dbg 64-bit: liblove · love · dbg Other downloads Android — Play Store Android APK Linux source iOS source Other versions Open Source LÖVE is licensed under the liberal zlib/libpng license. This means that: It costs nothing. You can use it freely for commercial purposes with no limitations. The source can be found on Bitbucket. Community If you get stuck, many friendly people are ready to help you at the forums. Be warned, however, that it sometimes gets too friendly. People also post their games and projects on the forums, so it's a nice way of exploring what LÖVE can do. Or at least what people choose to use it for. There is also an IRC channel: #love@irc.oftc.net. Examples It’s pretty easy to get started with LÖVE, just check out these code snippets. Drawing text function love.draw() love.graphics.print(""Hello World!"", 400, 300) end Drawing an image function love.load() whale = love.graphics.newImage(""whale.png"") end function love.draw() love.graphics.draw(whale, 300, 200) end Playing a sound function love.load() sound = love.audio.newSource(""music.ogg"") love.audio.play(sound) end Check out some more tutorials on the wiki. Games LÖVE has been used for commercial projects, game jams, prototyping, and everything in between. Here are a few examples. Stuff @obey_love on Twitter LÖVE on Google+ LÖVE T-shirts, etc Special effects edition Donate World domination is ensured with your donation. Thank you! Contact You can file a bug, ask a question in the forums, or contact rude for other stuff. Documentation love audio event filesystem font graphics image joystick keyboard math mouse physics sound system thread timer touch video window"	"null"	"null"	"Desktop game development platform. Cross-platform, feature-complete, well-adopted."	"true"
"Game Engines"	"Corona SDK"	"https://coronalabs.com/products/corona-sdk/"	"Development platform for iOS and Android. Proprietary, but used by numerous top games and apps, totaling over 150 million downloads."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"WHY CHOOSE CORONA SDK? | Corona Labs Corona Labs Features FREE Enterprise Corona Cards Corona Ads FAQ Examples Corona Showcase Case Studies Learn GETTING STARTED Developer Guides Documentation Learn Lua Corona University Sample Code Books and Courses Community Forums Blog Submit a bug Code Exchange Feature Request Developer Tools Corona Editor Third-Party Tools Marketplace Market Place Plugins Submit a plugin Login Download WHY CHOOSE CORONA SDK ? Corona SDK is a cross-platform framework that empowers developers to create 2D games and apps for mobile, TV, and desktop. It’s designed to enable super-fast development – up to 10x faster than other platforms. Adding sophisticated features is easy using our elegant Lua-based APIs. A streamlined workflow lets you see your changes instantly. Monetization is built in with Corona Ads. And you can publish to all major platforms from a single code base. 100% Free Corona SDK is completely free. That means you can take your ideas from concept to app store glory without any upfront costs. You have the freedom to create great apps, right from the start. Easy To Learn Lua and Corona SDK are super easy to learn. Build your first app in 5 minutes using our guides, tutorials, and examples. If you can match your socks in the morning, you can make apps using Corona SDK. Publish to Major Mobile Platforms Build games and apps for all major platforms from one codebase, including iOS, Android, Kindle, Windows Phone 8, Apple TV, Android TV, OS X and Windows Desktops. No separate projects or rewrites needed. Windows & OS X support Corona’s real time, interactive simulator runs on both Mac OS X and Windows so you can develop apps using your favorite tools. Build apps for tvOS & Android TV Target next-generation devices using Corona SDK. Publish your apps on Apple TV and Android TV and reach a much broader audience. Real-Time Testing Write code, save changes, instantly see results. Corona SDK offers rapid prototyping and development to save you hours of valuable time so you can move your apps off your to-do list and into the marketplace fast. ABOUT CORONA LABS Our mission is to enable anyone to create great mobile apps. Our flagship product, Corona SDK, is the world’s most advanced 2D mobile development platform. Corona Labs is a Perk company. Read More | We're Hiring SOCIAL SUPPORT Contact Corona Labs SUBSCRIBE TO OUR NEWSLETTER Email * Copyright © 2016 Corona Labs. A Company. All rights reserved. Terms | Privacy"	"null"	"null"	"Development platform for iOS and Android. Proprietary, but used by numerous top games and apps, totaling over 150 million downloads."	"true"
"Game Engines"	"MOAI"	"http://getmoai.com/"	"Open source, cross-platform, mobile game development framework. Minimalist C++ engine powered by Lua scripting."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Moai | The mobile platform for pro game developers Blog Downloads Forums Docs Games RSS Feed Feed Entries Blog Archive 2015 (2) July (1) • Invisible Inc. Out of Early Access March (1) • Kickstarter Gives Staff Pick to MOAI Gam... 2014 (4) December (1) • Apple's 2014 App of the Year September (1) • Moai 1.5.2 Desktop Release April (1) • MOAI Fiddle March (1) • MOAI 1.5 Community Release Available 2013 (7) August (1) • Shutting Down Moai Cloud April (1) • Moai Meetup in San Francsico !!! March (3) • New Moai SDK Book! • Ideas for Google Summer of Code 2013 • Moai SDK 1.4p0 Released February (1) • MOAI FAQ in Serbo-Croatian January (1) • New Books Featuring Moai 2012 (46) October (3) • Moai SDK 1.3r2 is now available • AppThwack - A New Weapon for Your Testin... • Interview on state of mobile advertising September (3) • Game From Scratch publishes ""Battle of t... • New Moai SDK 1.3 release now available • Announcing Moai SDK Support in ZeroBrane... August (5) • Gravity Four releases Fruit Versus Robot • Social Games Today Interviews Zipline CE... • Durazno • RapidFire studios moves to Moai • We hear casino games are hot right now..... July (3) • Checking Apple iTunes Receipts with Moai... • Moai Cloud HTTP Boilerplate • CEO Interview: The Past, Present and Fut... June (10) • Thanks for joining team Moai at Google I... • Thinking Isometric • Unit Tests for Moai SDK • Strikefleet Omega storming the iOS and A... • Moai SDK 1.2 Revision 2 • Moai Cloud Sandbox Extension: GridFSFile... • Moai SDK 1.2 is here • Normalized Line Endings in Git • Changes to Moai SDK release process with... • New Moai White Paper May (3) • New first-class glyph and particle tools... • Moai SDK 1.1 • Double Fine chooses Moai April (6) • Continuous Integration and Moai's New Mo... • Wolf Toss Released on Amazon App Store, ... • Shadowrun Returns is 200% funded • Shadowrun Returns on Kickstarter • Moai SDK 1.0 (revision 3) • Android Fragmentation - Maybe Not Such a... March (8) • Moai SDK 1.0 (revision 2) • Moai Cloud 1.0 • Moai 2012 Roadmap • Moai 1.0 Launch Stats • Moai 1.0 is here! • Interview with Berkeley Malagon from Dis... • HTML 5 Hype vs. Reality Infographic • Horns & Halos Photobooth February (1) • GDC March 5-8th January (4) • 5 Lessons from a Successful Multi-platfo... • Moai named a 2011 Open Source Rookie of ... • Moai SDK 0.95 Beta (revision 3) with som... • Moai SDK 0.95 Beta (revision 1) with syn... 2011 (67) December (5) • Congrats to Go Go Kiddo! • More than 3000 Moai Developers • 1st Moai Game on Kindle Fire, Go Go Kidd... • RapaNui: a new, open-source, high-level ... • Wolf Toss available today on half a bill... November (3) • Moai SDK 0.9 Beta (revision 8) with addi... • Moai SDK 0.9 Beta (revision 7) with Goog... • Moai SDK 0.9 Beta (revision 5) with NaCl... October (3) • Moai SDK 0.8 Beta (revision 3) • Moai support in Code'n'Web's Texture Pac... • Big news: Moai for Chrome September (4) • Detailed Gamasutra blog on Making Crimso... • Moai SDK 0.7 Beta (revision 1) • Made with Moai interview: The Making of ... • Crimson: Steam Pirates is out. Download ... August (5) • Moai SDK 0.6 Beta (revision 2) • ""Crimson: Steam Pirates"" release date an... • Moai SDK 0.5 Beta (revision 1) • Open GL ES 2.0 and Virtual File Systems • Handling Multiple Device Resolutions and... July (17) • Come hear Patrick's panel at PAX Dev (Au... • Moai SDK 0.4 Beta (revision 12) • Tracking analytics in your game for free... • Tapjoy to boost game player counts and r... • Moai SDK 0.4 Beta (revision 11) • Apsalar analytics • Monetizing your game for free with Tapjo... • UNTZ Audio • Moai SDK 0.4 Beta (revsion 10) • Moai Tutorials: Bug Squisher • Moai Tutorials: MOAITraits and Trait Inh... • Moai Beta Now Open to All Developers • Welcome Crimson and Bubble Ball! • Chronosaur Gameplay Video: July 5 • Cool news: Zipline chosen as GamesBeat c... • Moai Cloud Basics: How to Duplicate an A... • Moai Tutorials: User Input June (9) • Lua now one of the top 10 coding languag... • Moai Tutorials: Moai Cloud Basics 2 • Moai Cloud Documentation: Moai Cloud Lua... • Moai Cloud Documentation: Using MongoDB ... • Moai Cloud Documentation: Getting Starte... • Moai Tutorials: Moai Cloud Basics • Moai Tutorials: Textboxes • Moai Tutorials: Basic Prop Animations • Moai Tutorial: Rocket Lobster May (7) • Robert Nay, Nay Games • New Moai Beta SDK Release for May 31st • Thanks for a great Moai Boot Camp! • Chronosaur Dev Diary #3: Art & Gameplay ... • New Moai Beta SDK Release for May 14th • Chronosaur Game Play April 28-May5 • Wolf Toss Dev Diary #2: Working With Fla... April (12) • Moai Basics Part 2 • Join us for a Moai ""Boot Camp"" on May 26... • Meet us at Startup Weekend and LOGIN 201... • New Moai Beta SDK Release • Chronosaur Dev Diary #2: New Stuff Every... • New Moai SDK Beta Release • Gods of the Build • Moai Basics - Part 1 • New Moai SDK Beta Release - Push Notific... • AT&T Mobile App Hack-a-thon • Amazing interest in the Moai Beta • Moai beta starts tomorrow March (2) • Wolf Toss Dev Diary #1: Setting art dire... • Chronosaur Dev Diary #1: The initial gam... Tag Cloud Android Android NDK Blog Cloud Eclipse Moai Moai Basics Series Moai Platform Tutorials Moai SDK Moai basics series Moai beta Moai platform Moai team News Programming VentureBeat Xcode Zipline Games arcade game dev diary dev docs developer dinosaur events game game art game design game developer high speed how to iPad interview mobile game open source puzzle game racer racing game rampage three little pigs uncategorized Invisible Inc. Out of Early Access Details Category: Blog Published on Saturday, 04 July 2015 06:50 Written by Dave Kerr A new game, ""Invisible Inc."", by Klei Entertainment, publishers of Don't Starve, has come out of Early Access on Steam to a full release and stellar reviews: http://www.rockpapershotgun.com/2015/05/12/invisible-inc-review/ http://www.destructoid.com/review-invisible-inc--291971.phtml http://kotaku.com/invisible-inc-the-kotaku-review-1703519658 ""Take control of Invisible's agents in the field and infiltrate the world's most dangerous corporations. Stealth, precision, and teamwork are essential in high-stakes, high-profit missions, where every move may cost an agent their life."" The game is nominated for IGF Excellence in Design award and the Seumas McNally Grand Prize: http://www.gamasutra.com/view/news/236778/Road_to_the_IGF_Klei_Entertainments_Invisible_Inc.php Of interest to MOAI tinkerers is Lua source code found in the deliverable of the game packaging, available for Windows, Mac, and Linux.  Their game forums are rife with hacker activity: http://forums.kleientertainment.com/topic/54184-kwad/ Check it out on Steam, or on their website: http://store.steampowered.com/app/243970/ http://www.invisibleincgame.com Kickstarter Gives Staff Pick to MOAI Game Details Category: Blog Published on Thursday, 12 March 2015 05:26 Written by Dave Kerr Don't Be Patchman was picked out by Kickstarter and awarded a Staff Pick! You can see the official Tweet about it here: https://twitter.com/ksr_staff/status/575323093918486528 The project aims to direct ten percent of crowdfunds to opensource development tools such as: MOAI - www.getmoai.com ZeroBrane Studio - studio.zerobrane.com Tiled Map Editor - www.mapeditor.org Box2D - www.box2d.org You can back this project during March 2015 by pledging on Kickstarter or voting on Steam Greenlight. Apple's 2014 App of the Year Details Category: Blog Published on Wednesday, 10 December 2014 05:11 Written by Dave Kerr Elevate was selected App of the Year for 2014 by Apple. From the developer: ""Just wanted to throw it out there that we built the games in the app with MOAI, and we're super grateful to have had it as the foundation of our cross-platform tech stack for games."" This is being reported by major news outlets: http://time.com/3623190/apple-best-apps-iphone/ http://www.businessinsider.com/elevate-wins-best-iphone-app-year-2014-2014-12 Big credit to MOAI and its tough community! Moai 1.5.2 Desktop Release Details Category: Blog Published on Saturday, 27 September 2014 05:51 Written by Dave Kerr To help people get started who don't want to compile the latest source code, here is a compiled version of the desktop hosts for MOAI 1.5.2: https://github.com/moai/moai-dev/releases/tag/Version-1.5.2-binary-desktop Includes: OSX SDL host Linux SDL host Windows SDL host (MinGW) With all optional modules enabled (including LuaJIT).  People have been asking for the desktop binaries to quickly start prototyping or to play with the samples.  Halfnelson has generously built and released these on github.  A binary SDK release will follow. MOAI Fiddle Details Category: Blog Published on Friday, 04 April 2014 14:29 Written by Dave Kerr Moai Fiddle is an HTML5 interactive code editor.  If you have used jsfiddle before the usage is similar. Just type your Moai code in the editor window and click play. You will see the result on the right.  Underneath the player is the console. Anything typed into this will be executed within the currently running player as Lua code.  On the left is the virtual filesystem, currently a bunch of files from the Moai samples for your script to reference and a copy of the Flower library. http://moaifiddle.com This plugin has been developed solely by the Moai community, thanks to user 'halfnelson', and illustrates the portable power of Moai: write-once, run-a-lot-of-places!  Join the discussion in our forums! MOAI 1.5 Community Release Available Details Category: Blog Published on Monday, 24 March 2014 09:41 Written by Dave Kerr Waiting every hour of every day for a new MOAI blog post?  Wait no longer! Good news comes this time around with the announcement of a community release.  Version 1.5 is now in the git repository.  This version brings significant changes, a lot of improvements, and a slew of features. Feature merge from Zipline: Massive rework of the garbage collection system to simplify object tracking Reworking of the AKU Modules API New SDL host to complement the GLUT host A flag to MOAIAction to disable auto-stop on no children A New Build System: The CMake build system that was in place for the linux and blackberry hosts was extened to include all hosts Luajit support was added to all platforms (via cmake scripts) create-project-* scripts were created that allows you to generate vs2008->vs2013 and xcode project files. Changes to a project can be recorded once in the relevant cmake script and all platforms should work instead of maintaining 6+ build configs Plugin support was added for installing modules which are outside the moai sdk (other repos) [More] Custom host support was added for compiling a host outside of the repo [More] Support for compiling with Ming-w64 for a completely open source experience on Windows (no more vcruntime to distribute) Additional Features: Vector Pathfinding (MOAIVecPathGraph) Box2D Closest Raycast Exposure Twitter support in android MOAIShader was enhanced with the 4x4 matrix and given access to UNIFORM_WORLD_VIEW A faster and smoother android host with working keyboard support. MOAISafariIOS is now MOAIBrowserIOS and MOAIBrowserAndroid added Visibility can now be inherited! Google Play Services Updated Tapjoy and Vungle MOAISim showCursor and hideCursor support Documentation improvements Chartboost for IOS and android You can now EnqueueJoystickEvent from the host. New HTML/JS host based on emscripten Fixes: Android logging support repaired VFS works correctly on all platforms A heap of lua stack overflows Fixes to JSON parser and encoder Textbox string bounds calculations fixed PVR support working now GetMOAI: Clone MOAI here: https://github.com/moai/moai-dev Additional/updated info available here: https://github.com/moai/moai-dev/wiki/Whats-New-in-1.5 Forum Discussion: http://getmoai.com/forums/what-s-new-in-1-5-t2541/ Thanks to Users: patrick - contributed a huge chunk of code halfnelson - merged 1.5 via moaiforge, built moaicli makotok - maintained the github repository joshua_jandyco - added luajit support and many many more News and Notes: While there are still a few hitches and minor glitches, 1.5 is ready for your app/game, but you will have to use git to get it.  Still to come is a packaged archive with precompiled hosts, which we will announce again here when ready. Don't forget to join us in our forums and on #moai chat on FreeNode IRC! Next up: we are compiling a list of the latest games made with MOAI!  :)   Shutting Down Moai Cloud Details Category: Blog Published on Sunday, 18 August 2013 08:11 Written by Patrick Meehan We are discontinuing support for Moai Cloud at the end of this month (August 2013). If you need help or a migration plan for your projects, please contact us. Moai SDK will continue to be available as an open source project. Moai Meetup in San Francsico !!! Details Category: Blog Published on Tuesday, 09 April 2013 10:48 Yes! We finally decided to do a meetup in San Francisco. Thanks to our friends from MindSnacks that made this possible. All the info for the event here:  http://moaimeetup.eventbrite.com/ New Moai SDK Book! Details Category: Blog Published on Friday, 22 March 2013 19:02 Hi everybody! Short blog post to tell you that the first book about Moai SDK will be available on March 26th. It's a step-by-step introduction to the framework, where you will build 2 prototypes. It's been written by me (Francisco Tufró) and reviewed by Adam and Eric from Zipline!   http://www.packtpub.com/developing-mobile-games-with-moai-sdk/book We hope you enjoy it! Ideas for Google Summer of Code 2013 Details Category: Blog Published on Friday, 22 March 2013 10:05 Hi everybody! We're applying to this year's Google Summer of Code, in search of new members that will join the community and help the project. Here is a list of ideas for the potential projects: Better documentation: Documentation in Moai SDK is hard to read and not always correct. We need to review the whole framework's docs, create samples that are missing and update the existing ones. Unified build system: Maintaining a lot of different build systems for each platform has become a probem. We would like to have something like cmake creating projects for the different systems. 3D framework: Right now 3D support is really small, we need to create a unified way to work with models, create model import classes, and usual 3D stuff. New audio framework: Untz, our current audio framework, is far from ideal, so we need a new one.  Hope you like these ideas and join us!!! Moai SDK 1.4p0 Released Details Category: Blog Published on Saturday, 02 March 2013 03:39 Finally!!! After about 4 months we have a new release! We've been dealing with a lot internally, the studio had a lot of work to do with Slots but here we are. The news are that I (Francisco Tufró) am going to be taking care of Moai SDK releases, pull requests and all things SDK. What's new? Since this release, we removed the sign up requirement for Moai SDK Download. So just head to our Downloads section and get the latest release. We also added nightly builds, so you don't have to wait until an official release is done in order to try edge stuff. But keep in mind that nightly builds are extremely unstable. Another thing that we're going to do from now on is to keep a file named CHANGELOG.txt in the root of the release package, it will include info about all the commits included in it and credits to the developers that collaborated. Highlights Android Keyboard Better Threading support Offscreen frame-buffering Directory structure Even if there were no huge changes in the SDK I decided to bump to 1.4 because we changed the directory structure of releases. The new structure is as follows: bin/ Development binaries for Windows and MacOSX, Linux will be added soon docs/ Documentation for this release and attribution images hosts/ Source and IDE projects for the different platform's hosts include/ Include headers lib/ Compiled (static and/or dynamic) libraries for all the supported platforms samples/ Moai SDK feature samples  The main idea behind the changes was splitting the executable binaries from the libraries and also to give better naming to platforms (ant now is android for example). Hope you enjoy this release and keep creating amazing games! We love you! ❤ ChangeLog  Version 1.4p0 ------------- by Patrick Meehan ( https://github.com/patrickmeehan ) * Added setTerrainMask () to MOAIPathFinder; renamed setTerrainScale () to setTerrainWeight () * Some work has been done on threading. Check MOAIThread. * added support for default texture; finished async load; samples for async texture load   and default texture * added support in MOAIDataBuffer to detect zip files, inflate on load; added inflate on load   support to MOAIDataIOTask * moai coding style guide in .doc format * first phase of offscreen rendering architecture completed * added setClearColor () to MOAILayer * samples to test multiple viewports inside an offscreen buffer * integrated sfmt random number generator * Merged playnomi contribs to MOAIImage, MOAIImageTexture, MOAIParticleSystem and MOAIParticlePexPlugin by Adam Villalobos ( https://github.com/adamvillalobos ) * Adding GCM support ( replacing C2DM ) to Android host. * Adding file not found log if a texture file fails to load * Fixing build errors for DataTaskIO * Fixing issue with setting visibility not properly updating dependencies * Fixing bug with Font reloading on Android * Added Android keyboard support by John Copic ( https://github.com/JohnCopic ) * Adding sfmt lib to android build. by JoakimBlomberg ( https://github.com/JoakimBlomberg ) * Script node apply of attributes should unpack attribute id or it will not be applied by Bogdan Tatarov ( https://github.com/btatarov ) * adding MOAIUnitzSound::_getFilename() by mxttie ( https://github.com/mxttie ) * updated box2d physics sample adding mouse manipulation using mouse joint by Tommo Zhou ( https://github.com/tommo ) * fix edge case that new-created-paused action cannot receive further update * fix: MOAIImageTexture not override OnInvalidate by Antonio ( https://github.com/antback ) * Initial Camera Support for iOS by sporksmith ( https://github.com/sporksmith ) * Log file-open failures by Clement Farabet ( https://github.com/clementfarabet ) * Fixed VSYNC issue for OSX host. * Added missing files to iOS (XCode) project. by Francisco Tufro ( https://github.com/franciscotufro ) * Several fixes in build systems for all platforms * New release script in bin/distribute by Stephen Belanger ( https://github.com/Qard ) * Recommended to enable this with C-Ares   http://curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTNOSIGNAL by Ben Borowski ( https://github.com/typeoneerror ) * Adds call to FMOD update to iOS sample project. by Robert Wahler ( https://github.com/robertwahler ) * GlutHost will run ""main.lua"" if host binary is called without arguments * add Lua global 'arg' that mimics the lua/luajit built-in global 'arg' to GlutHost by Alexey Zankevich ( https://github.com/Nepherhotep ) * MOAIJsonParser fix - checking if lua number is integer has been added * Added EVENT_PAUSE, EVENT_RESUME events to MOAISim * Fixed MOAIEnvironment.screenDpi nil issue for Android * Fixed MOAIEnvironment.screenDpi nil issue for iOS host by Seebs ( https://github.com/seebs ) * Clarify description of textbox color escapes, fixing one typo and reducing confusion   between number of bits and number of values represented. * build.sh: Terser output * add (untested) support for controlling GL blend equations. by ChairGraveyard ( https://github.com/ChairGraveyard ) * Add support for collideConnected flag to MOAIBox2DWorld::_addRopeJoint by out-of-pixel ( https://github.com/out-of-pixel ) * Fixed last Key Error from MOAIAnimCurve by superquadratic ( https://github.com/superquadratic ) * Fix Clang 4.2 (Xcode 4.6) Compiler Warnings     MOAI FAQ in Serbo-Croatian Details Category: Blog Published on Thursday, 14 February 2013 21:34 Thanks Vera Djuraskovic for translating our FAQ to Serbo-Croatian! We hope this allows people from the former Yugoslav Republics to join our community! Check it out here: http://science.webhostinggeeks.com/moai !!! New Books Featuring Moai Details Category: Blog Published on Friday, 18 January 2013 17:46 Written by Patrick Meehan Just a quick post to tell you about two cool new books that have chapters on Moai. The first is 'Learn Lua for iOS Game Development' by our friend Jayant Varma: http://www.apress.com/9781430246626 http://www.amazon.com/exec/obidos/ASIN/1430246626/ref=nosim/apre-20 The second is Jason Brownlee's 'Mobile Game Engines: Interviews with Mobile Game Engine Developers': http://mobilegameengines.com/interviews_with_mobile_game_engine_developers Check them out! Moai SDK 1.3r2 is now available Details Category: Blog Published on Tuesday, 23 October 2012 14:37 Summer is well and truly over here in Seattle, but the good news is that the pace of Moai development is picking up! The new Moai SDK 1.3r2 is now available for download. This release saw a focus on iOS, with support for the iOS 6 SDK and Xcode 4.5 plus a round of new features and bug fixes for all platforms. Most importantly, we have updated the Moai Xcode project to support Apple's latest Xcode version 4.5 and the iOS 6 SDK. What does this mean for you? The biggest change is that Xcode 4.5 adds support for armv7s and the iPhone 5, but drops support for older armv6 iOS devices, and requires a minimum of iOS 4.3. Apple's armv6 devices include the iPhone 3G and earlier iPhones, and the first two generations of iPod touch devices. The Moai codebase on github can still be used to build to armv6 with previous Xcode versions, but your build flags will need to be reverted to support this. Thanks again to Moai contributors and developers who assisted with this release.   What's new in Moai SDK 1.3r2: -iOS 6 and armv7s support added -Dropped armv6 support on iOS -Added setFailOnError method to MOAIHTTPTask to allow getting information from 400+ codes -Modified MOAITextDesigner's layout behavior to snap the layout cursor's Y-Coordinate to integer boundaries between lines of text -Modifed MOAITextDesigner's layout method to snap lines of text to integer boundaries to prevent blurring -Fixed a buffer overrun issue in Visual Studio 2010 -Fixed 'setLength' function on MOAIBOX2DDistanceJoint -Fixed a bug with Curl HTTP task resetting on certain calls -Fixed offscreen buffer ( MOAIFrameBuffer ) clipping bug -Fixed issue with MOAICpBody not registering MOAITransformBase functions -Fixed issue with MOAISerializer not handling escaped quotes -Fixing bug causing '.fnt' file to fail to load if not in the current directory -Added MOAIBox2DRopeJoint to global Lua class registration -Added a fill method to MOAIGrid -Fixed issue with MOAIParticleEmmiter so that it uses the proper location and apply transforms in the correct order -Fixed a bug with 3d picking -Added sort modes to propListForRay   Want to discuss this update in the Moai Forums?  Go for it. More Articles... AppThwack - A New Weapon for Your Testing Arsenal Interview on state of mobile advertising New Moai SDK 1.3 release now available Game From Scratch publishes ""Battle of the Lua Game Engines"" Subcategories GDD: Chronosaur GDD: Crimson Steam Pirates GDD: Wolf Toss Moai Basics Series Moai Platform Tutorials News Releases Page 1 of 9 Start Prev 1 2 3 4 5 6 7 8 9 Next End Moai Platform Moai FAQ Attribution Tools Partners Partner Services Quick Links Docs Company Contact Us Careers © 2011 - 2012, Zipline Games, Inc. Privacy Policy Terms & Conditions"	"null"	"null"	"Open source, cross-platform, mobile game development framework. Minimalist C++ engine powered by Lua scripting."	"true"
"Game Engines"	"Drystal"	"https://drystal.github.io/"	"Open source, games can run on Linux or on any platform with a recent web browser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Welcome to Drystal’s website! — Drystal v1.1 documentation Drystal API Reference Engine Callbacks Event Callbacks Graphics Window Surface Drawing primitives Blending Camera Buffer Shader Post processing Colors Sprite Font rendering Particle System Physics Shape Body MouseJoint RopeJoint DistanceJoint RevoluteJoint PrismaticJoint Audio Music Sound Storage Web Timer Utils Tutorials Basics: Tic-tac-toe Getting our first window Drawing the board Drawing sprites Loading the resources Let’s draw! Getting mouse events Is there a winner ? Gameover screen Bonus: Highlighting the tiles Final code Resources Useful links Lua Box2D Lua libraries Moonscript   Drystal Docs » Welcome to Drystal’s website! View page source Welcome to Drystal’s website!¶ API Reference Engine Event Graphics Font rendering Particle System Physics Audio Storage Web Timer Utils Tutorials Basics: Tic-tac-toe Resources Useful links What is Drystal?¶ Drystal is a Lua 2D game engine. It is free and open-source. The engine is compiled to Javascript thanks to Emscripten. Games can be ran on Linux or on any platform with a recent web browser. You can find a game made with Drystal here. It has been made in 48h during a Ludum Dare. Features¶ Window creation: hide cursor and relative mode User events: keyboard, mouse Textures: load various formats, render to texture support, ability to apply transformations (rotation, resizes) Drawing primitives: lines, triangles, rectangles (filled or not), circles and polygons Audio support: multiple musics, multiple sounds at once, loadable from file or from lua-generated buffers Shader support: GLSL and post processing effect facilities Some additional modules: Font: loads .ttf files and render. Using the given syntax, you can highlight words with color/size change. Web: adds a wget function to download content (ex: download sounds if needed) or run JS code Physics: uses Box2D to compute physics simulation (not a one-to-one binding) Particle systems to easily improve the game aspect Storage to save/load games (even in browser) Contribute¶ Source Code: http://github.com/kidanger/drystal Please report any issue here: http://github.com/kidanger/drystal/issues Support¶ If you are having trouble using Drystal, please let us know. We have a mailing list located at: https://groups.google.com/forum/#!forum/drystal License¶ Drystal is licensed under LGPLv3 license. The external/ folder contains third-party libraries: stb_vorbis.c, stb_image.c and stb_truetype.c which are in the public domain lua/ which is under the MIT License box2d/ which is under the zlib License lua-cjson/ which is under the MIT License wavloader.c which is in the public domain miniz.c which is in the public domain Next © Copyright 2014, Jérémy Anger. Built with Sphinx using a theme provided by Read the Docs."	"null"	"null"	"Open source, games can run on Linux or on any platform with a recent web browser."	"true"
"Game Engines"	"Amulet"	"http://www.amulet.xyz/"	"Open source, audio/visual toolkit suitable for small games and experimentation. It runs on Windows, Mac, Linux, HTML5 and iOS."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"116"	"19"	"4"	"GitHub - ianmaclarty/amulet: lua game engine Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 116 Fork 4 ianmaclarty/amulet Code Issues 44 Pull requests 0 Wiki Pulse Graphs lua game engine 952 commits 2 branches 85 releases Fetching contributors C++ 51.7% JavaScript 28.9% Lua 9.0% C 4.2% HTML 1.7% Makefile 1.5% Other 3.0% C++ JavaScript Lua C HTML Makefile Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v1.2.1 v1.2.1-distro-trigger v1.2.0 v1.2.0-distro-trigger v1.1.10 v1.1.10-distro-trigger v1.1.9 v1.1.9-distro-trigger v1.1.8 v1.1.8-distro-trigger v1.1.7 v1.1.6 v1.1.6-distro-trigger v1.1.5 v1.1.5-distro-trigger v1.1.4 v1.1.3 v1.1.3-distro-trigger v1.1.2 v1.1.2-distro-trigger v1.1.1 v1.1.1-distro-trigger v1.1.0 v1.1.0-distro-trigger v1.0.10 v1.0.10-distro-trigger v1.0.9 v1.0.9-distro-trigger v1.0.8 v1.0.8-distro-trigger v1.0.7 v1.0.7-distro-trigger v1.0.6 v1.0.6-distro-trigger v1.0.5 v1.0.4 v1.0.4-distro-trigger v1.0.3 v1.0.3-distro-trigger v1.0.2 v1.0.2-distro-trigger v1.0.1 v1.0.0 v1.0.0-distro-trigger v0.2.6 v0.2.6-distro-trigger v0.2.5 v0.2.4 v0.2.4-distro-trigger v0.2.3 v0.2.3-distro-trigger v0.2.2 v0.2.2-distro-trigger v0.2.1 v0.2.1-distro-trigger v0.1.23 v0.1.22 v0.1.22-distro-trigger v0.1.21 v0.1.21-distro-trigger v0.1.20 v0.1.10 v0.1.10-distro-trigger v0.1.9 v0.1.9-distro-trigger v0.1.8 v0.1.8-distro-trigger v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.4-distro-trigger v0.1.3 v0.1.3-distro-trigger v0.1.2 v0.1.1 v0.1.0 v0.1.0-test5 v0.1.0-test4 v0.1.0-test3 v0.1.0-test1 v0.1.0-test v0.1.0-test-distro-trigger v0.1.0-distro-trigger distro-trigger-v0.1.2 Nothing to show New pull request Latest commit 5f0e7d2 Jul 1, 2016 ianmaclarty fix bug with controller rstick x val Permalink Failed to load latest commit information. benchmarks update benchmark Mar 6, 2016 doc regen docs Jun 26, 2016 examples particles bug fix Jun 26, 2016 html add mandelbrot set visualizer example Feb 28, 2016 lua particles bug fix Jun 26, 2016 scripts avoid deprecated audio library warning on osx Jun 4, 2016 site explain method syntax in lua primer Feb 1, 2016 src fix bug with controller rstick x val Jul 1, 2016 tests test am.struct_array Jun 13, 2016 third_party avoid deprecated audio library warning on osx Jun 4, 2016 tools separate license (CC-BY-NC) for examples/ and doc/ Jan 6, 2016 .appveyor.yml distro build: clean up Dec 16, 2015 .gitignore avoid deprecated audio library warning on osx Jun 4, 2016 .travis.yml export command now generates iOS packages Apr 2, 2016 Common.mk avoid deprecated audio library warning on osx Jun 4, 2016 LICENSE add SDL readme snippet to LICENSE Jan 17, 2016 Makefile draft game center support (untested) Mar 11, 2016 README.md Update README.md Feb 15, 2016 cachegrind_amulet add cachegrind script Feb 16, 2016 gen_default_font.sh update default font gen script to use amulet pack Jan 20, 2016 logo.png add README.md Sep 23, 2015 logo_notext.png windows installer script Dec 14, 2015 profile_amulet add profiling script Feb 16, 2016 valgrind.sup audio_buffers Jan 6, 2016 valgrind_amulet rename vamulet script to valgrind_amulet Feb 16, 2016 README.md Amulet is a Lua-based audio/visual toolkit designed for small games and experimentation. Here's what a minimal Hello World! looks like in Amulet: am.window{}.scene = am.text(""Hello World!"") Supported platforms It currently runs on the following platforms: Windows 7+ Mac OS X 10.6+ Linux iOS HTML5 Android support will also be added at some point. Binary distributions These are available from http://www.amulet.xyz. Documentation See http://www.amulet.xyz/doc/. Building from source Linux Make sure you have gcc and g++ installed, then do: make  If you get errors, you may also need to install additional dev packages, such as as libgl1-mesa-dev (for OpenGL headers) or libasound2-dev (for audio support in SDL). OSX Install the command line developer tools (clang, clang++), then do: make  Windows You will need to install MinGW and MSYS as well as a Microsoft Visual C compiler. You will need to create your own version of msys.bat with something like the following at the top: call ""%VS120COMNTOOLS%vsvars32.bat"" >NUL:  (VS120COMNTOOLS may be different depending on which version of Visual Studio you're using.) This sets up the Visual Studio command line environment. Then, from the msys shell, do: make  Cross compiling It's also possible to cross-compile to various platforms (e.g. HTML5, iOS, MinGW). See the files .travis.yml, scripts/appveyor.bat and scripts/travis.sh for examples of how to do this. Credits Amulet uses or borrows code and ideas from the following projects: Lua LuaJIT SDL2 Sean's Tool Box KissFFT Blink ANGLE FreeType GLM Emscripten OpenCV SimpleGlob TinyMT sfxr The HTML editor uses code and ideas from: Codemirror PuzzleScript and Zeedonk jQuery JSZip FileSaver.js The Amulet logo was designed by Bethany Wilksch. Build status System Status Travis (Linux, OSX, iOS, MinGW) Appveyor (MSVC, Emscripten) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ianmaclarty/amulet"	"Open source, audio/visual toolkit suitable for small games and experimentation. It runs on Windows, Mac, Linux, HTML5 and iOS."	"true"
"Game Engines"	"gengine"	"https://gengine.bitballoon.com/"	"A 2d game engine for fast development, using entities and components system, for Linux, Windows and HTML5."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"gengine • A 2d game engine for fast development A 2d game engine for fast development Downloads Release 0.2 for Windows HTML5 Demos Spine sample Isometric test A strategy game A particles editor Features Lua scripts Entities and components system For Linux, Windows and HTML5 HTML5 User Interface Spine animation support Spriter animation support Tiled support Documentation Wiki is here gengine gengine-samples Roadmap"	"null"	"null"	"A 2d game engine for fast development, using entities and components system, for Linux, Windows and HTML5."	"true"
"Game Development"	"Coronium.io"	"http://coronium.io/"	"Simple cloud platform supporting analytics, data objects, user management, and more."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	""	"null"	"null"	"Simple cloud platform supporting analytics, data objects, user management, and more."	"true"
"Game Development"	"lurker"	"https://github.com/rxi/lurker"	"Shortens the iteration cycle by auto-swapping changed Lua files in a running LÖVE project."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"72"	"15"	"7"	"GitHub - rxi/lurker: Auto-swaps changed Lua files in a running LÖVE project Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 72 Fork 7 rxi/lurker Code Issues 0 Pull requests 0 Pulse Graphs Auto-swaps changed Lua files in a running LÖVE project 25 commits 1 branch 2 releases 3 contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 2da9d44 Mar 4, 2015 rxi Updated copyright year Permalink Failed to load latest commit information. .gitignore First commit Mar 5, 2014 LICENSE First commit Mar 5, 2014 README.md Updated README.md for lurker.preswap() Mar 4, 2015 lurker.lua Updated copyright year Mar 4, 2015 README.md Lurker A small module which automatically hotswaps changed Lua files in a running LÖVE project. Installation Drop the lurker.lua and lume.lua files into an existing project and add the following line inside the love.update() function: require(""lurker"").update() Lurker will automatically detect changed files and hotswap them into the running project. Additional Functionality To more easily make use of additional functionality, the lurker module can be set to a variable when it is required into the project: lurker = require ""lurker"" lurker.scan() As opposed to using the lurker.update() function -- such to avoid the overhead of repeatedly polling for file changes -- you can instead opt to trigger a scan of the directory by calling lurker.scan() manually. If the scan detects any changes a hotswap is performed. lurker.preswap lurker.preswap can be set to a function. This function is called before a hotswap occurs and is passed the name of the file which will be swapped. If the function returns true then the hotswap is canceled. lurker.preswap = function(f) print(""File "" .. f .. "" swapping..."") end lurker.postswap lurker.postswap can be set to a function. This function is called after a hotswap occurs and is passed the name of the file which was swapped. lurker.postswap = function(f) print(""File "" .. f .. "" was swapped"") end lurker.protected Dictates whether lurker should run in protected mode; this is true by default. If protected mode is disabled then LÖVE's usual error screen is used when an error occurs in a LÖVE callback function; if it is enabled then lurker's error state (which continues watching for file changes and can resume execution) is used. Changes to this variable should be made before any calls to lurker.update() are made. lurker.quiet Dictates what should happen if lurker tries to load a file which contains a syntax error. If it is false then lurker's error screen is shown until the syntax error is fixed; if it is true the error message is printed to the console and the program continues. lurker.quiet is false by default. lurker.interval The interval in seconds for how often the scan of the directory is performed. This is .5 by default. lurker.path The directory which is scanned for changes. This is . (The project's root) by default. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rxi/lurker"	"Shortens the iteration cycle by auto-swapping changed Lua files in a running LÖVE project."	"true"
"Game Development"	"HUMP"	"http://vrld.github.io/hump"	"A set of lightweight helpers for LÖVE; a game-oriented utility belt."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"hump The documentation is now hosted at hump.readthedocs.org"	"null"	"null"	"A set of lightweight helpers for LÖVE; a game-oriented utility belt."	"true"
"Game Development"	"moaifiddle"	"http://moaifiddle.com/"	"Edit and share short scripts for the MOAI game engine and run them in the browser using WebGL."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Loading..."	"null"	"null"	"Edit and share short scripts for the MOAI game engine and run them in the browser using WebGL."	"true"
"Game Development"	"Jumper"	"https://github.com/Yonaba/Jumper"	"Fast, lightweight, and easy-to-use pathfinding library for grid-based games."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"329"	"45"	"65"	"GitHub - Yonaba/Jumper: Fast, lightweight and easy-to-use pathfinding library for grid-based games Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 45 Star 329 Fork 65 Yonaba/Jumper Code Issues 21 Pull requests 7 Pulse Graphs Fast, lightweight and easy-to-use pathfinding library for grid-based games http://yonaba.github.io/Jumper 210 commits 5 branches 5 releases 5 contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags demo-app gh-pages global master node-weight Nothing to show jumper-1.8.1-1 jumper-1.8.0 jumper-1.7.0-1 jumper-1.6.3-1 jumper-1.6-2 Nothing to show New pull request Latest commit df4eb22 Apr 12, 2015 Yonaba Merge pull request #39 from gitter-badger/gitter-badge … Add a Gitter chat badge to README.md Permalink Failed to load latest commit information. docs Updated HTML output May 10, 2013 examples Updated examples Apr 9, 2013 jumper Fix documentation typo Jul 1, 2014 rockspecs Pushed 1.8.1 rockspec Mar 1, 2013 specs Updated specs, as of upstream changes Apr 9, 2013 .gitignore Added debug tools Apr 9, 2013 .travis.yml Updated .travis.yml Feb 7, 2013 LICENSE.txt Renamed MIT-LICENSE to LICENSE Mar 18, 2013 README.md Added Gitter badge Apr 12, 2015 version_history.md Added 1.8.1 changes Mar 1, 2013 README.md Jumper Jumper is a pathfinding library designed for grid-based games. It aims to be fast and lightweight. It features a wide range of search algorithms, built within a clean interface with chaining features which makes it very friendly and easy to use. Jumper is written in pure Lua. Thus, it is not framework-related and can be used in any project embedding Lua code. Installation The current repository can be retrieved locally on your computer via: Bash git clone git://github.com/Yonaba/Jumper.git Download (latest) Development version: zip | tar.gz ( please do not use this! ) Latest stable release (1.8.1): zip | tar.gz ( Recommended! ) All stable releases: tags LuaRocks luarocks install jumper MoonRocks luarocks install --server=http://rocks.moonscript.org/manifests/Yonaba jumper Installing Jumper Copy the contents of the folder named jumper and its contents and place it inside your projet. Use require function to import any module of the library. A Simple Example of Use Here is a simple example explaining how to use Jumper: -- Usage Example -- First, set a collision map local map = {     {0,1,0,1,0},     {0,1,0,1,0},     {0,1,1,1,0},     {0,0,0,0,0}, } -- Value for walkable tiles local walkable = 0  -- Library setup local Grid = require (""jumper.grid"") -- The grid class local Pathfinder = require (""jumper.pathfinder"") -- The pathfinder lass  -- Creates a grid object local grid = Grid(map)  -- Creates a pathfinder object using Jump Point Search local myFinder = Pathfinder(grid, 'JPS', walkable)   -- Define start and goal locations coordinates local startx, starty = 1,1 local endx, endy = 5,1  -- Calculates the path, and its length local path = myFinder:getPath(startx, starty, endx, endy) if path then   print(('Path found! Length: %.2f'):format(path:getLength()))     for node, count in path:nodes() do       print(('Step: %d - x: %d - y: %d'):format(count, node:getX(), node:getY()))     end end  --> Output: --> Path found! Length: 8.83 --> Step: 1 - x: 1 - y: 1 --> Step: 2 - x: 1 - y: 3 --> Step: 3 - x: 2 - y: 4 --> Step: 4 - x: 4 - y: 4 --> Step: 5 - x: 5 - y: 3 --> Step: 6 - x: 5 - y: 1 Specs Specs tests have been included. You can run them using Telescope with the following command from the root folder: tsc -f specs/*  Credits and Thanks Daniel Harabor, Alban Grastien : for the Jump Point Search algorithm. XueXiao Xu, Nathan Witmer: for the JavaScript port of the algorithm. Steve Donovan: for the awesome documentation generator tool LDoc. Srdjan Markovic, for his tremendous feedback. License This work is under MIT-LICENSE Copyright (c) 2012-2013 Roland Yonaba. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Yonaba/Jumper"	"Fast, lightweight, and easy-to-use pathfinding library for grid-based games."	"true"
"Game Development"	"lume"	"https://github.com/rxi/lume/"	"Utility belt library geared toward game development."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"133"	"17"	"16"	"GitHub - rxi/lume: Lua functions geared towards gamedev Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 17 Star 133 Fork 16 rxi/lume Code Issues 1 Pull requests 1 Pulse Graphs Lua functions geared towards gamedev 205 commits 2 branches 16 releases 3 contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.x.x master Nothing to show v2.2.3 v2.2.2 v2.2.1 v2.2.0 v2.1.0 v2.0.0 v1.5.0 v1.4.1 v1.4.0 v1.3.1 v1.3.0 v1.2.1 v1.2.0 v1.1.2 v1.1.1 v1.1.0 Nothing to show New pull request Latest commit 59f9093 Feb 21, 2016 rxi Added `lume.isarray()` to README Permalink Failed to load latest commit information. test Added support for NaN, inf and -inf to lume.serialize; updated tests Sep 23, 2015 LICENSE Updated license copyright year Jan 24, 2015 README.md Added `lume.isarray()` to README Feb 21, 2016 lume.lua Exposed internal `isarray()` function as `lume.isarray()` Feb 21, 2016 README.md Lume A collection of functions for Lua, geared towards game development. Installation The lume.lua file should be dropped into an existing project and required by it: lume = require ""lume"" Function Reference lume.clamp(x, min, max) Returns the number x clamped between the numbers min and max lume.round(x [, increment]) Rounds x to the nearest integer; rounds away from zero if we're midway between two integers. If increment is set then the number is rounded to the nearest increment. lume.round(2.3) -- Returns 2 lume.round(123.4567, .1) -- Returns 123.5 lume.sign(x) Returns 1 if x is 0 or above, returns -1 when x is negative. lume.lerp(a, b, amount) Returns the linearly interpolated number between a and b, amount should be in the range of 0 - 1; if amount is outside of this range it is clamped. lume.lerp(100, 200, .5) -- Returns 150 lume.smooth(a, b, amount) Similar to lume.lerp() but uses cubic interpolation instead of linear interpolation. lume.pingpong(x) Ping-pongs the number x between 0 and 1. lume.distance(x1, y1, x2, y2 [, squared]) Returns the distance between the two points. If squared is true then the squared distance is returned -- this is faster to calculate and can still be used when comparing distances. lume.angle(x1, y1, x2, y2) Returns the angle between the two points. lume.random([a [, b]]) Returns a random number between a and b. If only a is supplied a number between 0 and a is returned. If no arguments are supplied a random number between 0 and 1 is returned. lume.randomchoice(t) Returns a random value from array t. If the array is empty an error is raised. lume.randomchoice({true, false}) -- Returns either true or false lume.weightedchoice(t) Takes the argument table t where the keys are the possible choices and the value is the choice's weight. A weight should be 0 or above, the larger the number the higher the probability of that choice being picked. If the table is empty, a weight is below zero or all the weights are 0 then an error is raised. lume.weightedchoice({ [""cat""] = 10, [""dog""] = 5, [""frog""] = 0 }) -- Returns either ""cat"" or ""dog"" with ""cat"" being twice as likely to be chosen. lume.isarray(x) Returns true if x is an array -- the value is assumed to be an array if it is a table which contains a value at the index 1. This function is used internally and can be overridden if you wish to use a different method to detect arrays. lume.push(t, ...) Pushes all the given values to the end of the table t and returns the pushed values. Nil values are ignored. local t = { 1, 2, 3 } lume.push(t, 4, 5) -- `t` becomes { 1, 2, 3, 4, 5 } lume.remove(t, x) Removes the first instance of the value x if it exists in the table t. Returns x. local t = { 1, 2, 3 } lume.remove(t, 2) -- `t` becomes { 1, 3 } lume.clear(t) Nils all the values in the table t, this renders the table empty. Returns t. local t = { 1, 2, 3 } lume.clear(t) -- `t` becomes {} lume.extend(t, ...) Copies all the fields from the source tables to the table t and returns t. If a key exists in multiple tables the right-most table's value is used. local t = { a = 1, b = 2 } lume.extend(t, { b = 4, c = 6 }) -- `t` becomes { a = 1, b = 4, c = 6 } lume.shuffle(t) Returns a shuffled copy of the array t. lume.sort(t [, comp]) Returns a copy of the array t with all its items sorted. If comp is a function it will be used to compare the items when sorting. If comp is a string it will be used as the key to sort the items by. lume.sort({ 1, 4, 3, 2, 5 }) -- Returns { 1, 2, 3, 4, 5 } lume.sort({ {z=2}, {z=3}, {z=1} }, ""z"") -- Returns { {z=1}, {z=2}, {z=3} } lume.sort({ 1, 3, 2 }, function(a, b) return a > b end) -- Returns { 3, 2, 1 } lume.array(...) Iterates the supplied iterator and returns an array filled with the values. lume.array(pairs({a = 1, b = 2})) -- Returns {""a"", ""b""} lume.each(t, fn, ...) Iterates the table t and calls the function fn on each value followed by the supplied additional arguments; if fn is a string the method of that name is called for each value. The function returns t unmodified. lume.each({1, 2, 3}, print) -- Prints ""1"", ""2"", ""3"" on separate lines lume.each({a, b, c}, ""move"", 10, 20) -- Does x:move(10, 20) on each value lume.map(t, fn) Applies the function fn to each value in table t and returns a new table with the resulting values. lume.map({1, 2, 3}, function(x) return x * 2 end) -- Returns {2, 4, 6} lume.all(t [, fn]) Returns true if all the values in t table are true. If a fn function is supplied it is called on each value, true is returned if all of the calls to fn return true. lume.all({1, 2, 1}, function(x) return x == 1 end) -- Returns false lume.any(t [, fn]) Returns true if any of the values in t table are true. If a fn function is supplied it is called on each value, true is returned if any of the calls to fn return true. lume.any({1, 2, 1}, function(x) return x == 1 end) -- Returns true lume.reduce(t, fn [, first]) Applies fn on two arguments cumulative to the items of the array t, from left to right, so as to reduce the array to a single value. If a first value is specified the accumulator is initialised to this, otherwise the first value in the array is used. If the array is empty and no first value is specified an error is raised, lume.reduce({1, 2, 3}, function(a, b) return a + b end) -- Returns 6 lume.set(t) Returns a copy of the t array with all the duplicate values removed. lume.set({2, 1, 2, ""cat"", ""cat""}) -- Returns {1, 2, ""cat""} lume.filter(t, fn [, retainkeys]) Calls fn on each value of t table. Returns a new table with only the values where fn returned true. If retainkeys is true the table is not treated as an array and retains its original keys. lume.filter({1, 2, 3, 4}, function(x) return x % 2 == 0 end) -- Returns {2, 4} lume.reject(t, fn [, retainkeys]) The opposite of lume.filter(): Calls fn on each value of t table; returns a new table with only the values where fn returned false. If retainkeys is true the table is not treated as an array and retains its original keys. lume.reject({1, 2, 3, 4}, function(x) return x % 2 == 0 end) -- Returns {1, 3} lume.merge(...) Returns a new table with all the given tables merged together. If a key exists in multiple tables the right-most table's value is used. lume.merge({a=1, b=2, c=3}, {c=8, d=9}) -- Returns {a=1, b=2, c=8, d=9} lume.concat(...) Returns a new array consisting of all the given arrays concatenated into one. lume.concat({1, 2}, {3, 4}, {5, 6}) -- Returns {1, 2, 3, 4, 5, 6} lume.find(t, value) Returns the index/key of value in t. Returns nil if that value does not exist in the table. lume.find({""a"", ""b"", ""c""}, ""b"") -- Returns 2 lume.match(t, fn) Returns the value and key of the value in table t which returns true when fn is called on it. Returns nil if no such value exists. lume.match({1, 5, 8, 7}, function(x) return x % 2 == 0 end) -- Returns 8, 3 lume.count(t [, fn]) Counts the number of values in the table t. If a fn function is supplied it is called on each value, the number of times it returns true is counted. lume.count({a = 2, b = 3, c = 4, d = 5}) -- Returns 4 lume.count({1, 2, 4, 6}, function(x) return x % 2 == 0 end) -- Returns 3 lume.slice(t [, i [, j]]) Mimics the behaviour of Lua's string.sub, but operates on an array rather than a string. Creates and returns a new array of the given slice. lume.slice({""a"", ""b"", ""c"", ""d"", ""e""}, 2, 4) -- Returns {""b"", ""c"", ""d""} lume.first(t [, n]) Returns the first element of an array or nil if the array is empty. If n is specificed an array of the first n elements is returned. lume.first({""a"", ""b"", ""c""}) -- Returns ""a"" lume.last(t [, n]) Returns the last element of an array or nil if the array is empty. If n is specificed an array of the last n elements is returned. lume.last({""a"", ""b"", ""c""}) -- Returns ""c"" lume.invert(t) Returns a copy of the table where the keys have become the values and the values the keys. lume.invert({a = ""x"", b = ""y""}) -- returns {x = ""a"", y = ""b""} lume.pick(t, ...) Returns a copy of the table filtered to only contain values for the given keys. lume.pick({ a = 1, b = 2, c = 3 }, ""a"", ""c"") -- Returns { a = 1, c = 3 } lume.keys(t) Returns an array containing each key of the table. lume.clone(t) Returns a shallow copy of the table t. lume.fn(fn, ...) Creates a wrapper function around function fn, automatically inserting the arguments into fn which will persist every time the wrapper is called. Any arguments which are passed to the returned function will be inserted after the already existing arguments passed to fn. local f = lume.fn(print, ""Hello"") f(""world"") -- Prints ""Hello world"" lume.once(fn, ...) Returns a wrapper function to fn which takes the supplied arguments. The wrapper function will call fn on the first call and do nothing on any subsequent calls. local f = lume.once(print, ""Hello"") f() -- Prints ""Hello"" f() -- Does nothing lume.memoize(fn) Returns a wrapper function to fn where the results for any given set of arguments are cached. lume.memoize() is useful when used on functions with slow-running computations. fib = lume.memoize(function(n) return n < 2 and n or fib(n-1) + fib(n-2) end) lume.combine(...) Creates a wrapper function which calls each supplied argument in the order they were passed to lume.combine(); nil arguments are ignored. The wrapper function passes its own arguments to each of its wrapped functions when it is called. local f = lume.combine(function(a, b) print(a + b) end,                        function(a, b) print(a * b) end) f(3, 4) -- Prints ""7"" then ""12"" on a new line lume.call(fn, ...) Calls the given function with the provided arguments and returns its values. If fn is nil then no action is performed and the function returns nil. lume.call(print, ""Hello world"") -- Prints ""Hello world"" lume.time(fn, ...) Inserts the arguments into function fn and calls it. Returns the time in seconds the function fn took to execute followed by fn's returned values. lume.time(function(x) return x end, ""hello"") -- Returns 0, ""hello"" lume.lambda(str) Takes a string lambda and returns a function. str should be a list of comma-separated parameters, followed by ->, followed by the expression which will be evaluated and returned. local f = lume.lambda ""x,y -> 2*x+y"" f(10, 5) -- Returns 25 lume.serialize(x) Serializes the argument x into a string which can be loaded again using lume.deserialize(). Only booleans, numbers, tables and strings can be serialized. Circular references will result in an error; all nested tables are serialized as unique tables. lume.serialize({a = ""test"", b = {1, 2, 3}, false}) -- Returns ""{[1]=false,[""a""]=""test"",[""b""]={[1]=1,[2]=2,[3]=3,},}"" lume.deserialize(str) Deserializes a string created by lume.serialize() and returns the resulting value. This function should not be run on an untrusted string. lume.deserialize(""{1, 2, 3}"") -- Returns {1, 2, 3} lume.split(str [, sep]) Returns an array of the words in the string str. If sep is provided it is used as the delimiter, consecutive delimiters are not grouped together and will delimit empty strings. lume.split(""One two three"") -- Returns {""One"", ""two"", ""three""} lume.split(""a,b,,c"", "","") -- Returns {""a"", ""b"", """", ""c""} lume.trim(str [, chars]) Trims the whitespace from the start and end of the string str and returns the new string. If a chars value is set the characters in chars are trimmed instead of whitespace. lume.trim(""  Hello  "") -- Returns ""Hello"" lume.wordwrap(str [, limit]) Returns str wrapped to limit number of characters per line, by default limit is 72. limit can also be a function which when passed a string, returns true if it is too long for a single line. -- Returns ""Hello world\nThis is a\nshort string"" lume.wordwrap(""Hello world. This is a short string"", 14) lume.format(str [, vars]) Returns a formatted string. The values of keys in the table vars can be inserted into the string by using the form ""{key}"" in str; numerical keys can also be used. lume.format(""{b} hi {a}"", {a = ""mark"", b = ""Oh""}) -- Returns ""Oh hi mark"" lume.format(""Hello {1}!"", {""world""}) -- Returns ""Hello world!"" lume.trace(...) Prints the current filename and line number followed by each argument separated by a space. -- Assuming the file is called ""example.lua"" and the next line is 12: lume.trace(""hello"", 1234) -- Prints ""example.lua:12: hello 1234"" lume.dostring(str) Executes the lua code inside str. lume.dostring(""print('Hello!')"") -- Prints ""Hello!"" lume.uuid() Generates a random UUID string; version 4 as specified in RFC 4122. lume.hotswap(modname) Reloads an already loaded module in place, allowing you to immediately see the effects of code changes without having to restart the program. modname should be the same string used when loading the module with require(). In the case of an error the global environment is restored and nil plus an error message is returned. lume.hotswap(""lume"") -- Reloads the lume module assert(lume.hotswap(""inexistant_module"")) -- Raises an error lume.ripairs(t) Performs the same function as ipairs() but iterates in reverse; this allows the removal of items from the table during iteration without any items being skipped. -- Prints ""3->c"", ""2->b"" and ""1->a"" on separate lines for i, v in lume.ripairs({ ""a"", ""b"", ""c"" }) do   print(i .. ""->"" .. v) end lume.color(str [, mul]) Takes color string str and returns 4 values, one for each color channel (r, g, b and a). By default the returned values are between 0 and 1; the values are multiplied by the number mul if it is provided. lume.color(""#ff0000"")               -- Returns 1, 0, 0, 1 lume.color(""rgba(255, 0, 255, .5)"") -- Returns 1, 0, 1, .5 lume.color(""#00ffff"", 256)          -- Returns 0, 256, 256, 256 lume.color(""rgb(255, 0, 0)"", 256)   -- Returns 256, 0, 0, 256 lume.rgba(color) Takes the 32bit integer color argument and returns 4 numbers, one for each channel, with a range of 0 - 255. The returned values can be used as the arguments to LÖVE's setColor() function. lume.rgba(0xFF304050) -- Returns 48, 64, 80, 255 lume.chain(value) Returns a wrapped object which allows chaining of lume functions. The function result() should be called at the end of the chain to return the resulting value. lume.chain({1, 2, 3, 4})   :filter(function(x) return x % 2 == 0 end)   :map(function(x) return -x end)   :result() -- Returns { -2, -4 } The table returned by the lume module, when called, acts in the same manner as calling lume.chain(). lume({1, 2, 3}):each(print) -- Prints 1, 2 then 3 on separate lines Iteratee functions Several lume functions allow a table, string or nil to be used in place of their iteratee function argument. The functions that provide this behaviour are: map(), all(), any(), filter(), reject(), match() and count(). If the argument is nil then each value will return itself. lume.filter({ true, true, false, true }, nil) -- { true, true, true } If the argument is a string then each value will be assumed to be a table, and will return the value of the key which matches the string. local t = {{ z = ""cat"" }, { z = ""dog"" }, { z = ""owl"" }} lume.map(t, ""z"") -- Returns { ""cat"", ""dog"", ""owl"" } If the argument is a table then each value will return true or false, depending on whether the values at each of the table's keys match the collection's value's values. local t = {   { age = 10, type = ""cat"" },   { age = 8,  type = ""dog"" },   { age = 10, type = ""owl"" }, } lume.count(t, { age = 10 }) -- returns 2 License This library is free software; you can redistribute it and/or modify it under the terms of the MIT license. See LICENSE for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rxi/lume/"	"Utility belt library geared toward game development."	"true"
"Game Development"	"NoobHub"	"https://github.com/Overtorment/NoobHub"	"Network multiplayer for Corona, LÖVE, and more, following a simple pub-sub model."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"130"	"38"	"34"	"GitHub - Overtorment/NoobHub: Network multiplayer and messaging for CoronaSDK, Moai, Gideros & LÖVE Skip to content Personal Open source Business Explore Get started Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 130 Fork 34 Overtorment/NoobHub Code Issues 4 Pull requests 0 Pulse Graphs Network multiplayer and messaging for CoronaSDK, Moai, Gideros & LÖVE 62 commits 7 branches 2 releases Fetching contributors Lua 68.5% JavaScript 26.6% PHP 3.2% Batchfile 1.7% Lua JavaScript PHP Batchfile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags beta dev-gideros-support dev-jsclient dev-love-support dev-moai-support master memleak-testing Nothing to show 0.1.1 0.0.1 Nothing to show New pull request Latest commit eb4ac2c Oct 12, 2015 Overtorment minor improvements; changed default ip Permalink Failed to load latest commit information. client minor improvements; changed default ip Oct 12, 2015 server minor improvements; changed default ip Oct 12, 2015 .gitignore ignore npm modules Mar 17, 2015 README.md Update README.md Mar 24, 2015 README.md NoobHub OpenSource multiplayer and network messaging for CoronaSDK, Moai, Gideros & LÖVE Battle-tested and production ready. Handling thousands of CCU (concurrent users), serving hundreds of thousands multiplayer games daily, routing hundreds of messages per second. Connections are routed through socket server with minimum latency, ideal for action games. Simple interface. Publish/subscribe paradigm in action. Server written on blazing fast Nodejs. Socket connections, works great through any NAT (local area network), messages delivery is reliable and fast. Repo includes server code (so you can use your own server) and CoronaSDK/Moai/Gideros client. More clients to come. You can test on my server, credentials are hardcoded in demo project! Lua code may serve as an example of how LuaSocket library works. How to use it START SERVER         $ nodejs node.js INITIALIZE         hub = noobhub.new({ server = ""127.0.0.1""; port = 1337; }); SUBSCRIBE TO A CHANNEL AND RECEIVE CALLBACKS WHEN NEW JSON MESSAGES ARRIVE         hub:subscribe({           channel = ""hello-world"";               callback = function(message)                  if(message.action == ""ping"")   then                      print(""Pong!"")                 end;              end;         }); SAY SOMETHING TO EVERYBODY ON THE CHANNEL         hub:publish({             message = {                 action  =  ""ping"",                 timestamp = system.getTimer()             }         }); Clients CoronaSDK Gideros Moai LÖVE Node.js (buggy) PHP (debug console only) Getting ready for production use If you expect more than 1000 concurrent connections, you should increase limits on your server (max open file descriptors, max TCP/IP connections) and optionally fine-tune your server's TCP/IP stack. To make sure server process stays alive you migh want to use tools such as forever.js or supervisord. Authors Igor Korsakov Sergii Tsegelnyk Licence WTFPL Official discussion thread [old] http://developer.coronalabs.com/code/noobhub [new] http://forums.coronalabs.com/topic/32775-noobhub-free-opensource-multiplayer-and-network-messaging-for-coronasdk Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Overtorment/NoobHub"	"Network multiplayer for Corona, LÖVE, and more, following a simple pub-sub model."	"true"
"Game Development"	"bump.lua"	"https://github.com/kikito/bump.lua"	"Minimal rectangle-based collision detection which handles tunnelling and basic collision resolution."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"231"	"22"	"26"	"GitHub - kikito/bump.lua: A collision detection library for Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 231 Fork 26 kikito/bump.lua Code Issues 0 Pull requests 0 Wiki Pulse Graphs A collision detection library for Lua 273 commits 9 branches 13 releases 7 contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags demo-dev demo dev gh-pages luacheck master platforms simpledemo-dev simpledemo Nothing to show v3.1.5 v3.1.3 v3.1.2 v3.1.1 v3.1.0 v3.0.1 v3.0.0 v2.0.1 v2.0.0 v1.2.0 v1.0.0 demo-2.0.0 3.1.4 Nothing to show New pull request Latest commit bb3d314 Jul 15, 2016 kikito fixes error in README. Fixes #23 Permalink Failed to load latest commit information. img export new png images Dec 3, 2014 rockspecs Add rockspec for 3.1.5 Oct 16, 2015 spec fix luacheck warning May 31, 2015 .gitignore ignore main.lua Oct 17, 2013 .travis.yml updates .travis.yml Feb 14, 2016 CHANGELOG.md release 3.1.5 Jun 18, 2015 MIT-LICENSE.txt first readme and license Aug 18, 2013 README.md fixes error in README. Fixes #23 Jul 15, 2016 bump.lua release 3.1.5 Jun 18, 2015 README.md bump.lua Lua collision-detection library for axis-aligned rectangles. Its main features are: bump.lua only does axis-aligned bounding-box (AABB) collisions. If you need anything more complicated than that (circles, polygons, etc.) give HardonCollider a look. Handles tunnelling - all items are treated as ""bullets"". The fact that we only use AABBs allows doing this fast. Strives to be fast while being economic in memory It's centered on detection, but it also offers some (minimal & basic) collision response Can also return the items that touch a point, a segment or a rectangular zone. bump.lua is gameistic instead of realistic. The demos are LÖVE based, but this library can be used in any Lua-compatible environment. bump is ideal for: Tile-based games, and games where most entities can be represented as axis-aligned rectangles. Games which require some physics, but not a full realistic simulation - like a platformer. Examples of genres: top-down games (Zelda), Shoot-them-ups, fighting games (Street Fighter), platformers (Super Mario). bump is not a good match for: Games that require polygons for the collision detection Games that require highly realistic simulations of physics - things ""stacking up"", ""rolling over slides"", etc. Games that require very fast objects colliding reallistically against each other (in bump, being gameistic, objects are moved and collided one at a time) Simulations where the order in which the collisions are resolved isn't known. Example local bump = require 'bump'  -- The grid cell size can be specified via the initialize method -- By default, the cell size is 64 local world = bump.newWorld(50)  -- create two rectangles local A = {name=""A""} local B = {name=""B""}  -- insert both rectangles into bump world:add(A,   0, 0,    64, 256) -- x,y, width, height world:add(B,   0, -100, 32, 32)  -- Try to move B to 0,64. If it collides with A, ""slide over it"" local actualX, actualY, cols, len = world:move(B, 0,64)  -- prints ""Attempted to move to 0,64, but ended up in 0,-32 due to 1 collisions"" if len > 0 then   print((""Attempted to move to 0,64, but ended up in %d,%d due to %d collisions""):format(actualX, actualY, len)) else   print(""Moved B to 100,100 without collisions"") end  -- prints the new coordinates of B: 0, -32, 32, 32 print(world:getRect(B))  -- prints ""Collision with A"" for i=1,len do -- If more than one simultaneous collision, they are sorted out by proximity   local col = cols[i]   print((""Collision with %s.""):format(col.other.name)) end  -- remove A and B from the world world:remove(A) world:remove(B) Demos There is a demo showing movement, collision detection and basic slide-based resolution in this branch: http://github.com/kikito/bump.lua/tree/simpledemo There's a more complex demo showing more advanced movement mechanics (i.e. acceleration, bouncing) in this other repo: http://github.com/kikito/bump.lua/tree/demo You will need LÖVE in order to try any of them. Basic API - Adding, removing and moving items Requiring the library local bump = require 'bump' The following methods (bump.newWorld, world:add, world:remove, world:update, world:move & world:check) are basic for working with bump, as well as the 4 collision responses. If you want to use bump.lua effectively, you will need to understand at least these. Creating a world local world = bump.newWorld(cellSize) The first thing to do with bump is creating a world. That is done with bump.newWorld. cellSize. Is an optional number. It defaults to 64. It represents the size of the sides of the (squared) cells that will be used internally to provide the data. In tile based games, it's usually a multiple of the tile side size. So in a game where tiles are 32x32, cellSize will be 32, 64 or 128. In more sparse games, it can be higher. Don't worry too much about cellSize at the beginning, you can tweak it later on to see if bigger/smaller numbers give you better results (you can't change the value of cellSize in runtime, but you can create as many worlds as you want, each one with a different cellsize, if the need arises.) The rest of the methods we have are for the worlds that we create. Adding items to the world world:add(item, x,y,w,h) world:add is what you need to insert a new item in a world. ""Items"" are ""anything that matters to your collision"". It can be the player character, a tile, a missile etc. In fact, you can insert items that don't participate in the collision at all - like puffs of smoke or background tiles. This can be handy if you want to use the bump world as a spatial database in addition to a collision detector (see the ""queries section"" below for mode details). Each item will have an associated ""rectangle"" in the world. item is the new item being inserted (usually a table representing a game object, like player or ground_tile). x,y,w,h: the rectangle associated to item in the world. They are all mandatory. w & h are the ""width"" and ""height"" of the box. x and y depend on the host system's coordinate system. For example, in LÖVE & Corona SDK they represent ""left"" & ""top"", while in Cocos2d-x they represent ""left"" & ""bottom"". world:add returns no values. It generates no collisions - you can call world:check(item) if you want to get the collisions it creates right after it's added. If you try to add an item to a world that already contains it, you will get an error. Removing items from the world world:remove(item) bump.lua stores hard references to any items that you add (with world:add). If you decide that a item is no longer necessary, in addition to removing it from your ""entity list"", you must also remove it from the world using world:remove. Otherwise it will still be there, and other objects might still collide with it. item must be something previously inserted in the world with world:add(item, l,t,w,h). If this is not the case, world:remove will raise an error. Once removed from the world, the item will stop existing in that world. It won't trigger any collisions with other objects any more. Attempting to move it with world:move or checking collisions with world:check will raise an error. It is ok to remove an object from the world and later add it again. In fact, some bump methods do this internally. This method returns nothing. Changing the position and dimensions of items in the world world:update(item, x,y,<w>,<h>) Even if your ""player"" has attributes like player.x and player.y, changing those will not automatically change them inside world. update is one of the ways to do so: it changes the rect representing item inside world. item must be something previously inserted in the world with world:add(item, l,t,w,h). Otherwise, world:update will raise an error. x,y,w,h the new dimensions of item. x and y are mandatory. w and h will default to the values the world already had for item. This method always changes the rect associated to item, ignoring all collisions (use world:move for that). It returns nothing. You may use world:update if you want to ""teleport"" your items around. A lot of time, however, you want to move them taking collisions into account. In order to do that, you have world:move. Moving an item in the world, with collision resolution local actualX, actualY, cols, len = world:move(item, goalX, goalY, <filter>) This is probably the most useful method of bump. It moves the item inside the world towards a desired position, but taking collisions into account. item must be something previously inserted in the world with world:add(item, l,t,w,h). Otherwise, world:move will raise an error. goalX, goalY are the desired x and y coordinates. The item will end up in those coordinates if it doesn't collide with anything. If, however, it collides with 1 or more other items, it can end up in a different set of coordinates. filter is an optional function. If provided, it must have this signature: local type = filter(item, other). By default, filter always returns ""slide"". item is the item being moved (the same one passed to world:move on the first param) other is an item (different from item) which can collide with item. type is a value which defines how item collides with other. If type is false or nil, item will ignore other completely (there will be no collision) If type is ""touch"", ""cross"", ""slide"" or ""bounce"", item will respond to the collisions in different ways (explained below) Any other value (unless handled in an advanced way) will provoke an error actualX, actualY are the coordinates where the object ended up after colliding with other objects in the world while trying to get to goalX, goalY. They can be equal to goalX, goalY if, for example, no collisions happened. len is the amount of collisions produced. It is equivalent to #cols cols is an array of all the collisions that were detected. Each collision is a table. The most important item in that table is cols[i].other, which points to the item that collided with item. A full description of what's inside of each collision can be found on the ""Advanced API"" section. The usual way you would use move is: calculate a ""desirable"" goalX, goalY point for an item (maybe using its velocity), pass it to move, and then use actualX, actualY as the real ""updates"" - . For example, here's how a player would move: function movePlayer(player, dt)   local goalX, goalY = player.x + player.vx * dt, player.y + player.vy * dt   local actualX, actualY, cols, len = world:move(player, goalX, goalY)   player.x, player.y = actualX, actualY   -- deal with the collisions   for i=1,len do     print('collided with ' .. tostring(cols[i].other))   end end Notice that if filter returns nil or false, it is guaranteed that other will not produce a collision. But the opposite is not true: it is possible that filter returns ""slide"", and yet no collision is produced. This is because filter is applied to all the neighbors of item, that is, all the items that ""touch"" the same cells as item. Some of them might be on the same cells, but still not collide with item.. Collision Resolution For each of the collisions returned by world:move, the most interesting attribute is cols[i].other. Often it's enough with it - for example if item is one of those bullets that disappear when impacting the player you must make the bullet disappear (and decrease the player's health). world:move() returns a list (instead of a single collision element) because in some cases you might want to ""skip"" some collisions, or react to several of them in a single frame. For example, imagine a player which collides on the same frame with a coin first, an enemy fireball, and the floor. since cols[1].other will be a coin, you will want to make the coin disappear (maybe with a sound) and increase the player's score. cols[2].other will be a fireball, so you will want to decrease the player's health and make the fireball disappear. cols[3].other will be a ground tile, so you will need to stop the player from ""falling down"", and maybe align it with the ground. The first two can be handled just by using col.other, but ""aligning the player with the ground"" requires collision resolution. bump.lua comes with 4 built-in ways to handle collisions: touch, cross, slide & bounce. You can select which one is used on each collision by returning their name in the filter param of world:move or world:check. You can also choose to ignore a collision by returning nil or false. This is the type of collision for things like arrows or bullets; things that ""gets stuck"" on their targets. Collisions of this type have their type attribute set to ""touch"" and don't have any additional information apart from the the default one, shared by all collisions (see below). This type of collision is for cases where you want to detect a collision but you don't want any response. It is useful for things like: detecting that the player has entered a new area, or consumables (i.e. coins) which usually don't affect the player's trajectory, but it's still useful to know then they are collided with. Collisions of this type have their type attribute set to ""cross"" and don't have any additional information apart from the the default one, shared by all collisions (see below). This is the default collision type used in bump. It's what you want to use for solid objects which ""slide over other objects"", like Super Mario does over a platform or the ground. Collisions of this type have their type attribute set to ""slide"". They also have a special attribute called col.slide, which is a 2d vector with two components: col.slide.x & col.slide.y. It represents the x and y coordinates to which the item ""attempted to slide to"". They are different from actualX & actualY since other collisions later on can modify them. A good example of this behavior is Arkanoid's ball; you can use this type of collision for things that ""move away"" after touching others. Collisions of this type have their type attribute set to ""bounce"". They also have a special attributes called col.bounce. It is a 2d vector which represents the x and y coordinates to which the item ""attempted to bounce"". The Grenades and the Debris in the demo use ""bounce"" to resolve their collisions. Here's an example of a filter displaying all these behaviors: local playerFilter = function(item, other)   if     other.isCoin   then return 'cross'   elseif other.isWall   then return 'slide'   elseif other.isExit   then return 'touch'   elseif other.isSpring then return 'bounce'   end   -- else return nil end The code above will make a character work more or less like super-mario, collision-wise. It'll go though coins, collide with walls, bounce over springs, etc, ignoring things it should not collide with like clouds in the background. You could then use the collisions returned like so: function movePlayer(player, dt)   local goalX, goalY = player.vx * dt, player.vy * dt   local actualX, actualY, cols, len = world:move(player, goalX, goalY, playerFilter)   player.x, player.y = actualX, actualY   for i=1,len do     local other = cols[i].other     if other.isCoin then       takeCoin(other)     elseif other.isExit then       changeLevel()     elseif other.isSpring then       highJump()     end   end end Checking for collisions without moving local actualX, actualY, cols, len = world:check(item, goalX, goalY, <filter>) It returns the position where item would end up, and the collisions it would encounter, should it attempt to move to goalX, goalY with the specified filter. Notice that check has the same parameters and return values as move. The difference is that the former does not update the position of item in the world - you would have to call world:update in order to do that. In fact, world:move is implemented by calling world:check first, and then world:update immediately after. The equivalent code to the previous example using check would be: function movePlayer(player, dt)   local goalX, goalY = player.vx * dt, player.vy * dt   local actualX, actualY, cols, len = world:check(player, goalX, goalY)   world:update(player, actualX, actualY) -- update the player's rectangle in the world   player.x, player.y = actualX, actualY   ... <deal with the collisions as before> end world:check is useful for things like ""planing in advance"" or ""studying alternatives"", when moving is still not fully decided. Collision info Here's the info contained on every collision item contained in the cols variables mentioned above: cols[i] = {   item  = the item being moved / checked   other = an item colliding with the item being moved   type  = the result of `filter(other)`. It's usually ""touch"", ""cross"", ""slide"" or ""bounce""   overlaps  = boolean. True if item ""was overlapping"" other when the collision started.               False if it didn't but ""tunneled"" through other   ti        = Number between 0 and 1. How far along the movement to the goal did the collision occur>   move      = Vector({x=number,y=number}). The difference between the original coordinates and the actual ones.   normal    = Vector({x=number,y=number}). The collision normal; usually -1,0 or 1 in `x` and `y`   touch     = Vector({x=number,y=number}). The coordinates where item started touching other   itemRect  = The rectangle item occupied when the touch happened({x = N, y = N, w = N, h = N})   otherRect = The rectangle other occupied when the touch happened({x = N, y = N, w = N, h = N}) } Note that collisions of type slide and bounce have some additional fields. They are described on each response's section above. Most of this info is useful only if you are doing semi-advanced stuff with collisions, but they could have some uses. For example, cols[i].normal could be used to ""detect if a player is on ground or not"". cols[i].touch could be used to ""spawn a puff of dust when a player touches ground after a fall"", and so on. Intermediate API - Querying the world The following methods are required for basic usage of bump.lua, but are quite handy, and you would be missing out some nice features of this lib if you were not using it. Sometimes it is desirable to know ""which items are in a certain area"". This is called ""querying the world"". Bump allows querying the world via a point, a rectangular zone, and a straight line segment. This makes it useful not only as a collision detection library, but also as a lightweight spatial dictionary. In particular, you can use bump to ""only draw the things that are needed"" on the screen. In order to do this, you would have to add all your ""visible"" objects into bump, even if they don't collide with anything (this is usually ok, just ignore them with your filters when you do the collisions). Querying with a point local items, len = world:queryPoint(x,y, filter) Returns the items that touch a given point. It is useful for things like clicking with the mouse and getting the items affected. x,y are the coordinates of the point that is being checked items is the list items from the ones inserted on the world (like player) that contain the point x,y. If no items touch the point, then items will be an empty table. If not empty, then the order of these items is random. filter is an optional function. It takes one parameter (an item). queryPoint will not return the items that return false or nil on filter(item). By default, all items touched by the point are returned. len is the length of the items list. It is equivalent to #items, but it's slightly faster to use len instead. Querying with a rectangle local items, len = world:queryRect(l,t,w,h, filter) Returns the items that touch a given rectangle. Useful for things like selecting what to display on the screen, as mentioned above, or selecting a group of units with the mouse in a strategy game. l,t,w,h is a rectangle. The items that intersect with it will be returned. filter is an optional function. When provided, it is used to ""filter out"" which items are returned - if filter(item) returns false or nil, that item is ignored. By default, all items are included. items is a list of items, like in world:queryPoint. But instead of for a point x,y for a rectangle l,t,w,h. len is equivalent to #items Querying with a segment local items, len = world:querySegment(x1,y1,x2,y2,filter) Returns the items that touch a segment. It's useful for things like line-of-sight or modelling bullets or lasers. x1,y1,x2,y2 are the start and end coordinates of the segment. filter is an optional function. When provided, it is used to ""filter out"" which items are returned - if filter(item) returns false or nil, that item is ignored. By default, all items are included. items is a list of items, similar to world:queryPoint, intersecting with the given segment. The difference is that in world:querySegment the items are sorted by proximity. The ones closest to x1,y1 appear first, while the ones farther away appear later. len is equivalent to #items. Querying with a segment (with more detailed info) local itemInfo, len = world:querySegmentWithCoords(x1,y1,x2,y2) An extended version of world:querySegment which returns the collision points of the segment with the items, in addition to the items. It is useful if you need to actually show the lasers/bullets or if you need to show some impact effects (i.e. spawning some particles where a bullet hits a wall). If you don't need the actual points of contact between the segment and the bounding rectangles, use world:querySegment, since it's faster. x1,y1,x2,y2,filter same as in world:querySegment itemInfo is a list of tables. Each element in the table has the following elements: item, x1, y1, x2, y2, t0 and t1. info.item is the item being intersected by the segment. info.x1,info.y1 are the coordinates of the first intersection between item and the segment info.x2,info.y2 are the coordinates of the second intersection between item and the segment info.ti1 & info.ti2 are numbers between 0 and 1 which say ""how far from the starting point of the segment did the impact happen"" len is equivalent to #itemInfo. Most people will only need info.item, info.x1 and info.y1. info.x2 and info.y2 are useful if you also need to show ""the exit point of a shoot"", for example. info.ti1 and info.ti2 give an idea about the distance to the origin, so they can be used for things like calculating the intensity of a shooting that becomes weaker with distance. Advanced API The following methods are advanced and/or used internally by the library; most people will not need them. local result = world:hasItem(item) Returns wether the world contains the given item or not. This function does not throw an error if item is not included in world; it just returns false. local count = world:countItems() Returns the number of items inserted in the world. Useful for debugging local items, len = world:getItems() Builds and returns an array containing all the items in the world (as well as its length). This can be useful if you want to draw or update all the items in the world, without doing any queries. Notice that in which the items will be returned is non-deterministic. local x,y,w,h = world:getRect(item) Given an item, obtain the coordinates of its bounding rect. Useful for debugging/testing things. local cell_count = world:countCells() Returns the number of cells being used. Useful for testing/debugging. local cx,cy = world:toCell(x,y) Given a point, return the coordinates of the cell that containg it using the world's cellSize. Useful mostly for debugging bump, or drawing debug info. local x,y = world:toWorld(x,y) The inverse of world:toCell. Given the coordinates of a cell, return the coordinates of its main corner (top-left in LÖVE and Corona SDK, bottom-left in Cocos2d-x) in the game world. local cols, len = world:project(item, x,y,w,h, goalX, goalY, filter) Moves a the given imaginary rectangle towards goalX and goalY, providing a list of collisions as they happen in that straight path. This method is useful mostly when creating new collision responses, although it could be also used as a query method. You could use this method to implement your own collision response algorithm (this was the only way to do it in prevous versions of bump) bump.responses.touch bump.responses.cross bump.responses.slide bump.responses.bounce These are the functions bump uses to resolve collisions by default. You can use these functions' source as a base to build your own response function, if you feel adventurous. world:addResponse(name, response) This is how you register a new type of response in the world. All worlds come with the 4 pre-defined responses already installed, but you can add your own: if you register the response 'foo', if your filter returns 'foo' in a collision your world will handle it with response. This, however, is advanced stuff, and you will have to read the source code of the default responses in order to know how to do that. bump.rect.getNearestCorner bump.rect.getSegmentIntersectionIndices bump.rect.getDiff bump.rect.containsPoint bump.rect.isIntersecting bump.rect.getSquareDistance bump.rect.detectCollision bump.lua comes with some rectangle-related functions in the bump.rect namespace. These are not part of the official API and can change at any moment. However, feel free to use them if you are implementing your own collision responses. Installation Just copy the bump.lua file wherever you want it. Then require it where you need it: local bump = require 'bump' If you copied bump.lua to a file not accesible from the root folder (for example a lib folder), change the code accordingly: local bump = require 'lib.bump' Please make sure that you read the license, too (for your convenience it's now included at the beginning of the bump.lua file. License bump.lua is licensed under the MIT license. Specs Specs for this project can be run using busted. Changelog See CHANGELOG.md for details Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kikito/bump.lua"	"Minimal rectangle-based collision detection which handles tunnelling and basic collision resolution."	"true"
"Game Development"	"HardonCollider"	"http://vrld.github.io/HardonCollider/"	"Detect collisions between arbitrarily positioned and rotated shapes of any type."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"166"	"21"	"26"	"GitHub - vrld/HC: General purpose collision detection library for the use with LÖVE. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 166 Fork 26 vrld/HC Code Issues 2 Pull requests 1 Pulse Graphs General purpose collision detection library for the use with LÖVE. http://hc.readthedocs.org/ 112 commits 2 branches 0 releases 7 contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 2408a37 Jul 6, 2016 vrld committed on GitHub Merge pull request #45 from sixFingers/intersectionsWithSegment … Intersections with segment Permalink Failed to load latest commit information. docs Update MainModule.rst Jul 6, 2016 HC-0.1-1.rockspec Update rockspec Oct 9, 2015 README Update README Oct 9, 2015 class.lua Adhere to new class commons specs. Jul 21, 2013 gjk.lua Hackish fix for 97ae2d8 and parent. Sep 4, 2013 init.lua Simplify interface. HC is now immediate mode. Oct 9, 2015 polygon.lua Rename intersectionsRay. Less redundancy. Jan 24, 2014 shapes.lua small typo fix Mar 17, 2014 spatialhash.lua Fix indenting Jun 1, 2016 vector-light.lua Switch to light vector module Apr 12, 2012 README General Purpose 2D Collision Detection System  Documentation and examples here: http://hc.readthedocs.org/  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vrld/HardonCollider"	"Detect collisions between arbitrarily positioned and rotated shapes of any type."	"true"
"Game Development"	"flux"	"https://github.com/rxi/flux"	"A fast, lightweight tweening library for Lua with easing functions and the ability to group tweens together."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"82"	"7"	"12"	"GitHub - rxi/flux: A fast, lightweight tweening library for Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 82 Fork 12 rxi/flux Code Issues 1 Pull requests 2 Pulse Graphs A fast, lightweight tweening library for Lua 31 commits 1 branch 0 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. LICENSE Updated copyright year Jul 9, 2016 README.md Added 'Stopping a tween' section to README.md May 18, 2014 flux.lua README.md flux A fast, lightweight tweening library for Lua. Installation The flux.lua file should be dropped into an existing project and required by it. flux = require ""flux"" The flux.update() function should be called at the start of each frame. As its only argument It should be given the time in seconds that has passed since the last call. flux.update(deltatime) Usage Any number of numerical values in a table can be tweened simultaneously. Tweens are started by using the flux.to() function. This function requires 3 arguments: obj The object which contains the variables to tween time The amount of time the tween should take to complete vars A table where the keys correspond to the keys in obj which should be tweened, and their values correspond to the destination -- Moves the ball object to the position 200, 300 over 4 seconds flux.to(ball, 4, { x = 200, y = 300 }) If you try to tween a variable which is already being tweened, the original tween stops tweening the variable and the new tween begins from the current value. Additional options Additional options when creating a tween can be set through the use of chained functions provided by the tween object which flux.to() returns. flux.to(t, 4, { x = 10 }):ease(""linear""):delay(1) :ease(type) The easing type which should be used by the tween; type should be a string containing the name of the easing to be used. The library provides the following easing types: linear quadin quadout quadinout cubicin cubicout cubicinout quartin quartout quartinout quintin quintout quintinout expoin expoout expoinout sinein sineout sineinout circin circout circinout backin backout backinout elasticin elasticout elasticinout The default easing type is quadout. Examples of the different easing types can be found here. :delay(time) The amount of time flux should wait before starting the tween; time should be a number of seconds. The default delay time is 0. :onstart(fn) Sets the function fn to be called when the tween starts (once the delay has finished). :onstart() can be called multiple times to add more than one function. :onupdate(fn) Sets the function fn to be called each frame the tween updates a value. onupdate() can be called multiple times to add more than one function. :oncomplete(fn) Sets the function fn to be called once the tween has finished and reached its destination values. oncomplete() can be called multiple times to add more than one function. :after([obj,] time, vars) Creates a new tween and chains it to the end of the existing tween; the chained tween will be called after the original one has finished. Any additional chained function used after :after() will effect the chained tween. There is no limit to how many times :after() can be used in a chain, allowing the creation of long tween sequences. If obj is not specified the obj argument from the original tween is used. -- Tweens t.x to 10 over 2 seconds, then to 20 over 1 second flux.to(t, 2, { x = 10 }):after(t, 1, { x = 20 }) Stopping a tween If you want the ability to stop a tween before it has finished, the tween should be assigned to a variable when it is created. local tween = flux.to(x, 2, { y = 20 }):delay(1) The tween can then be stopped at any point by calling its :stop() method. tween:stop() This will cause the tween to immediatly be removed from its parent group and will leave its tweened variables at their current values. The tween's oncomplete() callback is not called. Groups flux provides the ability to create tween groups; these are objects which can have tweens added to them, and who are in charge of updating and handling their contained tweens. A group is created by calling the flux.group() function. group = flux.group() Once a group is created it acts independently of the flux object, and must be updated each frame using its own update method. group:update(deltatime) To add a tween to a group, the group's to() method should be used. group:to(t, 3, { x = 10, y = 20 }) A good example of where groups are useful is for games where you may have a set of tweens which effect objects in the game world and which you want to pause when the game is paused. A group's tweens can be paused by simply neglecting to call its update() method; when a group is destroyed its tweens are also destroyed. License This library is free software; you can redistribute it and/or modify it under the terms of the MIT license. See LICENSE for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rxi/flux"	"A fast, lightweight tweening library for Lua with easing functions and the ability to group tweens together."	"true"
"Game Development"	"tween.lua"	"https://github.com/kikito/tween.lua"	"Small library for tweening, with several easing functions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"205"	"22"	"39"	"GitHub - kikito/tween.lua: Tweening/Easing/Interpolating functions for lua. Inspired on jQuery's animate method. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 22 Star 205 Fork 39 kikito/tween.lua Code Issues 0 Pull requests 0 Pulse Graphs Tweening/Easing/Interpolating functions for lua. Inspired on jQuery's animate method. 69 commits 5 branches 5 releases 4 contributors Lua 95.8% Shell 4.2% Lua Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags demo families font-demo gh-pages master Nothing to show v2.1.1 v2.1.0 v2.0.0 v1.0.1 1.0 Nothing to show New pull request Latest commit 9cdcd39 Mar 23, 2016 kikito adds new rockspec Permalink Failed to load latest commit information. rockspecs adds new rockspec Mar 23, 2016 spec adds spec for testing the new :set method Mar 23, 2016 .travis.yml updates travis to include coverage & static analysis Mar 23, 2016 .travis_setup.sh fix travis Oct 17, 2015 CHANGELOG.md bumps version to 2.1.1 and updates changelog Mar 23, 2016 LICENSE.txt included EmmanuelOga easing functions, with tests and graphs. Updated… May 3, 2011 README.md updates travis to include coverage & static analysis Mar 23, 2016 tween.lua bumps version to 2.1.1 and updates changelog Mar 23, 2016 README.md tween.lua tween.lua is a small library to perform tweening in Lua. It has a minimal interface, and it comes with several easing functions. Examples local tween = require 'tween'  -- increase the volume of music from 0 to 5 in 10 seconds local music = { volume = 0, path = ""path/to/file.mp3"" } local musicTween = tween.new(10, music, {volume = 5}) ... musicTween:update(dt)  -- make some text fall from the top of the screen, bouncing on y=300, in 4 seconds local label = { x=200, y=0, text = ""hello"" } local labelTween = tween.new(4, label, {y=300}, 'outBounce') ... labelTween:update(dt)  -- fade background from white to black and foregrond from black to red in 2 seconds -- Notice that you can use subtables with tween local properties = {bgcolor = {255,255,255}, fgcolor = {0,0,0}} local fadeTween = tween.new(2, properties, {bgcolor = {0,0,0}, fgcolor={255,0,0}}, 'linear') ... fadeTween:update(dt) Demo There is a demo in the ""demo"" branch of this repo: https://github.com/kikito/tween.lua/tree/demo You will need LÖVE to execute the demo. In the animation above, you can see how the user can move time ""forwards or backwards"" by pressing and releasing the space key. Interface Tween creation local t = tween.new(duration, subject, target, [easing]) Creates a new tween. duration means how much the change will take until it's finished. It must be a positive number. subject must be a table with at least one key-value. Its values will be gradually changed by the tween until they look like target. All the values must be numbers, or tables with numbers. target must be a table with at least the same keys as subject. Other keys will be ignored. easing can be either a function or a function name (see the easing section below). It's default value is 'linear' t is the object that must be used to perform the changes - see the ""Tween methods"" section below. This function only creates and returns the tween. It must be captured in a variable and updated via t:update(dt) in order for the changes to take place. Tween methods local complete = t:update(dt) Gradually changes the contents of subject to that it looks more like target as time passes. t is a tween returned by tween.new dt must be positive number. It will be added to the internal time counter of the tween. Then subject's values will be updated so that they approach target's using the selected easing function. complete is true if the tween has reached its limit (its internal clock is >= duration). It is false otherwise. When the tween is complete, the values in subject will be equal to target's. The way they change over time will depend on the chosen easing function. If dt is positive, the easing will be applied until the internal clock equals t.duration, at which point the easing will stop. If it is negative, the easing will play ""backwards"", until it reaches the initial value. This method is roughtly equivalent to t:set(self.clock + dt). local complete = t:set(clock) Moves a tween's internal clock to a particular moment. t is a tween returned by tween.new clock is a positive number or 0. It's the new value of the tween's internal clock. complete works like in t:update; it's true if the tween has reached its end, and false otherwise. If clock is greater than t.duration, then the values in t.subject will be equal to t.target, and t.clock will be equal to t.duration. t:reset() Resets the internal clock of the tween back to 0, resetting subject. t is a tween returned by tween.new This method is equivalent to t:set(0). Easing functions Easing functions are functions that express how slow/fast the interpolation happens in tween. tween.lua comes with 45 default easing functions already built-in (adapted from Emmanuel Oga's easing library). The easing functions can be found in the table tween.easing. They can be divided into several families: linear is the default interpolation. It's the simplest easing function. quad, cubic, quart, quint, expo, sine and circle are all ""smooth"" curves that will make transitions look natural. The back family starts by moving the interpolation slightly ""backwards"" before moving it forward. The bounce family simulates the motion of an object bouncing. The elastic family simulates inertia in the easing, like an elastic gum. Each family (except linear) has 4 variants: in starts slow, and accelerates at the end out starts fast, and decelerates at the end inOut starts and ends slow, but it's fast in the middle outIn starts and ends fast, but it's slow in the middle family in out inOut outIn Linear linear linear linear linear Quad inQuad outQuad inOutQuad outInQuad Cubic inCubic outCubic inOutCubic outInCubic Quart inQuart outQuart inOutQuart outInQuart Quint inQuint outQuint inOutQuint outInQuint Expo inExpo outExpo inOutExpo outInExpo Sine inSine outSine inOutSine outInSine Circ inCirc outCirc inOutCirc outInCirc Back inBack outBack inOutBack outInBack Bounce inBounce outBounce inOutBounce outInBounce Elastic inElastic outElastic inOutElastic outInElastic When you specify an easing function, you can either give the function name as a string. The following two are equivalent: local t1 = tween.new(10, subject, {x=10}, tween.easing.linear) local t2 = tween.new(10, subject, {x=10}, 'linear') But since 'linear' is the default, you can also do this: local t3 = tween.new(10, subject, {x=10}) Custom easing functions You are not limited to tween's easing functions; if you pass a function parameter in the easing, it will be used. The passed function will need to take 4 parameters: t (time): starts in 0 and usually moves towards duration b (begin): initial value of the of the property being eased. c (change): ending value of the property - starting value of the property d (duration): total duration of the tween And must return the new value after the interpolation occurs. Here's an example using LÖVE's Bezier Curve (you will need LÖVE for this example, but tween.lua does not need LÖVE in general). local cubicbezier = function (x1, y1, x2, y2)   local curve = love.math.newBezierCurve(0, 0, x1, y1, x2, y2, 1, 1)   return function (t, b, c, d) return c * curve:evaluate(t/d) + b end end  local label = { x=200, y=0, text = ""hello"" } local labelTween = tween.new(4, label, {y=300}, cubicbezier(.35, .97, .58, .61)) Gotchas / Warnings tween does not have any defined time units (seconds, milliseconds, etc). You define the units it uses by passing it a dt on tween.update. If dt is in seconds, then tween will work in seconds. If dt is in milliseconds, then tween will work in milliseconds. tween can work on deeply-nested subtables (the ""leaf"" values have to be numbers in both the subject and the target) Installation Just copy the tween.lua file somewhere in your projects (maybe inside a /lib/ folder) and require it accordingly. Remember to store the value returned by require somewhere! (I suggest a local variable named tween) local tween = require 'tween' You can of course specify your own easing function. Just make sure you respect the parameter format. Specs This project uses busted for its specs. In order to run them, install busted, and then execute it on the top folder: busted  Credits The easing functions have been copied from EmmanuelOga's project in https://github.com/emmanueloga/easing See the LICENSE.txt file for details. Changelog See CHANGELOG.md for a full list of changes. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kikito/tween.lua"	"Small library for tweening, with several easing functions."	"true"
"Game Development"	"termtris"	"https://github.com/tylerneylon/termtris"	"A tetris clone, written in literate style with ""an emphasis on learn-from-ability""."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"393"	"15"	"33"	"GitHub - tylerneylon/termtris: A text-based game inspired by tetris. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 393 Fork 33 tylerneylon/termtris Code Issues 1 Pull requests 0 Pulse Graphs A text-based game inspired by tetris. 108 commits 1 branch 0 releases 1 contributor Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 282229a Oct 10, 2014 tylerneylon Fix #2: Make this public domain. Permalink Failed to load latest commit information. img Remove an ugly red line from screen_dims.png. Oct 7, 2014 nonliterate Edits for clarity and style. Oct 7, 2014 LICENSE Fix #2: Make this public domain. Oct 10, 2014 readme.md Add readme.md as a symlink to termtris.lua. Sep 30, 2014 termtris.lua Fix #1: no need to install lcurses separately. Oct 10, 2014 readme.md --[[ termtris: A Game like Tetris in Ten Functions This is a literate implementation of a tetris-like game called termtris. You may be reading this as an html-ified version - but the original, termtris.lua, is simultaneously a Lua file and a markdown file. In the original file, all the text between the --[​[ and --]​] comment delimiters are markdown while everything else is code. -- This is an example of a code block. Taken together, all the code -- blocks in this document compose the complete termtris game.  This code has been written with an emphasis on readability and learn-from-ability. I hope these comments are useful to anyone interested in how a game like tetris can be made. I've put some effort into making this document friendly to coders who are new to Lua. On github.com, the readme.md is a symbolic link to termtris.lua to enable easy reading from the repo's home page. A nonliterate version of the code is in the file plain_termtris.lua. I'll tell you how you can download and play termtris, and then we'll dive into the code. Playing the game You can play termtris on Mac OS X or linux/unix using a Lua interpreter. You can download Lua here and the luarocks package manager here. If you already have a higher-level installer like brew or apt-get, you might be able to use that to get lua and luarocks. From there: sudo luarocks install luaposix git clone https://github.com/tylerneylon/termtris.git lua termtris/termtris.lua Here are the game controls: key action left, right arrows move the piece left or right up arrow rotate the piece down arrow drop and lock the piece in place p pause or unpause q quit Reading Lua Even if you're new to Lua, I think you'll find it easy to understand the code. I'll mention a few things that may not be obvious: Block comments are between --[​[ and --]​]. Line-tail comments start with --. An assignment like a, b, c = f() calls f and assigns all of f's return values to a, b, and c in order — not just to c. The token ~= is the not-equal-to operator. The only compound data structure is called a table. It's an associative array that can map any non-nil Lua value to any other. Things inside curly braces {} are table literals. The literal a = {x, y} has values a[1] == x and a[2] == y. Table literals can be nested: if a = {{x}, {y}}, then a[2][1] == y. If pi == 3.141, then the literal b = {w = 1, [pi] = 2} results in b.w == b['w'] == 1 and b[pi] == 2; that is, identifiers to the left of = are string keys and keys inside brackets [] are treated as general expressions. Using an undefined table key is not an error — it just returns nil, which is falsy. For example, if a = {key1 = 'hi', key2 = 'there'}, then a.key3 is a valid expression with value nil. We can iterate over the keys and values of table t with the pattern for k, v in pairs(t) do my_fn(k, v) end. If t is treated as an array — if it has sequential integer keys starting at 1 — then ipairs can be used instead of pairs to ensure the keys are given in order: for i, v in ipairs(t) do my_fn(i, v) end. Armed with that lightning flash of a Lua introduction, I believe you can understand all of the code. For a tad more depth, some crazy guy claims you can learn the language in 15 minutes. The Code This code has been written to maximize readability. This is hard to measure. We can get a quantifiable hint that the code is not too daunting by consider its line count and function count. The code we'll examine has a total of 10 functions, and a little over 200 non-blank, non-comment lines of code: $ # (This is a bash line, not part of the Lua code!) $ egrep -v '^\s*(--|$)' nonliterate/plain_termtris.lua | wc -l 231  This is small for a game. We could have used even fewer functions or fewer lines, but beyond a certain point the compressed code becomes more cryptic than simple. The trick is to find a balance between brevity and clarity. Overview Here's the complete call graph for termtris: The main function initializes our data and then enters a game loop in which we consistently check for input, drop the moving piece if the time is right, and update what is drawn on the screen. We'll understand the full code by looking at the libraries used for drawing and timing, then going through the code more-or-less in the order that it's executed. Libraries curses: Tetris is a visually-oriented game, so we need a way to draw. A simple and somewhat-portable way to do this is to draw colored space characters in the terminal. We can do this using a time-tested library called curses. posix: We also need accurate timing information. Lua comes with functions like os.clock() and os.time(), but neither of these are appropriate for a game clock. The os.clock() function returns cpu time, rather than wall-clock time; the difference is that cpu time only passes when our process is actually running on the cpu, while wall-clock marches on no matter what process is running. Users think in wall-clock time, so that's what we want. The os.time() function gives us the wall-clock time, but only in seconds. We'd like pieces to move faster than once per second! To achieve this, we import the posix library, which gives us access to more advanced posix functions, including higher-resolution timestamps. Both of these libraries are installed together by running the luarocks install luaposix command mentioned in the installation section above. Below are our module imports. This is the first ""real"" code block, unlike the non-running example code sections above. From here till the end, all code blocks are part of the official program. --]] local curses = require 'curses' local posix  = require 'posix'  --[[ Function 1: The Main Loop Let's take a look at our game loop, which lives in a function called main. This function will initialize the game state by calling init, then enter a seemingly-infinite while true loop that executes the game. The loop isn't really infinte because we can call os.exit when the player presses q to quit. A few local variables are going to be used: local var what it does stats Track the player's line count, level and score. fall Track the speed and timing of the falling piece. colors A table to conveniently access text color attributes. next_piece Track which piece is coming up next. All of these are tables so that they can be modified by functions as parameters, and have those changes persist after the function has completed. This makes the code less functional in style, but since most parameters are used as both input and output, it simplifies the code nicely. We'll also use a small number of globals. It's considered good practice to minimize global variable use. The global variables in this file either act as constants or are used so widely that passing them to many functions felt messier to me than leaving them as globals. Our main game loop takes three actions: check for any input, lower the current piece if the time is right, and redraw the screen. We also have a short delay to avoid using 100% of the cpu. Below is the main function. We'll examine each of the called functions as we define them. --]] function main()   local stats, fall, colors, next_piece = init()    while true do  -- Main loop.     handle_input(stats, fall, next_piece)     lower_piece_at_right_time(stats, fall, next_piece)     draw_screen(stats, colors, next_piece)      -- Don't poll for input much faster than the display can change.     local sec, nsec = 0, 5e6  -- 0.005 seconds.     posix.nanosleep(sec, nsec)   end end  --[[ Shape data Next let's set up all possible shape pieces. We'll use a global table called shapes for this. There are seven possibilities: The shapes table will be indexed first by shape number (1-7), and then by a rotation number (1-4). So s = shapes[5][1] represents shape number 5 in its first rotation orientation. This variable s represents the shape so that s[x][y] is either 0 or 1; its value is 1 if the shape exists in the given (x, y) cell. There are 7 shapes and 4 rotated orientations for each, giving 28 possible shape grids. Instead of initializing all of them by hand, we'll set up one orientation of each shape, and include some code in init that expands the shapes variable to include all 28 possibilities. Even though the shape variable - and others defined below - are global to this file, we declare them with the local keyword so that any other Lua code importing this file won't have these variables in scope. In a sense, they become 'locally global.' --]] -- Set up one orientation of each shape.  local shapes = {   { {0, 1, 0},     {1, 1, 1}   },   { {0, 1, 1},     {1, 1, 0}   },   { {1, 1, 0},     {0, 1, 1}   },   { {1, 1, 1, 1}   },   { {1, 1},     {1, 1}   },   { {1, 0, 0},     {1, 1, 1}   },   { {0, 0, 1},     {1, 1, 1}   } }  --[[ Global game state We'll use globals to conceptually track the following items: global var description game_state Whether the game is playing, paused, or over. board Where pieces have already been placed on the game board. board_size, val Effectively, board-related constants to reduce magic numbers in the code. stdscr A curses-library window object for drawing to the screen. moving_piece Which piece is currently falling: it has keys shape, rot_num, x, and y. The name rot_num is used for rotation numbers. Game state We'll use strings values to track if the game is playing, paused, or over. This would be a good place to use an enum, but Lua doesn't have an enum equivalent. --]] local game_state = 'playing'  -- Could also be 'paused' or 'over'.  --[[ What's on the board We'll use an 11x20 board size. Traditional tetris games are usually 10x20, but I'm purposefully putting in some differences in hopes of not getting sued. The game area where pieces may live is represented by values in board[x][y] where 1 ≤ x ≤ board_size.x and 1 ≤ y ≤ board_size.y. The board variable also includes a U-shaped border with board[x][y] == -1 when any of the following are true: x == 0, x == board_size.x + 1, or y == board_size.y + 1. When a shape is locked in place — that is, after it's done falling — we update the affected cells in board by setting them to the shape number. This works since our shape numbers are all > 0, so that 0 itself can represent empty cells. It's very handy to keep the border of -1 values in the board itself since it simplifies testing to see if a potential piece placement might go off the edge of the playing area. We actually start with an empty board table that is filled in by the init function below. The val variable exists so we can write code like board[x][y] == val.border instead of the more cryptic board[x][y] == -1; and similarly for val.empty instead of 0. --]] local board_size = {x = 11, y = 20} local board = {}                      -- board[x][y] = shape_num; 0=empty; -1=border. local val = {border = -1, empty = 0}  -- Shorthand to avoid magic numbers.  --[[ Next are the remaining globals for the curses library's standard screen object and tracking the currently moving piece. --]] local stdscr = nil  -- This will be the standard screen from the curses library. local moving_piece = {}  -- Keys will be: shape, rot_num, x, y.  --[[ Function 2: Initialization A number of things must happen before the player can start playing. The init function takes care of all of these: Seed the random number generator. Expand the shapes table to include all shape rotations. Initialize the curses library and enable colored text rendering. Set up the board variable. Set up the player stats and the next and currently-moving piece. Let's see how each of these happen. Seed the random number generator This is important since otherwise the player will see the same piece sequence every game. --]] function init()   -- Use the current time's microseconds as our random seed.   math.randomseed(posix.gettimeofday().usec)  --[[ Set up the shapes table Before this code, shapes[shape_index][rot_num] exists only when rot_num == 1. So we have to take shapes[shape_index][1] and rotate it into shapes[shape_index][i] for i = 2, 3, 4. A simple mathematical way to perform a 90 degree rotation is to treat the point (x, y) as the value rotated from (y, -x). In our case, these coordinates are table indexes, such as shapes[shape_index][rot_num][x][y], so x and y are only meaningful when they're positive integers. Instead of starting at (y, -x) to rotate to (x, y), we'll start at (y, max_x + 1 - x). Mathematically, this is like a rotation around (0, 0) followed by a translation to keep us in positive (x, y) space. This rotation method is captured in the line new_shape[x][y] = s[y][x_end - x] in the loop below. --]]   -- Set up the shapes table.   for s_index, s in ipairs(shapes) do     shapes[s_index] = {}     for rot_num = 1, 4 do       -- Set up new_shape as s rotated by 90 degrees.       local new_shape = {}       local x_end = #s[1] + 1  -- Chosen so that x_end - x is in [1, x_max].       for x = 1, #s[1] do      -- Coords x & y are indexes for the new shape.         new_shape[x] = {}         for y = 1, #s do           new_shape[x][y] = s[y][x_end - x]         end       end       s = new_shape       shapes[s_index][rot_num] = s     end   end  --[[ Start curses The curses library requires initialization by calling its initscr function, and by setting a number of options appropriate for a terminal-based game. The individual comments in the code describe what each function does. --]]   -- Start up curses.   curses.initscr()    -- Initialize the curses library and the terminal screen.   curses.cbreak()     -- Turn off input line buffering.   curses.echo(false)  -- Don't print out characters as the user types them.   curses.nl(false)    -- Turn off special-case return/newline handling.   curses.curs_set(0)  -- Hide the cursor.  --[[ Set up colors Each piece in termtris has its own color. The curses library requires registering an integer for each foreground/background color pair that we want to use. This is done by calling curses.init_pair(<my_color_index>, <fgcolor>, <bgcolor>); the input colors are based on constants such as curses.COLOR_RED. For clearer code, we'll use a table called colors to refer to the color indexes we register with curses.init_pair. Later we'll define a set_color function so that we can simply call set_color(colors.red) in order to print red characters to the screen, for example. --]]   -- Set up colors.   curses.start_color()   if not curses.has_colors() then     curses.endwin()     print('Bummer! Looks like your terminal doesn\'t support colors :\'(')     os.exit(1)   end   local colors = { white = 1, blue = 2, cyan = 3, green = 4,                    magenta = 5, red = 6, yellow = 7, black = 8 }   for k, v in pairs(colors) do     curses_color = curses['COLOR_' .. k:upper()]     curses.init_pair(v, curses_color, curses_color)   end   colors.text, colors.over = 9, 10   curses.init_pair(colors.text, curses.COLOR_WHITE, curses.COLOR_BLACK)   curses.init_pair(colors.over, curses.COLOR_RED,   curses.COLOR_BLACK)  --[[ Set up the standard screen object All of our character drawing happens through this object. It is also the object we use to make character input non-blocking, and to accept arrow keys. --]]   -- Set up our standard screen.   stdscr = curses.stdscr()   stdscr:nodelay(true)  -- Make getch nonblocking.   stdscr:keypad()       -- Correctly catch arrow key presses.  --[[ Set up the board As mentioned above, the board is mostly 0's with a U-shaped border of -1 values along the left, right, and bottom edges. --]]   -- Set up the board.   local border = {x = board_size.x + 1, y = board_size.y + 1}   for x = 0, border.x do     board[x] = {}     for y = 1, border.y do       board[x][y] = val.empty       if x == 0 or x == border.x or y == border.y then         board[x][y] = val.border  -- This is a border cell.       end     end   end  --[[ Set up player stats and the next and falling pieces We track the position, orientation, and shape number of the currently moving piece in the moving_piece table. The next_piece table needs only track the shape of the next piece. The stats table tracks lines, level, and score; the fall table tracks when and how quickly the moving piece falls. --]]   -- Set up the next and currently moving piece.   moving_piece = {shape = math.random(#shapes), rot_num = 1, x = 4, y = 0}    -- Use a table so functions can edit its value without having to return it.   next_piece = {shape = math.random(#shapes)}    local stats = {level = 1, lines = 0, score = 0}  -- Player stats.    -- fall.interval is the number of seconds between downward piece movements.   local fall = {interval = 0.7}  -- A 'last_at' time is added to this table later.  --[[ Return local values --]]   return stats, fall, colors, next_piece end  --[[ Function 3: Handling Input Our main game loop is set up so that the handle_input function gets called at most once every 0.005 seconds - that is, up to 200 times each second. Most of the time, the player will not have pressed a key between since the last time we called handle_input, in which case our stdscr:getch call returns nil, and handle_input can return immediately. Otherwise, we want to listen for and respond to the arrow keys and the p or q keys. The getch function returns an integer key code which is a standard ascii value for conventional keys, and a value like curses.KEY_LEFT for the arrow keys. First is the code to collect the key value and handle quitting or pausing/unpausing. --]] function handle_input(stats, fall, next_piece)   local key = stdscr:getch()  -- Nonblocking; returns nil if no key was pressed.   if key == nil then return end    if key == tostring('q'):byte(1) then  -- The q key quits.     curses.endwin()     os.exit(0)   end    if key == tostring('p'):byte(1) then  -- The p key pauses or unpauses.     local switch = {playing = 'paused', paused = 'playing'}     if switch[game_state] then game_state = switch[game_state] end   end  --[[ Next we handle the arrow keys. Our first action is to return from handle_input if the game is not in a state that responds to arrow keys — that is, we ignore arrow keys when the game is paused or over. After that, we can handle left, right, or up arrow keys with a simple incremental-change table sent in to the set_moving_piece_if_valid function. This function will only perform valid moves, and leaves the piece alone if the suggested move was invalid. The down arrow action is less obvious, as we want to move the piece down as far as we can until it hits something. A simple loop achieves this by using the return value from set_moving_piece_if_valid to know when the piece has hit the bottom, at which point it's locked in palce. --]]   if game_state ~= 'playing' then return end  -- Arrow keys only work if playing.    -- Handle the left, right, or up arrows.   local new_rot_num = (moving_piece.rot_num % 4) + 1  -- Map 1->2->3->4->1.   local moves = {[curses.KEY_LEFT]  = {x = moving_piece.x - 1},                  [curses.KEY_RIGHT] = {x = moving_piece.x + 1},                  [curses.KEY_UP]    = {rot_num = new_rot_num}}   if moves[key] then set_moving_piece_if_valid(moves[key]) end    -- Handle the down arrow.   if key == curses.KEY_DOWN then     while set_moving_piece_if_valid({y = moving_piece.y + 1}) do end     lock_and_update_moving_piece(stats, fall, next_piece)   end end  --[[ Functions 4 and 5: Working with Pieces The set_moving_piece_if_valid function accepts a table that suggests new values for the moving_piece. If those new values are valid, moving_piece is updated and the function returns true; otherwise it returns false. This function is used for all piece movements: left, right, rotation, dropping, and even when setting up a new piece after the previous piece has hit the bottom. A new piece may be in an invalid position if the board has filled to the top, in which case the game is over. Because the board's border is included in the board variable, the only check we have to make is that board[x][y] == val.empty for every cell occupied by the new piece values. We'll rely on a function called call_fn_for_xy_in_piece that helpfully iterates over all (x, y) values occupied by a given piece. --]] -- Returns true if and only if the move was valid. function set_moving_piece_if_valid(piece)   -- Use values of moving_piece as defaults.   for k, v in pairs(moving_piece) do     if piece[k] == nil then piece[k] = moving_piece[k] end   end   local is_valid = true   call_fn_for_xy_in_piece(piece, function (x, y)     if board[x] and board[x][y] ~= val.empty then is_valid = false end   end)   if is_valid then moving_piece = piece end   return is_valid end  --[[ The function call_fn_for_xy_in_piece makes it easy to draw the piece or check if it's in a valid location. It accepts a callback that is called with each (x, y) value in the given piece. It also accepts an optional param value that is passed straight through to the callback with every call. In Lua, if you omit parameters when making a function call, the left-out values are seen as nil by the function. If you call a function with extra values set to nil, it is functionally the same as if those parameters were not sent in, regardless of how many parameters a function officially accepts. This is how param works as an optional parameter. There are other ways this could have been implemented. We could have instead named this function piece_coords and defined it as a Lua iterator. In that case, we could have used the syntax for x, y in piece_coords(piece) <loop body>. I made the subjective decision to use a callback since I would like non-Lua-experts to find the code readable, and I consider Lua's iterator system to be less readable to Lua newbies. --]] -- This function calls callback(x, y) for each x, y coord -- in the given piece. Example use using draw_point(x, y): -- call_fn_for_xy_in_piece(moving_piece, draw_point) function call_fn_for_xy_in_piece(piece, callback, param)   local s = shapes[piece.shape][piece.rot_num]   for x, row in ipairs(s) do     for y, val in ipairs(row) do       if val == 1 then callback(piece.x + x, piece.y + y, param) end     end   end end  --[[ Function 6: When a Piece Hits the Bottom The next function handles everything that needs to happen when a piece hits bottom. Once we define this function, we'll have completed all the code that might be called - directly or indirectly - from handle_input. There are three things that happen when a piece hits the bottom: The moving piece becomes part of the board. Any full lines are removed and scored, possibly moving us to a new level. The next piece begins falling from the top of the playing area. The code to make the moving piece part of the board is simple: --]] function lock_and_update_moving_piece(stats, fall, next_piece)   call_fn_for_xy_in_piece(moving_piece, function (x, y)     board[x][y] = moving_piece.shape  -- Lock the moving piece in place.   end)  --[[ Next we look for affected rows of board which have no empty cells; we call these full lines. Each one is cleared, dropping anything above it downward by iterating over the line board[x][y] = board[x][y - 1]. We finish by incrementing the line count, the level if appropriate, and the score. --]]   -- Clear any lines possibly filled up by the just-placed piece.   local num_removed = 0   local max_line_y = math.min(moving_piece.y + 4, board_size.y)   for line_y = moving_piece.y + 1, max_line_y do     local is_full_line = true     for x = 1, board_size.x do       if board[x][line_y] == val.empty then is_full_line = false end     end     if is_full_line then       -- Remove the line at line_y.       for y = line_y, 2, -1 do         for x = 1, board_size.x do           board[x][y] = board[x][y - 1]         end       end       -- Record the line and level updates.       stats.lines = stats.lines + 1       if stats.lines % 10 == 0 then  -- Level up when lines is a multiple of 10.         stats.level = stats.level + 1         fall.interval = fall.interval * 0.8  -- The pieces will fall faster.       end       num_removed = num_removed + 1     end   end   if num_removed > 0 then curses.flash() end   stats.score = stats.score + num_removed * num_removed  --[[ Finally, next_piece begins to fall, and a new next_piece value is set up. Even though board[x][y] is only valid for y ≥ 1, we want to set up new pieces with y=0 because call_fn_for_xy_in_piece uses the expression piece.y + y to determine a piece's y values, and the y in that expression ranges from 1 up to the height of the piece. In other words, (moving_piece.x, moving_piece.y) is the coordinate of the cell just to the upper-left of where the moving piece will be drawn. --]]   -- Bring in the waiting next piece and set up a new next piece.   moving_piece = {shape = next_piece.shape, rot_num = 1, x = 4, y = 0}   if not set_moving_piece_if_valid(moving_piece) then     game_state = 'over'   end   next_piece.shape = math.random(#shapes) end  --[[ Function 7: Making Pieces Fall The game is no fun unless the pieces fall at a reliably constant speed that increases with the level. If we called sleep or posix.nanosleep to wait until the next falling moment, the piece wouldn't respond to user key presses quickly enough. That's why the game cycle is much faster than the fall cycle. The fall speed is tracked by these values: fall.interval - The floating-point number of seconds between falling motions. fall.last_at - The timestamp of the last fall motion, also in floating-point seconds. We use posix.gettimeofday() to get microsecond-resolution timestamps. It's also up to the piece-falling function to do nothing if the game is over or paused, and to call lock_and_update_moving_piece if the piece has hit bottom. --]] function lower_piece_at_right_time(stats, fall, next_piece)   -- This function does nothing if the game is paused or over.   if game_state ~= 'playing' then return end    local timeval = posix.gettimeofday()   local timestamp = timeval.sec + timeval.usec * 1e-6   if fall.last_at == nil then fall.last_at = timestamp end  -- Happens at startup.    -- Do nothing until it's been fall.interval seconds since the last fall.   if timestamp - fall.last_at < fall.interval then return end    if not set_moving_piece_if_valid({y = moving_piece.y + 1}) then     lock_and_update_moving_piece(stats, fall, next_piece)   end   fall.last_at = timestamp end  --[[ Functions 8-10: Drawing the Screen The last function called from main is draw_screen, which renders the board, player stats, and next piece to the terminal window. Before defining draw_screen itself, we'll set up two convenience functions to make drawing easier. The first is the one-line set_color function, which wraps the not-as-clearly-named stdscr:attron function. The input to stdscr:attron is an output value from curses.color_pair, which accepts the same integer values we sent in to curses.init_pair back in our init function. The entire purpose of set_color is to clarify the act of setting a color. --]] -- Accepts integer values corresponding to the 'colors' table -- created by init. For example, call 'set_color(colors.black)'. function set_color(c)   stdscr:attron(curses.color_pair(c)) end  --[[ The draw_point function essentially draws a simple sprite on the screen. This sprite is usually a solid-color square. A sqaure is rendered as two adjacent space characters since most terminals draw a single space as a tall rectangle with an aspect ratio near 1:2. This function works with a coordinate system whose origin is offset by a given x_offset column value. In this program, x_offset is always going to be the left edge of the game board as determined in draw_screen. The code is set up to accept x_offset as a parameter because: It depends on board_size, and it's nice to make the rest of the code ""just work"" if board_size is changed. We can avoid a global variable by accepting x_offset as a parameter. The last two parameters to draw_point are optional. If present, the color parameter sets the color, and the point_char parameter sets the character drawn. The only time we don't draw space characters is when rendering the border, where we use the '|' vertical bar character. Since curses only guarantees 7 non-black colors, those 7 have been used for the pieces, and the border is rendered with a different character to visually clarify the edge of the board. If the game is paused and a space character is being drawn, then draw_piece returns early. This way no pieces — including the next piece — are rendered when the game is paused; the border is still drawn. --]] function draw_point(x, y, x_offset, color, point_char)   point_char = point_char or ' '  -- Space is the default point_char.   if color then set_color(color) end   -- Don't draw pieces when the game is paused.   if point_char == ' ' and game_state == 'paused' then return end   stdscr:mvaddstr(y, x_offset + 2 * x + 0, point_char)   stdscr:mvaddstr(y, x_offset + 2 * x + 1, point_char) end  --[[ The draw_screen function begins by erasing the screen and recalculating the x coordinates of the left edge of the game board - which we call the x_margin - and of the stats on the right side of the board - which we call x_labels. These are constantly recalculated because it's cheap to do so and because the player may resize their terminal at any time. It may be worth explaining this line ahead of time: local win_width = 2 * (board_size.x + 2) + 16 The win_width value represents the width, in characters, that we may render to. We want it to be smaller than scr_width. The board_size.x + 2 value is the board width in cells, plus 2 border cells; this value is converted to characters by being doubled. The + 16 is meant to give 16 characters of room in which to render the player stats and next piece. The updated screen dimensions are illustrated here: --]] function draw_screen(stats, colors, next_piece)   stdscr:erase()    -- Update the screen dimensions.   local scr_width = curses.cols()   local win_width = 2 * (board_size.x + 2) + 16   local x_margin = math.floor((scr_width - win_width) / 2)   local x_labels = x_margin + win_width - 10  --[[ Next we draw the board, including all previously-fallen pieces. Because the currently-moving piece is not represented in board, it's not drawn yet. The draw_point function avoids drawing pieces for us if the game is paused. --]]   -- Draw the board's border and non-falling pieces if we're not paused.   local color_of_val = {[val.border] = colors.text, [val.empty] = colors.black}   local char_of_val = {[val.border] = '|'}  -- This is the border character.   if game_state == 'over' then color_of_val[val.border] = colors.over end   for x = 0, board_size.x + 1 do     for y = 1, board_size.y + 1 do       local board_val = board[x][y]       -- Draw ' ' for shape & empty points; '|' for border points.       local pt_char = char_of_val[board_val] or ' '       draw_point(x, y, x_margin, color_of_val[board_val] or board_val, pt_char)     end   end  --[[ We either draw the string 'paused' in the middle of the board or render the moving piece, depending on if the game state is paused or playing. --]]   -- Write 'paused' if the we're paused; draw the moving piece otherwise.   if game_state == 'paused' then     set_color(colors.text)     local x = x_margin + board_size.x - 1  -- Slightly left of center.     stdscr:mvaddstr(math.floor(board_size.y / 2), x, 'paused')   else     set_color(moving_piece.shape)     call_fn_for_xy_in_piece(moving_piece, draw_point, x_margin)   end  --[[ Now we draw the player's lines, score, and level stats, along with a Game Over message if the game is over. --]]   -- Draw the stats: level, lines, and score.   set_color(colors.text)   stdscr:mvaddstr( 9, x_labels, 'Level ' .. stats.level)   stdscr:mvaddstr(11, x_labels, 'Lines ' .. stats.lines)   stdscr:mvaddstr(13, x_labels, 'Score ' .. stats.score)   if game_state == 'over' then     stdscr:mvaddstr(16, x_labels, 'Game Over')   end  --[[ Finally we render the next piece between top and bottom lines to suggest a next piece box. The function ends with a call to stdscr:refresh, which tells the curses library to batch up all our drawing operations and send them to the terminal. --]]   -- Draw the next piece.   stdscr:mvaddstr(2, x_labels, '----------')   stdscr:mvaddstr(7, x_labels, '---Next---')   local piece = {shape = next_piece.shape, rot_num = 1, x = board_size.x + 5, y = 3}   set_color(piece.shape)   call_fn_for_xy_in_piece(piece, draw_point, x_margin)    stdscr:refresh() end  --[[ Until now, we have only defined variables and functions. No code has been executed. It's time to call the main function! --]] main()  --[[ That's the whole game. Learning More If you enjoyed this, you might like further exploration of Lua and my favorite 2D game engine, Löve, which adds modern 2D graphics capabilities to Lua. Here are some diving boards into more game-making goodness: Of Games and Code, a Medium collection for game-makers Another shameless plug for learning Lua in 15 minutes. The Löve game engine home page. awesome-lua, a curated list of Lua packages and resources. Programming in Lua — an in-depth look at Lua 5.0, which is now a teeny bit out of date, but is well-written! Mari0, a combination of the original Super Mario Brothers plus Portal. Written in Lua + Löve. One More Thing I'm working on an original large-scale game called Apanga. If you're interested in independently-developed games, you could send me your email addy to find out more about Apanga. I'm looking for early-stage testers and any help/interest would be greatly appreciated! --]] Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tylerneylon/termtris"	"A tetris clone, written in literate style with ""an emphasis on learn-from-ability""."	"true"
"Game Development"	"PacPac"	"https://github.com/tylerneylon/pacpac"	"A Pac-man clone, made with LÖVE."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"306"	"30"	"36"	"GitHub - tylerneylon/pacpac: A lua-based Pac-Man clone. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 30 Star 306 Fork 36 tylerneylon/pacpac Code Issues 0 Pull requests 0 Pulse Graphs A lua-based Pac-Man clone. 114 commits 2 branches 0 releases Fetching contributors Lua 99.8% Shell 0.2% Lua Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master turn_points Nothing to show Nothing to show New pull request Latest commit 06db730 Jun 18, 2015 tylerneylon Update readme to reflect löve v0.9.2 compatability. Permalink Failed to load latest commit information. pacpac screenshots readme: new pics; add contribr notes & level ideas Mar 26, 2013 .gitignore Add pacpac.love. Apr 5, 2013 make_love_file.sh Add make_love_file.sh. Mar 29, 2013 pacpac.love Updated deprecated functions to 0.9.2 Jun 16, 2015 readme.md Update readme to reflect löve v0.9.2 compatability. Jun 18, 2015 readme.md PacPac This is Pac-Man from a parallel universe. There are 3 mazes to play through. This is thrice as many as the original pac-man :) You need the löve game engine to play. The current code is written for löve v0.9.2. The original code was written in under 24 hours as a challenge. My wife didn't believe I could make a pac-man-like game in a day. Here's a fun first 24-hour evolution of the game in screenshots. How to install and run Download and install löve. (Current code has been tested with löve v0.9.2.) Download and unzip the zipfile of this repo. Double-click the file pacpac.love. Alternatively, in OS X and Ubuntu, type love pacpac.love from the command line - which assumes the love executable is in your path. Level Editing I've set up the game so that you can make your own levels without having to know how to program. Just edit level1.txt or any other levelN.txt file to change that level. The file format is explained within those files, and this format is designed to be human-friendly and flexible. If you're running PacPac using pacpac.love, then you need to run make_love_file.sh before the level changes will show up in the game. This shell script is meant to be run from the command line by cd'ing into your pacpac directory (the one containing make_love_file.sh) and typing the command ./make_love_file.sh. Contributions It would be awesome if other coders contributed more levels. I'd like each level to add something new to the game. For now, level 2 adds a new layout and color, which in most games would not count as ""new"" but since Pac-Man has such a strong 1-layout tradition, I'm counting it as new. My code philosophy for PacPac is to keep the code a little dirty, as in using global variables freely. Seriously. It's not that dirty is good, but rather that getting things done is good. So I'm asking for contributions that fix bugs or improve gameplay, but are not focused on refactoring. Refactoring is fine as a by-product of other changes, though. If you'd like to add a level, please read the next section to understand what kind of level designs would fit in with the game. Thanks! Things That Could be Added Levels Below are a few ideas for later levels. It would be cool to arrange them in the game from easiest to hardest. New ghost AI's in different colors. A gun that can shoot ghosts. A level with keys that can open doors. Doors are basically walls that you can erase with a key. A level with portal-like mechanics. Maybe a warp door that changes connected doors, or a warp gun. (This sounds a little scary to have to debug.) A level where the hero and ghosts switch roles. By default, the ghosts are weak - i.e., flashing white/blue and can be eaten. The ghosts eat dots, and if they eat a superdot, then the hero becomes vulnerable - i.e., the ghosts appear non-flashing temporarily. However, the ghosts no longer reincarnate, and it is the hero's goal to eat all of them. Once we have 10 good and mostly bug-free levels, I'll consider the game to be v1-ready. Other features Summary: Tasty foods for bonus points One or maybe two extra lives for certain score points Replay a previously-played game Analytics Server-based high-score-of-the-day Tasty foods In the original game, you can eat fruit like apples and oranges. It would be cool to add more fun foods like pizza, burgers, fries, and waffles. Maybe cinnamon rolls. Foods that are tasty and would make for fun pixel art. Extra lives In the original game, you also get an extra life once you reach a certain score. This is a nice feature that we could include in PacPac. Game replay Automatically save all the effective commands the user provides so that we can exactly replay that game as a watch-only experience. Maybe this could happen automatically for the highest-scoring game, which would be displayed from the title screen if the user is idle. There are a couple points to be careful about. The game currently uses a random number generator, so we'd have to save the seed used. It also depends on the dt values sent in to update, so we'd have to be careful about how the replay worked with the dt values. That might be tricky. Finally, there is technically analog input available through gamepads, but this can be discretized so that we only need to remember the successful calls to dir_request. Analytics By this, I mean heat maps of death locations on each level, and average time-of-life per level. This could help us figure out which levels are most challenging. From there we could do things like modify too-hard or too-easy sections, and make sure the levels are in the right order. Server-based scores This is self-explanatory. Even better is being able to download and watch a replay of good high scores. Credits This game uses the font 8bitoperator created by GrandChaos9000 (aka Jayvee D. Enaguas) and is distributed under the CC-BY-SA license. Thanks to jonfk for upgrading the code for löve v0.9.2. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tylerneylon/pacpac"	"A Pac-man clone, made with LÖVE."	"true"
"Game Development"	"Mari0"	"https://github.com/Stabyourself/mari0"	"Fusion of Mario and Portal, made with LÖVE. See also its."	"null"	"null"	"null"	"wikipedia entry"	"https://en.wikipedia.org/wiki/Mari0"	"null"	"null"	"133"	"10"	"33"	"GitHub - Stabyourself/mari0: Mario + Portal game in LÖVE Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 133 Fork 33 Stabyourself/mari0 Code Issues 6 Pull requests 0 Pulse Graphs Mario + Portal game in LÖVE http://stabyourself.net/mari0/ 15 commits 1 branch 0 releases Fetching contributors Lua 93.9% GLSL 6.1% Lua GLSL Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 5392efa Apr 26, 2016 Maurice Fix mouse grabbing (changed from setGrab to setGrabbed in 0.9.0) Permalink Failed to load latest commit information. _DO NOT INCLUDE Initial Mar 10, 2012 graphics LOVE 0.10.1 support Apr 26, 2016 mappacks Mari0 1.5 release Mar 16, 2012 netplayinc Initial Mar 10, 2012 shaders LOVE 0.10.1 support Apr 26, 2016 sounds Initial Mar 10, 2012 .gitignore LOVE 0.10.1 support Apr 26, 2016 bighatconfigs.lua Initial Mar 10, 2012 blockdebris.lua LOVE 0.10.1 support Apr 26, 2016 bowser.lua LOVE 0.10.1 support Apr 26, 2016 box.lua Initial Mar 10, 2012 bubble.lua Initial Mar 10, 2012 bulletbill.lua Initial Mar 10, 2012 button.lua Initial Mar 10, 2012 castlefire.lua Initial Mar 10, 2012 cheepcheep.lua Initial Mar 10, 2012 class.lua Initial Mar 10, 2012 coinblockanimation.lua Initial Mar 10, 2012 conf.lua LOVE 0.10.1 support Apr 26, 2016 cubedispenser.lua Initial Mar 10, 2012 door.lua Initial Mar 10, 2012 editor.lua LOVE 0.10.1 support Apr 26, 2016 emancipationgrill.lua Initial Mar 10, 2012 entity.lua Initial Mar 10, 2012 faithplate.lua Initial Mar 10, 2012 fire.lua Initial Mar 10, 2012 fireball.lua Mari0 1.5 release Mar 15, 2012 firework.lua LOVE 0.10.1 support Apr 26, 2016 flower.lua LOVE 0.10.1 support Apr 26, 2016 flyingfish.lua Initial Mar 10, 2012 game.lua Fix space KeyConstant - was changed from "" "" to ""space"" after 0.9.2 Apr 26, 2016 gel.lua Initial Mar 10, 2012 geldispenser.lua Mari0 1.5 release Mar 15, 2012 goomba.lua Initial Mar 10, 2012 groundlight.lua LOVE 0.10.1 support Apr 26, 2016 gui.lua LOVE 0.10.1 support Apr 26, 2016 hammerbro.lua Mari0 1.6 Mar 16, 2012 hatconfigs.lua Initial Mar 10, 2012 intro.lua Mari0 1.5 release Mar 15, 2012 koopa.lua Initial Mar 10, 2012 lakito.lua LOVE 0.10.1 support Apr 26, 2016 laser.lua Initial Mar 10, 2012 laserdetector.lua Initial Mar 10, 2012 levelscreen.lua LOVE 0.10.1 support Apr 26, 2016 lightbridge.lua Initial Mar 10, 2012 main.lua Fix mouse grabbing (changed from setGrab to setGrabbed in 0.9.0) Apr 26, 2016 mario.lua Mari0 1.5 release Mar 15, 2012 menu.lua Fix space KeyConstant - was changed from "" "" to ""space"" after 0.9.2 Apr 26, 2016 miniblock.lua LOVE 0.10.1 support Apr 26, 2016 mushroom.lua LOVE 0.10.1 support Apr 26, 2016 musicloader.lua LOVE 0.10.1 support Apr 26, 2016 musicloader_thread.lua LOVE 0.10.1 support Apr 26, 2016 netplay.lua Initial Mar 10, 2012 notgate.lua LOVE 0.10.1 support Apr 26, 2016 oneup.lua LOVE 0.10.1 support Apr 26, 2016 physics.lua Mari0 1.6 Mar 16, 2012 plant.lua Initial Mar 10, 2012 platform.lua Mari0 1.6 Mar 16, 2012 platformspawner.lua Initial Mar 10, 2012 portalparticle.lua Initial Mar 10, 2012 portalprojectile.lua Initial Mar 10, 2012 portalwall.lua Initial Mar 10, 2012 pushbutton.lua LOVE 0.10.1 support Apr 26, 2016 quad.lua Initial Mar 10, 2012 rainboom.lua LOVE 0.10.1 support Apr 26, 2016 rgblist.lua Initial Mar 10, 2012 screenboundary.lua Initial Mar 10, 2012 scrollingscore.lua LOVE 0.10.1 support Apr 26, 2016 seesaw.lua LOVE 0.10.1 support Apr 26, 2016 seesawplatform.lua Initial Mar 10, 2012 sha1.lua Added the sha1.lua from http://regex.info/blog/lua/sha1 Jul 13, 2012 spring.lua LOVE 0.10.1 support Apr 26, 2016 squid.lua Initial Mar 10, 2012 star.lua LOVE 0.10.1 support Apr 26, 2016 tile.lua Initial Mar 10, 2012 upfire.lua Initial Mar 10, 2012 variables.lua Initial Mar 10, 2012 vine.lua LOVE 0.10.1 support Apr 26, 2016 wallindicator.lua LOVE 0.10.1 support Apr 26, 2016 walltimer.lua LOVE 0.10.1 support Apr 26, 2016 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Stabyourself/mari0"	"Fusion of Mario and Portal, made with LÖVE. See also its."	"true"
"Game Development"	"Journey to the Center of Hawkthorne"	"https://github.com/hawkthorne/hawkthorne-journey"	"2D platformer based on Community's episode, made with LÖVE."	"null"	"null"	"null"	"Digital Estate Planning"	"https://en.wikipedia.org/wiki/Digital_Estate_Planning"	"null"	"null"	"729"	"55"	"364"	"GitHub - hawkthorne/hawkthorne-journey: Digital Estate Planning: The Game Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 55 Star 729 Fork 364 hawkthorne/hawkthorne-journey Code Issues 27 Pull requests 10 Wiki Pulse Graphs Digital Estate Planning: The Game http://projecthawkthorne.com 5,535 commits 2 branches 116 releases 61 contributors Lua 97.4% Python 2.1% Other 0.5% Lua Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master release Nothing to show v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.12.3 v0.12.2 v0.12.1 v0.12.0 v0.11.2 v0.11.1 v0.11.0 v0.10.0 v0.9.0 v0.8.1 v0.8.0 v0.7.1 v0.7.0 v0.6.0 v0.5.2 v0.5.1 v0.5.0 v0.4.0 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.0 v0.1.1 v0.1.0 v0.0.84 v0.0.83 v0.0.82 v0.0.81 v0.0.80 v0.0.79 v0.0.78 v0.0.77 v0.0.76 v0.0.75 v0.0.74 v0.0.73 v0.0.72 v0.0.71 v0.0.70 v0.0.69 v0.0.68 v0.0.67 v0.0.66 v0.0.65 v0.0.64 v0.0.63 v0.0.62 v0.0.61 v0.0.60 v0.0.59 v0.0.58 v0.0.57 v0.0.56 v0.0.55 v0.0.54 v0.0.53 v0.0.52 v0.0.51 v0.0.50 v0.0.49 v0.0.48 v0.0.47 v0.0.46 v0.0.45 v0.0.44 v0.0.43 v0.0.42 v0.0.41 v0.0.40 v0.0.39 v0.0.38 v0.0.37 v0.0.36 v0.0.35 v0.0.34 v0.0.33 v0.0.32 v0.0.31 v0.0.30 v0.0.29 v0.0.28 v0.0.27 v0.0.26 v0.0.25 v0.0.24 v0.0.23 v0.0.22 v0.0.21 v0.0.20 v0.0.19 v0.0.18 v0.0.17 v0.0.16 Nothing to show New pull request Latest commit 5425cf1 Jul 13, 2016 CalebJohn committed on GitHub Merge pull request #2561 from CalebJohn/rename-ninja … Add incredible-ninja to credits (real name) Permalink Failed to load latest commit information. docs #1718 Updated all simple-to-change files. Sep 15, 2013 osx Accept new command line arguments Oct 28, 2013 psds fix throwable positioning Oct 21, 2014 scripts More release fixes Sep 25, 2015 src Add incredible-ninja to credits (real name) Jul 13, 2016 templates love 0.10.0 Jan 4, 2016 .gitignore Upload appcast items. Upload a built version of master Sep 9, 2013 .travis.yml Update travis.yml to trusty beta Jan 10, 2016 CONTRIBUTING.md Add small section about writing unit tests Sep 4, 2013 CONTRIBUTORS Add incredible-ninja to credits (real name) Jul 13, 2016 LICENSING.md Updates licensing document to specify Creative Commons asset license … Aug 11, 2014 Makefile love for win32 @ 0.10.1 Mar 24, 2016 README.md Remove development builds from README Oct 25, 2013 make.ps1 love @ 0.10.1 Mar 24, 2016 requirements.txt Python library updates Sep 29, 2015 stats.json Change tabs to 2 spaces Oct 11, 2014 README.md Journey to the Center of Hawkthorne This 2d platformer is based on Community's Digital Estate Planning episode. It's built using the LÖVE game engine. Please report any issues or bugs you have with the game! Download the game OS X Windows Contribute to the game All discussion and development takes place on /r/hawkthorne. If you have any contributions you'd like to submit, either open a pull request or create a post on the subreddit. The steps below are only needed if you want to write code for the game. Getting started with development on OS X / Linux Getting start is easy. Just clone the repository and run make run. $ git clone git://github.com/hawkthorne/hawkthorne-journey.git $ cd hawkthorne-journey $ make run Getting started with development on Windows First, download and install Github for Windows which will setup git on your computer. You'll also need PowerShell, which comes pre-installed on Windows 7 & 8. Once you've installed and logged in with Github for Windows, go to https://github.com/hawkthorne/hawkthorne-journey and click the Fork button After you've successfully forked the repository go to https://github.com/<your username>/hawkthorne-journey and click the ""Clone in Windows"" button. Once you have the repo, click on it in Github for Windows, select ""tools > open a shell here"". In your new PowerShell window, run > .\make.ps1 run Next steps Congratulations! You're running Journey to the Center of Hawkthorne! Your next steps can be: Fix bugs with the game Add new features and content to the game Community /r/hawkthorne subreddit #hawkthorne@irc.freenode.net on IRC Releasing a new version We release a new version of Journey to the Center of Hawkthorne about every two weeks. To create a release, open a pull request from the master branch to the release branch. You should never commit directly to the release branch. License Unless otherwise noted, this code is licensed under the MIT License. Artwork and audio files are licensed under CC BY-NC 3.0. Artwork includes all .png, .psd, .ogg, and .wav files. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hawkthorne/hawkthorne-journey"	"2D platformer based on Community's episode, made with LÖVE."	"true"
"Logging"	"log-lua"	"https://github.com/moteus/lua-log"	"Asynchronous logging library with pluggable writers for filesystem, network, ZeroMQ, and more."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"46"	"5"	"6"	"GitHub - moteus/lua-log: Asynchronous logging library for Lua 5.1/5.2 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 46 Fork 6 moteus/lua-log Code Issues 0 Pull requests 0 Pulse Graphs Asynchronous logging library for Lua 5.1/5.2 114 commits 6 branches 6 releases Fetching contributors Lua 69.2% CMake 28.0% Shell 2.8% Lua CMake Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags concept lane logformat master reuse_log_file rollfile Nothing to show v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 5b21429 Dec 31, 2015 moteus Merge pull request #7 from srdgame/master … support lua-term in writer.console.color Permalink Failed to load latest commit information. .travis Use stable version of lzmq on Travis. Dec 10, 2014 cmake Add. LuaDist files. Feb 13, 2014 doc Update doc. Apr 16, 2013 examples lua support lua-term in writer.console.color Dec 31, 2015 rockspecs spec test Update test Nov 27, 2014 utils Fix. Compatibility with lzmq-ffi Jul 4, 2013 .gitignore Add .gitignore Aug 23, 2012 .travis.yml CMakeLists.txt LICENCE.txt Update README.md Aug 4, 2014 README.md Update busted test. Aug 8, 2014 dist.info Release 0.1.4 May 7, 2014 lakeconfig.lua Update lakefile Aug 1, 2014 lakefile Add. zmq async server calls Log.close before term thread. Nov 27, 2014 README.md Logging library for Lua 5.1/5.2 Usage Write to roll file and to console. local LOG = require ""log"".new(   -- maximum log level   ""trace"",    -- Writer   require 'log.writer.list'.new(               -- multi writers:     require 'log.writer.console.color'.new(),  -- * console color     require 'log.writer.file.roll'.new(        -- * roll files       './logs',                                --   log dir       'events.log',                            --   current log name       10,                                      --   count files       10*1024*1024                             --   max file size in bytes     )   ),    -- Formatter   require ""log.formatter.concat"".new() )  LOG.error(""some"", ""error"") Write to file from separate thread. local LOG = require ""log"".new(   require ""log.writer.async.zmq"".new(     'inproc://async.logger',     ""return require 'log.writer.file.by_day'.new('./logs', 'events.log', 5000)""   ) )  LOG.error(""some error"") More complex example local host = arg[1] or '127.0.0.1' local port = arg[2] or 514  -- this code run in separate thread. local InitWriter = [[   return require 'log.writer.list'.new(                  -- multi writers:     require 'log.writer.console.color'.new(),            -- * console color     require 'log.writer.net.zmq'.new('%{zmq_cnn_host}'), -- * zmq pub socket     require ""log.writer.format"".new(                     -- * syslog over udp       require ""log.logformat.syslog"".new(""user""),       require 'log.writer.net.udp'.new('%{udp_cnn_host}', %{udp_cnn_port})     )   ) ]]  -- create async writer and run new work thread. -- communicate with work thread using zmq library local writer = require ""log.writer.async.zmq"".new(   'inproc://async.logger',    InitWriter:gsub('%%{(.-)}', {     zmq_cnn_host = 'tcp://' .. host .. ':' .. port;     udp_cnn_host = host;     udp_cnn_port = port;   }) )  -- create new logger local LOG = require""log"".new(writer)  require ""socket"".sleep(0.5) -- net.zmq need time to connect  LOG.fatal(""can not allocate memory"") LOG.error(""file not found"") LOG.warning(""cache server is not started"") LOG.info(""new message is received"") LOG.notice(""message has 2 file"")  print(""Press enter ..."") io.flush() io.read() Dependences core LuaDate writer.async.udp llthreads2 or llthreads writer.net.udp writer.async.zmq llthreads2 or llthreads writer.net.zmq writer.async.lane LuaLanes - This is experemental writer writer.console.color ansicolors or lua-conio or cio (Windows only) writer.file.by_day lfs writer.net.udp LuaSocket writer.net.zmq lzmq or lua-zmq writer.net.smtp LuaSocket lua-sendmail Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/moteus/lua-log"	"Asynchronous logging library with pluggable writers for filesystem, network, ZeroMQ, and more."	"true"
"Web/Networking Platforms"	"OpenResty"	"http://openresty.org/"	"A fast and scalable web application platform created by extending Nginx with Lua. Today's de-facto Lua web platform, used heavily by Cloudflare, Taobao, Tencent, and others."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"OpenResty · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization OpenResty A Fast and Scalable Web Platform by Extending NGINX with Lua San Francisco https://openresty.org info@openresty.org Repositories People 3 Filters Sources Forks Shell 6 1 openresty-packaging OpenResty packaging source and scripts for various Linux distributions and other systems Updated Jul 15, 2016 Perl 45 9 opsboy A rule-based sysadmin tool that helps setting up complex environment for blank machines Updated Jul 15, 2016 Perl 73 34 nginx-devel-utils Utilities for nginx module development Updated Jul 15, 2016 HTML 759 179 openresty.org Code and data for the openresty.org site Updated Jul 15, 2016 Perl 184 15 programming-openresty Programming OpenResty Book Updated Jul 15, 2016 Perl 25 32 lemplate forked from ingydotnet/jemplate OpenResty/Lua template framework implementing Perl's TT2 templating language Updated Jul 15, 2016 C 429 61 headers-more-nginx-module Set, add, and clear arbitrary output headers in NGINX http servers Updated Jul 15, 2016 Perl 1,380 258 nginx-tutorials Nginx Tutorials Updated Jul 15, 2016 Perl 84 19 resty-cli Fancy command-line utilities for OpenResty Updated Jul 15, 2016 C 2,118 357 openresty Turning Nginx into a Full-Fledged Scriptable Web Platform Updated Jul 15, 2016 Lua 152 44 lua-resty-core New FFI-based API for lua-nginx-module Updated Jul 15, 2016 C 3,144 716 lua-nginx-module Embed the Power of Lua into NGINX HTTP servers Updated Jul 15, 2016 C 66 20 luajit2 OpenResty's Fork of LuaJIT 2 Updated Jul 14, 2016 Lua 135 28 lua-resty-limit-traffic Lua library for limiting and controlling traffic in OpenResty/ngx_lua Updated Jul 14, 2016 Perl 138 50 test-nginx Data-driven test scaffold for Nginx C module and OpenResty Lua library development Updated Jul 13, 2016 30 5 docker-openresty Docker tooling for OpenResty Updated Jul 9, 2016 Lua 243 94 lua-resty-mysql Nonblocking Lua MySQL driver library for ngx_lua or OpenResty Updated Jul 7, 2016 C 32 146 lua-cjson forked from mpx/lua-cjson Lua CJSON is a fast JSON encoding/parsing module for Lua Updated Jul 7, 2016 C 394 115 echo-nginx-module An Nginx module for bringing the power of ""echo"", ""sleep"", ""time"" and more to Nginx's config file Updated Jun 30, 2016 C 191 70 lua-upstream-nginx-module Nginx C module to expose Lua API to ngx_lua for Nginx upstreams Updated Jun 23, 2016 Previous 1 2 3 Next 3 People agentzh Yichun Zhang kindy Kindy Lin lordnynex Brandon Github Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/openresty/"	"A fast and scalable web application platform created by extending Nginx with Lua. Today's de-facto Lua web platform, used heavily by Cloudflare, Taobao, Tencent, and others."	"true"
"Web/Networking Platforms"	"turbo"	"http://www.turbolua.org/"	"Event-driven, non-blocking, LuaJIT-based networking suite and framework, inspired by Tornado."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Introduction — Turbo.lua 2.0.0 documentation Turbo.lua latest Get Started With Turbo Asynchronous modules Turbo.lua API Versioning turbo.web – Core web framework turbo.websocket – WebSocket server and client turbo.iosimple – Simple Callback-less asynchronous sockets turbo.iostream – Callback based asynchronous streaming sockets turbo.ioloop – Main I/O Loop turbo.async – Asynchronous clients turbo.escape – Escaping and JSON utilities turbovisor – Application supervisor turbo.httputil – Utilities for the HTTP protocol turbo.httpserver – Callback based HTTP Server turbo.tcpserver – Callback based TCP socket Server turbo.structs – Data structures turbo.hash – Cryptographic Hashes turbo.util Common utilities turbo.sockutil – Socket utilites and helpers turbo.log – Command-line log helper Turbo.lua Docs » Introduction Edit on GitHub Introduction¶ Turbo.lua is a framework built for LuaJIT 2 to simplify the task of building fast and scalable network applications. It uses a event-driven, non-blocking, no thread design to deliver excellent performance and minimal footprint to high-load applications while also providing excellent support for embedded uses. The toolkit can be used for HTTP REST API’s, traditional dynamic web pages through templating, open connections like WebSockets, or just as high level building blocks for native speed network applications. First and foremost the framework is aimed at the HTTP(S) protocol. This means web developers and HTTP API developers are the first class citizens. But the framework contains generic nuts and bolts such as; a I/O loop, IO Stream classes, customizeable TCP (with SSL) server classes giving it value for everyone doing any kind of high performance network application. Hello World¶ The traditional and mandatory ‘Hello World’ local turbo = require(""turbo"")  local HelloWorldHandler = class(""HelloWorldHandler"", turbo.web.RequestHandler)  function HelloWorldHandler:get()     self:write(""Hello World!"") end  turbo.web.Application({     {""/hello"", HelloWorldHandler} }):listen(8888) turbo.ioloop.instance():start()  LuaJIT 2 is REQUIRED, PUC-RIO Lua is unsupported. Git repository is available at https://github.com/kernelsauce/turbo. It’s main features and design principles are: Simple and intuitive API (much like Tornado). Low-level operations is possible if the users wishes that. Implemented in straight Lua and LuaJIT FFI on Linux, so the user can study and modify inner workings without too much effort. The Windows implementation uses some Lua modules to make compability possible. Good documentation Event driven, asynchronous and threadless design Small footprint SSL support (requires OpenSSL or LuaSec module for Windows) Travis Linux CI Appveyor Windows CI Supported Architectures¶ x86, x64, ARM, PPC, MIPSEL Supported Operating Systems¶ Linux distros (x86, x64), OSX (Intel-based) and Windows x64. Possibly others using LuaSocket, but not tested or supported. Installation¶ You can use LuaRocks to install Turbo on Linux. luarocks install turbo If installation fails make sure that you have these required pacakages: apt-get install luajit luarocks git build-essential libssl-dev For Windows use the included install.bat. This will install all dependencies: Visual Studio, git, mingw, gnuwin, openssl using Chocolatey. LuaJIT, the LuaRocks package manager and Turbo will be installed at C:\turbo.lua. It will also install LuaSocket, LuaFileSystem and LuaSec with LuaRocks. The Windows environment will be ready to use upon success. Try: luajit C:\turbo.lua\src\turbo\examples\helloworld.lua If any of the .dll or. so’s are placed at non-default location then use environment variables to point to the correct place: E.g: SET TURBO_LIBTFFI=C:\turbo.lua\src\turbo\libtffi_wrap.dll and SET TURBO_LIBSSL=C:\Program Files\OpenSSL\libeay32.dll Applies for Linux based OS and OSX only: Turbo.lua can also be installed by the included Makefile. Simply download and run make install (requires root priv). It is installed in the default Lua 5.1 and LuaJIT 2.0 module directory. You can specify your own prefix by using make install PREFIX=<prefix>, and you can specify LuaJIT version with a LUAJIT_VERSION=2.0.0 style parameter. To compile without support for OpenSSL (and SSL connections) use the make option SSL=none. To compile with axTLS support instead of OpenSSL use the make option SSL=axTLS. In essence the toolkit can run from anywere, but is must be able to load the libtffi_wrap.so at run time. To verify a installation you can try running the applications in the examples folder. Object oriented Lua¶ Turbo.lua are programmed in a object oriented fashion. There are many ways to do object orientation in Lua, this library uses the Middleclass module. Which is documented at https://github.com/kikito/middleclass/wiki. Middleclass is being used internally in Turbo Web, but is also exposed to the user when inheriting from classes such as the turbo.web.RequestHandler class. Middleclass is a very lightweight, fast and very easy to learn if you are used to Python, Java or C++. Packaging¶ The included Makefile supports packaging the current tree as a versioned tar.gz file. This file will include only the neccessary bits and pieces for Turbo to run. The files will be built as bytecode (luajit -b -g) with debug info. This reduces size drastically. Suitable for embedded devices with limited storage... It also reduces the startup time. Use make package. Only tested on Linux and OSX. this results in a turbo.x.x.x.tar.gz file and a package/ directory being created. Dependencies¶ All of the modules of Turbo.lua are made with the class implementation that Middleclass provides. https://github.com/kikito/middleclass. The HTTP parser by Ryan Dahl is used for HTTP parsing. This is built and installed as part of the package. OpenSSL is required for SSL support. It is possible to run without this feature, and thus not need an SSL library. License¶ Copyright 2011 - 2015 John Abrahamsen Licensed under the Apache License, Version 2.0 (the “License”); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Many of the modules in the software package are derivatives of the Tornado web server. Tornado is also licensed under Apache 2.0 license. For more details on Tornado please see: http://www.tornadoweb.org/ Tutorials¶ Get Started With Turbo Installing Turbo Hello World Request parameters Routes Serving Static Files JSON Output Asynchronous modules Overview Example module API documentation¶ Turbo.lua API Versioning Preliminaries Module Version turbo.web – Core web framework RequestHandler class Entry points Input Output Misc HTTPError class StaticFileHandler class RedirectHandler class Application class Mustache Templating Mustache.TemplateHelper class turbo.websocket – WebSocket server and client WebSocketStream mixin WebSocketHandler class WebSocketClient class Description of the callback functions turbo.iosimple – Simple Callback-less asynchronous sockets IOSimple class turbo.iostream – Callback based asynchronous streaming sockets IOStream class SSLIOStream class turbo.ioloop – Main I/O Loop IOLoop class turbo.async – Asynchronous clients Utilities for coroutines A HTTP(S) client - HTTPClient class HTTPResponse class turbo.escape – Escaping and JSON utilities JSON conversion Escaping String trimming turbovisor – Application supervisor Options Examples turbo.httputil – Utilities for the HTTP protocol HTTPParser class HTTPHeaders class Manipulation Stringifiers Functions turbo.httpserver – Callback based HTTP Server HTTPServer class HTTPRequest class HTTPConnection class turbo.tcpserver – Callback based TCP socket Server TCPServer class turbo.structs – Data structures deque, Double ended queue buffer, Low-level mutable buffer turbo.hash – Cryptographic Hashes SHA1 class turbo.util Common utilities Table tools Low level Misc turbo.sockutil – Socket utilites and helpers turbo.log – Command-line log helper Next © Copyright 2015, John Abrahamsen. Revision 6a5b3c66. Built with Sphinx using a theme provided by Read the Docs. Read the Docs v: latest Versions latest stable Downloads pdf htmlzip epub On Read the Docs Project Home Builds Free document hosting provided by Read the Docs."	"null"	"null"	"Event-driven, non-blocking, LuaJIT-based networking suite and framework, inspired by Tornado."	"true"
"Web/Networking Platforms"	"Kepler Project"	"http://www.keplerproject.org/"	"A collection of web-oriented projects using a common set of standards and components."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"A collection of web-oriented projects using a common set of standards and components."	"false"
"Web/Networking Platforms"	"Pegasus.lua"	"http://github.com/EvandroLG/pegasus.lua"	"Pegasus.lua is a http server to work with web applications written in Lua language."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"142"	"19"	"19"	"GitHub - EvandroLG/pegasus.lua: Pegasus.lua is a http server to work with web applications written in Lua language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 142 Fork 19 EvandroLG/pegasus.lua Code Issues 16 Pull requests 3 Pulse Graphs 🚀 Pegasus.lua is a http server to work with web applications written in Lua language. http://evandrolg.github.io/pegasus.lua/ 326 commits 4 branches 11 releases Fetching contributors Lua 96.7% Makefile 1.6% HTML 1.6% CSS 0.1% Lua Makefile HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags development gh-pages ip master Nothing to show v0.9.2 v0.9.1 v0.9 v0.0.8 v0.0.7 v0.0.6 v0.0.5 v0.0.4 v0.0.3 v0.0.2 v0.0.1 Nothing to show New pull request Latest commit df161b1 Jun 13, 2016 EvandroLG add dockerfile Permalink Failed to load latest commit information. example removed cache component, because it's not working well yet Sep 12, 2015 rockspecs update rockspec Jun 13, 2016 spec add port property in request module Jun 13, 2016 src/pegasus add port property in request module Jun 13, 2016 .gitignore update gitignore Jun 13, 2016 .travis.yml updated travis Sep 13, 2015 Dockerfile add dockerfile Jun 13, 2016 LICENSE MIT Jan 24, 2016 Makefile updated travis Sep 14, 2015 README.md update readme Jun 13, 2016 README.md A http server to work with web applications written in Lua language check the site. Installation To install Pegasus.lua, run: $ luarocks install pegasus How does it work? Follow an example: local pegasus = require 'pegasus'  local server = pegasus:new({   port='9090',   location='example/root' })  server:start(function (request, response)   print ""It's running..."" end) Features Compatible with Linux, Mac and Windows systems Easy API Support Lua >= 5.1 Native support for HTTP Streaming, aka chunked responses. Check how it works. Native plugin to compress responses using the ""gzip"" method API Request Properties path A string with the request path headers A table with all the headers data method The output is the request method as a string ('GET', 'POST', etc) querystring It returns a dictionary with all the GET parameters post It returns a dictionary with all the POST parameters ip It returns the client's ip port It returns the port where Pegasus is running Response Methods addHeader(string:key, string:value) Adds a new header addHeaders(table:headers) It adds news headers statusCode(number:statusCode, string:statusMessage) It adds a Status Code contentType(string:value) Adds a value to Content-Type field write(string:body) It creates the body with the value passed as parameter writeFile(string:file) It creates the body with the content of the file passed as parameter local pegasus = require 'pegasus'  local server = pegasus:new({ port='9090' })  server:start(function (req, rep)   rep:addHeader('Date', 'Mon, 15 Jun 2015 14:24:53 GMT'):write('hello pegasus world!') end) Native Plugin pegasus.compress local Pegasus = require 'pegasus' local Compress = require 'pegasus.compress'  local server = Pegasus:new({   plugins = { Compress:new() } })  server:start() Contributing Install Dependencies $ make install_dependencies Running tests $ make test Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"http://github.com/EvandroLG/pegasus.lua"	"Pegasus.lua is a http server to work with web applications written in Lua language."	"true"
"OpenResty"	"ngx_lua"	"https://www.nginx.com/resources/wiki/modules/lua/"	"The core piece of OpenResty. Embeds Lua in Nginx and exposes, among other things, the cosocket API for non-blocking sockets (compatible with LuaSocket's API)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"85"	"48"	"92"	"GitHub - nginxinc/nginx-wiki: Source for the wiki section of nginx.com Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 48 Star 85 Fork 92 nginxinc/nginx-wiki Code Issues 8 Pull requests 0 Pulse Graphs Source for the wiki section of nginx.com https://www.nginx.com/resources/wiki/ 497 commits 10 branches 0 releases 55 contributors HTML 39.3% CSS 38.6% Python 14.6% JavaScript 3.7% Batchfile 2.9% Makefile 0.7% Shell 0.2% HTML CSS Python JavaScript Batchfile Makefile Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags beanso-patch-1 beanso-patch-2 master sarahnovotny-patch-1 sarahnovotny-patch-2 sarahnovotny-patch-3 sarahnovotny-patch-4 tmauro-nginx-patch-2 tmauro-nginx-patch-12 tmauro-nginx-patch-14 Nothing to show Nothing to show New pull request Latest commit bf77c2b Jul 15, 2016 LinuxJedi committed on GitHub Merge pull request #294 from remingtonc/patch-1 … Updates to Ubuntu Install instructions. Permalink Failed to load latest commit information. .ci Enable nitpicky mode in the right place Jun 26, 2015 source Updates to Ubuntu Install instructions. Jul 14, 2016 .gitignore Add i8n support Jul 13, 2015 .travis.yml The 'I am not a fan of pip' build Jun 17, 2016 LICENSE Initial code push Apr 28, 2015 Makefile Make NGINX the test server Oct 6, 2015 README.rst The 'I am not a fan of pip' build Jun 17, 2016 make.bat Initial code push Apr 28, 2015 requirements.txt The 'I am not a fan of pip' build Jun 17, 2016 serve.sh Make NGINX the test server Oct 6, 2015 README.rst NGINX wiki This is the source repository for the new NGINX wiki. It is written in reStructuredText format as intended to be compiled into HTML using Sphinx Documentation Generator. Compiling To compile a local copy of the documentation you will need Sphinx installed. Most Linux distributions have this in their repositories and can be installed with commands such as: $ sudo apt-get install python-sphinx or $ sudo yum install python-sphinx Alternatively it can be installed with Python's pip package manager: $ sudo pip install -r requirements.txt There are a couple of extra dependencies you will also need to build the Markdown parts of the documentation, these are automatically installed with the pip command above: $ sudo pip install recommonmark commonmark==0.5.5 You can then build the docs with: $ make dirhtml The HTML output is stored in the build/dirhtml directory. You can view this any way you desire, a very easy way to do it is to use NGINX. The build system can execute NGINX using: $ make serve Or if you have NGINX in a non-standard path (for example /opt/nginx/) you can point to the path of the NGINX binary with: $ NGINX_PATH=/opt/nginx/sbin make serve NGINX will be started on port 8080 so you can view the wiki by browsing to http://localhost:8080/ When you are done, CTRL-C will exit NGINX. Contributing We welcome edits and additions to this wiki. To find out more about how to do this please see out Submitting Contributions page. If you spot any problems please file a GitHub Issue. If you have any questions or require any help with this wiki please use the NGINX Mailing List. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nginxinc/nginx-wiki"	"The core piece of OpenResty. Embeds Lua in Nginx and exposes, among other things, the cosocket API for non-blocking sockets (compatible with LuaSocket's API)."	"true"
"OpenResty"	"OpenResty GitHub Organization"	"https://github.com/openresty"	"Home of the repositories for ngx_lua, ngx_openresty, and many related modules."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"OpenResty · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization OpenResty A Fast and Scalable Web Platform by Extending NGINX with Lua San Francisco https://openresty.org info@openresty.org Repositories People 3 Filters Sources Forks Shell 6 1 openresty-packaging OpenResty packaging source and scripts for various Linux distributions and other systems Updated Jul 15, 2016 Perl 45 9 opsboy A rule-based sysadmin tool that helps setting up complex environment for blank machines Updated Jul 15, 2016 Perl 73 34 nginx-devel-utils Utilities for nginx module development Updated Jul 15, 2016 HTML 759 179 openresty.org Code and data for the openresty.org site Updated Jul 15, 2016 Perl 184 15 programming-openresty Programming OpenResty Book Updated Jul 15, 2016 Perl 25 32 lemplate forked from ingydotnet/jemplate OpenResty/Lua template framework implementing Perl's TT2 templating language Updated Jul 15, 2016 C 429 61 headers-more-nginx-module Set, add, and clear arbitrary output headers in NGINX http servers Updated Jul 15, 2016 Perl 1,380 258 nginx-tutorials Nginx Tutorials Updated Jul 15, 2016 Perl 84 19 resty-cli Fancy command-line utilities for OpenResty Updated Jul 15, 2016 C 2,118 357 openresty Turning Nginx into a Full-Fledged Scriptable Web Platform Updated Jul 15, 2016 Lua 152 44 lua-resty-core New FFI-based API for lua-nginx-module Updated Jul 15, 2016 C 3,144 716 lua-nginx-module Embed the Power of Lua into NGINX HTTP servers Updated Jul 15, 2016 C 66 20 luajit2 OpenResty's Fork of LuaJIT 2 Updated Jul 14, 2016 Lua 135 28 lua-resty-limit-traffic Lua library for limiting and controlling traffic in OpenResty/ngx_lua Updated Jul 14, 2016 Perl 138 50 test-nginx Data-driven test scaffold for Nginx C module and OpenResty Lua library development Updated Jul 13, 2016 30 5 docker-openresty Docker tooling for OpenResty Updated Jul 9, 2016 Lua 243 94 lua-resty-mysql Nonblocking Lua MySQL driver library for ngx_lua or OpenResty Updated Jul 7, 2016 C 32 146 lua-cjson forked from mpx/lua-cjson Lua CJSON is a fast JSON encoding/parsing module for Lua Updated Jul 7, 2016 C 394 115 echo-nginx-module An Nginx module for bringing the power of ""echo"", ""sleep"", ""time"" and more to Nginx's config file Updated Jun 30, 2016 C 191 70 lua-upstream-nginx-module Nginx C module to expose Lua API to ngx_lua for Nginx upstreams Updated Jun 23, 2016 Previous 1 2 3 Next 3 People agentzh Yichun Zhang kindy Kindy Lin lordnynex Brandon Github Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/openresty"	"Home of the repositories for ngx_lua, ngx_openresty, and many related modules."	"true"
"OpenResty"	"lua-resty-http"	"https://github.com/pintsized/lua-resty-http"	"Lua HTTP client driver, built on the cosocket API."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"292"	"52"	"120"	"GitHub - pintsized/lua-resty-http: Lua HTTP client cosocket driver for OpenResty / ngx_lua. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 52 Star 292 Fork 120 pintsized/lua-resty-http Code Issues 9 Pull requests 0 Pulse Graphs Lua HTTP client cosocket driver for OpenResty / ngx_lua. 165 commits 1 branch 7 releases Fetching contributors Perl 69.8% Lua 29.6% Makefile 0.6% Perl Lua Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.08 v0.07 v0.06 v0.05 v0.04 v0.03 v0.02 Nothing to show New pull request Latest commit 67f2dcd Jun 8, 2016 pintsized Don't attempt to keepalive a http 1.0 connection with no Connection h… … …eader #61 Permalink Failed to load latest commit information. lib/resty Don't attempt to keepalive a http 1.0 connection with no Connection h… Jun 8, 2016 t Don't attempt to keepalive a http 1.0 connection with no Connection h… Jun 8, 2016 util Added lua-releng tool to automated tests Apr 15, 2014 .gitignore Ignore test harness Oct 10, 2013 LICENSE Initial commit Oct 10, 2013 Makefile Install http module in resty directory. Mar 5, 2015 README.md Merge branch 'master' of git://github.com/ericl/lua-resty-http into e… May 17, 2016 lua-resty-http-0.08-0.rockspec Version bump May 26, 2016 README.md lua-resty-http Lua HTTP client cosocket driver for OpenResty / ngx_lua. Status Production ready. Features HTTP 1.0 and 1.1 SSL Streaming interface to the response body, for predictable memory usage Alternative simple interface for singleshot requests without manual connection step Chunked and non-chunked transfer encodings Keepalive Pipelining Trailers API new connect set_timeout ssl_handshake set_keepalive get_reused_times close request request_uri request_pipeline Response body_reader read_body read_trailes Proxy proxy_request proxy_response Utility parse_uri get_client_body_reader Synopsis lua_package_path ""/path/to/lua-resty-http/lib/?.lua;;"";  server {     location /simpleinterface {     resolver 8.8.8.8;  # use Google's open DNS server for an example      content_by_lua '        -- For simple singleshot requests, use the URI interface.       local http = require ""resty.http""       local httpc = http.new()       local res, err = httpc:request_uri(""http://example.com/helloworld"", {         method = ""POST"",         body = ""a=1&b=2"",         headers = {           [""Content-Type""] = ""application/x-www-form-urlencoded"",         }       })        if not res then         ngx.say(""failed to request: "", err)         return       end        -- In this simple form, there is no manual connection step, so the body is read       -- all in one go, including any trailers, and the connection closed or keptalive       -- for you.        ngx.status = res.status        for k,v in pairs(res.headers) do           --       end        ngx.say(res.body)     ';   }     location /genericinterface {     content_by_lua '        local http = require ""resty.http""       local httpc = http.new()        -- The generic form gives us more control. We must connect manually.       httpc:set_timeout(500)       httpc:connect(""127.0.0.1"", 80)        -- And request using a path, rather than a full URI.       local res, err = httpc:request{           path = ""/helloworld"",           headers = {               [""Host""] = ""example.com"",           },       }        if not res then         ngx.say(""failed to request: "", err)         return       end        -- Now we can use the body_reader iterator, to stream the body according to our desired chunk size.       local reader = res.body_reader        repeat         local chunk, err = reader(8192)         if err then           ngx.log(ngx.ERR, err)           break         end          if chunk then           -- process         end       until not chunk        local ok, err = httpc:set_keepalive()       if not ok then         ngx.say(""failed to set keepalive: "", err)         return       end     ';   } } Connection new syntax: httpc = http.new() Creates the http object. In case of failures, returns nil and a string describing the error. connect syntax: ok, err = httpc:connect(host, port, options_table?) syntax: ok, err = httpc:connect(""unix:/path/to/unix.sock"", options_table?) Attempts to connect to the web server. Before actually resolving the host name and connecting to the remote backend, this method will always look up the connection pool for matched idle connections created by previous calls of this method. An optional Lua table can be specified as the last argument to this method to specify various connect options: pool : Specifies a custom name for the connection pool being used. If omitted, then the connection pool name will be generated from the string template <host>:<port> or <unix-socket-path>. set_timeout syntax: httpc:set_timeout(time) Sets the timeout (in ms) protection for subsequent operations, including the connect method. ssl_handshake syntax: session, err = httpc:ssl_handshake(session, host, verify) Performs an SSL handshake on the TCP connection, only availble in ngx_lua > v0.9.11 See docs for ngx.socket.tcp for details. set_keepalive syntax: ok, err = httpc:set_keepalive(max_idle_timeout, pool_size) Attempts to puts the current connection into the ngx_lua cosocket connection pool. You can specify the max idle timeout (in ms) when the connection is in the pool and the maximal size of the pool every nginx worker process. Only call this method in the place you would have called the close method instead. Calling this method will immediately turn the current http object into the closed state. Any subsequent operations other than connect() on the current objet will return the closed error. Note that calling this instead of close is ""safe"" in that it will conditionally close depending on the type of request. Specifically, a 1.0 request without Connection: Keep-Alive will be closed, as will a 1.1 request with Connection: Close. In case of success, returns 1. In case of errors, returns nil, err. In the case where the conneciton is conditionally closed as described above, returns 2 and the error string connection must be closed. get_reused_times syntax: times, err = httpc:get_reused_times() This method returns the (successfully) reused times for the current connection. In case of error, it returns nil and a string describing the error. If the current connection does not come from the built-in connection pool, then this method always returns 0, that is, the connection has never been reused (yet). If the connection comes from the connection pool, then the return value is always non-zero. So this method can also be used to determine if the current connection comes from the pool. close syntax: ok, err = http:close() Closes the current connection and returns the status. In case of success, returns 1. In case of errors, returns nil with a string describing the error. Requesting request syntax: res, err = httpc:request(params) Returns a res table or nil and an error message. The params table accepts the following fields: version The HTTP version number, currently supporting 1.0 or 1.1. method The HTTP method string. path The path string. headers A table of request headers. body The request body as a string, or an iterator function (see get_client_body_reader). ssl_verify Verify SSL cert matches hostname When the request is successful, res will contain the following fields: status The status code. reason The status reason phrase. headers A table of headers. Multiple headers with the same field name will be presented as a table of values. has_body A boolean flag indicating if there is a body to be read. body_reader An iterator function for reading the body in a streaming fashion. read_body A method to read the entire body into a string. read_trailers A method to merge any trailers underneath the headers, after reading the body. request_uri syntax: res, err = httpc:request_uri(uri, params) The simple interface. Options supplied in the params table are the same as in the generic interface, and will override components found in the uri itself. In this mode, there is no need to connect manually first. The connection is made on your behalf, suiting cases where you simply need to grab a URI without too much hassle. Additionally there is no ability to stream the response body in this mode. If the request is successful, res will contain the following fields: status The status code. headers A table of headers. body The response body as a string. request_pipeline syntax: responses, err = httpc:request_pipeline(params) This method works as per the request method above, but params is instead a table of param tables. Each request is sent in order, and responses is returned as a table of response handles. For example: local responses = httpc:request_pipeline{   {     path = ""/b"",   },   {     path = ""/c"",   },   {     path = ""/d"",   } }  for i,r in ipairs(responses) do   if r.status then     ngx.say(r.status)     ngx.say(r:read_body())   end end Due to the nature of pipelining, no responses are actually read until you attempt to use the response fields (status / headers etc). And since the responses are read off in order, you must read the entire body (and any trailers if you have them), before attempting to read the next response. Note this doesn't preclude the use of the streaming response body reader. Responses can still be streamed, so long as the entire body is streamed before attempting to access the next response. Be sure to test at least one field (such as status) before trying to use the others, in case a socket read error has occurred. Response res.body_reader The body_reader iterator can be used to stream the response body in chunk sizes of your choosing, as follows: local reader = res.body_reader  repeat   local chunk, err = reader(8192)   if err then     ngx.log(ngx.ERR, err)     break   end    if chunk then     -- process   end until not chunk If the reader is called with no arguments, the behaviour depends on the type of connection. If the response is encoded as chunked, then the iterator will return the chunks as they arrive. If not, it will simply return the entire body. Note that the size provided is actually a maximum size. So in the chunked transfer case, you may get chunks smaller than the size you ask, as a remainder of the actual HTTP chunks. res:read_body syntax: body, err = res:read_body() Reads the entire body into a local string. res:read_trailers syntax: res:read_trailers() This merges any trailers underneath the res.headers table itself. Must be called after reading the body. Proxy There are two convenience methods for when one simply wishes to proxy the current request to the connected upstream, and safely send it downstream to the client, as a reverse proxy. A complete example: local http = require ""resty.http"" local httpc = http.new()  httpc:set_timeout(500) local ok, err = httpc:connect(HOST, PORT)  if not ok then   ngx.log(ngx.ERR, err)   return end  httpc:set_timeout(2000) httpc:proxy_response(httpc:proxy_request()) httpc:set_keepalive() proxy_request syntax: local res, err = httpc:proxy_request(request_body_chunk_size?) Performs a request using the current client request arguments, effectively proxying to the connected upstream. The request body will be read in a streaming fashion, according to request_body_chunk_size (see documentation on the client body reader below). proxy_response syntax: httpc:proxy_response(res, chunksize?) Sets the current response based on the given res. Ensures that hop-by-hop headers are not sent downstream, and will read the response according to chunksize (see documentation on the body reader above). Utility parse_uri syntax: local scheme, host, port, path = unpack(httpc:parse_uri(uri)) This is a convenience function allowing one to more easily use the generic interface, when the input data is a URI. get_client_body_reader syntax: reader, err = httpc:get_client_body_reader(chunksize?, sock?) Returns an iterator function which can be used to read the downstream client request body in a streaming fashion. You may also specify an optional default chunksize (default is 65536), or an already established socket in place of the client request. Example: local req_reader = httpc:get_client_body_reader()  repeat   local chunk, err = req_reader(8192)   if err then     ngx.log(ngx.ERR, err)     break   end    if chunk then     -- process   end until not chunk This iterator can also be used as the value for the body field in request params, allowing one to stream the request body into a proxied upstream request. local client_body_reader, err = httpc:get_client_body_reader()  local res, err = httpc:request{    path = ""/helloworld"",    body = client_body_reader, } If sock is specified, Author James Hurst james@pintsized.co.uk Originally started life based on https://github.com/bakins/lua-resty-http-simple. Cosocket docs and implementation borrowed from the other lua-resty-* cosocket modules. Licence This module is licensed under the 2-clause BSD license. Copyright (c) 2013-2016, James Hurst james@pintsized.co.uk All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pintsized/lua-resty-http"	"Lua HTTP client driver, built on the cosocket API."	"true"
"OpenResty"	"Lapis"	"http://leafo.net/lapis/"	"Full-stack framework for Lua and OpenResty. Like the Django or Rails of Lua. Supports Moonscript."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1273"	"93"	"128"	"GitHub - leafo/lapis: A web framework for Lua and OpenResty written in MoonScript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 93 Star 1,273 Fork 128 leafo/lapis Code Issues 84 Pull requests 7 Wiki Pulse Graphs A web framework for Lua and OpenResty written in MoonScript http://leafo.net/lapis/ 1,394 commits 9 branches 28 releases Fetching contributors MoonScript 53.0% Lua 46.3% Other 0.7% MoonScript Lua Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix-travis leafo/models leafo/routes leafo/travis leda master migrations mysql refactor Nothing to show v1.5.0 v1.4.3 v1.4.2 v1.4.1 v1.4.0 v1.3.2 v1.3.1 v1.3.0 v1.2.0 v1.1.1 v1.1.0 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.0.10 v0.0.9 v0.0.8 v0.0.7 v0.0.6 v0.0.5 v0.0.4 v0.0.3 v0.0.2 v0.0.1 Nothing to show New pull request Latest commit 3dd9e06 Jul 12, 2016 nbsky committed with leafo fixed:typo fix in docs/input_validation.md (#451) Permalink Failed to load latest commit information. .travis update travis Dec 28, 2015 bin convert bin/lapis to lua Feb 28, 2013 docs fixed:typo fix in docs/input_validation.md (#451) Jul 11, 2016 lapis open close db when using test server as well Jul 1, 2016 spec rename flow target to _ Jun 3, 2016 spec_mysql add mysql migrations specs Dec 29, 2015 spec_openresty rebuild with latest moonscript Nov 19, 2015 spec_postgres clean out db.NULL from create Mar 10, 2016 .gitignore update gitignore May 21, 2015 .travis.yml older lpeg Jun 7, 2016 Makefile force Apr 8, 2016 README.md add pasta.cf to the list of Lapis Powered sites Mar 22, 2016 example.lua strip tabs Jul 20, 2014 example.moon update outdated examples Jul 20, 2014 lapis-dev-1.rockspec add flow generate template Apr 9, 2016 lapis.moon clean up Sep 8, 2012 lint_config.lua formatting and refactoring leda code Jul 30, 2014 lint_config.moon formatting and refactoring leda code Jul 31, 2014 README.md Lapis A web framework for Lua/MoonScript. Lapis is production ready, use it on your next huge project. http://leafo.net/lapis/ Lapis Powered http://luarocks.org - source http://itch.io http://streak.club - source http://mundodescuento.com/ Ludum Dare game browser - source https://pasta.cf/ - source Running Tests Requires Busted and MoonScript. busted If you want to run the tests that query PostgreSQL, you'll need to have PostgreSQL installed and running. Create a database called lapis_test, ensure the postgres user can be logged in with no password. busted spec_postgres Likewise, for MySQL tests, create a database called lapis_test. Ensure the root user can be logged in with no password. busted spec_mysql License (MIT) Copyright (C) 2016 by Leaf Corcoran Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/leafo/lapis"	"Full-stack framework for Lua and OpenResty. Like the Django or Rails of Lua. Supports Moonscript."	"true"
"OpenResty"	"ledge"	"https://github.com/pintsized/ledge"	"Lua module providing scriptable, RFC-compliant HTTP cache functionality."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"217"	"32"	"35"	"GitHub - pintsized/ledge: A Lua application for OpenResty, providing scriptable HTTP cache functionality for Nginx. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 217 Fork 35 pintsized/ledge Code Issues 12 Pull requests 1 Pulse Graphs A Lua application for OpenResty, providing scriptable HTTP cache functionality for Nginx. 970 commits 14 branches 47 releases Fetching contributors Perl 56.3% Lua 42.1% Makefile 1.6% Perl Lua Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags config_metatable esi_args esi hamishforbes-zlib iss68 master md5dedup pre_cosocket prestreaming purgerevalidate resty-http resty sentinel_without_config_metatable v0.06 Nothing to show v1.25.3 v1.25.2 v1.25.1 v1.25 v1.24 v1.23 v1.22 v1.21 v1.20 v1.19 v1.18 v1.17 v1.16 v1.15 v1.14 v1.13 v1.12 v1.11 v1.10 v1.09 v1.08 v1.07 v1.06 v1.05 v1.04 v1.03 v1.02 v1.01 v1.00 v0.16 v0.15 v0.14 v0.13 v0.12 v0.11 v0.10 v0.09 v0.08 v0.07 v0.06 v0.04 v0.03 v0.02 v0.01 purgerevalidate_RC3 purgerevalidate_RC2 purgerevalidate_RC1 Nothing to show New pull request Latest commit 400f454 Jun 16, 2016 pintsized Version bump Permalink Failed to load latest commit information. lib/ledge Version bump Jun 16, 2016 t Test purge revalidate with broken entities Jun 15, 2016 util Improve grep to catch globals that start with any of the exceptions Jul 22, 2015 .gitignore Ignore redis files Sep 17, 2014 CHANGELOG.md Update CHANGELOG.md Sep 27, 2013 Makefile Moved syntax / global checks above actual tests Nov 11, 2015 README.md Bumped dep versions May 26, 2016 README.md Ledge A Lua application for OpenResty, providing HTTP cache functionality for Nginx, using Redis as a cache / metadata store. This offers Squid / Varnish like functionality and performance, directly within your Nginx server, coupled with the flexibility to script configuration dynamically. Table of Contents Status Features Installation Configuration options origin_mode upstream_connect_timeout upstream_read_timeout upstream_host upstream_port upstream_use_ssl upstream_ssl_server_name upstream_ssl_verify use_resty_upstream resty_upstream buffer_size cache_max_memory advertise_ledge redis_database redis_qless_database redis_connect_timeout redis_read_timeout redis_host redis_use_sentinel redis_sentinel_master_name redis_sentinels keep_cache_for minimum_old_entity_download_rate max_stale stale_if_error cache_key_spec enable_collapsed_forwarding collapsed_forwarding_window esi_enabled esi_content_types esi_surrogate_delegation esi_recursion_limit esi_pre_include_callback gunzip_enabled keyspace_scan_count revalidate_parent_headers Workers run_workers Events bind Event types cache_accessed origin_required before_request origin_fetched before_save response_ready set_revalidation_headers Protecting purge requests Logging Licence Status Under active development, functionality may change without much notice. Please feel free to raise issues / request features at https://github.com/pintsized/ledge/issues. Features Cache items and metadata stored in Redis. Configurable max memory limits for entities. Redis automatic failover with Sentinel. Event hooks to override cache policies at various stages using Lua script. End-to-end revalidation (specific and unspecified). Range requests (single and multipart). Offline modes (bypass, avoid). Stale-if-error (serves stale content on upstream error). Serve stale content for an additional stale period. Stale-while-revalidate (revalidates content in the background after having served as stale). Collapsed forwarding (concurrent similar requests collapsed into a single upstream request). Caching POST responses (serve-able to subsequent GET / HEAD requests). PURGE requests to expire resources by URI. Wildcard PURGE requests (performed in the background). Revalidate-on-purge by sending X-Purge: revalidate in a PURGE request. Works for wildcards too. Delete-on-purge by sending X-Purge: delete in a PURGE request (instead of a soft ""expire""). ESI 1.0 support. See documentation for exceptions. Store gzipped responses and dynamically gunzip when Accept-Encoding: gzip is not present. Installation Download and install: OpenResty >= 1.9.x Redis >= 2.8.x Review the lua-nginx-module documentation on how to run Lua code in Nginx. If you are new to OpenResty, it's important to take the time to do this properly, as the environment is quite specific. Note that LuaJIT must be enabled (which is the default). Clone this repo, and the following dependencies into a path defined by lua_package_path: lua-resty-http >= 0.08 lua-resty-redis-connector >= 0.03 lua-resty-qless >= 0.06 lua-resty-cookie lua-ffi-zlib >= 0.01 Enable the lua_check_client_abort directive to avoid orphaned connections to both the origin and Redis, and ensure if_modified_since is set to Off. Minimal configuration A minimal configuration involves loading the module during init_by_lua, starting workers during init_worker_by_lua, configuring your upstream, and invoking Ledge during content_by_lua. This requires that you have Redis running locally on the default port. nginx {     if_modified_since Off;     lua_check_client_abort On;     resolver 8.8.8.8;      lua_package_path '/path/to/lua-resty-http/?.lua;/path/to/lua-resty-redis-connector/?.lua;/path/to/lua-resty-qless/?.lua;/path/to/lua-resty-cookie/?.lua;/path/to/ledge/?.lua;;';      init_by_lua '         local ledge_m = require ""ledge.ledge""         ledge = ledge_m.new()         ledge:config_set(""upstream_host"", ""HOST.EXAMPLE.COM"")     ';      init_worker_by_lua 'ledge:run_workers()';      server {         location / {             'ledge:run()';         }     } } Configuration options Options can be specified globally during init_by_lua, or for a specific server/location during content_by_lua, before calling ledge:run(). Config set during content_by_lua will only affect that specific location, and runs in the context of the current running request. That is, you can write request-specific conditions which dynamically set configuration for matching requests. origin_mode syntax: ledge:config_set(""origin_mode"", ledge.ORIGIN_MODE_NORMAL | ledge.ORIGIN_MODE_BYPASS | ledge.ORIGIN_MODE_AVOID) default: ledge.ORIGIN_MODE_NORMAL Determines the overall behaviour for connecting to the origin. ORIGIN_MODE_NORMAL will assume the origin is up, and connect as necessary. ORIGIN_MODE_AVOID is similar to Squid's offline_mode, where any retained cache (expired or not) will be served rather than trying the origin, regardless of cache-control headers, but the origin will be tried if there is no cache to serve. ORIGIN_MODE_BYPASS is the same as AVOID, except if there is no cache to serve we send a 503 Service Unavailable status code to the client and never attempt an upstream connection. upstream_connect_timeout syntax: ledge:config_set(""upstream_connect_timeout"", 1000) default: 500 (ms) Maximum time to wait for an upstream connection (in milliseconds). If it is exceeded, we send a 503 status code, unless stale_if_error is configured. upstream_read_timeout syntax: ledge:config_set(""upstream_read_timeout"", 5000) default: 5000 (ms) Maximum time to wait for data on a connected upstream socket (in milliseconds). If it is exceeded, we send a 503 status code, unless stale_if_error is configured. upstream_host syntax: ledge:config_set(""upstream_host"", ""web01.example.com"") default: empty (must be set) Specifies the hostname or IP address of the upstream host. If a hostname is specified, you must configure the Nginx resolver somewhere, for example: resolver 8.8.8.8; upstream_port syntax: ledge:config_set(""upstream_port"", 80) default: 80 Specifies the port of the upstream host. upstream_use_ssl syntax: ledge:config_set(""upstream_use_ssl"", true) default: false Toggles the use of SSL on the upstream connection. Other upstream_ssl_* options will be ignored if this is not set to true. upstream_ssl_server_name syntax: ledge:config_set(""upstream_ssl_server_name"", ""www.example.com"") default: nil Specifies the SSL server name used for Server Name Indication (SNI). See sslhandshake for more information. upstream_ssl_verify syntax: ledge:config_set(""upstream_ssl_verify"", true) default: false Toggles SSL verification. See sslhandshake for more information. use_resty_upstream syntax: ledge:config_set(""use_resty_upstream"", true) default: false Toggles whether to use a preconfigured lua-resty-upstream instance (see below), instead of the above upstream_* options. resty_upstream syntax: ledge:config_set(""resty_upstream"", my_upstream) default: nil Specifies a preconfigured lua-resty-upstream instance to be used for all upstream connections. This provides upstream load balancing and active healthchecks. buffer_size syntax: ledge:config_set(""buffer_size"", 2^17) default: 2^16 (64KB in bytes) Specifies the internal buffer size (in bytes) used for data to be read/written/served. Upstream responses are read in chunks of this maximum size, preventing allocation of large amounts of memory in the event of receiving large files. Data is also stored internally as a list of chunks, and delivered to the Nginx output chain buffers in the same fashion. The only exception is if ESI is configured, and Ledge has determined there are ESI instructions to process, and any of these instructions span a given chunk. In this case, buffers are concatenated until a complete instruction is found, and then ESI operates on this new buffer. cache_max_memory syntax: ledge:config_set(""cache_max_memory"", 4096) default: 2048 (KB) Specifies (in kilobytes) the maximum size a cache item can occupy before we give up attempting to store (and delete the entity). Note that since entities are written and served as a list of buffers, when replacing an entity we create a new entity list and only delete the old one after existing read operations should have completed, marking the old entity for garbage collection. As a result, it is possible for multiple entities for a given cache key to exist, each up to a maximum of cache_max_memory. However this should only every happen quite temporarily, the timing of which is configurable with minimum_old_entity_download_rate. advertise_ledge syntax: ledge:config_set(""advertise_ledge"", false) default true If set to false, disables advertising the software name and version eg (ledge/1.00) from the Via response header. redis_database syntax: ledge:config_set(""redis_database"", 1) default: 0 Specifies the Redis database to use for cache data / metadata. redis_qless_database syntax: ledge:config_set(""redis_qless_database"", 2) default: 1 Specifies the Redis database to use for lua-resty-qless jobs. These are background tasks such as garbage collection and revalidation, which are managed by Qless. It can be useful to keep these in a separate database, purely for namespace sanity. redis_connect_timeout syntax: ledge:config_set(""redis_connect_timeout"", 1000) default: 500 (ms) Maximum time to wait for a Redis connection (in milliseconds). If it is exceeded, we send a 503 status code, unless. redis_read_timeout syntax: ledge:config_set(""redis_read_timeout"", 5000) default: 5000 (ms) Maximum time to wait for data on a connected Redis socket (in milliseconds). If it is exceeded, we send a 503 status code. redis_host syntax: ledge:config_set(""redis_host"", { host = ""127.0.0.1"", port = 6380 }) default: { host = ""127.0.0.1"", port = 6379, password = nil, socket = nil } Specifies the Redis host to connect to. If socket is specified then host and port are ignored. See the lua-resty-redis documentation for more details. redis_use_sentinel syntax: ledge:config_set(""redis_use_sentinel"", true) default: false Toggles the use of Redis Sentinel for Redis host discovery. If set to true, then redis_sentinels will override redis_host. redis_sentinel_master_name syntax: ledge:config_set(""redis_sentinel_master_name"", ""master"") default: mymaster Specifies the Redis Sentinel master name. redis_sentinels syntax: ledge:set_config(""redis_sentinels"", { { host = ""127.0.0.1"", port = 6381 }, { host = ""127.0.0.1"", port = 6382 }, { host = ""127.0.0.1"", port = 6383 }, } default: nil Specifies a list of Redis Sentinels to be tried in order. Once connected, Sentinel provides us with a master Redis node to connect to. If it cannot identify a master, or if the master node cannot be connected to, we ask Sentinel for a list of slaves to try. This normally happens when the master has gone down, but Sentinel has not yet promoted a slave. During this window, we optimistically try to connect to a slave for read-only operations, since cache-hits may still be served. keep_cache_for syntax: ledge:config_set(""keep_cache_for"", 86400 * 14) default: 86400 * 30 (1 month in seconds) Specifies how long to retain cache data past its expiry date. This allows us to serve stale cache in the event of upstream failure with stale_if_error or origin_mode settings. Items will be evicted when under memory pressure provided you are using one of the Redis volatile eviction policies, so there should generally be no real need to lower this for space reasons. Items at the extreme end of this (i.e. nearly a month old) are clearly very rarely requested, or more likely, have been removed at the origin. minimum_old_entity_download_rate syntax: ledge:config_set(""minimum_old_entity_download_rate"", 128) default: 56 (kbps) Clients reading slower than this who are also unfortunate enough to have started reading from an entity which has been replaced (due to another client causing a revalidation for example), may have their entity garbage collected before they finish, resulting in an incomplete resource being delivered. Lowering this is fairer on slow clients, but widens the potential window for multiple old entities to stack up, which in turn could threaten Redis storage space and force evictions. This design favours high availability (since there are no read-locks, we can serve cache from Redis slaves in the event of failure) on the assumption that the chances of this causing incomplete resources to be served are quite low. max_stale syntax: ledge:config_set(""max_stale"", 300) default: nil Specifies, in seconds, how far past expiry we can serve cached content. If a value is specified by the Cache-Control: max-stale=xx request header, then this setting is ignored, placing control in the client's hands. This setting is useful for serving expensive content stale whilst revalidating in the background. For example, if some content has a TTL of one hour, you may wish to change this to 45 minutes, and allow stale serving for 15 minutes. Thus the cache item has the same effective TTL, but any requests in the last 15 minutes will be served quickly, and trigger a background revalidation for the latest version. WARNING: Any setting other than nil may violate the HTTP specification (i.e. if the client does not override it with a valid request header value). stale_if_error syntax: ledge:config_set(""stale_if_error"", 86400) default: nil Specifies, in seconds, how far past expiry to serve stale cached content if the origin returns an error. This can be overriden by the request using the stale-if-error Cache-Control extension. cache_key_spec syntax: ledge:config_set(""cache_key_spec"", { ngx.var.host, ngx.var.uri, ngx.var.args }) default: { ngx.var.scheme, ngx.var.host, ngx.var.uri, ngx.var.args } Specifies the cache key format. This allows you to abstract certain items for great hit rates (at the expense of collisions), for example. The default spec is: { ngx.var.scheme, ngx.var.host, ngx.var.uri, ngx.var.args } Which will generate cache keys in Redis such as: ledge:cache_obj:http:example.com:/about ledge:cache_obj:http:example.com:/about:p=2&q=foo  If you're doing SSL termination at Nginx and your origin pages look the same for HTTPS and HTTP traffic, you could provide a cache key spec omitting ngx.var.scheme, to avoid splitting the cache when the content is identical. enable_collapsed_forwarding syntax: ledge:config_get(""enable_collapsed_forwarding"", true) default: false With collapsed forwarding enabled, Ledge will attempt to collapse concurrent origin requests for known (previously) cacheable resources into single upstream requests. This is useful in reducing load at the origin if requests are expensive. The longer the origin request, the more useful this is, since the greater the chance of concurrent requests. Ledge wont collapse requests for resources that it hasn't seen before and weren't cacheable last time. If the resource has become non-cacheable since the last request, the waiting requests will go to the origin themselves (having waited on the first request to find this out). collapsed_forwarding_window syntax: ledge:config_set(""collapsed_forwarding_window"", 30000) default: 60000 (ms) When collapsed forwarding is enabled, if a fatal error occurs during the origin request, the collapsed requests may never receive the response they are waiting for. This setting puts a limit on how long they will wait, and how long before new requests will decide to try the origin for themselves. If this is set shorter than your origin takes to respond, then you may get more upstream requests than desired. Fatal errors (server reboot etc) may result in hanging connections for up to the maximum time set. Normal errors (such as upstream timeouts) work independently of this setting. esi_enabled syntax: ledge:config_set(""esi_enabled"", true) default: false Toggles ESI scanning and processing, though behaviour is also contingent upon esi_content_types and esi_surrogate_delegation settings, as well as Surrogate-Control / Surrogate-Capability headers. ESI instructions are detected on the slow path (i.e. when fetching from the origin), so only instructions which are known to be present are processed on cache HITs. All features documented in the ESI 1.0 Language Specification are supported, with the following exceptions: <esi:inline> not implemented (or advertised as a capability). No support for the onerror or alt attributes for <esi:include>. Instead, we ""continue"" on error by default. <esi:try | attempt | except> not implemented. The ""dictionary (special)"" substructure variable type for HTTP_USER_AGENT is not implemented. esi_content_types syntax: ledge:config_set(""esi_content_types"", { ""text/html"", ""text/javascript"" }) default: { text/html } Specifies content types to perform ESI processing on. All other content types will not be considered for processing. esi_surrogate_delegation syntax: ledge:config_set(""esi_surrogate_delegation"", true) default: false ESI Surrogate Delegation allows for downstream intermediaries to advertise a capability to process ESI instructions nearer to the client. By setting this to true any downstream offering this will disable ESI processing in Ledge, delegating it downstream. When set to a Lua table of IP address strings, delegation will only be allowed to this specific hosts. This may be important if ESI instructions contain sensitive data which must be removed. esi_recursion_limit syntax: ledge:config_set(""esi_recursion_limit"", 5) default: 10 Limits fragment inlusion nesting, to avoid accidental infinite recursion. esi_pre_include_callback syntax: ledge:config_set(""esi_pre_include_callback"", function(req_params) ... end) default: nil A function provided here will be called each time the ESI parser goes to make an outbound HTTP request for a fragment. The request parameters are passed through and can be manipulated here, for example to modify request headers. gunzip_enabled syntax: ledge:config_set(""gunzip_enabled"", false) default: true With this enabled, gzipped responses will be uncompressed on the fly for clients that do not set Accept-Encoding: gzip. Note that if we receive a gzipped response for a resource containing ESI instructions, we gunzip whilst saving and store uncompressed, since we need to read the ESI instructions. Also note that Range requests for gzipped content must be ignored - the full response will be returned. keyspace_scan_count syntax: ledge:config_set(""keyspace_scan_count"", 10000) default: 1000 Tunes the behaviour of keyspace scans, which occur when sending a PURGE request with wildcard syntax. A higher number may be better if latency to Redis is high and the keyspace is large. revalidate_parent_headers syntax: ledge:config_set(""revalidate_parent_headers"", {""x-real-ip"", ""authorization""}) default: {""authorization"", ""cookie""} Defines which headers from the parent request are passed through to a background revalidation. Useful when upstreams require authentication. Workers Ledge uses qless and the lua-resty-qless binding for scheduling background tasks, managed by Redis. Currently, there is only one job type, which is the garbage collection job for replaced entities, and it is imperative that this runs. run_workers syntax: init_worker_by_lua 'ledge:run_workers(options)'; default options: { interval = 10, concurrency = 1 } Starts the Ledge workers within each Nginx worker process. When no jobs are left to be processed, each worker will wait for interval before checking again. You can have many worker ""light threads"" per worker process, by upping the concurrency. They will yield to each other when doing i/o. The default options are quite conservative. You probably want to up the concurrency and lower the interval on busy systems. Events Events are broadcast at various stages, which can be listened for using Lua functions. A response table is passed through to your function, providing the opportunity to manipulate the response as needed. For example, this may be useful if an upstream doesn't set optimal Cache-Control headers, and cannot be easily be modified itself. Note that the response body itself is not available, since this is streamed at the point of serving. Example: ledge:bind(""origin_fetched"", function(res)     -- Add some cache headers.  Ledge will assume they came from the origin.     res.header[""Cache-Control""] = ""max-age="" .. 86400     res.header[""Last-Modified""] = ngx.http_time(ngx.time()) end) Note that the creation of closures in Lua can be kinda expensive, so you may wish to put these functions in a module and pass them through. bind syntax: ledge:bind(event_name, callback) Binds a user defined function to an event. Event types cache_accessed syntax: ledge:bind(""cache_accessed"", function(res) -- end) params: res The cached response table (does not include the body). Fires directly fter the response was successfully loaded from cache. origin_required syntax: ledge:bind(""origin_required"", function() -- end) params: nil Fires when decided we need to request from the origin. before_request syntax: ledge:bind(""before_request"", function(req_params) -- end) params: req_params. The table of request params about to send to the httpc:request method. Fires when about to perform an origin request. origin_fetched syntax: ledge:bind(""origin_fetched"", function(res) -- end) params: res. The response table (does not include the body). Fires when the status/headers have been fetched, but before it is stored. Typically used to override cache headers before we decide what to do with this response. Note unlike before_save below, this fires for all fetched content, not just cacheable content. before_save syntax: ledge:bind(""before_save"", function(res) -- end) params: res. The response table (does not include the body). Fires when we're about to save the response. response_ready syntax: ledge:bind(""response_ready"", function(res) -- end) params: res. The response table (does not include the body). Fires when we're about to serve. Often used to modify downstream headers seperately to the ones used to determine proxy cacheability. Protecting purge requests Ledge will respond to requests using the (fake) HTTP method PURGE. If the resource exists it will be expired and Ledge will exit with 200 OK. If the resource doesn't exists, it will exit with 404 Not Found. This is mostly useful for internal tools which expect to work with Squid, and you probably want to restrict usage in some way. You can acheive this with standard Nginx configuration. limit_except GET POST PUT DELETE {     allow   127.0.0.1;     deny    all; } set_revalidation_headers syntax: ledge:bind(""set_revalidation_headers"", function(headers) -- end) params: headers. Table of request headers. Fires when a background revalidation is triggered. Allows inserting and modifying the headers which are inherited by the background revalidation Logging For cacheable responses, Ledge will add headers indicating the cache status. These can be added to your Nginx log file in the normal way. An example using the default combined format plus the available headers:     log_format ledge '$remote_addr - $remote_user [$time_local] '                     '""$request"" $status $body_bytes_sent '                     '""$http_referer"" ""$http_user_agent"" '                     '""Cache:$sent_http_x_cache""  ""Age:$sent_http_age"" ""Via:$sent_http_via""'                     ;      access_log /var/log/nginx/access_log ledge;  Result:    192.168.59.3 - - [23/May/2016:22:22:18 +0000] ""GET /x/y/z HTTP/1.1"" 200 57840 ""-"" ""curl/7.37.1""""Cache:HIT from 159e8241f519:8080""  ""Age:724""  X-Cache This header follows the convention set by other HTTP cache servers. It indicates simply HIT or MISS and the host name in question, preserving upstream values when more than one cache server is in play. For example: X-Cache: HIT from ledge.tld A cache hit, with no (known) cache layer upstream. `X-Cache: HIT from ledge.tld, HIT from proxy.upstream.tldA cache hit, also hit upstream.X-Cache: MISS from ledge.tld, HIT from proxy.upstream.tldA cache miss, but hit upstream.X-Cache: MISS from ledge.tld, MISS from proxy.upstream.tld` Regenerated at the origin. Author James Hurst james@pintsized.co.uk Licence This module is licensed under the 2-clause BSD license. Copyright (c) 2014, James Hurst james@pintsized.co.uk All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pintsized/ledge"	"Lua module providing scriptable, RFC-compliant HTTP cache functionality."	"true"
"OpenResty"	"Sailor"	"https://github.com/sailorproject/sailor"	"— An MVC web framework compatible with OpenResty, Apache and other webservers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"616"	"57"	"91"	"GitHub - sailorproject/sailor: A Lua MVC Web Framework. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 57 Star 616 Fork 91 sailorproject/sailor Code Issues 32 Pull requests 2 Pulse Graphs A Lua MVC Web Framework. http://sailorproject.org 553 commits 5 branches 6 releases 22 contributors Lua 78.1% JavaScript 12.3% Terra 3.2% Shell 3.1% Nginx 1.5% CSS 1.0% ApacheConf 0.8% Lua JavaScript Terra Shell Nginx CSS ApacheConf Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 53compat bcrypt lighttpd master patch-1 Nothing to show v0.5-alpha v0.4 v0.3 v0.2.1 v0.2 v0.1-venus Nothing to show New pull request Latest commit 5dbcd72 Jul 5, 2016 Etiene committed on GitHub Merge pull request #122 from sailorproject/xavante-cookies … fix(cookie): Use different cookies when using Xavante Permalink Failed to load latest commit information. .travis tests(travis): Replace LuaJIT url Dec 24, 2015 docs (docs edit) change the formula used May 25, 2016 rockspecs Added page:json function, added dksjon dep, added unit test for page:… Feb 24, 2016 src fix(cookie): Use different cookies when using Xavante Jul 5, 2016 test/dev-app fix(cookie): Use different cookies when using Xavante Jul 5, 2016 .gitignore style: have git ignore test database Mar 8, 2016 .travis.yml chore(coverage): Fix file filtering Feb 1, 2016 CHANGELOG.md core(rockspec): Update github repositories Jan 18, 2016 CODE_OF_CONDUCT.md Create CODE_OF_CONDUCT.md Nov 28, 2015 CONTRIBUTING.md core(rockspec): Update github repositories Jan 18, 2016 LICENSE Adding a license. Jan 5, 2014 README.md Update README.md Feb 1, 2016 THANKYOU.md Update THANKYOU.md May 19, 2015 sailor Quote path on cp commands Feb 19, 2016 README.md Sailor A Lua MVC Framework. www.sailorproject.org Features Compatible with Lua 5.1, Lua 5.2 and LuaJIT. (5.3 compatibility so far untested) Luarocks setup Runs over Apache2 (with mod_lua), NginX (openresty), Mongoose, Lighttpd, Xavante and Lwan web servers Using Windows, Mac or Linux systems Compatible with MySQL, PostgreSQL, SQLite and other databases supported by the luasql library MVC structure Parsing of Lua pages Routing Basic Object-relational mapping Validation Transactions App comes already shipped with Bootstrap Include, redirect Sessions, cookies Login module Easy deployment (unix only) -> sailor create ""app name"" /dir/to/app Form generation Lua at client (possible through a Lua=>JS virtual machine deployed with the app) Friendly urls Inspect function for better debugging => similar to a var dump Custom 404 pages Relations Model generation (reading from DB) CRUD generation (reading from model) Theme and layout (now you can have multiple layouts inside a theme. e.g. 1-column and 2-column) Integration with Busted for unit and functional tests for your app Roadmap Integration with mod_lua's DB API and DB module refactor Improvements to the form and validation module More about the motivation to build this project can be found here: http://etiene.net/10/sailor Directory tree info /docs - this one is supposed to have documentation /lua-to-js-vms - different Lua->Javascript virtual machines for use of Lua on the browser with Sailor /rockspecs - Rockspec files for LuaRocks install /src - Lua modules with nice stuff from sailor and other places. /sailor - Sailor modules /sailor/blank-app - blank Sailor web app, can be copy-pasted as base for your own apps /test - apps for testing and demonstration purposes Supported Environments Sailor has been tested under Linux, Mac OS X and Windows and is currently compatible with Apache with mod_lua or mod_pLua, Nginx with ngx_lua, Lwan, Lighttpd with mod_magnet, or any CGI-enabled web server, like Civetweb, Mongoose and Xavante, if CGILua is present. Installation For Linux, see INSTALL_LINUX.md (Ubuntu) or INSTALL_LINUX_ARCH.md (Arch Linux) For Windows, see INSTALL_WIN.md For Mac, see INSTALL_MAC.md Using Sailor A default Sailor app will have the following directory tree structure: /conf - configuration files, open and edit them. /controllers - controllers you will make! /themes - default theme files. /models - models you will make! /pub - publicly accessible files (js libraries, for example) /runtime - temporary files generated during runtime. /tests - unit and functional tests /views - this is where your lua pages in .lp will go Creating Pages Go to /controllers and create your first controller! It should be a lua module. Name it whatever you want, our example is ""site.lua"". We will serve two pages, one accessible via /?r=site which will run site.index() by default and another one acessible via /?r=site/notindex. local site = {} local model = require ""sailor.model"" function site.index(page)   local foo = 'Hello world'   local User = model(""user"")   local u = User:new()   u.username = ""etiene""   u.password = ""a_password""   local valid, err = u:validate() -- validate() will check if your attributes follow the rules!   if not valid then     foo = ""Boohoo :(""   end    -- Warning: this is a tech preview and some methods of model class do not avoid SQL injections yet.   page:render('index',{foo=foo,name=u.username}) -- This will render /views/site/index.lp and pass the variables 'foo' and 'name' end function site.notindex(page)   page:write('<b>Hey you!</b>') end return site Go to /views, create a dir named 'site' to match your controller name and create your first page, our example is index.lp <?=foo?> <p>   Hi, <?=name?> </p> For more information on what you can do with html and Lua Pages, visit http://keplerproject.github.io/cgilua/manual.html#templates For more examples, you can check the test controller (/controllers/test.lua), the test views (/views/test/*) and the User model (/models/user.lua) Documentation & Reference Manual http://sailorproject.org/?r=docs Contributing Contributions are welcome! Just make a pull request :) Please try to follow the code style of the rest of the repository. If you made an extension for Sailor and would like to share, please get in contact so I can add it to the website. Thanks This repository contains the following third-party MIT licensed code: LP Templates - http://keplerproject.github.io/cgilua/manual.html#templates Valua - https://github.com/sailorproject/valua Lua at client - https://github.com/felipedaragon/lua_at_client Moonshine - http://moonshinejs.org/ Lua5.1.js - https://github.com/logiceditor-com/lua5.1.js Lua.vm.js - https://kripken.github.io/lua.vm.js/lua.vm.js.html Starlight - https://github.com/paulcuth/starlight Suggestions, questions & hugs Hugs! Not bugs. For bugs, fill an issue! :) dalcol@etiene.net https://twitter.com/etiene_d Mail List & Support Join our google group for mail list and support If you are having trouble to get Sailor working or if you got it working using different specs, please make contact so we can exchange info and I can improve the manual. Thanks! Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sailorproject/sailor"	"— An MVC web framework compatible with OpenResty, Apache and other webservers."	"true"
"OpenResty"	"Kong"	"https://github.com/mashape/kong"	"Microservice & API Management Layer"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5934"	"333"	"507"	"GitHub - Mashape/kong: The Open-Source API Gateway and Microservice Management, built on NGINX Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 333 Star 5,934 Fork 507 Mashape/kong Code Issues 232 Pull requests 17 Wiki Pulse Graphs 🐒 The Open-Source API Gateway and Microservice Management, built on NGINX https://getkong.org/install 2,348 commits 16 branches 25 releases 47 contributors Lua 99.6% Other 0.4% Lua Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags chore/ci feat/gelato feature/cache-semaphore feature/dns feature/global-plugins fix/oauth2-implicitgrant fix/oauth2-redirecturi fix/oauth2-security fix/require-value master next plugins/bot-detection plugins/pushpin plugins/throttling refactor/keyauth-random-test test/uri-too-long Nothing to show 0.8.3 0.8.2 0.8.1 0.8.0 0.7.0 0.6.1 0.6.0 0.6.0rc3 0.6.0rc2 0.6.0rc1 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 0.4.2 0.4.1 0.4.0 0.3.2 0.3.1 0.3.0 0.2.1 0.2.0-2 0.1.1beta-2 0.1.0beta-3 Nothing to show New pull request Latest commit c28fad0 Jul 15, 2016 thibaultCha chore(gh-templates) add PR template Permalink Failed to load latest commit information. .ci chore(ci) always run Postgres db initialization Mar 8, 2016 .github chore(gh-templates) add PR template Jul 15, 2016 bin refactor: introduce meta.lua, penglight dep Mar 24, 2016 kong fix(cassandra) allow overriding consistency level Jul 5, 2016 spec Merge pull request #1251 from Mashape/bugfix/duplicate-proto-headers May 31, 2016 .busted fix: coverage by fixing busted's lua path Apr 17, 2015 .gitignore added ldoc config file, excluded generated docs from git. Aug 26, 2015 .travis.yml chore(ci) purge tree before installing Kong Mar 8, 2016 CHANGELOG.md Version bump to 0.8.3 Jun 1, 2016 CONTRIBUTING.md docs(CONTRIBUTING) new PR and issue workflow + branching Dec 21, 2015 LICENSE Switching to Apache License v2.0 Aug 12, 2015 Makefile Merge with release/0.8.0 Apr 13, 2016 README.md Update README.md Jun 29, 2016 UPGRADE.md docs(upgrade+changelog) 0.8.0rc1 changes and instructions Mar 22, 2016 kong-0.8.3-0.rockspec Version bump to 0.8.3 Jun 1, 2016 kong.yml Implementing missing check on ttl_on_failure May 10, 2016 README.md API Gateway & Microservice Management Kong is a scalable, open source API Layer (also known as an API Gateway, or API Middleware). Kong was originally built at Mashape to secure, manage and extend over 15,000 Microservices for its API Marketplace, which generates billions of requests per month. Backed by the battle-tested NGINX with a focus on high performance, Kong was made available as an open-source platform in 2015. Under active development, Kong is now used in production at hundreds of organizations from startups, to large enterprises and government departments including: The New York Times, Expedia, Healthcare.gov, The Guardian, Condè Nast and The University of Auckland. Website | Docs | Installation | Blog | Mailing List | Gitter Chat | freenode: #kong Summary Features Why Kong? Benchmarks Distributions Community Resources and Tools Roadmap Development Enterprise Support & Demo License Features CLI: Control your Kong cluster from the command line just like Neo in The Matrix. REST API: Kong can be operated with its RESTful API for maximum flexibility. Geo-Replicated: Configs are always up-to-date across different regions. Failure Detection & Recovery: Kong is unaffected if one of your Cassandra nodes goes down. Cluster Awareness: All Kongs auto-join the cluster keeping config updated across nodes. Scalability: Distributed by nature, Kong scales horizontally simply by adding nodes. Performance: Kong handles load with ease by scaling and using NGINX at the core. Developer Portal: With Gelato integration, build beautiful portals for easy developer on-boarding. Plugins: Extendable architecture for adding functionality to Kong and APIs. OAuth2.0: Add easily an OAuth2.0 authentication to your APIs. Logging: Log requests and responses to your system over HTTP, TCP, UDP or to disk. JWT: Verify and authenticate JSON Web Tokens. HMAC: Add HMAC Authentication to your APIs. ACL: Acccess Control for your API Consumers. IP-restriction: Whitelist or blacklist IPs that can make requests. Response-Rate-Limiting: Rate limiting based on custom response header value. API Analytics: Visualize, Inspect and Monitor API traffic with Galileo. Loggly Integration: Push your traffic data through your Loggly account. DataDog Integration: Easy Data monitoring through DataDog. DevOps will love it! Runscope Integration: Test and Monitor your APIs. Syslog: Logging to System log. SSL: Setup a Specific SSL Certificate for an underlying service or API. Monitoring: Live monitoring provides key load and performance server metrics. Authentication: Manage consumer credentials query string and header tokens. Rate-limiting: Block and throttle requests based on IP, authentication or body size. Transformations: Add, remove or manipulate HTTP requests and responses. CORS: Enable cross-origin requests to your APIs that would otherwise be blocked. Anything: Need custom functionality? Extend Kong with your own Lua plugins! For more info about plugins, you can check out the Plugin Gallery. Why Kong? If you're building for web, mobile or IoT (Internet of Things) you will likely end up needing common functionality on top of your actual software. Kong can help by acting as a gateway for HTTP requests while providing logging, authentication, rate-limiting and more through plugins. Benchmarks We've load tested Kong and Cassandra on AWS; you can see our benchmark report here. Distributions Kong comes in many shapes. While this repository contains its core's source code, other repos are also under active development: Kong Docker: A Dockerfile for running Kong in Docker. Kong Packages: Packaging scripts for deb, rpm and osx distributions. Kong Vagrant: A Vagrantfile for provisioning a development ready environment for Kong. Kong Homebrew: Homebrew Formula for Kong. Kong CloudFormation: Kong in a 1-click deployment for AWS EC2 Kong AWS AMI: Kong AMI on the AWS Marketplace. Kong on Microsoft Azure: Run Kong using Azure Resource Manager. Kong on Heroku: Deploy Kong on Heroku in one click. Kong and Instaclustr: Let Instaclustr manage your Cassandra cluster. Community Resources and Tools Resources: The story behind Kong Kong mentioned for the Empire PaaS Realtime API Management with Pushpin How to create your own Kong plugin Instaclustr partners with Kong How to deploy Kong on Azure Kong intro in Portuguese Kong tutorial in Japanese 1 Kong tutorial in Japanese 2 HAProxy + Kong Learn Lua in 15 minutes A Question about Microservices Kong Intro in Chinese Videos: Kong Intro Tutorial Kong mentioned at Hashicorp Conf Kong Demo in Portuguese OAuth2 with Kong Kong with Docker Podcasts: Changelog #185 Three Devs and a Maybe #83 Here is a list of third-party tools maintained by the community: Ansible role for Kong on Ubuntu Biplane: declarative configuration in Crystal Bonobo: key management (with Mashery migration scripts) Chef cookbook Django Kong Admin: Admin UI in Python Jungle: Admin UI in JavaScript Kong Dashboard: Admin UI in JavaScript Kong for CanopyCloud Kong image waiting for Cassandra Kong image for Tutum Kong-UI: Admin UI in JavaScript Konga: CLI Admin tool in JavaScript Kongfig: Declarative configuration in JavaScript Kongfig on Puppet Forge Puppet recipe Puppet module on Puppet Forge Python-Kong: Admin client library for Python .NET-Kong: Admin client library for .NET Roadmap You can find a detailed Roadmap of Kong on the Wiki. Development If you are planning on developing on Kong, you'll need a development installation. The next branch holds the latest unreleased source code. You can read more about writing your own plugins in the Plugin Development Guide, or browse an online version of Kong's source code documentation in the Public Lua API Reference. Vagrant You can use a Vagrant box running Kong and Cassandra that you can find at Mashape/kong-vagrant. Source Install First, you will need to already have Kong installed. Install Kong by following one of the methods described at getkong.org/download. Then, make sure you have downloaded Cassandra and that it is running. These steps will override your Kong installation with the latest source code: $ git clone https://github.com/Mashape/kong $ cd kong/  # You might want to switch to the development branch. See CONTRIBUTING.md for more infos $ git checkout next  # Install latest Kong globally using Luarocks, overriding the version previously installed $ make install Running for development It is best to run Kong with a development configuration file. Such a file can easily be created following those instructions: # Install all development dependencies and create your environment configuration files $ make dev  # Finally, run Kong with the just created development configuration $ kong start -c kong_DEVELOPMENT.yml Since you use a configuration file dedicated to development, feel free to customize it as you wish. For example, the one generated by make dev includes the following changes: the lua_package_path directive specifies that the Lua modules in your current directory will be used in favor of the system installation. The lua_code_cache directive being turned off, you can start Kong, edit your local files, and test your code without restarting Kong. To stop Kong, you will need to specify the configuration file too: $ kong stop -c kong_DEVELOPMENT.yml # or $ kong reload -c kong_DEVELOPMENT.yml Learn more about the CLI and configuration options in the documentation. Tests Kong relies on three test suites: Unit tests Integration tests, which require a running Cassandra cluster Plugins tests, which are a mix of unit and integration tests, which also require a Cassandra cluster The first can simply be run afte installing busted and running: $ busted spec/unit  The integration tests require you to have a configuration file at ./kong_TEST.yml and to make it point to a running Cassandra cluster (it will use a keyspace of its own). Such a file is also created by make dev, but you can create one of your own or customize it (you might want to change the logging settings, for example): $ busted spec/integration  The make dev command can create a default kong_TEST.yml file. The plugins tests also require a ./kong_TEST.yml file and a running Cassandra cluster, and be be run with: $ busted spec/plugins  Finally, all suites can be run at once by simply running busted. Tools Various tools are used for documentation and code quality. They can all be easily installed by running: $ make dev  Code coverage is analyzed by luacov from the busted unit tests: $ busted --coverage $ luacov kong # or $ make coverage  The code is statically analyzed and linted by luacheck. It is easier to use the Makefile to run it: $ make lint  The documentation is written according to the ldoc format and can be generated with: $ ldoc -c config.ld kong/ # or $ make doc  We maintain this documentation on the Public Lua API Reference so it is unlikely that you will have to generate it, but it is useful to keep that information in mind when documenting your modules if you wish to contribute. Makefile When developing, you can use the Makefile for doing the following operations: Name Description install Install the Kong luarock globally dev Setup your development environment clean Clean your development environment doc Generate the ldoc documentation lint Lint Lua files in kong/ and spec/ test Run the unit tests suite test-integration Run the integration tests suite test-plugins Run the plugins test suite test-all Run all unit + integration tests at once coverage Run all tests + coverage report Enterprise Support & Demo Learn more about Kong Priority Support, Products, HA, Demo, Training, API Certifications and Professional Services. License Copyright 2016 Mashape, Inc  Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at     http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mashape/kong"	"Microservice & API Management Layer"	"true"
"Command-line Utilities"	"ansicolors"	"https://github.com/kikito/ansicolors.lua"	"Simple function for printing to the console in color."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"37"	"7"	"16"	"GitHub - kikito/ansicolors.lua: ANSI terminal color manipulation for Lua. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 37 Fork 16 kikito/ansicolors.lua forked from hoelzro/ansicolors Code Issues 0 Pull requests 0 Pulse Graphs ANSI terminal color manipulation for Lua. 35 commits 1 branch 3 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.0.2 v1.0.1 1.0 Nothing to show New pull request Pull request Compare This branch is 29 commits ahead, 1 commit behind hoelzro:master. Latest commit a788ef9 Nov 1, 2013 kikito underlined -> underline in README. Fixes #6 Permalink Failed to load latest commit information. specs Fix bugs in previous two commits. Feb 21, 2013 .travis.yml Update .travis.yml Jan 2, 2013 COPYING initial version, with colorize and specs May 12, 2011 README.textile underlined -> underline in README. Fixes #6 Nov 1, 2013 ansicolors-1.0.2-3.rockspec Update and rename ansicolors-1.0.2-2.rockspec to ansicolors-1.0.2-3.r… Apr 9, 2013 ansicolors.lua bump to 1.0.2 Feb 21, 2013 README.textile ansicolors.lua ansicolors is a simple Lua function for printing to the console in color. Installation Put the file ansicolors.lua somewhere where your Lua interpreter will be able to find it. Then:   local ansicolors = require 'ansicolors'  Usage   local colors = require 'ansicolors'   print(colors('%{red}hello'))   print(colors('%{redbg}hello%{reset}'))   print(colors('%{bright red underline}hello'))  The colors function makes sure that color attributes are reset at each end of the generated string. If you want to generate complex strings piece-by-piece, use colors.noReset, which works exactly the same, but without adding the reset codes at each end of the string. Testing This application uses telescope in order to perform the tests. Install telescope, and then execute    tsc specs/ansicolors_spec.lua   Notice that the tests will only work on an ANSI-compatible machine (windows isn’t ANSI-compatible) Windows Windows console, by default, isn’t capable of handling ANSI color codes correctly. This library tries to detect whether it is on a windows machine (by looking at package.path) and in that case it suppresses all ANSI control characters (the text appears devoid of color, but legible). Valid attribute list: Misc. attributes: reset bright dim underline blink reverse hidden Foreground colors: black red green yellow blue magenta cyan white Background colors: blackbg redbg greenbg yellowbg bluebg magentabg cyanbg whitebg Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kikito/ansicolors.lua"	"Simple function for printing to the console in color."	"true"
"Command-line Utilities"	"cliargs"	"https://github.com/amireh/lua_cliargs"	"A simple command-line argument parsing module."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"42"	"5"	"13"	"GitHub - amireh/lua_cliargs: A command-line argument parsing module for Lua. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 42 Fork 13 amireh/lua_cliargs Code Issues 3 Pull requests 1 Pulse Graphs A command-line argument parsing module for Lua. 184 commits 5 branches 17 releases Fetching contributors Lua 93.9% Shell 6.1% Lua Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 3.0 luadoc luarocks master release-2.2-0 Nothing to show v3.0 v3.0-1 v3.0-0 v2.5-5 v2.5-4 v2.5-3 v2.5-2 v2.5-1 v2.5-0 v2.4-1 v2.4-0 v2.3-3 v2.3-2 v2.3-1 v2.3-0 v2.1 v2.0 Nothing to show New pull request Latest commit 076fc27 Jan 12, 2016 amireh luacheck config in travis Permalink Failed to load latest commit information. bin fixing docs script Nov 8, 2015 doc using the gitbooks plugin Nov 9, 2015 examples gitbooks-style docs Nov 9, 2015 spec Release v3.0 Jan 12, 2016 src Release v3.0-1 Jan 12, 2016 .busted Less strict defaults and splat arg default can be redefined Oct 27, 2015 .env README updates Oct 27, 2015 .gitignore docs using tinydoc Nov 8, 2015 .luacheckrc cli:read_defaults() changes Nov 7, 2015 .travis.yml luacheck config in travis Jan 12, 2016 .travis_setup.sh Working out Travis-CI Jan 12, 2016 LICENSE README updates Oct 27, 2015 README.md gitbooks-style docs Nov 8, 2015 UPGRADE.md README updates Oct 27, 2015 lua_cliargs-3.0-1.rockspec Release v3.0-1 Jan 12, 2016 README.md lua_cliargs cliargs is a command-line argument parser for Lua. It supports several types of arguments: required arguments optional arguments with different notations: -short-key VALUE and/or --expanded-key=VALUE optional arguments with multiple-values that get appended to a list optional ""flag"" arguments (on/off options) with notations: -short-key and/or --expanded-key a single optional ""splat"" argument which can be repeated (must be the last argument) Optional arguments can have default values (strings), flags always default to 'true'. Usage Examples See the examples under the examples/ directory. API See http://lua-cliargs.netlify.com/ for the API docs. Help listings --help A help listing will be automatically generated and accessed using the --help argument. When such an option is encountered, cli:parse() will abort and return nil, string with the help message; you are free to print it to the screen using print() if you want. You can also force its display in the code using cli:print_help(). This is the result for our example (see examples/00_general.lua): Usage: cli_example.lua [OPTIONS]  INPUT  [OUTPUT-1 [OUTPUT-2 [...]]]  ARGUMENTS:   INPUT                 path to the input file (required)   OUTPUT                multiple output paths (optional, default:                         /dev/stdout)  OPTIONS:   -c, --compress=FILTER the filter to use for compressing output: gzip,                         lzma, bzip2, or none (default: gzip)   -o FILE               path to output file (default: /dev/stdout)   -d                    script will run in DEBUG mode   -v, --version         prints the program's version and exits   --verbose             the script output will be very verbose  Validations Runtime argument validation From a parsing point of view, there are 3 cases that need to be handled which are outlined below. If I missed something, please open a ticket! Missing a required argument $ lua examples/00_general.lua cli_example.lua: error: bad number of arguments; 1-4 argument(s) must be specified, not 0; re-run with --help for usage.  Missing value for an optional argument $ lua examples/00_general.lua --compress inputfile cli_example.lua: error: option --compress requires a value to be set; re-run with --help for usage.  Unknown arguments $ lua examples/00_general.lua -f inputfile cli_example.lua: error: unknown/bad flag; -f; re-run with --help for usage.  Some sanity guards In the following cases, cliargs will report an error to you and terminate the running script: flag options can not accept a value. For example: cli:add_flag('-v VERSION') will return an error duplicate keys are not allowed: defining two options with the key --input will be rejected Tests Running test specs is done using busted. You can install it using LuaRocks, and then just call it with the spec folder: luarocks install busted cd /path/to/lua_cliargs/ busted spec  Contributions If you come across a bug and you'd like to patch it, please fork the repository, commit your patch, and request a pull. Thanks to Many thanks to everyone who reported bugs, provided fixes, and added entirely new features: Thijs Schreijer Jack Lawson Robert Andrew Ditthardt Oscar Lim If I missed you, don't hesitate to update this file or just email me. Changelog Changes from 2.5.x 3.0 This major version release contains BREAKING API CHANGES. See the UPGRADE guide for help in updating your code to make use of it. More flexible parsing options can occur anywhere now even after arguments (unless the -- indicator is specified, then no options are parsed afterwards.) Previously, options were accepted only before arguments. options using the short-key notation can be specified using = as a value delimiter as well as a space (e.g. -c=lzma and -c lzma) the library is now more flexible with option definitions (notations like -key VALUE, --key=VALUE, -k=VALUE are all treated equally) --help or -h will now cause the help listing to be displayed no matter where they are. Previously, this only happened if they were supplied as the first option. Basic command support You may now define commands with custom handlers. A command may be invoked by supplying its name as the first argument (options can still come before or afterwards). lua_cliargs will forward the rest of the options to that command to handle, which can be in a separate file. See examples/04_commands--git.lua for an example. Re-defining defaults It is now possible to pass a table containing default values (and override any existing defaults). The function for doing this is called cli:load_defaults().. This makes it possible to load run-time defaults from a configuration file, for example. Reading configuration files cliargs now exposes some convenience helpers for loading configuration from files (and a separate hook, cli:load_defaults() to inject this config if you want) found in cli:read_defaults(). This method takes a file-path and an optional file format and it will parse it for you, provided you have the necessary libraries installed. See the API docs for using this hook. Other changes internal code changes and more comprehensive test-coverage Changes from 2.5.1 to 2.5.2 No longer tracking the (legacy) tarballs in git or the luarocks package. Instead, we use the GitHub release tarballs for each version. Changes in 2.4.0 from 2.3-4 All arguments now accept a callback that will be invoked when parsing of those arguments was successful (POSSIBLY BREAKING) Default value for flags is now nil instead of false. This will only affect existing behavior if you were explicitly testing unset flags to equal false (i.e. if flag == false then) as opposed to if flag then (or if not flag then). Minor bugfixes Changes in 2.3.0 the parser will now understand -- to denote the end of optional arguments and will map whatever comes after it to required/splat args -short VALUE is now properly supported, so is -short=VALUE short-key options can now officially be composed of more than 1 character the parser now accepts callbacks that will be invoked as soon as options are parsed so that you can bail out of parsing preemptively (like for --version or --help options) options can now accept multiple values via multiple invocations if a table was provided as a default value (passed-in values will be appended to that list) Changes in 2.2-0 from 2.1-2 the = that separates keys from values in the --expanded-key notation is no longer mandatory; using either a space or a = will map the value to the key (e.g., --compress lzma is equal to --compress=lzma) Changes in 2.0.0 from 1.x.x added the 'splat' argument, an optional repetitive argument for which a maximum number of occurrences can be set removed the reference, arguments are now solely returned by their key/expanded-key (BREAKING!) removed object overhead and the new() method as the library will only be used once on program start-up (BREAKING!) after parsing completed successfully, the library will effectively delete itself to free resources (BREAKING!) option/flag is now allowed with only an expanded-key defined Debug aid implemented; adding a first option --__DUMP__, will dump the results of parsing the command line. Especially for testing how to use the commandline with arguments containing spaces either quoted or not. the print_usage() and print_help() now have a 'noprint' parameter that will not print the message, but return it as an error string (nil + errmsg) License The code is released under the MIT terms. Feel free to use it in both open and closed software as you please. Copyright (c) 2011-2015 Ahmad Amireh Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/amireh/lua_cliargs"	"A simple command-line argument parsing module."	"true"
"Command-line Utilities"	"lua-term"	"https://github.com/hoelzro/lua-term"	"Terminal operations and manipulations."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"47"	"6"	"8"	"GitHub - hoelzro/lua-term: Terminal operations for Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 47 Fork 8 hoelzro/lua-term Code Issues 0 Pull requests 0 Pulse Graphs Terminal operations for Lua 48 commits 1 branch 7 releases Fetching contributors Lua 79.8% Makefile 13.6% C 6.6% Lua Makefile C Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.07 0.06 0.05 0.04 0.03 0.02 0.01 Nothing to show New pull request Latest commit 3950eb1 Jun 9, 2016 hoelzro Merge pull request #18 from mpeterv/fix-isatty … Fix term.isatty Permalink Failed to load latest commit information. term .gitignore CHANGES COPYING Import of first release of lua-term Jun 25, 2012 Makefile README.md core.c lua-term-0.7-1.rockspec README.md Overview lua-term is a Lua module for manipulating a terminal. Installation lua-term is available on Luarocks. OpenBSD lua-term is available as an OpenBSD package. Use the proper Lua flavour to get the package for your Lua version: # For Lua 5.1 $ doas pkg_add -r lua-term # For Lua 5.2 $ doas pkg_add -r lua52-term # For Lua 5.3 $ doas pkg_add -r lua53-term  Or install from ports: $ cd /usr/ports/devel/lua-term $ env FLAVOR=lua51 doas make install  Usage     local term   = require 'term'     local colors = term.colors -- or require 'term.colors'      print(term.isatty(io.stdout)) -- true if standard output goes to the terminal      print(colors.red 'hello')     print(colors.red .. 'hello' .. colors.reset)     print(colors.red, 'hello', colors.reset)      -- The following functions take an optional IO handle (like io.stdout);     -- io.stdout is the default if you don't specify one     term.clear()    -- clears the screen     term.cleareol() -- clears from the cursor to the end of the line     --term.cursor.goto(1, 1) -- It will fail in Lua >= 5.2 because goto is a reserved word.     term.cursor['goto'](1, 1) -- This will work on Lua >= 5.2, please use jump instead     term.cursor.jump(1, 1) -- jump is just an alias for goto     term.cursor.jump(io.stdout, 1, 1)     term.cursor.goup(1)     term.cursor.godown(1)     term.cursor.goright(1)     term.cursor.goleft(1)     term.cursor.save()    -- save position     term.cursor.restore() -- restore position term Functions Some functions in lua-term take an optional file handle argument; if this is not provided, io.stdout is used. term.clear([opt_file]) Clear the terminal's contents. term.cleareol([opt_file]) Clear from the current cursor position to the end of the current line. term.isatty(file) Returns true if file is a TTY; false otherwise. NOTE: This function has been deprecated in favor of luaposix's implementation. If you would like this functionality in the future, please use luaposix. term.colors Values The following values are available in term.colors: Terminal Attributes reset clear (a synonym for reset) default (a synonym for reset) bright dim underscore blink reverse hidden Foreground Colors black red green yellow blue magenta cyan white Background Colors onblack onred ongreen onyellow onblue onmagenta oncyan onwhite Every value in term.colors may be used in several ways: As a Function print(colors.red 'hello') As a String print(colors.red .. 'hello' .. colors.reset) print(colors.red, 'hello', colors.reset) term.cursor Functions term.cursor.goto([opt_file], x, y) Place the cursor at (x, y). term.cursor.jump([opt_file], x, y) An alias for term.cursor.goto. term.cursor.goup([opt_file], nlines) Moves the cursor up nlines lines. term.cursor.godown([opt_file], nlines) Moves the cursor down nlines lines. term.cursor.goright([opt_file], ncols) Moves the cursor right ncols columns. term.cursor.goleft([opt_file], ncols) Moves the cursor left ncols columns. term.cursor.save([opt_file]) Saves the cursor position. term.cursor.restore([opt_file]) Restores the cursor position. Alternatives If you are looking to simply provide coloration to a terminal application and would like to use a more ""tag-like"" API (ex. colors '%{red}hello%{reset}'), there is a Lua rock named ansicolors: https://github.com/kikito/ansicolors.lua Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hoelzro/lua-term"	"Terminal operations and manipulations."	"true"
"Command-line Utilities"	"argparse"	"https://github.com/mpeterv/argparse"	"A feature-rich command line parser inspired by argparse for Python."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"58"	"9"	"5"	"GitHub - mpeterv/argparse: Feature-rich command line parser for Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 58 Fork 5 mpeterv/argparse Code Issues 2 Pull requests 0 Pulse Graphs Feature-rich command line parser for Lua 166 commits 2 branches 8 releases 4 contributors Lua 90.9% Python 9.1% Lua Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 0.5.0 0.4.1 0.4.0 0.3.2 0.3.1 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit a40458f Dec 9, 2015 mpeterv 0.5.0 release Permalink Failed to load latest commit information. docsrc 0.5.0 release Dec 9, 2015 spec Pass command name to command actions Dec 9, 2015 src Pass command name to command actions Dec 9, 2015 .luacheckrc Update travis config Jun 9, 2015 .luacov Add coverage gathering Sep 24, 2015 .travis.yml Add coverage gathering Sep 24, 2015 LICENSE Remove bundled 30log Jan 15, 2015 README.md Remove HTML docs from the repo [ci skip] Sep 24, 2015 argparse-scm-1.rockspec Remove HTML docs from the repo [ci skip] Sep 24, 2015 README.md argparse Argparse is a feature-rich command line parser for Lua inspired by argparse for Python. Argparse supports positional arguments, options, flags, optional arguments, subcommands and more. Argparse automatically generates usage, help and error messages. Simple example: -- script.lua local argparse = require ""argparse""  local parser = argparse(""script"", ""An example."") parser:argument(""input"", ""Input file."") parser:option(""-o --output"", ""Output file."", ""a.out"") parser:option(""-I --include"", ""Include locations.""):count(""*"")  local args = parser:parse() print(args)  -- Assuming print is patched to handle tables nicely. $ lua script.lua foo {    input = ""foo"",    output = ""a.out"",    include = {} } $ lua script.lua foo -I/usr/local/include -Isrc -o bar {    input = ""foo"",    output = ""bar"",    include = {""/usr/local/include"", ""src""} } $ lua script.lua foo bar Usage: script [-o <output>] [-I <include>] [-h] <input>  Error: too many arguments  $ lua script.lua --help Usage: script [-o <output>] [-I <include>] [-h] <input>  An example.   Arguments:     input                 Input file.  Options:     -o <output>, --output <output>                          Output file. (default: a.out)    -I <include>, --include <include>                          Include locations.    -h, --help            Show this help message and exit.  $ lua script.lua foo --outptu=bar Usage: script [-o <output>] [-I <include>] [-h] <input>  Error: unknown option '--outptu' Did you mean '--output'?  Contents Installation Tutorial Testing License Installation Using LuaRocks Installing argparse using LuaRocks is simple: $ luarocks install argparse Without LuaRocks Download src/argparse.lua file and put it into the directory for Lua libraries or your working directory. Tutorial The tutorial is available online. If argparse has been installed using LuaRocks 2.1.2 or later, it can be viewed using luarocks doc argparse command. Tutorial HTML files can be built using Sphinx: sphinx-build docsrc doc, the files will be found inside doc/. Testing argparse comes with a testing suite located in spec directory. busted is required for testing, it can be installed using LuaRocks. Run the tests using busted command from the argparse folder. License argparse is licensed under the same terms as Lua itself (MIT license). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mpeterv/argparse"	"A feature-rich command line parser inspired by argparse for Python."	"true"
"Templating"	"lustache"	"http://olivinelabs.com/lustache/"	"Mustache template implementation."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Lustache by Olivine-Labs Lustache Mustache templates for Lua View the Project on GitHub Olivine-Labs/lustache Download ZIP File Download TAR Ball View On GitHub lustache - Logic-less {{mustache}} templates with Lua What could be more logical awesome than no logic at all? lustache is an implementation of the mustache template system in Lua. Mustache is a logic-less template syntax. It can be used for HTML, config files, source code - anything. It works by expanding tags in a template using values provided in a hash or object. We call it ""logic-less"" because there are no if statements, else clauses, or for loops. Instead there are only tags. Some tags are replaced with a value, some nothing, and others a series of values. For a language-agnostic overview of mustache's template syntax, see the mustache(5) manpage. Where to use lustache? You can use lustache to render mustache templates anywhere you can use Lua. lustache exposes itself as a module, so you only have to require the file. and assign it. Usage Installation Download lustache.lua and place it in your project, or install it with luarocks using luarocks install lustache. On OSX, you can brew install luarocks. Below is quick example how to use lustache: lustache = require ""lustache""  view_model = {   title = ""Joe"",   calc = function ()     return 2 + 4;   end }  output = lustache.render(""{{title}} spends {{calc}}"", view)  In this example, the lustache.render function takes two parameters: 1) the mustache template and 2) a view_model object that contains the data and code needed to render the template. Templates A mustache template is a string that contains any number of mustache tags. Tags are indicated by the double mustaches that surround them. {{person}} is a tag, as is {{#person}}. In both examples we refer to person as the tag's key. There are several types of tags available in lustache. Variables The most basic tag type is a simple variable. A {{name}} tag renders the value of the name key in the current context. If there is no such key, nothing is rendered. All variables are HTML-escaped by default. If you want to render unescaped HTML, use the triple mustache: {{{name}}}. You can also use & to unescape a variable. Template: * {{name}} * {{age}} * {{company}} * {{{company}}} * {{&company}}  View: {   name = ""Chris"",   company = ""<b>GitHub</b>"" }  Output: * Chris * * &lt;b&gt;GitHub&lt;/b&gt; * <b>GitHub</b> * <b>GitHub</b>  Dot notation may be used to access keys that are properties of objects in a view. Template: * {{name.first}} {{name.last}} * {{age}}  View: {   name = {     first = ""Michael"",     last = ""Jackson""   },   age = ""RIP"" }  Output: * Michael Jackson * RIP  Sections Sections render blocks of text one or more times, depending on the value of the key in the current context. A section begins with a pound and ends with a slash. That is, {{#person}} begins a person section, while {{/person}} ends it. The text between the two tags is referred to as that section's ""block"". The behavior of the section is determined by the value of the key. False Values or Empty Lists If the person key exists and has a value of null, undefined, or false, or is an empty list, the block will not be rendered. Template: Shown. {{#person}} Never shown! {{/person}}  View: {   person = false }  Output: Shown.  Non-Empty Lists If the person key exists and is not null, undefined, or false, and is not an empty list the block will be rendered one or more times. When the value is a list, the block is rendered once for each item in the list. The context of the block is set to the current item in the list for each iteration. In this way we can loop over collections. Template: {{#stooges}} <b>{{name}}</b> {{/stooges}}  View: {   stooges = [     { name = ""Moe"" },     { name = ""Larry"" },     { name = ""Curly"" }   ] }  Output: <b>Moe</b> <b>Larry</b> <b>Curly</b>  When looping over an array of strings, a . can be used to refer to the current item in the list. Template: {{#musketeers}} * {{.}} {{/musketeers}}  View: {   musketeers = { ""Athos"", ""Aramis"", ""Porthos"", ""D'Artagnan"" } }  Output: * Athos * Aramis * Porthos * D'Artagnan  If the value of a section variable is a function, it will be called in the context of the current item in the list on each iteration. Template: {{#beatles}} * {{name}} {{/beatles}}  View: {   beatles = {     { first_name = ""John"", last_name = ""Lennon"" },     { first_name = ""Paul"", last_name = ""McCartney"" },     { first_name = ""George"", last_name = ""Harrison"" },     { first_name = ""Ringo"", last_name = ""Starr"" }   },   name = function (self)     return self.first_name .. "" "" .. self.last_name   end }  Output: * John Lennon * Paul McCartney * George Harrison * Ringo Starr  Functions If the value of a section key is a function, it is called with the section's literal block of text, un-rendered, as its first argument. The second argument is a special rendering function that uses the current view as its view argument. It is called in the context of the current view object. Template: {{#bold}}Hi {{name}}.{{/bold}}  View: {   name = ""Tater"",   bold = function (self)     return function (text, render)        return ""<b>"" .. render(text) .. ""</b>""     end   end }  Output: <b>Hi Tater.</b>  Inverted Sections An inverted section opens with {{^section}} instead of {{#section}}. The block of an inverted section is rendered only if the value of that section's tag is null, undefined, false, or an empty list. Template: {{#repos}}<b>{{name}}</b>{{/repos}} {{^repos}}No repos :({{/repos}}  View: {   ""repos"": {} }  Output: No repos :(  Comments Comments begin with a bang and are ignored. The following template: <h1>Today{{! ignore me }}.</h1>  Will render as follows: <h1>Today.</h1>  Comments may contain newlines. Partials Partials begin with a greater than sign, like {{> box}}. Partials are rendered at runtime (as opposed to compile time), so recursive partials are possible. Just avoid infinite loops. They also inherit the calling context. Whereas in ERB you may have this: <%= partial :next_more, :start => start, :size => size %>  Mustache requires only this: {{> next_more}}  Why? Because the next_more.mustache file will inherit the size and start variables from the calling context. In this way you may want to think of partials as includes, or template expansion, even though it's not literally true. For example, this template and partial: base.mustache: <h2>Names</h2> {{#names}}   {{> user}} {{/names}}  user.mustache: <strong>{{name}}</strong>  Can be thought of as a single, expanded template: <h2>Names</h2> {{#names}}   <strong>{{name}}</strong> {{/names}}  In lustache an object of partials may be passed as the third argument to lustache.render. The object should be keyed by the name of the partial, and its value should be the partial text. Set Delimiter Set Delimiter tags start with an equals sign and change the tag delimiters from {{ and }} to custom strings. Consider the following contrived example: * {{ default_tags }} {{=<% %>=}} * <% erb_style_tags %> <%={{ }}=%> * {{ default_tags_again }}  Here we have a list with three items. The first item uses the default tag style, the second uses ERB style as defined by the Set Delimiter tag, and the third returns to the default style after yet another Set Delimiter declaration. According to ctemplates, this ""is useful for languages like TeX, where double-braces may occur in the text and are awkward to use for markup."" Custom delimiters may not contain whitespace or the equals sign. Testing lustache uses the lunit testing framework. In order to run the tests you'll need to install lunit, which can be done through luarocks or your choice of lua package manager. $ luarocks install lunit  Then run the tests. $ lunit spec/*  Thanks lustache began as a direct port of Jan Lehnardt's excellent mustache.js. It would be significantly further behind without the available code from the many contributors. <3 License MIT licensed. View LICENSE file for more details. This project is maintained by Olivine-Labs Hosted on GitHub Pages — Theme by orderedlist"	"null"	"null"	"Mustache template implementation."	"true"
"Templating"	"etlua"	"https://github.com/leafo/etlua"	"Embedded Lua templates, ERB-style."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"76"	"14"	"4"	"GitHub - leafo/etlua: Embedded Lua templates Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 76 Fork 4 leafo/etlua Code Issues 0 Pull requests 0 Pulse Graphs Embedded Lua templates 43 commits 1 branch 6 releases Fetching contributors Lua 54.1% MoonScript 45.4% Makefile 0.5% Lua MoonScript Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.3.0 v1.2.0 v1.1.0 v1.0.2 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 20bc713 Jun 6, 2016 leafo correct version Permalink Failed to load latest commit information. spec change how values are passed to compiled template, require a buffer p… Feb 6, 2014 Makefile rename project to etlua Oct 26, 2013 README.md typo in readme Feb 19, 2014 etlua-dev-1.rockspec rename project to etlua Oct 26, 2013 etlua.lua correct version Jun 6, 2016 etlua.moon correct version Jun 6, 2016 README.md etlua Embedded Lua templating Install $ luarocks install etlua Tutorial local etlua = require ""etlua"" local template = etlua.compile([[   Hello <%= name %>,   Here are your items:   <% for i, item in pairs(items) do %>    * <%= item -%>   <% end %> ]])  print(template({   name = ""leafo"",   items = { ""Shoe"", ""Reflector"", ""Scarf"" } }))  Reference The following tags are supported <% lua_code %> runs lua code verbatim <%= lua_expression %> writes result of expression to output, HTML escaped <%- lua_expression %> same as above but with no HTML escaping Any of the embedded Lua tags can use the -%> closing tag to suppress a following newline if there is one, for example: <%= 'hello' -%>. The module can be loaded by doing: local etlua = require ""etlua"" Methods func = etlua.compile(template_string) Compiles the template into a function, the returned function can be called to render the template. The function takes one argument: a table to use as the environment within the template. _G is used to look up a variable if it can't be found in the environment. result = etlua.render(template_string, env) Compiles and renders the template in a single call. If you are concerned about high performance this should be avoided in favor of compile if it's possible to cache the compiled template. Errors If any of the methods fail they will return nil, followed by the error message. How it works Templates are transparently translated into Lua code and then loaded as a function. Rendering a compiled template is very fast. Any compile time errors are rewritten to show the original source position in the template. The parser is aware of strings so you can put closing tags inside of a string literal without any problems. Raw API The raw API is a bit more complicated but it lets you insert code between the compile stages in addition to exposing the internal buffer of the template. All methods require a parser object: local parser = etlua.Parser() lua_code, err = parser.compile_to_lua(etlua_code) Parses a string of etlua code, returns the compiled Lua version as a string. Here's an example of the generated Lua code: local parser = etlua.Parser() print(parser:compile_to_lua(""hello<%= world %>"")) local _b, _b_i, _tostring, _concat, _escape = ... _b_i = _b_i + 1 _b[_b_i] = ""hello"" _b_i = _b_i + 1 --[[9]] _b[_b_i] = _escape(_tostring( world )) _b_i = _b_i + 1 _b[_b_i] = """" return _b There are a few interesting things: there are no global variable references, all required values are passed in as arguments, and comments are inserted to annotate the positions of where code originated from. _b is expected to be a regular Lua table that is the buffer where chunks of the template are inserted as it's executed. fn, err = parser.load(lua_code) Converts the Lua code returned by parser.compile_to_lua into an actual function object. If there are any syntax errors then nil is returned along with the error message. At this stage syntax errors are rewritten to point to the original location in the etlua code and not the generated code. result = parser.run(fn, env={}, buffer={}) Executes a loaded function returned by parser.load with the specified buffer and environment. Returns the result of fn, which is typically the buffer. The environment is applied to fn with setfenv (a version is included for Lua 5.2). Example For example we can render multiple templates into the same buffer: parser = etlua.Parser()  first_fn = parser:load(parser:compile_to_lua(""Hello "")) second_fn = parser:load(parser:compile_to_lua(""World""))  buffer = {} parser:run(first_fn, nil, buffer, #buffer) parser:run(second_fn, nil, buffer, #buffer)  print(table.concat(buffer)) -- print 'Hello World' Custom compiler If you need to customize the Lua code that is generated by etlua to integrate with your own output buffers then you can provide a custom compiler. You can extend etlua.Compiler and override it's methods to control the output. See https://github.com/leafo/etlua/blob/master/etlua.moon#L42 for the implementation of the default compiler For an example we'll create a debug compiler that prints whenever a template is executed. -- create a custom compiler import Compiler from require ""etlua""  class DebugCompiler extends Compiler   header: =>     @push 'print(""Running template"")\n'     super!  -- try it out import Parser from require ""etlua""  print Parser!\compile_to_lua ""hello"", DebugCompiler compile_to_lua takes an optional second argument of the compiler class to use. License MIT, Copyright (C) 2014 by Leaf Corcoran Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/leafo/etlua"	"Embedded Lua templates, ERB-style."	"true"
"Templating"	"lua-resty-template"	"https://github.com/bungle/lua-resty-template"	"Lua-oriented template engine for OpenResty, somewhat Jinja-like."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"286"	"35"	"83"	"GitHub - bungle/lua-resty-template: Templating Engine (HTML) for Lua and OpenResty. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 286 Fork 83 bungle/lua-resty-template Code Issues 5 Pull requests 0 Pulse Graphs Templating Engine (HTML) for Lua and OpenResty. 484 commits 1 branch 9 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.8 v1.7 v1.6 v1.5 v1.4 v1.3 v1.2 v1.1 v1.0 Nothing to show New pull request Latest commit 75e71bb Jul 5, 2016 bungle committed on GitHub Update README.md Permalink Failed to load latest commit information. lib/resty Pre-release 1.8. Jun 8, 2016 CHANGES Release 1.8 Jun 15, 2016 LICENSE Implemented first version of short escaping syntax. Mar 22, 2016 README.md Update README.md Jul 5, 2016 lua-resty-template-dev-1.rockspec Changed quoting to normal string quotes. Aug 28, 2014 README.md lua-resty-template lua-resty-template is a compiling (1) (HTML) templating engine for Lua and OpenResty. (1) with compilation we mean that templates are translated to Lua functions that you may call or string.dump as a binary bytecode blobs to disk that can be later utilized with lua-resty-template or basic load and loadfile standard Lua functions (see also Template Precompilation). Although, generally you don't need to do that as lua-resty-template handles this behind the scenes. Hello World with lua-resty-template local template = require ""resty.template"" -- Using template.new local view = template.new ""view.html"" view.message = ""Hello, World!"" view:render() -- Using template.render template.render(""view.html"", { message = ""Hello, World!"" })G view.html <!DOCTYPE html> <html> <body>   <h1>{{message}}</h1> </body> </html> Output <!DOCTYPE html> <html> <body>   <h1>Hello, World!</h1> </body> </html> The same can be done with inline template string: -- Using template string template.render([[ <!DOCTYPE html> <html> <body>   <h1>{{message}}</h1> </body> </html>]], { message = ""Hello, World!"" }) Contents Template Syntax Reserved Context Keys and Remarks Installation Using LuaRocks or Moonrocks Nginx / OpenResty Configuration Lua API template.caching template.new template.compile template.render template.parse template.precompile template.load template.print Template Precompilation Template Helpers Usage Examples Template Including Views with Layouts Using Blocks Grandfather-Father-Son Inheritance Macros Calling Methods in Templates Embedding Angular or other tags / templating inside the Templates Embedding Markdown inside the Templates Lua Server Pages (LSP) with OpenResty FAQ Alternatives Benchmarks Changes License Template Syntax You may use the following tags in templates: {{expression}}, writes result of expression - html escaped {*expression*}, writes result of expression {% lua code %}, executes Lua code {(template)}, includes template file, you may also supply context for include file {(file.html, { message = ""Hello, World"" } )} {[expression]}, includes expression file (the result of expression), you may also supply context for include file {[""file.html"", { message = ""Hello, World"" } ]} {-block-}...{-block-}, wraps inside of a {-block-} to a value stored in a blocks table with a key block (in this case), see using blocks. Don't use predefined block names verbatim and raw. {-verbatim-}...{-verbatim-} and {-raw-}...{-raw-} are predefined blocks whose inside is not processed by the lua-resty-template but the content is outputted as is. {# comments #} everything between {# and #} is considered to be commented out (i.e. not outputted or executed) From templates you may access everything in context table, and everything in template table. In templates you can also access context and template by prefixing keys. <h1>{{message}}</h1> == <h1>{{context.message}}</h1> Short Escaping Syntax If you don't want a particular template tag to be processed you may escape the starting tag with backslash \: <h1>\{{message}}</h1> This will output (instead of evaluating the message): <h1>{{message}}</h1> If you want to add backslash char just before template tag, you need to escape that as well: <h1>\\{{message}}</h1> This will output: <h1>\[message-variables-content-here]</h1> A Word About Complex Keys in Context Table Say you have this kind of a context table: local ctx = {[""foo:bar""] = ""foobar""} And you want to render the ctx[""foo:bar""]'s value foobar in your template. You have to specify it explicitly by referencing the context in your template: {# {*[""foo:bar""]*} won't work, you need to use: #} {*context[""foo:bar""]*} Or altogether: template.render([[ {*context[""foo:bar""]*} ]], {[""foo:bar""] = ""foobar""}) A Word About HTML Escaping Only strings are escaped, functions are called without arguments (recursively) and results are returned as is, other types are tostringified. nils and ngx.nulls are converted to empty strings """". Escaped HTML characters: & becomes &amp; < becomes &lt; > becomes &gt; "" becomes &quot; ' becomes &#39; / becomes &#47; Example Lua local template = require ""resty.template"" template.render(""view.html"", {   title   = ""Testing lua-resty-template"",   message = ""Hello, World!"",   names   = { ""James"", ""Jack"", ""Anne"" },   jquery  = '<script src=""js/jquery.min.js""></script>'  }) view.html {(header.html)} <h1>{{message}}</h1> <ul> {% for _, name in ipairs(names) do %}     <li>{{name}}</li> {% end %} </ul> {(footer.html)} header.html <!DOCTYPE html> <html> <head>   <title>{{title}}</title>   {*jquery*} </head> <body> footer.html </body> </html> Reserved Context Keys and Remarks It is adviced that you do not use these keys in your context tables: ___, holds the compiled template, if set you need to use {{context.___}} context, holds the current context, if set you need to use {{context.context}} include, holds the include helper function, if set you need to use {{context.include}} layout, holds the layout by which the view will be decorated, if set you need to use {{context.layout}} blocks, holds the blocks, if set you need to use {{context.blocks}} (see: using blocks) template, holds the template table, if set you need to use {{context.template}} In addition to that with template.new you should not overwrite: render, the function that renders a view, obviously ;-) You should also not {(view.html)} recursively: Lua template.render ""view.html"" view.html {(view.html)} You can load templates from ""sub-directories"" as well with {(syntax)}: view.html {(users/list.html)} Also note that you can provide template either as a file path or as a string. If the file exists, it will be used, otherwise the string is used. See also template.load. Installation Just place template.lua somewhere in your package.path, preferably under resty directory. If you are using OpenResty, the default location would be /usr/local/openresty/lualib/resty. Using LuaRocks or MoonRocks If you are using LuaRocks >= 2.2: $ luarocks install lua-resty-template If you are using LuaRocks < 2.2: $ luarocks install --server=http://rocks.moonscript.org moonrocks $ moonrocks install lua-resty-template MoonRocks repository for lua-resty-template is located here: https://rocks.moonscript.org/modules/bungle/lua-resty-template. Nginx / OpenResty Configuration When lua-resty-template is used in context of Nginx / OpenResty there are a few configuration directives that you need to be aware: template_root (set $template_root /var/www/site/templates) template_location (set $template_location /templates) If none of these are set in Nginx configuration, ngx.var.document_root (aka root-directive) value is used. If template_location is set, it will be used first, and if the location returns anything but 200 as a status code, we do fallback to either template_root (if defined) or document_root. Using document_root This one tries to load file content with Lua code from html directory (relative to Nginx prefix). http {   server {     location / {       root html;       content_by_lua '         local template = require ""resty.template""         template.render(""view.html"", { message = ""Hello, World!"" })       ';           }   } } Using template_root This one tries to load file content with Lua code from /usr/local/openresty/nginx/html/templates directory. http {   server {     set $template_root /usr/local/openresty/nginx/html/templates;     location / {       root html;       content_by_lua '         local template = require ""resty.template""         template.render(""view.html"", { message = ""Hello, World!"" })       ';           }   } } Using template_location This one tries to load content with ngx.location.capture from /templates location (in this case this is served with ngx_static module). http {   server {     set $template_location /templates;     location / {       root html;       content_by_lua '         local template = require ""resty.template""         template.render(""view.html"", { message = ""Hello, World!"" })       ';           }     location /templates {       internal;       alias html/templates/;     }       } } See also template.load. Lua API boolean template.caching(boolean or nil) This function enables or disables template caching, or if no parameters are passed, returns current state of template caching. By default template caching is enabled, but you may want to disable it on development or low-memory situations. local template = require ""resty.template""    -- Get current state of template caching local enabled = template.caching() -- Disable template caching template.caching(false) -- Enable template caching template.caching(true) Please note that if the template was already cached when compiling a template, the cached version will be returned. You may want to flush cache with template.cache = {} to ensure that your template really gets recompiled. table template.new(view, layout) Creates a new template instance that is used as a (default) context when rendered. A table that gets created has only one method render, but the table also has metatable with __tostring defined. See the example below. Both view and layout arguments can either be strings or file paths, but layout can also be a table created previously with template.new. local view = template.new""template.html""              -- or local view = template.new(""view.html"", ""layout.html"") -- or local view = template.new[[<h1>{{message}}</h1>]]     -- or local view = template.new([[<h1>{{message}}</h1>]], [[ <html> <body>   {*view*} </body> </html> ]]) Example local template = require ""resty.template"" local view = template.new""view.html"" view.message  = ""Hello, World!"" view:render() -- You may also replace context on render view:render{ title = ""Testing lua-resty-template"" } -- If you want to include view context in  replacement context view:render(setmetatable({ title = ""Testing lua-resty-template"" }, { __index = view })) -- To get rendered template as a string, you can use tostring local result = tostring(view) function, boolean template.compile(view, key, plain) Parses, compiles and caches (if caching is enabled) a template and returns the compiled template as a function that takes context as a parameter and returns rendered template as a string. Optionally you may pass key that is used as a cache key. If cache key is not provided view wil be used as a cache key. If cache key is no-cache the template cache will not be checked and the resulting function will not be cached. You may also optionally pass plain with a value of true if the view is plain text string (this will skip template.load and binary chunk detection in template.parse phase). local func = template.compile(""template.html"")          -- or local func = template.compile([[<h1>{{message}}</h1>]]) Example local template = require ""resty.template"" local func     = template.compile(""view.html"") local world    = func{ message = ""Hello, World!"" } local universe = func{ message = ""Hello, Universe!"" } print(world, universe) Also note the second return value which is a boolean. You may discard it, or use it to determine if the returned function was cached. template.render(view, context, key, plain) Parses, compiles, caches (if caching is enabled) and outputs template either with ngx.print if available, or print. You may optionally also pass key that is used as a cache key. If plain evaluates to true, the view is considered to be plain string template (template.load and binary chunk detection is skipped on template.parse). template.render(""template.html"", { message = ""Hello, World!"" })          -- or template.render([[<h1>{{message}}</h1>]], { message = ""Hello, World!"" }) Example local template = require ""resty.template"" template.render(""view.html"", { message = ""Hello, World!"" }) template.render(""view.html"", { message = ""Hello, Universe!"" }) string template.parse(view, plain) Parses template file or string, and generates a parsed template string. This may come useful when debugging templates. You should note that if you are trying to parse a binary chunk (e.g. one returned with template.compile), template.parse will return that binary chunk as is. If optional parameter plain evaluates to true, the view is considered to be plain string, and the template.load and binary chunk detection is skipped. local t1 = template.parse(""template.html"") local t2 = template.parse([[<h1>{{message}}</h1>]]) string template.precompile(view, path, strip) Precompiles template as a binary chunk. This binary chunk can be written out as a file (and you may use it directly with Lua's load and loadfile). For convenience you may optionally specify path argument to output binary chunk to file. You may also supply strip parameter with value of false to make precompiled templates to have debug information as well (defaults to true). local view = [[ <h1>{{title}}</h1> <ul> {% for _, v in ipairs(context) do %}     <li>{{v}}</li> {% end %} </ul>]]  local compiled = template.precompile(view)  local file = io.open(""precompiled-bin.html"", ""wb"") file:write(compiled) file:close()  -- Alternatively you could just write (which does the same thing as above) template.precompile(view, ""precompiled-bin.html"")  template.render(""precompiled-bin.html"", {     title = ""Names"",     ""Emma"", ""James"", ""Nicholas"", ""Mary"" }) template.load This field is used to load templates. template.parse calls this function before it starts parsing the template (assuming that optional plain argument in template.parse evaluates false (the default). By default there are two loaders in lua-resty-template: one for Lua and the other for Nginx / OpenResty. Users can overwrite this field with their own function. For example you may want to write a template loader function that loads templates from a database. Default template.load for Lua (attached as template.load when used directly with Lua): local function load_lua(path)     -- read_file tries to open file from path, and return its content.     return read_file(path) or path end Default template.load for Nginx / OpenResty (attached as template.load when used in context of Nginx / OpenResty): local function load_ngx(path)     local file, location = path, ngx.var.template_location     if file:sub(1)  == ""/"" then file = file:sub(2) end     if location and location ~= """" then         if location:sub(-1) == ""/"" then location = location:sub(1, -2) end         local res = ngx.location.capture(location .. '/' .. file)         if res.status == 200 then return res.body end     end     local root = ngx.var.template_root or ngx.var.document_root     if root:sub(-1) == ""/"" then root = root:sub(1, -2) end     -- read_file tries to open file from path, and return its content.     return read_file(root .. ""/"" .. file) or path end As you can see, lua-resty-template always tries (by default) to load a template from a file (or with ngx.location.capture) even if you provided template as a string. lua-resty-template. But if you know that your templates are always strings, and not file paths, you may use plain argument in template.compile, template.render, and template.parse OR replace template.load with the simplest possible template loader there is (but be aware that if your templates use {(file.html)} includes, those are considered as strings too, in this case file.html will be the template string that is parsed) - you could also setup a loader that finds templates in some database system, e.g. Redis: local template = require ""resty.template"" template.load = function(s) return s end template.print This field contains a function that is used on template.render() or template.new(""example.html""):render() to output the results. By default this holds either ngx.print (if available) or print. You may want to (and are allowed to) overwrite this field, if you want to use your own output function instead. This is also useful if you are using some other framework, e.g. Turbo.lua (http://turbolua.org/). local template = require ""resty.template""  template.print = function(s)   print(s)   print(""<!-- Output by My Function -->"") end Template Precompilation lua-resty-template supports template precompilation. This can be useful when you want to skip template parsing (and Lua interpretation) in production or if you do not want your templates distributed as plain text files on production servers. Also by precompiling, you can ensure that your templates do not contain something, that cannot be compiled (they are syntactically valid Lua). Although templates are cached (even without precompilation), there are some perfomance (and memory) gains. You could integrate template precompilation in your build (or deployment) scripts (maybe as Gulp, Grunt or Ant tasks). Precompiling template, and output it as a binary file local template = require ""resty.template"" local compiled = template.precompile(""example.html"", ""example-bin.html"") Load precompiled template file, and run it with context parameters local template = require ""resty.template"" template.render(""example-bin.html"", { ""Jack"", ""Mary"" }) Template Helpers While lua-resty-template does not have much infrastucture or ways to extend it, you still have a few possibilities that you may try. Adding methods to global string, and table types (not encouraged, though) Wrap your values with something before adding them in context (e.g. proxy-table) Create global functions Add local functions either to template table or context table Use metamethods in your tables While modifying global types seems convenient, it can have nasty side effects. That's why I suggest you to look at these libraries, and articles first: Method Chaining Wrapper (http://lua-users.org/wiki/MethodChainingWrapper) Moses (https://github.com/Yonaba/Moses) underscore-lua (https://github.com/jtarchie/underscore-lua) You could for example add Moses' or Underscore's _ to template table or context table. Example local _ = require ""moses"" local template = require ""resty.template"" template._ = _ Then you can use _ inside your templates. I created one example template helper that can be found from here: https://github.com/bungle/lua-resty-template/blob/master/lib/resty/template/html.lua Lua local template = require ""resty.template"" local html = require ""resty.template.html""  template.render([[ <ul> {% for _, person in ipairs(context) do %}     {*html.li(person.name)*} {% end %} </ul> <table> {% for _, person in ipairs(context) do %}     <tr data-sort=""{{(person.name or """"):lower()}}"">         {*html.td{ id = person.id }(person.name)*}     </tr> {% end %} </table>]], {     { id = 1, name = ""Emma""},     { id = 2, name = ""James"" },     { id = 3, name = ""Nicholas"" },     { id = 4 } }) Output <ul>     <li>Emma</li>     <li>James</li>     <li>Nicholas</li>     <li /> </ul> <table>     <tr data-sort=""emma"">         <td id=""1"">Emma</td>     </tr>     <tr data-sort=""james"">         <td id=""2"">James</td>     </tr>     <tr data-sort=""nicholas"">         <td id=""3"">Nicholas</td>     </tr>     <tr data-sort="""">         <td id=""4"" />     </tr> </table> Usage Examples Template Including You may include templates inside templates with {(template)} and {(template, context)} syntax. The first one uses the current context as a context for included template, and the second one replaces it with a new context. Here is example of using includes and passing a different context to include file: Lua local template = require ""resty.template"" template.render(""include.html"", { users = {     { name = ""Jane"", age = 29 },     { name = ""John"", age = 25 } }}) include.html <html> <body> <ul> {% for _, user in ipairs(users) do %}     {(user.html, user)} {% end %} </ul> </body> </html> user.html <li>User {{name}} is of age {{age}}</li> Outut <html> <body> <ul>     <li>User Jane is of age 29</li>     <li>User John is of age 25</li> </ul> </body> </html> Views with Layouts Layouts (or Master Pages) can be used to wrap a view inside another view (aka layout). Lua local template = require ""resty.template"" local layout   = template.new ""layout.html"" layout.title   = ""Testing lua-resty-template"" layout.view    = template.compile ""view.html"" { message = ""Hello, World!"" } layout:render() -- Or like this template.render(""layout.html"", {   title = ""Testing lua-resty-template"",   view  = template.compile ""view.html"" { message = ""Hello, World!"" } }) -- Or maybe you like this style more -- (but please remember that context.view is overwritten on rendering the layout.html) local view     = template.new(""view.html"", ""layout.html"") view.title     = ""Testing lua-resty-template"" view.message   = ""Hello, World!"" view:render() -- Well, maybe like this then? local layout   = template.new ""layout.html"" layout.title   = ""Testing lua-resty-template"" local view     = template.new(""view.html"", layout) view.message   = ""Hello, World!"" view:render() view.html <h1>{{message}}</h1> layout.html <!DOCTYPE html> <html> <head>     <title>{{title}}</title> </head> <body>     {*view*} </body> </html> Alternatively you can define the layout in a view as well: Lua local view     = template.new(""view.html"", ""layout.html"") view.title     = ""Testing lua-resty-template"" view.message   = ""Hello, World!"" view:render() view.html {% layout=""section.html"" %} <h1>{{message}}</h1> section.html <div id=""section"">     {*view*} </div> layout.html <!DOCTYPE html> <html> <head>     <title>{{title}}</title> </head> <body>     {*view*} </body> </html> Output <!DOCTYPE html> <html> <head>     <title>Testing lua-resty-template</title> </head> <body> <div id=""section"">     <h1>Hello, World!</h1> </div> </body> </html> Using Blocks Blocks can be used to move different parts of the views to specific places in layouts. Layouts have placeholders for blocks. Lua local view     = template.new(""view.html"", ""layout.html"") view.title     = ""Testing lua-resty-template blocks"" view.message   = ""Hello, World!"" view.keywords  = { ""test"", ""lua"", ""template"", ""blocks"" } view:render() view.html <h1>{{message}}</h1> {-aside-} <ul>     {% for _, keyword in ipairs(keywords) do %}     <li>{{keyword}}</li>     {% end %} </ul> {-aside-} layout.html <!DOCTYPE html> <html> <head> <title>{*title*}</title> </head> <body> <article>     {*view*} </article> {% if blocks.aside then %} <aside>     {*blocks.aside*} </aside> {% end %} </body> </html> Output <!DOCTYPE html> <html> <head> <title>Testing lua-resty-template blocks</title> </head> <body> <article>     <h1>Hello, World!</h1> </article> <aside>     <ul>         <li>test</li>         <li>lua</li>         <li>template</li>         <li>blocks</li>     </ul> </aside> </body> </html> Grandfather-Father-Son Inheritance Say you have base.html, layout1.html, layout2.html and page.html. You want an inheritance like this: base.html ➡ layout1.html ➡ page.html or base.html ➡ layout2.html ➡ page.html (actually this nesting is not limited to three levels). Lua local res = require""resty.template"".compile(""page.html""){} base.html <html lang='zh'>    <head>    <link href=""css/bootstrap.min.css"" rel=""stylesheet"">    {* blocks.page_css *}    </head>    <body>    {* blocks.main *}    <script src=""js/jquery.js""></script>    <script src=""js/bootstrap.min.js""></script>    {* blocks.page_js *}    </body> </html> layout1.html {% layout = ""base.html"" %} {-main-}     <div class=""sidebar-1"">       {* blocks.sidebar *}     </div>     <div class=""content-1"">       {* blocks.content *}     </div> {-main-} layout2.html {% layout = ""base.html"" %} {-main-}     <div class=""sidebar-2"">       {* blocks.sidebar *}     </div>     <div class=""content-2"">       {* blocks.content *}     </div>     <div>I am different from layout1 </div> {-main-} page.html {% layout = ""layout1.html"" %} {-sidebar-}   this is sidebar {-sidebar-}  {-content-}   this is content {-content-}  {-page_css-}   <link href=""css/page.css"" rel=""stylesheet""> {-page_css-}  {-page_js-}   <script src=""js/page.js""></script> {-page_js-} Or: page.html {% layout = ""layout2.html"" %} {-sidebar-}   this is sidebar {-sidebar-}  {-content-}   this is content {-content-}  {-page_css-}   <link href=""css/page.css"" rel=""stylesheet""> {-page_css-}  {-page_js-}   <script src=""js/page.js""></script> {-page_js-} Macros @DDarko mentioned in an issue #5 that he has a use case where he needs to have macros or parameterized views. That is a nice feature that you can use with lua-resty-template. To use macros, let's first define some Lua code: template.render(""macro.html"", {     item = ""original"",     items = { a = ""original-a"", b = ""original-b"" }  }) And the macro-example.html: {% local string_macro = [[ <div>{{item}}</div> ]] %} {* template.compile(string_macro)(context) *} {* template.compile(string_macro){ item = ""string-macro-context"" } *} This will output: <div>original</div> <div>string-macro-context</div> Now let's add function macro, in macro-example.html (you can omit local if you want): {% local function_macro = function(var, el)     el = el or ""div""     return ""<"" .. el .. "">{{"" .. var .. ""}}</"" .. el .. "">\n"" end %}  {* template.compile(function_macro(""item""))(context) *} {* template.compile(function_macro(""a"", ""span""))(items) *} This will output: <div>original</div> <span>original-a</span> But this is even more flexible, let's try another function macro: {% local function function_macro2(var)     return template.compile(""<div>{{"" .. var .. ""}}</div>\n"") end %} {* function_macro2 ""item"" (context) *} {* function_macro2 ""b"" (items) *} This will output: <div>original</div> <div>original-b</div> And here is another one: {% function function_macro3(var, ctx)     return template.compile(""<div>{{"" .. var .. ""}}</div>\n"")(ctx or context) end %} {* function_macro3(""item"") *} {* function_macro3(""a"", items) *} {* function_macro3(""b"", items) *} {* function_macro3(""b"", { b = ""b-from-new-context"" }) *} This will output: <div>original</div> <div>original-a</div> <div>original-b</div> <div>b-from-new-context</div> Macros are really flexible. You may have form-renderers and other helper-macros to have a reusable and parameterized template output. One thing you should know is that inside code blocks (between {% and %}) you cannot have %}, but you can work around this using string concatenation ""%"" .. ""}"". Calling Methods in Templates You can call string methods (or other table functions) in templates too. Lua local template = require ""resty.template"" template.render([[ <h1>{{header:upper()}}</h1> ]], { header = ""hello, world!"" }) Output <h1>HELLO, WORLD!</h1> Embedding Angular or other tags / templating inside the Templates Sometimes you need to mix and match other templates (say client side Javascript templates like Angular) with server side lua-resty-templates. Say you have this kind of Angular template: <html ng-app>  <body ng-controller=""MyController"">    <input ng-model=""foo"" value=""bar"">    <button ng-click=""changeFoo()"">{{buttonText}}</button>    <script src=""angular.js"">  </body> </html> Now you can see that there is {{buttonText}} that is really for Angular templating, and not for lua-resty-template. You can fix this by wrapping either the whole code with {-verbatim-} or {-raw-} or only the parts that you want: {-raw-} <html ng-app>  <body ng-controller=""MyController"">    <input ng-model=""foo"" value=""bar"">    <button ng-click=""changeFoo()"">{{buttonText}}</button>    <script src=""angular.js"">  </body> </html> {-raw-} or (see the {(head.html)} is processed by lua-resty-template): <html ng-app>  {(head.html)}  <body ng-controller=""MyController"">    <input ng-model=""foo"" value=""bar"">    <button ng-click=""changeFoo()"">{-raw-}{{buttonText}}{-raw-}</button>    <script src=""angular.js"">  </body> </html> You may also use short escaping syntax (currently implemented in development version: ... <button ng-click=""changeFoo()"">\{{buttonText}}</button> ... Embedding Markdown inside the Templates If you want to embed Markdown (and SmartyPants) syntax inside your templates you can do it by using for example lua-resty-hoedown (it depends on LuaJIT). Here is an example of using that: Lua local template = require ""resty.template"" template.markdown = require ""resty.hoedown""  template.render[=[ <html> <body> {*markdown[[ #Hello, World  Testing Markdown. ]]*} </body> </html> ]=] Output <html> <body> <h1>Hello, World</h1>  <p>Testing Markdown.</p> </body> </html> You may also add config parameters that are documented in lua-resty-hoedown project. Say you want also to use SmartyPants: Lua local template = require ""resty.template"" template.markdown = require ""resty.hoedown""  template.render[=[ <html> <body> {*markdown([[ #Hello, World  Testing Markdown with ""SmartyPants""... ]], { smartypants = true })*} </body> </html> ]=] Output <html> <body> <h1>Hello, World</h1>  <p>Testing Markdown with &ldquo;SmartyPants&rdquo;&hellip;</p> </body> </html> You may also want to add caching layer for your Markdowns, or a helper functions instead of placing Hoedown library directly as a template helper function in template. Lua Server Pages (LSP) with OpenResty Lua Server Pages or LSPs is similar to traditional PHP or Microsoft Active Server Pages (ASP) where you can just place source code files in your document root (of your web server) and have them processed by compilers of the respective languages (PHP, VBScript, JScript, etc.). You can emulate quite closely this, sometimes called spaghetti-style of develoment, easily with lua-resty-template. Those that have been doing ASP.NET Web Forms development, know a concept of Code Behind files. There is something similar, but this time we call it Layout in Front here (you may include Lua modules with normal require calls if you wish in LSPs). To help you understand the concepts, let's have a small example: nginx.conf: http {   init_by_lua '     require ""resty.core""     template = require ""resty.template""     template.caching(false); -- you may remove this on production   ';   server {     location ~ \.lsp$ {       default_type text/html;       content_by_lua 'template.render(ngx.var.uri)';     }   } } The above configuration creates a global template variable in Lua environment (you may not want that). We also created location to match all .lsp files (or locations), and then we just render the template. Let's imagine that the request is for index.lsp. index.lsp {% layout = ""layouts/default.lsp"" local title = ""Hello, World!"" %} <h1>{{title}}</h1> Here you can see that this file includes a little bit of a view (<h1>{{title}}</h1>) in addition to some Lua code that we want to run. If you want to have a pure code file with Layout in Front, then just don't write any view code in this file. The layout variable is already defined in views as documented else where in this documentation. Now let's see the other files too. layouts/default.lsp <html> {(include/header.lsp)} <body> {*view*} </body> </html> Here we have a layout to decorate the index.lsp, but we also have include here, so let's look at it. include/header.lsp <head>   <title>Testing Lua Server Pages</title> </head> Static stuff here only. Output The final output will look like this: <html> <head>   <title>Testing Lua Server Pages</title> </head> <body>   <h1>Hello, World!</h1> </body> </html> As you can see, lua-resty-template can be quite flexibile and easy to start with. Just place files under your document root and use the normal save-and-refresh style of development. The server will automatically pick the new files and reload the templates (if the caching is turned of) on save. If you want to pass variables to layouts or includes you can add stuff to context table (in the example below see context.title): {% layout = ""layouts/default.lsp"" local title = ""Hello, World!"" context.title = 'My Application - ' .. title %} <h1>{{title}}</h1> FAQ How Do I Clear the Template Cache lua-resty-template automatically caches (if caching is enabled) the resulting template functions in template.cache table. You can clear the cache by issuing template.cache = {}. Where is lua-resty-template Used jd.com – Jingdong Mall (Chinese: 京东商城; pinyin: Jīngdōng Shāngchéng), formerly 360Buy, is a Chinese electronic commerce company Please let me know if there are errors or old information in this list. Alternatives You may also look at these (as alternatives, or to mix them with lua-resty-template): lemplate (https://github.com/openresty/lemplate) lua-resty-tags (https://github.com/bungle/lua-resty-tags) lua-resty-hoedown (https://github.com/bungle/lua-resty-hoedown) etlua (https://github.com/leafo/etlua) lua-template (https://github.com/dannote/lua-template) lua-resty-tmpl (https://github.com/lloydzhou/lua-resty-tmpl) (a fork of the lua-template) htmlua (https://github.com/benglard/htmlua) cgilua (http://keplerproject.github.io/cgilua/manual.html#templates) orbit (http://keplerproject.github.io/orbit/pages.html) turbolua mustache (http://turbolua.org/doc/web.html#mustache-templating) pl.template (http://stevedonovan.github.io/Penlight/api/modules/pl.template.html) lustache (https://github.com/Olivine-Labs/lustache) luvstache (https://github.com/james2doyle/luvstache) luaghetti (https://github.com/AterCattus/luaghetti) lub.Template (http://doc.lubyk.org/lub.Template.html) lust (https://github.com/weshoke/Lust) templet (http://colberg.org/lua-templet/) luahtml (https://github.com/TheLinx/LuaHTML) mixlua (https://github.com/LuaDist/mixlua) lutem (https://github.com/daly88/lutem) tirtemplate (https://github.com/torhve/LuaWeb/blob/master/tirtemplate.lua) cosmo (http://cosmo.luaforge.net/) lua-codegen (http://fperrad.github.io/lua-CodeGen/) groucho (https://github.com/hanjos/groucho) simple lua preprocessor (http://lua-users.org/wiki/SimpleLuaPreprocessor) slightly less simple lua preprocessor (http://lua-users.org/wiki/SlightlyLessSimpleLuaPreprocessor) ltp (http://www.savarese.com/software/ltp/) slt (https://code.google.com/p/slt/) slt2 (https://github.com/henix/slt2) luasp (http://luasp.org/) view0 (https://bitbucket.org/jimstudt/view0) leslie (https://code.google.com/p/leslie/) fraudster (https://bitbucket.org/sphen_lee/fraudster) lua-haml (https://github.com/norman/lua-haml) lua-template (https://github.com/tgn14/Lua-template) hige (https://github.com/nrk/hige) mod_pLua (https://sourceforge.net/p/modplua/wiki/Home/) lapis html generation (http://leafo.net/lapis/reference.html#html-generation) lua-resty-template was originally forked from Tor Hveem's tirtemplate.lua that he had extracted from Zed Shaw's Tir web framework (http://tir.mongrel2.org/). Thank you Tor, and Zed for your earlier contributions. Benchmarks There is a small microbenchmark located here: https://github.com/bungle/lua-resty-template/blob/master/lib/resty/template/microbenchmark.lua Lua local benchmark = require ""resty.template.microbenchmark"" benchmark.run() -- You may also pass iteration count (by default it is 1,000) benchmark.run(100) Here are some results from my laptop. Lua 5.1.5 Copyright (C) 1994-2012 Lua.org, PUC-Rio Running 1000 iterations in each test     Parsing Time: 0.015122 Compilation Time: 0.056889 (template) Compilation Time: 0.000283 (template cached)   Execution Time: 0.065662 (same template)   Execution Time: 0.007642 (same template cached)   Execution Time: 0.089193 (different template)   Execution Time: 0.012040 (different template cached)   Execution Time: 0.089345 (different template, different context)   Execution Time: 0.009352 (different template, different context cached)       Total Time: 0.345528  Lua 5.2.3 Copyright (C) 1994-2013 Lua.org, PUC-Rio Running 1000 iterations in each test     Parsing Time: 0.018174 Compilation Time: 0.057711 (template) Compilation Time: 0.000641 (template cached)   Execution Time: 0.073134 (same template)   Execution Time: 0.008268 (same template cached)   Execution Time: 0.073124 (different template)   Execution Time: 0.009122 (different template cached)   Execution Time: 0.076488 (different template, different context)   Execution Time: 0.010532 (different template, different context cached)       Total Time: 0.327194  Lua 5.3.0 Copyright (C) 1994-2015 Lua.org, PUC-Rio Running 1000 iterations in each test     Parsing Time: 0.018946 Compilation Time: 0.056762 (template) Compilation Time: 0.000529 (template cached)   Execution Time: 0.073199 (same template)   Execution Time: 0.007849 (same template cached)   Execution Time: 0.065949 (different template)   Execution Time: 0.008555 (different template cached)   Execution Time: 0.076584 (different template, different context)   Execution Time: 0.009687 (different template, different context cached)       Total Time: 0.318060  LuaJIT 2.0.2 -- Copyright (C) 2005-2013 Mike Pall. http://luajit.org/ Running 1000 iterations in each test     Parsing Time: 0.009124 Compilation Time: 0.029342 (template) Compilation Time: 0.000149 (template cached)   Execution Time: 0.035011 (same template)   Execution Time: 0.003697 (same template cached)   Execution Time: 0.066440 (different template)   Execution Time: 0.009159 (different template cached)   Execution Time: 0.062997 (different template, different context)   Execution Time: 0.005843 (different template, different context cached)       Total Time: 0.221762  LuaJIT 2.1.0-alpha -- Copyright (C) 2005-2014 Mike Pall. http://luajit.org/ Running 1000 iterations in each test     Parsing Time: 0.003742 Compilation Time: 0.028227 (template) Compilation Time: 0.000182 (template cached)   Execution Time: 0.034940 (same template)   Execution Time: 0.002974 (same template cached)   Execution Time: 0.067101 (different template)   Execution Time: 0.011551 (different template cached)   Execution Time: 0.071506 (different template, different context)   Execution Time: 0.007749 (different template, different context cached)       Total Time: 0.227972  resty (resty 0.01, nginx version: openresty/1.7.7.2) Running 1000 iterations in each test     Parsing Time: 0.003726 Compilation Time: 0.035392 (template) Compilation Time: 0.000112 (template cached)   Execution Time: 0.037252 (same template)   Execution Time: 0.003590 (same template cached)   Execution Time: 0.058258 (different template)   Execution Time: 0.009501 (different template cached)   Execution Time: 0.059082 (different template, different context)   Execution Time: 0.006612 (different template, different context cached)       Total Time: 0.213525  I have not yet compared the results against the alternatives. Changes The changes of every release of this module is recorded in CHANGES file. License lua-resty-template uses three clause BSD license (because it was originally forked from one that uses it). Copyright (c) 2016, Aapo Talvensaari All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  * Redistributions of source code must retain the above copyright notice, this   list of conditions and the following disclaimer.  * Redistributions in binary form must reproduce the above copyright notice, this   list of conditions and the following disclaimer in the documentation and/or   other materials provided with the distribution.  * Neither the name of the {organization} nor the names of its   contributors may be used to endorse or promote products derived from   this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bungle/lua-resty-template"	"Lua-oriented template engine for OpenResty, somewhat Jinja-like."	"true"
"Object-oriented Programming"	"30log"	"https://github.com/Yonaba/30log"	"Minimalist OOP library with basic classes, inheritance, and mixins in 30 lines."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"180"	"30"	"30"	"GitHub - Yonaba/30log: 30 lines library for object orientation in Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 30 Star 180 Fork 30 Yonaba/30log Code Issues 1 Pull requests 0 Wiki Pulse Graphs 30 lines library for object orientation in Lua http://yonaba.github.io/30log 169 commits 3 branches 11 releases 6 contributors Lua 90.7% Shell 9.3% Lua Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags clone-feature gh-pages master Nothing to show 30log-1.0.0-1 30log-0.9.1-1 30log-0.9.0-1 30log-0.8.0-1 30log-0.7.0-1 30log-0.6.0-1 30log-0.5.0-1 30log-0.4.1 30log-0.4-0 30log-0.3-0 30log-0.2-1 Nothing to show New pull request Latest commit 25dd21c Mar 6, 2016 Yonaba Testing 30log-clean implementation Permalink Failed to load latest commit information. .travis Fixing Travis Integration Jan 3, 2016 rockspecs Updated 1.0.0 rockspec Jan 9, 2015 specs Testing 30log-clean implementation Mar 6, 2016 .gitignore Exclude luacov files Jan 5, 2016 .luacov Exclude 30log-global from code coverage Jan 19, 2016 .travis.yml Exclude 30log-* files from code coverage Jan 19, 2016 30log-clean.lua Fixes class attributes deep copy in instances (fixes #27) Jan 19, 2016 30log-global.lua Fixes class attributes deep copy in instances (fixes #27) Jan 19, 2016 30log-singleton.lua Moved Readme contents to the wiki Jan 14, 2016 30log.lua Fixes class attributes deep copy in instances (fixes #27) Jan 19, 2016 LICENSE Updated LICENSE Jan 9, 2015 README.md Updated README Jan 14, 2016 version_history.md Updated version history Jan 9, 2015 README.md 30log 30log, in extenso 30 Lines Of Goodness is a minified framework for object-orientation in Lua. It provides named and unnamed classes, single inheritance, metamethods and a basic support for mixins. In 30 lines. No less, no more. 30log was written with Lua 5.1 in mind, but is compatible with Lua 5.2, Lua 5.3 and LuaJIT. Download Archive Current release is 1.0.0. See other releases. Bash This will clone the repository, as-is, and deliver the cutting edge release. Might be unstable. git clone git://github.com/Yonaba/30log.git  LuaRocks This will download and install the latest stable release from Luarocks servers. luarocks install 30log  Documentation Find the project page at yonaba.github.io/30log. A full documentation is available on the wiki. Class-Commons support Class-Commons is an interface that provides a common API for a wide range of object orientation libraries in Lua. There is a small plugin, originally written by TsT which provides compatibility between 30log and Class-commons. See here: 30logclasscommons. Specification You can run the included specs with Telescope using the following command from Lua from the root foolder: lua tsc -f specs/*  About the source 30log-clean.lua 30log was initially designed for minimalistic purposes. But then commit after commit, I came up with a source code that was obviously surpassing 30 lines. As I wanted to stick to the ""30-lines"" rule that defines the name of this library, I had to use an ugly syntax which not much elegant, yet 100 % functional. For those who might be interested though, the file 30logclean.lua contains the full source code, properly formatted and well indented for your perusal. 30log-global.lua The file 30logglobal.lua features the exact same source as the original 30log.lua, excepts that it sets a global named class. This is convenient for Lua-based frameworks such as Codea. Contributors TsT2005, for the original Class-commons support. License This work is MIT-Licensed. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Yonaba/30log"	"Minimalist OOP library with basic classes, inheritance, and mixins in 30 lines."	"true"
"Object-oriented Programming"	"middleclass"	"https://github.com/kikito/middleclass"	"Simple but robust OOP library with inheritance, methods, metamethods, class variables and mixins."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"697"	"78"	"84"	"GitHub - kikito/middleclass: Object-orientation for Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 78 Star 697 Fork 84 kikito/middleclass Code Issues 0 Pull requests 0 Wiki Pulse Graphs Object-orientation for Lua https://github.com/kikito/middleclass 209 commits 9 branches 12 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0 3.0 copymethods lua_5_3 lua_52_compat luacheck master mpeterv-stubless-metamethods v4.0 Nothing to show v4.1.0 v4.0.0 v3.2.0 v3.1.0 v3.0.0 3.0.1 2.0 1.4 1.3 1.2 1.1 1.0 Nothing to show New pull request Latest commit 27a64f1 Jul 2, 2016 kikito updates rockspec Permalink Failed to load latest commit information. performance fixed perf tests Sep 18, 2013 rockspecs updates rockspec Jul 2, 2016 spec simplifies isInstanceOf & isSubclassOf. Fixes #39 Jul 2, 2016 .travis.yml fixes luacheck errors Jan 2, 2016 CHANGELOG.md bump version to 4.1.0 Jul 2, 2016 MIT-LICENSE.txt changed from BSD to MIT license Sep 19, 2011 README.md restores :allocate and adds more documentation Dec 31, 2015 UPDATING.md Update UPDATING.md Mar 20, 2016 middleclass.lua bump version to 4.1.0 Jul 2, 2016 README.md middleclass A simple OOP library for Lua. It has inheritance, metamethods (operators), class variables and weak mixin support. Quick Look local class = require 'middleclass'  local Fruit = class('Fruit') -- 'Fruit' is the class' name  function Fruit:initialize(sweetness)   self.sweetness = sweetness end  Fruit.static.sweetness_threshold = 5 -- class variable (also admits methods)  function Fruit:isSweet()   return self.sweetness > Fruit.sweetness_threshold end  local Lemon = class('Lemon', Fruit) -- subclassing  function Lemon:initialize()   Fruit.initialize(self, 1) -- invoking the superclass' initializer end  local lemon = Lemon:new()  print(lemon:isSweet()) -- false Documentation See the github wiki page for examples & documentation. You can read the CHANGELOG.md file to see what has changed on each version of this library. If you need help updating to a new middleclass version, read UPDATING.md. Installation Just copy the middleclass.lua file wherever you want it (for example on a lib/ folder). Then write this in any Lua file where you want to use it: local class = require 'middleclass' Specs This project uses busted for its specs. If you want to run the specs, you will have to install it first. Then just execute the following: cd /folder/where/the/spec/folder/is busted Performance tests Middleclass also comes with a small performance test suite. Just run the following command: lua performance/run.lua License Middleclass is distributed under the MIT license. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kikito/middleclass"	"Simple but robust OOP library with inheritance, methods, metamethods, class variables and mixins."	"true"
"Filesystem and OS"	"LuaFileSystem"	"http://keplerproject.github.io/luafilesystem/"	"Extends and complements Lua's built-in set of filesystem functions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"233"	"52"	"113"	"GitHub - keplerproject/luafilesystem: LuaFileSystem is a Lua library developed to complement the set of functions related to file systems offered by the standard Lua distribution. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 52 Star 233 Fork 113 keplerproject/luafilesystem Code Issues 12 Pull requests 2 Pulse Graphs LuaFileSystem is a Lua library developed to complement the set of functions related to file systems offered by the standard Lua distribution. http://keplerproject.github.com/luafilesystem 298 commits 5 branches 15 releases 18 contributors C 80.9% Lua 17.7% Makefile 1.4% C Lua Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.7 2.0 gh-pages master symlink_target Nothing to show v_1_6_3 v1_6_2 v1.5.0 v1_4_2 v1_4_1 v1_4_0 v1_3_0 v1_2_1 v1_2_0 v1_1_0 v1_0 v1_0b start V1_4_1RC1 Root_rel_1_2_x Nothing to show New pull request Latest commit 080f74f Jun 30, 2016 mpeterv Fix anchor names in documentation Permalink Failed to load latest commit information. doc/us Fix anchor names in documentation Jun 30, 2016 rockspecs Prepare for release 1.6.3 Jan 15, 2015 src Fix export of luaopen_lfs on Windows (#74) Jun 1, 2016 tests Add a test for #52. Jun 9, 2016 vc6 version update Mar 15, 2006 .gitignore add build artefact to .gitignore Apr 30, 2016 .travis.yml Use hererocks for Travis-CI May 3, 2016 LICENSE Add top-level LICENSE file. Closes #33. Jan 29, 2014 Makefile Delete $(CFLAGS). May 4, 2016 Makefile.win Packaging version 1.4.1 May 7, 2008 README.md Adds badges [ci skip] Jan 21, 2016 appveyor.yml Use hererocks for Appveyor May 3, 2016 config Using a default prefix for the Makefile Oct 27, 2007 config.win fixing config.win Mar 25, 2008 README.md LuaFileSystem - File System Library for Lua Copyright 2003-2016 Kepler Project http://keplerproject.github.io/luafilesystem Description LuaFileSystem is a Lua library developed to complement the set of functions related to file systems offered by the standard Lua distribution. LuaFileSystem offers a portable way to access the underlying directory structure and file attributes. LuaFileSystem is free software and uses the same license as Lua 5.1 LuaRocks Installation luarocks install luafilesystem  Documentation Please check the documentation at doc/us/ for more information. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/keplerproject/luafilesystem"	"Extends and complements Lua's built-in set of filesystem functions."	"true"
"Filesystem and OS"	"luaposix"	"https://github.com/luaposix/luaposix"	"Bindings for POSIX APIs, including curses."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"196"	"21"	"69"	"GitHub - luaposix/luaposix: Lua bindings for POSIX APIs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 196 Fork 69 luaposix/luaposix Code Issues 15 Pull requests 2 Pulse Graphs Lua bindings for POSIX APIs http://luaposix.github.io/luaposix 889 commits 7 branches 52 releases Fetching contributors C 46.8% Shell 38.4% Lua 11.4% Makefile 2.2% M4 1.2% C Shell Lua Makefile M4 Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fdopen gh-pages master popen release remove-execx-string-args remove-pipeline Nothing to show v33.4.0 v33.3.1 v33.3.0 v33.2.1 v33.2.0 v33.0.0 v32 v31 v30 v29 v5.1.28 v5.1.27 v5.1.26 v5.1.25 v5.1.24 v5.1.23 v5.1.22 v5.1.21 v5.1.20 v5.1.19 v5.1.18 v5.1.17 v5.1.16 v5.1.15 v5.1.14 v5.1.13 v5.1.11 v5.1.10 v5.1.9 v5.1.8 v5.1.7 v5.1.6 v5.1.5 v5.1.4 start release-v33.4.0 release-v33.3.1 release-v33.3.0 release-v33.2.1 release-v33.2.0 release-v33.1.0 release-v33.0.0 release-v32 release-v31 release-v30 release-v29 release-v5.1.28 release-v5.1.27 release-v5.1.26 release-v5.1.25 release-v5.1.24 rel-5-1-12 Nothing to show New pull request Latest commit 4f6aca0 May 21, 2016 gvvaughan Merge pull request #246 from hishamhm/master … Add support for _SC_PAGESIZE to unistd.sysconf() Permalink Failed to load latest commit information. build-aux getopt: support only POSIX getopt(3), not GNU getopt_long(3). Apr 9, 2016 examples getopt: support only POSIX getopt(3), not GNU getopt_long(3). Apr 9, 2016 ext Add support for _SC_PAGESIZE to unistd.sysconf() May 20, 2016 lib Add support for _SC_PAGESIZE to unistd.sysconf() May 20, 2016 slingshot slingshot: sync with upstream for faster bootstrap. Mar 6, 2016 specs Add support for _SC_PAGESIZE to unistd.sysconf() May 20, 2016 .gitignore gnulib: remove. Feb 24, 2016 .prev-version maint: post-release administrivia. Feb 27, 2016 .slackid slingshot: synch with upstream, for slack integrations. Aug 26, 2014 .travis.yml gnulib: remove. Feb 24, 2016 .x-update-copyright maint: move curses APIs back into their own library. Jan 23, 2016 AUTHORS maint: move curses APIs back into their own library. Jan 23, 2016 COPYING maint: bump copyright years. Jan 6, 2016 ChangeLog.old Update Github URL. Sep 7, 2012 NEWS.md getopt: support only POSIX getopt(3), not GNU getopt_long(3). Apr 9, 2016 README.md maint: move curses APIs back into their own library. Jan 23, 2016 bootstrap slingshot: sync with upstream for faster bootstrap. Mar 6, 2016 bootstrap.conf gnulib: remove. Feb 24, 2016 configure.ac gnulib: remove. Feb 24, 2016 local.mk getopt: support only POSIX getopt(3), not GNU getopt_long(3). Apr 9, 2016 luaposix-git-1.rockspec maint: move curses APIs back into their own library. Jan 23, 2016 rockspec.conf maint: move curses APIs back into their own library. Jan 23, 2016 README.md luaposix By the luaposix project This is a POSIX binding for LuaJIT, Lua 5.1, 5.2 and 5.3; like most libraries it simply binds to C APIs on the underlying system, so it won't work on non-POSIX systems. However, it does try to detect the level of POSIX conformance of the underlying system and bind only available APIs. luaposix is released under the MIT license (the same license as Lua itsef). There is no warranty. Installation The simplest and best way to install luaposix is with LuaRocks. To install the latest release (recommended):     luarocks install luaposix To install current git master (for testing, before submitting a bug report for example):     luarocks install http://raw.github.com/luaposix/luaposix/release/luaposix-git-1.rockspec The best way to install without LuaRocks, is to download a github release tarball and follow the instructions in the included INSTALL fill. Even if you are repackaging or redistributing luaposix, this is by far the most straight forward place to begin. Note that you'll be responsible for providing dependencies if you choose not to let LuaRocks handle them for you, though you can find a list of the minimal dependencies in the rockspec.conf file. It is also possible to perform a complete bootstrap of the master development branch, although this branch is unstable, and sometimes breaks subtly, or does not build at all, or provides experimental new APIs that end up being removed prior to the next official release. Unfortunately, we don't have time to provide support for taking this most difficult and dangerous option. It is presumed that you already know enough to be aware of what you are getting yourself into - however, there are full logs of complete bootstrap builds in Travis after every commit, that you can examine if you get stuck. Also, the bootstrap script tries very hard to tell you why it is unhappy and, sometimes, even how to fix things before trying again. Use The library is split into submodules according to the POSIX header file API declarations, which you can require individually:     local unistd = require ""posix.unistd"" The authoritative online POSIX reference is published at SUSv3. Documentation The latest release of this library is documented in LDoc. Pre-built HTML files are included in the release, and contain links to the appropriate SUSv3 manual pages. Example code See the example program tree.lua, along with the many small examples in the generated documentation and BDD specs/*_spec.yaml. For a complete application, see the GNU Zile. Bugs reports and code contributions These libraries are maintained by their users. Please make bug reports and suggestions as GitHub issues. Pull requests are especially appreciated. But first, please check that you issue has not already been reported by someone else, and that it is not already fixed by master in preparation for the next release (See Installation section above for how to temporarily install master with LuaRocks). There is no strict coding style, but please bear in mind the following points when proposing changes: Follow existing code. There are a lot of useful patterns and avoided traps there. 8-character indentation using TABs in C sources; 2-character indentation using SPACEs in Lua sources. No non-POSIX APIs; no platform-specific code. When wrapping APIs introduced in POSIX 2001 or later, add an appropriate #if. If your platform isn't quite POSIX, you may find a gnulib module to bridge the gap. If absolutely necessary, use autoconf feature tests. Thin wrappers: although some existing code contradicts this, wrap POSIX APIs in the simplest way possible. If necessary, more convenient wrappers can be added in Lua (posix.lua). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/luaposix/luaposix"	"Bindings for POSIX APIs, including curses."	"true"
"Time and Date"	"LuaDate"	"https://github.com/Tieske/date"	"Date and time module with parsing, formatting, addition/subtraction, localization, and ISO 8601 support."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"71"	"9"	"17"	"GitHub - Tieske/date: Date & Time module for Lua 5.x Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 71 Fork 17 Tieske/date Code Issues 1 Pull requests 2 Pulse Graphs Date & Time module for Lua 5.x http://tieske.github.io/date/ 41 commits 3 branches 5 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages ldoc master Nothing to show version_2.1.2 version_2.1.1 version_2.1 version_2.0 version_1.0 Nothing to show New pull request Latest commit 35b63cd Nov 13, 2015 Tieske rockspec version update Permalink Failed to load latest commit information. doc fixed some documentation typos Jun 8, 2014 samples added tests: collected samples from documentation into a test file Sep 14, 2013 spec seconds including fraction used scientific notation if less then 1e-4 Nov 5, 2015 .busted Added a whole bunch of tests Jan 3, 2014 .travis.yml first try at travis... Jan 2, 2014 LICENSE Prepare for release Jan 5, 2014 README.md notation fix and 5.3 ready Nov 13, 2015 config.ld added ldoc config file, and html-cleanup of help file Sep 15, 2013 date-2.1.2-1.rockspec rockspec version update Nov 13, 2015 date.lua seconds including fraction used scientific notation if less then 1e-4 Nov 5, 2015 README.md LuaDate v2.1 Lua Date and Time module for Lua 5.x. Features: Date and Time string parsing. Time addition and subtraction. Time span calculation. Support ISO 8601 Dates. Local time support. Lua module (not binary). Formats Date and Time like strftime. License MIT license. Documentation Documentation is available in the doc folder, or online at Github. Tests Tests are located in the spec directory and can be run using busted. Changes: v2.1.2 fix scientific notation #9, now available for Lua 5.3 v2.1.1 fix for '>=' operator #3, added test suite, added Travis CI, license MIT v2.1 Lua 5.2 support. Global 'date' will no longer be set. v2.0 original by Jas Latrix Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Tieske/date"	"Date and time module with parsing, formatting, addition/subtraction, localization, and ISO 8601 support."	"true"
"Time and Date"	"cron.lua"	"https://github.com/kikito/cron.lua"	"Time-related functions for Lua, inspired by JavaScript's setTimeout and setInterval."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"71"	"14"	"13"	"GitHub - kikito/cron.lua: Time-related functions for Lua, inspired in javascript's setTimeout and setInterval Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 71 Fork 13 kikito/cron.lua Code Issues 0 Pull requests 0 Pulse Graphs Time-related functions for Lua, inspired in javascript's setTimeout and setInterval 46 commits 4 branches 5 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 2.0 demo master tagged Nothing to show v2.0.0 v1.2.1 v1.2.0 v1.1.0 1.0 Nothing to show New pull request Latest commit 170f7d9 Oct 14, 2013 kikito modified .travis.yml Permalink Failed to load latest commit information. spec added Clock:reset Sep 25, 2013 .travis.yml modified .travis.yml Oct 14, 2013 CHANGELOG.md added changelog Sep 25, 2013 MIT-LICENSE.txt changed license to MIT Jan 19, 2012 README.md updated README Sep 25, 2013 cron.lua added Clock:reset Sep 25, 2013 README.md cron.lua cron.lua are a set of functions for executing actions at a certain time interval. API local clock = cron.after(time, callback, ...). Creates a clock that will execute callback after time passes. If additional params were provided, they are passed to callback. local clock = cron.every(time, callback, ...). Creates a clock that will execute callback every time, periodically. Additional parameters are passed to the callback too. Clock methods: local expired = clock:update(dt). Increases the internal timer in the clock by dt. On one-time clocks, if the internal timer surpasses the clock's time, then the clock's callback is invoked. On periodic clocks, the callback is executed 0 or more times, depending on how big dt is and the clock's internal timer. expired will be true for one-time clocks whose time has passed, so their function has been invoked. clock:reset([running]) Changes the internal timer manually to running, or to 0 if nothing is specified. It never invokes callback. Examples local cron = require 'cron'  local function printMessage()   print('Hello') end  -- the following calls are equivalent: local c1 = cron.after(5, printMessage) local c2 = cron.after(5, print, 'Hello')  c1:update(2) -- will print nothing, the action is not done yet c1:update(5) -- will print 'Hello' once  c1:reset() -- reset the counter to 0  -- prints 'hey' 5 times and then prints 'hello' while not c1:update(1) do   print('hey') end  -- Create a periodical clock: local c3 = cron.every(10, printMessage)  c3:update(5) -- nothing (total time: 5) c3:update(4) -- nothing (total time: 9) c3:update(12) -- prints 'Hello' twice (total time is now 21)  Gotchas / Warnings cron.lua does not implement any hardware or software clock; you will have to provide it with the access to the hardware timers, in the form of periodic calls to cron.update cron does not have any defined time units (seconds, milliseconds, etc). You define the units it uses by passing it a dt on cron.update. If dt is in seconds, then cron will work in seconds. If dt is in milliseconds, then cron will work in milliseconds. Installation Just copy the cron.lua file somewhere in your projects (maybe inside a /lib/ folder) and require it accordingly. Remember to store the value returned by require somewhere! (I suggest a local variable named cron) local cron = require 'cron'  Also, make sure to read the license file; the text of that license file must appear somewhere in your projects' files. Specs This project uses busted for its specs. If you want to run the specs, you will have to install it first. Then run: cd path/where/the/spec/folder/is busted  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kikito/cron.lua"	"Time-related functions for Lua, inspired by JavaScript's setTimeout and setInterval."	"true"
"Image Manipulation"	"magick"	"https://github.com/leafo/magick"	"Lua bindings to ImageMagick for LuaJIT using FFI."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"179"	"21"	"43"	"GitHub - leafo/magick: Lua bindings to ImageMagick for LuaJIT using FFI Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 179 Fork 43 leafo/magick Code Issues 8 Pull requests 1 Pulse Graphs Lua bindings to ImageMagick for LuaJIT using FFI 96 commits 1 branch 4 releases 6 contributors Lua 50.6% MoonScript 48.9% Makefile 0.5% Lua MoonScript Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.2.0 v1.1.0 v1.0.0 v0.1.0 Nothing to show New pull request Latest commit ec4b0b1 Jul 12, 2016 leafo update readme, version bump 🌟 Permalink Failed to load latest commit information. magick update readme, version bump 🌟 Jul 12, 2016 spec disable spec on travis Jul 5, 2016 spec_gm get_blob Jul 4, 2016 .gitignore lint Jul 4, 2016 .travis.yml lint in ci Jul 5, 2016 Makefile lint Jul 4, 2016 README.md update readme, version bump 🌟 Jul 13, 2016 lint_config.moon lint in ci Jul 6, 2016 magick-dev-1.rockspec adding methods to gmwand Jul 4, 2016 magick.lua init Jan 26, 2013 magick.moon init Jan 26, 2013 README.md magick Lua bindings to ImageMagick's MagicWand or GraphicsMagick's Wand for LuaJIT using FFI. Installation You'll need both LuaJIT (any version) and MagickWand or GraphicsMagickinstalled. On Ubuntu, to use ImageMagick, you might run: $ sudo apt-get install luajit $ sudo apt-get install libmagickwand-dev You can install GraphicsMagick in place of, or alongside, ImageMagick: $ sudo apt-get install libgraphicsmagick1-dev It's recommended to use LuaRocks to install magick. $ sudo apt-get install luarocks $ luarocks install magick Basic Usage If you just need to resize/crop an image, use the thumb function. It provides a shorthand syntax for common operations. local magick = require(""magick"") magick.thumb(""input.png"", ""100x100"", ""output.png"") The second argument to thumb is a size string, it can have the following kinds of values: ""500x300""       -- Resize image such that the aspect ratio is kept,                 --  the width does not exceed 500 and the height does                 --  not exceed 300 ""500x300!""      -- Resize image to 500 by 300, ignoring aspect ratio ""500x""          -- Resize width to 500 keep aspect ratio ""x300""          -- Resize height to 300 keep aspect ratio ""50%x20%""       -- Resize width to 50% and height to 20% of original ""500x300#""      -- Resize image to 500 by 300, but crop either top                 --  or bottom to keep aspect ratio ""500x300+10+20"" -- Crop image to 500 by 300 at position 10,20 If you need more advanced image operations, you'll need to work with the Image object. Read on. Functions All functions contained in the table returned by require(""magick""). thumb(input_fname, size_str, out_fname=nil) Loads and resizes image. Write output to out_fname if provided, otherwise return image blob. (input_fname can optionally be an instance of Image) load_image(fname) Return a new Image instance, loaded from filename. Returns nil and error message if image could not be loaded. load_image_from_blob(blob) Loads an image from a Lua string containing the binary image data. Image object Calling load_image or load_image_from_blob returns an Image object. local magick = require ""magick""  local img = assert(magick.load_image(""hello.png""))  print(""width:"", img:get_width(), ""height:"", img:get_height());  img:resize(200, 200) img:write(""resized.png"") Images are automatically freed from memory by LuaJIT's garbage collector, but images can take up a lot of space in memory when loaded so it's recommended to call destroy on the image object as soon as possible. Using GraphicsMagick ImageMagick and GraphicsMagick implement the same interface. By default the magick module will include ImageMagick. You can specify which library you use by calling require on the module for the appropriate library. At the moment it's impossible to include both libraries into the same process due to collision of function names in the C namespace. Load ImageMagick directly: magick = requrie ""magick.wand"" local img = magick.load_image(""some_image.png"") Load GraphicsMagick directly: magick = requrie ""magick.gmwand"" local img = magick.load_image(""some_image.png"") Note: not all methods on Image for ImageMagick are available in GraphicsMagick right now. Pull requests welcome. Methods Methods mutate the current image when appropriate. Use clone to get an independent copy. img:resize(w,h, f=""Lanczos2"", blur=1.0) Resizes the image, f is resize function, see Filer Types img:adaptive_resize(w,h) Resizes the image using adaptive resize img:crop(w,h, x=0, y=0) Crops image to w,h where the top left is x, y img:blur(sigma, radius=0) Blurs the image with specified paramaters. See Blur Arguments img:rotate(degrees, r=0, g=0, b) Rotates the image by specified number of degrees. The image dimensions will enlarge to prevent cropping. The triangles on the corners are filled with the color specified by r, g, b. The color components are specified as floating point numbers from 0 to 1. img:sharpen(sigma, radius=0) Sharpens the image with specified parameters. See Sharpening Images img:resize_and_crop(w,h) Resizes the image to w,h. The image will be cropped if necessary to maintain its aspect ratio. img:get_blob() Returns Lua string containing the binary data of the image. The blob is formatated the same as the image's current format (eg. PNG, Gif, etc.). Use image:set_format to change the format. img:write(fname) Writes the the image to disk img:get_width() Gets the width of the image img:get_height() Gets the height of the image img:get_format() Gets the current format of image as a file extension like ""png"" or ""bmp"". Use image:set_format to change the format. img:set_format(format) Sets the format of the image, takes a file extension like ""png"" or ""bmp"" img:get_quality() Gets the image compression quality. img:set_quality(quality) Sets the image compression quality. img:get_gravity() Gets the image gravity type. img:set_gravity(gravity) Sets the image's gravity type: gravity can be one of the values listed in data.moon img:get_option(magick, key) Returns all the option names that match the specified pattern associated with a image (e.g img:get_option(""webp"", ""lossless"")) img:set_option(magick, key, value) Associates one or options with the img (e.g img:set_option(""webp"", ""lossless"", ""0"")) img:scale(w, h) Scale the size of an image to the given dimensions. img:coalesce() Coalesces the current image by compositing each frame on the previous frame. This un-optimized animated images to make them suitable for other methods. img:composite(source, x, y, compose) Composite another image onto another at the specified offset x, y. compose can be one of the values listed in data.moon img:strip() Strips image of all profiles and comments, useful for removing exif and other data r,g,b,a = img:get_pixel(x, y) Get the r,g,b,a color components of a pixel in the image as doubles from 0 to 1 img:clone() Returns a copy of the image. img:destroy() Immediately frees the memory associated with the image, it is invalid to use the image after calling this method. It is unecessary to call this method normally as images are tracked by the garbage collector. Tests Tests use Busted. Install and execute the following command to run tests. You can check the output in spec/output_images/. $ busted Changelog 1.2.0 - Tue Jul 12 21:10:23 PDT 2016 Add preliminary GraphicsMagick support Fix bug with gravity getter/setter (@ram-nadella) Add additional wand method: https://github.com/leafo/magick/pull/32 (@sergeyfedotov) 1.1.0 - Thu Oct 22 05:11:41 UTC 2015 add automatic memory management with ffi.gc fix some string memory leaks when getting type and options of image add coalesce, rotate methods to image use pkg-config instead of MagickWand-config to query library all include paths provided by config are searched instead of first Contact Author: Leaf Corcoran (leafo) (@moonscript) Email: leafot@gmail.com Homepage: http://leafo.net Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/leafo/magick"	"Lua bindings to ImageMagick for LuaJIT using FFI."	"true"
"Digital Signal Processing"	"LuaFFT"	"https://github.com/vection/luafft"	"An easy to use Fast Fourier Transformation package in pure Lua."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"16"	"4"	"2"	"GitHub - h4rm/luafft: Lua package that includes functions for Fast Fourier Transformations. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 16 Fork 2 h4rm/luafft Code Issues 0 Pull requests 0 Pulse Graphs Lua package that includes functions for Fast Fourier Transformations. 7 commits 2 branches 0 releases Fetching contributors Lua 68.2% CSS 31.8% Lua CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 394703e Feb 4, 2014 h4rm Added correct code sections. Permalink Failed to load latest commit information. docs First commit Jan 16, 2012 examples First commit Jan 16, 2012 rockspec First commit Jan 16, 2012 src First commit Jan 16, 2012 CHANGELOG First commit Jan 16, 2012 README.md Added correct code sections. Feb 4, 2014 README.md Introduction luafft is an easy to use Fast Fourier Transformation package in pure Lua. It is based on the FFT implementation of KissFFT by Mark Borgerding which is both easy to use and extremly fast. It also uses the complex number module from the Numeric Lua package. Note: This is a very early version of the code. Although the algorithm has been thoroughly tested by Mark Borgerding, there may very well be bugs that have not been found yet. Please feel free to comment on any source code related problems. Installation LuaFFT is part of the LuaRocks repository where it can be easily installed by using: luarocks install luafft  or simply use Git: git clone git://github.com/vection/LuaFFT.git  Usage LuaFFT is very easy to use. The following lines of code show, how to carry out a simple Fast Fourier Transformation. Keep in mind, that values have to be given as complex values, otherwise luafft returns an error. luafft = require ""luafft""  local list1 = {} local size = 2048  --Populates a list with random real numbers in complex format function populate(list)   for i=1,size do       list[i] = complex.new(math.random(), 0)   end end  --displays a comparison of two lists with complex numbers function compare(one, two)   for i=1,#one do print(string.format(""1: %s\t2: %s\n"",  tostring(one[i]),tostring(two[i]))) end end  --devide a list with a certain constant factor function devide(list, factor)   for i,v in ipairs(list) do list[i] = list[i] / factor end end  --create a list with random real values populate(list1)  --carry out fast fourier transformation and store result in ""ret"" ret = fft(list1, false)  --now carry out inverse fast fourier transformation and store result in ""ret2"" ret2 = fft(ret, true)  --After retransformation, we need to devide by the data size devide(ret2, size)  --displays a comparison of the input and the output, the real part should be equal --the imaginary part is non zero (but fairly close) due to several calculations --that have been carried out in the FFT compare(list2,ret) Licence and Version luafft is licensed under the same license as Lua -- the MIT license -- and so can be freely used for academic and commercial purposes. This is version 1.1-1. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vection/luafft"	"An easy to use Fast Fourier Transformation package in pure Lua."	"true"
"Digital Signal Processing"	"Worp"	"http://worp.zevv.nl/about.html"	"Sound/music/DSP engine written for LuaJIT."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"index | architecture | concepts | jack | dsp | modules | examples | live coding | gui | libs | about Dependencies Misc License Dependencies Worp has the following dependencies: LuaJIT >= 2.0.0 Fluidsynth (optional) LGI (optional) Linuxsampler (optional) Misc During the development of Worp I learned of the existence of Impromptu and SuperCollider, which both have features similar to worp (Event scheduling, live coding, etc). I've shamelessly stolen some ideas here and there from both projects where I saw fit. http://impromptu.moso.com.au http://supercollider.sourceforge.net This would probably be a good place to write about the likes and the differences between these systems and Worp, but I feel I don't know enough about either to be able to write anything useful here. License Copyright (C) 2013 Ico Doornekamp. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License version 2 as published by the Free Software Foundation."	"null"	"null"	"Sound/music/DSP engine written for LuaJIT."	"true"
"Hardware and Embedded Systems"	"eLua"	"http://www.eluaproject.net/"	"Lua, extended with optimizations and specific features for efficient and portable embedded software development."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"eLua - eluaproject Site Downloads Doc Wiki Builder Tracker Repo Embedded power, driven by Lua Quickly prototype and develop embedded software applications with the power of Lua and run them on a wide range of microcontroller architectures Overview What is eLua? Status Media License Get Started Using eLua Downloads Web Builder Get Better Official Doc Reference Manual Platforms Tutorials Get Involved Community Wiki Tracker Roadmap News eLua at ESC Boston February 03, 2015 16:46 James Snyder will be presenting on using eLua for rapid application development at ESC Boston on May 6 . New build system in master May 27, 2013 08:53 The new build system and configurator are now part of master. This changes the way you compile your eLua image, so please check this link for details. AVR32 firmware files updated May 19, 2013 09:17 A recent investigation on the eLua-dev mailing list revealed the fact that the AVR32 firmware files in the eLua 0.9 release package were compiled with a faulty version of the AVR32 GCC compiler, which... Quotes “Very early on in the development of Lua we started using the question 'But will it work in a microwave oven?' as a half-serious test for including features while avoiding bloat. I'm glad to see that the eLua project promises to deliver Lua to small devices that can make a difference.” Luiz Henrique de Figueiredo, Lua Team member “eLua takes a rock-solid VM and fits it in a small space. It lets you program microcontrollers with an easy-to-learn, high-level language. I see this programming model and the eLua project itself really gaining momentum.” Dean Hall, embedded systems developer “eLua makes the complex world of 32-bit processors easy and affordable for all. Thanks for your great work guys. ” Nuccio Raciti, Mizar32 project developer “eLua is a great development platform for micro-controllers ” Tim Michals, Cygentron Inc. “In 1998, Cameron Laird predicted: ""the imminent explosion of ubiquitous embedded processing (computers in your car, in your plumbing, and in your kitchen appliances) can only work in favor of Lua."" eLua is a great help in spreading Lua to these devices.” Roberto Ierusalimschy, Lua chief architect Buzzz Twitter Updates Tweet If you would like to support continued development of eLua, please consider donating to the project. For details on donation use and other ways to support the project see Get Involved. Overview What is eLua? Status Authors License Get Started Using eLua Downloads elua WebBuilder Get Better Doc Tutorials Repository Get Involved Community Wiki Tracker © 2011 eLua Project. All rights reserved."	"null"	"null"	"Lua, extended with optimizations and specific features for efficient and portable embedded software development."	"true"
"Math and Scientific Computing"	"SciLua"	"http://scilua.org/"	"Numerical/scientific computing framework built on LuaJIT, with an interface to R."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"SciLua SciLua Sci sci.alg sci.diff sci.dist sci.fmin sci.fmax sci.math sci.mcmc sci.prng sci.qrng sci.quad sci.root sci.stat Non-Sci LJSQLite3 Rclient Time Xsys More On Github Optimizing License Contact SciLua: Scientific Computing with LuaJIT A complete framework for numerical computing based on LuaJIT which combines the ease of use of scripting languages (MATLAB, R, ...) with the high performance of compiled languages (C/C++, Fortran, ...). Lua is a dynamic language characterized by a small number of simple but powerful concepts that allow to easily implement complex algorithms. Lua is fast to learn thanks to its high-level nature, to the concise syntax and to the precise documentation. Lua is a proven robust language that offers both object-oriented and functional programming features. LuaJIT is an extremely optimized Just In Time compiler for Lua. Start-up and warm-up times are negligible, compile times are in the microsecond to millisecond range and the typical performance of compiled LuaJIT programs is close to the one of C/C++. LuaJIT includes the FFI library which allows to call C function directly. Performance The figure above compares the running time required (lower is better) to run the Julia benchmark suite. Timings are relative to the C implementation. The details: Linux x64 / gcc 5.2.1 / Julia 0.4.1 / SciLua 1.0 latest, implementation: perf-v1.2.sci.lua. Install The easiest way to install SciLua is via the ULua distribution. Having installed (i.e. unzipped) ULua, execute:  ulua/bin/upkg add sci        # Install the sci package (SciLua). ulua/bin/upkg add sci-lang   # Install the sci-lang package (SciLua syntax extensions).  This is the suggested way as all dependencies are handled by the package manager and SciLua can be kept up to date using upkg update. Alternatively, it is possible to install SciLua manually. Download and unzip sci~latest.zip and sci-lang~latest.zip into folders named respectively sci and sci-lang and make sure that such modules can be found by LuaJIT (check package.path documentation). Notice that SciLua requires xsys and OpenBLAS to be installed as well. Sci Library The sci package contains a general purpose scientific computing library composed of the following modules: Sub-Module Description sci.alg vector and matrix algebra sci.diff automatic differentiation sci.dist statistical distributions sci.fmin function minimization algorithms sci.fmax function maximization algorithms sci.math special mathematical functions sci.mcmc MCMC algorithms sci.prng pseudo random number generators sci.qrng quasi random number generators sci.quad quadrature algorithms sci.root root-finding algorithms sci.stat statistical functions Each sub-module has to be loaded separately (require 'sci' is not allowed):  -- No global key is set: local alg  = require ""sci.alg""  -- Load sci.alg module. local dist = require ""sci.dist"" -- Load sci.dist module.  Sci Syntax Extensions Based on the LuaJIT Language Toolkit, the sci-lang package contains the scilua executable which extends the syntax of LuaJIT for easier linear algebra operations: algebra expressions constructed via empty bracket [] indexing element-wise operations via plain Lua operators +-*/^% matrix multiplication via ** matrix exponentiation via ^^ transposition via ` efficient implementation minimizes required allocations and loops support for assignments For example, the rand_mat_stat benchmark shown above is implemented as:  local function randmatstat(t)   local n = 5   local v, w = alg.vec(t), alg.vec(t)   for i=1,t do       local a, b, c, d = randn(n, n), randn(n, n), randn(n, n), randn(n, n)       local P = alg.join(a..b..c..d)       local Q = alg.join(a..b, c..d)       v[i] = alg.trace((P[]`**P[])^^4) -- Matrix transpose, product and power.       w[i] = alg.trace((Q[]`**Q[])^^4) -- Matrix transpose, product and power.   end   return sqrt(stat.var(v))/stat.mean(v), sqrt(stat.var(w))/stat.mean(w) end  © 2011-2016 - Stefano Peluchetti"	"null"	"null"	"Numerical/scientific computing framework built on LuaJIT, with an interface to R."	"true"
"Math and Scientific Computing"	"Torch7"	"http://torch.ch/"	"Scientific computing framework with wide support for machine learning algorithms, used by Facebook, Google, and more."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4966"	"572"	"1418"	"GitHub - torch/torch7: http://torch.ch Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 572 Star 4,966 Fork 1,418 torch/torch7 Code Issues 70 Pull requests 8 Wiki Pulse Graphs http://torch.ch 1,020 commits 16 branches 0 releases 100 contributors C 60.5% Lua 33.3% CMake 5.7% Other 0.5% C Lua CMake Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags allocator cmdlineleak2 cmdlineleak3 dllexp fixup isnan maskedCopyFix master newlocalmetatable reallocnull referenced require soumith-patch-1 storageunresize sysopt threadlocal Nothing to show Nothing to show New pull request Latest commit 7c740d5 Jun 13, 2016 soumith committed on GitHub Merge pull request #700 from colesbury/heaptracking … Enable heap tracking by default in torch Permalink Failed to load latest commit information. cmake Added recognition of CUDA sources in ADD_TORCH_PACKAGE Feb 25, 2016 doc Update maths.md (#698) Jun 9, 2016 generic [TensorOperator.c] Make unary negation expression have real type, not… May 4, 2016 lib fix ""macro redefined"" warning (th_isnan) (#695) Jun 4, 2016 rocks removing sys dependency for now Mar 9, 2016 test Make torch.Generator serializable Apr 19, 2016 .gitignore tell git to ignore build output Sep 7, 2015 .travis.yml Add OS X to travis builds (#668) May 6, 2016 CMakeLists.txt Replace torch.Tester with totem.Tester + extra stuff. Feb 25, 2016 CONTRIBUTING.md fixed mailing list Jun 2, 2015 COPYRIGHT.txt update license Apr 25, 2014 CmdLine.lua Make CmdLine:log check whether file is a file descriptor, before crea… May 25, 2016 DiskFile.c Add DiskFile:noBuffer() Mar 24, 2016 FFI.lua Make FFI tensor map more robust. Jun 26, 2015 File.c lua 5.3 fixes Feb 3, 2016 File.lua File: get rid of extra NULL character (serialize) Apr 14, 2016 Generator.c Make torch.Generator serializable Apr 19, 2016 MemoryFile.c New function longSize for files Nov 26, 2015 PipeFile.c Add support for Lua 5.2 May 29, 2015 README.md Update README.md Jan 20, 2016 ROADMAP.md Fix spelling mistake in Roadmap.md Jan 30, 2016 Storage.c torch now complies with the new luaT API Aug 13, 2012 Tensor.c torch now complies with the new luaT API Aug 13, 2012 Tensor.lua Make :totable work for empty tensors. Feb 6, 2016 TensorMath.lua Merge pull request #620 from liboyue/Add_fmod_remainder_and_remove_mod Apr 16, 2016 TensorOperator.c torch now complies with the new luaT API Aug 13, 2012 TestSuite.lua Replace torch.Tester with totem.Tester + extra stuff. Feb 25, 2016 Tester.lua Make torch.Tester early-abort and disable work nice together. May 18, 2016 Timer.c Add support for compilation on Windows using mingw32. Jul 9, 2015 general.h lua 5.3 fixes Feb 3, 2016 init.c add lua function to update thread locals Sep 26, 2015 init.lua Enable heap tracking by default in torch Jun 13, 2016 mkdocs.yml readthedocs Aug 12, 2015 random.lua Add support for Lua 5.2 May 29, 2015 torchcwrap.lua Fixing a lua stack overflow. Feb 11, 2016 utils.c add lua function to update thread locals Sep 26, 2015 utils.h Work under windows Jul 23, 2015 README.md Need help? Questions, Support, Install issues: Google groups Reporting bugs: torch7 nn cutorch cunn optim threads Hanging out with other developers and users (strictly no install issues, no large blobs of text): Gitter Chat Torch Package Reference Manual Torch is the main package in Torch7 where data structures for multi-dimensional tensors and mathematical operations over these are defined. Additionally, it provides many utilities for accessing files, serializing objects of arbitrary types and other useful utilities. Torch Packages Tensor Library Tensor defines the all powerful tensor object that provides multi-dimensional numerical arrays with type templating. Mathematical operations that are defined for the tensor object types. Storage defines a simple storage interface that controls the underlying storage for any tensor object. File I/O Interface Library File is an abstract interface for common file operations. Disk File defines operations on files stored on disk. Memory File defines operations on stored in RAM. Pipe File defines operations for using piped commands. High-Level File operations defines higher-level serialization functions. Useful Utilities Timer provides functionality for measuring time. Tester is a generic tester framework. CmdLine is a command line argument parsing utility. Random defines a random number generator package with various distributions. Finally useful utility functions are provided for easy handling of torch tensor types and class inheritance. Useful Links Community packages Torch Blog Torch Slides Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/torch/torch7"	"Scientific computing framework with wide support for machine learning algorithms, used by Facebook, Google, and more."	"true"
"Math and Scientific Computing"	"lhf's Lua Tools"	"http://www.tecgraf.puc-rio.br/~lhf/ftp/lua/"	"Assorted libraries and tools, many math-related."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Luiz Henrique de Figueiredo: Libraries and tools for Lua Libraries and tools for Lua Here are my libraries and tools for Lua. They are simple to install and use, but read detailed instructions anyway. Check their release data (date, size, checksum) to make sure you have the latest version for your version of Lua. Some packages are also available as Lua rocks. All packages available here are in the public domain. Please drop me a line if you use one of my packages. All feedback is welcome. Enjoy. ae · ctrace · demo · lalarm · lascii85 · lbase64 · lbc · lbci · lbn · lcl · lcomplex · ldumplib · lgdbm · lgpc · lint64 · linterval · lmapm · lmathx · lmd5 · loadlib · lpack · lpdf · lper · lposix · lqd · lrandom · lstrip · ltokens · lua2c · luac.lua · luuid · lv3 · lxml · mav · srlua · tokenf I am slowly updating these packages to Lua 5.3. The remaining 5.2 packages should work fine with Lua 5.3, perhaps with minor changes in the Makefile. If you need an updated version a package, send me a note. Lua.app – A precompiled Lua application for Mac OS X containing most of my modules and easy to adapt to other module collections. Read the announcement. 5.2 ae – A general-purpose arithmetic expression package for C programs based on Lua. 5.3 · 5.2 · 5.1 · 5.0 · 4.0 ctrace – A tool for tracing Lua API calls. 5.2 · 5.1 · 5.0 · 4.0 demo – The source of the Lua live demo. 5.1 lalarm – An alarm library for Lua based on POSIX alarm. 5.2 · 5.1 · 5.0 · 4.0 lascii85 – An ascii85 library for Lua. 5.3 · 5.2 · 5.1 · 5.0 lbase64 – A base64 library for Lua. 5.3 · 5.2 · 5.1 · 5.0 lbc – A simple self-contained arbitrary precision library for Lua based on GNU bc. See also lbn, lmapm, and lqd. 5.3 · 5.2 · 5.1 · 5.0 · 4.0 lbci – A bytecode inspector library. 5.2 · 5.1 lbn – A fast integer-only arbitrary precision library for Lua based on OpenSSL bn. See also lbc, lmapm, and lqd. 5.2 · 5.1 lcl – A command-line evaluator library that supports shell-like command lines and s-expressions. 5.1 lcomplex – A math library for complex numbers based on C99. See also lmathx. 5.3 · 5.2 · 5.1 ldumplib – A bytecode dumper for Lua 4.0. 4.0 lgdbm – A database library for Lua based on GNU dbm. 5.2 · 5.1 · 5.0 · 4.0 manual by Peter Billam lgpc – A library for Boolean operations on polygons based on gpc. 5.3 · 5.2 · 5.1 · 5.0 lint64 – A library for 64-bit signed integer arithmetic. 5.2 · 5.1 linterval – An interval arithmetic library based on PROFIL/BIAS. Includes an implicit curve plotter. 5.2 · 5.1 lmapm – A complete arbitrary precision library for Lua based on MAPM. See also lbc, lbn, and lqd. 5.3 · 5.2 · 5.1 · 5.0 · 4.0 lmathx – An extension of the standard math library based on C99. See also lcomplex. 5.3 · 5.2 · 5.1 lmd5 – A message digest library for Lua based on OpenSSL. It supports MD2, MD4, MD5, SHA1, SHA2, RIPEMD160, MDC2. 5.2 · 5.1 · 5.0 loadlib – A dynamic loader for Lua 4.0. 4.0 lpack – A library for packing and unpacking binary data. 5.1 · 5.0 · 4.0 lpdf – A library for generating PDF documents based on PDFlib Lite. See also LuaHPDF. 5.2 · 5.1 · 5.0 · 4.0 lper – An experimental tool that allows a Lua state to persist across invocations of the interpreter. It uses LPSM. 5.1 · 5.0 lposix – A POSIX library for Lua. No longer maintained. See luaposix. 5.1 · 5.0 · 4.0 lqd – A high-precision mathematical library for Lua based on qd. 5.3 · 5.2 · 5.1 lrandom – A library for generating random numbers based on the Mersenne Twister. 5.3 · 5.2 · 5.1 · 5.0 lstrip – A tool for compressing Lua programs by removing comments and whitespace. 5.3 · 5.2 · 5.1 ltokens – A library for lexical analysis of Lua code based directly on the Lua lexer. 5.1 · 5.0 lua2c – A tool that converts Lua code into Lua API code in C. 5.1 · 4.0 luac.lua – A version of luac in pure Lua that supports require. Read the announcement. 5.1 luuid – A library for generating universally unique identifiers based on libuuid, which is part of e2fsprogs. 5.2 · 5.1 · 5.0 lv3 – A library for adding 3d vectors to Lua. Meant as a learning aid. 5.0 lxml – A library for parsing XML data into Lua tables based on expat. 5.3 · 5.2 mav – An experimental tool for memory allocation visualization. 5.1 srlua – A tool for building self-running Lua programs. 5.3 · 5.2 · 5.1 · 5.0 tokenf – A token filter facility for Lua. See the talks at the Lua Workshops in 2005 and 2006. 5.1 Last update: Sun Jul 3 22:08:09 BRT 2016 by lhf"	"null"	"null"	"Assorted libraries and tools, many math-related."	"true"
"Parsing"	"lua-cjson"	"https://github.com/mpx/lua-cjson/"	"Blazing fast JSON encoding/decoding implemented in C and exposed to Lua."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"284"	"37"	"147"	"GitHub - mpx/lua-cjson: Lua CJSON is a fast JSON encoding/parsing module for Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 37 Star 284 Fork 147 mpx/lua-cjson Code Issues 7 Pull requests 17 Pulse Graphs Lua CJSON is a fast JSON encoding/parsing module for Lua http://www.kyne.com.au/~mark/software/lua-cjson.php 226 commits 2 branches 8 releases 1 contributor C 79.7% Lua 15.1% Makefile 2.1% Shell 1.5% CMake 1.3% Perl 0.3% C Lua Makefile Shell CMake Perl Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master vendor-netlib-dtoa Nothing to show empty 2.1.0 2.0.0 1.0.4 1.0.3 1.0.2 1.0.1 1.0 Nothing to show New pull request Latest commit 7eb0959 Apr 13, 2016 mpx Fix build with g++ … - Add explicit casts for functions returning void* - Rename ""try"" variable to avoid reserved C++ keyword Permalink Failed to load latest commit information. devel Add original JSON parser design outline Dec 20, 2011 lua Force binary file mode in util.lua Mar 4, 2012 tests Use Javascript compat values for Infinity/NaN Mar 4, 2012 .gitattributes Add .gitignore for object files, html, extra dirs Dec 20, 2011 .gitignore Convert perf results to HTML and update for 2.0.0 Mar 4, 2012 CMakeLists.txt Remove ENABLE_CJSON_GLOBAL option Mar 4, 2012 LICENSE Update copyright date range to include 2012 Mar 4, 2012 Makefile Add commented PREFIX for Solaris make builds Mar 4, 2012 NEWS Add release notes for 2.1.0 release Mar 4, 2012 THANKS Update THANKS for locale bug reporter Nov 27, 2011 build-packages.sh Bump version to 2.1devel Mar 4, 2012 dtoa.c Use Javascript compat values for Infinity/NaN Mar 4, 2012 dtoa_config.h Add error checking to dtoa locking primitives Mar 4, 2012 fpconv.c Fix build with g++ Apr 13, 2016 fpconv.h Fix clang undefined-inline warning Apr 12, 2016 g_fmt.c Fix string length returned by g_fmt.c for |x|<1 Mar 4, 2012 lua-cjson-2.1devel-1.rockspec Bump version to 2.1devel Mar 4, 2012 lua-cjson.spec Add release notes for 2.1.0 release Mar 4, 2012 lua_cjson.c Fix build with g++ Apr 13, 2016 manual.txt Fix minor linking/typo faults in documentation Apr 12, 2016 performance.txt Fix minor linking/typo faults in documentation Apr 12, 2016 rfc4627.txt Initial commit Apr 15, 2011 runtests.sh Bump version to 2.1devel Mar 4, 2012 strbuf.c Fix build with g++ Apr 13, 2016 strbuf.h Update copyright date range to include 2012 Mar 4, 2012 Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mpx/lua-cjson/"	"Blazing fast JSON encoding/decoding implemented in C and exposed to Lua."	"true"
"Parsing"	"luajson"	"https://github.com/harningt/luajson"	"JSON encoder/decoder implemented in Lua on top of LPeg."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"153"	"18"	"19"	"GitHub - harningt/luajson: JSON parser/encoder for Lua Parses JSON using LPEG for speed and flexibility. Depending on parser/encoder options, various values are preserved as best as possible. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 153 Fork 19 harningt/luajson Code Issues 6 Pull requests 0 Pulse Graphs JSON parser/encoder for Lua Parses JSON using LPEG for speed and flexibility. Depending on parser/encoder options, various values are preserved as best as possible. http://www.eharning.us/wiki/luajson/ 298 commits 7 branches 21 releases 4 contributors Lua 97.4% Makefile 2.5% PHP 0.1% Lua Makefile PHP Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 1.0.x 1.1.x-utf-encoding 1.1.x 1.2.x master next nonrecursive Nothing to show pre-1.0 debian/0.10-1 1.3.3 1.3.2 1.3.1 1.3 1.2.2 1.2.1 1.2 1.1.2 1.1.1 1.1 1.0.3 1.0.2 1.0.1 1.0 0.10 0.9.1 0.9 0.6 0.5 Nothing to show New pull request Latest commit 6716d77 Apr 18, 2016 harningt encode: simplify encoder map building to current use case to enhance … … …coverage Permalink Failed to load latest commit information. dist base: splits out Makefile to multiple files to manage distinct goals … Nov 10, 2010 docs base: prepare release 1.3.3 Apr 14, 2014 lua encode: simplify encoder map building to current use case to enhance … Apr 18, 2016 rockspecs base: drops obsolute SCM rockspecs Jun 4, 2014 tests tests: enhances coverage for undefined and unregistered method encoding Apr 18, 2016 util base: updates rock creation tool to include tag version Feb 26, 2014 .travis.yml Revert ""travis: attempt downgrading luacov to 0.9.1 to fix line stats"" Apr 13, 2016 LICENSE license: updates copyright dates Apr 14, 2014 Makefile Merge branch '1.1.x' into 1.2.x Sep 19, 2014 README docs: updates README to indicate updated testing results and drops me… Apr 13, 2016 ReleaseNotes.txt base: prepare release 1.3.3 Apr 15, 2014 README LuaJSON 	JSON Parser/Constructor for Lua  Author:	Thomas Harning Jr. <harningt@gmail.com>  Source code:     http://repo.or.cz/luajson  Bug reports:     http://github.com/harningt/luajson     harningt@gmail.com  Requirements 	Lua 5.1, 5.2, 5.3, LuaJIT 2.0, or LuaJIT 2.1 	LPeg (Tested with 0.7, 0.8, 0.9, 0.10, 0.12rc2, 1.0) 	For regressionTest: 		lfs (Tested with 1.6.3) 	For lunit-tests: 		lunitx >= 0.8  NOTE: LPeg 0.11 may not work - it crashed during my initial tests,       it is not in the test matrix.  Lua versions tested recently:     Lua 5.1.5     Lua 5.2.4     Lua 5.3.2     LuaJIT-2.0.4     LuaJIT-2.1.0-beta2  License 	All-but tests: MIT-style, See LICENSE for details 	tests/*:       Public Domain / MIT - whichever is least restrictive  Module/Function overview: 	json.encode (callable module referencing json.encode.encode) 	--encode ( value : ANY-valid )  		Takes in a JSON-encodable value and returns the JSON-encoded text 		Valid input types: 			table 			array-like table (spec below) 			string 			number 			boolean 			'null' - represented by json.util.null 		Table keys (string,number,boolean) are encoded as strings, others are erroneus 		Table values are any valid input-type 		Array-like tables are converted into JSON arrays... 			Position 1 maps to JSON Array position 0 	--isEncodable ( value : ANY ) 		Returns a boolean stating whether is is encodeable or not 		NOTE: Tables/arrays are not deeply inspected  	json.decode (callable module referencing json.decode.decode) 	--decode	(data : string, strict : optional boolean) 		Takes in a string of JSON data and converts it into a Lua object 		If 'strict' is set, then the strict JSON rule-set is used  	json.util 	--printValue (tab : ANY, name : string) 			recursively prints out all object values - if duplicates found, reference printed 	--null 			Reference value to represent 'null' in a well-defined way to 			allow for null values to be inserted into an array/table 	--merge (t : table, ... : tables) 			Shallow-merges a sequence of tables onto table t by iterating over each using 			pairs and assigning.  Attribution: 	parsing test suite from JSON_checker project of http://www.json.org/ 	No listed license for these files in their package.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/harningt/luajson"	"JSON encoder/decoder implemented in Lua on top of LPeg."	"true"
"Parsing"	"dkjson"	"http://dkolf.de/src/dkjson-lua.fsl/home"	"JSON encoder/decoder implemented in pure Lua."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"dkjson - dkjson dkjson — dkjson dkolf.de dkjson Timeline Files Branches Tags Wiki Login JSON Module for Lua Introduction This is a JSON module written in Lua. It supports UTF-8. JSON (JavaScript Object Notation) is a format for serializing data based on the syntax for JavaScript data structures. It is an ideal format for transmitting data between different applications and commonly used for dynamic web pages. It can also be used to save Lua data structures, but you should be aware that not every Lua table can be represented by the JSON standard. For example tables that contain both string keys and an array part cannot be exactly represented by JSON. You can solve this by putting your array data in an explicit subtable. dkjson is written in Lua without any dependencies, but when LPeg is available dkjson uses it to speed up decoding. Download dkjson.lua Usage The full documentation including the license is available here in the wiki or as Markdown text in the readme.txt file. dkjson is free software released under the same conditions as the Lua interpreter. Please remember to mention external code you are using in your software. Examples Encoding  local json = require (""dkjson"")  local tbl = {   animals = { ""dog"", ""cat"", ""aardvark"" },   instruments = { ""violin"", ""trombone"", ""theremin"" },   bugs = json.null,   trees = nil }  local str = json.encode (tbl, { indent = true })  print (str)  Output  {   ""bugs"":null,   ""instruments"":[""violin"",""trombone"",""theremin""],   ""animals"":[""dog"",""cat"",""aardvark""] }  Decoding  local json = require (""dkjson"")  local str = [[ { ""numbers"": [ 2, 3, -20.23e+2, -4 ], ""currency"": ""\u20AC"" } ]]  local obj, pos, err = json.decode (str, 1, nil) if err then   print (""Error:"", err) else   print (""currency"", obj.currency)   for i = 1,#obj.numbers do     print (i, obj.numbers[i])   end end   Output  currency	€ 1	2 2	3 3	-2023 4	-4  Versions Version 2.5 (2014-04-28) Download dkjson.lua version 2.5 Read the documentation Changes since version 2.4: Added customizable exception handling. Decode input that contains JavaScript comments. Version 2.4 (2013-09-28) Download dkjson.lua version 2.4 Changes since version 2.3: Fixed encoding and decoding of numbers in different numeric locales. Prevent using version 0.11 of LPeg (causes segmentation faults on some systems). Version 1.3 (2013-09-28) Download dkjson.lua version 1.3 Changes since version 1.2: Fixed encoding and decoding of numbers in different numeric locales. Version 2.3 (2013-04-14) Download dkjson.lua version 2.3 Changes since version 2.2: Corrected the range of escaped characters. Among other characters U+2029 was missing, which would cause trouble when parsed by a JavaScript interpreter. Added options to register the module table in a global variable. This is useful in environments where functions similar to require are not available. Version 1.2 (2013-04-14) Download dkjson.lua version 1.2 Changes since version 1.1: Corrected the range of escaped characters. Among other characters U+2029 was missing, which would cause trouble when parsed by a JavaScript interpreter. Locations for error messages were off by one in the first line. Version 2.2 (2012-04-28) Download dkjson.lua version 2.2 Changes since version 2.1: __jsontype is only used for empty tables. It is possible to decode tables without assigning metatables. Locations for error messages were off by one in the first line. There is no LPeg version of json.quotestring anymore. Version 2.1 (2011-07-08) Download dkjson.lua version 2.1 Changes since version 2.0: Changed the documentation to Markdown format. LPeg is now parsing only a single value at a time to avoid running out of Lua stack for big arrays and objects. Read __tojson, __jsontype and __jsonorder even from blocked metatables through the debug module. Fixed decoding single numbers (only affected the non-LPeg mode). Corrected the range of escaped Unicode control characters. Version 1.1 (2011-07-08) Download dkjson.lua version 1.1 Changes since version 1.0: The values NaN/+Inf/-Inf are recognised and encoded as ""null"" like in the original JavaScript implementation. Read __tojson even from blocked metatables through the debug module. Fixed decoding single numbers. Corrected the range of escaped Unicode control characters. Version 2.0 (2011-05-30) Download dkjson.lua version 2.0 Changes since version 1.0: Optional LPeg support. Invalid input data for encoding raises errors instead of returning nil and the error message. (Invalid data for encoding is usually a programming error. Raising an error removes the work of explicitly checking the result). The metatable field __jsontype can control whether a Lua table is encoded as a JSON array or object. (Mainly useful for empty tables). When decoding, two metatables are created. One is used to mark the arrays while the other one is used for the objects. (The metatables are created once for each decoding operation to make sandboxing possible. However, you can specify your own metatables as arguments). There are no spaces added any longer when encoding. It is possible to explicitly sort keys for encoding by providing an array with key names to the option ""keyorder"" or the metatable field __jsonorder. The values NaN/+Inf/-Inf are recognised and encoded as ""null"" like in the original JavaScript implementation. Version 1.0 (2010-08-28) Initial version. Download dkjson.lua version 1.0 dkolf.de contact (This page was generated by Fossil.)"	"null"	"null"	"JSON encoder/decoder implemented in pure Lua."	"true"
"Parsing"	"LuaExpat"	"https://matthewwild.co.uk/projects/luaexpat/"	"SAX XML parser via binding to the Expat library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LuaExpat: XML Expat parsing for the Lua programming language LuaExpat XML Expat parsing for the Lua programming language LuaExpat Home Overview Status Download History References Credits Contact Manual Introduction Building Installation Parser Objects Examples Lua Object Model Project Bug Tracker CVS License Overview LuaExpat is a SAX XML parser based on the Expat library. LuaExpat is free software and uses the same license as Lua 5.1. Status Current version is 1.3.0. It was developed for both Lua 5.1 and Lua 5.2, and has been tested on Linux, Windows (XP) and MacOS X with Expat 2.1.0. Download The latest LuaExpat release is 1.3.0. luaexpat-1.3.0.tar.gz (signature) luaexpat-1.2.0.tar.gz (signature) Older LuaExpat releases can be downloaded from LuaForge page. Binaries for Windows are bundled with the Lua for Windows project. LuaExpat is also available from the main LuaRocks repository, as 'luaexpat'. History Version 1.3.0 [02/Apr/2014] Lua 5.2 support (thanks Tomás Guisasola Gorham) support for the XmlDecl handler add parser:getcurrentbytecount() (XML_GetCurrentByteCount) ability to disable CharacterData merging Makefile improvements (thanks Vadim Misbakh-Soloviov) Version 1.2.0 [02/Jun/2011] New maintainer: Matthew Wild support for the StartDoctypeDecl handler add parser:stop() to abort parsing inside a callback Version 1.1.0 [05/Jun/2007] adapted to work on both Lua 5.0 and Lua 5.1 updated to use Expat 2.0.0 Version 1.0.2 [23/Mar/2006] minor bugfix, lom correct module name is lxp.lom Version 1.0.1 [06/Jun/2005] minor changes for compatibility with Expat version 1.95.8 Version 1.0 [2/Dec/2004] Version 1.0 Beta [4/Apr/2004] Version 1.0 Alpha [10/Dec/2003] References LuaExpat uses the Expat library. For details on the C API please refer to the article ""Using Expat"". LuaExpat implements the SAX API. Credits Version 1.0 was designed by Roberto Ierusalimschy, André Carregal and Tomás Guisasola as part of the Kepler Project which holds its copyright. The implementation was coded by Roberto Ierusalimschy, based on a previous design by Jay Carlson. LuaExpat development was sponsored by Fábrica Digital and FINEP. Contact For more information please contact us. Comments are welcome! You can also reach other Kepler developers and users on the Kepler Project mailing list."	"null"	"null"	"SAX XML parser via binding to the Expat library."	"true"
"Parsing"	"SLAXML"	"https://github.com/Phrogz/SLAXML"	"Pure Lua SAX-like streaming XML parser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"70"	"14"	"30"	"GitHub - Phrogz/SLAXML: SAX-like streaming XML parser for Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 70 Fork 30 Phrogz/SLAXML Code Issues 0 Pull requests 0 Pulse Graphs SAX-like streaming XML parser for Lua 54 commits 1 branch 10 releases 4 contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.7 v0.6.1 v0.5.3 v0.5.2 v0.5.1 v0.4.3 v0.4 v0.3 v0.1 0.6 Nothing to show New pull request Latest commit 8bfc922 Apr 19, 2016 Phrogz Merge pull request #9 from vadi2/master … Added basic rockspec Permalink Failed to load latest commit information. test Decode high-value entities into UTF8 Sep 26, 2014 LICENSE.txt Initial v0.1 release Feb 7, 2013 README.md Fix a few README grammar mistakes Sep 27, 2014 slaxdom.lua Remove namespace() post-callback, properly handling <foo xmlns='bar'/> Feb 18, 2013 slaxml-0.7-0.rockspec Added basic rockspec Apr 19, 2016 slaxml.lua Fix mistakenly added global key Jun 3, 2015 README.md SLAXML SLAXML is a pure-Lua SAX-like streaming XML parser. It is more robust than many (simpler) pattern-based parsers that exist (such as mine), properly supporting code like <expr test=""5 > 7"" />, CDATA nodes, comments, namespaces, and processing instructions. It is currently not a truly valid XML parser, however, as it allows certain XML that is syntactically-invalid (not well-formed) to be parsed without reporting an error. Features Pure Lua in a single file (two files if you use the DOM parser). Streaming parser does a single pass through the input and reports what it sees along the way. Supports processing instructions (<?foo bar?>). Supports comments (<!-- hello world -->). Supports CDATA sections (<![CDATA[ whoa <xml> & other content as text ]]>). Supports namespaces, resolving prefixes to the proper namespace URI (<foo xmlns=""bar""> and <wrap xmlns:bar=""bar""><bar:kittens/></wrap>). Supports unescaped greater-than symbols in attribute content (a common failing for simpler pattern-based parsers). Unescapes named XML entities (&lt; &gt; &amp; &quot; &apos;) and numeric entities (e.g. &#10;) in attributes and text nodes (but—properly—not in comments or CDATA). Properly handles edge cases like &#38;amp;. Optionally ignore whitespace-only text nodes (as appear when indenting XML markup). Includes a DOM parser that is both a convenient way to pull in XML to use as well as a nice example of using the streaming parser. Does not add any keys to the global namespace. Usage local SLAXML = require 'slaxml'  local myxml = io.open('my.xml'):read('*all')  -- Specify as many/few of these as you like parser = SLAXML:parser{   startElement = function(name,nsURI,nsPrefix)       end, -- When ""<foo"" or <x:foo is seen   attribute    = function(name,value,nsURI,nsPrefix) end, -- attribute found on current element   closeElement = function(name,nsURI)                end, -- When ""</foo>"" or </x:foo> or ""/>"" is seen   text         = function(text)                      end, -- text and CDATA nodes   comment      = function(content)                   end, -- comments   pi           = function(target,content)            end, -- processing instructions e.g. ""<?yes mon?>"" }  -- Ignore whitespace-only text nodes and strip leading/trailing whitespace from text -- (does not strip leading/trailing whitespace from CDATA) parser:parse(myxml,{stripWhitespace=true}) If you just want to see if it will parse your document correctly, you can simply do: local SLAXML = require 'slaxml' SLAXML:parse(myxml) …which will cause SLAXML to use its built-in callbacks that print the results as they are seen. DOM Builder If you simply want to build tables from your XML, you can alternatively: local SLAXML = require 'slaxdom' -- also requires slaxml.lua; be sure to copy both files local doc = SLAXML:dom(myxml) The returned table is a 'document' composed of tables for elements, attributes, text nodes, comments, and processing instructions. See the following documentation for what each supports. DOM Table Features Document - the root table returned from the SLAXML:dom() method. doc.type : the string ""document"" doc.name : the string ""#doc"" doc.kids : an array table of child processing instructions, the root element, and comment nodes. doc.root : the root element for the document Element someEl.type : the string ""element"" someEl.name : the string name of the element (without any namespace prefix) someEl.nsURI : the namespace URI for this element; nil if no namespace is applied someEl.attr : a table of attributes, indexed by name and index local value = someEl.attr['attribute-name'] : any namespace prefix of the attribute is not part of the name local someAttr = someEl.attr[1] : an single attribute table (see below); useful for iterating all attributes of an element, or for disambiguating attributes with the same name in different namespaces someEl.kids : an array table of child elements, text nodes, comment nodes, and processing instructions someEl.el : an array table of child elements only someEl.parent : reference to the parent element or document table Attribute someAttr.type : the string ""attribute"" someAttr.name : the name of the attribute (without any namespace prefix) someAttr.value : the string value of the attribute (with XML and numeric entities unescaped) someAttr.nsURI : the namespace URI for the attribute; nil if no namespace is applied someAttr.parent : reference to the owning element table Text - for both CDATA and normal text nodes someText.type : the string ""text"" someText.name : the string ""#text"" someText.value : the string content of the text node (with XML and numeric entities unescaped for non-CDATA elements) someText.parent : reference to the parent element table Comment someComment.type : the string ""comment"" someComment.name : the string ""#comment"" someComment.value : the string content of the attribute someComment.parent : reference to the parent element or document table Processing Instruction someComment.type : the string ""pi"" someComment.name : the string name of the PI, e.g. <?foo …?> has a name of ""foo"" someComment.value : the string content of the PI, i.e. everything but the name someComment.parent : reference to the parent element or document table Finding Text for a DOM Element The following function can be used to calculate the ""inner text"" for an element: function elementText(el)   local pieces = {}   for _,n in ipairs(el.kids) do     if n.type=='element' then pieces[#pieces+1] = elementText(n)     elseif n.type=='text' then pieces[#pieces+1] = n.value     end   end   return table.concat(pieces) end  local xml  = [[<p>Hello <em>you crazy <b>World</b></em>!</p>]] local para = SLAXML:dom(xml).root print(elementText(para)) --> ""Hello you crazy World!"" A Simpler DOM If you want the DOM tables to be simpler-to-serialize you can supply the simple option via: local dom = SLAXML:dom(myXML,{ simple=true }) In this case no table will have a parent attribute, elements will not have the el collection, and the attr collection will be a simple array (without values accessible directly via attribute name). In short, the output will be a strict hierarchy with no internal references to other tables, and all data represented in exactly one spot. Known Limitations / TODO Does not require or enforce well-formed XML. Certain syntax errors are silently ignored and consumed. For example: foo=""yes & no"" is seen as a valid attribute <foo></bar> invokes startElement(""foo"") followed by closeElement(""bar"") <foo> 5 < 6 </foo> is seen as valid text contents No support for custom entity expansion other than the standard XML entities (&lt; &gt; &quot; &apos; &amp;) and numeric entities (e.g. &#10; or &#x3c;) XML Declarations (<?xml version=""1.x""?>) are incorrectly reported as Processing Instructions No support for DTDs No support for extended (Unicode) characters in element/attribute names No support for charset No support for XInclude Does not ensure that the reserved xml prefix is never redefined to an illegal namespace Does not ensure that the reserved xmlns prefix is never used as an element prefix History v0.7 2014-Sep-26 Decodes entities above 127 as UTF8 (decimal and hexadecimal). The encoding specified by the document is (still) ignored. If you parse an XML file encoded in some other format, that intermixes 'raw' high-byte characters with high-byte entities, the result will be a broken encoding. v0.6.1 2014-Sep-25 Fixes Issue #6, adding support for ASCII hexadecimal entities (e.g. &#x3c;). (Thanks Leorex/Ben Bishop) v0.6 2014-Apr-18 Fixes Issue #5 (and more): Namespace prefixes defined on element are now properly applied to the element itself and any attributes using them when the definitions appear later in source than the prefix usage. (Thanks Oliver Kroth.) The streaming parser now supplies the namespace prefix for elements and attributes. v0.5.3 2014-Feb-12 Fixes Issue #3: The reserved xml prefix may be used without pre-declaring it. (Thanks David Durkee.) v0.5.2 2013-Nov-7 Lua 5.2 compatible Parser now errors if it finishes without finding a root element, or if there are unclosed elements at the end. (Proper element pairing is not enforced by the parser, but is—as in previous releases—enforced by the DOM builder.) v0.5.1 2013-Feb-18 <foo xmlns=""bar""> now directly generates startElement(""foo"",""bar"") with no post callback for namespace required. v0.5 2013-Feb-18 Use the local SLAXML=require 'slaxml' pattern to prevent any pollution of the global namespace. v0.4.3 2013-Feb-17 Bugfix to allow empty attributes, i.e. foo="""" closeElement no longer includes namespace prefix in the name, includes the nsURI v0.4 2013-Feb-16 DOM adds .parent references SLAXML.ignoreWhitespace is now :parse(xml,{stripWhitespace=true}) ""simple"" mode for DOM parsing v0.3 2013-Feb-15 Support namespaces for elements and attributes <foo xmlns=""barURI""> will call startElement(""foo"",nil) followed by namespace(""barURI"") (and then attribute(""xmlns"",""barURI"",nil)); you must apply the namespace to your element after creation. Child elements without a namespace prefix that inherit a namespace will receive startElement(""child"",""barURI"") <xy:foo> will call startElement(""foo"",""uri-for-xy"") <foo xy:bar=""yay""> will call attribute(""bar"",""yay"",""uri-for-xy"") Runtime errors are generated for any namespace prefix that cannot be resolved Add (optional) DOM parser that validates hierarchy and supports namespaces v0.2 2013-Feb-15 Supports expanding numeric entities e.g. &#34; -> "" Utility functions are local to parsing (not spamming the global namespace) v0.1 2013-Feb-7 Option to ignore whitespace-only text nodes Supports unescaped > in attributes Supports CDATA Supports Comments Supports Processing Instructions License Copyright © 2013 Gavin Kistner Licensed under the MIT License. See LICENSE.txt for more details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Phrogz/SLAXML"	"Pure Lua SAX-like streaming XML parser."	"true"
"Parsing"	"lyaml"	"https://github.com/gvvaughan/lyaml"	"YAML encoding/decoding via binding to LibYAML."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"36"	"4"	"5"	"GitHub - gvvaughan/lyaml: LibYAML binding for Lua. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 36 Fork 5 gvvaughan/lyaml Code Issues 0 Pull requests 0 Pulse Graphs LibYAML binding for Lua. http://gvvaughan.github.io/lyaml 166 commits 3 branches 19 releases Fetching contributors Shell 69.2% C 16.4% Lua 12.4% Makefile 2.0% Shell C Lua Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master release Nothing to show v6.0 v5.1.4 v5.1.0 v5 v4 v3 v2 v1 release-v6.0 release-v5.1.4 release-v5.1.3 release-v5.1.2 release-v5.1.1 release-v5.1.0 release-v5 release-v4 release-v3 release-v2 release-v1 Nothing to show New pull request Latest commit 1216386 Jan 5, 2016 gvvaughan maint: bump copyright years. … * bootstrap.conf, configure.ac, ext/yaml/emitter.c, ext/yaml/lyaml.h, ext/yaml/parser.c, ext/yaml/scanner.c, ext/yaml/yaml.c, lib/lyaml.lua, lib/lyaml/explicit.lua, lib/lyaml/functional.lua, lib/lyaml/implicit.lua, local.mk, slingshot, specs/specs.mk: Add 2016 to copyright years.  Signed-off-by: Gary V. Vaughan <gary@gnu.org> Permalink Failed to load latest commit information. build-aux maint: consolidate .gitignore files. Jul 25, 2015 ext/yaml maint: bump copyright years. Jan 5, 2016 lib maint: bump copyright years. Jan 5, 2016 m4 maint: move to self-managed slingshot. Jul 15, 2013 slingshot maint: bump copyright years. Jan 5, 2016 specs maint: bump copyright years. Jan 5, 2016 .gitignore maint: consolidate .gitignore files. Jul 25, 2015 .prev-version maint: post-release administrivia. Jul 27, 2015 .slackid slingshot: sync with upstream for slack support. Sep 24, 2014 .travis.yml slingshot: update to latest revision for Travis GCE compatibility. Jan 5, 2016 .x-update-copyright maint: update copyright notices to include 2014. Jan 4, 2014 AUTHORS doc: preliminary LDoc API documentation. Jul 23, 2015 COPYING slingshot: sync from upstream, and simplify accordingly. Jan 4, 2014 NEWS.md maint: post-release administrivia. Jul 27, 2015 README.md lyaml: ensure lyaml.dump has an equivalent signature to lyaml.load. Jul 26, 2015 bootstrap slingshot: sync with upstream, for bootstrap warnings fix. Jan 1, 2015 bootstrap.conf maint: bump copyright years. Jan 5, 2016 configure.ac maint: bump copyright years. Jan 5, 2016 local.mk maint: bump copyright years. Jan 5, 2016 lyaml-git-1.rockspec maint: post-release administrivia. Jul 27, 2015 rockspec.conf rockspec: Lua 5.4 and higher not yet supported. Jan 1, 2015 README.md LYAML LibYAML binding for Lua, with a fast C implementation for converting between %YAML 1.1 and Lua tables, and a low-level YAML event parser for implementing more intricate YAML document loading. Usage High Level API These functions quickly convert back and forth between Lua tables and %YAML 1.1 format strings. local lyaml   = require ""lyaml"" local t       = lyaml.load (YAML-STRING, [OPTS-TABLE]) local yamlstr = lyaml.dump (LUA-TABLE, [OPTS-TABLE]) local null    = lyaml.null () lyaml.load lyaml.load accepts a YAML string for parsing. If the YAML string contains multiple documents, only the first document will be returned by default. To return multiple documents as a table, set all = true in the second argument OPTS-TABLE. lyaml.load(""foo: bar"") --> { foo = ""bar"" }  lyaml.load(""foo: bar"", { all = true }) --> { { foo = ""bar"" } }  multi_doc_yaml = [[ --- one ... --- two ... ]]  lyaml.load(multi_doc_yaml) --> ""one""  lyaml.load(multi_doc_yaml, { all = true }) --> { ""one"", ""two"" } You can supply an alternative function for converting implicit plain scalar values in the implicit_scalar field of the OPTS-TABLE argument; otherwise a default is composed from the functions in the lyaml.implicit module. You can also supply an alternative table for coverting explicitly tagged scalar values in the explicit_scalar field of the OPTS-TABLE argument; otherwise all supported tags are parsed by default using the functions from the lyaml.explicit module. lyaml.dump lyaml.dump accepts a table of values to dump. Each value in the table represents a single YAML document. To dump a table of lua values this means the table must be wrapped in another table (the outer table represents the YAML documents, the inner table is the single document table to dump). lyaml.dump({ { foo = ""bar"" } }) --> --- --> foo: bar --> ...  lyaml.dump({ ""one"", ""two"" }) --> --- one --> ... --> --- two --> ... If you need to round-trip load a dumped document, and you used a custom function for converting implicit scalars, then you should pass that same function in the implicit_scalar field of the OPTS-TABLE argument to lyaml.dump so that it can quote strings that might otherwise be implicitly converted on reload. Nil Values Lua tables treat nil valued keys as if they were not there, where YAML explicitly supports null values (and keys!). Lyaml will retain YAML null values as lyaml.null () by default, though it is straight forward to wrap the low level APIs to use nil, subject to the usual caveats of how nil values work in Lua tables. Low Level APIs local emitter = require (""yaml"").emitter ()  emitter.emit {type = ""STREAM_START""} for _, event in ipairs (event_list) do   emitter.emit (event) end str = emitter.emit {type = ""STREAM_END""} The yaml.emitter function returns an emitter object that has a single emit function, which you call with event tables, the last STREAM_END event returns a string formatted as a YAML 1.1 document. local iter = require (""yaml"").scanner (YAML-STRING)  for token_table in iter () do   -- process token table end Each time the iterator returned by scanner is called, it returns a table describing the next token of YAML-STRING. See LibYAML's yaml.h for details of the contents and semantics of the various tokens produced by yaml_parser_scan, the underlying call made by the iterator. LibYAML implements a fast parser in C using yaml_parser_scan, which is also bound to lyaml, and easier to use than the token API above: local iter = require (""yaml"").parser (YAML-STRING)  for event_table in iter () do   -- process event table end Each time the iterator returned by parser is called, it returns a table describing the next event from the ""Parse"" process of the ""Parse, Compose, Construct"" processing model described in the YAML 1.1 specification using LibYAML. Implementing the remaining ""Compose"" and ""Construct"" processes in Lua is left as an exercise for the reader -- though, unlike the high-level API, lyaml.parser exposes all details of the input stream events, such as line and column numbers. Installation There's no need to download an lyaml release, or clone the git repo, unless you want to modify the code. If you use LuaRocks, you can use it to install the latest release from its repository: luarocks --server=http://rocks.moonscript.org install lyaml  Or from the rockspec in a release tarball: luarocks make lyaml-?-1.rockspec  To install current git master from GitHub (for testing): luarocks install http://raw.github.com/gvvaughan/lyaml/release/lyaml-git-1.rockspec  To install without LuaRocks, clone the sources from the repository, and then run the following commands: cd lyaml ./bootstrap ./configure --prefix=INSTALLATION-ROOT-DIRECTORY make all check install The dependencies are listed in the dependencies entry of the file rockspec.conf. You will also need Autoconf, Automake and Libtool. See INSTALL for instructions for configure. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gvvaughan/lyaml"	"YAML encoding/decoding via binding to LibYAML."	"true"
"Parsing"	"LPeg"	"http://www.inf.puc-rio.br/~roberto/lpeg/"	"A pattern-matching library for Lua, based on Parsing Expression Grammars."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LPeg - Parsing Expression Grammars For Lua LPeg Parsing Expression Grammars For Lua, version 1.0 LPeg Home Introduction Functions Basic Constructions Grammars Captures Some Examples The re Module Download License Introduction LPeg is a new pattern-matching library for Lua, based on Parsing Expression Grammars (PEGs). This text is a reference manual for the library. For a more formal treatment of LPeg, as well as some discussion about its implementation, see A Text Pattern-Matching Tool based on Parsing Expression Grammars. (You may also be interested in my talk about LPeg given at the III Lua Workshop.) Following the Snobol tradition, LPeg defines patterns as first-class objects. That is, patterns are regular Lua values (represented by userdata). The library offers several functions to create and compose patterns. With the use of metamethods, several of these functions are provided as infix or prefix operators. On the one hand, the result is usually much more verbose than the typical encoding of patterns using the so called regular expressions (which typically are not regular expressions in the formal sense). On the other hand, first-class patterns allow much better documentation (as it is easy to comment the code, to break complex definitions in smaller parts, etc.) and are extensible, as we can define new functions to create and compose patterns. For a quick glance of the library, the following table summarizes its basic operations for creating patterns: Operator Description lpeg.P(string) Matches string literally lpeg.P(n) Matches exactly n characters lpeg.S(string) Matches any character in string (Set) lpeg.R(""xy"") Matches any character between x and y (Range) patt^n Matches at least n repetitions of patt patt^-n Matches at most n repetitions of patt patt1 * patt2 Matches patt1 followed by patt2 patt1 + patt2 Matches patt1 or patt2 (ordered choice) patt1 - patt2 Matches patt1 if patt2 does not match -patt Equivalent to ("""" - patt) #patt Matches patt but consumes no input lpeg.B(patt) Matches patt behind the current position, consuming no input As a very simple example, lpeg.R(""09"")^1 creates a pattern that matches a non-empty sequence of digits. As a not so simple example, -lpeg.P(1) (which can be written as lpeg.P(-1), or simply -1 for operations expecting a pattern) matches an empty string only if it cannot match a single character; so, it succeeds only at the end of the subject. LPeg also offers the re module, which implements patterns following a regular-expression style (e.g., [09]+). (This module is 260 lines of Lua code, and of course it uses LPeg to parse regular expressions and translate them to regular LPeg patterns.) Functions lpeg.match (pattern, subject [, init]) The matching function. It attempts to match the given pattern against the subject string. If the match succeeds, returns the index in the subject of the first character after the match, or the captured values (if the pattern captured any value). An optional numeric argument init makes the match start at that position in the subject string. As usual in Lua libraries, a negative value counts from the end. Unlike typical pattern-matching functions, match works only in anchored mode; that is, it tries to match the pattern with a prefix of the given subject string (at position init), not with an arbitrary substring of the subject. So, if we want to find a pattern anywhere in a string, we must either write a loop in Lua or write a pattern that matches anywhere. This second approach is easy and quite efficient; see examples. lpeg.type (value) If the given value is a pattern, returns the string ""pattern"". Otherwise returns nil. lpeg.version () Returns a string with the running version of LPeg. lpeg.setmaxstack (max) Sets a limit for the size of the backtrack stack used by LPeg to track calls and choices. (The default limit is 400.) Most well-written patterns need little backtrack levels and therefore you seldom need to change this limit; before changing it you should try to rewrite your pattern to avoid the need for extra space. Nevertheless, a few useful patterns may overflow. Also, with recursive grammars, subjects with deep recursion may also need larger limits. Basic Constructions The following operations build patterns. All operations that expect a pattern as an argument may receive also strings, tables, numbers, booleans, or functions, which are translated to patterns according to the rules of function lpeg.P. lpeg.P (value) Converts the given value into a proper pattern, according to the following rules: If the argument is a pattern, it is returned unmodified. If the argument is a string, it is translated to a pattern that matches the string literally. If the argument is a non-negative number n, the result is a pattern that matches exactly n characters. If the argument is a negative number -n, the result is a pattern that succeeds only if the input string has less than n characters left: lpeg.P(-n) is equivalent to -lpeg.P(n) (see the unary minus operation). If the argument is a boolean, the result is a pattern that always succeeds or always fails (according to the boolean value), without consuming any input. If the argument is a table, it is interpreted as a grammar (see Grammars). If the argument is a function, returns a pattern equivalent to a match-time capture over the empty string. lpeg.B(patt) Returns a pattern that matches only if the input string at the current position is preceded by patt. Pattern patt must match only strings with some fixed length, and it cannot contain captures. Like the and predicate, this pattern never consumes any input, independently of success or failure. lpeg.R ({range}) Returns a pattern that matches any single character belonging to one of the given ranges. Each range is a string xy of length 2, representing all characters with code between the codes of x and y (both inclusive). As an example, the pattern lpeg.R(""09"") matches any digit, and lpeg.R(""az"", ""AZ"") matches any ASCII letter. lpeg.S (string) Returns a pattern that matches any single character that appears in the given string. (The S stands for Set.) As an example, the pattern lpeg.S(""+-*/"") matches any arithmetic operator. Note that, if s is a character (that is, a string of length 1), then lpeg.P(s) is equivalent to lpeg.S(s) which is equivalent to lpeg.R(s..s). Note also that both lpeg.S("""") and lpeg.R() are patterns that always fail. lpeg.V (v) This operation creates a non-terminal (a variable) for a grammar. The created non-terminal refers to the rule indexed by v in the enclosing grammar. (See Grammars for details.) lpeg.locale ([table]) Returns a table with patterns for matching some character classes according to the current locale. The table has fields named alnum, alpha, cntrl, digit, graph, lower, print, punct, space, upper, and xdigit, each one containing a correspondent pattern. Each pattern matches any single character that belongs to its class. If called with an argument table, then it creates those fields inside the given table and returns that table. #patt Returns a pattern that matches only if the input string matches patt, but without consuming any input, independently of success or failure. (This pattern is called an and predicate and it is equivalent to &patt in the original PEG notation.) This pattern never produces any capture. -patt Returns a pattern that matches only if the input string does not match patt. It does not consume any input, independently of success or failure. (This pattern is equivalent to !patt in the original PEG notation.) As an example, the pattern -lpeg.P(1) matches only the end of string. This pattern never produces any captures, because either patt fails or -patt fails. (A failing pattern never produces captures.) patt1 + patt2 Returns a pattern equivalent to an ordered choice of patt1 and patt2. (This is denoted by patt1 / patt2 in the original PEG notation, not to be confused with the / operation in LPeg.) It matches either patt1 or patt2, with no backtracking once one of them succeeds. The identity element for this operation is the pattern lpeg.P(false), which always fails. If both patt1 and patt2 are character sets, this operation is equivalent to set union.  lower = lpeg.R(""az"") upper = lpeg.R(""AZ"") letter = lower + upper  patt1 - patt2 Returns a pattern equivalent to !patt2 patt1. This pattern asserts that the input does not match patt2 and then matches patt1. When successful, this pattern produces all captures from patt1. It never produces any capture from patt2 (as either patt2 fails or patt1 - patt2 fails). If both patt1 and patt2 are character sets, this operation is equivalent to set difference. Note that -patt is equivalent to """" - patt (or 0 - patt). If patt is a character set, 1 - patt is its complement. patt1 * patt2 Returns a pattern that matches patt1 and then matches patt2, starting where patt1 finished. The identity element for this operation is the pattern lpeg.P(true), which always succeeds. (LPeg uses the * operator [instead of the more obvious ..] both because it has the right priority and because in formal languages it is common to use a dot for denoting concatenation.) patt^n If n is nonnegative, this pattern is equivalent to pattn patt*: It matches n or more occurrences of patt. Otherwise, when n is negative, this pattern is equivalent to (patt?)-n: It matches at most |n| occurrences of patt. In particular, patt^0 is equivalent to patt*, patt^1 is equivalent to patt+, and patt^-1 is equivalent to patt? in the original PEG notation. In all cases, the resulting pattern is greedy with no backtracking (also called a possessive repetition). That is, it matches only the longest possible sequence of matches for patt. Grammars With the use of Lua variables, it is possible to define patterns incrementally, with each new pattern using previously defined ones. However, this technique does not allow the definition of recursive patterns. For recursive patterns, we need real grammars. LPeg represents grammars with tables, where each entry is a rule. The call lpeg.V(v) creates a pattern that represents the nonterminal (or variable) with index v in a grammar. Because the grammar still does not exist when this function is evaluated, the result is an open reference to the respective rule. A table is fixed when it is converted to a pattern (either by calling lpeg.P or by using it wherein a pattern is expected). Then every open reference created by lpeg.V(v) is corrected to refer to the rule indexed by v in the table. When a table is fixed, the result is a pattern that matches its initial rule. The entry with index 1 in the table defines its initial rule. If that entry is a string, it is assumed to be the name of the initial rule. Otherwise, LPeg assumes that the entry 1 itself is the initial rule. As an example, the following grammar matches strings of a's and b's that have the same number of a's and b's:  equalcount = lpeg.P{   ""S"";   -- initial rule name   S = ""a"" * lpeg.V""B"" + ""b"" * lpeg.V""A"" + """",   A = ""a"" * lpeg.V""S"" + ""b"" * lpeg.V""A"" * lpeg.V""A"",   B = ""b"" * lpeg.V""S"" + ""a"" * lpeg.V""B"" * lpeg.V""B"", } * -1  It is equivalent to the following grammar in standard PEG notation:    S <- 'a' B / 'b' A / ''   A <- 'a' S / 'b' A A   B <- 'b' S / 'a' B B  Captures A capture is a pattern that creates values (the so called semantic information) when it matches. LPeg offers several kinds of captures, which produces values based on matches and combine these values to produce new values. Each capture may produce zero or more values. The following table summarizes the basic captures: Operation What it Produces lpeg.C(patt) the match for patt plus all captures made by patt lpeg.Carg(n) the value of the nth extra argument to lpeg.match (matches the empty string) lpeg.Cb(name) the values produced by the previous group capture named name (matches the empty string) lpeg.Cc(values) the given values (matches the empty string) lpeg.Cf(patt, func) a folding of the captures from patt lpeg.Cg(patt [, name]) the values produced by patt, optionally tagged with name lpeg.Cp() the current position (matches the empty string) lpeg.Cs(patt) the match for patt with the values from nested captures replacing their matches lpeg.Ct(patt) a table with all captures from patt patt / string string, with some marks replaced by captures of patt patt / number the n-th value captured by patt, or no value when number is zero. patt / table table[c], where c is the (first) capture of patt patt / function the returns of function applied to the captures of patt lpeg.Cmt(patt, function) the returns of function applied to the captures of patt; the application is done at match time A capture pattern produces its values every time it succeeds. For instance, a capture inside a loop produces as many values as matched by the loop. A capture produces a value only when it succeeds. For instance, the pattern lpeg.C(lpeg.P""a""^-1) produces the empty string when there is no ""a"" (because the pattern ""a""? succeeds), while the pattern lpeg.C(""a"")^-1 does not produce any value when there is no ""a"" (because the pattern ""a"" fails). Usually, LPeg evaluates all captures only after (and if) the entire match succeeds. During match time it only gathers enough information to produce the capture values later. As a particularly important consequence, most captures cannot affect the way a pattern matches a subject. The only exception to this rule is the so-called match-time capture. When a match-time capture matches, it forces the immediate evaluation of all its nested captures and then calls its corresponding function, which defines whether the match succeeds and also what values are produced. lpeg.C (patt) Creates a simple capture, which captures the substring of the subject that matches patt. The captured value is a string. If patt has other captures, their values are returned after this one. lpeg.Carg (n) Creates an argument capture. This pattern matches the empty string and produces the value given as the nth extra argument given in the call to lpeg.match. lpeg.Cb (name) Creates a back capture. This pattern matches the empty string and produces the values produced by the most recent group capture named name (where name can be any Lua value). Most recent means the last complete outermost group capture with the given name. A Complete capture means that the entire pattern corresponding to the capture has matched. An Outermost capture means that the capture is not inside another complete capture. lpeg.Cc ([value, ...]) Creates a constant capture. This pattern matches the empty string and produces all given values as its captured values. lpeg.Cf (patt, func) Creates a fold capture. If patt produces a list of captures C1 C2 ... Cn, this capture will produce the value func(...func(func(C1, C2), C3)..., Cn), that is, it will fold (or accumulate, or reduce) the captures from patt using function func. This capture assumes that patt should produce at least one capture with at least one value (of any type), which becomes the initial value of an accumulator. (If you need a specific initial value, you may prefix a constant capture to patt.) For each subsequent capture, LPeg calls func with this accumulator as the first argument and all values produced by the capture as extra arguments; the first result from this call becomes the new value for the accumulator. The final value of the accumulator becomes the captured value. As an example, the following pattern matches a list of numbers separated by commas and returns their addition:  -- matches a numeral and captures its numerical value number = lpeg.R""09""^1 / tonumber  -- matches a list of numbers, capturing their values list = number * ("","" * number)^0  -- auxiliary function to add two numbers function add (acc, newvalue) return acc + newvalue end  -- folds the list of numbers adding them sum = lpeg.Cf(list, add)  -- example of use print(sum:match(""10,30,43""))   --> 83  lpeg.Cg (patt [, name]) Creates a group capture. It groups all values returned by patt into a single capture. The group may be anonymous (if no name is given) or named with the given name (which can be any non-nil Lua value). An anonymous group serves to join values from several captures into a single capture. A named group has a different behavior. In most situations, a named group returns no values at all. Its values are only relevant for a following back capture or when used inside a table capture. lpeg.Cp () Creates a position capture. It matches the empty string and captures the position in the subject where the match occurs. The captured value is a number. lpeg.Cs (patt) Creates a substitution capture, which captures the substring of the subject that matches patt, with substitutions. For any capture inside patt with a value, the substring that matched the capture is replaced by the capture value (which should be a string). The final captured value is the string resulting from all replacements. lpeg.Ct (patt) Creates a table capture. This capture creates a table and puts all values from all anonymous captures made by patt inside this table in successive integer keys, starting at 1. Moreover, for each named capture group created by patt, the first value of the group is put into the table with the group name as its key. The captured value is only the table. patt / string Creates a string capture. It creates a capture string based on string. The captured value is a copy of string, except that the character % works as an escape character: any sequence in string of the form %n, with n between 1 and 9, stands for the match of the n-th capture in patt. The sequence %0 stands for the whole match. The sequence %% stands for a single %. patt / number Creates a numbered capture. For a non-zero number, the captured value is the n-th value captured by patt. When number is zero, there are no captured values. patt / table Creates a query capture. It indexes the given table using as key the first value captured by patt, or the whole match if patt produced no value. The value at that index is the final value of the capture. If the table does not have that key, there is no captured value. patt / function Creates a function capture. It calls the given function passing all captures made by patt as arguments, or the whole match if patt made no capture. The values returned by the function are the final values of the capture. In particular, if function returns no value, there is no captured value. lpeg.Cmt(patt, function) Creates a match-time capture. Unlike all other captures, this one is evaluated immediately when a match occurs. It forces the immediate evaluation of all its nested captures and then calls function. The given function gets as arguments the entire subject, the current position (after the match of patt), plus any capture values produced by patt. The first value returned by function defines how the match happens. If the call returns a number, the match succeeds and the returned number becomes the new current position. (Assuming a subject s and current position i, the returned number must be in the range [i, len(s) + 1].) If the call returns true, the match succeeds without consuming any input. (So, to return true is equivalent to return i.) If the call returns false, nil, or no value, the match fails. Any extra values returned by the function become the values produced by the capture. Some Examples Using a Pattern This example shows a very simple but complete program that builds and uses a pattern:  local lpeg = require ""lpeg""  -- matches a word followed by end-of-string p = lpeg.R""az""^1 * -1  print(p:match(""hello""))        --> 6 print(lpeg.match(p, ""hello""))  --> 6 print(p:match(""1 hello""))      --> nil  The pattern is simply a sequence of one or more lower-case letters followed by the end of string (-1). The program calls match both as a method and as a function. In both sucessful cases, the match returns the index of the first character after the match, which is the string length plus one. Name-value lists This example parses a list of name-value pairs and returns a table with those pairs:  lpeg.locale(lpeg)   -- adds locale entries into 'lpeg' table  local space = lpeg.space^0 local name = lpeg.C(lpeg.alpha^1) * space local sep = lpeg.S("",;"") * space local pair = lpeg.Cg(name * ""="" * space * name) * sep^-1 local list = lpeg.Cf(lpeg.Ct("""") * pair^0, rawset) t = list:match(""a=b, c = hi; next = pi"")  --> { a = ""b"", c = ""hi"", next = ""pi"" }  Each pair has the format name = name followed by an optional separator (a comma or a semicolon). The pair pattern encloses the pair in a group pattern, so that the names become the values of a single capture. The list pattern then folds these captures. It starts with an empty table, created by a table capture matching an empty string; then for each capture (a pair of names) it applies rawset over the accumulator (the table) and the capture values (the pair of names). rawset returns the table itself, so the accumulator is always the table. Splitting a string The following code builds a pattern that splits a string using a given pattern sep as a separator:  function split (s, sep)   sep = lpeg.P(sep)   local elem = lpeg.C((1 - sep)^0)   local p = elem * (sep * elem)^0   return lpeg.match(p, s) end  First the function ensures that sep is a proper pattern. The pattern elem is a repetition of zero of more arbitrary characters as long as there is not a match against the separator. It also captures its match. The pattern p matches a list of elements separated by sep. If the split results in too many values, it may overflow the maximum number of values that can be returned by a Lua function. In this case, we can collect these values in a table:  function split (s, sep)   sep = lpeg.P(sep)   local elem = lpeg.C((1 - sep)^0)   local p = lpeg.Ct(elem * (sep * elem)^0)   -- make a table capture   return lpeg.match(p, s) end  Searching for a pattern The primitive match works only in anchored mode. If we want to find a pattern anywhere in a string, we must write a pattern that matches anywhere. Because patterns are composable, we can write a function that, given any arbitrary pattern p, returns a new pattern that searches for p anywhere in a string. There are several ways to do the search. One way is like this:  function anywhere (p)   return lpeg.P{ p + 1 * lpeg.V(1) } end  This grammar has a straight reading: it matches p or skips one character and tries again. If we want to know where the pattern is in the string (instead of knowing only that it is there somewhere), we can add position captures to the pattern:  local I = lpeg.Cp() function anywhere (p)   return lpeg.P{ I * p * I + 1 * lpeg.V(1) } end  print(anywhere(""world""):match(""hello world!""))   -> 7   12  Another option for the search is like this:  local I = lpeg.Cp() function anywhere (p)   return (1 - lpeg.P(p))^0 * I * p * I end  Again the pattern has a straight reading: it skips as many characters as possible while not matching p, and then matches p (plus appropriate captures). If we want to look for a pattern only at word boundaries, we can use the following transformer:  local t = lpeg.locale()  function atwordboundary (p)   return lpeg.P{     [1] = p + t.alpha^0 * (1 - t.alpha)^1 * lpeg.V(1)   } end  Balanced parentheses The following pattern matches only strings with balanced parentheses:  b = lpeg.P{ ""("" * ((1 - lpeg.S""()"") + lpeg.V(1))^0 * "")"" }  Reading the first (and only) rule of the given grammar, we have that a balanced string is an open parenthesis, followed by zero or more repetitions of either a non-parenthesis character or a balanced string (lpeg.V(1)), followed by a closing parenthesis. Global substitution The next example does a job somewhat similar to string.gsub. It receives a pattern and a replacement value, and substitutes the replacement value for all occurrences of the pattern in a given string:  function gsub (s, patt, repl)   patt = lpeg.P(patt)   patt = lpeg.Cs((patt / repl + 1)^0)   return lpeg.match(patt, s) end  As in string.gsub, the replacement value can be a string, a function, or a table. Comma-Separated Values (CSV) This example breaks a string into comma-separated values, returning all fields:  local field = '""' * lpeg.Cs(((lpeg.P(1) - '""') + lpeg.P'""""' / '""')^0) * '""' +                     lpeg.C((1 - lpeg.S',\n""')^0)  local record = field * (',' * field)^0 * (lpeg.P'\n' + -1)  function csv (s)   return lpeg.match(record, s) end  A field is either a quoted field (which may contain any character except an individual quote, which may be written as two quotes that are replaced by one) or an unquoted field (which cannot contain commas, newlines, or quotes). A record is a list of fields separated by commas, ending with a newline or the string end (-1). As it is, the previous pattern returns each field as a separated result. If we add a table capture in the definition of record, the pattern will return instead a single table containing all fields:  local record = lpeg.Ct(field * (',' * field)^0) * (lpeg.P'\n' + -1)  UTF-8 and Latin 1 It is not difficult to use LPeg to convert a string from UTF-8 encoding to Latin 1 (ISO 8859-1):  -- convert a two-byte UTF-8 sequence to a Latin 1 character local function f2 (s)   local c1, c2 = string.byte(s, 1, 2)   return string.char(c1 * 64 + c2 - 12416) end  local utf8 = lpeg.R(""\0\127"")            + lpeg.R(""\194\195"") * lpeg.R(""\128\191"") / f2  local decode_pattern = lpeg.Cs(utf8^0) * -1  In this code, the definition of UTF-8 is already restricted to the Latin 1 range (from 0 to 255). Any encoding outside this range (as well as any invalid encoding) will not match that pattern. As the definition of decode_pattern demands that the pattern matches the whole input (because of the -1 at its end), any invalid string will simply fail to match, without any useful information about the problem. We can improve this situation redefining decode_pattern as follows:  local function er (_, i) error(""invalid encoding at position "" .. i) end  local decode_pattern = lpeg.Cs(utf8^0) * (-1 + lpeg.P(er))  Now, if the pattern utf8^0 stops before the end of the string, an appropriate error function is called. UTF-8 and Unicode We can extend the previous patterns to handle all Unicode code points. Of course, we cannot translate them to Latin 1 or any other one-byte encoding. Instead, our translation results in a array with the code points represented as numbers. The full code is here:  -- decode a two-byte UTF-8 sequence local function f2 (s)   local c1, c2 = string.byte(s, 1, 2)   return c1 * 64 + c2 - 12416 end  -- decode a three-byte UTF-8 sequence local function f3 (s)   local c1, c2, c3 = string.byte(s, 1, 3)   return (c1 * 64 + c2) * 64 + c3 - 925824 end  -- decode a four-byte UTF-8 sequence local function f4 (s)   local c1, c2, c3, c4 = string.byte(s, 1, 4)   return ((c1 * 64 + c2) * 64 + c3) * 64 + c4 - 63447168 end  local cont = lpeg.R(""\128\191"")   -- continuation byte  local utf8 = lpeg.R(""\0\127"") / string.byte            + lpeg.R(""\194\223"") * cont / f2            + lpeg.R(""\224\239"") * cont * cont / f3            + lpeg.R(""\240\244"") * cont * cont * cont / f4  local decode_pattern = lpeg.Ct(utf8^0) * -1  Lua's long strings A long string in Lua starts with the pattern [=*[ and ends at the first occurrence of ]=*] with exactly the same number of equal signs. If the opening brackets are followed by a newline, this newline is discarded (that is, it is not part of the string). To match a long string in Lua, the pattern must capture the first repetition of equal signs and then, whenever it finds a candidate for closing the string, check whether it has the same number of equal signs.  equals = lpeg.P""=""^0 open = ""["" * lpeg.Cg(equals, ""init"") * ""["" * lpeg.P""\n""^-1 close = ""]"" * lpeg.C(equals) * ""]"" closeeq = lpeg.Cmt(close * lpeg.Cb(""init""), function (s, i, a, b) return a == b end) string = open * lpeg.C((lpeg.P(1) - closeeq)^0) * close / 1  The open pattern matches [=*[, capturing the repetitions of equal signs in a group named init; it also discharges an optional newline, if present. The close pattern matches ]=*], also capturing the repetitions of equal signs. The closeeq pattern first matches close; then it uses a back capture to recover the capture made by the previous open, which is named init; finally it uses a match-time capture to check whether both captures are equal. The string pattern starts with an open, then it goes as far as possible until matching closeeq, and then matches the final close. The final numbered capture simply discards the capture made by close. Arithmetic expressions This example is a complete parser and evaluator for simple arithmetic expressions. We write it in two styles. The first approach first builds a syntax tree and then traverses this tree to compute the expression value:  -- Lexical Elements local Space = lpeg.S("" \n\t"")^0 local Number = lpeg.C(lpeg.P""-""^-1 * lpeg.R(""09"")^1) * Space local TermOp = lpeg.C(lpeg.S(""+-"")) * Space local FactorOp = lpeg.C(lpeg.S(""*/"")) * Space local Open = ""("" * Space local Close = "")"" * Space  -- Grammar local Exp, Term, Factor = lpeg.V""Exp"", lpeg.V""Term"", lpeg.V""Factor"" G = lpeg.P{ Exp,   Exp = lpeg.Ct(Term * (TermOp * Term)^0);   Term = lpeg.Ct(Factor * (FactorOp * Factor)^0);   Factor = Number + Open * Exp * Close; }  G = Space * G * -1  -- Evaluator function eval (x)   if type(x) == ""string"" then     return tonumber(x)   else     local op1 = eval(x[1])     for i = 2, #x, 2 do       local op = x[i]       local op2 = eval(x[i + 1])       if (op == ""+"") then op1 = op1 + op2       elseif (op == ""-"") then op1 = op1 - op2       elseif (op == ""*"") then op1 = op1 * op2       elseif (op == ""/"") then op1 = op1 / op2       end     end     return op1   end end  -- Parser/Evaluator function evalExp (s)   local t = lpeg.match(G, s)   if not t then error(""syntax error"", 2) end   return eval(t) end  -- small example print(evalExp""3 + 5*9 / (1+1) - 12"")   --> 13.5  The second style computes the expression value on the fly, without building the syntax tree. The following grammar takes this approach. (It assumes the same lexical elements as before.)  -- Auxiliary function function eval (v1, op, v2)   if (op == ""+"") then return v1 + v2   elseif (op == ""-"") then return v1 - v2   elseif (op == ""*"") then return v1 * v2   elseif (op == ""/"") then return v1 / v2   end end  -- Grammar local V = lpeg.V G = lpeg.P{ ""Exp"",   Exp = lpeg.Cf(V""Term"" * lpeg.Cg(TermOp * V""Term"")^0, eval);   Term = lpeg.Cf(V""Factor"" * lpeg.Cg(FactorOp * V""Factor"")^0, eval);   Factor = Number / tonumber + Open * V""Exp"" * Close; }  -- small example print(lpeg.match(G, ""3 + 5*9 / (1+1) - 12""))   --> 13.5  Note the use of the fold (accumulator) capture. To compute the value of an expression, the accumulator starts with the value of the first term, and then applies eval over the accumulator, the operator, and the new term for each repetition. Download LPeg source code. License Copyright © 2007-2015 Lua.org, PUC-Rio. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. $Id: lpeg.html,v 1.75 2015/09/28 17:17:41 roberto Exp $"	"null"	"null"	"A pattern-matching library for Lua, based on Parsing Expression Grammars."	"true"
"Parsing"	"lunamark"	"https://github.com/jgm/lunamark"	"Converts Markdown to other textual formats including HTML and LaTeX. Uses LPeg for fast parsing."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"104"	"12"	"16"	"GitHub - jgm/lunamark: Lua library for conversion between markup formats Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 104 Fork 16 jgm/lunamark Code Issues 3 Pull requests 0 Pulse Graphs Lua library for conversion between markup formats 743 commits 4 branches 4 releases Fetching contributors C 53.1% HTML 25.7% Lua 16.4% C++ 2.5% Makefile 1.4% Groff 0.7% Other 0.2% C HTML Lua C++ Makefile Groff Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master ropes v2 Nothing to show 0.4.0 0.3 0.2 0.1 Nothing to show New pull request Latest commit 8a3eb0f Apr 16, 2016 jgm Updated changelog. Permalink Failed to load latest commit information. bin Version 0.4.0. Apr 16, 2016 lunamark Fix compatibility with lpeg 1.0 Apr 17, 2016 standalone Moved lua -> lua-5.1.5. Small fixes in Makefile. Oct 26, 2012 templates Removed title h1 in web template. Sep 17, 2011 tests Added test for reference defined in blockquote. Sep 24, 2011 LICENSE Update copyright year Apr 16, 2016 Makefile Version 0.4.0. Apr 17, 2016 README.markdown Don't run the failing PHP Markdown tests by default. Apr 16, 2016 TODO Use ropes in dzslides, docbook, groff, html5 writers. Jul 19, 2012 changelog Updated changelog. Apr 16, 2016 lunamark-0.2-1.rockspec Revert ""Revert ""Use git url for rockspec."""" Sep 17, 2011 lunamark-0.2-2.rockspec Added new rockspec. Oct 26, 2012 lunamark-0.3-1.rockspec Fixed tag in rockspec. Oct 26, 2012 lunamark-0.3-2.rockspec Added new rockspec version without unneeded bit32 dependency. Oct 27, 2012 lunamark.lua Small documentation changes. Oct 26, 2012 rockspec.in Depend on luautf8 Apr 16, 2016 README.markdown Lunamark Lunamark is a lua library and command-line program for conversion of markdown to other textual formats. Currently HTML, dzslides, Docbook, ConTeXt, LaTeX, and Groff man are the supported output formats, but it is easy to add new writers or modify existing ones. The markdown parser is written using a PEG grammar and can also be modified by the user. The library is as portable as lua and has very good performance. It is roughly as fast as the author's own C library peg-markdown, two orders of magnitude faster than Markdown.pl, and three orders of magnitude faster than markdown.lua. Links Source code repository Issue tracker Website API documentation lunamark(1) lunadoc(1) Extensions Lunamark's markdown parser currently supports a number of extensions (which can be turned on or off individually), including: Smart typography (fancy quotes, dashes, ellipses) Significant start numbers in ordered lists Footnotes Definition lists Pandoc-style title blocks Flexible metadata using lua declarations See the lunamark(1) man page for a complete list. It is very easy to extend the library by modifying the writers, adding new writers, and even modifying the markdown parser. Some simple examples are given in the API documentation. Benchmarks Generated with PROG=$program make bench  This converts the input files from the original markdown test suite concatenated together 25 times.      0.04s   sundown      0.15s   discount ->   0.56s   lunamark + luajit      0.80s   peg-markdown ->   0.97s   lunamark      4.05s   PHP Markdown      6.11s   pandoc    113.13s   Markdown.pl   2322.33s   markdown.lua  Installing If you want a standalone version of lunamark that doesn't depend on lua or other lua modules being installed on your system, just do make standalone  Your executable will be created in the standalone directory. If you are a lua user, you will probably prefer to install lunamark using luarocks. You can install the latest development version this way: git clone http://github.com/jgm/lunamark.git cd lunamark luarocks make  Released versions will be uploaded to the luarocks repository, so you should be able to install them using: luarocks install lunamark  There may be a short delay between the release and the luarocks upload. Using the library Simple usage example: local lunamark = require(""lunamark"") local opts = { } local writer = lunamark.writer.html.new(opts) local parse = lunamark.reader.markdown.new(writer, opts) print(parse(""Here's my *text*""))  For more examples, see API documentation. lunamark The lunamark executable allows easy markdown conversion from the command line. For usage instructions, see the lunamark(1) man page. lunadoc Lunamark comes with a simple lua library documentation tool, lunadoc. For usage instructions, see the lunadoc(1) man page. lunadoc reads source files and parses specially marked markdown comment blocks. Here is an example of the result. Tests The source directory contains a large test suite in tests. This includes existing Markdown and PHP Markdown tests, plus more tests for lunamark-specific features and additional corner cases. To run the tests, use bin/shtest. bin/shtest --help            # get usage bin/shtest                   # run all tests bin/shtest indent            # run all tests matching ""indent"" bin/shtest -p Markdown.pl -t # run all tests using Markdown.pl, and normalize using 'tidy'  Lunamark currently fails four of the PHP Markdown tests: tests/PHP_Markdown/Quotes in attributes.test: The HTML is semantically equivalent; using the -t/--tidy option to bin/shtest makes the test pass. tests/PHP_Markdown/Email auto links.test: The HTML is semantically equivalent. PHP markdown does entity obfuscation, and lunamark does not. This feature could be added easily enough, but the test would still fail, because the obfuscation involves randomness. Again, using the -t/--tidy option makes the test pass. tests/PHP_Markdown/Ins & del.test: PHP markdown puts extra <p> tags around <ins>hello</ins>, while lunamark does not. It's hard to tell from the markdown spec which behavior is correct. tests/PHP_Markdown/Emphasis.test: A bunch of corner cases with nested strong and emphasized text. These corner cases are left undecided by the markdown spec, so in my view the PHP test suite is not normative here; I think lunamark's behavior is perfectly reasonable, and I see no reason to change. The make test target only runs the Markdown and lunamark tests, skipping the PHP Markdown tests. Authors lunamark is released under the MIT license. Most of the library is written by John MacFarlane. Hans Hagen made some major performance improvements. Khaled Hosny added the original ConTeXt writer. The dzslides HTML, CSS, and javascript code is by Paul Rouget, released under the DWTFYWT Public License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jgm/lunamark"	"Converts Markdown to other textual formats including HTML and LaTeX. Uses LPeg for fast parsing."	"true"
"Humanize"	"i18n.lua"	"https://github.com/kikito/i18n.lua"	"Internationalization library with locales, formatting, and pluralization."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"49"	"11"	"14"	"GitHub - kikito/i18n.lua: A very complete i18n lib for Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 49 Fork 14 kikito/i18n.lua Code Issues 2 Pull requests 1 Pulse Graphs A very complete i18n lib for Lua 54 commits 3 branches 3 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master plural travis Nothing to show v0.9.1 v0.9.0 v0.5.0 Nothing to show New pull request Latest commit ae07fa0 Apr 4, 2016 kikito rockspec for 0.9.1 Permalink Failed to load latest commit information. i18n bump version to 0.9.1 Apr 4, 2016 rockspecs rockspec for 0.9.1 Apr 4, 2016 spec remove locales from test, to avoid stack overflows Apr 16, 2015 .travis.yml travis for busted Apr 16, 2015 LICENSE added license and initial readme Oct 7, 2012 README.md update readme Apr 16, 2015 README.md i18n.lua A very complete i18n lib for Lua Description i18n = require 'i18n'  -- loading stuff i18n.set('en.welcome', 'welcome to this program') i18n.load({   en = {     good_bye = ""good-bye!"",     age_msg = ""your age is %{age}.""     phone_msg = {       one = ""you have one new message."",       other = ""you have %{count} new messages.""     }   } }) i18n.loadFile('path/to/your/files/en.lua') -- maybe load some more stuff from that file  -- setting the translation context i18n.setLocale('en') -- English is the default locale anyway  -- getting translations i18n.translate('welcome') -- Welcome to this program i18n('welcome') -- Welcome to this program i18n('age_msg', {age = 18}) -- Your age is 18. i18n('phone_msg', {count = 1}) -- You have one new message. i18n('phone_msg', {count = 2}) -- You have 2 new messages. i18n('good_bye') -- Good-bye!  Interpolation You can interpolate variables in 3 different ways: -- the most usual one i18n.set('en.variables', 'Interpolating variables: %{name} %{age}') i18n('variables', {name='john', 'age'=10}) -- Interpolating variables: john 10  i18n.set('en.lua', 'Traditional Lua way: %d %s') i18n('lua', {1, 'message'}) -- Traditional Lua way: 1 message  i18n.set('en.combined', 'Combined: %<name>.q %<age>.d %<age>.o') i18n('combined', {name='john', 'age'=10}) -- Combined: john 10 12k Pluralization This lib implements the unicode.org plural rules. Just set the locale you want to use and it will deduce the appropiate pluralization rules: i18n = require 'i18n'  i18n.load({   en = {     msg = {       one   = ""one message"",       other = ""%{count} messages""     }   },   ru = {     msg = {       one   = ""1 сообщение"",       few   = ""%{count} сообщения"",       many  = ""%{count} сообщений"",       other = ""%{count} сообщения""     }   } })  i18n('msg', {count = 1}) -- one message i18n.setLocale('ru') i18n('msg', {count = 5}) -- 5 сообщений The appropiate rule is chosen by finding the 'root' of the locale used: for example if the current locale is 'fr-CA', the 'fr' rules will be applied. If the provided functions are not enough (i.e. invented languages) it's possible to specify a custom pluralization function in the second parameter of setLocale. This function must return 'one', 'few', 'other', etc given a number. Fallbacks When a value is not found, the lib has several fallback mechanisms: First, it will look in the current locale's parents. For example, if the locale was set to 'en-US' and the key 'msg' was not found there, it will be looked over in 'en'. Second, if the value is not found in the locale ancestry, a 'fallback locale' (by default: 'en') can be used. If the fallback locale has any parents, they will be looked over too. Third, if all the locales have failed, but there is a param called 'default' on the provided data, it will be used. Otherwise the translation will return nil. The parents of a locale are found by splitting the locale by its hyphens. Other separation characters (spaces, underscores, etc) are not supported. Specs This project uses busted for its specs. If you want to run the specs, you will have to install it first. Then just execute the following from the root inspect folder: busted  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kikito/i18n.lua"	"Internationalization library with locales, formatting, and pluralization."	"true"
"Humanize"	"inspect.lua"	"https://github.com/kikito/inspect.lua"	"Human-readable representation of Lua tables."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"300"	"32"	"62"	"GitHub - kikito/inspect.lua: Human-readable representation of Lua tables Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 300 Fork 62 kikito/inspect.lua Code Issues 0 Pull requests 0 Pulse Graphs Human-readable representation of Lua tables https://github.com/kikito/inspect.lua 143 commits 3 branches 11 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dev eLua master Nothing to show v3.1.0 v3.0.3 v3.0.2 v3.0.1 v3.0.0 v2.0.0 v1.2.1 v1.2.0 1.1.1 1.1 1.0 Nothing to show New pull request Latest commit a384174 Apr 10, 2016 kikito updates version to 3.1.0 Permalink Failed to load latest commit information. rockspecs adds new rockspec Apr 8, 2016 spec Splits specs into two, to illustrate the different handling of escape… Apr 10, 2016 .travis.yml updates travis to include coverage & static analysis Mar 6, 2016 CHANGELOG.md updates version to 3.1.0 Apr 10, 2016 MIT-LICENSE.txt moved to MIT license Sep 14, 2013 README.md updates travis to include coverage & static analysis Mar 6, 2016 inspect.lua updates version to 3.1.0 Apr 10, 2016 README.md inspect.lua This library transforms any Lua value into a human-readable representation. It is especially useful for debugging errors in tables. The objective here is human understanding (i.e. for debugging), not serialization or compactness. Examples of use inspect has the following declaration: local str = inspect(value, <options>). value can be any Lua value. inspect transforms simple types (like strings or numbers) into strings. assert(inspect(1) == ""1"") assert(inspect(""Hello"") == '""Hello""') Tables, on the other hand, are rendered in a way a human can read easily. ""Array-like"" tables are rendered horizontally: assert(inspect({1,2,3,4}) == ""{ 1, 2, 3, 4 }"") ""Dictionary-like"" tables are rendered with one element per line: assert(inspect({a=1,b=2}) == [[{   a = 1,   b = 2 }]]) The keys will be sorted alphanumerically when possible. ""Hybrid"" tables will have the array part on the first line, and the dictionary part just below them: assert(inspect({1,2,3,b=2,a=1}) == [[{ 1, 2, 3,   a = 1,   b = 2 }]]) Subtables are indented with two spaces per level. assert(inspect({a={b=2}}) == [[{   a = {     b = 2   } }]]) Functions, userdata and any other custom types from Luajit are simply as <function x>, <userdata x>, etc.: assert(inspect({ f = print, ud = some_user_data, thread = a_thread} ) == [[{   f = <function 1>,   u = <userdata 1>,   thread = <thread 1> }]]) If the table has a metatable, inspect will include it at the end, in a special field called <metatable>: assert(inspect(setmetatable({a=1}, {b=2}) == [[{   a = 1   <metatable> = {     b = 2   } }]])) inspect can handle tables with loops inside them. It will print <id> right before the table is printed out the first time, and replace the whole table with <table id> from then on, preventing infinite loops. local a = {1, 2} local b = {3, 4, a} a[3] = b -- a references b, and b references a assert(inspect(a) == ""<1>{ 1, 2, { 3, 4, <table 1> } }"") Notice that since both a appears more than once in the expression, it is prefixed by <1> and replaced by <table 1> every time it appears later on. options inspect has a second parameter, called options. It is not mandatory, but when it is provided, it must be a table. options.depth options.depth sets the maximum depth that will be printed out. When the max depth is reached, inspect will stop parsing tables and just return {...}: local t5 = {a = {b = {c = {d = {e = 5}}}}}  assert(inspect(t5, {depth = 4}) == [[{   a = {     b = {       c = {         d = {...}       }     }   } }]])  assert(inspect(t5, {depth = 2}) == [[{   a = {     b = {...}   } }]])  options.depth defaults to infinite (math.huge). options.newline & options.indent These are the strings used by inspect to respectively add a newline and indent each level of a table. By default, options.newline is ""\n"" and options.indent is "" "" (two spaces). local t = {a={b=1}}  assert(inspect(t) == [[{   a = {     b = 1   } }]])  assert(inspect(t, {newline='@', indent=""++""}), ""{@++a = {@++++b = 1@++}@}"" options.process options.process is a function which allow altering the passed object before transforming it into a string. A typical way to use it would be to remove certain values so that they don't appear at all. options.process has the following signature: local processed_item = function(item, path) item is either a key or a value on the table, or any of its subtables path is an array-like table built with all the keys that have been used to reach item, from the root. For values, it is just a regular list of keys. For example, to reach the 1 in {a = {b = 1}}, the path will be {'a', 'b'} For keys, the special value inspect.KEY is inserted. For example, to reach the c in {a = {b = {c = 1}}}, the path will be {'a', 'b', 'c', inspect.KEY } For metatables, the special value inspect.METATABLE is inserted. For {a = {b = 1}}}, the path {'a', {b = 1}, inspect.METATABLE} means ""the metatable of the table {b = 1}"". processed_item is the value returned by options.process. If it is equal to item, then the inspected table will look unchanged. If it is different, then the table will look different; most notably, if it's nil, the item will dissapear on the inspected table. Examples Remove a particular metatable from the result: local t = {1,2,3} local mt = {b = 2} setmetatable(t, mt)  local remove_mt = function(item)   if item ~= mt then return item end end  -- mt does not appear assert(inspect(t, {process = remove_mt}) == ""{ 1, 2, 3 }"") The previous exaple only works for a particular metatable. If you want to make all metatables, you can use the path parameter to check wether the last element is inspect.METATABLE, and return nil instead of the item: local t, mt = ... -- (defined as before)  local remove_all_metatables = function(item, path)   if path[#path] ~= inspect.METATABLE then return item end end  assert(inspect(t, {process = remove_all_metatables}) == ""{ 1, 2, 3 }"") Filter a value: local anonymize_password = function(item, path)   if path[#path] == 'password' then return ""XXXX"" end   return item end  local info = {user = 'peter', password = 'secret'}  assert(inspect(info, {process = anonymize_password}) == [[{   password = ""XXXX"",   user     = ""peter"" }]]) Gotchas / Warnings This method is not appropriate for saving/restoring tables. It is meant to be used by the programmer mainly while debugging a program. Installation If you are using luarocks, just run luarocks install inspect  Otherwise, you can just copy the inspect.lua file somewhere in your projects (maybe inside a /lib/ folder) and require it accordingly. Remember to store the value returned by require somewhere! (I suggest a local variable named inspect, although others might like table.inspect) local inspect = require 'inspect'       -- or -- local inspect = require 'lib.inspect'  Also, make sure to read the license; the text of that license file must appear somewhere in your projects' files. For your convenience, it's included at the begining of inspect.lua. Specs This project uses busted for its specs. If you want to run the specs, you will have to install busted first. Then just execute the following from the root inspect folder: busted  Change log Read it on the CHANGELOG.md file Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/kikito/inspect.lua"	"Human-readable representation of Lua tables."	"true"
"Humanize"	"serpent"	"https://github.com/pkulchenko/serpent"	"Serializer and pretty printer."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"131"	"13"	"16"	"GitHub - pkulchenko/serpent: Lua serializer and pretty printer Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 131 Fork 16 pkulchenko/serpent Code Issues 5 Pull requests 0 Pulse Graphs Lua serializer and pretty printer 73 commits 2 branches 9 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master rawstring Nothing to show 0.28 0.27 0.26 0.25 0.24 0.23 0.22 0.21 0.19 Nothing to show New pull request Latest commit 545c8fc Jul 24, 2015 pkulchenko Added `keyignore` option for the serializer. Permalink Failed to load latest commit information. misc Updated documentation for 0.28. May 6, 2015 src Added `keyignore` option for the serializer. Jul 24, 2015 t Added numeric format to preserve floating point precision (closes #17). May 7, 2015 LICENSE Updated LICENSE information. Oct 5, 2013 README.md Added `keyignore` option for the serializer. Jul 25, 2015 README.md Serpent Lua serializer and pretty printer. Features Human readable: Provides single-line and multi-line output. Nested tables are properly indented in the multi-line output. Numerical keys are listed first. Keys are (optionally) sorted alphanumerically. Array part skips keys ({'a', 'b'} instead of {[1] = 'a', [2] = 'b'}). nil values are included when expected ({1, nil, 3} instead of {1, [3]=3}). Keys use short notation ({foo = 'foo'} instead of {['foo'] = 'foo'}). Shared references and self-references are marked in the output. Machine readable: provides reliable deserialization using loadstring(). Supports deeply nested tables. Supports tables with self-references. Keeps shared tables and functions shared after de/serialization. Supports function serialization using string.dump(). Supports serialization of global functions. Supports __tostring and __serialize metamethods. Escapes new-line \010 and end-of-file control \026 characters in strings. Configurable with options and custom formatters. Usage local serpent = require(""serpent"") local a = {1, nil, 3, x=1, ['true'] = 2, [not true]=3} a[a] = a -- self-reference with a table as key and value  print(serpent.dump(a)) -- full serialization print(serpent.line(a)) -- single line, no self-ref section print(serpent.block(a)) -- multi-line indented, no self-ref section  local fun, err = loadstring(serpent.dump(a)) if err then error(err) end local copy = fun()  -- or using serpent.load: local ok, copy = serpent.load(serpent.dump(a)) print(ok and copy[3] == a[3]) Functions Serpent provides three functions that are shortcuts to the same internal function, but set different options by default: dump(a[, {...}]) -- full serialization; sets name, compact and sparse options; line(a[, {...}]) -- single line pretty printing, no self-ref section; sets sortkeys and comment options; block(a[, {...}]) -- multi-line indented pretty printing, no self-ref section; sets indent, sortkeys, and comment options. Note that line and block functions return pretty-printed data structures and if you want to deserialize them, you need to add return before running them through loadstring. For example: loadstring('return '..require('mobdebug').line(""foo""))() == ""foo"". While you can use loadstring or load functions to load serialized fragments, Serpent also provides load function that adds safety checks and reports an error if there is any executable code in the fragment. ok, res = serpent.load(str[, {safe = true}]) -- loads serialized fragment; you need to pass {safe = false} as the second value if you want to turn safety checks off. Similar to pcall and loadstring calls, load returns status as the first value and the result or the error message as the second value. Options indent (string) -- indentation; triggers long multi-line output comment (true/false/maxlevel) -- provide stringified value in a comment (up to maxlevel of depth) sortkeys (true/false/function) -- sort keys sparse (true/false) -- force sparse encoding (no nil filling based on #t) compact (true/false) -- remove spaces fatal (true/False) -- raise fatal error on non-serilizable values nocode (true/False) -- disable bytecode serialization for easy comparison nohuge (true/False) -- disable checking numbers against undefined and huge values maxlevel (number) -- specify max level up to which to expand nested tables maxnum (number) -- specify max number of elements in a table numformat (string; ""%.17g"") -- specify format for numeric values (shortest possible round-trippable double) valignore (table) -- allows to specify a list of values to ignore (as keys) keyallow (table) -- allows to specify the list of keys to be serialized. Any keys not in this list are not included in final output (as keys) keyignore (table) -- allows to specity the list of keys to ignore in serialization. valtypeignore (table) -- allows to specify a list of value types to ignore (as keys) custom (function) -- provide custom output for tables name (string) -- name; triggers full serialization with self-ref section These options can be provided as a second parameter to Serpent functions. block(a, {fatal = true}) line(a, {nocode = true, valignore = {[arrayToIgnore] = true}}) function todiff(a) return dump(a, {nocode = true, indent = ' '}) end Serpent functions set these options to different default values: dump sets compact and sparse to true; line sets sortkeys and comment to true; block sets sortkeys and comment to true and indent to ' '. Metatables with __tostring and __serialize methods If a table or a userdata value has __tostring or __serialize method, the method will be used to serialize the value. If __serialize method is present, it will be called with the value as a parameter. if __serialize method is not present, but __tostring is, then tostring will be called with the value as a parameter. In both cases, the result will be serialized, so __serialize method can return a table, that will be serialize and replace the original value. Sorting A custom sort function can be provided to sort the contents of tables. The function takes 2 parameters, the first being the table (a list) with the keys, the second the original table. It should modify the first table in-place, and return nothing. For example, the following call will apply a sort function identical to the standard sort, except that it will not distinguish between lower- and uppercase. local mysort  = function(k, o) -- k=keys, o=original table   local maxn, to = 12, {number = 'a', string = 'b'}   local function padnum(d) return (""%0""..maxn..""d""):format(d) end   local sort = function(a,b)     -- this -vvvvvvvvvv- is needed to sort array keys first     return ((k[a] and 0 or to[type(a)] or 'z')..(tostring(a):gsub(""%d+"",padnum))):upper()          < ((k[b] and 0 or to[type(b)] or 'z')..(tostring(b):gsub(""%d+"",padnum))):upper()   end   table.sort(k, sort) end  local content = { some = 1, input = 2, To = 3, serialize = 4 } local result = require('serpent').block(content, {sortkeys = mysort}) Formatters Serpent supports a way to provide a custom formatter that allows to fully customize the output. The formatter takes four values: tag -- the name of the current element with '=' or an empty string in case of array index, head -- an opening table bracket { and associated indentation and newline (if any), body -- table elements concatenated into a string using commas and indentation/newlines (if any), and tail -- a closing table bracket } and associated indentation and newline (if any). For example, the following call will apply `Foo{bar} notation to its output (used by Metalua to display ASTs): print((require ""serpent"").block(ast, {comment = false, custom =   function(tag,head,body,tail)     local out = head..body..tail     if tag:find('^lineinfo') then       out = out:gsub(""\n%s+"", """") -- collapse lineinfo to one line     elseif tag == '' then       body = body:gsub('%s*lineinfo = [^\n]+', '')       local _,_,atag = body:find('tag = ""(%w+)""%s*$')       if atag then         out = ""`""..atag..head.. body:gsub('%s*tag = ""%w+""%s*$', '')..tail         out = out:gsub(""\n%s+"", """"):gsub("",}"",""}"")       else out = head..body..tail end     end     return tag..out   end})) Limitations Doesn't handle userdata (except filehandles in io.* table). Threads, function upvalues/environments, and metatables are not serialized. Performance A simple performance test against serialize.lua from metalua, pretty.write from Penlight, and tserialize.lua from lua-nucleo is included in t/bench.lua. These are the results from one of the runs: nucleo (1000): 0.256s metalua (1000): 0.177s serpent (1000): 0.22s serpent (1000): 0.161s -- no comments, no string escapes, no math.huge check penlight (1000): 0.132s Serpent does additional processing to escape \010 and \026 characters in strings (to address http://lua-users.org/lists/lua-l/2007-07/msg00362.html, which is already fixed in Lua 5.2) and to check all numbers for math.huge. The seconds number excludes this processing to put it on an equal footing with other modules that skip these checks (nucleo still checks for math.huge). Author Paul Kulchenko (paul@kulchenko.com) License See LICENSE file. History v0.28 (May 06 2015) Switched to a method proposed by @SoniEx2 to disallow function calls (#15). Added more tostring for Lua 5.3 support (pkulchenko/ZeroBraneStudio#401). Updated environment handling to localize the impact (#15). Added setting env to protect against assigning global functions (closes #15). Updated tests to work with Lua 5.3. Added explicit tostring for Lua 5.3 with LUA_NOCVTN2S set (pkulchenko/ZeroBraneStudio#401). Fixed crash when not all Lua standard libraries are loaded (thanks to Tommy Nguyen). Improved Lua 5.2 support for serialized functions. v0.27 (Jan 11 2014) Fixed order of elements in the array part with sortkeys=true (fixes #13). Updated custom formatter documentation (closes #11). Added load function to deserialize; updated documentation (closes #9). v0.26 (Nov 05 2013) Added load function that (safely) loads serialized/pretty-printed values. Updated documentation. v0.25 (Sep 29 2013) Added maxnum option to limit the number of elements in tables. Optimized processing of tables with numeric indexes. v0.24 (Jun 12 2013) Fixed an issue with missing numerical keys (fixes #8). Fixed an issue with luaffi that returns getmetatable(ffi.C) as true. v0.23 (Mar 24 2013) Added support for cdata type in LuaJIT (thanks to Evan). Added comment to indicate incomplete output. Added support for metatables with __serialize method. Added handling of metatables with __tostring method. Fixed an issue with having too many locals in self-reference section. Fixed emitting premature circular reference in self-reference section, which caused invalid serialization. Modified the sort function signature to also pass the original table, so not only keys are available when sorting, but also the values in the original table. v0.22 (Jan 15 2013) Added ability to process __tostring results that may be non-string values. v0.21 (Jan 08 2013) Added keyallow and valtypeignore options (thanks to Jess Telford). Renamed ignore to valignore. v0.19 (Nov 16 2012) Fixed an issue with serializing shared functions as keys. Added serialization of metatables using __tostring (when present). v0.18 (Sep 13 2012) Fixed an issue with serializing data structures with circular references that require emitting temporary variables. Fixed an issue with serializing keys pointing to shared references. Improved overall serialization logic to inline values when possible. v0.17 (Sep 12 2012) Fixed an issue with serializing userdata that doesn't provide tostring(). v0.16 (Aug 28 2012) Removed confusing --[[err]] comment from serialized results. Added a short comment to serialized functions when the body is skipped. v0.15 (Jun 17 2012) Added ignore option to allow ignoring table values. Added comment=num option to set the max level up to which add comments. Changed all comments (except math.huge) to be controlled by comment option. v0.14 (Jun 13 2012) Fixed an issue with string keys with numeric values ['3'] getting mixed with real numeric keys (only with sortkeys option set to true). Fixed an issue with negative and real value numeric keys being misplaced. v0.13 (Jun 13 2012) Added maxlevel option. Fixed key sorting such that true and 'true' are always sorted in the same order (for a more stable output). Removed addresses from names of temporary variables (for stable output). v0.12 (Jun 12 2012) Added options to configure serialization process. Added goto to the list of keywords for Lua 5.2. Changed interface to dump/line/block methods. Changed math.huge to 1/0 for better portability. Replaced \010 with \n for better readability. v0.10 (Jun 03 2012) First public release. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/pkulchenko/serpent"	"Serializer and pretty printer."	"true"
"Humanize"	"Ser"	"https://github.com/gvx/Ser"	"Dead simple serializer with good performance."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"45"	"8"	"4"	"GitHub - gvx/Ser: A fast, robust, richly-featured table serialisation library for Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 45 Fork 4 gvx/Ser Code Issues 0 Pull requests 0 Pulse Graphs A fast, robust, richly-featured table serialisation library for Lua 12 commits 1 branch 0 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 3bea795 May 20, 2016 gvx Resolve #4 … This implements @pgimeno's suggestion. Permalink Failed to load latest commit information. LICENSE.md Initial commit Nov 3, 2013 README.md Deprecated Feb 16, 2016 bigtest.lua Add support for lots of tables (> 200) Dec 23, 2014 ser.lua Resolve #4 May 20, 2016 tests.lua Apply ivan's optimisation May 25, 2015 README.md Since 2016-02-16, Ser is deprecated. I will still fix reported bugs, but for new projects, I recommend bitser if you're using LuaJIT, and binser otherwise. Ser Ser is a fast, robust, richly-featured table serialization library for Lua. It was specifically written to store configuration and save files for LÖVE games, but can be used anywhere. Originally, this was the code to write save games for Space, but was released as a stand-alone library after many much-needed improvements. Like Space itself, you use, distribute and extend Ser under the terms of the MIT license. Simple Ser is very simple and easy to use: local serialize = require 'ser'  print(serialize({""Hello"", world = true})) -- prints: -- return {""Hello"", world = true} Fast Using Serpent's benchmark code, Ser is 33% faster than Serpent. Robust Sometimes you have strange, non-euclidean geometries in your table constructions. It happens, I don't judge. Ser can deal with that, where some other serialization libraries cry ""Iä! Iä! Cthulhu fhtagn!"" and give up — or worse, silently produce incorrect data. local serialize = require 'ser'  local cthulhu = {{}, {}, {}} cthulhu.fhtagn = cthulhu cthulhu[1][cthulhu[2]] = cthulhu[3] cthulhu[2][cthulhu[1]] = cthulhu[2] cthulhu[3][cthulhu[3]] = cthulhu print(serialize(cthulhu)) -- prints: -- local _3 = {} -- local _2 = {} -- local _1 = {[_2] = _3} -- local _0 = {_1, _2, _3} -- _0.fhtagn = _0 -- _2[_1] = _2 -- _3[_3] = _0 -- return _0 Tested Check out tests.lua to see how Ser behaves with all kinds of inputs. Other solutions Check out the Lua-users wiki for other libraries that do roughly the same thing. See also Lady: for trusted-source savegames Smallfolk: for untrusted-source serialization Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gvx/Ser"	"Dead simple serializer with good performance."	"true"
"Compression"	"lua-zlib"	"https://github.com/brimworks/lua-zlib"	"Simple streaming interface to zlib for gzip/gunzip."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"87"	"12"	"44"	"GitHub - brimworks/lua-zlib: Simple streaming interface to zlib for Lua. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 87 Fork 44 brimworks/lua-zlib Code Issues 5 Pull requests 5 Pulse Graphs Simple streaming interface to zlib for Lua. 49 commits 1 branch 5 releases Fetching contributors C 52.2% Lua 25.6% CMake 15.7% Makefile 6.5% C Lua CMake Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.4 v0.3 v0.2 v0.1 v0.0 Nothing to show New pull request Latest commit 80d48b3 Mar 19, 2016 brimworks Merge pull request #31 from moteus/master … Fix. Build with MSVC Permalink Failed to load latest commit information. cmake/Modules Added LuaJIT compatibility May 10, 2013 .gitattributes Do id expansion and try to get the ref names which should be a close … Feb 23, 2011 CMakeLists.txt Enable multiple Lua versions in CMake. Apr 1, 2015 Makefile Updating Makefile to allow overrides Jan 17, 2014 README Extend deflate to support custom window size Aug 3, 2013 amnon_david.gz Fix crash as recommended by Ben Wilhelm, add a test to verify the fix… Jan 8, 2013 lua_zlib.c Fix. Build with MSVC Mar 18, 2016 rockspec Update the rockspec tag and version. Jan 1, 2015 tap.lua Make the tap module compatible with lua 5.2 Apr 1, 2015 test.lua Lua 5.2 does not introduce global variables with the library name Aug 23, 2013 tom_macwright.gz Add a test for #3 Apr 18, 2012 tom_macwright.out Add a test for #3 Apr 19, 2012 zlib.def Use inflateInit2() so that gzip header is read by default, and allow Jan 29, 2010 README ********************************************************************** * Author  : Brian Maher <maherb at brimworks dot com> * Library : lua_zlib - Lua 5.1 interface to zlib * * The MIT License *  * Copyright (c) 2009 Brian Maher * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the ""Software""), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. **********************************************************************  To use this library, you need zlib, get it here:      http://www.gzip.org/zlib/  To build this library, you can use CMake and get it here:     http://www.cmake.org/cmake/resources/software.html  ...or you can use GNU Make.    make <platform>  Loading the library:      If you built the library as a loadable package         [local] zlib = require 'zlib'      If you compiled the package statically into your application, call     the function ""luaopen_zlib(L)"". It will create a table with the zlib     functions and leave it on the stack.  -- zlib functions --  int major, int minor, int patch = zlib.version()      returns numeric zlib version for the major, minor, and patch     levels of the version dynamically linked in.  function stream = zlib.deflate([ int compression_level ], [ int window_size ])      If no compression_level is provided uses Z_DEFAULT_COMPRESSION (6),     compression level is a number from 1-9 where zlib.BEST_SPEED is 1     and zlib.BEST_COMPRESSION is 9.      Returns a ""stream"" function that compresses (or deflates) all     strings passed in.  Specifically, use it as such:      string deflated, bool eof, int bytes_in, int bytes_out =             stream(string input [, 'sync' | 'full' | 'finish'])          Takes input and deflates and returns a portion of it,         optionally forcing a flush.          A 'sync' flush will force all pending output to be flushed to         the return value and the output is aligned on a byte boundary,         so that the decompressor can get all input data available so         far.  Flushing may degrade compression for some compression         algorithms and so it should be used only when necessary.          A 'full' flush will flush all output as with 'sync', and the         compression state is reset so that decompression can restart         from this point if previous compressed data has been damaged         or if random access is desired. Using Z_FULL_FLUSH too often         can seriously degrade the compression.           A 'finish' flush will force all pending output to be processed         and results in the stream become unusable.  Any future         attempts to print anything other than the empty string will         result in an error that begins with IllegalState.          The eof result is true if 'finish' was specified, otherwise         it is false.          The bytes_in is how many bytes of input have been passed to         stream, and bytes_out is the number of bytes returned in         deflated string chunks.  function stream = zlib.inflate([int windowBits])      Returns a ""stream"" function that decompresses (or inflates) all     strings passed in.  Optionally specify a windowBits argument     that is passed to inflateInit2(), see zlib.h for details about     this argument.  By default, gzip header detection is done, and     the max window size is used.      The ""stream"" function should be used as such:      string inflated, bool eof, int bytes_in, int bytes_out =             stream(string input)          Takes input and inflates and returns a portion of it.  If it         detects the end of a deflation stream, then total will be the         total number of bytes read from input and all future calls to         stream() with a non empty string will result in an error that         begins with IllegalState.          No flush options are provided since the maximal amount of         input is always processed.          eof will be true when the input string is determined to be at         the ""end of the file"".          The bytes_in is how many bytes of input have been passed to         stream, and bytes_out is the number of bytes returned in         inflated string chunks.   function compute_checksum = zlib.adler32() function compute_checksum = zlib.crc32()      Create a new checksum computation function using either the     adler32 or crc32 algorithms.  This resulting function should be     used as such:      int checksum = compute_checksum(string input |                                     function compute_checksum)          The compute_checksum function takes as input either a string         that is logically getting appended to or another         compute_checksum function that is logically getting appended.         The result is the updated checksum.          For example, these uses will all result in the same checksum:              -- All in one call:             local csum = zlib.crc32()(""one two"")              -- Multiple calls:             local compute = zlib.crc32()             compute(""one"")             assert(csum == compute("" two""))              -- Multiple compute_checksums joined:             local compute1, compute2 = zlib.crc32(), zlib.crc32()             compute1(""one"")             compute2("" two"")             assert(csum == compute1(compute2))  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/brimworks/lua-zlib"	"Simple streaming interface to zlib for gzip/gunzip."	"true"
"Compression"	"lua-zip"	"https://github.com/brimworks/lua-zip"	"Lua binding to libzip. Reads and writes zip files."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"27"	"7"	"10"	"GitHub - brimworks/lua-zip: Lua binding to libzip. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 27 Fork 10 brimworks/lua-zip Code Issues 2 Pull requests 0 Pulse Graphs Lua binding to libzip. 31 commits 1 branch 0 releases 3 contributors C 57.6% Lua 37.2% CMake 4.3% Makefile 0.9% C Lua CMake Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 40c0d6c Oct 17, 2015 brimworks Oops, forgot to wire-up the delete method. Permalink Failed to load latest commit information. CMakeLists.txt Place the zip library under the brimworks namespace. Feb 13, 2011 Makefile Fixes for updating to Lua 5.2 (should still be compatible with 5.1), … Oct 11, 2015 README Add ar:delete(). Oct 11, 2015 lua-zip-git-1.rockspec Reworded rockspec description Nov 22, 2012 lua_zip.c Oops, forgot to wire-up the delete method. Oct 17, 2015 lua_zip.def Initial start on documentation and first test passes. Jan 30, 2011 tap.lua Fix issue with archive file lifetimes exceeding the archive lifetime … Jan 31, 2011 test.lua Oops, forgot to wire-up the delete method. Oct 17, 2015 test.zip Add name_locate() function. Jan 30, 2011 README ********************************************************************** * Author  : Brian Maher <maherb at brimworks dot com> * Library : lua_zip - Lua 5.1 interface to libzip * * The MIT License *  * Copyright (c) 2009 Brian Maher * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the ""Software""), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. **********************************************************************  To use this library, you need libzip, get it here:      http://www.nih.at/libzip/  To build this library, you need CMake, get it here:     http://www.cmake.org/cmake/resources/software.html  Loading the library:      If you built the library as a loadable package         [local] zip = require 'brimworks.zip'      If you compiled the package statically into your application, call     the function ""luaopen_brimworks_zip(L)"". It will create a table     with the zip functions and leave it on the stack.  Note:      There is not a ""streaming"" interface supplied by this library.  If     you want to work with zip files as streams, please see     lua-archive.  However, libarchive is currently not compatible with     ""office open xml"", and therefore the author was motivated to write     this zip specific binding.  Why brimworks prefix?      When this module was created, there was already a binding to     zziplib named ""zip"" and since the author owns the brimworks.com     domain he felt prefixing with brimworks would avoid in collisions     in case people need to use the zziplib binding at the same time.  -- zip functions --  zip.CREATE zip.EXCL zip.CHECKCONS      Numbers that represent open ""flags"", see zip.open().  zip.FL_NOCASE zip.FL_NODIR      Numbers that represent locate ""flags"", see zip_arc:name_locate().  zip.FL_COMPRESSED zip.FL_UNCHANGED      Numbers that represent fopen ""flags"", see zip_arc:open().  flags = zip.OR(flag1[, flag2[, flag3 ...]])      Perform a bitwise or on all the flags.  local zip_arc = zip.open(filename [, flags])      Open a zip archive optionally specifying a bitwise or of any of     these flags:          zip.CREATE             Create the archive if it does not exist.          zip.EXCL             Error if archive already exists.          zip.CHECKCONS             Perform additional consistency checks on the archive, and             error if they fail.      If an error occurs, returns nil plus an error message.  zip_arc:close()      If any files within were changed, those changes are written to     disk first. If writing changes fails, zip_arc:close() fails and     archive is left unchanged. If archive contains no files, the file     is completely removed (no empty archive is written).       Unlike the other functions, this function will ""throw"" an error if     there is any failure.  The reason to be different is that it is     easy to forget to check if close is successful, and a failure to     close is truely an exceptional event.      NOTE: If a zip_arc object is garbage collected without having     called close(), then the memory associated with that object will     be free'ed, but changes made to the archive are not committed.  local last_file_idx = zip_arc:get_num_files() local last_file_idx = #zip_arc      Return the number of files in this zip archive, and since the     index is one based, it also is the last file index.  local file_idx = zip_arc:name_locate(filename [, flags])      Returns the 1 based index for this file.  The flags argument may     be a bitwise or of these flags:          zip.FL_NOCASE             Ignore case distinctions.          zip.FL_NODIR             Ignore directory part of file name in archive.      If it is not found, it returns nil plus an error message.  local file = zip_arc:open(filename | file_idx [, flags])      Returns a new file handle for the specified filename or file     index.  The flags argument may be a bitwise or of these flags:          zip.FL_COMPRESSED             Read the compressed data. Otherwise the data is             uncompressed by file:read().          zip.FL_UNCHANGED             Read the original data from the zip archive, ignoring any             changes made to the file.          zip.FL_NOCASE         zip.FL_NODIR             See zip_arc:name_locate().      Note that this file handle can only be used for reading purposes.  file:close()      Close a file handle opened by zip_arc:open()  local str = file:read(num)      Read at most num characters from the file handle.  local stat = zip_arc:stat(filename | file_idx [, flags])      Obtain information about the specified filename or file index.     The flags may be a bitwise or of these flags:          zip.FL_UNCHANGED             See zip_arc:open().          zip.FL_NOCASE         zip.FL_NODIR             See zip_arc:name_locate().      The returned stat table contains the following fields:          stat.name              = name of the file         stat.index             = index within archive         stat.crc               = crc of file data         stat.size              = size of file (uncompressed)         stat.mtime             = modification time         stat.comp_size         = size of file (compressed)         stat.comp_method       = compression method used         stat.encryption_method = encryption method used      If an error occurs, this function returns nil and an error     message.  local filename = zip_arc:get_name(file_idx [, flags])      Returns the name of the file at the specified file index.  The     only valid flag is:          zip.FL_UNCHANGED             See zip_arc:open().  local comment = zip_arc:get_archive_comment([flags])      Return any comment contained in the archive.  The only valid flag     is:          zip.FL_UNCHANGED             See zip_arc:open().  zip_arc:set_archive_comment(comment)      Sets the comment of an archive.  May throw an error if the comment     exceeds 65,535 bytes.  local comment = zip_arc:get_file_comment(file_idx [, flags])      Return any comment about the specified file.  The only valid flag     is:          zip.FL_UNCHANGED             See zip_arc:open().  zip_arc:set_file_comment(file_idx, comment)      Set the comment for a specified file index within the archive.     Throws an error if input is invalid.  zip_arc:add_dir(dirname)      Creates a new directory within the archive.  May throw an error if     an entry already exists in the archive with that name or input is     invalid.  file_idx = zip_arc:add(filename, ...zip_source)      Adds the specified filename to the archive from the specified     ""...zip_source"" (see below).      If an error occurs, throws an error.  file_idx = zip_arc:replace(file_idx, ...zip_source)      Replaces the specified file index with a new ""...zip_source""     (see below).      If an error occurs, throws an error.  zip_arc:rename(filename | file_idx, new_filename)      Rename the specified file in the archive.  May throw an error if     the entry being renamed does not exist.  zip_arc:delete(filename | file_idx)      Delete the specified file from the archive.  May throw an error if     the specified filename or file index does not exist.  ..zip_source = ""string"", str      The source to use will come from the specified string.  ...zip_source = ""zip"", other_zip_arc, file_idx[, flags[, start[, len]]])      The ""...zip_source"" is an archive and file index into that archive     along with an optional flag, start file offset and length.  The     flags are an optional bitwise or of:          zip.FL_UNCHANGED             See zip_arc:open().          zip.FL_RECOMPRESS             When adding the data from srcarchive, re-compress it using             the current settings instead of copying the compressed             data.      Circular zip source references are not allowed.  For example, if     you add a file from ar2 into ar1, then you can't add a file from     ar1 to ar2.  Here is an example of this error:          ar1:add(""filename.txt"", ""zip"", ar2, 1)         ar2:add(""filename.txt"", ""zip"", ar1, 1) -- ERROR!   ...zip_source = ""file"", filename[, start[, len]]      Create a ""zip_source"" from a file on disk.  Opens filename and     reads len bytes from offset start from it. If len is 0 or -1, the     whole file (starting from start) is used.  ###################################################################### TODO: The following functions are not implemented yet: ######################################################################  ...zip_source = ""object"", obj      The ""...zip_source"" is an object with any of these methods:          success = obj:open()             Prepare for reading. Return true on success, nil on             error.          str = obj:read(len)             Read len bytes, returning it as a string.  Return nil on             error.          obj:close()             Reading is done.          stat = obj:stat()             Get meta information for the input data.  See             zip_arc:stat() for the table of fields that may be set.             Usually, for uncompressed data, only the mtime and size             fields will need to be set.          libzip_err, system_err = obj:error()             Get error information.  Must return two integers whic             correspond to the libzip error code and system error code             for any error (see above functions that may cause errors)   Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/brimworks/lua-zip"	"Lua binding to libzip. Reads and writes zip files."	"true"
"Cryptography"	"LuaCrypto"	"https://github.com/mkottman/luacrypto"	"Lua bindings to OpenSSL."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"49"	"8"	"29"	"GitHub - mkottman/luacrypto: Fork of LuaCrypto, which enables encryption and decryption through OpenSSL Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 49 Fork 29 mkottman/luacrypto Code Issues 11 Pull requests 10 Pulse Graphs Fork of LuaCrypto, which enables encryption and decryption through OpenSSL http://mkottman.github.com/luacrypto/ 79 commits 2 branches 1 release Fetching contributors Shell 81.9% C 14.0% Lua 4.1% Shell C Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 0.3.2 Nothing to show New pull request Latest commit 8c3f7f0 Sep 25, 2013 mkottman Merge branch 'fix-compiler-warning' of https://github.com/racker/luac… … …rypto into racker-fix-compiler-warning  Conflicts: 	src/lcrypto.c Permalink Failed to load latest commit information. doc Updated readme and docs Apr 25, 2013 m4 add autotools generated files Apr 20, 2012 rockspecs Fixes rockspec to point to github repo. Oct 13, 2011 src Merge branch 'fix-compiler-warning' of https://github.com/racker/luac… Sep 25, 2013 tests Build with Lua 5.2. Apr 25, 2013 .gitignore Adds .gitignore Oct 5, 2011 AUTHORS add docs Apr 20, 2012 CMakeLists.txt Updated CMakeLists.txt for the DONT_USE_OPENSSL_DEPRECATED_FUNCTIONS … Mar 21, 2013 COPYING Updated readme and docs Apr 25, 2013 ChangeLog Updated readme and docs Apr 25, 2013 INSTALL add docs Apr 20, 2012 Makefile.am add pkgconfig file Apr 20, 2012 Makefile.in autoreconf Apr 20, 2012 NEWS add docs Apr 20, 2012 README Updated readme and docs Apr 25, 2013 aclocal.m4 add autotools generated files Apr 20, 2012 config.guess add autotools generated files Apr 20, 2012 config.h.in add autotools generated files Apr 20, 2012 config.sub add autotools generated files Apr 20, 2012 configure autoreconf Apr 20, 2012 configure.ac add pkgconfig file Apr 20, 2012 depcomp add autotools generated files Apr 20, 2012 dist.cmake add cmake build system from LuaDist Apr 20, 2012 install-sh add autotools generated files Apr 20, 2012 ltmain.sh add autotools generated files Apr 20, 2012 luacrypto.pc.in add pkgconfig file Apr 20, 2012 luacrypto.sln Adds VS2008 project files Oct 5, 2011 luacrypto.vcproj Adds VS2008 project files Oct 5, 2011 missing add autotools generated files Apr 20, 2012 README LuaCrypto provides a Lua frontend to the OpenSSL cryptographic library. The OpenSSL features that are currently exposed are digests (MD5, SHA-1, HMAC, and more) and crypto-grade random number generators.  LuaCrypto also supports encryption and decryption, signing and verifying, sealing and opening using the OpenSSL EVP API.  Please see docs at doc/us/index.html or http://mkottman.github.io/luacrypto/.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mkottman/luacrypto"	"Lua bindings to OpenSSL."	"true"
"Cryptography"	"lua-lockbox"	"https://github.com/somesocks/lua-lockbox"	"A collection of cryptographic primitives written in pure Lua."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"156"	"9"	"13"	"GitHub - somesocks/lua-lockbox: A collection of cryptographic primitives written in pure Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 156 Fork 13 somesocks/lua-lockbox Code Issues 3 Pull requests 0 Pulse Graphs A collection of cryptographic primitives written in pure Lua 34 commits 1 branch 1 release 4 contributors Lua 98.8% Shell 1.2% Lua Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.1.0 Nothing to show New pull request Latest commit 0ccbe2a Mar 7, 2016 somesocks Adding rockspec Permalink Failed to load latest commit information. lockbox Added IGE Block Cipher Mode and added tests Mar 7, 2016 rockspecs Adding rockspec Mar 7, 2016 script Prepare for testing on Travis Nov 18, 2015 test Added IGE Block Cipher Mode and added tests Mar 7, 2016 .envrc Prepare for testing on Travis Nov 17, 2015 .gitignore Prepare for testing on Travis Nov 17, 2015 .travis.yml Prepare for testing on Travis Nov 17, 2015 LICENSE Initial commit of hte lockbox Jan 24, 2015 README.md Changing readme Mar 7, 2016 RunTests.lua Prepare for testing on Travis Nov 17, 2015 lockbox.lua all tests pass Nov 12, 2015 README.md The Lua Lockbox A collection of cryptographic primitives and protocols written in pure Lua. This was written to provide cross-platform, tested reference implementations of many different cryptographic primitives. These are written to be easy to read and easy to use, not for performance! Implemented Primitives Digests: MD2 MD4 MD5 RIPEMD128 RIPEMD160 SHA1 SHA2-224 SHA2-256 Message Authentication Codes (MACs): HMAC Key Derivation Functions (KDFs): PBKDF2 Block Ciphers: DES DES3 AES128 AES192 AES256 TEA XTEA Block Cipher Modes: ECB CBC PCBC CFB OFB CTR IGE Block Cipher Padding: Zero Padding ANSI X.923 Padding ISO/IEC 7816 Padding PKCS7 Padding (PKCS5-Compatible) Usage To use these cryptographic primitives in a project, you'll likely have to modify Lockbox.lua to change the module search path. All the primitives import this module to find the packages they require. See RunTests.lua as an example. The cryptographic primitives are designed to work on streams of bytes. There are three data structures used to help with this: Array(a Lua array of bytes), Stream(an iterator that returns a series of bytes), and Queue(a FIFO pipe of bytes). See Array.lua, Stream.lua, and Queue.lua for more details. Most cryptographic primitives are designed in a builder-style pattern. They usually have three functions: init, update, and finish. All of these functions will return the primitive, so you can chain functions calls together. init() - resets the state of the primitive, so you can reuse it. update( byteStream ) - takes in a Stream of bytes, and updates its internal state. This function can be called repeatedly, which effectively concatenates separate inputs. If the primitive requires an IV, it is usually read as the first input provided to update. finish() - does any finalization necessary to finish generating output. For examples of how to use the different primitives, read the test case files under tests. Security Concerns Several weak or broken primitives are implemented in this library, for research or legacy reasons. These should not be used under normal circumstances! To restrict their usage, they have been marked as insecure, with the Lockbox.insecure() method. This will cause a failed assertion when you attempt to import the module, unless you set Lockbox.ALLOW_INSECURE to true before the import. For an example, see RunTests.lua. Modules names lockbox (or lockbox.init) lockbox.cipher.aes128 lockbox.cipher.aes192 lockbox.cipher.aes256 lockbox.cipher.des3 lockbox.cipher.des lockbox.cipher.mode.cbc lockbox.cipher.mode.cfb lockbox.cipher.mode.ctr lockbox.cipher.mode.ecb lockbox.cipher.mode.ige lockbox.cipher.mode.ofb lockbox.cipher.mode.pcbc lockbox.digest.md2 lockbox.digest.md4 lockbox.digest.md5 lockbox.digest.ripemd128 lockbox.digest.ripemd160 lockbox.digest.sha1 lockbox.digest.sha2_224 lockbox.digest.sha2_256 lockbox.kdf.pbkdf2 lockbox.mac.hmac lockbox.padding.ansix923 lockbox.padding.isoiec7816 lockbox.padding.pkcs7 lockbox.padding.zero lockbox.util.base64 lockbox.util.array lockbox.util.bit lockbox.util.queue lockbox.util.stream Planned Updates RC4 XXTEA SHA3(Keccak) MD6 BLAKE2s bcrypt / scrypt Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/somesocks/lua-lockbox"	"A collection of cryptographic primitives written in pure Lua."	"true"
"Network"	"LuaSocket"	"https://github.com/diegonehab/luasocket"	"Networking extension which provides a socket API for TCP and UDP, and implements HTTP, FTP, and SMTP."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"443"	"80"	"199"	"GitHub - diegonehab/luasocket: Network support for the Lua language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 80 Star 443 Fork 199 diegonehab/luasocket Code Issues 31 Pull requests 17 Pulse Graphs Network support for the Lua language http://www.impa.br/~diego/software/luasocket 602 commits 1 branch 1 release Fetching contributors HTML 46.9% Lua 25.3% C 22.8% TeX 2.7% Makefile 1.3% PostScript 0.5% Other 0.5% HTML Lua C TeX Makefile PostScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v3.0-rc1 Nothing to show New pull request Latest commit 30a64c5 Jun 17, 2016 diegonehab committed on GitHub Merge pull request #178 from pdxmeshnet/master … Add rockspec to current development version. Permalink Failed to load latest commit information. doc Hide ftp.PORT ""constant"" as a local Mar 7, 2016 etc fixed yieldable socket.protect in etc/dispatch.lua Nov 10, 2014 gem Merge branch 'git-sam' into diego-sam-mwild-integration Apr 11, 2012 rockspec Added future release rockspec file Jun 15, 2016 samples lpr.lua: fix invalid string escape sequence \? Apr 17, 2013 src Merge pull request #171 from JonasKunze/feature/overwriteFlags Apr 12, 2016 test Family agostic FTP and expose HTTP/FTP url parsing Mar 7, 2016 .gitignore Fix Visual Studio 2012 projects May 27, 2013 .travis.yml Fix path for rockspec in travis file. Jun 13, 2013 FIX Saving before big changes to support IPv6. May 25, 2011 LICENSE Change 2.1 to 3.0 Jun 14, 2013 Lua51.props Fix Visual Studio 2012 projects May 27, 2013 Lua52.props Fix Visual Studio 2012 projects May 27, 2013 NEW Update NEW file and section Jun 14, 2013 README Change 2.1 to 3.0-rc1 Jun 14, 2013 TODO Fix ltn12 version. Dec 10, 2012 WISH Couple bug fixes. Mar 12, 2007 linux.cmd Merge branch 'tcp_reuseport' of https://github.com/KateAdams/luasocket … Oct 5, 2015 logo.ps Adjusted a few inconsistencies with the manual. Aug 16, 2003 ltn012.wiki fix use of arg in ltn documentation Jan 23, 2013 ltn013.wiki fix use of arg in ltn documentation Jan 23, 2013 luasocket-scm-0.rockspec Given LuaRocks support Haiku as a valid platform, link the network li… Mar 11, 2016 luasocket.sln Move Visual Studio projects to 2012. Dec 10, 2012 macosx.cmd Fix socket.connect May 26, 2013 makefile Added solaris platform Jan 15, 2016 makefile.dist Add files to distribution. Jun 14, 2013 mime.vcxproj Change VC12 project to no LUA_COMPAT_MODUULE May 29, 2013 mime.vcxproj.filters Fix Visual Studio 2012 projects May 27, 2013 mingw.cmd Add MingW support. May 25, 2013 socket.vcxproj Change VC12 project to no LUA_COMPAT_MODUULE May 29, 2013 socket.vcxproj.filters Fix Visual Studio 2012 projects May 27, 2013 win32.cmd Merge branch 'tcp_reuseport' of https://github.com/KateAdams/luasocket … Oct 5, 2015 README This is the LuaSocket 3.0-rc1. It has been tested on Windows 7, Mac OS X, and Linux.   Please use the project page at GitHub       https://github.com/diegonehab/luasocket  to file bug reports or propose changes.   Have fun, Diego Nehab.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/diegonehab/luasocket"	"Networking extension which provides a socket API for TCP and UDP, and implements HTTP, FTP, and SMTP."	"true"
"Network"	"lua-websockets"	"https://github.com/lipp/lua-websockets"	"WebSocket client and server modules. Webserver-agnostic, implemented in Lua on top of LuaSocket."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"187"	"31"	"36"	"GitHub - lipp/lua-websockets: Websockets for Lua. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 31 Star 187 Fork 36 lipp/lua-websockets Code Issues 20 Pull requests 4 Pulse Graphs Websockets for Lua. http://lipp.github.com/lua-websockets/ 437 commits 5 branches 4 releases 9 contributors Lua 88.3% HTML 8.7% JavaScript 2.0% Shell 1.0% Lua HTML JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feature-return-bufferedbytes-from-send gh-pages libwebsocket master secure-wss Nothing to show v2.2 v2.1 v2.0 v1.0 Nothing to show New pull request Latest commit 12c593a Apr 28, 2016 lipp Merge pull request #91 from NovusTheory/master … WSS Support for Sync Permalink Failed to load latest commit information. examples fix example Feb 22, 2015 perf fix loop variable Jun 24, 2014 rockspecs Update rockspec & change params in connect Apr 27, 2016 spec increase test timeouts (due to slower travis) Sep 13, 2015 src Update rockspec & change params in connect Apr 27, 2016 test-server filter out all non TEXT messages Apr 1, 2013 .gitignore ignore swp files Apr 20, 2015 .luacov make suitable for luacov-coveralls Nov 24, 2014 .travis.yml Just provide OPENSSL_LIBDIR Apr 27, 2016 API.md add copas server doc May 7, 2013 COPYRIGHT email and date fixed Jul 30, 2012 Dockerfile update/fix node version in dockerfile Mar 30, 2016 README.md Add luasec as dependency Apr 18, 2016 echows.js use node echo server instead of autobahntestsuite Sep 13, 2015 lua-websockets.rockspec Update rockspec & change params in connect Apr 27, 2016 ludent.sh fix some global var access (thanks to lualint) Dec 5, 2013 minify.sh add magnification via squish Jun 24, 2014 publish make default TMPDIR HOME May 7, 2013 squishy add magnification via squish Jun 24, 2014 test.sh use node echo server instead of autobahntestsuite Sep 13, 2015 README.md About This project provides Lua modules for Websocket Version 13 conformant clients and servers. The minified version is only ~10k bytes in size. Clients are available in three different flavours: synchronous coroutine based (copas) asynchronous (lua-ev) Servers are available as two different flavours: coroutine based (copas) asynchronous (lua-ev) A webserver is NOT part of lua-websockets. If you are looking for a feature rich webserver framework, have a look at orbit or others. It is no problem to work with a ""normal"" webserver and lua-websockets side by side (two processes, different ports), since websockets are not subject of the 'Same origin policy'. Usage copas echo server This implements a basic echo server via Websockets protocol. Once you are connected with the server, all messages you send will be returned ('echoed') by the server immediately. local copas = require'copas'  -- create a copas webserver and start listening local server = require'websocket'.server.copas.listen {   -- listen on port 8080   port = 8080,   -- the protocols field holds   --   key: protocol name   --   value: callback on new connection   protocols = {     -- this callback is called, whenever a new client connects.     -- ws is a new websocket instance     echo = function(ws)       while true do         local message = ws:receive()         if message then            ws:send(message)         else            ws:close()            return         end       end     end   } }  -- use the copas loop copas.loop() lua-ev echo server This implements a basic echo server via Websockets protocol. Once you are connected with the server, all messages you send will be returned ('echoed') by the server immediately. local ev = require'ev'  -- create a copas webserver and start listening local server = require'websocket'.server.ev.listen {   -- listen on port 8080   port = 8080,   -- the protocols field holds   --   key: protocol name   --   value: callback on new connection   protocols = {     -- this callback is called, whenever a new client connects.     -- ws is a new websocket instance     echo = function(ws)       ws:on_message(function(ws,message)           ws:send(message)         end)        -- this is optional       ws:on_close(function()           ws:close()         end)     end   } }  -- use the lua-ev loop ev.Loop.default:loop()  Running test-server examples The folder test-server contains two re-implementations of the libwebsocket test-server.c example. cd test-server lua test-server-ev.lua cd test-server lua test-server-copas.lua Connect to the from Javascript (e.g. chrome's debugging console) like this: var echoWs = new WebSocket('ws://127.0.0.1:8002','echo'); Dependencies The client and server modules depend on: luasocket luabitop (if not using Lua 5.2 nor luajit) luasec copas (optionally) lua-ev (optionally) Install $ git clone git://github.com/lipp/lua-websockets.git $ cd lua-websockets $ luarocks make rockspecs/lua-websockets-scm-1.rockspec Minify A squishy file for squish is provided. Creating the minified version (~10k) can be created with: $ squish --gzip The minifed version has be to be installed manually though. Tests Running tests requires: busted with async test support Docker docker build . The first run will take A WHILE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lipp/lua-websockets"	"WebSocket client and server modules. Webserver-agnostic, implemented in Lua on top of LuaSocket."	"true"
"Data Stores"	"LuaSQL"	"http://www.keplerproject.org/luasql/"	"Simple interface for connecting to ODBC, ADO, Oracle, MySQL, SQLite and PostgreSQL."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Simple interface for connecting to ODBC, ADO, Oracle, MySQL, SQLite and PostgreSQL."	"false"
"Data Stores"	"redis-lua"	"https://github.com/nrk/redis-lua"	"Pure Lua client library for Redis."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"386"	"50"	"111"	"GitHub - nrk/redis-lua: A Lua client library for the redis key value storage system. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 50 Star 386 Fork 111 nrk/redis-lua Code Issues 8 Pull requests 2 Pulse Graphs A Lua client library for the redis key value storage system. 327 commits 3 branches 7 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: version-2.0 Switch branches/tags Branches Tags master version-1.0 version-2.0 Nothing to show v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.0.1 v1.0.0 Nothing to show New pull request Latest commit 880dda9 Nov 17, 2014 nrk Merge branch 'patch-2' of https://github.com/jbochi/redis-lua into ve… … …rsion-2.0 Permalink Failed to load latest commit information. examples Use luarocks in the examples but do not fail if not installed. Apr 9, 2012 rockspec Fix minor error in CHANGELOG. Jul 15, 2012 src Merge branch 'patch-2' of https://github.com/jbochi/redis-lua into ve… Nov 17, 2014 test Add Redis 2.8 commands: SCAN, SSCAN, ZSCAN, HSCAN. Dec 14, 2013 .gitignore Update .gitignore. Jun 3, 2011 CHANGELOG Update CHANGELOG. Dec 14, 2013 LICENSE Bump year in LICENSE. Jan 1, 2013 README.markdown Add notes about recently added compatibility with Lua 5.2. Apr 7, 2012 VERSION Back to development for the next patch release. Jul 23, 2012 README.markdown redis-lua About redis-lua is a pure Lua client library for the Redis advanced key-value database. Main features Support for Redis >= 1.2 Command pipelining Redis transactions (MULTI/EXEC) with CAS User-definable commands UNIX domain sockets (when available in LuaSocket) Compatibility This library is tested and works with Lua 5.1, Lua 5.2 (using a compatible version of LuaSocket) and LuaJit 2.0. Examples of usage Include redis-lua in your script Just require the redis module assigning it to a variable: local redis = require 'redis' Previous versions of the library defined a global Redis alias as soon as the module was imported by the user. This global alias is still defined but it is considered deprecated and it will be removed in the next major version. Connect to a redis-server instance and send a PING command local redis = require 'redis' local client = redis.connect('127.0.0.1', 6379) local response = client:ping()           -- true It is also possible to connect to a local redis instance using UNIX domain sockets if LuaSocket has been compiled with them enabled (unfortunately it is not the default): local redis = require 'redis' local client = redis.connect('unix:///tmp/redis.sock') Set keys and get their values client:set('usr:nrk', 10) client:set('usr:nobody', 5) local value = client:get('usr:nrk')      -- 10 Sort list values by using various parameters supported by the server for _,v in ipairs({ 10,3,2,6,1,4,23 }) do     client:rpush('usr:nrk:ids',v) end  local sorted = client:sort('usr:nrk:ids', {      sort = 'asc', alpha = true, limit = { 1, 5 } })      -- {1=10,2=2,3=23,4=3,5=4} Pipeline commands local replies = client:pipeline(function(p)     p:incrby('counter', 10)     p:incrby('counter', 30)     p:get('counter') end) Variadic commands Some commands such as RPUSH, SADD, SINTER and others have been improved in Redis 2.4 to accept a list of values or keys depending on the nature of the command. Sometimes it can be useful to pass these arguments as a list in a table, but since redis-lua does not currently do anything to handle such a case you can use unpack() albeit with a limitation on the maximum number of items which is defined in Lua by LUAI_MAXCSTACK (the default on Lua 5.1 is set to 8000, see luaconf.h): local values = { 'value1', 'value2', 'value3' } client:rpush('list', unpack(values))  -- the previous line has the same effect of the following one: client:rpush('list', 'value1', 'value2', 'value3') Leverage Redis MULTI / EXEC transaction (Redis > 2.0) local replies = client:transaction(function(t)     t:incrby('counter', 10)     t:incrby('counter', 30)     t:get('counter') end) Leverage WATCH / MULTI / EXEC for check-and-set (CAS) operations (Redis > 2.2) local options = { watch = ""key_to_watch"", cas = true, retry = 2 } local replies = client:transaction(options, function(t)     local val = t:get(""key_to_watch"")     t:multi()     t:set(""akey"", val)     t:set(""anotherkey"", val) end) Get useful information from the server for k,v in pairs(client:info()) do     print(k .. ' => ' .. tostring(v)) end --[[ redis_git_dirty => 0 redis_git_sha1 => aaed0894 process_id => 23115 vm_enabled => 0 hash_max_zipmap_entries => 64 expired_keys => 9 changes_since_last_save => 2 role => master last_save_time => 1283621624 used_memory => 537204 bgsave_in_progress => 0 redis_version => 2.0.0 multiplexing_api => epoll total_connections_received => 314 db0 => {keys=3,expires=0} pubsub_patterns => 0 used_memory_human => 524.61K pubsub_channels => 0 uptime_in_seconds => 1033 connected_slaves => 0 connected_clients => 1 bgrewriteaof_in_progress => 0 blocked_clients => 0 arch_bits => 32 total_commands_processed => 3982 hash_max_zipmap_value => 512 db15 => {keys=1,expires=0} uptime_in_days => 0 ]] Dependencies Lua 5.1 and 5.2 or LuaJIT 2.0 LuaSocket 2.0 Telescope (required to run the test suite) Links Project Source code Issue tracker Related Redis Git Authors Daniele Alessandri Contributors Leo Ponomarev License The code for redis-lua is distributed under the terms of the MIT/X11 license (see LICENSE). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nrk/redis-lua"	"Pure Lua client library for Redis."	"true"
"Data Stores"	"pgmoon"	"https://github.com/leafo/pgmoon"	"Lua PostgreSQL driver for OpenResty and others."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"76"	"7"	"18"	"GitHub - leafo/pgmoon: A pure Lua Postgres driver for use in OpenResty & more Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 76 Fork 18 leafo/pgmoon Code Issues 3 Pull requests 1 Pulse Graphs A pure Lua Postgres driver for use in OpenResty & more 109 commits 2 branches 7 releases Fetching contributors MoonScript 52.8% Lua 39.4% Shell 7.3% Makefile 0.5% MoonScript Lua Shell Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags leafo/ssl master Nothing to show v1.5.0 v1.4.0 v1.3.0 v1.2.0 v1.1.1 v1.1.0 v1.0.0 Nothing to show New pull request Latest commit ebdee00 Jul 12, 2016 leafo sort rockspec Permalink Failed to load latest commit information. .travis add travis Feb 10, 2016 pgmoon version bump 💥 Jul 12, 2016 spec missing assert Jun 29, 2016 .gitignore add ssl specs Jun 28, 2016 .travis.yml add luasec Jun 28, 2016 Makefile no tup Feb 11, 2016 README.md version bump 💥 Jul 13, 2016 Tupfile messin around May 1, 2014 Tuprules.tup messin around May 2, 2014 lint_config.lua add lint Feb 11, 2016 pgmoon-dev-1.rockspec sort rockspec Jul 12, 2016 pgmoon.lua add rockspec and compiled lua May 12, 2014 pgmoon.moon move to pgmoon module May 9, 2014 README.md pgmoon pgmoon is a PostgreSQL client library written in pure Lua (MoonScript). pgmoon was originally designed for use in OpenResty to take advantage of the cosocket api to provide asynchronous queries but it also works in the regular Lua environment as well using LuaSocket (and optionally LuaCrypto for MD5 authentication and LuaSec for SSL connections) It's a perfect candidate for running your queries both inside OpenResty's environment and on the command line (eg. tests) in web frameworks like Lapis. Install $ luarocks install pgmoon Example local pgmoon = require(""pgmoon"") local pg = pgmoon.new({   host = ""127.0.0.1"",   port = ""5432"",   database = ""mydb"",   user = ""postgres"" })  assert(pg:connect())  local res = assert(pg:query(""select * from users where username = "" ..   pg:escape_literal(""leafo""))) If you are using OpenResty you should relinquish the socket after you are done with it so it can be reused in future requests: pg:keepalive() Reference Functions in table returned by require(""pgmoon""): new(options={}) Creates a new Postgres object. Does not connect automatically. Takes a table of options. The table can have the following keys: ""host"": the host to connect to (default: ""127.0.0.1"") ""port"": the port to connect to (default: ""5432"") ""user"": the database username to authenticate (default: ""postgres"") ""database"": the database name to connect to required ""password"": password for authentication, optional depending on server configuration ""ssl"": enable ssl ""ssl_verify"": verify server certificate ""ssl_required"": abort the connection if the server does not support SSL connections Methods on the Postgres object returned by new: success, err = postgres:connect() Connects to the Postgres server using the credentials specified in the call to new. On success returns true, on failure returns nil and the error message. success, err = postgres:disconnect() Closes the socket to the server if one is open. No other methods should be called on the object after this other than another call to connect. success, err = postgres:keepalive(...) Relinquishes socket to OpenResty socket pool via the setkeepalive method. Any arguments passed here are also passed to setkeepalive. result, num_queries = postgres:query(query_string) result, err, partial, num_queries = postgres:query(query_string) Sends a query to the server. On failure returns nil and the error message. On success returns a result depending on the kind of query sent. SELECT queries, INSERT with returning, or anything else that returns a result set will return an array table of results. Each result is a hash table where the key is the name of the column and the value is the result for that row of the result. local res = pg:query(""select id, name from users"") Might return: {   {     id = 123,     name = ""Leafo""   },   {     id = 234,     name = ""Lee""   } } Any queries that affect rows like UPDATE, DELETE, or INSERT return a table result with the affected_rows field set to the number of rows affected. local res = pg:query(""delete from users"") Might return: {   affected_rows = 2 } Any queries with no result set or updated rows will return true. This method also supports sending multiple queries at once by separating them with a ;. The number of queries executed is returned as a second return value after the result object. When more than one query is executed then the result object changes slightly. It becomes a array table holding all the individual results: local res, num_queries = pg:query([[   select id, name from users;   select id, title from posts ]]) Might return: num_queries = 2  res = {   {     {       id = 123,       name = ""Leafo""     },     {       id = 234,       name = ""Lee""     }   },   {     {       id = 546,       title = ""My first post""     }   } } Similarly for queries that return affected rows or just true, they will be wrapped up in an addition array table when there are multiple of them. You can also mix the different query types as you see fit. Because Postgres executes each query at a time, earlier ones may succeed and further ones may fail. If there is a failure with multiple queries then the partial result and partial number of queries executed is returned after the error message. escaped = postgres:escape_literal(val) Escapes a Lua value for use as a Postgres value interpolated into a query string. When sending user provided data into a query you should use this method to prevent SQL injection attacks. escaped = postgres:escape_identifier(val) Escapes a Lua value for use as a Postgres identifier. This includes things like table or column names. This does not include regular values, you should use escape_literal for that. Identifier escaping is required when names collide with built in language keywords. str = tostring(postgres) Returns string representation of current state of Postgres object. SSL connections pgmoon can establish an SSL connection to a Postgres server. It can also refuse to connect to it if the server does not support SSL. Just as pgmoon depends on LuaSocket for usage outside of OpenResty, it depends on LuaSec for SSL connections in such contexts. local pgmoon = require(""pgmoon"") local pg = pgmoon.new({   host = ""127.0.0.1"",   ssl = true, -- enable SSL   ssl_verify = true, -- verify server certificate   ssl_required = true, -- abort if the server does not support SSL connections   cafile = ""..."", -- certificate authority (LuaSec only)   cert = ""..."", -- client certificate (LuaSec only)   key = ""..."", -- client key (LuaSec only) })  assert(pg:connect()) In OpenResty, make sure to configure the lua_ssl_trusted_certificate directive if you wish to verify the server certificate, as the LuaSec-only options become irrelevant in that case. Authentication types Postgres has a handful of authentication types. pgmoon currently supports Trust and MD5 authentication. Type conversion Postgres has a very rich set of types built in. pgmoon will do its best to convert any Postgres types into the appropriate Lua type. All integer, floating point, and numeric types are converted into Lua's number type. The boolean type is converted into a Lua boolean. The JSON type is decoded into a Lua table using Lua CJSON. Lua tables can be encoded to JSON as described below. Any array types are automatically converted to Lua array tables. If you need to encode an array in Lua to Postgres' array syntax you can use the pgmoon.arrays module. See below. Any other types are returned as Lua strings. Handling arrays Arrays are automatically decoded when they are returned from a query. Numeric, string, and boolean types are automatically loaded accordingly. Nested arrays are also supported. Use encode_array to encode a Lua table to array syntax for a query: local pgmoon = require(""pgmoon"") local pg = pgmoon.new(auth) pg:connect()  local encode_array = require(""pgmoon.arrays"").encode_array local my_array = {1,2,3,4,5} pg:query(""insert into some_table (some_arr_col) values("" .. encode_array(my_array) .. "")"") Handling JSON json and jsonb types are automatically decoded when they are returned from a query. Use encode_json to encode a Lua table to the JSON syntax for a query: local pgmoon = require(""pgmoon"") local pg = pgmoon.new(auth) pg:connect()  local encode_json = require(""pgmoon.json"").encode_json local my_tbl = {hello = ""world""} pg:query(""insert into some_table (some_json_col) values("" .. encode_json(my_tbl) .. "")"") Converting NULLs By default NULLs in Postgres are converted to nil, meaning they aren't visible in the resulting tables. If you want to convert NULLs to some visible value set convert_null to true on the Postgres object: local pgmoon = require(""pgmoon"") local pg = pgmoon.new(auth) pg:connect()  pg.convert_null = true local res = pg:query(""select NULL the_null"")  assert(pg.NULL == res[1].the_null) As shown above, the NULL value is set to pg.NULL. You can change this value to make pgmoon use something else as NULL. For example if you're using OpenResty you might want to reuse ngx.null. Contact Author: Leaf Corcoran (leafo) (@moonscript) Email: leafot@gmail.com Homepage: http://leafo.net Changelog 1.5.0 — 2016-07-12 — Add SSL support (@thibaultCha), Add UUID array type (@edan), Add support for notifications (@starius) 1.4.0 — 2016-02-18 — Add support for decoding jsonb, add a json serializer (@thibaultCha) 1.3.0 — 2016-02-11 — Fix bug parsing a string that looked like a number failed, add support for using in ngx when in init context (@thibaultCha), add cleartext password auth, fix warning with md5 auth 1.2.0 — 2015-07-10 — Add support for PostgreSQL Arrays 1.1.1 — 2014-08-12 — Fix a bug with md5 auth 1.1.0 — 2014-05-21 — Add support for multiple queries in one call 1.0.0 — 2014-05-19 — Initial release License (MIT) Copyright (C) 2014 by Leaf Corcoran Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/leafo/pgmoon"	"Lua PostgreSQL driver for OpenResty and others."	"true"
"Data Stores"	"lua-resty-mysql"	"https://github.com/openresty/lua-resty-mysql"	"Lua MySQL driver for OpenResty."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"243"	"43"	"94"	"GitHub - openresty/lua-resty-mysql: Nonblocking Lua MySQL driver library for ngx_lua or OpenResty Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 43 Star 243 Fork 94 openresty/lua-resty-mysql Code Issues 16 Pull requests 6 Pulse Graphs Nonblocking Lua MySQL driver library for ngx_lua or OpenResty 130 commits 1 branch 16 releases 5 contributors Lua 98.1% Makefile 1.9% Lua Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.16 v0.15 v0.14 v0.13 v0.12 v0.11 v0.10 v0.09 v0.08 v0.07 v0.06 v0.05 v0.04 v0.03 v0.02 v0.01 Nothing to show New pull request Latest commit 8d385d6 Jul 6, 2016 sjnam committed with agentzh doc: renamed the ""errno"" return value to ""errcode"" for consistency. … Signed-off-by: Yichun Zhang (agentzh) <agentzh@gmail.com> Permalink Failed to load latest commit information. .github added an issue template for github. Jun 1, 2016 lib/resty bumped version to 0.16. May 25, 2016 t tests: fixed perl warnings regarding unescaped `{` in regexes. May 25, 2016 .gitattributes added a .gitattributes file to correct GitHub's language tag. Nov 23, 2015 .gitignore updated .gitignore. Mar 14, 2012 .travis.yml feature: added initial travis-ci support. Jun 3, 2016 Makefile updated Makefile. Feb 28, 2012 README.markdown doc: renamed the ""errno"" return value to ""errcode"" for consistency. Jul 7, 2016 valgrind.suppress suppressed a false positive in libdl. Apr 1, 2014 README.markdown Name lua-resty-mysql - Lua MySQL client driver for ngx_lua based on the cosocket API Table of Contents Name Status Description Synopsis Methods new connect set_timeout set_keepalive get_reused_times close send_query read_result query server_ver set_compact_arrays SQL Literal Quoting Multi-Resultset Support Debugging Automatic Error Logging Limitations Installation Community English Mailing List Chinese Mailing List Bugs and Patches TODO Author Copyright and License See Also Status This library is considered production ready. Description This Lua library is a MySQL client driver for the ngx_lua nginx module: http://wiki.nginx.org/HttpLuaModule This Lua library takes advantage of ngx_lua's cosocket API, which ensures 100% nonblocking behavior. Note that at least ngx_lua 0.9.11 or ngx_openresty 1.7.4.1 is required. Also, the bit library is also required. If you're using LuaJIT 2.0 with ngx_lua, then the bit library is already available by default. Synopsis     # you do not need the following line if you are using     # the ngx_openresty bundle:     lua_package_path ""/path/to/lua-resty-mysql/lib/?.lua;;"";      server {         location /test {             content_by_lua '                 local mysql = require ""resty.mysql""                 local db, err = mysql:new()                 if not db then                     ngx.say(""failed to instantiate mysql: "", err)                     return                 end                  db:set_timeout(1000) -- 1 sec                  -- or connect to a unix domain socket file listened                 -- by a mysql server:                 --     local ok, err, errcode, sqlstate =                 --           db:connect{                 --              path = ""/path/to/mysql.sock"",                 --              database = ""ngx_test"",                 --              user = ""ngx_test"",                 --              password = ""ngx_test"" }                  local ok, err, errcode, sqlstate = db:connect{                     host = ""127.0.0.1"",                     port = 3306,                     database = ""ngx_test"",                     user = ""ngx_test"",                     password = ""ngx_test"",                     max_packet_size = 1024 * 1024 }                  if not ok then                     ngx.say(""failed to connect: "", err, "": "", errcode, "" "", sqlstate)                     return                 end                  ngx.say(""connected to mysql."")                  local res, err, errcode, sqlstate =                     db:query(""drop table if exists cats"")                 if not res then                     ngx.say(""bad result: "", err, "": "", errcode, "": "", sqlstate, ""."")                     return                 end                  res, err, errcode, sqlstate =                     db:query(""create table cats ""                              .. ""(id serial primary key, ""                              .. ""name varchar(5))"")                 if not res then                     ngx.say(""bad result: "", err, "": "", errcode, "": "", sqlstate, ""."")                     return                 end                  ngx.say(""table cats created."")                  res, err, errcode, sqlstate =                     db:query(""insert into cats (name) ""                              .. ""values (\'Bob\'),(\'\'),(null)"")                 if not res then                     ngx.say(""bad result: "", err, "": "", errcode, "": "", sqlstate, ""."")                     return                 end                  ngx.say(res.affected_rows, "" rows inserted into table cats "",                         ""(last insert id: "", res.insert_id, "")"")                  -- run a select query, expected about 10 rows in                 -- the result set:                 res, err, errcode, sqlstate =                     db:query(""select * from cats order by id asc"", 10)                 if not res then                     ngx.say(""bad result: "", err, "": "", errcode, "": "", sqlstate, ""."")                     return                 end                  local cjson = require ""cjson""                 ngx.say(""result: "", cjson.encode(res))                  -- put it into the connection pool of size 100,                 -- with 10 seconds max idle timeout                 local ok, err = db:set_keepalive(10000, 100)                 if not ok then                     ngx.say(""failed to set keepalive: "", err)                     return                 end                  -- or just close the connection right away:                 -- local ok, err = db:close()                 -- if not ok then                 --     ngx.say(""failed to close: "", err)                 --     return                 -- end             ';         }     } Back to TOC Methods Back to TOC new syntax: db, err = mysql:new() Creates a MySQL connection object. In case of failures, returns nil and a string describing the error. Back to TOC connect syntax: ok, err = db:connect(options) Attempts to connect to the remote MySQL server. The options argument is a Lua table holding the following keys: host the host name for the MySQL server. port the port that the MySQL server is listening on. Default to 3306. path the path of the unix socket file listened by the MySQL server. database the MySQL database name. user MySQL account name for login. password MySQL account password for login (in clear text). max_packet_size the upper limit for the reply packets sent from the MySQL server (default to 1MB). ssl If set to true, then uses SSL to connect to MySQL (default to false). If the MySQL server does not have SSL support (or just disabled), the error string ""ssl disabled on server"" will be returned. ssl_verify If set to true, then verifies the validity of the server SSL certificate (default to false). Note that you need to configure the lua_ssl_trusted_certificate to specify the CA (or server) certificate used by your MySQL server. You may also need to configure lua_ssl_verify_depth accordingly. pool the name for the MySQL connection pool. if omitted, an ambiguous pool name will be generated automatically with the string template user:database:host:port or user:database:path. (this option was first introduced in v0.08.) compact_arrays when this option is set to true, then the query and read_result methods will return the array-of-arrays structure for the resultset, rather than the default array-of-hashes structure. Before actually resolving the host name and connecting to the remote backend, this method will always look up the connection pool for matched idle connections created by previous calls of this method. Back to TOC set_timeout syntax: db:set_timeout(time) Sets the timeout (in ms) protection for subsequent operations, including the connect method. Back to TOC set_keepalive syntax: ok, err = db:set_keepalive(max_idle_timeout, pool_size) Puts the current MySQL connection immediately into the ngx_lua cosocket connection pool. You can specify the max idle timeout (in ms) when the connection is in the pool and the maximal size of the pool every nginx worker process. In case of success, returns 1. In case of errors, returns nil with a string describing the error. Only call this method in the place you would have called the close method instead. Calling this method will immediately turn the current resty.mysql object into the closed state. Any subsequent operations other than connect() on the current objet will return the closed error. Back to TOC get_reused_times syntax: times, err = db:get_reused_times() This method returns the (successfully) reused times for the current connection. In case of error, it returns nil and a string describing the error. If the current connection does not come from the built-in connection pool, then this method always returns 0, that is, the connection has never been reused (yet). If the connection comes from the connection pool, then the return value is always non-zero. So this method can also be used to determine if the current connection comes from the pool. Back to TOC close syntax: ok, err = db:close() Closes the current mysql connection and returns the status. In case of success, returns 1. In case of errors, returns nil with a string describing the error. Back to TOC send_query syntax: bytes, err = db:send_query(query) Sends the query to the remote MySQL server without waiting for its replies. Returns the bytes successfully sent out in success and otherwise returns nil and a string describing the error. You should use the read_result method to read the MySQL replies afterwards. Back to TOC read_result syntax: res, err, errcode, sqlstate = db:read_result() syntax: res, err, errcode, sqlstate = db:read_result(nrows) Reads in one result returned from the MySQL server. It returns a Lua table (res) describing the MySQL OK packet or result set packet for the query result. For queries corresponding to a result set, it returns an array holding all the rows. Each row holds key-value apirs for each data fields. For instance,     {         { name = ""Bob"", age = 32, phone = ngx.null },         { name = ""Marry"", age = 18, phone = ""10666372""}     } For queries that do not correspond to a result set, it returns a Lua table like this:     {         insert_id = 0,         server_status = 2,         warning_count = 1,         affected_rows = 32,         message = nil     } If more results are following the current result, a second err return value will be given the string again. One should always check this (second) return value and if it is again, then she should call this method again to retrieve more results. This usually happens when the original query contains multiple statements (separated by semicolon in the same query string) or calling a MySQL procedure. See also Multi-Resultset Support. In case of errors, this method returns at most 4 values: nil, err, errcode, and sqlstate. The err return value contains a string describing the error, the errcode return value holds the MySQL error code (a numerical value), and finally, the sqlstate return value contains the standard SQL error code that consists of 5 characters. Note that, the errcode and sqlstate might be nil if MySQL does not return them. The optional argument nrows can be used to specify an approximate number of rows for the result set. This value can be used to pre-allocate space in the resulting Lua table for the result set. By default, it takes the value 4. Back to TOC query syntax: res, err, errcode, sqlstate = db:query(query) syntax: res, err, errcode, sqlstate = db:query(query, nrows) This is a shortcut for combining the send_query call and the first read_result call. You should always check if the err return value is again in case of success because this method will only call read_result only once for you. See also Multi-Resultset Support. Back to TOC server_ver syntax: str = db:server_ver() Returns the MySQL server version string, like ""5.1.64"". You should only call this method after successfully connecting to a MySQL server, otherwise nil will be returned. Back to TOC set_compact_arrays syntax: db:set_compact_arrays(boolean) Sets whether to use the ""compact-arrays"" structure for the resultsets returned by subsequent queries. See the compact_arrays option for the connect method for more details. This method was first introduced in the v0.09 release. Back to TOC SQL Literal Quoting It is always important to quote SQL literals properly to prevent SQL injection attacks. You can use the ngx.quote_sql_str function provided by ngx_lua to quote values. Here is an example:     local name = ngx.unescape_uri(ngx.var.arg_name)     local quoted_name = ngx.quote_sql_str(name)     local sql = ""select * from users where name = "" .. quoted_name Back to TOC Multi-Resultset Support For a SQL query that produces multiple result-sets, it is always your duty to check the ""again"" error message returned by the query or read_result method calls, and keep pulling more result sets by calling the read_result method until no ""again"" error message returned (or some other errors happen). Below is a trivial example for this:     local cjson = require ""cjson""     local mysql = require ""resty.mysql""      local db = mysql:new()     local ok, err, errcode, sqlstate = db:connect({         host = ""127.0.0.1"",         port = 3306,         database = ""world"",         user = ""monty"",         password = ""pass""})      if not ok then         ngx.log(ngx.ERR, ""failed to connect: "", err, "": "", errcode, "" "", sqlstate)         return ngx.exit(500)     end      res, err, errcode, sqlstate = db:query(""select 1; select 2; select 3;"")     if not res then         ngx.log(ngx.ERR, ""bad result #1: "", err, "": "", errcode, "": "", sqlstate, ""."")         return ngx.exit(500)     end      ngx.say(""result #1: "", cjson.encode(res))      local i = 2     while err == ""again"" do         res, err, errcode, sqlstate = db:read_result()         if not res then             ngx.log(ngx.ERR, ""bad result #"", i, "": "", err, "": "", errcode, "": "", sqlstate, ""."")             return ngx.exit(500)         end          ngx.say(""result #"", i, "": "", cjson.encode(res))         i = i + 1     end      local ok, err = db:set_keepalive(10000, 50)     if not ok then         ngx.log(ngx.ERR, ""failed to set keepalive: "", err)         ngx.exit(500)     end This code snippet will produce the following response body data: result #1: [{""1"":""1""}] result #2: [{""2"":""2""}] result #3: [{""3"":""3""}]  Back to TOC Debugging It is usually convenient to use the lua-cjson library to encode the return values of the MySQL query methods to JSON. For example,     local cjson = require ""cjson""     ...     local res, err, errcode, sqlstate = db:query(""select * from cats"")     if res then         print(""res: "", cjson.encode(res))     end Back to TOC Automatic Error Logging By default the underlying ngx_lua module does error logging when socket errors happen. If you are already doing proper error handling in your own Lua code, then you are recommended to disable this automatic error logging by turning off ngx_lua's lua_socket_log_errors directive, that is,     lua_socket_log_errors off; Back to TOC Limitations This library cannot be used in code contexts like init_by_lua, set_by_lua, log_by_lua, and header_filter_by_lua where the ngx_lua cosocket API is not available. The resty.mysql object instance cannot be stored in a Lua variable at the Lua module level, because it will then be shared by all the concurrent requests handled by the same nginx worker process (see http://wiki.nginx.org/HttpLuaModule#Data_Sharing_within_an_Nginx_Worker ) and result in bad race conditions when concurrent requests are trying to use the same resty.mysql instance. You should always initiate resty.mysql objects in function local variables or in the ngx.ctx table. These places all have their own data copies for each request. Back to TOC Installation If you are using the ngx_openresty bundle (http://openresty.org ), then you do not need to do anything because it already includes and enables lua-resty-mysql by default. And you can just use it in your Lua code, as in     local mysql = require ""resty.mysql""     ... If you are using your own nginx + ngx_lua build, then you need to configure the lua_package_path directive to add the path of your lua-resty-mysql source tree to ngx_lua's LUA_PATH search path, as in     # nginx.conf     http {         lua_package_path ""/path/to/lua-resty-mysql/lib/?.lua;;"";         ...     } Ensure that the system account running your Nginx ''worker'' proceses have enough permission to read the .lua file. Back to TOC Community Back to TOC English Mailing List The openresty-en mailing list is for English speakers. Back to TOC Chinese Mailing List The openresty mailing list is for Chinese speakers. Back to TOC Bugs and Patches Please submit bug reports, wishlists, or patches by creating a ticket on the GitHub Issue Tracker, or posting to the OpenResty community. Back to TOC TODO improve the MySQL connection pool support. implement the MySQL binary row data packets. implement MySQL's old pre-4.0 authentication method. implement MySQL server prepare and execute packets. implement the data compression support in the protocol. Back to TOC Author Yichun ""agentzh"" Zhang (章亦春) agentzh@gmail.com, CloudFlare Inc. Back to TOC Copyright and License This module is licensed under the BSD license. Copyright (C) 2012-2013, by Yichun ""agentzh"" Zhang (章亦春) agentzh@gmail.com, CloudFlare Inc. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Back to TOC See Also the ngx_lua module: http://wiki.nginx.org/HttpLuaModule the MySQL wired protocol specification: http://forge.mysql.com/wiki/MySQL_Internals_ClientServer_Protocol the lua-resty-memcached library the lua-resty-redis library the ngx_drizzle module: http://wiki.nginx.org/HttpDrizzleModule Back to TOC Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/openresty/lua-resty-mysql"	"Lua MySQL driver for OpenResty."	"true"
"Data Stores"	"lua-resty-redis"	"https://github.com/openresty/lua-resty-redis"	"Lua Redis client driver for OpenResty."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"602"	"78"	"166"	"GitHub - openresty/lua-resty-redis: Lua redis client driver for the ngx_lua based on the cosocket API Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 78 Star 602 Fork 166 openresty/lua-resty-redis Code Issues 20 Pull requests 7 Pulse Graphs Lua redis client driver for the ngx_lua based on the cosocket API 156 commits 1 branch 24 releases 7 contributors Lua 96.2% Makefile 3.8% Lua Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.24 v0.23 v0.22 v0.21 v0.20 v0.19 v0.18 v0.17 v0.16 v0.15 v0.14 v0.13 v0.12 v0.11 v0.10 v0.09 v0.08 v0.07 v0.06 v0.05 v0.04 v0.03 v0.02 v0.01 Nothing to show New pull request Latest commit a9ca41c May 25, 2016 agentzh bumped version to 0.24. Permalink Failed to load latest commit information. lib/resty bumped version to 0.24. May 25, 2016 t optimize: we now alway call tostring() upon args in redis query methods. May 9, 2016 .gitattributes added a .gitattributes file to correct GitHub's language tag. Nov 23, 2015 .gitignore updated .gitignore to ignore ctags files. Nov 11, 2012 .travis.yml feature: added initial travis ci support. May 24, 2016 Makefile fixed Makefile to allow relative paths in LUA_LIB_DIR when DESTDIR is… Dec 23, 2015 README.markdown correct a typo Feb 3, 2016 valgrind.suppress suppressed a false positive in libdl. Apr 1, 2014 README.markdown Name lua-resty-redis - Lua redis client driver for the ngx_lua based on the cosocket API Table of Contents Name Status Description Synopsis Methods new connect set_timeout set_keepalive get_reused_times close init_pipeline commit_pipeline cancel_pipeline hmset array_to_hash read_reply add_commands Redis Authentication Redis Transactions Load Balancing and Failover Debugging Automatic Error Logging Check List for Issues Limitations Installation TODO Community English Mailing List Chinese Mailing List Bugs and Patches Author Copyright and License See Also Status This library is considered production ready. Description This Lua library is a Redis client driver for the ngx_lua nginx module: http://wiki.nginx.org/HttpLuaModule This Lua library takes advantage of ngx_lua's cosocket API, which ensures 100% nonblocking behavior. Note that at least ngx_lua 0.5.14 or OpenResty 1.2.1.14 is required. Synopsis     # you do not need the following line if you are using     # the OpenResty bundle:     lua_package_path ""/path/to/lua-resty-redis/lib/?.lua;;"";      server {         location /test {             content_by_lua '                 local redis = require ""resty.redis""                 local red = redis:new()                  red:set_timeout(1000) -- 1 sec                  -- or connect to a unix domain socket file listened                 -- by a redis server:                 --     local ok, err = red:connect(""unix:/path/to/redis.sock"")                  local ok, err = red:connect(""127.0.0.1"", 6379)                 if not ok then                     ngx.say(""failed to connect: "", err)                     return                 end                  ok, err = red:set(""dog"", ""an animal"")                 if not ok then                     ngx.say(""failed to set dog: "", err)                     return                 end                  ngx.say(""set result: "", ok)                  local res, err = red:get(""dog"")                 if not res then                     ngx.say(""failed to get dog: "", err)                     return                 end                  if res == ngx.null then                     ngx.say(""dog not found."")                     return                 end                  ngx.say(""dog: "", res)                  red:init_pipeline()                 red:set(""cat"", ""Marry"")                 red:set(""horse"", ""Bob"")                 red:get(""cat"")                 red:get(""horse"")                 local results, err = red:commit_pipeline()                 if not results then                     ngx.say(""failed to commit the pipelined requests: "", err)                     return                 end                  for i, res in ipairs(results) do                     if type(res) == ""table"" then                         if res[1] == false then                             ngx.say(""failed to run command "", i, "": "", res[2])                         else                             -- process the table value                         end                     else                         -- process the scalar value                     end                 end                  -- put it into the connection pool of size 100,                 -- with 10 seconds max idle time                 local ok, err = red:set_keepalive(10000, 100)                 if not ok then                     ngx.say(""failed to set keepalive: "", err)                     return                 end                  -- or just close the connection right away:                 -- local ok, err = red:close()                 -- if not ok then                 --     ngx.say(""failed to close: "", err)                 --     return                 -- end             ';         }     } Back to TOC Methods All of the Redis commands have their own methods with the same name except all in lower case. You can find the complete list of Redis commands here: http://redis.io/commands You need to check out this Redis command reference to see what Redis command accepts what arguments. The Redis command arguments can be directly fed into the corresponding method call. For example, the ""GET"" redis command accepts a single key argument, then you can just call the ""get"" method like this:     local res, err = red:get(""key"") Similarly, the ""LRANGE"" redis command accepts threee arguments, then you should call the ""lrange"" method like this:     local res, err = red:lrange(""nokey"", 0, 1) For example, ""SET"", ""GET"", ""LRANGE"", and ""BLPOP"" commands correspond to the methods ""set"", ""get"", ""lrange"", and ""blpop"". Here are some more examples:     -- HMGET myhash field1 field2 nofield     local res, err = red:hmget(""myhash"", ""field1"", ""field2"", ""nofield"")     -- HMSET myhash field1 ""Hello"" field2 ""World""     local res, err = red:hmset(""myhash"", ""field1"", ""Hello"", ""field2"", ""World"") All these command methods returns a single result in success and nil otherwise. In case of errors or failures, it will also return a second value which is a string describing the error. A Redis ""status reply"" results in a string typed return value with the ""+"" prefix stripped. A Redis ""integer reply"" results in a Lua number typed return value. A Redis ""error reply"" results in a false value and a string describing the error. A non-nil Redis ""bulk reply"" results in a Lua string as the return value. A nil bulk reply results in a ngx.null return value. A non-nil Redis ""multi-bulk reply"" results in a Lua table holding all the composing values (if any). If any of the composing value is a valid redis error value, then it will be a two element table {false, err}. A nil multi-bulk reply returns in a ngx.null value. See http://redis.io/topics/protocol for details regarding various Redis reply types. In addition to all those redis command methods, the following methods are also provided: Back to TOC new syntax: red, err = redis:new() Creates a redis object. In case of failures, returns nil and a string describing the error. Back to TOC connect syntax: ok, err = red:connect(host, port, options_table?) syntax: ok, err = red:connect(""unix:/path/to/unix.sock"", options_table?) Attempts to connect to the remote host and port that the redis server is listening to or a local unix domain socket file listened by the redis server. Before actually resolving the host name and connecting to the remote backend, this method will always look up the connection pool for matched idle connections created by previous calls of this method. An optional Lua table can be specified as the last argument to this method to specify various connect options: pool Specifies a custom name for the connection pool being used. If omitted, then the connection pool name will be generated from the string template <host>:<port> or <unix-socket-path>. Back to TOC set_timeout syntax: red:set_timeout(time) Sets the timeout (in ms) protection for subsequent operations, including the connect method. Back to TOC set_keepalive syntax: ok, err = red:set_keepalive(max_idle_timeout, pool_size) Puts the current Redis connection immediately into the ngx_lua cosocket connection pool. You can specify the max idle timeout (in ms) when the connection is in the pool and the maximal size of the pool every nginx worker process. In case of success, returns 1. In case of errors, returns nil with a string describing the error. Only call this method in the place you would have called the close method instead. Calling this method will immediately turn the current redis object into the closed state. Any subsequent operations other than connect() on the current object will return the closed error. Back to TOC get_reused_times syntax: times, err = red:get_reused_times() This method returns the (successfully) reused times for the current connection. In case of error, it returns nil and a string describing the error. If the current connection does not come from the built-in connection pool, then this method always returns 0, that is, the connection has never been reused (yet). If the connection comes from the connection pool, then the return value is always non-zero. So this method can also be used to determine if the current connection comes from the pool. Back to TOC close syntax: ok, err = red:close() Closes the current redis connection and returns the status. In case of success, returns 1. In case of errors, returns nil with a string describing the error. Back to TOC init_pipeline syntax: red:init_pipeline() syntax: red:init_pipeline(n) Enable the redis pipelining mode. All subsequent calls to Redis command methods will automatically get cached and will send to the server in one run when the commit_pipeline method is called or get cancelled by calling the cancel_pipeline method. This method always succeeds. If the redis object is already in the Redis pipelining mode, then calling this method will discard existing cached Redis queries. The optional n argument specifies the (approximate) number of commands that are going to add to this pipeline, which can make things a little faster. Back to TOC commit_pipeline syntax: results, err = red:commit_pipeline() Quits the pipelining mode by committing all the cached Redis queries to the remote server in a single run. All the replies for these queries will be collected automatically and are returned as if a big multi-bulk reply at the highest level. This method returns nil and a Lua string describing the error upon failures. Back to TOC cancel_pipeline syntax: red:cancel_pipeline() Quits the pipelining mode by discarding all existing cached Redis commands since the last call to the init_pipeline method. This method always succeeds. If the redis object is not in the Redis pipelining mode, then this method is a no-op. Back to TOC hmset syntax: red:hmset(myhash, field1, value1, field2, value2, ...) syntax: red:hmset(myhash, { field1 = value1, field2 = value2, ... }) Special wrapper for the Redis ""hmset"" command. When there are only three arguments (including the ""red"" object itself), then the last argument must be a Lua table holding all the field/value pairs. Back to TOC array_to_hash syntax: hash = red:array_to_hash(array) Auxiliary function that converts an array-like Lua table into a hash-like table. This method was first introduced in the v0.11 release. Back to TOC read_reply syntax: res, err = red:read_reply() Reading a reply from the redis server. This method is mostly useful for the Redis Pub/Sub API, for example,     local cjson = require ""cjson""     local redis = require ""resty.redis""      local red = redis:new()     local red2 = redis:new()      red:set_timeout(1000) -- 1 sec     red2:set_timeout(1000) -- 1 sec      local ok, err = red:connect(""127.0.0.1"", 6379)     if not ok then         ngx.say(""1: failed to connect: "", err)         return     end      ok, err = red2:connect(""127.0.0.1"", 6379)     if not ok then         ngx.say(""2: failed to connect: "", err)         return     end      local res, err = red:subscribe(""dog"")     if not res then         ngx.say(""1: failed to subscribe: "", err)         return     end      ngx.say(""1: subscribe: "", cjson.encode(res))      res, err = red2:publish(""dog"", ""Hello"")     if not res then         ngx.say(""2: failed to publish: "", err)         return     end      ngx.say(""2: publish: "", cjson.encode(res))      res, err = red:read_reply()     if not res then         ngx.say(""1: failed to read reply: "", err)         return     end      ngx.say(""1: receive: "", cjson.encode(res))      red:close()     red2:close() Running this example gives the output like this: 1: subscribe: [""subscribe"",""dog"",1] 2: publish: 1 1: receive: [""message"",""dog"",""Hello""]  The following class methods are provieded: Back to TOC add_commands syntax: hash = redis.add_commands(cmd_name1, cmd_name2, ...) Adds new redis commands to the resty.redis class. Here is an example:     local redis = require ""resty.redis""      redis.add_commands(""foo"", ""bar"")      local red = redis:new()      red:set_timeout(1000) -- 1 sec      local ok, err = red:connect(""127.0.0.1"", 6379)     if not ok then         ngx.say(""failed to connect: "", err)         return     end      local res, err = red:foo(""a"")     if not res then         ngx.say(""failed to foo: "", err)     end      res, err = red:bar()     if not res then         ngx.say(""failed to bar: "", err)     end Back to TOC Redis Authentication Redis uses the AUTH command to do authentication: http://redis.io/commands/auth There is nothing special for this command as compared to other Redis commands like GET and SET. So one can just invoke the auth method on your resty.redis instance. Here is an example:     local redis = require ""resty.redis""     local red = redis:new()      red:set_timeout(1000) -- 1 sec      local ok, err = red:connect(""127.0.0.1"", 6379)     if not ok then         ngx.say(""failed to connect: "", err)         return     end      local res, err = red:auth(""foobared"")     if not res then         ngx.say(""failed to authenticate: "", err)         return     end where we assume that the Redis server is configured with the password foobared in the redis.conf file: requirepass foobared  If the password specified is wrong, then the sample above will output the following to the HTTP client: failed to authenticate: ERR invalid password  Back to TOC Redis Transactions This library supports the Redis transactions. Here is an example:     local cjson = require ""cjson""     local redis = require ""resty.redis""     local red = redis:new()      red:set_timeout(1000) -- 1 sec      local ok, err = red:connect(""127.0.0.1"", 6379)     if not ok then         ngx.say(""failed to connect: "", err)         return     end      local ok, err = red:multi()     if not ok then         ngx.say(""failed to run multi: "", err)         return     end     ngx.say(""multi ans: "", cjson.encode(ok))      local ans, err = red:set(""a"", ""abc"")     if not ans then         ngx.say(""failed to run sort: "", err)         return     end     ngx.say(""set ans: "", cjson.encode(ans))      local ans, err = red:lpop(""a"")     if not ans then         ngx.say(""failed to run sort: "", err)         return     end     ngx.say(""set ans: "", cjson.encode(ans))      ans, err = red:exec()     ngx.say(""exec ans: "", cjson.encode(ans))      red:close() Then the output will be multi ans: ""OK"" set ans: ""QUEUED"" set ans: ""QUEUED"" exec ans: [""OK"",[false,""ERR Operation against a key holding the wrong kind of value""]]  Back to TOC Load Balancing and Failover You can trivially implement your own Redis load balancing logic yourself in Lua. Just keep a Lua table of all available Redis backend information (like host name and port numbers) and pick one server according to some rule (like round-robin or key-based hashing) from the Lua table at every request. You can keep track of the current rule state in your own Lua module's data, see http://wiki.nginx.org/HttpLuaModule#Data_Sharing_within_an_Nginx_Worker Similarly, you can implement automatic failover logic in Lua at great flexibility. Back to TOC Debugging It is usually convenient to use the lua-cjson library to encode the return values of the redis command methods to JSON. For example,     local cjson = require ""cjson""     ...     local res, err = red:mget(""h1234"", ""h5678"")     if res then         print(""res: "", cjson.encode(res))     end Back to TOC Automatic Error Logging By default the underlying ngx_lua module does error logging when socket errors happen. If you are already doing proper error handling in your own Lua code, then you are recommended to disable this automatic error logging by turning off ngx_lua's lua_socket_log_errors directive, that is,     lua_socket_log_errors off; Back to TOC Check List for Issues Ensure you configure the connection pool size properly in the set_keepalive . Basically if your NGINX handle n concurrent requests and your NGINX has m workers, then the connection pool size should be configured as n/m. For example, if your NGINX usually handles 1000 concurrent requests and you have 10 NGINX workers, then the connection pool size should be 100. Ensure the backlog setting on the Redis side is large enough. For Redis 2.8+, you can directly tune the tcp-backlog parameter in the redis.conf file (and also tune the kernel parameter SOMAXCONN accordingly at least on Linux). You may also want to tune the maxclients parameter in redis.conf. Ensure you are not using too short timeout setting in the set_timeout method. If you have to, try redoing the operation upon timeout and turning off automatic error logging (because you are already doing proper error handling in your own Lua code). If your NGINX worker processes' CPU usage is very high under load, then the NGINX event loop might be blocked by the CPU computation too much. Try sampling a C-land on-CPU Flame Graph and Lua-land on-CPU Flame Graph for a typical NGINX worker process. You can optimize the CPU-bound things according to these Flame Graphs. If your NGINX worker processes' CPU usage is very low under load, then the NGINX event loop might be blocked by some blocking system calls (like file IO system calls). You can confirm the issue by running the epoll-loop-blocking-distr tool against a typical NGINX worker process. If it is indeed the case, then you can further sample a C-land off-CPU Flame Graph for a NGINX worker process to analyze the actual blockers. If your redis-server process is running near 100% CPU usage, then you should consider scale your Redis backend by multiple nodes or use the C-land on-CPU Flame Graph tool to analyze the internal bottlenecks within the Redis server process. Back to TOC Limitations This library cannot be used in code contexts like init_by_lua, set_by_lua, log_by_lua, and header_filter_by_lua where the ngx_lua cosocket API is not available. The resty.redis object instance cannot be stored in a Lua variable at the Lua module level, because it will then be shared by all the concurrent requests handled by the same nginx worker process (see http://wiki.nginx.org/HttpLuaModule#Data_Sharing_within_an_Nginx_Worker ) and result in bad race conditions when concurrent requests are trying to use the same resty.redis instance (you would see the ""bad request"" or ""socket busy"" error to be returned from the method calls). You should always initiate resty.redis objects in function local variables or in the ngx.ctx table. These places all have their own data copies for each request. Back to TOC Installation If you are using the OpenResty bundle (http://openresty.org ), then you do not need to do anything because it already includes and enables lua-resty-redis by default. And you can just use it in your Lua code, as in     local redis = require ""resty.redis""     ... If you are using your own nginx + ngx_lua build, then you need to configure the lua_package_path directive to add the path of your lua-resty-redis source tree to ngx_lua's LUA_PATH search path, as in     # nginx.conf     http {         lua_package_path ""/path/to/lua-resty-redis/lib/?.lua;;"";         ...     } Ensure that the system account running your Nginx ''worker'' proceses have enough permission to read the .lua file. Back to TOC TODO Back to TOC Community Back to TOC English Mailing List The openresty-en mailing list is for English speakers. Back to TOC Chinese Mailing List The openresty mailing list is for Chinese speakers. Back to TOC Bugs and Patches Please report bugs or submit patches by creating a ticket on the GitHub Issue Tracker, or posting to the OpenResty community. Back to TOC Author Yichun ""agentzh"" Zhang (章亦春) agentzh@gmail.com, CloudFlare Inc. Back to TOC Copyright and License This module is licensed under the BSD license. Copyright (C) 2012-2016, by Yichun Zhang (agentzh) agentzh@gmail.com, CloudFlare Inc. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Back to TOC See Also the ngx_lua module: http://wiki.nginx.org/HttpLuaModule the redis wired protocol specification: http://redis.io/topics/protocol the lua-resty-memcached library the lua-resty-mysql library Back to TOC Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/openresty/lua-resty-redis"	"Lua Redis client driver for OpenResty."	"true"
"Data Stores"	"lua-resty-cassandra"	"https://github.com/jbochi/lua-resty-cassandra"	"Lua Cassandra client driver for OpenResty and others."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"54"	"6"	"13"	"GitHub - jbochi/lua-resty-cassandra: Pure Lua Cassandra client using CQL binary protocol Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 54 Fork 13 jbochi/lua-resty-cassandra Code Issues 12 Pull requests 2 Pulse Graphs Pure Lua Cassandra client using CQL binary protocol 205 commits 1 branch 11 releases 6 contributors Lua 94.5% Shell 5.2% Makefile 0.3% Lua Shell Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.5 v0.5-7 v0.5-6 v0.5-5 v0.5-4 v0.5-3 v0.5-2 v0.4 v0.3 v0.2 v0.1 Nothing to show New pull request Latest commit c364e76 May 5, 2015 jbochi Bump up version Permalink Failed to load latest commit information. .travis Coveralls travis setup + simpler .travis.yml Mar 3, 2015 spec feat: implement contact point specific port. Fix #55 May 2, 2015 src Bump up version May 5, 2015 .gitignore Add coverage and coveralls support. Mar 1, 2015 .travis.yml Coveralls travis setup + simpler .travis.yml Mar 4, 2015 CHANGELOG.md Bump up version May 5, 2015 LICENSE Add License Jul 11, 2014 Makefile Add coverage and coveralls support. Mar 1, 2015 README.md Bump up version May 5, 2015 bump.sh Bump up version Mar 4, 2015 cassandra-0.5-7.rockspec Bump up version May 5, 2015 README.md lua-resty-cassandra Pure Lua Cassandra client using CQL binary protocol v2. It is 100% non-blocking if used in Nginx/Openresty but can also be used with luasocket. Installation Luarocks Installation through luarocks is recommended: $ luarocks install cassandra Manual Copy the src/ folder and require cassandra.lua. Usage Overview: local cassandra = require ""cassandra""  local session = cassandra.new() session:set_timeout(1000) -- 1000ms timeout  local connected, err = session:connect(""127.0.0.1"", 9042)  session:set_keyspace(""lua_tests"")  -- simple query local table_created, err = session:execute [[   CREATE TABLE users(     user_id uuid PRIMARY KEY,     name varchar,     age int   ) ]]  -- query with arguments local ok, err = session:execute([[   INSERT INTO users(name, age, user_id) VALUES(?, ?, ?) ]], {""John O'Reilly"", 42, cassandra.uuid(""1144bada-852c-11e3-89fb-e0b9a54a6d11"")})   -- select statement local users, err = session:execute(""SELECT name, age, user_id from users"")  assert(1 == #users) local user = users[1] ngx.say(user.name) -- ""John O'Reilly"" ngx.say(user.user_id) -- ""1144bada-852c-11e3-89fb-e0b9a54a6d11"" ngx.say(user.age) -- 42 You can check more examples in the tests or here. Socket methods session, err = cassandra.new() Creates a new session. Create a socket with the cosocket API if available, fallback on luasocket otherwise. Return values: session: A lua-resty-cassandra session. err: Any error encountered during the socket creation. session:set_timeout(timeout) Sets timeout (in miliseconds). Uses Nginx tcpsock:settimeout. Parameters: timeout: A number being the timeout in miliseconds ok, err = session:connect(contact_points, port) Connects to a single or multiple hosts at the given port. Parameters: contact_points: A string or an array of strings (hosts) to connect to. Note: If you wish to give a different port to one of those hosts, format the string as: ""host:port"" for that specific contact point. The specified port value will overwrite the port argument of connect for that contact point. port: The port number. Default: 9042. Return values: ok: true if connected, false otherwise. Nil of the session doesn't have a socket. err: Any encountered error. ok, err = session:set_keepalive(max_idle_timeout, pool_size) -- Nginx only Puts the current Cassandra connection immediately into the ngx_lua cosocket connection pool. Note: Only call this method in the place you would have called the close method instead. Calling this method will immediately turn the current cassandra session object into the closed state. Any subsequent operations other than connect() on the current objet will return the closed error. Parameters: max_idle_timeout: Max idle timeout (in ms) when the connection is in the pool pool_size: Maximal size of the pool every nginx worker process. Return values: ok: 1 if success, nil otherwise. err: Encountered error if any times, err = session:get_reused_times() -- Nginx only This method returns the (successfully) reused times for the current connection. In case of error, it returns nil and a string describing the error. Note: If the current connection does not come from the built-in connection pool, then this method always returns 0, that is, the connection has never been reused (yet). If the connection comes from the connection pool, then the return value is always non-zero. So this method can also be used to determine if the current connection comes from the pool. Return values: times: Number of times the current connection was successfully reused, nil if error err: Encountered error if any ok, err = session:close() Closes the current connection and returns the status. Return values: ok: 1 if success, nil otherwise. err: Encountered error if any Client methods All errors returned by functions in this section are tables with the following properties: code: A string from one of the error_codes in cassandra.contants. raw_message: The error message being returned by Cassandra. message: A constructed error message with code + raw_message. Error tables implement the __tostring method and are thus printable. A stringified error table will outputs its message property. ok, err = session:set_keyspace(keyspace_name) Sets session keyspace to the given keyspace_name. Parameters: keyspace_name: Name of the keyspace to use. Return values: See :execute() stmt, err = session:prepare(query, options) Prepare a statement for later execution. Parameters: query: A string representing a query to prepare. options: The same options available on :execute(). Return values: stmt: A prepareed statement to be used by :execute(), nil if the preparation failed. err: Encountered error if any. result, err = session:execute(query, args, options) Execute a query or previously prepared statement. Parameters: query: A string representing a query or a previously prepared statement. args: An array of arguments to bind to the query. Those arguments can be type annotated (example: cassandra.bigint(4). If there is no annotation, the driver will try to infer a type. Since integer numbers are serialized as int with 4 bytes, Cassandra would return an error if we tried to insert it in a bigint column. options is a table of options: consistency_level: for example cassandra.consistency.ONE tracing: if set to true, enables tracing for this query. In this case, the result table will contain a key named tracing_id with an uuid of the tracing session. page_size: Maximum size of the page to fetch (default: 5000). auto_paging: If set to true, execute will return an iterator. See the example below on how to use auto pagination. Return values: result: A table containing the result of this query if successful, ni otherwise. The table can contain additional keys: type: Type of the result set, can either be ""VOID"", ""ROWS"", ""SET_KEYSPACE"" or ""SCHEMA_CHANGE"". meta: If the result type is ""ROWS"" and the result has more pages that haven't been returned, this property will contain 2 values: has_more_pages and paging_state. See the example below on how to use pagination. err: Encountered error if any. batch, err = cassandra.BatchStatement(type) Initialized a batch statement. See the example below on how to use batch statements and this for informations about the type of batch to use. Parameters: type: The type of batch statement. Can be ony of those: cassandra.batch_types.LOGGED (default) cassandra.batch_types.UNLOGGED cassandra.batch_types.COUNTER Return values: batch: An empty batch statement on which to add operations. err: Encountered error if any. batch:add(query, args) Add an operation to a batch statement. See the example below on how to use batch statements. Parameters: query: A string representing a query or a previously prepared statement. args: An array of arguments to bind to the query, similar to :execute(). trace, err = session:get_trace(result) Return the trace of a given result, if possible. Parameters: result: A previous query result. Return values: trace: is a table with the following keys (from system_traces.sessions and system_traces.events system tracing tables: coordinator duration parameters request started_at events: an array of tables with the following keys: event_id activity source source_elapsed thread err: Encountered error if any. Examples Batches: -- Create a batch statement local batch = cassandra.BatchStatement()  -- Add a query batch:add(""INSERT INTO users (name, age, user_id) VALUES (?, ?, ?)"",           {""James"", 32, cassandra.uuid(""2644bada-852c-11e3-89fb-e0b9a54a6d93"")})  -- Add a prepared statement local stmt, err = session:prepare(""INSERT INTO users (name, age, user_id) VALUES (?, ?, ?)"") batch:add(stmt, {""John"", 45, cassandra.uuid(""1144bada-852c-11e3-89fb-e0b9a54a6d11"")})  -- Execute the batch local result, err = session:execute(batch) Pagination might be very useful to build web services: -- Assuming our users table contains 1000 rows  local query = ""SELECT * FROM users"" local rows, err = session:execute(query, nil, {page_size = 500}) -- default page_size is 5000  assert.same(500, #rows) -- rows contains the 500 first rows  if rows.meta.has_more_pages then   local next_rows, err = session:execute(query, nil, {paging_state = rows.meta.paging_state})    assert.same(500, #next_rows) -- next_rows contains the next (and last) 500 rows end Automated pagination: -- Assuming our users table now contains 10.000 rows  local query = ""SELECT * FROM users""  for _, rows, page, err in session:execute(query, nil, {auto_paging=true}) do   assert.same(5000, #rows) -- rows contains 5000 rows on each iteration in this case   -- page: will be 1 on the first iteration, 2 on the second   -- err: in case any fetch returns an error   -- _: (the first for argument) is the current paging_state used to fetch the rows end Running unit tests We use busted and require luasocket to mock ngx.socket.tcp(). To run the tests, start a local cassandra instance and run: $ luarocks install busted $ make test Running coverage $ luarocks install luacov $ make coverage Report will be in ./luacov.report.out. Running linting $ luarocks install luacheck $ make lint Contributors Juarez Bochi (@jbochi) Thibault Charbonnier (@thibaultCha) -> Several contributions, including paging support, improved batch statements, better documentation, specs and code style. Leandro Moreira (@leandromoreira) -> Added support for doubles Marco Palladino (@thefosk) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jbochi/lua-resty-cassandra"	"Lua Cassandra client driver for OpenResty and others."	"true"
"Testing"	"busted"	"http://olivinelabs.com/busted/"	"BDD-style unit testing framework with great docs and Moonscript support."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"busted : Elegant Lua unit testing, by Olivine-Labs busted Elegant Lua unit testing. Toggle navigation Busted 2.0.rc12-1 View OnGitHub @ Olivine-Labs/busted ZIP File TAR Ball Install: luarocks install busted Overview Usage Defining Tests Asserts Spies, Stubs & Mocks Matchers Async Tests Private Output Handlers Moonscript i18n Shell Completion Contributing What's busted, precious? busted is a unit testing framework with a focus on being easy to use. busted works with lua >= 5.1, moonscript, terra, and LuaJIT >= 2.0.0. busted test specs read naturally without being too verbose. You can even chain asserts and negations, such as assert.not.equals. Nest blocks of tests with contextual descriptions using describe, and add tags to blocks so you can run arbitrary groups of tests. An extensible assert library allows you to extend and craft your own assert functions specific to your case with method chaining. A modular output library lets you add on your own output format, along with the default pretty and plain terminal output, JSON with and without streaming, and TAP-compatible output that allows you to run busted specs within most CI servers. You can even register phrases for internationaliation with custom or built-in language packs. describe(""Busted unit testing framework"", function()   describe(""should be awesome"", function()     it(""should be easy to use"", function()       assert.truthy(""Yup."")     end)      it(""should have lots of features"", function()       -- deep check comparisons!       assert.are.same({ table = ""great""}, { table = ""great"" })        -- or check by reference!       assert.are_not.equal({ table = ""great""}, { table = ""great""})        assert.truthy(""this is a string"") -- truthy: not false or nil        assert.True(1 == 1)       assert.is_true(1 == 1)        assert.falsy(nil)       assert.has_error(function() error(""Wat"") end, ""Wat"")     end)      it(""should provide some shortcuts to common functions"", function()       assert.are.unique({{ thing = 1 }, { thing = 2 }, { thing = 3 }})     end)      it(""should have mocks and spies for functional tests"", function()       local thing = require(""thing_module"")       spy.on(thing, ""greet"")       thing.greet(""Hi!"")        assert.spy(thing.greet).was.called()       assert.spy(thing.greet).was.called_with(""Hi!"")     end)   end) end)  busted test.lua Usage Installation Install busted through Luarocks. Depending on your environment, you can apt-get luarocks, brew install luarocks, or otherwise get it from luarocks.org. You can also install the latest or a branch by cloning the busted repository, and running luarocks make from the directory. CLI: Running Busted Usage: busted [OPTIONS] [--] [ROOT-1 [ROOT-2 [...]]]   ROOT                    test script file/folder. Folders will be                           traversed for any file that matches the                           --pattern option. (optional, default: spec)  OPTIONS:   --version               prints the program version and exits   -p, --pattern=PATTERN   only run test files matching the Lua pattern                           (default: _spec)   -o, --output=LIBRARY    output library to load (default: utfTerminal)   -C, --directory=DIR     change to directory DIR before running tests.                           If multiple options are specified, each is                           interpreted relative to the previous one.                           (default: ./)   -f, --config-file=FILE  load configuration options from FILE   -t, --tags=TAGS         only run tests with these #tags (default: [])   --exclude-tags=TAGS     do not run tests with these #tags, takes                           precedence over --tags (default: [])   --filter=PATTERN        only run test names matching the Lua pattern                           (default: [])   --filter-out=PATTERN    do not run test names matching the Lua                           pattern, takes precedence over --filter                           (default: [])   -m, --lpath=PATH        optional path to be prefixed to the Lua module                           search path (default:                           ./src/?.lua;./src/?/?.lua;./src/?/init.lua)   --cpath=PATH            optional path to be prefixed to the Lua C                           module search path (default:                           ./csrc/?.so;./csrc/?/?.so;)   -r, --run=RUN           config to run from .busted file   --repeat=COUNT          run the tests repeatedly (default: 1)   --seed=SEED             random seed value to use for shuffling test                           order (default: os.time())   --lang=LANG             language for error messages (default: en)   --loaders=NAME          test file loaders (default: lua,moonscript)   --helper=PATH           A helper script that is run before tests   -Xoutput OPTION         pass `OPTION` as an option to the output                           handler. If `OPTION` contains commas, it is                           split into multiple options at the commas.                           (default: [])   -Xhelper OPTION         pass `OPTION` as an option to the helper                           script. If `OPTION` contains commas, it is                           split into multiple options at the commas.                           (default: [])   -c, --[no-]coverage     do code coverage analysis (requires `LuaCov`                           to be installed) (default: off)   -v, --[no-]verbose      verbose output of errors (default: off)   -s, --[no-]enable-sound executes `say` command if available (default:                           off)   -l, --list              list the names of all tests instead of running                           them   --[no-]lazy             use lazy setup/teardown as the default                           (default: off)   --[no-]auto-insulate    enable file insulation (default: on)   -k, --[no-]keep-going   continue as much as possible after an error or                           failure (default: on)   -R, --[no-]recursive    recurse into subdirectories (default: on)   --[no-]shuffle          randomize file and test order, takes                           precedence over --sort (--shuffle-test and                           --shuffle-files) (default: off)   --[no-]shuffle-files    randomize file execution order, takes                           precedence over --sort-files (default: off)   --[no-]shuffle-tests    randomize test order within a file, takes                           precedence over --sort-tests (default: off)   --[no-]sort             sort file and test order (--sort-tests and                           --sort-files) (default: off)   --[no-]sort-files       sort file execution order (default: off)   --[no-]sort-tests       sort test order within a file (default: off)   --[no-]suppress-pending suppress `pending` test output (default: off)   --[no-]defer-print      defer print to when test suite is complete                           (default: off)  Predefined Busted Tasks Busted 1.6 added a concept of ""tasks"", or predefined busted configuration options. You can create a .busted file in the root, which is automatically loaded if it exists. Default options are run if no task is specified. The _all key is inherited by all tasks. You can add any argument available in the CLI (listed above), using the long name (use verbose = true, not v = true). Any arguments you specify will override those set in the task. You can also explicitly specify the configuration file to load using the --config-file=FILE option, which will load configuration options from FILE insted of the .busted file. An example .busted file might look like: return {   _all = {     coverage = true   },   default = {     verbose = true   },   apiUnit = {     tags = ""api"",     ROOT = {""spec/unit""},     verbose = true   } } This allows you to run busted --run=apiUnit, which will run the equivalent of busted --coverage --tags=api --verbose spec/unit. If you only run busted, it will run the equivalent of busted --coverage --verbose. Standalone You can also run busted tests standalone without invoking the busted executor. By adding require 'busted.runner'() to the beginning of your test file, it becomes a standalone executable test. require 'busted.runner'()  describe(""a test"", function()   -- tests to here end)  lua test.lua This runs the test as a standalone Lua script. Of course you can still run the test using busted explicitly. busted test.lua Additionally, you can still use all of the same busted command-line options when running in standalone mode. lua test.lua -t ""tag"" --verbose Defining Tests Set up your tests using describe and it blocks. These take a description (to be used for output) and a callback (which either defines more blocks or contains the tests themselves. Describe blocks can have more decribe blocks nested. You can also use the functions before_each and after_each to define functions that should be run before any nested tests, and setup and teardown for functions that should be run before and after the describe block. You can also use the pending method to leave a placeholder for a test you plan on writing later. Tag your tests with #hashtags to run specific tests. When you run busted from the command line, add the -t flag to run a given tag. Seperate tags by commas to run more than one tag. Describe: Context blocks describe takes a title and a callback, and can be nested. You can also use context as an alias if you like. describe(""a test"", function()   -- tests go here    describe(""a nested block"", function()     describe(""can have many describes"", function()       -- tests     end)   end)    -- more tests pertaining to the top level end)  Describe: Insulate & Expose blocks insulate and expose blocks are describe aliases that control the level of sandboxing performed by busted for that context block. Like their names suggest, an insulate block insulates the test environment, while an expose block exposes the test environment to outer context blocks. By default each test file runs in a separate insulate block, which can be disabled with the --no-auto-insulate flag. Test environment insulation saves the global table _G and any currently loaded packages package.loaded, restoring them to their original state at the completion of the insulate block. insulate(""an insulated test"", function()   require(""mymodule"")   _G.myglobal = true    -- tests go here    describe(""a nested block"", function()     describe(""can have many describes"", function()       -- tests     end)   end)    -- more tests pertaining to the top level end)  describe(""a test"", function()   it(""tests insulate block does not update environment"", function()     assert.is_nil(package.loaded.mymodule)  -- mymodule is not loaded     assert.is_nil(_G.myglobal)  -- _G.myglobal is not set     assert.is_nil(myglobal)   end)    -- tests go here end)  Exposing a test environment exports any changes made to _G and package.loaded to subsequent context blocks. In addition, any global variables created inside an expose block are created in the environment of the context block 2 levels out. Using expose at the root of a file will promote any require's and globals to the root environment, which will spillover into subsequent test files. -- test1_spec.lua expose(""an exposed test"", function()   require(""mymodule"")   _G.myglobal = true    -- tests can go here    describe(""a nested block"", function()     describe(""can have many describes"", function()       -- tests     end)   end)    -- more tests pertaining to the top level end)  describe(""a test in same file"", function()   it(""tests expose block updates environment"", function()     assert.is_truthy(package.loaded.mymodule) -- mymodule is still loaded     assert.is_true(_G.myglobal) -- _G.myglobal is still set     assert.is_equal(myglobal)   end)    -- tests go here end)  -- test2_spec.lua describe(""a test in separate file"", function()   it(""tests expose block updates environment"", function()     assert.is_truthy(package.loaded.mymodule) -- mymodule is still loaded     assert.is_true(_G.myglobal)               -- _G.myglobal is still set     assert.is_equal(_G.myglobal, myglobal)   end)    -- tests go here end)  Describe: Tagging Tests Tag tests using #tags, and run using the -t flag to only run that test. describe(""a test #tag"", function()   -- tests go here end)  describe(""a nested block #another"", function()   describe(""can have many describes"", function()     -- tests   end)    -- more tests pertaining to the top level end)  busted -t ""tag"" ./test.lua This runs the first group of tests, but not the second. busted -t ""tag,another"" ./test.lua This runs both groups. You can also exclude tests that use tags with the --exclude-tags flag. This can be useful, for example, if tests using a certain tag take a long time to run and you want busted to skip them. This would run all tests except the second group in the example above. busted --exclude-tags=""another"" ./test.lua If you use -t, --tags and --exclude-tags together then --exclude-tags always takes precedence. describe(""a test with two tags #one #two"", function ()   -- tests end)  busted --tags=""one"" --exclude-tags=""two"" ./test.lua Both tags refer to the same test but busted will not run it since --exclude-tags takes precedence. busted --tags=""one"" --exclude-tags=""one"" ./test.lua It is ok for different tags to refer to the same tests, but using the exact same tag name with --tags and --exclude-tags at the same time is an error. Randomizing Tests You can cause nested tests and describes to be randomized by calling randomize(). describe(""a ramdomized test"", function()   randomize()    it(""runs a test"", function() end)   it(""runs another test"", function() end) end)  If randomization has been enabled for all tests with the --shuffle flag, you can turn off randomization for nested tests and describes by calling randomize(false). describe(""a non-randomized test"", function()   randomize(false)    it(""runs a test"", function() end)   it(""runs another test"", function() end) end)  It: Defining tests An it block takes a title and a callback. Tests fail if an uncaptured error is thrown (assert functions throw errors for failed tests). You can also use spec or test as aliases if you like. describe(""busted"", function()   it(""has tests"", function()     local obj1 = { test = ""yes"" }     local obj2 = { test = ""yes"" }     assert.same(obj1, obj2)   end) end)  Before Each & After Each; Setup & Teardown before_each runs before each child test, and after_each (you guessed it) runs after. setup runs first in a describe block, and teardown runs last in a describe block. setup and teardown blocks can be made lazy or strict. lazy_setup and lazy_teardown will only run if there is at least one child test present in the current or any nested describe blocks. Conversely, strict_setup and strict_teardown will always run in a describe block, even if no child tests are present. By default setup and teardown are strict, but can be made lazy with the --lazy flag. describe(""busted"", function()   local obj1, obj2   local util    setup(function()     util = require(""util"")   end)    teardown(function()     util = nil   end)    before_each(function()     obj1 = { test = ""yes"" }     obj2 = { test = ""yes"" }   end)    it(""sets up vars with the before_each"", function()     obj2 = { test = ""no"" }     assert.are_not.same(obj1, obj2)   end)    it(""sets up vars with the before_each"", function()     -- obj2 is reset thanks to the before_each     assert.same(obj1, obj2)   end)    describe(""nested"", function()     it(""also runs the before_each here"", function()       -- if this describe also had a before_each, it would run       -- both, starting with the parents'. You can go n-deep.     end)   end) end)  finally is also available as a lighter alternative that avoids setting upvalues. it('checks file contents',function()   local f = io.popen('stupid_process')    -- ensure that once test has finished f:close() is called   -- independent of test outcome   finally(function() f:close() end)    -- do things with f end)  Pending Pending functions are placeholders for tests you plan to write (or fix) later. describe(""busted pending tests"", function()   pending(""I should finish this test later"") end)  Asserts Asserts are the core of busted; they're what you use to actually write your tests. Asserts in busted work by chaining a modifier value by using is or is_not, followed by the assert you wish to use. It's easy to extend busted and add your own asserts by building an assert with a commmon signature and registering it. Busted uses the luassert library to provide the assertions. Note that some of the assertion/modifiers are Lua keywords ( true, false, nil, function, and not) and they cannot be used using '.' chaining because that results in compilation errors. Instead chain using '_' (underscore) or use one or more capitals in the reserved word, whatever your coding style prefers. Is & Is Not is and is_not flips the expected value of the assertion; if is_not is used, the assertion fails if it doesn't throw an error. are, are_not, has_no, was, and, was_not are aliased as well to appease your grammar sensibilities. is and its aliases are always optional. describe(""some assertions"", function()   it(""tests positive assertions"", function()     assert.is_true(true)  -- Lua keyword chained with _     assert.True(true)     -- Lua keyword using a capital     assert.are.equal(1, 1)     assert.has.errors(function() error(""this should fail"") end)   end)    it(""tests negative assertions"", function()     assert.is_not_true(false)     assert.are_not.equals(1, ""1"")     assert.has_no.errors(function() end)   end) end)  Equals Equals takes 1-n arguments and checks if they are the same instance. This is equivalent to calling object1 == object2. describe(""some asserts"", function()   it(""checks if they're equals"", function()     local expected = 1     local obj = expected      assert.are.equals(expected, obj)   end) end)  Same Same takes 1-n arguments and checks if they are they are similar by doing a deep compare. describe(""some asserts"", function()   it(""checks if they're the same"", function()     local expected = { name = ""Jack"" }     local obj = { name = ""Jack"" }      assert.are.same(expected, obj)   end) end)  True & Truthy; False & Falsy true evaluates if the value is the boolean true; truthy checks if it's non-false and non-nil (as if you passed it into a boolean expression in Lua. false and falsy are the opposite; false checks for the boolean false, falsy checks for false or nil. describe(""some asserts"", function()   it(""checks true"", function()     assert.is_true(true)     assert.is.not_true(""Yes"")     assert.is.truthy(""Yes"")   end)    it(""checks false"", function()     assert.is_false(false)     assert.is.not_false(nil)     assert.is.falsy(nil)   end) end)  Error Makes sure an error exception is fired that you expect. describe(""some asserts"", function()   it(""should throw an error"", function()     assert.has_error(function() error(""Yup,  it errored"") end)     assert.has_no.errors(function() end)   end)    it(""should throw the error we expect"", function()     local errfn = function()       error(""DB CONN ERROR"")     end      assert.has_error(errfn, ""DB CONN ERROR"")   end) end)  Extending Your Own Assertions Add in your own assertions to reuse commonly written code. You can register error message keys for both positive (is) and negative (is_not) cases for multilingual compatibility as well (""en"" by default.) local s = require(""say"")  local function has_property(state, arguments)   local has_key = false    if not type(arguments[1]) == ""table"" or #arguments ~= 2 then     return false   end    for key, value in pairs(arguments[1]) do     if key == arguments[2] then       has_key = true     end   end    return has_key end  say:set(""assertion.has_property.positive"", ""Expected %s \nto have property: %s"") say:set(""assertion.has_property.negative"", ""Expected %s \nto not have property: %s"") assert:register(""assertion"", ""has_property"", has_property, ""assertion.has_property.positive"", ""assertion.has_property.negative"")  describe(""my table"", function()   it(""has a name property"", function()     assert.has_property({ name = ""Jack"" }, ""name"")   end) end)  Spies, Stubs, & Mocks Spies are essentially wrappers around functions that keep track of data about how the function was called, and by default calls the function. Stubs are the same as spies, except they return immediately without calling the function. mock(table, stub) returns a table whose functions have been wrapped in spies or stubs. Spies Spies contain two methods: on and new. spy.on(table, method_name) does an in-place replacement of a table's method, and when the original method is called, it registers what it was called with and then calls the original function. describe(""spies"", function()   it(""registers a new spy as a callback"", function()     local s = spy.new(function() end)      s(1, 2, 3)     s(4, 5, 6)      assert.spy(s).was.called()     assert.spy(s).was.called(2) -- twice!     assert.spy(s).was.called_with(1, 2, 3) -- checks the history   end)    it(""replaces an original function"", function()     local t = {       greet = function(msg) print(msg) end     }      local s = spy.on(t, ""greet"")      t.greet(""Hey!"") -- prints 'Hey!'     assert.spy(t.greet).was_called_with(""Hey!"")      t.greet:clear()   -- clears the call history     assert.spy(s).was_not_called_with(""Hey!"")      t.greet:revert()  -- reverts the stub     t.greet(""Hello!"") -- prints 'Hello!', will not pass through the spy     assert.spy(s).was_not_called_with(""Hello!"")   end) end)  Stubs Stubs act similarly to spies, except they do not call the function they replace. This is useful for testing things like data layers. describe(""stubs"", function()   it(""replaces an original function"", function()     local t = {       greet = function(msg) print(msg) end     }      stub(t, ""greet"")      t.greet(""Hey!"") -- DOES NOT print 'Hey!'     assert.stub(t.greet).was.called_with(""Hey!"")      t.greet:revert()  -- reverts the stub     t.greet(""Hey!"") -- DOES print 'Hey!'   end) end)  Mocks Mocks are tables whose functions have been wrapped in spies, or optionally stubs. This is useful for checking execution chains. Wrapping is recursive, so wrapping functions in sub-tables as well. describe(""mocks"", function()   it(""replaces a table with spies"", function()     local t = {       thing = function(msg) print(msg) end     }      local m = mock(t) -- mocks the table with spies, so it will print      m.thing(""Coffee"")     assert.spy(m.thing).was.called_with(""Coffee"")   end)    it(""replaces a table with stubs"", function()     local t = {       thing = function(msg) print(msg) end     }      local m = mock(t, true) -- mocks the table with stubs, so it will not print      m.thing(""Coffee"")     assert.stub(m.thing).was.called_with(""Coffee"")     mock.revert(m) -- reverts all stubs/spies in m     m.thing(""Tea"") -- DOES print 'Tea'   end) end)   Matchers Matchers are used to provide flexible argument matching for called_with and returned_with asserts. Just like with asserts, you can chain a modifier value using is or is_not, followed by the matcher you wish to use. Extending busted with your own matchers is done similar to asserts as well; just build a matcher with a common signature and register it. Furthermore, matchers can be combined using composite matchers.  describe(""match arguments"", function()   local match = require(""luassert.match"")    it(""tests wildcard matcher"", function()     local s = spy.new(function() end)     local _ = match._      s(""foo"")      assert.spy(s).was_called_with(_)        -- matches any argument     assert.spy(s).was_not_called_with(_, _) -- does not match two arguments   end)    it(""tests type matchers"", function()     local s = spy.new(function() end)      s(""foo"")      assert.spy(s).was_called_with(match.is_string())     assert.spy(s).was_called_with(match.is_truthy())     assert.spy(s).was_called_with(match.is_not_nil())     assert.spy(s).was_called_with(match.is_not_false())     assert.spy(s).was_called_with(match.is_not_number())     assert.spy(s).was_called_with(match.is_not_table())   end)    it(""tests more matchers"", function()     local s = spy.new(function() end)      s(1)      assert.spy(s).was_called_with(match.is_equal(1))     assert.spy(s).was_called_with(match.is_same(1))   end) end)  Composite Matchers Combine matchers using composite matchers.  describe(""combine matchers"", function()   local match = require(""luassert.match"")    it(""tests composite matchers"", function()     local s = spy.new(function() end)      s(""foo"")      assert.spy(s).was_called_with(match.is_all_of(match.is_not_nil(), match.is_not_number()))     assert.spy(s).was_called_with(match.is_any_of(match.is_number(), match.is_string(), match.is_boolean())))     assert.spy(s).was_called_with(match.is_none_of(match.is_number(), match.is_table(), match.is_boolean())))   end) end)  Extending Your Own Matchers Add in your own matchers to reuse commonly written code.  local function is_even(state, arguments)   return function(value)     return (value %2) == 0   end end  local function is_gt(state, arguments)   local expected = arguments[1]   return function(value)     return value > expected   end end  assert:register(""matcher"", ""even"", is_even) assert:register(""matcher"", ""gt"", is_gt)  describe(""custom matchers"", function()   it(""match even"", function()     local s = spy.new(function() end)      s(2)      assert.spy(s).was_called_with(match.is_even())   end)    it(""match greater than"", function()     local s = spy.new(function() end)      s(10)      assert.spy(s).was_called_with(match.is_gt(5))   end) end)  Async Tests Sometimes you need to write tests that work with asynchronous calls such as when dealing with HTTP requests, threads, or database calls. Call async() at the top of an it to specify that your test should wait, and call done() to complete a test.  describe('API integration tests', function()   it('loads user data', function()     async()      local user_id = 1      makeAPICall(function(data)       -- do things       assert.are.equal(user_id, data.id)       done()     )   end) end)  Private Busted does not define any global variables for testing internal/private helper functions . We believe the correct way to address this is to refactor your code to make it more externally testable. However, if you wish to expose private elements for testing purposes only you can do the following: -- a new module with private elements to be tested local mymodule = {} local private_element = {""this"", ""is"", ""private""}  function mymodule:display()   print(string.concat(private_element, "" "")) end  -- export locals for test if _TEST then   -- setup test alias for private elements using a modified name   mymodule._private_element = private_element end  return mymodule  In the test specs it can be tested: local mymodule = require(""mymodule"")  describe(""Going to test a private element"", function()    setup(function()     _G._TEST = true   end)    teardown(function()     _G._TEST = nil   end)    it(""tests the length of the table"", function()     assert.is.equal(#mymodule._private_element, 3)   end)  end)  Output Handlers Busted supports several output handlers by default, and it's easy to extend busted to include your own output handlers. UTF and Coloring: Pretty Terminal Output with utfTerminal Uses ansicolors and utf to display a concise but informative output. Clean output with plainTerminal Uses safe characters and no coloring. JSON for integration with json output Useful for streaming or loading all results at once with the --defer-print flag. TAP for use with CI systems TAP is an agnostic protocol used by most automated testing suites. Registering Your Own Output Handler If you pass the -o flag a path instead of a name (such as in busted spec -o thing.lua, it will look in that path to load the output file. Check out the existing output files for examples. It should have a signature like: -- custom_output.lua  local output = function(options)   local busted = require(""busted"")   local handler = require(""busted.outputHandler.base"")()    handler.testStart = function(element, parent)     -- this function is called before a test is started     -- you can display a test started message from here   end    handler.testEnd = function(element, parent, status, trace)     -- this function is called after a test has completed     -- outupt the pass/fail/error status of the test   end    busted.subscribe({'test', 'start'}, handler.testStart)   busted.subscribe({'test', 'end'}, handler.testEnd)    return handler end  return output  Moonscript Moonscript is a dynamic scripting language that compiles to Lua. Busted supports Moonscript natively without any additional compilation steps, and will redirect line numbers to show the proper line numbers for failing tests. -- source: moonscript_spec.moon describe ""moonscript tests"", ->   it ""runs"", ->     assert.are.equal true, true    it ""fails"", ->     assert.error(-> assert.are.equal false, true)  describe ""async moonscript tests"", ->   it ""runs async tests"", () ->     async()      some_asynchronous_call(guard ->       assert.is_true true       done()     )   I18n Busted supports English (en), Arabic (ar), French (fr), Spanish (es), Dutch (nl), Russian (ru), German (de), Japanese (ja), Chinese (zh), Thai (th), and Ukranian (ua) by default. Check out the existing language packs and send in a pull request. Busted supports adding in new languages easily. Pass a --lang parameter to choose one of the built-in languages, or a path to a lua file to run containing your own language. Don't forget to submit languages in pull requests as you make them! Check out the existing language packs to see a template for what you should replace. Copy any of the existing files. It uses the say string key/value store for registration. Examples: busted --lang=ar spec or busted --lang=se.lua spec Shell Completion You can download shell completion packs from the ./completions folder of the Github repository. Contributing You can help! It's as easy as submitting a suggestion or issue, or check out the code for yourself and submit your changes in a pull request. We could especially use help with translations - check out the src/languages folder in busted and luassert to see if you can help. busted has a big list of contributors and we welcome contributions from all! busted is bravely maintained by Olivine Labs. MIT Licensed. © 2013 Olivine Labs, LLC. Documentation hosted on GitHub Pages."	"null"	"null"	"BDD-style unit testing framework with great docs and Moonscript support."	"true"
"Testing"	"telescope"	"https://github.com/norman/telescope"	"Flexible and highly customizable testing library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"112"	"9"	"27"	"GitHub - norman/telescope: A highly customizable test library for Lua that allows declarative tests with nested contexts. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 112 Fork 27 norman/telescope Code Issues 4 Pull requests 3 Pulse Graphs A highly customizable test library for Lua that allows declarative tests with nested contexts. http://norman.github.com/telescope/ 88 commits 3 branches 5 releases 8 contributors Lua 73.2% Perl 15.5% CSS 11.3% Lua Perl CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags edge gh-pages master Nothing to show REL_0_3 REL_0_2 0.6.0 0.5.0 0.4.0 Nothing to show New pull request Latest commit c80b928 Oct 5, 2013 norman Fix unintentional global variable declaration Permalink Failed to load latest commit information. doc Add docs to Git Sep 18, 2013 rockspecs Add 0.6.0 rockspec Sep 18, 2013 spec Move ""version"" to _VERSION, add spec to Makefile Mar 31, 2012 telescope Move compat_env under Telescope Apr 4, 2012 .gitignore Add docs to Git Sep 18, 2013 Makefile Update docs command Sep 18, 2013 README.md Update README Feb 21, 2013 telescope.lua Fix unintentional global variable declaration Oct 5, 2013 tsc Add -v/--version argument to tsc Apr 4, 2012 README.md Telescope Telescope is a highly customizable test library for Lua that allows for declarative tests with nested contexts. Features Compatible with Lua 5.1 and 5.2. Nestable test contexts/descriptions. BDD-style spec names. Before/after functions per context. Integrated code coverage reports using Luacov. You can easily add your own assertions. Many different formatting options for tests and reports. Simple, well documented API makes it easy to extend/hack. Command line runner allows you to input Lua snippet callbacks, so you can, for example, drop to a debugger on failed tests, or wrap test calls around a profiler, etc. An Example context(""A context"", function()   before(function() end)   after(function() end)   context(""A nested context"", function()     test(""A test"", function()       assert_not_equal(""ham"", ""cheese"")     end)     context(""Another nested context"", function()       test(""Another test"", function()         assert_greater_than(2, 1)       end)     end)   end)   test(""A test in the top-level context"", function()     assert_equal(3, 1)   end) end)  Getting it You can install Telescope using Luarocks: sudo luarocks install telescope  You can also check out the source code from Git, and install via ""make"" if you prefer: git clone git://github.com/norman/telescope.git cd telescope make install  Running your tests Telescope comes with a command-line test runner named tsc. Simply run: tsc my_test_file.lua  Or perhaps tsc -f test/*.lua  The full test output (what you get using ""-f"") from the examples given would be: ------------------------------------------------------------------------ A context: A nested context:   A test                                                             [P]   Another nested context:     Another test                                                     [P] A test in the top-level context                                      [F] ------------------------------------------------------------------------ A test with no context                                               [U] Another test with no context                                         [U] ------------------------------------------------------------------------ This is a context: This is another context:   this is a test                                                     [U]   this is another test                                               [U]   this is another test                                               [U] ------------------------------------------------------------------------ 8 tests 2 passed 3 assertions 1 failed 0 errors 5 unassertive 0 pending  A test in the top-level context: Assert failed: expected '3' to be equal to '1' stack traceback:   ...ib/luarocks/rocks//telescope/scm-1/lua/telescope.lua:139: in function 'assert_equal'   example.lua:18: in function <example.lua:17>   [C]: in function 'pcall'   ...ib/luarocks/rocks//telescope/scm-1/lua/telescope.lua:330: in function 'invoke_test'   ...ib/luarocks/rocks//telescope/scm-1/lua/telescope.lua:362: in function 'run'   ...usr/local/lib/luarocks/rocks//telescope/scm-1/bin/ts:147: in main chunk   [C]: ?  Telescope tells you which tests were run, how many assertions they called, how many passed, how many failed, how many produced errors, how many provided a name but no implementation, and how many didn't assert anything. In the event of any failures or errors, it shows you stack traces. You can customize the test output to be as verbose or silent as you want, and easily write your own test reporters - the source is well documented. You can pass in snippets of Lua code on the command line to run as callbacks for various test success/failure scenarios, and easily customize the output or use Telescope with other applications. You can see all the available command-line options, and some examples by running: tsc -h  More Examples -- Tests can be outside of contexts, if you want test(""A test with no context"", function() end)  test(""Another test with no context"", function() end)  -- Contexts and tests with various aliases spec(""This is a context"", function()   describe(""This is another context"", function()     it(""this is a test"", function()     end)     expect(""this is another test"", function()     end)     should(""this is another test"", function()     end)   end) end)  Even More Examples -- change the name of your test or context blocks if you want something -- different telescope.context_aliases = {""specify""} telescope.test_aliases = {""verify""}  -- create your own assertions telescope.make_assertion(""longer_than"", ""%s to be longer than %s chars"",   function(a, b) return string.len(a) > b end) -- creates two assertions: assert_longer_than and assert_not_longer_than, -- which give error messages such as: -- Assertion error: expected ""hello world"" to be longer than 25 chars -- Assertion error: expected ""hello world"" not to be longer than 2 chars  -- create a test runner with callbacks to show progress and -- drop to a debugger on errors local contexts = telescope.load_contexts(file) local results = telescope.run(contexts, {  after = function(t) io.stdout:write(t.status_label) end,  error = function(t) debug.debug() end })  -- call ""tsc"" on the command line with a callback to generate a custom report tsc --after=""function(t) print(t.status_label, t.name, t.context) end"" example.lua  Author Norman Clarke Please feel free to email me bug reports or feature requests. Acknowledgements Telescope's initial beta release was made on Aug 25, 2009 - the 400th anniversary of the invention of the telescope. Thanks to ScrewUnit, Contest and Luaspec for inspiration. Thanks to Eric Knudtson for helping me come up with the name ""Telescope."" License The MIT License Copyright (c) 2009-2012 Norman Clarke Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/norman/telescope"	"Flexible and highly customizable testing library."	"true"
"Testing"	"luassert"	"https://github.com/Olivine-Labs/luassert"	"Assertion library extending Lua's built-in assertions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"37"	"10"	"35"	"GitHub - Olivine-Labs/luassert: Assertion library for Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 37 Fork 35 Olivine-Labs/luassert Code Issues 2 Pull requests 1 Pulse Graphs Assertion library for Lua 343 commits 2 branches 14 releases 18 contributors Lua 97.9% Shell 2.1% Lua Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master returned-arguments Nothing to show v1.7.10 v1.7.9 v1.7.8 v1.7.7 v1.7.6 v1.7.5 v1.7.4 v1.7.3 v1.7.2 v1.7.1 v1.7.0 v1.6 v1.5 v1.4 Nothing to show New pull request Latest commit 73b118e Apr 29, 2016 ajacksified Bump to v1.7.10 Permalink Failed to load latest commit information. .travis New travis infrastructure Apr 28, 2016 spec Allow asserts to be passed to functions Apr 28, 2016 src Merge pull request #137 from o-lim/reusable-asserts Apr 29, 2016 .gitignore Initial commit Aug 21, 2012 .travis.yml New travis infrastructure Apr 29, 2016 CONTRIBUTING.md typo fixes Sep 17, 2012 LICENSE added mit license file Aug 22, 2012 README.md Update README file May 28, 2015 luassert-1.7.10-0.rockspec Bump to v1.7.10 Apr 29, 2016 README.md Luassert luassert extends Lua's built-in assertions to provide additional tests and the ability to create your own. You can modify chains of assertions with not. Check out busted for extended examples. assert = require(""luassert"")  assert.True(true) assert.is.True(true) assert.is_true(true) assert.is_not.True(false) assert.is.Not.True(false) assert.is_not_true(false) assert.are.equal(1, 1) assert.has.errors(function() error(""this should fail"") end) Extend your own: local assert = require(""luassert"") local say    = require(""say"") --our i18n lib, installed through luarocks, included as a luassert dependency  local function has_property(state, arguments)   local property = arguments[1]   local table = arguments[2]   for key, value in pairs(table) do     if key == property then       return true     end   end   return false end  say:set_namespace(""en"") say:set(""assertion.has_property.positive"", ""Expected property %s in:\n%s"") say:set(""assertion.has_property.negative"", ""Expected property %s to not be in:\n%s"") assert:register(""assertion"", ""has_property"", has_property, ""assertion.has_property.positive"", ""assertion.has_property.negative"")  assert.has_property(""name"", { name = ""jack"" })  Implementation notes: assertion/modifiers that are Lua keywords (true, false, nil, function, and not) cannot be used using '.' chaining because that results in compilation errors. Instead chain using '_' (underscore) or use one or more capitals in the reserved word (see code examples above), whatever your coding style prefers Most assertions will only take 1 or 2 parameters and an optional failure message, except for the returned_arguments assertion, which does not take a failure message To specify a custom failure message for the returned_arguments assertion, use the message modifier local f = function() end assert.message(""the function 'f' did not return 2 arguments"").returned_arguments(2, f()) Matchers Argument matching can be performed on spies/stubs with the ability to create your own. This provides flexible argument matching for called_with and returned_with assertions. Like assertions, you can modify chains of matchers with not. Furthermore, matchers can be combined using composite matchers. local assert = require 'luassert' local match = require 'luassert.match' local spy = require 'luassert.spy'  local s = spy.new(function() end) s('foo') s(1) s({}, 'foo') assert.spy(s).was.called_with(match._) -- arg1 is anything assert.spy(s).was.called_with(match.is_string()) -- arg1 is a string assert.spy(s).was.called_with(match.is_number()) -- arg1 is a number assert.spy(s).was.called_with(match.is_not_true()) -- arg1 is not true assert.spy(s).was.called_with(match.is_table(), match.is_string()) -- arg1 is a table, arg2 is a string assert.spy(s).was.called_with(match.has_match('.oo')) -- arg1 contains pattern "".oo"" assert.spy(s).was.called_with({}, 'foo') -- you can still match without using matchers Extend your own: local function is_even(state, arguments)   return function(value)     return (value % 2) == 0   end end  local function is_gt(state, arguments)   local expected = arguments[1]   return function(value)     return value > expected   end end  assert:register(""matcher"", ""even"", is_even) assert:register(""matcher"", ""gt"", is_gt) local assert = require 'luassert' local match = require 'luassert.match' local spy = require 'luassert.spy'  local s = spy.new(function() end) s(7) assert.spy(s).was.called_with(match.is_number()) -- arg1 was a number assert.spy(s).was.called_with(match.is_not_even()) -- arg1 was not even assert.spy(s).was.called_with(match.is_gt(5)) -- arg1 was greater than 5 Composite matchers have the form: match.all_of(m1, m2, ...) -- argument matches all of the matchers m1 to mn match.any_of(m1, m2, ...) -- argument matches at least one of the matchers m1 to mn match.none_of(m1, m2, ...) -- argument does not match any of the matchers m1 to mn Snapshots To be able to revert changes created by tests, inserting spies and stubs for example, luassert supports 'snapshots'. A snapshot includes the following; spies and stubs parameters formatters Example: describe(""Showing use of snapshots"", function()   local snapshot    before_each(function()     snapshot = assert:snapshot()   end)    after_each(function()     snapshot:revert()   end)    it(""does some test"", function()     -- spies or stubs registered here, parameters changed, or formatters added     -- will be undone in the after_each() handler.   end)  end) Parameters To register state information 'parameters' can be used. The parameter is included in a snapshot and can hence be restored in between tests. For an example see Configuring table depth display below. Example: assert:set_parameter(""my_param_name"", 1) local s = assert:snapshot() assert:set_parameter(""my_param_name"", 2) s:revert() assert.are.equal(1, assert:get_parameter(""my_param_name"")) Customizing argument formatting luassert comes preloaded with argument formatters for common Lua types, but it is easy to roll your own. Customizing them is especially useful for limiting table depth and for userdata types. Configuring table depth display The default table formatter allows you to customize the levels displayed by setting the TableFormatLevel parameter (setting it to -1 displays all levels). Example: describe(""Tests different levels of table display"", function()    local testtable = {       hello = ""hola"",       world = ""mundo"",       liqour = {           ""beer"", ""wine"", ""water""         },       fruit = {           native = { ""apple"", ""strawberry"", ""grape"" },           tropical = { ""banana"", ""orange"", ""mango"" },         },     }    it(""tests display of 0 levels"", function()     assert:set_parameter(""TableFormatLevel"", 0)     assert.are.same(testtable, {})   end)    it(""tests display of 2 levels"", function()     assert:set_parameter(""TableFormatLevel"", 2)     assert.are.same(testtable, {})   end)  end) Will display the following output with the table pretty-printed to the requested depth: Failure: ...ua projects\busted\formatter\spec\formatter_spec.lua @ 45 tests display of 0 levels ...ua projects\busted\formatter\spec\formatter_spec.lua:47: Expected objects to be the same. Passed in: (table): { } Expected: (table): { ... more }  Failure: ...ua projects\busted\formatter\spec\formatter_spec.lua @ 50 tests display of 2 levels ...ua projects\busted\formatter\spec\formatter_spec.lua:52: Expected objects to be the same. Passed in: (table): { } Expected: (table): {   [hello] = 'hola'   [fruit] = {     [tropical] = { ... more }     [native] = { ... more } }   [liqour] = {     [1] = 'beer'     [2] = 'wine'     [3] = 'water' }   [world] = 'mundo' }  Customized formatters The formatters are functions taking a single argument that needs to be converted to a string representation. The formatter should examine the value provided, if it can format the value, it should return the formatted string, otherwise it should return nil. Formatters can be added through assert:add_formatter(formatter_func), and removed by calling assert:remove_formatter(formatter_func). Example using the included binary string formatter: local binstring = require(""luassert.formatters.binarystring"")  describe(""Tests using a binary string formatter"", function()    setup(function()     assert:add_formatter(binstring)   end)    teardown(function()     assert:remove_formatter(binstring)   end)    it(""tests a string comparison with binary formatting"", function()     local s1, s2 = """", """"     for n = 65,88 do       s1 = s1 .. string.char(n)       s2 = string.char(n) .. s2     end     assert.are.same(s1, s2)    end)  end) Because this formatter formats string values, and is added last, it will take precedence over the regular string formatter. The results will be: Failure: ...ua projects\busted\formatter\spec\formatter_spec.lua @ 13 tests a string comparison with binary formatting ...ua projects\busted\formatter\spec\formatter_spec.lua:19: Expected objects to be the same. Passed in: Binary string length; 24 bytes 58 57 56 55 54 53 52 51   50 4f 4e 4d 4c 4b 4a 49  XWVUTSRQ PONMLKJI 48 47 46 45 44 43 42 41                            HGFEDCBA  Expected: Binary string length; 24 bytes 41 42 43 44 45 46 47 48   49 4a 4b 4c 4d 4e 4f 50  ABCDEFGH IJKLMNOP 51 52 53 54 55 56 57 58                            QRSTUVWX  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Olivine-Labs/luassert"	"Assertion library extending Lua's built-in assertions."	"true"
"Testing"	"lust"	"https://github.com/bjornbytes/lust"	"Minimal test framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"6"	"1"	"0"	"GitHub - bjornbytes/lust: Lightweight Lua test framework Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 6 Fork 0 bjornbytes/lust Code Issues 0 Pull requests 0 Pulse Graphs Lightweight Lua test framework 28 commits 1 branch 1 release Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.0 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. LICENSE README.md lust.lua README.md Lust Lust is a small library that tests Lua code. Usage Copy the lust.lua file to a project directory and require it, which returns a table that includes all of the functionality. local lust = require 'lust' local describe, it, expect = lust.describe, lust.it, lust.expect  describe('my project', function()   lust.before(function()     -- This gets run before every test.   end)    describe('module1', function() -- Can be nested     it('feature1', function()       expect(1).to.be.a('number') -- Pass       expect('astring').to.equal('astring') -- Pass     end)      it('feature2', function()       expect(nil).to.exist() -- Fail     end)   end) end) Documentation lust.describe(name, func) Used to declare a group of tests. name is a string used to describe the group, and func is a function containing all tests and describe blocks in the group. Groups created using describe can be nested. lust.it(name, func) Used to declare a test, which consists of a set of assertions. name is a string used to describe the test, and func is a function containing the assertions. Assertions Lust uses ""expect style"" assertions. An assertion begins with lust.expect(value) and other modifiers can be chained after that: lust.expect(x).to.exist() Fails only if x is nil. lust.expect(x).to.equal(y) Performs a strict equality test, failing if x and y have different types or values. Tables are tested by recursively ensuring that both tables contain the same set of keys and values. Metatables are not taken into consideration. lust.expect(x).to.be(y) Performs an equality test using the == operator. Fails if x ~= y. lust.expect(x).to.be.truthy() Fails if x is nil or false. lust.expect(x).to.be.a(y) If y is a string, fails if type(x) is not equal to y. If y is a table, walks up x's metatable chain and fails if y is not encountered. lust.expect(x).to.have(y) If x is a table, ensures that at least one of its keys contains the value y using the == operator. If x is not a table, this assertion fails. lust.expect(f).to.fail() Ensures that the function f causes an error when it is run. lust.expect(x).to_not.* Negates the assertion. Spies lust.spy(table, key, run) and lust.spy(function, run) Spies on a function and tracks the number of times it was called and the arguments it was called with. There are 3 ways to specify arguments to this function: Specify nil. Specify a function. Specify a table and a name of a function in that table. The return value is a table that will contain one element for each call to the function. Each element of this table is a table containing the arguments passed to that particular invocation of the function. The table can also be called as a function, in which case it will call the function it is spying on. The third argument, run, is a function that will be called immediately upon creation of the spy. Example: local object = {   method = function() end }  -- Basic usage: local spy = lust.spy(object, 'method') object.method(3, 4) -- spy is now {{3, 4}} object.method('foo') -- spy is now {{3, 4}, {'foo'}} lust.expect(#spy).to.equal(2) lust.expect(spy[1][2]).to.equal(4)  -- Using a run function: local run = function()   object.method(1, 2, 3)   object.method(4, 5, 6) end  lust.expect(lust.spy(object, 'method', run)).to.equal({{1, 2, 3}, {4, 5, 6}})  -- Using a function input: local add = function(a, b)   return a + b end  local spy = lust.spy(add)  spy(1, 2) -- => {{1, 2}} spy('rain', 'bows') -- => {{1, 2}, {'rain', 'bows'}}  lust.expect(#spy).to.equal(2) lust.expect(spy[2]).to.equal({'rain', 'bows'}) Befores and Afters You can define functions that are called before and after every call to lust.it using lust.before and lust.after. They are scoped to the describe block that contains them as well as any inner describe blocks. lust.before(fn) Set a function that is called before every test inside this describe block. fn will be passed a single string containing the name of the test about to be run. lust.after(fn) Set a function that is called after every test inside this describe block. fn will be passed a single string containing the name of the test that was finished. Custom Assertions Example of adding a custom empty assertion: local lust = require 'lust'  lust.paths.empty = {   test = function(value)     return #value == 0,       'expected ' .. tostring(value) .. ' to be empty',       'expected ' .. tostring(value) .. ' to not be empty'   end }  table.insert(lust.paths.be, 'empty')  lust.expect({}).to.be.empty() lust.expect('').to.be.empty() First we define the assertion in the lust.paths table. Each path is a table containing a test function which performs the assertion. It returns three values: the result of the test (true for pass, false for fail), followed by two messages: the first for a normal expectation failure, the second for when the expectation is negated. We then insert our 'empty' assertion into the be path -- the numeric keys of a path represent the possible expectations that can be chained. License MIT, see LICENSE for details. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bjornbytes/lust"	"Minimal test framework."	"true"
"Foreign Function Interfaces"	"LuaJIT FFI"	"http://luajit.org/ext_ffi.html"	"LuaJIT's mechanism for calling external C functions and using C data structures from pure Lua code."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"FFI Library LuaJIT FFI Library Home LuaJIT Download ⇩ Installation Running Extensions FFI Library FFI Tutorial ffi.* API FFI Semantics jit.* Library Lua/C API Status Changes FAQ Performance on x86/x64 on ARM on PPC on PPC/e500 on MIPS Wiki » Mailing List Sponsors The FFI library allows calling external C functions and using C data structures from pure Lua code. The FFI library largely obviates the need to write tedious manual Lua/C bindings in C. No need to learn a separate binding language — it parses plain C declarations! These can be cut-n-pasted from C header files or reference manuals. It's up to the task of binding large libraries without the need for dealing with fragile binding generators. The FFI library is tightly integrated into LuaJIT (it's not available as a separate module). The code generated by the JIT-compiler for accesses to C data structures from Lua code is on par with the code a C compiler would generate. Calls to C functions can be inlined in JIT-compiled code, unlike calls to functions bound via the classic Lua/C API. This page gives a short introduction to the usage of the FFI library. Please use the FFI sub-topics in the navigation bar to learn more. Motivating Example: Calling External C Functions It's really easy to call an external C library function:  ① ②   ③local ffi = require(""ffi"") ffi.cdef[[ int printf(const char *fmt, ...); ]] ffi.C.printf(""Hello %s!"", ""world"")  So, let's pick that apart: ① Load the FFI library. ② Add a C declaration for the function. The part inside the double-brackets (in green) is just standard C syntax. ③ Call the named C function — Yes, it's that simple! Actually, what goes on behind the scenes is far from simple: ③ makes use of the standard C library namespace ffi.C. Indexing this namespace with a symbol name (""printf"") automatically binds it to the standard C library. The result is a special kind of object which, when called, runs the printf function. The arguments passed to this function are automatically converted from Lua objects to the corresponding C types. Ok, so maybe the use of printf() wasn't such a spectacular example. You could have done that with io.write() and string.format(), too. But you get the idea ... So here's something to pop up a message box on Windows:  local ffi = require(""ffi"") ffi.cdef[[ int MessageBoxA(void *w, const char *txt, const char *cap, int type); ]] ffi.C.MessageBoxA(nil, ""Hello world!"", ""Test"", 0)  Bing! Again, that was far too easy, no? Compare this with the effort required to bind that function using the classic Lua/C API: create an extra C file, add a C function that retrieves and checks the argument types passed from Lua and calls the actual C function, add a list of module functions and their names, add a luaopen_* function and register all module functions, compile and link it into a shared library (DLL), move it to the proper path, add Lua code that loads the module aaaand ... finally call the binding function. Phew! Motivating Example: Using C Data Structures The FFI library allows you to create and access C data structures. Of course the main use for this is for interfacing with C functions. But they can be used stand-alone, too. Lua is built upon high-level data types. They are flexible, extensible and dynamic. That's why we all love Lua so much. Alas, this can be inefficient for certain tasks, where you'd really want a low-level data type. E.g. a large array of a fixed structure needs to be implemented with a big table holding lots of tiny tables. This imposes both a substantial memory overhead as well as a performance overhead. Here's a sketch of a library that operates on color images plus a simple benchmark. First, the plain Lua version:  local floor = math.floor  local function image_ramp_green(n)   local img = {}   local f = 255/(n-1)   for i=1,n do     img[i] = { red = 0, green = floor((i-1)*f), blue = 0, alpha = 255 }   end   return img end  local function image_to_grey(img, n)   for i=1,n do     local y = floor(0.3*img[i].red + 0.59*img[i].green + 0.11*img[i].blue)     img[i].red = y; img[i].green = y; img[i].blue = y   end end  local N = 400*400 local img = image_ramp_green(N) for i=1,1000 do   image_to_grey(img, N) end  This creates a table with 160.000 pixels, each of which is a table holding four number values in the range of 0-255. First an image with a green ramp is created (1D for simplicity), then the image is converted to greyscale 1000 times. Yes, that's silly, but I was in need of a simple example ... And here's the FFI version. The modified parts have been marked in bold:  ①      ②  ③ ④       ③ ⑤local ffi = require(""ffi"") ffi.cdef[[ typedef struct { uint8_t red, green, blue, alpha; } rgba_pixel; ]]  local function image_ramp_green(n)   local img = ffi.new(""rgba_pixel[?]"", n)   local f = 255/(n-1)   for i=0,n-1 do     img[i].green = i*f     img[i].alpha = 255   end   return img end  local function image_to_grey(img, n)   for i=0,n-1 do     local y = 0.3*img[i].red + 0.59*img[i].green + 0.11*img[i].blue     img[i].red = y; img[i].green = y; img[i].blue = y   end end  local N = 400*400 local img = image_ramp_green(N) for i=1,1000 do   image_to_grey(img, N) end  Ok, so that wasn't too difficult: ① First, load the FFI library and declare the low-level data type. Here we choose a struct which holds four byte fields, one for each component of a 4x8 bit RGBA pixel. ② Creating the data structure with ffi.new() is straightforward — the '?' is a placeholder for the number of elements of a variable-length array. ③ C arrays are zero-based, so the indexes have to run from 0 to n-1. One might want to allocate one more element instead to simplify converting legacy code. ④ Since ffi.new() zero-fills the array by default, we only need to set the green and the alpha fields. ⑤ The calls to math.floor() can be omitted here, because floating-point numbers are already truncated towards zero when converting them to an integer. This happens implicitly when the number is stored in the fields of each pixel. Now let's have a look at the impact of the changes: first, memory consumption for the image is down from 22 Megabytes to 640 Kilobytes (400*400*4 bytes). That's a factor of 35x less! So, yes, tables do have a noticeable overhead. BTW: The original program would consume 40 Megabytes in plain Lua (on x64). Next, performance: the pure Lua version runs in 9.57 seconds (52.9 seconds with the Lua interpreter) and the FFI version runs in 0.48 seconds on my machine (YMMV). That's a factor of 20x faster (110x faster than the Lua interpreter). The avid reader may notice that converting the pure Lua version over to use array indexes for the colors ([1] instead of .red, [2] instead of .green etc.) ought to be more compact and faster. This is certainly true (by a factor of ~1.7x). Switching to a struct-of-arrays would help, too. However the resulting code would be less idiomatic and rather error-prone. And it still doesn't get even close to the performance of the FFI version of the code. Also, high-level data structures cannot be easily passed to other C functions, especially I/O functions, without undue conversion penalties. Copyright © 2005-2016 Mike Pall · Contact – IMPRESSUM"	"null"	"null"	"LuaJIT's mechanism for calling external C functions and using C data structures from pure Lua code."	"true"
"Foreign Function Interfaces"	"luaffi"	"https://github.com/jmckaskill/luaffi"	"Standalone FFI library, compatible with the LuaJIT FFI interface."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"240"	"33"	"49"	"GitHub - jmckaskill/luaffi: Standalone FFI library for calling C functions from lua. Compatible with the luajit FFI interface. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 33 Star 240 Fork 49 jmckaskill/luaffi Code Issues 28 Pull requests 0 Pulse Graphs Standalone FFI library for calling C functions from lua. Compatible with the luajit FFI interface. 147 commits 1 branch 1 release 4 contributors C 58.7% Lua 40.5% Shell 0.8% C Lua Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.0-work1 Nothing to show New pull request Latest commit abc638c Nov 8, 2013 jmckaskill Merge pull request #64 from justincormack/pointers … Pointers Permalink Failed to load latest commit information. dynasm Adding LONG action to dynasm arm so .long can use runtime values Jul 25, 2011 msvc Add ARM CE support. Jul 25, 2011 .gitignore Update .gitignore May 13, 2012 Makefile default to lua 5.2 in build as metatables work better with 5.2 Oct 23, 2013 README.md Renamed README.txt to README.md May 22, 2012 call.c Add support for complex numbers Apr 9, 2012 call_arm.dasc Add support for exported global variables. Apr 22, 2012 call_x86.dasc Refactor unsigned types into the signed types with an is_unsigned flag Jun 4, 2012 ctype.c Refactor function parsing to handle functions returning function poin… Apr 29, 2012 ffi.c fix pointer types so they call metatypes; also a Lua stack error the … Nov 4, 2013 ffi.h LuaJIT dlopens ffi libraries with RTLD_LAZY not RTLD_NOW so do the sa… Nov 8, 2013 generate_call_h.bat Add ARM CE support. Jul 25, 2011 msvcbuild.bat Add support for complex numbers Apr 10, 2012 parser.c Fix a stack overflow bug introduced in 0b0f2ee Jul 29, 2013 pretty.lua Add table pretty-printer to help with debugging Apr 24, 2012 test.c Handle __attribute__((aligned)) May 8, 2012 test.lua add test for metatypes accessible through pointer Nov 4, 2013 test_includes.sh Strip out some more inline functions in test_include.sh May 8, 2012 README.md About This is a library for calling C function and manipulating C types from lua. It is designed to be interface compatible with the FFI library in luajit (see http://luajit.org/ext_ffi.html). It can parse C function declarations and struct definitions that have been directly copied out of C header files and into lua source as a string. License Copyright (c) 2011 James R. McKaskill. MIT same as Lua 5.1. See full license text in ffi.h. Source https://github.com/jmckaskill/luaffi Platforms Currently supported: windows x86/x64 linux x86/x64 windows CE ARM little endian (ARMv4+) OSX x86/x64 Currently only dll builds are supported (ie no static). Runs with both Lua 5.1 and Lua 5.2 beta. Build On windows use msvcbuild.bat in a visual studio cmd prompt. Available targets are: nothing or release: default release build debug: debug build test: build and run the test debug build test-release: build and run the test release build clean: cleanup object files Edit msvcbuild.bat if your lua exe, lib, lua include path, or lua dll name differ from c:\Lua5.1 and lua5.1.dll. The build script does not build for CE as this is non-trivial and very dependent on which CE profile (or even a custom one). Instead to build on CE, add generate_call_h.bat as a pre-build event and then build *.c with UNDER_CE defined plus whatever defines windows.h requires. On posix use make. Available targets are: nothing or all: default release build debug: debug build test: build and run the test build clean: cleanup object files macosx: release build for Mac OSX Edit the Makefile if your lua exe differs from lua5.1 or if you can't get the include and lib arguments from pkg-config. Known Issues Has not been bullet proof tested Casting is different from luajit. For the moment this follows C++ ffi.cast is equivalent to a C cast in C++ (T t = (T) f) ffi.new and ctype() is equivalent to an implicit cast in C++ (T t = f) since this follows C++ semantics void* does not cast to T* (an explicit cast using ffi.cast is required) Comparing a ctype pointer to nil doesn't work the same as luajit. This is unfixable with the current metamethod semantics. Instead use ffi.C.NULL Constant expressions can't handle non integer intermediate values (eg offsetof won't work because it manipulates pointers) Not all metamethods work with lua 5.1 (eg char* + number). This is due to the way metamethods are looked up with mixed types in Lua 5.1. If you need this upgrade to Lua 5.2 or use boxed numbers (uint64_t and uintptr_t). All bitfields are treated as unsigned (does anyone even use signed bitfields?). Note that ""int s:8"" is unsigned on unix x86/x64, but signed on windows. Todo See Github issues for the most up to date list. Fix arm support - broken since the callback refactor Vectors C++ reference types Subtracting one pointer from another Variable sized members in unions (is this needed?) How it works Types are represented by a struct ctype structure and an associated user value table. The table is shared between all related types for structs, unions, and functions. It's members have the types of struct members, function argument types, etc. The struct ctype structure then contains the modifications from the base type (eg number of pointers, array size, etc). Types are pushed into lua as a userdata containing the struct ctype with a user value (or fenv in 5.1) set to the shared type table. Boxed cdata types are pushed into lua as a userdata containing the struct cdata structure (which contains the struct ctype of the data as its header) followed by the boxed data. The functions in ffi.c provide the cdata and ctype metatables and ffi.* functions which manipulate these two types. C functions (and function pointers) are pushed into lua as a lua c function with the function pointer cdata as the first upvalue. The actual code is JITed using dynasm (see call_x86.dasc). The JITed code does the following in order: 1. Calls the needed unpack functions in ffi.c placing each argument on the HW stack 2. Updates errno 3. Performs the c call 4. Retrieves errno 5. Pushes the result back into lua from the HW register or stack Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jmckaskill/luaffi"	"Standalone FFI library, compatible with the LuaJIT FFI interface."	"true"
"Analysis Tools and ASTs"	"luadec51"	"https://github.com/sztupy/luadec51"	"Lua Decompiler for Lua version 5.1."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"144"	"32"	"66"	"GitHub - sztupy/luadec51: Lua Decompiler for Lua version 5.1 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 32 Star 144 Fork 66 sztupy/luadec51 Code Issues 4 Pull requests 0 Wiki Pulse Graphs Lua Decompiler for Lua version 5.1 13 commits 1 branch 2 releases Fetching contributors C 83.8% Ruby 12.9% Makefile 3.1% C++ 0.2% C Ruby Makefile C++ Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2.0.2 v2.0.1 Nothing to show New pull request Latest commit 35cddc8 Dec 4, 2014 sztupy fix Release target build options Permalink Failed to load latest commit information. build fix Release target build options Dec 4, 2014 compare initial commit from LuaForge May 17, 2012 lua Make CONTENTS more understanable Dec 4, 2014 luadec Modified README and bumped version Dec 4, 2014 COPYING initial commit from LuaForge May 16, 2012 README.markdown Modified README and bumped version Dec 4, 2014 README.markdown Overview LuaDec for Lua 5.1 is a Lua decompiler targeting lua versions 5.1.x It is based on Hisham Muhammad's luadec which targeted lua 5.0.x LuaDec51 is free software and uses the same license as the original LuaDec It currently has the following functionality: Full support for Lua 5.1 opcodes Added support for files with debug informations stripped Includes a heuristic that tries to determine where locals have been declared When it encounters something undecompilable it tries to continue with the decompilation It has a built in disassembler, with easy to read disassembly It includes two ruby based tool that help further correction of the decompiled scripts Status Current version is 2.0 Currently luadec51 can decompile most constructs of lua scripts, including scripts that have debug informations stripped. It still has some shortcomings: Complex conditional expressions usually break the output while and repeat..until loops are unhandled The local decalration guesser usually guesses locals declaring NEWTABLE and SETLIST opcodes wrong Planned for luadec 3.0: A new conditional handling engine Usage To use luadec you have to compile it first. Read the following sections for more information To use the ruby based tools compare and luadecguess you need to have ruby version 1.8 installed on your computer as well To simply decompile a script run luadec as following: luadec filename.luac > filename.lua  This should decompile filename.luac to filename.lua To disassemble a file use the -dis option: luadec -dis filename.luac  There are some more options, usually for debug purposes, or for cases where the built in local guesser guesses wrong. Use -h to get a complete list of usable parameters Download The source code of LuaDec 5.1 and windows binaries can be downloaded from the GitHub page. You can find windows binaries under the Releases tab. You might need to have the Visual Studio 2013 C++ redistributables installed for the project to work. Compiling You need to download a version of lua you want to use, and put it into the lua directory. After that you can use the Makefile in the build directory to compile both projects. Alternatively there is also an MSVC directory which contains a Visual Studio 2013 project file you can use to compile luadec. There is also a set up luadec project for MSVC++ 2008, that uses a modified lua 5.1.4 version with unicode support at http://winmo.sztupy.hu/luadec.html. Do not use this project tree for usage with generic lua files, because it won't work (it will expect numerals in Q24.8 format, and strings in unicode) Binaries There are currently two separate binaries provided for lua 5.1. Both are windows binaries, and both contain lua 5.1.4 binaries (intperpreter and compiler) too The generic lua 5.1 version can be found at the project's download page The unicode mobile version used in HTC phones can be found at http://winmo.sztupy.hu/luadec.html If you have compiled luadec for some other lua 5.1 version or operating system, then feel free to contact me, so I can add them to the project Changelog LuaDec 2.0.2 [4/Dec/2014] Minor fixes for the {...} construct Makefile for generic builds LuaDec 2.0.1 [17/May/2012] Fixes for handling unknown upvalues LuaDec 2.0 [10/Mar/2009] LuaDec has now a built-in heuristic to determine local declaration and releases Luadec has an option to output the LDS2 string of a file LuaDec 1.9 Some changes regarding LDS(2) strings and for loops (it's still a bit unstable) LuaDec has a new option to disassemble instead of decompile LuaDec 1.0 fixed OP_TFORLOOP handling added LDS2 functionality to luadec LuaDec beta 6 fixed a crash where luadec encounters unhandled boolean constructs luadecguess has now a new heuristic called ""fast guess"" for large scripts LuaDec beta 5 luadecguess can now be parameterized, and is more powerful LuaDec beta 4 fixed upvalue handling fixed some local variable handlings added luadecguess: a local variable declaration place guesser LuaDec beta 3 fixed OP_TFORLOOP fixed loop variable handings added command line options to handle local variable declarations (LDS strings) LuaDec beta 2 added some workarounds for the crashes. Luadec might output lots of garbage lua code, but it tries not crashing fixed OP_TEST (hopefully) LuaDec beta 1 Corrected OP_FORPREP - OP_FORLOOP Added some more warnings Added automatic local variable declarations where possible alpha 2 Fixed constant loading errors fixed function variables Added handlers to the new opcodes Some changes to OP_TEST alpha 1 Initial Version Credits LuaDec51 is based on Hisham Muhammad's luadec The internals of Lua5.1 was learned from Kein-Hong Man's A No-Frills Introduction to Lua 5.1 VM Instructions Also thanks to anyone involved in helping me on XDA Contact us Contact information at http://winmo.sztupy.hu Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sztupy/luadec51"	"Lua Decompiler for Lua version 5.1."	"true"
"Analysis Tools and ASTs"	"luacov"	"http://keplerproject.github.io/luacov/"	"Simple coverage analyzer, used by busted and telescope for checking test coverage."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LuaCov - Coverage analysis for Lua scripts LuaCov Coverage analysis for Lua scripts LuaCov Home Overview Download Instructions History Credits Reference Project Git License Overview LuaCov is a simple coverage analyzer for Lua scripts. When a Lua script is run with the luacov module loaded, it generates a stats file with the number of executions of each line of the script and its loaded modules. The luacov command-line script then processes this file generating a report file which allows one to visualize which code paths were not traversed, which is useful for verifying the effectiveness of a test suite. LuaCov is free software and uses the same license as Lua. Download LuaCov can be downloaded via LuaRocks: luarocks install luacov There are some C extensions LuaCov can use (if they are available) to improve performance and analysis accuracy. To install LuaCov with these extensions install CLuaCov package instead: luarocks install cluacov LuaCov itself is written in pure Lua and has no external dependencies. You can also get the code directly from the git repo. Instructions Using LuaCov consists of two steps: running your script to collect coverage data, and then running luacov on the collected data to generate a report. To collect coverage data, your script needs to load the luacov Lua module. This can be done from the command-line, without modifying your script, like this: lua -lluacov test.lua      or lua -erequire('luacov.runner')('myconfigfilename') test.lua (Alternatively, you can add require(""luacov"") to the first line of your script.) Once the script is run, a file called luacov.stats.out is generated. If the file already exists, statistics are added to it. This is useful, for example, for making a series of runs with different input parameters in a test suite. To start the accounting from scratch, just delete the stats file. To generate a report, just run the luacov command-line script. It expects to find a file named luacov.stats.out in the current directory, and outputs a file named luacov.report.out. This is an example output of the report file:  ============================================================================== test.lua ==============================================================================  1 if 10 > 100 then *0    print(""I don't think this line will execute."")    else  1    print(""Hello, LuaCov!"")    end  Note that to generate this report, luacov reads the source files. Therefore, it expects to find them in the same location they were when the luacov module ran (the stats file stores the filenames, but not the sources themselves). LuaCov saves its stats upon normal program termination. If your program is a daemon -- in other words, if it does not terminate normally -- you can use the luacov.tick module or the tick configuration option, which periodically saves the stats file. For example, to run (on Unix systems) LuaCov on Xavante, just modify the first line of xavante_start.lua so it reads: #!/usr/bin/env lua -lluacov.tick or add this to .luacov config file: tick = true LuaCov includes several configuration options, which have their defaults stored in luacov.defaults module. These are the global defaults. To use project specific configuration, create a Lua script setting options as globals or returning a table with some options and store it as .luacov in the project directory from where luacov is being run. For example, this config informs LuaCov that only foo module and its submodules should be covered and that they are located inside src directory:  modules = {    [""foo""] = ""src/foo/init.lua"",    [""foo.*""] = ""src"" }  History 0.12.0 [June 29, 2016] Added support for experimental C extensions (CLuaCov). Changed config format: options are now set by assigning to globals, old format (returning a table) is still supported. Added tick config option, equivalent to using luacov.tick module. Fixed coverage data being saved to wrong file when using relative statsfile path and the program running LuaCov changes directories. Improved config loading error handling. Added :on_file_error() stub method to base reporter class, used for reporting problems when analyzing coverage data related to a file. 0.11.0 [April 18, 2016] Fixed several cases of lines falsely reported as missed. Fixed luacov.tick module not working. Improved default reporter output format. Reduced coverage collection overhead. Changed how coverage is saved, it's now possible to start a child Lua process with LuaCov enabled without wrapping the launch in luacov.pause and luacov.resume in the parent. Several minor fixes and improvements. 0.10.0 [February 9, 2016] Added debug_hook() function for use in custom debug hooks. Fixed patterns passed as command-line arguments matching too much. Fixed order in which module name translations are applied 0.9.1 [December 7, 2015] Fixed error when running LuaCov using Lua 5.1. 0.9 [December 6, 2015] with_luacov() function for covering coroutines created via the C API. fix priorities in modules list improve coverage analysis/exclusions list improve handling of multiline function declarations LDoc documentation 0.8 [September 30, 2015] Improved lexer which reduces false positives luacov.pause() and luacov.resume() functions ""modules"" option for configuration Plus several fixes and code cleanups. 0.7 [January 12, 2015] Improvement in detection of long strings. Added ""savestepsize"" option. Fix handling ""codefromstring"" option. 0.6 [September 10, 2014] Support for custom reporter objects Configuration option for processing/skipping strings Several fixes: behavior of on_exit, inclusion/exclusions lists, etc. 0.5 [February 8, 2014] Improved performance in reporter module More improvements in exclusions list 0.4 [December 3, 2013] Lua 5.2 compatibility fixes Several improvements in exclusions list 0.3 [October 10, 2012] Added configuration options and files Summary in report Improved handling of long strings and comments Support for coroutines and os.exit() 0.2 [April 30, 2009] Ignore code loaded from strings. 0.1 [July 16, 2007] Initial release. Credits LuaCov was originally designed and implemented by Hisham Muhammad as a tool for testing LuaRocks. A number of people have improved it since: see the Git logs for the full list of contributors!"	"null"	"null"	"Simple coverage analyzer, used by busted and telescope for checking test coverage."	"true"
"Analysis Tools and ASTs"	"luacheck"	"https://github.com/mpeterv/luacheck"	"Simple static analyzer which detects accidental globals and undefined or shadowed locals."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"305"	"23"	"38"	"GitHub - mpeterv/luacheck: A tool for linting and static analysis of Lua code. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 23 Star 305 Fork 38 mpeterv/luacheck Code Issues 8 Pull requests 0 Pulse Graphs A tool for linting and static analysis of Lua code. 505 commits 2 branches 21 releases Fetching contributors Lua 98.2% Python 1.8% Lua Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.4.x master Nothing to show 0.15.1 0.15.0 0.14.0 0.13.0 0.12.0 0.11.1 0.11.0 0.10.0 0.9.0 0.8.0 0.7.3 0.7.2 0.7.1 0.7.0 0.6.0 0.5.0 0.4.1 0.4.0 0.3.0 0.2.0 0.1.0 Nothing to show New pull request Latest commit 402c6ab Jul 5, 2016 mpeterv Fix implict number-to-string conversions in luacheck.check Permalink Failed to load latest commit information. bin Make main executable a module Apr 19, 2015 docsrc 0.15.1 release Jun 9, 2016 spec Detect variables and values that are mutated but never accessed Jul 3, 2016 src/luacheck Fix implict number-to-string conversions in luacheck.check Jul 5, 2016 .gitignore Start updating docs Jul 18, 2015 .luacheckrc Use globs in config Feb 25, 2016 .luacov Add coverage using luacov with pause/resume patch Apr 19, 2015 .travis.yml CI: use cluacov Jun 29, 2016 LICENSE Update license year to 2016 [ci skip] Jan 2, 2016 README.md 0.15.1 release Jun 9, 2016 appveyor.yml CI: use pip to install hererocks Jun 29, 2016 install.lua Update argparse Oct 31, 2015 luacheck-scm-1.rockspec Don't copy spec in the scm rockspec Jun 9, 2016 README.md Luacheck Contents Overview Installation Basic usage Related projects Documentation Development Building and testing License Overview Luacheck is a static analyzer and a linter for Lua. Luacheck detects various issues such as usage of undefined global variables, unused variables and values, accessing uninitialized variables, unreachable code and more. Most aspects of checking are configurable: there are options for defining custom project-related globals, for selecting set of standard globals (version of Lua standard library), for filtering warnings by type and name of related variable, etc. The options can be used on the command line, put into a config or directly into checked files as Lua comments. Luacheck supports checking Lua files using syntax of Lua 5.1, Lua 5.2, Lua 5.3 and LuaJIT 2.0. Luacheck itself is written in Lua and runs on all of mentioned Lua versions. Installation The easiest way to install Luacheck is to use LuaRocks. From your command line run the following command: $ luarocks install luacheck # prepend with sudo if necessary If it is not possible to install LuaFileSystem in your environment, use luarocks install luacheck --deps-mode=none. For parallel checking Luacheck additionally requires LuaLanes, which can be installed using LuaRocks as well. Manual installation For manual installation, only a Lua interpreter binary is required. Download and unpack latest Luacheck release (.zip .tar.gz). Run install.lua <path> script using the Lua interpreter. If Lua interpreter is not in PATH, invoke it using absolute path. Add <path>/bin to PATH or run Luacheck as <path>/bin/luacheck. Basic usage After Luacheck is installed, run luacheck program from the command line. Pass a list of files, rockspecs or directories (requires LuaFileSystem) to be checked: $ luacheck src extra_file.lua another_file.lua Checking src/good_code.lua               OK Checking src/bad_code.lua                3 warnings      src/bad_code.lua:3:23: unused variable length argument     src/bad_code.lua:7:10: setting non-standard global variable embrace     src/bad_code.lua:8:10: variable opt was previously defined as an argument on line 7  Checking src/python_code.lua             1 error      src/python_code.lua:1:6: expected '=' near '__future__'  Checking extra_file.lua                  5 warnings      extra_file.lua:3:18: unused argument baz     extra_file.lua:4:8: unused loop variable i     extra_file.lua:13:7: accessing uninitialized variable a     extra_file.lua:14:1: value assigned to variable x is unused     extra_file.lua:21:7: variable z is never accessed  Checking another_file.lua                2 warnings      another_file.lua:2:7: unused variable height     another_file.lua:3:7: accessing undefined variable heigth  Total: 10 warnings / 1 error in 5 files  For more info, see documentation. Related projects Editor support There are a few plugins which allow using Luacheck directly inside an editor, showing warnings inline: For Vim, Syntastic contains luacheck checker; For Sublime Text 3 there is SublimeLinter-luacheck which requires SublimeLinter; For Atom there is linter-luacheck which requires AtomLinter; For Emacs, Flycheck contains luacheck checker; For Brackets, there is linter.luacheck extension. If you are a plugin developer, see recommended way of using Luacheck in a plugin. Other projects Luacheck bindings for Node.js; Luacheck plugin for Gulp. Documentation Documentation is available online. If Luacheck has been installed using LuaRocks, it can be browsed offline using luarocks doc luacheck command. Documentation can be built using Sphinx: sphinx-build docsrc doc, the files will be found inside doc/. Development Luacheck is currently in development. The latest released version is 0.15.1. The interface of the luacheck module may change between minor releases. The command line interface is fairly stable. Use the Luacheck issue tracker on GitHub to submit bugs, suggestions and questions. Any pull requests are welcome, too. Building and testing After the Luacheck repo is cloned and changes are made, run luarocks make (optionally prepended with sudo) from its root directory to install dev version of Luacheck. To test Luacheck, ensure that you have busted installed and run busted. License The MIT License (MIT)  Copyright (c) 2014 - 2016 Peter Melnichenko  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mpeterv/luacheck"	"Simple static analyzer which detects accidental globals and undefined or shadowed locals."	"true"
"Analysis Tools and ASTs"	"Metalua"	"https://github.com/fab13n/metalua"	"Pure Lua parser and compiler, used for generating ASTs. A number of other tools make use of the Metalua parser in this way."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"223"	"19"	"37"	"GitHub - fab13n/metalua: The metalua programming language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 19 Star 223 Fork 37 fab13n/metalua Code Issues 12 Pull requests 2 Wiki Pulse Graphs The metalua programming language http://metalua.luaforge.net 244 commits 19 branches 4 releases 5 contributors Lua 58.4% TeX 41.6% Lua TeX Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.5-branch astdump better-errors cleanup do-expressions errornodes gg-lexer-experiment gg-syntax-simplified kahlua konekildt luaeclipse master mlc_xcall no-dll repackaging scoped-walk spaceinfo tilo treequery Nothing to show cq6803 cq 0.5-rc2 0.5-rc1 Nothing to show New pull request Latest commit 1fec8ed Jun 15, 2014 Fabien Fleutot fixed inconsistencies in metalua --print-ast … fixed inconsistencies in metalua --print-ast Permalink Failed to load latest commit information. doc spelling fixes to the documentation Nov 6, 2011 metalua Merge branch 'master' of ssh://git.eclipse.org/gitroot/koneki/org.ecl… Jan 13, 2014 README-compiler.md Merge branch 'master' of ssh://git.eclipse.org/gitroot/koneki/org.ecl… Jan 13, 2014 README-parser.md Merge branch 'master' of ssh://git.eclipse.org/gitroot/koneki/org.ecl… Jan 13, 2014 README.md Fix typo. May 29, 2014 checks.lua Merge branch 'master' of ssh://git.eclipse.org/gitroot/koneki/org.ecl… Jan 13, 2014 metalua-compiler-0.7.2-1.rockspec Merge branch 'master' of ssh://git.eclipse.org/gitroot/koneki/org.ecl… Jan 13, 2014 metalua-parser-0.7.2-1.rockspec Merge branch 'master' of ssh://git.eclipse.org/gitroot/koneki/org.ecl… Jan 13, 2014 metalua.lua fixed inconsistencies in metalua --print-ast Jun 15, 2014 README.md Metalua Metalua is a Lua code analysis tool, as well as a compiler for a superset of Lua 5.1 supporting Compile-Time Meta-Programming. It's separated into two LuaRocks, metalua-parser and metalua-compiler. The documentation of each rock can be found in README-parser.md and README-compiler.md. All the code in Metalua is released under dual lincenses: MIT public license (same as Lua); EPL public license (same as Eclipse). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fab13n/metalua"	"Pure Lua parser and compiler, used for generating ASTs. A number of other tools make use of the Metalua parser in this way."	"true"
"Analysis Tools and ASTs"	"LuaInspect"	"https://github.com/davidm/lua-inspect"	"Lua's most powerful code analysis and linting tool, built on Metalua. Used by ZeroBraneStudio, among others."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"126"	"13"	"15"	"GitHub - davidm/lua-inspect: Lua code analysis, with plugins for HTML and SciTE Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 126 Fork 15 davidm/lua-inspect Code Issues 8 Pull requests 1 Pulse Graphs Lua code analysis, with plugins for HTML and SciTE http://lua-users.org/wiki/LuaInspect 285 commits 2 branches 0 releases 3 contributors Lua 99.1% Other 0.9% Lua Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master metalua-latest Nothing to show Nothing to show New pull request Latest commit 9019008 Apr 22, 2016 davidm README.txt - fix name of license file Permalink Failed to load latest commit information. extman refactor: move directory luainspectlib -> lib Mar 21, 2012 htmllib Ignore locals named '_' in unused/masking variable reporting. Jan 26, 2012 lib/luainspect refactor: move directory luainspectlib -> lib Mar 22, 2012 metalualib metalua - remove getfenv (lua 5.2 compat) Jan 25, 2012 CHANGES.txt core: cleanup error messages in inferred values Jan 27, 2012 COPYRIGHT fix file permission attributes Dec 23, 2011 COPYRIGHT-extman fix file permission attributes Dec 23, 2011 COPYRIGHT-jquery fix file permission attributes Dec 23, 2011 README.txt README.txt - fix name of license file Apr 22, 2016 examples.lua core: cleanup error messages in inferred values Jan 28, 2012 luainspect refactor: move directory luainspectlib -> lib Mar 22, 2012 test.lua command: add 'luainspect' front-end script in top directory. Dec 24, 2011 README.txt LuaInspect - LuaInspect is a tool that does Lua code analysis. It includes an extensive plugin for the SciTE [1] text editor, there is also a plugin for the VIM editor [2], and it includes an export to DHTML as well.  == Project Page ==  For further details, see http://lua-users.org/wiki/LuaInspect .  == Status ==  WARNING: Some of this code might not yet be stable or complete, particularly with regards to inferencing.  It is usable for daily code editing but you may need to sometimes fix things yourself.  Many additional features could be added too.  == Features ==      * analysis:         * identifies global (red) and local variables (blue), including locals that are 	   function arguments (dark blue) and upvalues (light blue)         * identifies unused local variables: e.g. `do local x=1 end` (white-on-blue)         * identifies local variables masking other locals (same name): e.g. `local x=1; local x=2` 	   (strikethrough and squiggle line)         * identifies local variables that have non-constant binding (`local x = 1; x = 2`) (italic)         * identifies unknown global variables (white-on-red) and table fields (red), inferred by 	   static and dynamic evaluation.         * infers values of variables (e.g. `local sum = math.pi + 2` is 5.14.            and defined-ness of members of imported modules           (`local mt = require ""math""; math.sqrtt(2) -- undefined`)         * infers signatures of functions (including local, global, and module functions)         * checks number of function arguments against signatures         * cross-references variables (locals and module fields) with their definitions and uses 	  (pink highlight), identifies range of lines/scope where the local is defined 	   and (SciTE only) supports jump-to-definition and jump-to-uses         * identifies all keywords in selected block (underline)         * evaluate special comments (prefixed by '!') to inject semantic information into analysis            (similar to luaanalyze / lint).         * basic type inferences (e.g. number + number -> number) 	* infer function return values (e.g. `function f(x) if x then return 1,2,3 else return 1,3,'z' end end` 	   returns 1, number, unknown). 	* detect dead-code (e.g. `do return end dead()`) (SciTE only) (diagonal hatching)     * refactoring:         * command to rename all occurrences of selected variable (SciTE only)     * browsing:         * inspect members of selected table.         * select statement or comment containing current cursor selection (SciTE only)         * display real-time annotations of all local variables, like an Excel/Mathcad worksheet           (experimental feature via ANNOTATE_ALL_LOCALS) (currently SciTE only)     * auto-complete typing support (SciTE only) (experimental)     * interfaces: SciTE plugin, VIM plugin, and HTML output.  == Files in this directory ==  metalualib/* - Copy of Metalua libraries.   Based on http://github.com/fab13n/metalua/tree/fcee97b8d0091ceb471902ee457dbccaab98234e   with a few bug fixes (search for ""PATCHED:LuaInspect"" in the source). lib/* - LuaInspect libraries. htmllib/* - HTML resources under here. extman/* - SciTE extman.   Recent version compatible with LuaInspect.  == Command-line Usage (HTML output) ==  Example:    $ ./luainspect -fhtml -lhtmllib examples.lua > examples.html  (Alternately just run ""lua test.lua"".  You should also do ""lua luainspect"" rather than ""./luainspect"" on Windows.)  You will need to ensure that the JavaScript and CSS files in the path after the ""-l"" argument can be found relative to the HTML file; otherwise, the page will not display properly.  == Command-line Usage (delimited CSV output) ==  Example:    $ ./luainspect -fdelimited examples.lua > examples.csv  == Installation in SciTE ==  First install SciTE <http://www.scintilla.org/SciTE.html>. Version 2.12 and 2.20 work (older versions might not work).  The simple way to install LuaInspect into SciTE is to just place the ""luainspect"" folder inside the same folder where your SciTE binary is installed and add the following line to one of your SciTE properties files (e.g. SciTEGlobal.properties or SciTEUser.properties -- consult the SciTE documentation for where these are located):    ext.lua.startup.script=$(SciteDefaultHome)/luainspect/extman/extman.lua  That normally is all you need to do.  If you placed LuaInspect somewhere else or are using your own version of SciTE ExtMan (extman.lua), you will need to adjust the above to reference the absolute path where extman.lua is installed.  LuaInspect includes its own copy of SciTE ExtMan <http://lua-users.org/wiki/SciteExtMan>, and it's recommended to use the included version because older versions might not work properly.  The files in the scite_lua subfolder are not strictly necessary but are suggested.  In particularly, scite_lua/luainspect.lua allows ExtMan to find LuaInspect, and you will need to adjust this if you move LuaInspect somewhere else relative to ExtMan.  Dependencies:   Tested with SciTE version 2.12/2.20 (older versions might not work).   Requires http://lua-users.org/wiki/SciteExtMan (version included).     Note: ExtMan's ctagsdx.lua is recommended (allows ""goto mark""     command to return to previous location following a ""go to     definition"" or ""show all variable uses"").  If you want to customize styles, add the contents of the `light_styles` or `dark_styles` variable in the scite.lua file to a SciTE properties file.  == Configuring SciTE options ==  The following LuaInspect options can be configured in one of your SciTE properties files:    luainspect.update.always (0 or 1, default 1)   luainspect.delay.count (integer >= 1, default 5)   luainspect.annotate.all.locals (0 or 1, default 0)   luainspect.incremental.compilation (0 or 1, default 1)   luainspect.performance.tests (0 or 1, default 0)   luainspect.autocomplete.vars (0 or 1, default 0)   luainspect.autocomplete.syntax (0 or 1, default 0)   luainspect.path.append (string, default '')   luainspect.cpath.append (string, default '')   style.script_lua.scheme (string, '' or 'dark', default '')  For details, see scite.lua.  == Installation on VIM ==  See [2] for VIM editor support.  == Preliminary support for luaanalyze style comments ==  To make all variables in scope match name 'ast$' be recognized by LuaInspect as a table with field 'tag' of type string, add this to your code:    --! context.apply_value('ast$', {tag=''})  The LuaInspect code itself uses this:    --! require 'luainspect.typecheck' (context)  == Design Notes ==  The font styles are intended to make the more dangerous or questionable code stand out more.  Local variables named '_' are ignored for purposes of unused/masking variable reporting.  Typical use case: `for _, v in ipairs(t) do <. . .> end`.  == LICENSE ==  See COPYRIGHT file.  == Credits ==  David Manura, original author. Steve Donovan for discussions on design, SciTE and ExtMan. Fabien Fleutot for Metalua and discussions. SciTE suggestions/fixes by Tymur Gubayev. Peter Odding for VIM editor support [2]. Jon Akhtar - csv output and IntelliJ discussions.  == Bugs ==  Please report bugs via github <http://github.com/davidm/lua-inspect/issues> or just ""dee em dot el you ae at em ae tee ayche two dot ow ar gee"", or if you prefer neither then append to the wiki page <http://lua-users.org/wiki/LuaInspect>.  == References ==  [1] http://www.scintilla.org/SciTE.html [2] http://peterodding.com/code/vim/lua-inspect/ - VIM editor support  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/davidm/lua-inspect"	"Lua's most powerful code analysis and linting tool, built on Metalua. Used by ZeroBraneStudio, among others."	"true"
"Analysis Tools and ASTs"	"LuaMinify"	"https://github.com/stravant/LuaMinify"	"Minifier which also brings its own static analysis tools, lexer, and parser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"98"	"18"	"15"	"GitHub - stravant/LuaMinify: Lua source code minifier. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 18 Star 98 Fork 15 stravant/LuaMinify Code Issues 1 Pull requests 4 Pulse Graphs Lua source code minifier. 27 commits 1 branch 0 releases Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 149de09 Jun 25, 2015 mlnlover11 Merge pull request #15 from tst2005/patch-1 … typo fix Permalink Failed to load latest commit information. RobloxPlugin Update MinifyToolbar.lua Feb 3, 2014 tests Implemented FormatIdentity Jul 8, 2013 CommandLineBeautify.lua 'Modularized' files so they return functions/tables instead of defini… Mar 13, 2013 CommandLineLiveBeautify.lua 'Modularized' files so they return functions/tables instead of defini… Mar 13, 2013 CommandLineLiveMinify.lua 'Modularized' files so they return functions/tables instead of defini… Mar 13, 2013 CommandLineMinify.lua 'Modularized' files so they return functions/tables instead of defini… Mar 13, 2013 FormatBeautiful.lua Implemented FormatIdentity Jul 8, 2013 FormatIdentity.lua Implemented FormatIdentity Jul 8, 2013 FormatMini.lua Fix issue #13 May 19, 2015 LICENSE.md Added License (MIT) Sep 8, 2013 LuaMinify.bat Initial Commit Sep 22, 2012 LuaMinify.sh Initial Commit Sep 23, 2012 ParseLua.lua typo fix Jun 25, 2015 README.md 'Modularized' files so they return functions/tables instead of defini… Mar 13, 2013 RobloxPluginInstructions.png Add Roblox Plugin Instructions Sep 22, 2012 Scope.lua Implemented FormatIdentity Jul 8, 2013 Util.lua Implemented FormatIdentity Jul 8, 2013 strict.lua Implemented FormatIdentity Jul 8, 2013 README.md Lua Parsing and Refactorization tools A collection of tools for working with Lua source code. Primarily a Lua source code minifier, but also includes some static analysis tools and a general Lua lexer and parser. Currently the minifier performs: Stripping of all comments and whitespace True semantic renaming of all local variables to a reduced form Reduces the source to the minimal spacing, spaces are only inserted where actually needed. LuaMinify Command Line Utility Usage The LuaMinify shell and batch files are given as shortcuts to running a command line instance of the minifier with the following usage: LuaMinify sourcefile [destfile]  Which will minify to a given destination file, or to a copy of the source file with _min appended to the filename if no output file is given. LuaMinify Roblox Plugin Usage First, download the source code, which you can do by hitting this button: Then copy the RobloxPlugin folder from the source into your Roblox Plugins directory, which can be found by hitting Tools->Open Plugins Folder in Roblox Studio. Features/Todo Features: - Lua scanner/parser, which generates a full AST - Lua reconstructor     - minimal     - full reconstruction (TODO: options, comments)     - TODO: exact reconstructor - support for embedded long strings/comments e.g. [[abc [[ def ]] ghi]]  Todo: - use table.concat instead of appends in the reconstructors Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/stravant/LuaMinify"	"Minifier which also brings its own static analysis tools, lexer, and parser."	"true"
"Analysis Tools and ASTs"	"Typed Lua"	"https://github.com/andremm/typedlua"	"A typed superset of Lua that compiles to plain Lua."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"267"	"27"	"34"	"GitHub - andremm/typedlua: An Optional Type System for Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 267 Fork 34 andremm/typedlua Code Issues 13 Pull requests 2 Pulse Graphs An Optional Type System for Lua 814 commits 4 branches 0 releases 7 contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master newfilters prototype thesis Nothing to show Nothing to show New pull request Latest commit e170174 Jul 15, 2016 mascarenhas committed on GitHub Merge pull request #94 from andremm/newfilters … merge work on replacing the type filter system Permalink Failed to load latest commit information. doc Uploading DLS 2015 slides Oct 29, 2015 examples add new projection types and filters to them, fix type names in error… Jul 15, 2016 typedlua Merge pull request #94 from andremm/newfilters Jul 15, 2016 .gitignore Merge branch 'master' of https://github.com/mascarenhas/typedlua into… May 22, 2015 .travis.yml Added support for travis-ci May 19, 2016 README.md Merge pull request #78 from jvprat/loader Jul 11, 2016 test.lua add new projection types and filters to them, fix type names in error… Jul 15, 2016 tlc do not write output file on error Jul 15, 2016 typedlua-scm-1.rockspec major refactoring of filters: combining filters with boolean expressi… Jul 14, 2016 typedlua.lua Added a runtime module loader. May 19, 2016 README.md Typed Lua Typed Lua is a typed superset of Lua that compiles to plain Lua. It provides optional type annotations, compile-time type checking, and class-based object oriented programming through the definition of classes, interfaces, and modules. Requirements for running the compiler Lua >= 5.1 LPeg >= 0.12 Install Typed Lua must be installed in a standard location; LuaRocks will do this, and will also install the LPeg dependency automatically.     $ [install luarocks]     $ luarocks install typedlua-scm-1.rockspec  Usage     $ tlc [options] [filename]  Compiler options     -d      dump the AST     -g      generate code without type checking     -h      print this help     -o name output to file 'name' (default is 'tlc.lua')     -p      print the AST     -v      print current version  Runtime module loader Typed Lua also provides a runtime loader to use Typed Lua modules on any standard Lua virtual machine:     require ""typedlua""     package.path = ""./?.tl;"" .. package.path      -- It will load my_module.tl if it exists:     local my_module = require ""my_module""     local my_file = loadfile ""my_file.tl""  The loader functions use the file extension (chunk name extension in the cases of load and loadstring) to decide whether it contains Typed Lua (.tl) or plain Lua. If you want to force loading the chunks as Typed Lua you can use the functions provided by the typedlua module (these work like their standard Lua counterparts):     local typedlua = require ""typedlua""     typedlua.loadstring(string, chunkname)     typedlua.load(func, chunkname)     typedlua.loadfile(filename)     typedlua.dofile(filename)  License Released under the MIT License (MIT) Copyright (c) 2013 Andre Murbach Maidl Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/andremm/typedlua"	"A typed superset of Lua that compiles to plain Lua."	"true"
"Experimental, etc"	"punchdrunk.js"	"https://github.com/TannerRogalsky/punchdrunk"	"Moonshine + LÖVE API reimplementation = run LÖVE games in the browser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"73"	"20"	"9"	"GitHub - TannerRogalsky/punchdrunk: An attempt to replicate the LÖVE API in the browser using moonshine. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 20 Star 73 Fork 9 TannerRogalsky/punchdrunk Code Issues 14 Pull requests 1 Wiki Pulse Graphs An attempt to replicate the LÖVE API in the browser using moonshine. http://tannerrogalsky.com/punchdrunk/ 239 commits 5 branches 4 releases Fetching contributors JavaScript 86.0% CoffeeScript 10.6% CSS 2.0% Other 1.4% JavaScript CoffeeScript CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags error_handling gh-pages image_fonts master webgl Nothing to show v0.0.4 v0.0.3 v0.0.2 v0.0.1 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. coffeescript examples js lua test .gitignore .travis.yml Gruntfile.coffee LICENSE README.md index.html package.json README.md punchdrunk.js DEPRECATED This project has been replaced by Love.js. It is a direct port of LÖVE and is more feature-complete and performant. Punchdrunk = Moonshine + LÖVE Demo: http://tannerrogalsky.com/punchdrunk/ Tests: http://tannerrogalsky.com/punchdrunk/test/ Get This Running Install node.js Install Lua and make sure that it's in your path. Install top-level dependencies: npm install grunt-cli -g Install the project dependencies: npm install grunt will watch and compile the source as well as run a simple web server on port 8000. Open localhost:8000 in your browser. Caveats Some things don't work (and some may never work): love.image love.joystick love.physics love.thread love.filesystem Pretty much everything else has partial support. I'm not going to make a long list of everything that doesn't work right now because there's still too much that doesn't. I think you'll find that all the most basic elements of the API are functional. Those that aren't should be stubbed out in the hopes that they aren't crucial to the game that is being ported. FAQ Can I run my own game in the browser? Sure! Just delete what's in the lua folder, replace it with your source code and run grunt. It should compile the Lua code in JSON-ized bytecode which should then just work, if you aren't using anything that hasn't been implemented yet. You may also have to preload your graphics and audio by putting tags for them in index.html. This is cool! How can I help? Everything that I'm working on should be logged as an issue. If you find something that doesn't work, please create a new issue for it. If you're interested in picking one of the existing issues up, please comment on it first so that I can let you know if I've already done any work on it. Why is your CoffeScript so weird? The interop between Lua and CoffeeScript has necessitated some CoffeeScript that is atypical. Mainly, you'll notice two things: heavy use of the 'fat-arrow notation' for function binding and a lot of passing the object being operated on to the function instead of using proper JavaScript context. Both of these are because the differences between how JavaScript and Lua handle function context. You can read more about it here. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TannerRogalsky/punchdrunk"	"Moonshine + LÖVE API reimplementation = run LÖVE games in the browser."	"true"
"Experimental, etc"	"luvit"	"https://github.com/luvit/luvit"	"Node.js's underlying architecture (libUV) with Lua on top instead of JavaScript."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2338"	"170"	"252"	"GitHub - luvit/luvit: Lua + libUV + jIT = pure awesomesauce Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 170 Star 2,338 Fork 252 luvit/luvit Code Issues 58 Pull requests 3 Wiki Pulse Graphs Lua + libUV + jIT = pure awesomesauce https://luvit.io/ 2,741 commits 28 branches 95 releases 54 contributors Lua 99.0% Other 1.0% Lua Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags bugs/many_processes bump/luvi_try2 checkfor/resolve4 fix-exit-leak fix-once-removal fix/dns_struct_simplification fix/use_windows_dns fixes/bump_lit_3_0_2 fixes/bump_to_luvi_1_8_0-3 fixes/bump_2.11.3 fixes/dns_error_fix fixes/dns_errors fixes/lots_of_processes fixes/patch_dns_resolving fixes/release_2.11.1 fixes/tap_handle_closing fixes/term fixes/white_space_resolve_conf legacy luv-change-adapt luvly master require-internal-first rphillips/double_import rphillips/testing small tweaks-lua-openssl-update zhaozg-master Nothing to show v0.1.0 v0.0.4 v0.0.3 v0.0.2 v0.0.1 2.11.4 2.11.3 2.11.2 2.11.1 2.11.0 2.10.1 2.10.0 2.9.1 2.8.0 2.7.4 2.7.3 2.7.2 2.7.1 2.7.0 2.6.0 2.5.9 2.5.8 2.5.7 2.5.6 2.5.5 2.5.4 2.5.3 2.5.2 2.5.1 2.5.0 2.4.5 2.4.4 2.4.3 2.4.2 2.4.1 2.4.0 2.3.4 2.3.3 2.3.2 2.3.1 2.3.0 2.2.8 2.2.7 2.2.6 2.2.5 2.2.4 2.2.3 2.2.2 2.2.1 2.2.0 2.1.16 2.1.15 2.1.14 2.1.13 2.1.12 2.1.11 2.1.10 2.1.9 2.1.8 2.1.7 2.1.4 2.1.3 2.1.2 2.1.1 2.1.0 2.0.6 2.0.5 2.0.4 2.0.3 2.0.2 2.0.1 2.0.0 1.9.5 1.9.4 1.9.3 1.9.2 1.9.1 1.9.0 0.10.0 0.8.2 0.8.1 0.8.0 0.7.0 0.6.1 0.6.0 0.5.0 0.4.0 0.3.1 0.3.0 0.2.0 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 Nothing to show New pull request Latest commit 9c01fbe Jul 1, 2016 rphillips bump http to 2.1.1 Permalink Failed to load latest commit information. bench/http-cluster fix missing code block ending Jan 22, 2015 deps bump http to 2.1.1 Jul 1, 2016 examples Add some echo examples Jun 21, 2016 tests Move http.headerMeta to its own package and add util functions Jun 27, 2016 tools Update tls module to use binary root certs Jul 21, 2015 .gitattributes add a .gitattributes for batch files Jul 23, 2015 .gitignore Update to lit 1.1.2 Apr 17, 2015 .gitmodules litify Feb 18, 2015 .luacheckrc Revert all changes except porting modules to new metadata format Feb 5, 2016 .travis.yml add travis backtrace support Jul 24, 2015 ChangeLog release notes for 2.11.4 Jul 1, 2016 LICENSE.txt Use Apache 2.0 License consistently throughout luvit Jan 7, 2012 Makefile Bump lit to 3.4.2 Jun 27, 2016 NOTICE.txt Use Apache 2.0 License consistently throughout luvit Jan 7, 2012 README.markdown Readme: Add instructions for running a specific test May 6, 2016 Vagrantfile add vagrantfile Dec 1, 2014 appveyor.yml add 32bit tests to windows Jul 15, 2015 init.lua Changed random seed from os.clock to os.time Jun 20, 2016 main.lua Revert all changes except porting modules to new metadata format Feb 6, 2016 make.bat Bump lit to 3.4.2 Jun 27, 2016 package.lua bump http to 2.1.1 Jul 1, 2016 README.markdown Luvit 2.0 - Node.JS for the Lua Inventor Welcome to the source code for Luvit 2.0. This repo contains the luvit/luvit metapackage and all luvit/* packages as published to lit. This collection of packages and modules implements a node.js style API for the luvi/lit runtime. It can be used as both a library or a standalone executable. See the main project webpage for more details. https://luvit.io/ Need Help? Ask questions here through issues, on irc #luvit@freenode or the mailing list. Binary Modules Luvit supports FFI and Lua based binary modules. There is a wiki entry explaining how to manage and include a binary module within a bundled application. Publishing Compiled Code Hacking on Luvit Core First you need to clone and build luvit, this is easy and works cross-platform thanks to Makefile and make.bat. git clone https://github.com/luvit/luvit.git cd luvit make If you want to test luvit without constantly building, use luvi. luvi . Always make sure to run make test before submitting a PR. Notes to Maintainers Use luvi /path/to/luvit to test changes without rebuilding the binary. To run the test suite, run make test to build a luvit and use that. If you want to test a custom built luvi, run luvi . -- tests/run.lua If you want to run a specific test file with a custom built luvi, run luvi . -- tests/test-<name-of-test>.lua (e.g. luvi . -- tests/test-http.lua) There is a wiki page on making new luvit releases at https://github.com/luvit/luvit/wiki/Making-a-luvit-release. The packages in deps live primarily in this repo, but some are duplicated in luvit/lit to ease lit bootstrapping. Updates can be pushed from either repo to lit, just make sure to keep them in sync. One way to do this is to rm -rf deps && lit install. This will install the latest version of all the packages from lit. Check the diff carefully to make sure you're not undoing any work. There might have been unpublished changes locally in luvit that aren't in the lit central database yet. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/luvit/luvit"	"Node.js's underlying architecture (libUV) with Lua on top instead of JavaScript."	"true"
"Experimental, etc"	"graphql-lua"	"https://github.com/bjornbytes/graphql-lua"	"Lua implementation of."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"14"	"3"	"2"	"GitHub - bjornbytes/graphql-lua: GraphQL implementation in Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 14 Fork 2 bjornbytes/graphql-lua Code Issues 2 Pull requests 0 Pulse Graphs GraphQL implementation in Lua 104 commits 1 branch 1 release Fetching contributors Lua 100.0% Lua Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.0.2 Nothing to show New pull request Latest commit 2df1a66 Jul 1, 2016 bjornbytes Update README; Permalink Failed to load latest commit information. graphql Add TODO comment for defaultValue serialization; Jul 1, 2016 tests LICENSE Add LICENSE; Dec 26, 2015 README.md graphql-0.0.1-1.rockspec graphql-0.0.2-1.rockspec 0.0.2; Jul 1, 2016 graphql.lua README.md GraphQL Lua Lua implementation of GraphQL. Example local parse = require 'graphql.parse' local schema = require 'graphql.schema' local types = require 'graphql.types' local validate = require 'graphql.validate' local execute = require 'graphql.execute'  -- Parse a query local ast = parse [[ query getUser($id: ID) {   person(id: $id) {     firstName     lastName   } } ]]  -- Create a type local Person = types.object {   name = 'Person',   fields = {     id = types.id.nonNull,     firstName = types.string.nonNull,     middleName = types.string,     lastName = types.string.nonNull,     age = types.int.nonNull   } }  -- Create a schema local schema = schema.create {   query = types.object {     name = 'Query',     fields = {       person = {         kind = Person,         arguments = {           id = types.id         },         resolve = function(rootValue, arguments)           if arguments.id ~= 1 then return nil end            return {             id = 1,             firstName = 'Bob',             lastName = 'Ross',             age = 52           }         end       }     }   } }  -- Validate a parsed query against a schema validate(schema, ast)  -- Execution local rootValue = {} local variables = { id = 1 } local operationName = 'getUser'  execute(schema, ast, rootValue, variables, operationName)  --[[ {   person = {     firstName = 'Bob',     lastName = 'Ross'   } } ]] Status Parsing Improve error messages Type system Introspection Validation Execution Asynchronous execution (coroutines) Example server Running tests lua tests/runner.lua License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bjornbytes/graphql-lua"	"Lua implementation of."	"true"
"Experimental, etc"	"GraphQL"	"http://graphql.org/"	"Lua implementation of."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3962"	"230"	"268"	"GitHub - graphql/graphql-js: A reference implementation of GraphQL for JavaScript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 230 Star 3,962 Fork 268 graphql/graphql-js Code Issues 48 Pull requests 11 Wiki Pulse Graphs A reference implementation of GraphQL for JavaScript 676 commits 2 branches 43 releases 64 contributors JavaScript 99.2% Other 0.8% JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master npm Nothing to show v0.6.1 v0.6.0 v0.5.0 v0.5.0-beta.1 v0.4.18 v0.4.17 v0.4.16 v0.4.15 v0.4.14 v0.4.13 v0.4.12 v0.4.11 v0.4.10 v0.4.9 v0.4.8 v0.4.7 v0.4.6 v0.4.5 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.3.0 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.12 v0.1.11 0.2.3 0.1.10 0.1.9 0.1.8 0.1.7 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 Nothing to show New pull request Latest commit a73e180 Jul 11, 2016 dschafer committed on GitHub Merge pull request #429 from kassens/ascii … Use only ASCII characters Permalink Failed to load latest commit information. resources Removes depencency on babel-runtime. Jul 6, 2016 src Use only ASCII characters Jul 11, 2016 .babelrc Removes depencency on babel-runtime. Jul 6, 2016 .eslintrc Update all dependencies, include flow-specific lint handling Jun 10, 2016 .flowconfig [Maintenance] moving scripts to resources Aug 12, 2015 .gitignore [Maintenance] moving scripts to resources Aug 12, 2015 .npmignore move babel config to the babelrc (#399) Jun 10, 2016 .travis.yml Fix tests for node v0.10, widen test matrix Jul 6, 2016 CONTRIBUTING.md Minor note in contributing Aug 19, 2015 LICENSE GraphQL technical preview Jul 2, 2015 PATENTS GraphQL technical preview Jul 2, 2015 README.md Use only ASCII characters Jul 11, 2016 package.json 0.6.1 Jul 6, 2016 README.md GraphQL.js This is a technical preview of the JavaScript reference implementation for GraphQL, a query language created by Facebook for describing data requirements on complex application data models. See more complete documentation at http://graphql.org/ and http://graphql.org/docs/api-reference-graphql/. For questions, ask Stack Overflow. For discussion, join #graphql on Discord. Technical Preview Contents This technical preview contains a draft specification for GraphQL and a reference implementation in JavaScript that implements that draft, GraphQL.js. The reference implementation provides base libraries in JavaScript that would provide the basis for full GraphQL implementations and tools. It is not a fully standalone GraphQL server that a client developer could use to start manipulating and querying data. Most importantly, it provides no mapping to a functioning, production-ready backend. The only ""backend"" we have targeted for this early preview are in-memory stubs in test cases. We are releasing this now because after GraphQL was first discussed publicly, many engineers used this information to implement the parts of the system that we discussed publicly. We want to support those engineers by providing both a formal specification and a reference implementation for the system as a whole. To that end, the target audience is not the client developer, but those who have built or are actively interested in building their own GraphQL implementations and tools. Critically, we also want feedback on the system and to incorporate that feedback in our final release. In order to be broadly adopted, GraphQL will have to target a wide variety of backends, frameworks, and languages, which will necessitate a collaborative effort across projects and organizations. This technical preview marks the beginning of that process. Getting Started An overview of GraphQL in general is available in the README for the Specification for GraphQL. That overview describes a simple set of GraphQL examples that exist as tests in this repository. A good way to get started with this repository is to walk through that README and the corresponding tests in parallel. Using GraphQL.js Install GraphQL.js from npm npm install --save graphql GraphQL.js provides two important capabilities: building a type schema, and serving queries against that type schema. First, build a GraphQL type schema which maps to your code base. import {   graphql,   GraphQLSchema,   GraphQLObjectType,   GraphQLString } from 'graphql';  var schema = new GraphQLSchema({   query: new GraphQLObjectType({     name: 'RootQueryType',     fields: {       hello: {         type: GraphQLString,         resolve() {           return 'world';         }       }     }   }) }); This defines a simple schema with one type and one field, that resolves to a fixed value. The resolve function can return a value, a promise, or an array of promises. A more complex example is included in the top level tests directory. Then, serve the result of a query against that type schema. var query = '{ hello }';  graphql(schema, query).then(result => {    // Prints   // {   //   data: { hello: ""world"" }   // }   console.log(result);  }); This runs a query fetching the one field defined. The graphql function will first ensure the query is syntactically and semantically valid before executing it, reporting errors otherwise. var query = '{ boyhowdy }';  graphql(schema, query).then(result => {    // Prints   // {   //   errors: [   //     { message: 'Cannot query field boyhowdy on RootQueryType',   //       locations: [ { line: 1, column: 3 } ] }   //   ]   // }   console.log(result);  }); Want to ride the bleeding edge? The npm branch in this repository is automatically maintained to be the last commit to master to pass all tests, in the same form found on npm. It is recommend to use builds deployed npm for many reasons, but if you want to use the latest not-yet-released version of graphql-js, you can do so by depending directly on this branch: npm install graphql@git://github.com/graphql/graphql-js.git#npm  Contributing We actively welcome pull requests, learn how to contribute. Changelog Changes are tracked as Github releases. License GraphQL is BSD-licensed. We also provide an additional patent grant. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/graphql/graphql-js"	"Lua implementation of."	"true"
"Scriptable by Lua"	"luakit"	"http://mason-larobina.github.io/luakit/"	"Fast, small, webkit based browser framework extensible by Lua."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Fast, small, webkit based browser framework extensible by Lua."	"false"
"Scriptable by Lua"	"Hammerspoon"	"http://www.hammerspoon.org/"	"A powerful, extensible OS X automation tool. A community-maintained fork of."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1493"	"60"	"104"	"GitHub - Hammerspoon/hammerspoon: Staggeringly powerful OS X desktop automation with Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 60 Star 1,493 Fork 104 Hammerspoon/hammerspoon Code Issues 152 Pull requests 6 Wiki Pulse Graphs Staggeringly powerful OS X desktop automation with Lua http://www.hammerspoon.org 3,594 commits 1 branch 49 releases 55 contributors Objective-C 46.2% Lua 25.5% C 18.1% HTML 8.3% C++ 0.6% Shell 0.5% Other 0.8% Objective-C Lua C HTML C++ Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.9.46 0.9.45 0.9.44 0.9.43 0.9.42 0.9.41 0.9.40 0.9.39 0.9.38 0.9.37 0.9.36 0.9.35 0.9.34 0.9.33 0.9.32 0.9.31 0.9.30 0.9.29 0.9.28 0.9.27 0.9.26 0.9.25 0.9.24 0.9.23 0.9.22 0.9.21 0.9.20 0.9.19 0.9.18 0.9.17 0.9.16 0.9.15 0.9.14 0.9.13 0.9.12 0.9.11 0.9.10 0.9.9 0.9.8 0.9.7 0.9.6 0.9.5 0.9.4 0.9.3 0.9.2 0.9.1 0.9.0 0.4.3 0.4.2 Nothing to show New pull request Latest commit 33378a2 Jun 30, 2016 asmagill committed on GitHub Merge pull request #920 from asmagill/webview2 … [WIP] webview additions Permalink Failed to load latest commit information. .fauxpas Add config blob for checking extensions in Faux Pas Feb 9, 2016 Hammerspoon Tests Merge pull request #870 from heptal/test_uielement May 20, 2016 Hammerspoon.xcodeproj clean up toolbar docs pt 1 Jun 24, 2016 Hammerspoon.xcworkspace Drop UI testing from the correct scheme this time Apr 15, 2016 Hammerspoon include console input preparser Jun 19, 2016 HammerspoonUITests Fix UI Tests to load init.lua, and put in a print() so it's easier to… Jan 26, 2016 LuaSkin accept NSUInteger in withOptions: to prevent compiler warnings when u… Jun 13, 2016 Pods add PocketSocket pod May 20, 2016 extensions Merge pull request #920 from asmagill/webview2 Jun 30, 2016 scripts clean up toolbar docs pt 1 Jun 24, 2016 .gitignore Add xcshareddata folders to git. Closes #808 Feb 26, 2016 .luacheckrc Add a .luacheckrc Jul 20, 2015 .syntastic_objc_config Add a .syntastic_objc_config because not having it is annoying me Jul 24, 2015 .travis.yml We need to set pipefail for travis builds, let's see if the simplest … Apr 13, 2016 CODE_OF_CONDUCT.md Update CoC to 1.3.0 Jan 15, 2016 CONTRIBUTING.md Update CONTRIBUTING.md to discuss testing Feb 8, 2016 CREDITS.md Credit for hs.application.watcher. Closes #287 May 13, 2015 LICENSE Add a LICENSE file, for clarity Nov 6, 2014 Makefile Bring LuaSkin headerdoc formatting into line with the specification, … Nov 11, 2015 Podfile add PocketSocket pod May 20, 2016 Podfile.lock add PocketSocket pod May 20, 2016 README.md Add download count shield to README.md because why not Apr 18, 2016 appcast.xml Fix up release notes links Apr 15, 2016 codecov.yml Add codecov.yaml Jun 27, 2016 README.md Hammerspoon What is Hammerspoon? This is a tool for powerful automation of OS X. At its core, Hammerspoon is just a bridge between the operating system and a Lua scripting engine. What gives Hammerspoon its power is a set of extensions that expose specific pieces of system functionality, to the user. With these, you can write Lua scripts to control many aspects of your OS X environment. How do I install it? Download the latest release Drag Hammerspoon.app from your Downloads folder to Applications What next? We have a Getting Started Guide, extensive API docs, a FAQ, a Contribution Guide for developers looking to get involved, and an IRC channel for general chat/support/development (#hammerspoon on Freenode). What is the history of the project? Hammerspoon is a fork of Mjolnir by Steven Degutis. Mjolnir aims to be a very minimal application, with its extensions hosted externally and managed using a Lua package manager. We wanted to provide a more integrated experience. What is the future of the project? Our intentions for Hammerspoon broadly fall into these categories: Ever wider coverage of system APIs in Extensions Tighter integration between extensions Smoother user experience Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Hammerspoon/hammerspoon"	"A powerful, extensible OS X automation tool. A community-maintained fork of."	"true"
"Scriptable by Lua"	"Mjolnir"	"http://www.mjolnir.io/"	"A powerful, extensible OS X automation tool. A community-maintained fork of."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Sam Chordas Work Projects About Menu Sam Chordas Work Projects About StockHawk StockHawk was created as basic starter code for Udacity. It will replace the original Project 3 in the Android Nanodegree.  The purpose of the app is to provide a basic interface that displays some API data. The app uses the Yahoo quotes API to display stock quotes. I also utilized William Chart so students could graph data in some way. The app uses other various libraries to make this a bit easier. The purpose of StockHawk is not to reinvent the wheel, just get a basic app up and running and prove that certain things could be done so that students can get some practice taking a mediocre app and turning it into a production level app.   One neat thing about this app was using GCMTaskService for the first time. I wanted to schedule the app to update every hour so that when students create a widget, they would have fairly recent data. However, I didn't want to write the code for a SyncAdapter and I didn't want to use an AlarmManager. This was a good learning experience for me as well as Udacity students! This code is made for Udacity students to build upon. I built the app out to what we expect from students and so we make the repository private. As a result I can't share the code publicly. My apologies!  Planets I created SchematicPlanets for a Udacity Webcast for Android Nanodegree students. It's a simple sample application built for showing students how to implement the content provider library ""Schematic,"" created by SimonVT. Implementing a content provider from scratch is a useful skill, however, it can be very code intensive. Content provider libraries can be great for simple applications or rapid prototyping and thus I created an example as a guide for implementing this particular library. The app has a list of planets in our solar system. The user can swipe to delete planets (or rather non-planets) from the list. Incase you change your mind the planets aren't officially deleted, but rather archived. This way you can add deleted planets back should decide to do so. UI wasn't a focus in this app so it isn't much to look at.  The code can be found here. Flavors I made Flavors for a webcast on content providers for Udacity students (this was made prior to the webcast on content provider libraries).  Content providers can be tricky to code up from scratch, especially for someone new to Android. However, they are essentially and understanding how they work is really important in my opinion.  Once again, UI was not the focus here. This app is pretty simple, I load up some statically defined data on the Android flavors into a content provider. Then I ask the content resolver for that data and display it in a GridView (this was a double edged sword to also show students how to work with a GridView). If you click one of the flavors, it opens a new Fragment that shows some data found by querying for an individual ID. The unique content URI for that particular spot in content provider is also shown to give an idea of the structure of a content URI.  The code can be found here. Push I built Udacity Push as an internal tool for Udacity. We wanted Nanodegree leaders to be able to source outside information that would be relevant to the Nanodegree students and send them a push. Previously this was not possible because to you needed special access to send pushes and that access also allowed to access lots of other things aside from pushes. It would have been potentially problematic to provide everyone access because there was the possibility that they might mess up the other stuff. Not to mention it was a bit of a pain to set up pushes anyway. I built up this ""Push interface,"" if you will, to provide people access to the push notifications only and also make creating a push a little easier by specifying the information relevant to us. The app has two features, one is to send just a push notification. The other is adding a relevant article or research paper link to the students' news feeds. You can also send a push about the link in conjunction with the item being added to the news feed. I spend most of my time on Android, however, Android is next to useless for our internal tools (for now). Pretty much it's web or nothing. I can't share the code because this is an internal tool but I created the app using Express, JavaSript, and Bootstrap for the UI. Speaking of the UI, it's obviously not that good! I'm not much of a web designer. I try to learn better design practices here and there when I can but it's been low on the list recently. Definitely something I need to work on.  prev / next Back to Work 3 StockHawk 2 Planets 2 Flavors 6 Push"	"null"	"null"	"A powerful, extensible OS X automation tool. A community-maintained fork of."	"true"
"Scriptable by Lua"	"kpie"	"https://github.com/skx/kpie"	"A scripting utility to juggle windows."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"19"	"3"	"4"	"GitHub - skx/kpie: Simple devilspie-like program for window manipulation, with Lua. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 19 Fork 4 skx/kpie Code Issues 1 Pull requests 0 Pulse Graphs Simple devilspie-like program for window manipulation, with Lua. 152 commits 1 branch 6 releases Fetching contributors C 92.8% Lua 4.0% Groff 3.2% C Lua Groff Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show release-0.7 release-0.6 release-0.5 release-0.4 release-0.3 release-0.2 Nothing to show New pull request Latest commit fe18c51 Nov 21, 2015 skx Updated - post-testing with CentOS 7.x + Debian. … This commit introduces a working cautoconf setup which has been tested against Debian Jessie, Wheezy, and CentOS 7.  I hope it works upon openSUSE.  To test it out:          autoreconf --install ; ./configure && make  This updates #14. Permalink Failed to load latest commit information. debian New release - 0.7-1 Dec 9, 2014 m4 Updated - post-testing with CentOS 7.x + Debian. Nov 21, 2015 samples Add support for window_role(). Aug 18, 2014 .gitignore Updated our ignored files. Nov 12, 2015 FAQ.md Fixed spelling errors. Jul 26, 2014 LICENSE Added explicit GPL-2 license. Jul 21, 2014 Makefile.am Added autoconf-related files. Nov 12, 2015 README.md Document the top-level kpie.lua file. Nov 12, 2015 bindings.c Updated to push a string-version, not a numerical one. Nov 11, 2015 bindings.h Add support for window_role(). Aug 18, 2014 configure.ac Updated - post-testing with CentOS 7.x + Debian. Nov 21, 2015 kpie.1 Install manpage for kpie. Jul 26, 2014 kpie.c indented. Jul 26, 2014 kpie.lua Export VERSION and CONFIG to Lua. Jul 21, 2014 README.md Git Repository: http://github.com/skx/kpie Git mirror: http://git.steve.org.uk/skx/kpie KPie KPie is a simple window manipulation tool, modeled after devil's pie, with a Lua-based configuration file. Usage is:  kpie [options] [lua-config-file.lua]  Options are currently limited to: --config   - Explicitly specify a configuration file. --debug    - Show debugging information. --single   - Process each window once, then exit. --version  - Show the version number.  Overview A single Lua configuration file will be parsed and executed for every window on your system, including invisible windows, and windows in different workspaces/virtual-desktops. Unless you're running kpie --single then the configuration file will be invoked for each window that is opened in the future, until you terminate kpie. By default kpie looks for ~/.kpie.lua, but you may choose another file when you start kpie via: $ kpie ~/.config/kpie.lua  As noted the configuration file is Lua with the addition of some window-related primitives. To give you a flavour this is a sample configuration file: -- -- If Xine is launched it should be ""always on top"" -- if ( window_class() == ""xine"" ) then     above() end  -- -- The xlogo program is so cool it should be visible on all -- workspaces -- if ( window_title() == ""xlogo"" ) then     pin() end  The kpie.lua sample configuration file contains this code, as well as some more examples of Lua scripting. You can find more specialized example configuration files included in the samples/ directory. The key thing to understand is that the same configuration file will be invoked for every window on your system, on the basis that you'll limit your actions to specific windows via the matching options. For example if you had a configuration file which read merely ""maximize()"" your desktop would become very odd, as all the windows would be maximized, including your panel(s). Configuration Generator Included within the repository is a sample configuration file samples/dump.lua which is designed to be a helpful starting point if you wish to script the manipulation of your windows. Simply run: $ ./kpie ./samples/dump.lua  This will output chunks of config which you can edit or save: -- Screen width : 1920 -- Screen height: 1080 if ( ( window_title() == ""feeds"" ) and      ( window_class() == ""Pidgin"" ) ) then         xy(0,0)         size(1438,1023 )         workspace(2) end if ( ( window_title() == ""Buddy List"" ) and      ( window_class() == ""Pidgin"" ) ) then      xy(1438,0 )      size(482,1023 )      workspace(2) end  As you can see this has iterated over all existing windows, and shown you their current state - this is perfect if you wish to reproduce a complex layout interactively. Installation You can install binary packages for Debian GNU/Linux from the authors repository: http://packages.steve.org.uk/kpie/ The package will also add an entry to your system-menu at ""System Tools | Preferences | Startup Applications"" If you prefer to build from source you can do so providing you have the dependencies installed. Beyond the necessities, a compiler and make, you'll need: libglib2.0-dev libgtk2.0-dev liblua5.1-0-dev libwnck-dev libx11-dev x11proto-core-dev Upon a Debian GNU/Linux system these may be installed via:   sudo apt-get install libglib2.0-dev libgtk2.0-dev libwnck-dev libx11-dev liblua5.1-0-dev x11proto-core-dev  With the dependencies in-place you should be able to compile the binary by running:  ./configure  make  If you're building from a git checkout, rather than a named release, you'll need to run this instead:  autoreconf --install  ./configure  make  Primitives The following primitives are available: Information window_title - Get the title of the new window. window_type - Get the type of the window. ""WINDOW_NORMAL"", ""WINDOW_TOOLBAR"", etc. window_application - Get the application which created the window. window_class - Get the class of the new window. window_id - Get the ID of the new window. This may be empty. window_pid - Get the PID of the new window. This may be zero on error. window_role - Get the role of the new window, via WM_WINDOW_ROLE. This may return an empty string. screen_height - Get the size of the screen. screen_width - Get the size of the screen. Depth above - Make the window ""always on top"". below - Remove the ""always on top"" flag. Max/Min maximize - Maximize the window. `maximize_horizontally - Maximize horizontally. `maximize_vertically - Maximize vertically. fullscreen - Make the window ""fullscreen"". focus - Focus the window. is_focussed - Is the window focussed? is_maximized - Is the window maximized? is_fullscreen - Is the window fullscreen? Workspace pin - Pin on all workspaces. unpin - Don't pin on all workspaces. Movement xy - Get/Set the X/Y coordinates of a window. size - Get/Set the width/height of a window. Workspaces activate_workspace - Change to the given workspace/virtual-desktop. workspace - Get/set the workspace the window is active on. The return value may be -1 if the window is pinned, or invisible. workspaces - Get/set the number of workspaces/virtual-desktops. Misc kill - Close the window, forcibly. exists - Does the given file/directory exist? See samples/includes.lua pointer - Get/Set the position of the mouse pointer. readdir - Read the contents of a directory. See samples/includes.lua Variables DEBUG will be declared as a boolean false value, unless you launch kpie with the --debug flag. This can be used to control whether you output debugging information. CONFIG will be defined as the path to the configuration file loaded. VERSION will be an integer containing the kpie release. Some of these primitives are documented in the sample-scripts. Steve Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/skx/kpie"	"A scripting utility to juggle windows."	"true"
"Scriptable by Lua"	"lumail"	"https://lumail.org/"	"A console-based mail client, with extensive scripting capabilities."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Lumail - Console Mail Client with Lua scripting Lumail - The console email client API Download Docs FAQ Contact About Lumail is a modern console-based email client developed for GNU/Linux, supporting operations upon local Maildir hierarchies and remote IMAP mail-servers. The screenshots demonstrate what it looks like by default. There are many graphical clients for email, but comparatively few designed solely for console use. With the exception of GNU Emacs none of the console clients I examined had any built in support for scripting with a real language. Lumail has differences from existing projects such as mutt, notmuch and similar alternatives: It is a modal-client so you're always in a particular mode: maildir-mode: Shows you the list of folders. index-mode: Shows you the list of messages. message-mode: Shows you a single message. ... Scripting is supported with a mature language. Lumail, as the name might suggest, uses lua. The Lua API we present is simple, reliable, and self-consistent. Installation & Usage To get started you'll want to : Download and install. Then read the getting started guide. Once you've got the basics setup you might then wish to consult the additional documentation: Using GPG. Using IMAP. Finally if you have questions perhaps the general FAQ, or the technical FAQ will answer them. If not please ask for help. Recent News 8th July 2016 Version 2.7 of Lumail is now available upon our download page. This release further improves the correctness of our drawing code, adds support for GPG, includes a more modular set of configuration files, and finally fixes several small memory leaks. 24th June 2016 Version 2.6 of Lumail is now available upon our download page. This release improves the display-handling, adds some minor bugfixes, and introduces an integrated set of (self)test-cases. Archived news is available for posterity.   Recent Commits © Steve Kemp Site generated by Templer"	"null"	"null"	"A console-based mail client, with extensive scripting capabilities."	"true"
"Scriptable by Lua"	"Textadept"	"http://foicica.com/textadept/"	"Extremely lightweight, customizable, cross-platform editor, written (mostly) in (and scripted by) Lua."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Textadept Textadept A fast, minimalist, and remarkably extensible cross-platform text editor Download (v8.7) Win32 Mac OSX Linux Linux x86_64 Modules Source Other versions PGP signatures Nightly* Builds Win32 Mac OSX Linux Linux x86_64 Modules Support Manual API Mailing list Wiki Quick Reference Please donate or purchase the quick reference to fund continuous development. Features Textadept is a fast, minimalist, and remarkably extensible cross-platform text editor. Fast and Minimalist Textadept’s user interface is sleek and simple. Relentlessly optimized for speed and minimalism over the years, the editor consists of less than 2000 lines of C code and less than 4000 lines of Lua code. Cross Platform Textadept runs on Windows, Mac OSX, Linux, and BSD. It also has a terminal version, which is ideal for work on remote machines.       Remarkably Extensible Textadept is an ideal editor for programmers who want endless extensibility without sacrificing speed or succumbing to code bloat and featuritis. The editor gives you complete control over the entire application using the Lua programming language. Everything from moving the caret to changing menus and key commands on-the-fly to handling core events is possible. Its potential is vast. Multiple Language Support Being a programmer’s editor, Textadept excels at editing source code. It understands the syntax and structure of more than 90 different programming languages and recognizes hundreds of file types. Textadept uses this knowledge to make viewing and editing code faster and easier. It can also compile and run simple source files. Unlimited Split Views Both the graphical version and the terminal version of Textadept support unlimited vertical and horizontal view splitting, even of the same file. Customizable Themes Textadept uses themes to customize its look and feel. It comes with built-in light, dark, and terminal themes.    Code Autocompletion Not only can Textadept autocomplete words in files, but it can also autocomplete symbols for programming languages and display API documentation.   Keyboard Driven Textadept is entirely keyboard driven. The editor defines key bindings for nearly every action. You can easily reassign existing bindings or create new ones. Keys may be chained together or grouped into language-specific keys or key modes. Self Contained Textadept’s binary packages are self-contained and need not be installed. No administrator privilages are required either. Learn More Comprehensive Manual Textadept comes with a comprehensive user manual in the application’s doc/ directory. This manual is also available online. It covers all of Textadept’s main features, including installation, usage, configuration, theming, scripting, and compilation. Exhaustive API Documentation Since Textadept is entirely scriptable with Lua, its API is heavily documented. This documentation is also located in doc/, is available online, and is the ultimate resource on scripting Textadept. (The editor’s Lua internals also provide abundant scripting examples.) Quick Reference This reference contains a wealth of knowledge on how to script and configure Textadept using Lua. It groups the editor’s rich API into a series of tasks in a convenient and easy-to-use manner. It serves as the perfect complement to Textadept’s Manual and API documentation. Try It Yourself Learn even more about Textadept by downloading and trying it out yourself. If you’re not completely satisfied, contact us on the mailing list or e-mail me personally (mitchell.att.foicica.com). You may also fork the project, submit patches, or sponsor a feature. Textadept is 100% open source. Download FAQ · Media · Stats · Technologies · Credits *Warning: nightly builds are untested, may have bugs, and are the absolute cutting-edge versions of Textadept. Do not use them in production, but for testing purposes only. © 2007-2016 Mitchell mitchell.att.foicica.com"	"null"	"null"	"Extremely lightweight, customizable, cross-platform editor, written (mostly) in (and scripted by) Lua."	"true"
"Scriptable by Lua"	"KoReader"	"https://github.com/koreader/koreader"	"An ebook reader application supports PDF, DJVU, EPUB, FB2 and much more, running on Kindle, Kobo, PocketBook and Android devices."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2013"	"195"	"356"	"GitHub - koreader/koreader: An ebook reader application supporting PDF, DjVu, EPUB, FB2 and many more formats, running on Kindle, Kobo, PocketBook, Ubuntu Touch and Android devices Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 195 Star 2,013 Fork 356 koreader/koreader Code Issues 164 Pull requests 0 Wiki Pulse Graphs An ebook reader application supporting PDF, DjVu, EPUB, FB2 and many more formats, running on Kindle, Kobo, PocketBook, Ubuntu Touch and Android devices 4,925 commits 1 branch 166 releases 43 contributors Lua 95.2% Shell 3.6% Other 1.2% Lua Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v2016.07.14-nightly v2016.07.02-nightly v2016.06.24-nightly v2016.06.20-nightly v2016.06.02-nightly v2016.05.29-nightly v2016.05.13-nightly v2016.04.27-nightly v2016.04.13-nightly v2016.03.23-nightly v2016.03.15-nightly v2016.02.27-nightly v2016.02.16-nightly v2016.02.14-nightly v2015.12.13-nightly v2015.11 v2015.11-stable v2015.10.27-nightly v2015.10.24-nightly v2015.10.08-nightly v2015.10.06-nightly v2015.09.17-nightly v2015.09.11-nightly v2015.08.08-nightly v2015.07.17-nightly v2015.06.25-nightly v2015.06.16-nightly v2015.06.08-nightly v2015.06.04-nightly v2015.05.17-nightly v2015.04.30-nightly v2015.04.27-nightly v2015.04.24-nightly v2015.04.16-nightly v2015.04.15-nightly v2015.04.14-nightly v2015.04.07-nightly v2015.04.01-nightly v2015.03.24-nightly v2015.03.22-nightly v2015.03.20-nightly v2015.03.18-nightly v2015.03.17-nightly v2015.03.16-nightly v2015.03.06-nightly v2015.02.12-nightly v2015.02.09-nightly v2015.02.07-nightly v2015.02.02-nightly v2015.01.31-nightly v2015.01.28-pb-test v2015.01.19-nightly v2015.01.15-preview v2014.12.29-nightly v2014.12.22-nightly v2014.12.07-nightly v2014.12.06-nightly v2014.12.03-nightly v2014.12.01-nightly v2014.11.29-nightly v2014.11.28-nightly v2014.11.27-nightly v2014.11.26-nightly v2014.11.25-nightly v2014.11.24-nightly v2014.11.21-nightly v2014.11.18-nightly v2014.11.17-nightly v2014.11.14-nightly v2014.11.13-nightly v2014.11.12-nightly v2014.11.11-nightly v2014.11.10-nightly v2014.11.07-nightly v2014.11 v2014.11-stable v2014.10.31-nightly v2014.10.30-nightly v2014.10.29-nightly v2014.10.28-nightly v2014.10.24-nightly v2014.10.22-nightly v2014.10.20-nightly v2014.10.15-nightly v2014.10.14-nightly v2014.10.08-nightly v2014.10.05-nightly v2014.10.03-nightly v2014.09.29-nightly v2014.09.14-nightly v2014.09.11-nightly v2014.08.29-nightly v2014.08.28-nightly v2014.08.27-nightly v2014.08.24-nightly v2014.08.23-nightly v2014.08.21-nightly v2014.08.20-nightly v2014.08.13-nightly v2014.08.12-nightly Nothing to show New pull request Latest commit 95e391d Jul 15, 2016 Frenzie committed on GitHub Merge pull request #2158 from chrox/djvu_stats … book reading statistics for djvu documents Permalink Failed to load latest commit information. .ci chore: fix some of the luacheck errors Jul 12, 2016 .github Create ISSUE_TEMPLATE.md Feb 18, 2016 base @ f52fbec feat: add network management UI for kobo Jul 11, 2016 doc doc: Event page Mar 12, 2016 frontend book reading statistics for djvu documents Jul 15, 2016 l10n remove template pot and translated po files in the main repo Aug 26, 2014 platform Support the White Kindle PW3 & the Kindle Oasis. Jul 9, 2016 plugins book reading statistics for djvu documents Jul 15, 2016 resources feat: add network management UI for kobo Jul 12, 2016 spec/unit feat: add network management UI for kobo Jul 12, 2016 test @ 851fbdd test: add epub-conform suit Jun 27, 2016 utils feat: add network management UI for kobo Jul 12, 2016 .busted Travis update Aug 24, 2015 .editorconfig experimental port to Mac OSX Apr 22, 2016 .gitignore ignore kobo build May 26, 2016 .gitmodules test: add epub-conform suit Jun 27, 2016 .luacheckrc uimanager(refactor): replace autosuspend if check with noop Mar 29, 2016 .luacov wrap computation intensive functions in hook free env when makeing co… Dec 3, 2014 .travis.yml build: fix doc generation Feb 23, 2016 COPYING switch license to AGPLv3 Mar 23, 2014 Makefile fix #2119 by updating libSDL2.so and fix Evernote Plugin Jul 5, 2016 README.md automatically adjust ev time for kobo touch May 23, 2016 datastorage.lua feat: add network management UI for kobo Jul 12, 2016 defaults.lua PDF free zoom mode revisit Jun 15, 2016 kodev dbg: prefix log with datetime Jul 10, 2016 reader.lua luasettings: new module to handle genric settings Jul 10, 2016 README.md KOReader KOReader is a document viewer application, originally created for Kindle e-ink readers. It currently runs on Kindle, Kobo, PocketBook, Ubuntu Touch and Android (2.3+) devices. Developers can also run KOReader emulator for development purpose on desktop PC with Linux and Windows and Mac OSX (experimental for now). Main features for users supports multi-format documents including: paged fixed-layout formats: PDF, DjVu and CBZ reflowable e-book formats: ePub, fb2, mobi, doc, chm and plain text scanned PDF/DjVu documents can also be reflowed with built-in K2pdfopt use StarDict dictionaries / Wikipedia to lookup words highlights can be exported to Evernote cloud account highly customizable reader view and typeset setting arbitrary page margins / line space choosing external fonts and styles built-in multi-lingual hyphenation dictionaries supports adding custom online OPDS catalogs calibre integration search calibre metadata on your koreader device send ebooks from calibre library to your koreader device wirelessly browser calibre library and download ebooks via calibre OPDS server can share ebooks with other koreader devices wirelessly various optimizations for e-ink devices paginated menus without animation adjustable text contrast multi-lingual user interface online Over-The-Air software update Highlights for developers frontend written in Lua scripting language running on multi-platform with only one code-base maintained developing koreader in any editor without compilation high runtime efficiency by LuaJIT acceleration light-weight self-contained widget toolkit with small memory footprint extensible with plugin system interfaced backends for documents parsing and rendering high quality document backend libraries like MuPDF, DjvuLibre and CREngine interacting with frontend via LuaJIT FFI for best performence in active development contributed by developers around the world continuous integration with Travis CI with unit tests, static analysis and code coverage test automatic release of nightly builds free as in free speech licensed under Affero GPL v3 all dependencies are free software Check out the KOReader wiki to learn more about this project. Building Prerequisites These instructions for how to get and compile the source are intended for a Linux OS. Windows users are suggested to develop in a Linux VM or use Wubi. To get and compile the source you must have patch, wget, unzip, git, cmake and luarocks installed, as well as a version of autoconf greater than 2.64. You also need nasm and of course a compiler like gcc or clang. If you want to cross-compile for other architectures, you need a proper cross-compile toolchain. Your GCC should be at least of version 4.7 for both native and cross compiling. Users of Debian and Ubuntu can install the required packages using: sudo apt-get install build-essential git patch wget unzip \ gettext autoconf cmake libtool nasm luarocks \ libssl-dev libffi-dev libsdl2-dev libc6-dev-i386 linux-libc-dev:i386  Note that the linux-libc-dev:i386 package is only necessary for x86_64 machines. Cross compile toolchains are available for Ubuntu users through these commands: # for Kindle sudo apt-get install gcc-arm-linux-gnueabi g++-arm-linux-gnueabi # for Kobo and Ubuntu touch sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf # for Win32 sudo apt-get install gcc-mingw-w64-i686 g++-mingw-w64-i686  Packages pkg-config-arm-linux-gnueabihf and pkg-config-arm-linux-gnueabi may block you to build for Kobo or Kindle, remove them if you got ld error, /usr/lib/gcc-cross/arm-linux-gnueabihf/4.8/../../../../arm-linux-gnueabihf/bin/ ld: cannot find -lglib-2.0 Mac OSX users may need to install these tools: brew install nasm binutils libtool autoconf automake sdl2  A recent version of Android SDK/NDK and ant are needed in order to build KOReader for Android devices. sudo apt-get install ant  In order to build KOReader package for Ubuntu Touch, the click package management tool is needed, Ubuntu users can install it with: sudo apt-get install click  You might also need SDL library packages if you want to compile and run KOReader on Linux PC. Fedora users can install SDL and SDL-devel package. Ubuntu users probably need to install libsdl2-dev package: Getting the source git clone https://github.com/koreader/koreader.git cd koreader && ./kodev fetch-thirdparty  Building, Running and Testing For EReader devices (kindle, kobo, pocketbook, ubuntu-touch) To build installable package for Kindle: ./kodev release kindle  To build installable package for Kobo: ./kodev release kobo  To build installable package for PocketBook: ./kodev release pocketbook  To build installable package for Ubuntu Touch ./kodev release ubuntu-touch  You may checkout our nightlybuild script to see how to build a package from scratch. For Android devices Make sure the ""android"" and ""ndk-build"" tools are in your PATH environment variable and the NDK variable points to the root directory of the Android NDK. Then, run this command to build installable package for Android: ./kodev release android  For emulating KOReader on Linux, Windows and Mac OSX To build an emulator on current Linux or OSX machine: ./kodev build  If you want to compile the emulator for Windows run: ./kodev build win32  To run KOReader on your developing machine: ./kodev run  To run unit tests: ./kodev test base ./kodev test front  NOTE: Extra dependencies for tests: busted and ansicolors from luarocks To run Lua static analysis: make static-check  NOTE: Extra dependencies for tests: luacheck from luarocks You may need to checkout the travis config file to setup up a proper testing environment. Briefly, you need to install luarocks and then install busted with luarocks. The ""eng"" language data file for tesseract-ocr is also need to test OCR functionality. Finally, make sure that luajit in your system is at least of version 2.0.2. You can also specify size of emulator's screen via environment variables. For more information, please refer to koreader-base's README. To use your own koreader-base repo instead of the default one change KOR_BASE environment variable: make KOR_BASE=../koreader-base  This will be handy if you are developing koreader-base and want to test your modifications with kroeader frontend. NOTE: only support relative path for now. Translation Please refer to l10n's README to grab the latest translations from the KOReader project on Transifex with this command: make po  If your language is not listed on the Transifex project, please don't hesitate to send a language request here. Variables in translation Some strings contain variables that should remain unaltered in translation. For example: The title of the book is %1 and its author is %2. This might be displayed as: The title of the book is The Republic and its author is Plato. To aid localization the variables may be freely positioned: De auteur van het boek is %2 en de titel is %1. That would result in: De auteur van het boek is Plato en de titel is The Republic. Use ccache Ccache can speed up recompilation by caching previous compilations and detecting when the same compilation is being done again. In other words, it will decrease build time when the source have been built. Ccache support has been added to KOReader's build system. Before using it, you need to install a ccache in your system. in Ubuntu use:sudo apt-get install ccache in Fedora use:sudo yum install ccache install from source: get latest ccache source from http://ccache.samba.org/download.html unarchieve the source package in a directory cd to that directory and use:./configure && make && sudo make install to disable ccache, use export USE_NO_CCACHE=1 before make. for more detail about ccache. visit: http://ccache.samba.org Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/koreader/koreader"	"An ebook reader application supports PDF, DJVU, EPUB, FB2 and much more, running on Kindle, Kobo, PocketBook and Android devices."	"true"
"Miscellaneous"	"MoonScript"	"http://moonscript.org/"	"Moonscript is a dynamic scripting language that compiles to Lua. It reduces verbosity and provides a rich set of features like comprehensions and classes. Its author calls it 'CoffeeScript for Lua'."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1278"	"71"	"109"	"GitHub - leafo/moonscript: A language that compiles to Lua Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 71 Star 1,278 Fork 109 leafo/moonscript Code Issues 93 Pull requests 6 Wiki Pulse Graphs 🌙 A language that compiles to Lua http://moonscript.org 688 commits 9 branches 13 releases Fetching contributors Lua 59.0% MoonScript 39.8% Other 1.2% Lua MoonScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.2.0-web binaries leafo/lulpeg leafo/relative-parent line-rewriter local master ref tblcmp Nothing to show win32-v0.4.0 v0.4.0 v0.3.2 v0.3.1 v0.3.0 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.3-2 v0.2.2 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 2d96e11 Jul 13, 2016 leafo use most recent busted fixes #278 Permalink Failed to load latest commit information. .travis fix travis Dec 27, 2015 bin move polling watcher Apr 13, 2016 docs docs/api.md: Fix typo (finder => finer) (#268) Apr 30, 2016 moon spec fixes for greater versions of lua Dec 6, 2015 moonscript moonscript/cmd/args.moon: fix `unpack()` Lua 5.2+ (#269) May 2, 2016 spec parse spec Apr 16, 2016 .travis.yml use most recent busted fixes #278 Jul 13, 2016 CHANGELOG.md more changelog updates Dec 6, 2015 Makefile solve LUA_PATH overwrite problem Mar 31, 2016 README.md remove scite extras, link to edit plugins fixes #198 Dec 28, 2015 gen_rockspec.sh upate rockspec, add script Nov 28, 2012 moon.lua let moon be included from current dir Jun 20, 2013 moonscript-dev-1.rockspec move polling watcher Apr 14, 2016 moonscript.lua update load functions for 5.2 Jan 2, 2013 thoughts update thoughts Dec 30, 2013 README.md MoonScript MoonScript is a programmer friendly language that compiles into Lua. It gives you the power of the fastest scripting language combined with a rich set of features. It runs on Lua 5.1 and above, including alternative runtimes like LuaJIT. See http://moonscript.org. Online demo/compiler at http://moonscript.org/compiler. Running Tests Tests are written in MoonScript and use Busted. In order to run the tests you must have MoonScript installed. To run tests, execute from the root directory: busted Writing specs is a bit more complicated. Check out the spec writing guide. Editor Support Vim Textadept Sublime/Textmate License (MIT) Copyright (C) 2015 by Leaf Corcoran Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/leafo/moonscript"	"Moonscript is a dynamic scripting language that compiles to Lua. It reduces verbosity and provides a rich set of features like comprehensions and classes. Its author calls it 'CoffeeScript for Lua'."	"true"
"Miscellaneous"	"sitegen"	"http://leafo.net/sitegen/"	"A static site generator which uses MoonScript and supports HTML and Markdown, page grouping, and plugins."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"38"	"3"	"4"	"GitHub - leafo/sitegen: static site generator in MoonScript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 38 Fork 4 leafo/sitegen Code Issues 1 Pull requests 0 Pulse Graphs static site generator in MoonScript http://leafo.net/sitegen/ 263 commits 1 branch 1 release Fetching contributors Lua 55.9% MoonScript 40.1% Shell 1.8% CSS 1.5% Other 0.7% Lua MoonScript Shell CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show pre-refactor Nothing to show New pull request Latest commit 4c09fc2 Jun 9, 2016 leafo run latest busted on travis Permalink Failed to load latest commit information. .travis bin doc homepage sitegen spec .gitignore .travis.yml Makefile README.md lint_config.lua lint_config.moon sitegen-dev-1.rockspec sitegen.moon README.md Sitegen A static site generator written in MoonScript. http://leafo.net/sitegen/ Sites built with sitegen http://leafo.net http://moonscript.org http://leafo.net/lapis http://leafo.net/sticky-kit/ http://leafo.net/scssphp http://leafo.net/lessphp http://leafo.net/aroma/ http://leafo.net/lua-enet Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/leafo/sitegen"	"A static site generator which uses MoonScript and supports HTML and Markdown, page grouping, and plugins."	"true"
"Talks & Slides"	"Roberto's Talks"	"http://www.inf.puc-rio.br/~roberto/talks/index.html"	"History of talks given by Lua's chief architect, with slides for each."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Roberto Ierusalimschy - Talks Roberto Ierusalimschy's Talks Testing Lua. LabLua Seminars, Dec 05, 2014. Rio de Janeiro, Brazil. Integers in Lua 5.3. Lua Workshop 2014, Sep 13, 2014. Moscow, Russia. Lua versus Javascript: Why do we need multiple languages?. WWW 2013 Developers Track, Invited Talk. May 15, 2013. (abstract) Small is Beautiful: the Design of Lua. PPL Seminar. March 15, 2012. Stanford, CA. (abstract) What About Lua. Rearden. March 15, 2012. Foster City, CA. (abstract) The Disembedding of a Brazilian Software. 2011-2012 CLAS Lecture Series, March 6, 2012. Center for Latin American Studies, Stanford, CA. (abstract) Some Thorny Points in the Design of Lua: a personal perspective. Lua Workshop, 2011, Frick, Switzerland. The Novelties of Lua 5.2. Lua Workshop, 2011, Frick, Switzerland. Small is Beautiful: The design of Lua. EE Computer Systems Colloquium, 2010, Stanford, CA. (video) A Evolução de Lua. 4o Encontro Brasileiro da Comunidade Python, Pyconbrasil, 2008, Rio de Janeiro. About Lua. 28th Annual Meeting of the TeX Users Group, 2007, San Diego, CA. (video) LPEG: a new approach to pattern matching. 28th Annual Meeting of the TeX Users Group, 2007, San Diego, CA. (photos) The Evolution of Lua. HOPL III, 2007, San Diego, CA. A Linguagem Lua. Semana de Eletrônica e Computação 2007, UFRJ. The Evolution of Lua. 2nd Lua Workshop, 2006. (video) The Novelties of Lua 5.1. 1st Lua Workshop, 2005. The Implementation of Lua 5. 1st Lua Workshop, 2005. Revisitando Co-rotinas. 2004. A Linguagem Lua. IV Forum Internacional Software Livre, Porto Alegre, Brazil, 2003. The Virtual Machine of Lua 5.0. Lightweight Languages 2003, Cambridge, MA, 2003. A Evolução da Linguagem Lua. A Implementação de Lua 5.0."	"null"	"null"	"History of talks given by Lua's chief architect, with slides for each."	"true"
"Talks & Slides"	"Lua Workshop Talks"	"http://www.lua.org/wshop14.html#abstracts"	"High-quality talks are given at each ~annual Lua Workshop, and a history of them is online, slides included."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Lua: workshop 2014 Workshop 2014 registration · program · venue · visa · travel · accommodation · organization · participants · abstracts · tweets · instagram · videos The Lua Workshop 2014 will be held in Moscow, Russia, on September 13–14, 2014. As in previous workshops (2005, 2006, 2008, 2009, 2011, 2012, 2013), the main goal of the workshop is to allow the Lua community to get together and meet in person and talk about the Lua language, its uses, and its implementation. The workshop is open to everyone interested in Lua. There is no registration fee but participants are required to register because space is limited. Arrangements for lunches, coffee-breaks, and dinners depend on the number of attendees and will be announced later. The spoken language of the workshop is English. Translation of talks to Russian is not planned but translation of the after-talk questions from Russian-speaking attendees will be provided. Please make your own visa, travel, and accommodation arrangements. Contact us if you need help or have special requirements. Registration Registrations are now closed. Program We shall have a plenary talk by Roberto Ierusalimschy (Lua's chief architect) and several contributed talks. There will also be plenty of time for getting together and chatting about Lua. If you'd like to speak at the workshop, please send a tentative title and a short abstract to the organizers with your registration. The final program is shown below but it is still subject to last-minute changes. Saturday, Sep 13th 10:00–10:50 Integers in Lua 5.3 Roberto Ierusalimschy 11:00–11:50 What's new in LuaRocks Hisham Muhammad 12:00–12:50 Lua as a script language for industrial process design and optimisation with energy integration Min-Jung Yoo 13:00–13:50 LuaOsmose: a Lua based framework to design and analysis integrated energy system Renaud Kern 14:00–15:00 lunch 15:00–15:50 A little code goes a long way — cross-platform game development with Lua Ivan Beliy 16:00–16:50 Game development with Corona SDK and Lua Sergey Lalov 17:00–17:50 Typed Lua: an optional type system for Lua Andre Murbach Maidl 18:00–18:30 Lua pitfalls Dmitry Kotelnikov 18:40–19:30 A metaprogramming compiler for interactive ebooks (remote talk) Enrico Colombini Sunday, Sep 14th 10:00–10:50 Lua as the common language for the internet of things André Riesberg 11:00–11:50 Homemade load balancing with nginx + Lua Andrey Kononov 12:00–12:50 Lua as business logic language in high load application Ilya Martynov 13:00–13:50 Sailor — a web MVC framework in Lua Etiene Dalcol 14:00–15:00 lunch 15:00–15:50 Lua in Low-Level Programming Javier Guerra Giraldez 16:00–16:50 lubyk, a set of Lua libraries for live arts Gaspard Bucher 17:00–17:50 Lua binding for C++11 Nikolay Zykov 18:00–18:50 Q&A session Venue The workshop will be held at Mail.Ru Group office building Leningradsky prospekt 39, corp. 79 Moscow See a map. Visa Make sure to check whether you need a visa to enter Russia. Getting a visa may take some time. It is better to start early. Way to Russia seems to be a good guide on getting visas. (That guide and visa company are not endorsed by the organizers.) Invitation letters for the workshop attendees and speakers are available from the organizers, upon request. Please allow for some time to get them made. Travel There are three international airports in Moscow. Depending on where you are, there are good chances that you'll be able to arrange a direct flight. If your flight arrives from (approximately) 04:00 AM to 00:00 AM, the best way to get to the city is to take a fast and comfortable Aeroexpress express train (trains from 05:00 AM to 01:00 AM, depending on the airport). Please double-check the schedule. If you arrive at night, the best way is to arrange a taxi. Please use the official airport taxi service. Avoid private drivers. You may also use online or mobile taxi services, like Wheely, GetTaxi, or Yandex.Taxi (but using Economic class cars with Yandex.Taxi is not recommended). Your hotel may also provide an airport transfer service, free of charge in some hotels. Make sure to ask them. Once in the city, the best way to get around is by the extensive Moscow Subway network. Car traffic in Moscow can be very congested, especially on business days. If you rent a car or hire a taxi, you may spend a significant time in a traffic jam. At night and on weekends, the traffic is usually bearable, but keep in mind that suburban traffic (for instance, to and from an airport) is often very bad on weekends with good weather. Accommodation There are a great many hotels and hostels to pick from in Moscow. Use a service like booking.com to find one you like. The workshop venue is within five minutes of walk from the Moscow subway station named ""Aeroport"" (even though there is no actual airport there). The Moscow subway network is extensive and reliable (and very beautiful) and usually not too jammed with passengers on weekends. You may use this service to find out approximate travel times from your hotel. Organization The workshop is organized by Alexander Gladysh and the Lua team, and the sponsors below. The organizers can be contacted at lua.workshop@gmail.com. Sponsored by                     Participants Sergey Lalov (Spiral Code Studio) Min-Jung Yoo (EPFL) Michel Martens (openredis) Vadim Zborovskii (SRC RF TRINITI) Volodymyr Bezobiuk (ITP Soft) Roberto Ierusalimschy (PUC-Rio) Alexander Gladysh (LogicEditor) Alexander Altshuler (LogicEditor) Yuriy Metelev (Mail.Ru Group) Dmitry Shveenkov (Mail.Ru Group) Alexander Panfilov (Mail.Ru Group) Aleksey Ischenko (Mail.Ru Group) Dmitry Isaikin (Mail.Ru Group) Ilyas Guseynov (Mail.Ru Group) Anvar Allagulov (IPONWEB) Mikhail Rotfort (Mail.Ru Group) Denis Belyaev (Mail.Ru Group) Konstantin Osipov (tarantool.org) Pavel Klepinin (Mail.Ru Group) Nikita Krivosheev (Mail.Ru Group) Valery Sorokin (RDtex) Ilya Martynov (IPONWEB) Ivan Remen (Mail.Ru Group) Kirill Dolgopolov (8bit Group) Mons Anderson (Mail.Ru Group) Serge Velikanov (8bit Group) Dmitry Kotelnikov (IPONWEB) Natalya Savenkova Igor Sysoev (NGINX) Andrey Sinitsyn (Ratengoods.com) Vladimir Iofik (IPONWEB) Maxim Pugachev (IPONWEB) Aleksey Akulovich (Embria) Marsel Taipov (IPONWEB) Semen Lobov Veniamin Gvozdikov (CloudLab) Dinar Sabitov (Mail.Ru Group) Alexey Melnichuk (IntelCom-TG) Alexey Voskov (Lomonosov Moscow State University) Vladimir Evrasenkov (IPONWEB) Renaud Kern (Teti) Dmitry Smal (Mail.Ru Group) Ivan Panchenko (Mail.Ru Group) Dmitry Kargin (SyboTech) Abbas Majeed (Swenggco Software) Anriett Gladysh (LogicEditor) Vladislav Golubev (LANBilling) Alexey Tokar (Delta Systems) Bibin Sergey (Digital Design) Stanislav Sviridenko (ZAO Argumenti i Fakti) Alexey Kornev (SSJ ltd) Pavel Shchedukhin (DeBIA Limited) Evgenii Manaev (WeLike) Vasily Kotov (PROFI) Taras Shapovalov (Bright Computing) Max Vorontsov (R-Style) Konstantin Burkalev (ZAO Gollard) Ivan Alekseev (Autonomous systems) Nikita Grishaev Nikolay Kim Misha Bashkirov (AT Consulting) Mikhail Epikhin (Yandex) Aleksander Balakshin (CowBell GameDev) Igor Ehrlich (IPONWEB) Lev Leontiev (IPONWEB) Eugene Bolotin (Yandex) Pyotr Besedovskiy (VNIIAS) Ilya Malinowskiy (LH lim) Yury Khalyavin (IPONWEB) Iliya Tikhonov Nikita Elagin (IPONWEB) Roman Bystritsky (Mobisoft LLC) Arman Musaev Filip Itskov (MedITGroup) Dmitry Krylov (IPONWEB) Alexey Kopytov (InfoTeCS) Dmitry Ryabokon (InfoTeCS) Evgenia Mushanov (Kronos-Inform) Koss Rayndson Vadim Babaev (Badoo) Ilja Belov (Eagle Dynamics) Nikita Selednikov (Z-Wave.Me) Sergey Tripolev (GTA-Multiplayer.com) Boris Ryutin Andrey Masunov (DB) Vitaliy Zolotorevskiy Aleksandr Pavlov (NetCracker) Alexander Zhabrev (Soinland) Sergey Perelygin Andrey Kirillov (Mail.Ru Group) David Davitlidze (Next-2) Vasilii Artemev (Wagado) Vladislav Levitskiy (MIS&S) Aydar Biktimirov (ABBYY) Anton Atomanenko (Qiwi) Dmitry Frantsev (Federal state unitary enterprise EZAN) Andrey Karpov (Federal state unitary enterprise EZAN) Iaroslav Popov (private web developer) Emelyanov Timofey (OOO) Andrey Melnikov (One Agile) Andrey Olishchuk (Intellectual Systems) Aleksey (TNL) Pëtr Myazin (Forward Exp Limited) Denis Rakcheyev Vladimir Stebunov (Agilefusion) Oleg Kravchuk (Amadeus Ukraine) Yulia Chistova Timur Kashafutdinov (Buka Development) Stas Schetinnikov (Mail.Ru Group) Sergey Morozov (Intervale, CJSC) Dmitry Kozlovtsev Sergey Nikitin (3Detection Labs) Igor Kukushkin (ASTDS) Artem Pleschenko Vitaly Chudovsky (ArconaGames) Ilya Soin (Soinland) Galanin Mikhail (Mail.Ru Group) Kopa-Ovdienko Vladimir (Game Insight) Petr Kovesnikov (Mail.Ru Group) Alexander Korepanov (IPONWEB) Petr Kohts (IPONWEB) Pavel Vinogradov (IPONWEB) Vasiliy Sabadazh (Ivideon) Alexander Sidyakin (Gollard) Andrew Irushkin (Cinimex) Artem Serebryakov (Mail.Ru Group) Natalia Serebryakova (MegaFon) Artem Gavrilov (labirint) Ilya Irkhin Ilya Azbel (IPONWEB) Sergey Gorbunov (Game Insight) Pavel Lakosnikov (Game Insight) Alexey Kopytov (Percona) Alexei Lyubimov (Neolant) Taras Remez (Telix) Andrey Bronin (Kaspersky Lab) Maxim Molchanov (Intellect telecom) Anatoly Kamchatnov (MTUCI) Pavel Safronov (Yandex) Kirill A. Shabordin (Synqera LLC) Allien Po (Zillion Whales) Eugene Shevkunov (IPONWEB) Alyona Bibina (Nival) Evgeny Proydakov (OOO Wicron) Ekaterina Kharitonova (Kaspersky Lab) Sergey Vasyunin (Slot Constructor LLC) Evgeny Bashurin (Southwest State University) Igor Ovchinnikov (IPONWEB) Ilya Brodsky (IPONWEB) Michael Meschansky (Mail.Ru Group) Mikhail Dmitriev (ZAO Infowatch) Alexey Fokin Alexander Zubkov (Lomonosov Moscow State University) Vladimir Lebedev (Sberbank, Russia) Maria Vorontsova (freelance) Ruslan Gustomyasov (adfox) Andrey Yashchenko (ITKCON.COM) Nikolay Zykov (TSNIImash) Enrico Colombini (freelance author) André Riesberg (Ing. Büro Riesberg GmbH and NOGS GmbH) Carsten Möllers (NOGS GmbH) Vasiliy Yanushevich (CloudTeam) Yuri Barbashov (CloudTeam) Sabyrzhan Tasbolatov (freelancer) Konstantin Novikov Nickolay Antsiferov Roman Dedenok (Kaspersky Lab) Ekaterina Ovcharenko (Kaspersky Lab) Kirill Zhuravlev (ShoppyBoom) Timir Nureev (Detectum) Vladimir Ageykin (Alunisol) Sergey Sobko (RosBusinessConsulting) Maurice Courtois Javier Guerra G. (Snabb GmbH) Gaspard Bucher (teti) Michael Liskov (Delin) Nguyen Tuan Vet (ZAO ""Sinimeks Informatics"") Vasily Gnoevoy (RTEC) Dmitriy Polyanin (Mail.Ru Group) Sergei Chernousov Evgeniy Mironov (Luxoft) Oleg Popenkov (Sinderium) Sergei Kiselev (Motorola Solutions) Olga Slepova (Delin) Nail Shiran (Sinderium) Artem Bernev (Multi Theft Auto Community) Andre Murbach Maidl (PUC-Rio) Nikolay Ryshkov (OAO PO TEK) Tomi Tavela Aapo Talvensaari (Talvensaari Solutions) Toudeka Kossi (ONG LUMIERE PLUS) Darwalls Kouakou Pele (ONG LUMIERE PLUS) Dovi Kwassi (ONG LUMIERE PLUS) Maria Dolgikh (Dubna University) Dmitry Potapov (LogicEditor) Vitaliy Zheleznov (LogicEditor) Vladimir Fedin (LogicEditor) Oksana Kozlova (LogicEditor) Vladimir Dronnikov (LogicEditor) Aleksandr Krivopustov (Delovye Linii) Simon Kataev (avito.ru) Michael Monashev (Beon.ru) Nikolay Meleshenko (Mail.Ru Group) Ilya Polev Dmitry Bezmelnitsin Hisham Muhammad (LuaRocks and PUC-Rio) Andrey Skryabin (PHORM) Mikhail Koltsov (PHORM) Vladislav Nezhdanov (IPONWEB) Kirill Dotcenko (Southwest State University) Igor Groshev (Total Bird Corp.) Shamil Saitov (ZAO InfoWatch) Alexander Rzhevskiy (Sportmaster) Vladislav Balashov Ilya Chesnokov (PerlJobs.Ru) Alexander Davydov (IPONWEB) Sergey Palitsyn (SyboTech) Ivan Beliy (Marmalade LLC) Oleg Stolonogov (IPONWEB) Dovjik Svetozar Aleksey Zakhozhiy (Mail.Ru Group) Nikolay Alekseev (Mail.Ru Group) Yuriy Vostrikov (Mail.Ru Group) Eugine Blikh (Mail.Ru, Tarantool) Sergey Yershov (Mail.Ru Group) Artem Gurevich (Mail.Ru Group) Alexander Laptev (GMCS) Yurii Sokolov (Mail.Ru Group) Oleg Tsarev (Mail.Ru Group) Roman Tsisyk (Mail.Ru Group) Nikolay Popesku (8bit Group) Evgeniy Shadrin (Mail.Ru Group) Eugene Soldatov (Mail.ru Group) Zlata Besedovskaya Michael Kuryshev Alexander Orlovskiy (sports.ru) Vasily Kulikov Abstracts Integers in Lua 5.3 slides video Roberto Ierusalimschy (PUC-Rio) In this talk we will discuss why and how Lua 5.3 will bring integer numbers. What's new in LuaRocks slides video Hisham Muhammad (LuaRocks and PUC-Rio) This talk will discuss the latest developments in the world of LuaRocks, the package manager for Lua modules. It will start by introducing the LuaRocks tool, for those who are not familiar with it. Then, I will present what has changed in this past year: the move to a open repository, automation of the upload process and the latest efforts in making the tool more flexible. A revision of the format for specification files (rockspecs) has been long overdue, and in this talk we'll discuss the changes needed to make the format fully extensible. Lua as a script language for industrial process design and optimisation with energy integration slides video Min-Jung Yoo (EPFL) Currently we are developing an open source platform for Energy Systems Integration for industrial processes using Lua. The purpose of the project is to provide a generic modeling and optimization platform for industrial process integration and their optimization in terms of energy efficiencies and environmental issues. Already at our laboratory, there was a platform, developed on MatLab, for the purpose of Energy Integration. By developing a new generation of Energy Systems Integration platform in Lua, we are targeting the range of integration towards GIS Data integration and LCA issues. The presentation will mainly concern our project content and also our challenge in launching a new doctoral course in Lua. LuaOsmose: a Lua based framework to design and analysis integrated energy system slides video Renaud Kern (EPFL) This talk will focus on technical aspects of building a complete Lua framework for scientific users with no or few programming skills. We will cover the strengths of Lua in this project such as, small footprint, speed, painless DSL, quick prototyping, glue language with other system components. We will also discuss some of the weaknesses that we've encountered and how we solved them. A metaprogramming compiler for interactive ebooks slides video Enrico Colombini (freelance author) The Medusa compiler takes a book source including Lua code, e.g. for puzzles or exercises, and generates a (possibly very large) set of immutable hyperlinked pages. This 'printed once and for all' set of pages mimicks a runtime program behaving like the original code; the author can thus give the impression of complex dynamic behaviour (similar to the logic in modern graphic adventure games) in a static ebook, printed book or static Web site. Some topics of the talk are: From ancient gamebooks to static ebooks: how to represent variables and state. From an old runtime Javascript framework (Idra) to a metaprogramming Lua compiler (Medusa). Compiler structure and design choices; using Lua environments to efficiently handle page states. Lua as the common language for the internet of things slides video André Riesberg (Ing. Büro Riesberg GmbH and NOGS GmbH) The talk is about how to make smart objects really smart. It displays an approach of dynamic coding as a communication principle. The report proposes a new IoT framework, called Nogs, which does not only help to simplify communication but also addresses various challenges of embedded software development. Lua in low-level programming slides video Javier Guerra Giraldez (Snabb GmbH) Snabb Switch is an unusual project in many ways, over 90% written in Lua, it has very tight performance goals, it's own 10Gbit Ethernet driver, and deep collaboration with virtual machine networking. This talk first presents the niche, goals and overall structure of Snabb Switch, then shares some of the lessons learned to make most of LuaJIT: how the FFI makes low level programming possible, how the performance goals were met and where the dynamic nature of Lua was a challenge and where it wasn't. lubyk, a set of Lua libraries for live arts slides video Gaspard Bucher (teti) Using Lua for event scheduling, live coding, midi transformation, 3D simulation, OpenGL shaders, etc. Typed Lua: an optional type system for Lua slides video Andre Murbach Maidl (PUC-Rio) Dynamically typed languages such as Lua trade flexibility and ease of use for safety, while statically typed languages prioritize the early detection of bugs, and provide a better framework for structuring large programs. The idea of optional typing is to combine the two approaches in the same language: the programmer can begin the development with dynamic types, and migrate to static types as the program matures. The challenge is to design a type system that feels natural to the programmer that is used to programming in a dynamic language. This talk presents the initial design of Typed Lua, an optionally-typed extension to Lua, and through code examples shows how Typed Lua handles some of the idioms that Lua programmers are used to, bringing static type safety to these idioms. Game development with Corona SDK and Lua slides video Sergey Lalov (Spiral Code Studio) Lua is often used as an extension for games written in C/C++ or other ""lower level"" language, however now some game engines allow developing entirely in Lua. Corona SDK is one of such frameworks. This approach has proven to be fast to develop, clean to read and easy to maintain with almost no performance drawback. From this talk you will know more about Lua usage for game development, how to write clean code and make the best of Lua. Lua as business logic language in high load application slides video Ilya Martynov (IPONWEB) This report covers our experience building custom HTTP web server used for the delivery of internet advertising. The application design has as one goals finding the right balance between high performance and ease of development. To achieve this goal we are using Lua as a business logic scripting language embedded into C++ application. The report tries to explain how and why we use Lua and how the choice of Lua affects architecture of the application. Lua pitfalls slides video Dmitry Kotelnikov (IPONWEB) This report is about various pitfalls somehow related to Lua. We know them firsthand because dozen of our developers use Lua to implement business logic. Even obvious traps may hit the wallet and the psyche. Additionally possible workarounds will be given. The report will contain a list of peculiarities of the Lua, missed that you can get a bug. Mainly this will be well-known things, such as nil in the table or global variables. Everything I tell you is not a revelation. All this can be seen in the pages of documentation, on the internet or learn from your colleagues. But for many it's just knowledge, not experience. The most reliable way to learn not to make mistakes is to make every mistake at least once. Preferably with serious consequences -) And for most of the knowledge we really had to pay. So for us it is truly an experience. I will try to share our experience with you, and I hope that these traps will cost you less. Lua binding for C++11 slides video Nikolay Zykov (TSNIImash) An open-source library that uses C++11-powered template metaprogramming to create low-overhead object-oriented Lua binding. It provides automatic stack management, natural-form expressions including calls and indexation, seamless value traversal, full support for multiple value returns and automatic function wrapping. Homemade load balancing with nginx + Lua slides video Andrey Kononov and Anton Shcherbinin (IPONWEB) How to consistently divert users to backends based on users' IP addresses, cookies, phase of the Moon, you name it. Sailor — a web MVC framework in Lua slides video Etiene Dalcol (PUC-Rio and ENSTA Bretagne) Lua's use in web tools, despite its great potential, is not yet widespread. Having had experience as a web programmer, and aiming to learn more about this language, I started a marathon that produced an MVC framework completely written in Lua, called Sailor. This talk presents the beginnings of Sailor, a comparison with other existing tools, the current stage of Sailor's development today and intends to start a debate on what we can do to spread the idea of using Lua more in web development. See sailorproject.org and sailor at github.com. A little code goes a long way — cross-platform game development with Lua slides video Ivan Beliy (Marmalade) Ivan Beliy will talk through the simple easy steps to take a game written in Lua to a whole host of mobile devices with Marmalade Quick. He will also delve into the extensibility available in Lua with open source access to the Marmalade Ecosystem and overlap with the Cocos2D Ecosystem, using live demos and examples. Last update: Sat Feb 14 01:11:40 BRST 2015"	"null"	"null"	"High-quality talks are given at each ~annual Lua Workshop, and a history of them is online, slides included."	"true"
