"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Args"	"Data::Validator"	"https://metacpan.org/pod/Data::Validator"	"Rule based validator on type constraint system."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Rule based validator on type constraint system."	"true"
"Args"	"Params::Util"	"https://metacpan.org/pod/Params::Util"	"Simple, compact and correct param-checking functions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Simple, compact and correct param-checking functions."	"true"
"Args"	"Params::Validate"	"https://metacpan.org/pod/Params::Validate"	"Validate method/function parameters."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Validate method/function parameters."	"true"
"Args"	"Smart::Args"	"https://metacpan.org/pod/Smart::Args"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Benchmarks"	"Benchmark"	"https://metacpan.org/pod/Benchmark"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Benchmarks"	"Dumbbench"	"https://metacpan.org/pod/Dumbbench"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Benchmarks"	"Parallel::Benchmark"	"https://metacpan.org/pod/Parallel::Benchmark"	"Benchmark in multiprocesses"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Benchmark in multiprocesses"	"true"
"Class Builder"	"Class::Accessor::Lite"	"https://metacpan.org/pod/Class::Accessor::Lite"	"Simple accessor generator."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Simple accessor generator."	"true"
"Class Builder"	"Class::Accessor::Lite::Lazy"	"https://metacpan.org/pod/Class::Accessor::Lite::Lazy"	"Generate lazy accessors."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Generate lazy accessors."	"true"
"Class Builder"	"Homer"	"https://metacpan.org/pod/Homer"	"Simple Prototype-based object system."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Simple Prototype-based object system."	"true"
"Class Builder"	"Mo"	"https://metacpan.org/pod/Mo"	"Micro Objects. Mo is less."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Micro Objects. Mo is less."	"true"
"Class Builder"	"Moo"	"https://metacpan.org/pod/Moo"	"Class builder supporting meta programming."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Class builder supporting meta programming."	"true"
"Class Builder"	"Moose"	"https://metacpan.org/pod/Moose"	"The one and only, Moose."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"The one and only, Moose."	"true"
"Class Builder"	"Mouse"	"https://metacpan.org/pod/Mouse"	"Yet another class builder like Moo/Moose."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Yet another class builder like Moo/Moose."	"true"
"Class Builder"	"Object::Tiny"	"https://metacpan.org/pod/Object::Tiny"	"A class builder that is terse, fast, and tiny."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"A class builder that is terse, fast, and tiny."	"true"
"CLI"	"App::Cmd"	"https://metacpan.org/pod/App::Cmd"	"Write command line apps with less suffering."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Write command line apps with less suffering."	"true"
"CLI"	"Getopt::Long"	"https://metacpan.org/pod/Getopt::Long"	"Extended processing of command line options."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Extended processing of command line options."	"true"
"Container"	"Object::Container"	"https://metacpan.org/pod/Object::Container"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Data Format"	"Data::Dumper::Simple"	"https://metacpan.org/pod/Data::Dumper::Simple"	"Reduce and faster Data::Dumper and eval() equivalent"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Reduce and faster Data::Dumper and eval() equivalent"	"true"
"Data Format"	"Data::MessagePack"	"https://metacpan.org/pod/Data::MessagePack"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Data Format"	"JSON::PP"	"https://metacpan.org/pod/JSON::PP"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Data Format"	"JSON::XS"	"https://metacpan.org/pod/JSON::XS"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Data Format"	"Sereal"	"https://metacpan.org/pod/Sereal"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Data Format"	"Storable"	"https://metacpan.org/pod/Storable"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Data Format"	"Text::CSV"	"https://metacpan.org/pod/Text::CSV"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Data Format"	"Text::CSV_XS"	"https://metacpan.org/pod/Text::CSV_XS"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Data Format"	"Text::Markdown"	"https://metacpan.org/pod/Text::Markdown"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Data Format"	"TOML"	"https://metacpan.org/pod/TOML"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Data Format"	"XML::LibXML"	"https://metacpan.org/pod/XML::LibXML"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Data Format"	"XML::Compile::Schema"	"https://metacpan.org/pod/XML::Compile::Schema"	"Interpret schema elements and types: create processors for XML messages."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Interpret schema elements and types: create processors for XML messages."	"true"
"Data Format"	"XML::Compile::SOAP"	"https://metacpan.org/pod/XML::Compile::SOAP"	"Implements the SOAP 1.1 protocol, client side."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Implements the SOAP 1.1 protocol, client side."	"true"
"Data Format"	"XML::Compile::WSDL"	"https://metacpan.org/pod/XML::Compile::WSDL"	"Use SOAP with a WSDL version 1.1 communication specification file."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Use SOAP with a WSDL version 1.1 communication specification file."	"false"
"Data Format"	"YAML"	"https://metacpan.org/pod/YAML"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Database"	"DBI"	"https://metacpan.org/pod/DBI"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Database"	"DBIx::Connector"	"https://metacpan.org/pod/DBIx::Connector"	"Fast, safe DBI connection and transaction management"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Fast, safe DBI connection and transaction management"	"true"
"Database"	"DBIx::Handler"	"https://metacpan.org/pod/DBIx::Handler"	"Fork-safe DBI handler"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Fork-safe DBI handler"	"true"
"Database"	"DBIx::Inspector"	"https://metacpan.org/pod/DBIx::Inspector"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Get started Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Database"	"DBIx::QueryLog"	"https://metacpan.org/pod/DBIx::QueryLog"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Database"	"DBIx::Sunny"	"https://metacpan.org/pod/DBIx::Sunny"	"Useful DBI Wrapper"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Useful DBI Wrapper"	"true"
"Database"	"DBIx::TransactionManager"	"https://metacpan.org/pod/DBIx::TransactionManager"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Relational Databases"	"DBD::CSV"	"https://metacpan.org/pod/DBD::CSV"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Relational Databases"	"DBD::Firebird"	"https://metacpan.org/pod/DBD::Firebird"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DBD::Firebird - DBI driver for Firebird RDBMS server - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Дамян Иванов  /  1.22 (DAM on 2016-01-30) 1.21 (DAM on 2015-09-24) 1.20 (MARIUZ on 2015-04-27) 1.19 (DAM on 2015-03-22) 1.18 (MARIUZ on 2014-03-19) 1.17 (DAM on 2014-03-18) 1.16 (DAM on 2013-12-02) 1.15 (DAM on 2013-09-09) 1.14 (DAM on 2013-09-09) 1.13 (DAM on 2013-09-09) 1.12 (DAM on 2013-08-15) 1.11 (MARIUZ on 2012-09-25) 1.00 (MARIUZ on 2012-04-03) 0.91 (DAM on 2011-11-03) 0.90 (DAM on 2011-11-02) 0.80 (MARIUZ on 2011-10-03) 0.70 (MARIUZ on 2011-09-26) 0.60 (MARIUZ on 2011-09-18) 0.55 (MARIUZ on 2011-06-24) 1.16 (MARIUZ on 2014-03-19) 1.10 (MARIUZ on 2012-09-25) 0.50 (MARIUZ on 2011-06-24) 0.50 (MARIUZ on 2011-06-21) 0.50 (MARIUZ on 2011-03-28) 0.50 (MARIUZ on 2011-02-08) DBD-Firebird-1.22 6 ++ 6 ++  / DBD::Firebird 30 Jan 2016 15:17:05 GMT Module version: 1.22 Source (raw) Browse (raw) Changes Clone repository Issues (12) Testers (64 / 2 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (100.81Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.21 (DAM on 2015-09-24) 1.20 (MARIUZ on 2015-04-27) 1.19 (DAM on 2015-03-22) 1.18 (MARIUZ on 2014-03-19) 1.17 (DAM on 2014-03-18) 1.16 (DAM on 2013-12-02) 1.15 (DAM on 2013-09-09) 1.14 (DAM on 2013-09-09) 1.13 (DAM on 2013-09-09) 1.12 (DAM on 2013-08-15) 1.11 (MARIUZ on 2012-09-25) 1.00 (MARIUZ on 2012-04-03) 0.91 (DAM on 2011-11-03) 0.90 (DAM on 2011-11-02) 0.80 (MARIUZ on 2011-10-03) 0.70 (MARIUZ on 2011-09-26) 0.60 (MARIUZ on 2011-09-18) 0.55 (MARIUZ on 2011-06-24) 1.16 (MARIUZ on 2014-03-19) 1.10 (MARIUZ on 2012-09-25) 0.50 (MARIUZ on 2011-06-24) 0.50 (MARIUZ on 2011-06-21) 0.50 (MARIUZ on 2011-03-28) 0.50 (MARIUZ on 2011-02-08) Diff with version 1.21 (DAM on 2015-09-24) 1.20 (MARIUZ on 2015-04-27) 1.19 (DAM on 2015-03-22) 1.18 (MARIUZ on 2014-03-19) 1.17 (DAM on 2014-03-18) 1.16 (DAM on 2013-12-02) 1.15 (DAM on 2013-09-09) 1.14 (DAM on 2013-09-09) 1.13 (DAM on 2013-09-09) 1.12 (DAM on 2013-08-15) 1.11 (MARIUZ on 2012-09-25) 1.00 (MARIUZ on 2012-04-03) 0.91 (DAM on 2011-11-03) 0.90 (DAM on 2011-11-02) 0.80 (MARIUZ on 2011-10-03) 0.70 (MARIUZ on 2011-09-26) 0.60 (MARIUZ on 2011-09-18) 0.55 (MARIUZ on 2011-06-24) 1.16 (MARIUZ on 2014-03-19) 1.10 (MARIUZ on 2012-09-25) 0.50 (MARIUZ on 2011-06-24) 0.50 (MARIUZ on 2011-06-21) 0.50 (MARIUZ on 2011-03-28) 0.50 (MARIUZ on 2011-02-08) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 1 PAUSE user 5 non-PAUSE users. DAM Дамян Иванов and 1 contributors show them Edwin Pratomo (edpratomo@users.sourceforge.net) Dependencies DBI and possibly others CPAN Testers List Reverse dependencies Dependency graph × DBD-Firebird-1.22 NAME SYNOPSIS DESCRIPTION MODULE DOCUMENTATION THE DBI CLASS DBI Class Methods DBI Dynamic Attributes METHODS COMMON TO ALL DBI HANDLES ATTRIBUTES COMMON TO ALL DBI HANDLES DATABASE HANDLE OBJECTS Database Handle Methods Database Handle Attributes STATEMENT HANDLE OBJECTS Statement Handle Methods Statement Handle Attributes TRANSACTION SUPPORT DATE, TIME, and TIMESTAMP FORMATTING SUPPORT EVENT ALERT SUPPORT RETRIEVING FIREBIRD / INTERBASE SPECIFIC INFORMATION UNSUPPORTED SQL STATEMENTS COMPATIBILITY WITH DBIx::* MODULES SERVICE METHODS DBD::Firebird->create_database( { params... } ) DBD::Firebird->gfix( { params } ) FAQ Why do some operations performing positioned update and delete fail when AutoCommit is on? Why do nested statement handles break under AutoCommit mode? Why do placeholders fail to bind, generating unknown datatype error message? How to do automatic increment for a specific field? How can I perform LIMIT clause as I usually do in MySQL? How can I use the date/time formatting attributes? Can I set the date/time formatting attributes between prepare and fetch? Can I change ib_dialect after DBI->connect ? OBSOLETE FEATURES TESTED PLATFORMS Clients Servers AUTHORS BUGS/LIMITATIONS SEE ALSO COPYRIGHT & LICENSE ACKNOWLEDGEMENTS NAME DBD::Firebird - DBI driver for Firebird RDBMS server SYNOPSIS   use DBI;    $dbh = DBI->connect(""dbi:Firebird:db=$dbname"", $user, $password);    # See the DBI module documentation for full details DESCRIPTION DBD::Firebird is a Perl module which works with the DBI module to provide access to Firebird databases. MODULE DOCUMENTATION This documentation describes driver specific behavior and restrictions. It is not supposed to be used as the only reference for the user. In any case consult the DBI documentation first ! THE DBI CLASS DBI Class Methods connect To connect to a database with a minimum of parameters, use the following syntax:   $dbh = DBI->connect(""dbi:Firebird:dbname=$dbname"", $user, $password); If omitted, $user defaults to the ISC_USER environment variable (or, failing that, the DBI-standard DBI_USER environment variable). Similarly, $password defaults to ISC_PASSWORD (or DBI_PASS). If $dbname is blank, that is, ""dbi:Firebird:dbname="", the environment variable ISC_DATABASE is substituted. The DSN may take several optional parameters, which may be split over multiple lines. Here is an example of connect statement which uses all possible parameters:    $dsn =<< ""DSN"";  dbi:Firebird:dbname=$dbname;  host=$host;  port=$port;  ib_dialect=$dialect;  ib_role=$role;  ib_charset=$charset;  ib_cache=$cache  DSN   $dbh =  DBI->connect($dsn, $username, $password); The $dsn is prefixed by 'dbi:Firebird:', and consists of key-value parameters separated by semicolons. New line may be added after the semicolon. The following is the list of valid parameters and their respective meanings:     parameter       meaning                                 optional?     -----------------------------------------------------------------     database        path to the database                    required     dbname          path to the database     db              path to the database     hostname        hostname / IP address                   optional     host            hostname / IP address     port            port number                             optional     ib_dialect      the SQL dialect to be used              optional     ib_role         the role of the user                    optional     ib_charset      character set to be used                optional     ib_cache        number of database cache buffers        optional     ib_dbkey_scope  change default duration of RDB$DB_KEY   optional database could be used interchangebly with dbname and db. To connect to a remote host, use the host parameter. Here is an example of DSN to connect to a remote Windows host:  $dsn = ""dbi:Firebird:db=C:/temp/test.gdb;host=example.com;ib_dialect=3""; Database file alias can be used too in connection string. In the following example, ""billing"" is defined in aliases.conf:  $dsn = 'dbi:Firebird:hostname=192.168.88.5;db=billing;ib_dialect=3'; Firebird as of version 1.0 listens on port specified within the services file. To connect to port other than the default 3050, add the port number at the end of host name, separated by a slash. Example:  $dsn = 'dbi:Firebird:db=/data/test.gdb;host=localhost/3060'; Firebird 1.0 introduces SQL dialect to provide backward compatibility with databases created by older versions of Firebird (pre 1.0). In short, SQL dialect controls how Firebird interprets:  - double quotes  - the DATE datatype  - decimal and numeric datatypes  - new 1.0 reserved keywords Valid values for ib_dialect are 1 and 3 .The driver's default value is 3 (Currently it is possible to create databases in Dialect 1 and 3 only, however it is recommended that you use Dialect 3 exclusively, since Dialect 1 will eventually be deprecated. Dialect 2 cannot be used to create a database since it only serves to convert Dialect 1 to Dialect 3). http://www.firebirdsql.org/file/documentation/reference_manuals/user_manuals/html/isql-dialects.html ib_role specifies the role of the connecting user. SQL role is implemented by Firebird to make database administration easier when dealing with lots of users. A detailed reading can be found at:  http://www.ibphoenix.com/resources/documents/general/doc_59 If ib_cache is not specified, the default database's cache size value will be used. The Firebird Operation Guide discusses in full length the importance of this parameter to gain the best performance. available_drivers   @driver_names = DBI->available_drivers; Implemented by DBI, no driver-specific impact. data_sources This method is not yet implemented. trace   DBI->trace($trace_level, $trace_file) Implemented by DBI, no driver-specific impact. DBI Dynamic Attributes See Common Methods. METHODS COMMON TO ALL DBI HANDLES err   $rv = $h->err; Supported by the driver as proposed by DBI. errstr   $str = $h->errstr; Supported by the driver as proposed by DBI. state This method is not yet implemented. trace   $h->trace($trace_level, $trace_filename); Implemented by DBI, no driver-specific impact. trace_msg   $h->trace_msg($message_text); Implemented by DBI, no driver-specific impact. func See Transactions section for information about invoking ib_set_tx_param() from func() method. ATTRIBUTES COMMON TO ALL DBI HANDLES Warn (boolean, inherited) Implemented by DBI, no driver-specific impact. Active (boolean, read-only) Supported by the driver as proposed by DBI. A database handle is active while it is connected and statement handle is active until it is finished. Kids (integer, read-only) Implemented by DBI, no driver-specific impact. ActiveKids (integer, read-only) Implemented by DBI, no driver-specific impact. CachedKids (hash ref) Implemented by DBI, no driver-specific impact. CompatMode (boolean, inherited) Not used by this driver. InactiveDestroy (boolean) Implemented by DBI, no driver-specific impact. PrintError (boolean, inherited) Implemented by DBI, no driver-specific impact. RaiseError (boolean, inherited) Implemented by DBI, no driver-specific impact. ChopBlanks (boolean, inherited) Supported by the driver as proposed by DBI. LongReadLen (integer, inherited) Supported by the driver as proposed by DBI.The default value is 80 bytes. LongTruncOk (boolean, inherited) Supported by the driver as proposed by DBI. Taint (boolean, inherited) Implemented by DBI, no driver-specific impact. DATABASE HANDLE OBJECTS Database Handle Methods selectrow_array   @row_ary = $dbh->selectrow_array($statement, \%attr, @bind_values); Implemented by DBI, no driver-specific impact. selectall_arrayref   $ary_ref = $dbh->selectall_arrayref($statement, \%attr, @bind_values); Implemented by DBI, no driver-specific impact. selectcol_arrayref   $ary_ref = $dbh->selectcol_arrayref($statement, \%attr, @bind_values); Implemented by DBI, no driver-specific impact. prepare   $sth = $dbh->prepare($statement, \%attr); Supported by the driver as proposed by DBI. When AutoCommit is On, this method implicitly starts a new transaction, which will be automatically committed after the following execute() or the last fetch(), depending on the statement type. For select statements, commit automatically takes place after the last fetch(), or by explicitly calling finish() method if there are any rows remaining. For non-select statements, execute() will implicitly commits the transaction. prepare_cached   $sth = $dbh->prepare_cached($statement, \%attr); Implemented by DBI, no driver-specific impact. do   $rv  = $dbh->do($statement, \%attr, @bind_values); Supported by the driver as proposed by DBI. This should be used for non-select statements, where the driver doesn't take the conservative prepare - execute steps, thereby speeding up the execution time. But if this method is used with bind values, the speed advantage diminishes as this method calls prepare() for binding the placeholders. Instead of calling this method repeatedly with bind values, it would be better to call prepare() once, and execute() many times. See the notes for the execute method elsewhere in this document. Unlike the execute method, currently this method doesn't return the number of affected rows. commit   $rc  = $dbh->commit; Supported by the driver as proposed by DBI. See also the notes about Transactions elsewhere in this document. rollback   $rc  = $dbh->rollback; Supported by the driver as proposed by DBI. See also the notes about Transactions elsewhere in this document. disconnect   $rc  = $dbh->disconnect; Supported by the driver as proposed by DBI. ping   $rc = $dbh->ping; This driver supports the ping-method, which can be used to check the validity of a database-handle. This is especially required by Apache::DBI. primary_key_info   $sth = $dbh->primary_key_info('', '', $table_name);   @pks = $dbh->primary_key('', '', $table_name); Supported by the driver as proposed by DBI. Note that catalog and schema are ignored. table_info   $sth = $dbh->table_info; All Firebird versions support the basic DBI-specified columns (TABLE_NAME, TABLE_TYPE, etc.) as well as IB_TABLE_OWNER. Peculiar versions may return additional fields, prefixed by IB_. Table searching may not work as expected on older Interbase/Firebird engines which do not natively offer a TRIM() function. Some engines store TABLE_NAME in a blank-padded CHAR field, and a search for table name is performed via a SQL LIKE predicate, which is sensitive to blanks. That is:   $dbh->table_info('', '', 'FOO');  # May not find table ""FOO"", depending on                                     # FB version   $dbh->table_info('', '', 'FOO%'); # Will always find ""FOO"", but also tables                                     # ""FOOD"", ""FOOT"", etc. Future versions of DBD::Firebird may attempt to work around this irritating limitation, at the expense of efficiency. Note that Firebird implementations do not presently support the DBI concepts of 'catalog' and 'schema', so these parameters are effectively ignored. tables   @names = $dbh->tables; Returns a list of tables, excluding any 'SYSTEM TABLE' types. type_info_all   $type_info_all = $dbh->type_info_all; Supported by the driver as proposed by DBI. For further details concerning the Firebird specific data-types please read the Firebird Data Definition Guide http://www.firebirdsql.org/en/reference-manuals/ type_info   @type_info = $dbh->type_info($data_type); Implemented by DBI, no driver-specific impact. quote   $sql = $dbh->quote($value, $data_type); Implemented by DBI, no driver-specific impact. Database Handle Attributes AutoCommit (boolean) Supported by the driver as proposed by DBI. According to the classification of DBI, Firebird is a database, in which a transaction must be explicitly started. Without starting a transaction, every change to the database becomes immediately permanent. The default of AutoCommit is on, which corresponds to the DBI's default. When setting AutoCommit to off, a transaction will be started and every commit or rollback will automatically start a new transaction. For details see the notes about Transactions elsewhere in this document. Driver (handle) Implemented by DBI, no driver-specific impact. Name (string, read-only) Not yet implemented. RowCacheSize (integer) Implemented by DBI, not used by the driver. ib_softcommit (driver-specific, boolean) Set this attribute to TRUE to use Firebird's soft commit feature (default to FALSE). Soft commit retains the internal transaction handle when committing a transaction, while the default commit behavior always closes and invalidates the transaction handle. Since the transaction handle is still open, there is no need to start a new transaction upon every commit, so applications can gain performance improvement. Using soft commit is also desirable when dealing with nested statement handles under AutoCommit on. Switching the attribute's value from TRUE to FALSE will force hard commit thus closing the current transaction. ib_enable_utf8 (driver-specific, boolean) Setting this attribute to TRUE will cause any Perl Unicode strings supplied as statement parameters to be downgraded to octet sequences before passing them to Firebird. Also, any character data retrieved from the database (CHAR, VARCHAR, BLOB sub_type TEXT) will be upgraded to Perl Unicode strings. Caveat: Currently this is supported only if the ib_charset DSN parameter is UTF8. In the future, encoding and decoding to/from arbitrary character set may be implemented. Example:     $dbh = DBI->connect( 'dbi:Firebird:db=database.fdb;ib_charset=UTF8',         { ib_enable_utf8 => 1 } ); STATEMENT HANDLE OBJECTS Statement Handle Methods bind_param Supported by the driver as proposed by DBI. The SQL data type passed as the third argument is ignored. bind_param_array Supported by the driver as proposed by DBI. The attributes, supplied in the optional third parameter are ignored. bind_param_inout Not supported by this driver. execute   $rv = $sth->execute(@bind_values); Supported by the driver as proposed by DBI. fetchrow_arrayref   $ary_ref = $sth->fetchrow_arrayref; Supported by the driver as proposed by DBI. fetchrow_array   @ary = $sth->fetchrow_array; Supported by the driver as proposed by DBI. fetchrow_hashref   $hash_ref = $sth->fetchrow_hashref; Supported by the driver as proposed by DBI. fetchall_arrayref   $tbl_ary_ref = $sth->fetchall_arrayref; Implemented by DBI, no driver-specific impact. finish   $rc = $sth->finish; Supported by the driver as proposed by DBI. rows   $rv = $sth->rows; Supported by the driver as proposed by DBI. It returns the number of fetched rows for select statements, otherwise it returns -1 (unknown number of affected rows). bind_col   $rc = $sth->bind_col($column_number, \$var_to_bind, \%attr); Supported by the driver as proposed by DBI. bind_columns   $rc = $sth->bind_columns(\%attr, @list_of_refs_to_vars_to_bind); Supported by the driver as proposed by DBI. dump_results   $rows = $sth->dump_results($maxlen, $lsep, $fsep, $fh); Implemented by DBI, no driver-specific impact. Statement Handle Attributes NUM_OF_FIELDS (integer, read-only) Implemented by DBI, no driver-specific impact. NUM_OF_PARAMS (integer, read-only) Implemented by DBI, no driver-specific impact. NAME (array-ref, read-only) Supported by the driver as proposed by DBI. NAME_lc (array-ref, read-only) Implemented by DBI, no driver-specific impact. NAME_uc (array-ref, read-only) Implemented by DBI, no driver-specific impact. TYPE (array-ref, read-only) Supported by the driver as proposed by DBI, with the restriction, that the types are Firebird specific data-types which do not correspond to international standards. PRECISION (array-ref, read-only) Supported by the driver as proposed by DBI. SCALE (array-ref, read-only) Supported by the driver as proposed by DBI. NULLABLE (array-ref, read-only) Supported by the driver as proposed by DBI. CursorName (string, read-only) Supported by the driver as proposed by DBI. Statement (string, read-only) Supported by the driver as proposed by DBI. RowCache (integer, read-only) Not supported by the driver. ParamValues (hashref, read-only) Supported by the driver as proposed by DBI. TRANSACTION SUPPORT The transaction behavior is controlled with the attribute AutoCommit. For a complete definition of AutoCommit please refer to the DBI documentation. According to the DBI specification the default for AutoCommit is TRUE. In this mode, any change to the database becomes valid immediately. Any commit() or rollback() will be rejected. If AutoCommit is switched-off, immediately a transaction will be started. A rollback() will rollback and close the active transaction, then implicitly start a new transaction. A disconnect will issue a rollback. Firebird provides fine control over transaction behavior, where users can specify the access mode, the isolation level, the lock resolution, and the table reservation (for a specified table). For this purpose, ib_set_tx_param() database handle method is available. Upon a successful connect(), these default parameter values will be used for every SQL operation:     Access mode:        read_write     Isolation level:    snapshot     Lock resolution:    wait Any of the above value can be changed using ib_set_tx_param(). ib_set_tx_param  $dbh->func(      -access_mode     => 'read_write',     -isolation_level => 'read_committed',     -lock_resolution => 'wait',     'ib_set_tx_param'  ); Valid value for -access_mode is read_write, or read_only. Valid value for -lock_resolution is wait, or no_wait. In Firebird 2.0, a timeout value for wait is introduced. This can be specified using hash ref as lock_resolution value:  $dbh->func(     -lock_resolution => { wait => 5 }, # wait for 5 seconds     'ib_set_tx_param'  ); -isolation_level may be: read_committed, snapshot, snapshot_table_stability. If read_committed is to be used with record_version or no_record_version, then they should be inside an anonymous array:  $dbh->func(      -isolation_level => ['read_committed', 'record_version'],     'ib_set_tx_param'  ); Table reservation is supported since DBD::Firebird 0.30. Names of the tables to reserve as well as their reservation params/values are specified inside a hashref, which is then passed as the value of -reserving. The following example reserves foo_table with read lock and bar_table with read lock and protected access:  $dbh->func(     -access_mode     => 'read_write',     -isolation_level => 'read_committed',     -lock_resolution => 'wait',     -reserving       =>         {             foo_table => {                 lock    => 'read',             },             bar_table => {                 lock    => 'read',                 access  => 'protected',             },         },     'ib_set_tx_param'  ); Possible table reservation parameters are: access (optional) Valid values are shared or protected. lock (required) Valid values are read or write. Under AutoCommit mode, invoking this method doesn't only change the transaction parameters (as with AutoCommit off), but also commits the current transaction. The new transaction parameters will be used in any newly started transaction. ib_set_tx_param() can also be invoked with no parameter in which it resets transaction parameters to the default value. DATE, TIME, and TIMESTAMP FORMATTING SUPPORT DBD::Firebird supports various formats for query results of DATE, TIME, and TIMESTAMP types. By default, it uses ""%c"" for TIMESTAMP, ""%x"" for DATE, and ""%X"" for TIME, and pass them to ANSI C's strftime() function to format your query results. These values are respectively stored in ib_timestampformat, ib_dateformat, and ib_timeformat attributes, and may be changed in two ways: At $dbh level This replaces the default values. Example:  $dbh->{ib_timestampformat} = '%m-%d-%Y %H:%M';  $dbh->{ib_dateformat} = '%m-%d-%Y';  $dbh->{ib_timeformat} = '%H:%M'; At $sth level This overrides the default values only for the currently prepared statement. Example:  $attr = {     ib_timestampformat => '%m-%d-%Y %H:%M',     ib_dateformat => '%m-%d-%Y',     ib_timeformat => '%H:%M',  };  # then, pass it to prepare() method.   $sth = $dbh->prepare($sql, $attr); Since locale settings affect the result of strftime(), if your application is designed to be portable across different locales, you may consider using these two special formats: 'TM' and 'ISO'. TM returns a 9-element list, much like Perl's localtime(). The ISO format applies sprintf()'s pattern ""%04d-%02d-%02d %02d:%02d:%02d.%04d"" for TIMESTAMP, ""%04d-%02d-%02d"" for DATE, and ""%02d:%02d:%02d.%04d"" for TIME. $dbh->{ib_time_all} can be used to specify all of the three formats at once. Example:  $dbh->{ib_time_all} = 'TM'; EVENT ALERT SUPPORT Event alerter is used to notify client applications whenever something is happened on the database. For this to work, a trigger should be created, which then calls POST_EVENT to post the event notification to the interested client. A client could behave in two ways: wait for the event synchronously, or register a callback which will be invoked asynchronously each time a posted event received. ib_init_event  $evh = $dbh->func(@event_names, 'ib_init_event'); Creates an event handle from a list of event names. ib_wait_event  $dbh->func($evh, 'ib_wait_event'); Wait synchronously for particular events registered via event handle $evh. Returns a hashref containing pair(s) of posted event's name and its corresponding count, or undef on failure. ib_register_callback  my $cb = sub { my $posted_events = $_[0]; ++$::COUNT < 6 };  $dbh->func($evh, $cb, 'ib_register_callback');   sub inc_count { my $posted_events = shift; ++$::COUNT < 6 };  $dbh->func($evh, \&inc_count, 'ib_register_callback');   # or anonyomus subroutine  $dbh->func(    $evh,     sub { my ($pe) = @_; ++$::COUNT < 6 },     'ib_register_callback'  ); Associates an event handle with an asynchronous callback. A callback will be passed a hashref as its argument, this hashref contains pair(s) of posted event's name and its corresponding count. It is safe to call ib_register_callback multiple times for the same event handle. In this case, the previously registered callback will be automatically cancelled. If the callback returns FALSE, the registered callback will be no longer invoked, but internally it is still there until the event handle goes out of scope (or undef-ed), or you call ib_cancel_callback to actually disassociate it from the event handle. ib_cancel_callback  $dbh->func($evh, 'ib_cancel_callback'); Unregister a callback from an event handle. This function has a limitation, however, that it can't be called from inside a callback. In many cases, you won't need this function, since when an event handle goes out of scope, its associated callback(s) will be automatically cancelled before it is cleaned up. RETRIEVING FIREBIRD / INTERBASE SPECIFIC INFORMATION ib_tx_info  $hash_ref = $dbh->func('ib_tx_info'); Retrieve information about current active transaction. ib_database_info  $hash_ref = $dbh->func(@info, 'ib_database_info');  $hash_ref = $dbh->func([@info], 'ib_database_info'); Retrieve database information from current connection. ib_plan  $plan = $sth->func('ib_plan'); Retrieve query plan from a prepared SQL statement.  my $sth = $dbh->prepare('SELECT * FROM foo');  print $sth->func('ib_plan'); # PLAN (FOO NATURAL) ib_drop_database  $result = $dbh->func('ib_drop_database'); Drops the database, associated with the connection. The database handle is no longer valid after calling this function. Caution is advised as the drop is irrevocable. UNSUPPORTED SQL STATEMENTS Here is a list of SQL statements which can't be used. But this shouldn't be a problem, because their functionality are already provided by the DBI methods. SET TRANSACTION Use $dbh-func(..., 'set_tx_param')> instead. DESCRIBE Provides information about columns that are retrieved by a DSQL statement, or about placeholders in a statement. This functionality is supported by the driver, and transparent for users. Column names are available via $sth->{NAME} attributes. EXECUTE IMMEDIATE Calling do() method without bind value(s) will do the same. CLOSE, OPEN, DECLARE CURSOR $sth->{CursorName} is automagically available upon executing a ""SELECT .. FOR UPDATE"" statement. A cursor is closed after the last fetch(), or by calling $sth->finish(). PREPARE, EXECUTE, FETCH Similar functionalities are obtained by using prepare(), execute(), and fetch() methods. COMPATIBILITY WITH DBIx::* MODULES DBD::Firebird is known to work with DBIx::Recordset 0.21, and Apache::DBI 0.87. Yuri Vasiliev <yuri.vasiliev@targuscom.com> reported successful usage with Apache::AuthDBI (part of Apache::DBI 0.87 distribution). The driver is untested with Apache::Session::DBI. Doesn't work with Tie::DBI. Tie::DBI calls $dbh->prepare(""LISTFIELDS $table_name"") on which Firebird fails to parse. I think that the call should be made within an eval block. SERVICE METHODS DBD::Firebird->create_database( { params... } ) A class method for creating empty databases. The method croaks on error. Params may be: db_path (string, required) Path to database, including host name if necessary. Examples: server:/path/to/db.fdb /srv/db/base.fdb user (string, optional) User name to be used for the request. password (string, optional) Password to be used for the request. page_size (integer, optional) Page size of the newly created database. Should be something supported by the server. Firebird 2.5 supports the following page sizes: 1024, 2048, 4096, 8192 and 16384 and defaults to 4096. character_set (string, optional) The default character set of the database. Firebird 2.5 defaults to NONE. dialect (integer, optional) The dialect of the database. Defaults to 3. After creation, the new database can be used after connecting to it with the usual DBI->connect(...) DBD::Firebird->gfix( { params } ) A class method for simulating a subset of the functionality of the Firebird's gfix(1) utility. Params is a hash reference, with the following keys: db_path (string, required) The path to the database to connect to. Should include host name if necessary. user (string, optional) User name to connect as. Must be SYSDBA or database owner. password (string, optional) Password to be used for the connection. Note that user and password are not needed for embedded connections. forced_writes (boolean, optional) If given, sets the forced writes flag of the database, causing Firebird to use synchronous writes when working with that database. buffers (integer, optional) If given, sets the default number of buffers for the database. Can be overridden on connect time. Note that buffers are measured in database pages, not bytes. FAQ Why do some operations performing positioned update and delete fail when AutoCommit is on? For example, the following code snippet fails:  $sth = $dbh->prepare(  ""SELECT * FROM ORDERS WHERE user_id < 5 FOR UPDATE OF comment"");  $sth->execute;  while (@res = $sth->fetchrow_array) {      $dbh->do(""UPDATE ORDERS SET comment = 'Wonderful' WHERE       CURRENT OF $sth->{CursorName}"");  } When AutoCommit is on, a transaction is started within prepare(), and committed automatically after the last fetch(), or within finish(). Within do(), a transaction is started right before the statement is executed, and gets committed right after the statement is executed. The transaction handle is stored within the database handle. The driver is smart enough not to override an active transaction handle with a new one. So, if you notice the snippet above, after the first fetchrow_array(), the do() is still using the same transaction context, but as soon as it has finished executing the statement, it commits the transaction, whereas the next fetchrow_array() still needs the transaction context! So the secret to make this work is to keep the transaction open. This can be done in two ways: Using AutoCommit = 0 If yours is default to AutoCommit on, you can put the snippet within a block:  {      $dbh->{AutoCommit} = 0;      # same actions like above ....      $dbh->commit;  } Using $dbh->{ib_softcommit} = 1 This is a driver-specific attribute,You may want to look at t/70-nested-sth.t to see it in action. Why do nested statement handles break under AutoCommit mode? The same explanation as above applies. The workaround is also much alike:  {      $dbh->{AutoCommit} = 0;      $sth1 = $dbh->prepare(""SELECT * FROM $table"");      $sth2 = $dbh->prepare(""SELECT * FROM $table WHERE id = ?"");      $sth1->execute;       while ($row = $sth1->fetchrow_arrayref) {         $sth2->execute($row->[0]);         $res = $sth2->fetchall_arrayref;      }      $dbh->commit;  } You may also use $dbh->{ib_softcommit} please check t/70nested-sth.t for an example on how to use it. Why do placeholders fail to bind, generating unknown datatype error message? You can't bind a field name. The following example will fail:  $sth = $dbh->prepare(""SELECT (?) FROM $table"");  $sth->execute('user_id'); There are cases where placeholders can't be used in conjunction with COLLATE clause, such as this:  SELECT * FROM $table WHERE UPPER(author) LIKE UPPER(? COLLATE FR_CA); This deals with the Firebird's SQL parser, not with DBD::Firebird. The driver just passes SQL statements through the engine. How to do automatic increment for a specific field? Create a sequence and a trigger to associate it with the field. The following example creates a sequence named PROD_ID_SEQ, and a trigger for table ORDERS which uses the generator to perform auto increment on field PRODUCE_ID with increment size of 1.  $dbh->do(""create sequence PROD_ID_SEQ"");  $dbh->do(  ""CREATE TRIGGER INC_PROD_ID FOR ORDERS  BEFORE INSERT POSITION 0  AS BEGIN    NEW.PRODUCE_ID = NEXT VALUE FOR PROD_ID_SEQ;  END""); From Firebird 3.0 there is Identity support How can I perform LIMIT clause as I usually do in MySQL? LIMIT clause let users to fetch only a portion rather than the whole records as the result of a query. This is particularly efficient and useful for paging feature on web pages, where users can navigate back and forth between pages. Using Firebird 2.5.x this can be implemented by using ROWS .  http://www.firebirdsql.org/refdocs/langrefupd21-select.html#langrefupd21-select-rows For example, to display a portion of table employee within your application:  # fetch record 1 - 5:  $res = $dbh->selectall_arrayref(""SELECT * FROM employee rows 1 to 5)"");   # fetch record 6 - 10:   $res = $dbh->selectall_arrayref(""SELECT * FROM employee rows 6 to 10)""); How can I use the date/time formatting attributes? Those attributes take the same format as the C function strftime()'s. Examples:  $attr = {     ib_timestampformat => '%m-%d-%Y %H:%M',     ib_dateformat => '%m-%d-%Y',     ib_timeformat => '%H:%M',  }; Then, pass it to prepare() method.  $sth = $dbh->prepare($stmt, $attr);  # followed by execute() and fetch(), or:   $res = $dbh->selectall_arrayref($stmt, $attr); Can I set the date/time formatting attributes between prepare and fetch? No. ib_dateformat, ib_timeformat, and ib_timestampformat can only be set during $sth->prepare. If this is a problem to you, let me know, and probably I'll add this capability for the next release. Can I change ib_dialect after DBI->connect ? No. If this is a problem to you, let me know, and probably I'll add this capability for the next release. OBSOLETE FEATURES Private Method set_tx_param() is obsoleted by ib_set_tx_param(). TESTED PLATFORMS Clients Linux FreeBSD Solaris Win32 Servers Firebird 2.5.x SS , SC and Classic for Linux (32 bits and 64) Firebird 2.5.x for Windows, FreeBSD, Solaris AUTHORS DBI by Tim Bunce <Tim.Bunce@pobox.com> DBD::Firebird by Edwin Pratomo <edpratomo@cpan.org>, Daniel Ritz <daniel.ritz@gmx.ch> and many others. See ""COPYRIGHT & LICENSE"". This module is originally based on the work of Bill Karwin's IBPerl. BUGS/LIMITATIONS Please report bugs and feature suggestions using http://rt.cpan.org/Public/Dist/Display.html?Name=DBD-Firebird . This module doesn't work with MSWin32 ActivePerl iThreads, and its emulated fork. Tested with MSWin32 ActivePerl build 809 (Perl 5.8.3). The whole process will block in unpredictable manner. Under Linux, this module has been tested with several different iThreads enabled Perl releases. No problem occurred so far.. until you try to share a DBI handle ;-) But if you plan to use thread, you'd better use the latest stable version of Perl On FreeBSD you need a Perl compiled with thread support. Limitations: Arrays are not (yet) supported Read/Write BLOB fields block by block not (yet) supported. The maximum size of a BLOB read/write is hardcoded to about 1 MB. service manager API is not supported. SEE ALSO DBI(3). COPYRIGHT & LICENSE Copyright (c) 2010- 2012 Popa Adrian Marius <mapopa@gmail.com> Copyright (c) 2011- 2012 Stefan Suciu <stefbv70@gmail.com> Copyright (c) 2011 Damyan Ivanov <dmn@debian.org> Copyright (c) 2011 Alexandr Ciornii <alexchorny@gmail.com> Copyright (c) 2010, 2011 Mike Pomraning <mjp@pilcrow.madison.wi.us> Copyright (c) 1999-2008 Edwin Pratomo Portions Copyright (c) 2001-2005 Daniel Ritz The DBD::Firebird module is free software. You may distribute under the terms of either the GNU General Public License or the Artistic License, as specified in the Perl README file. ACKNOWLEDGEMENTS An attempt to enumerate all who have contributed patches (may misses some): Michael Moehle, Igor Klingen, Sergey Skvortsov, Ilya Verlinsky, Pavel Zheltouhov, Peter Wilkinson, Mark D. Anderson, Michael Samanov, Michael Arnett, Flemming Frandsen, Mike Shoyher, Christiaan Lademann. × Module Install Instructions To install DBD::Firebird, simply copy and paste either of the commands in to your terminal cpanm                      cpanm DBD::Firebird CPAN shell                      perl -MCPAN -e shell                     install DBD::Firebird For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Relational Databases"	"DBD::mysql"	"https://metacpan.org/pod/DBD::mysql"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DBD::mysql - MySQL driver for the Perl5 Database Interface (DBI) - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Michiel Beijen  /  4.035 (MICHIELB on 2016-07-09) 4.034 (MICHIELB on 2016-07-06) 4.033_03 DEV (MICHIELB on 2016-07-04) 4.033_02 DEV (MICHIELB on 2015-12-18) 4.033_01 DEV (MICHIELB on 2015-12-15) 4.033 (CAPTTOFU on 2015-10-27) 4.032_03 DEV (MICHIELB on 2015-10-25) 4.032 (CAPTTOFU on 2015-07-21) 4.032_01 DEV (CAPTTOFU on 2015-04-16) 4.031 (CAPTTOFU on 2015-03-06) 4.030_02 DEV (MICHIELB on 2015-03-02) 4.030_01 DEV (CAPTTOFU on 2015-01-28) 4.029 (CAPTTOFU on 2014-12-09) 4.028 (CAPTTOFU on 2014-08-01) 4.027 (CAPTTOFU on 2014-03-19) 4.026 (CAPTTOFU on 2014-01-16) 4.025 (CAPTTOFU on 2013-11-04) 4.024 (CAPTTOFU on 2013-09-17) 4.023 (CAPTTOFU on 2013-04-12) 4.022 (CAPTTOFU on 2012-08-30) 4.021 (CAPTTOFU on 2012-04-28) 4.020 (CAPTTOFU on 2011-08-20) 4.019 (CAPTTOFU on 2011-05-09) 4.018 (CAPTTOFU on 2010-10-26) 4.017 (CAPTTOFU on 2010-08-12) 4.016 (CAPTTOFU on 2010-07-10) 4.015 (CAPTTOFU on 2010-07-09) 4.014 (CAPTTOFU on 2010-04-15) 4.013 (CAPTTOFU on 2009-09-16) 4.012 (CAPTTOFU on 2009-06-19) 4.011 (CAPTTOFU on 2009-04-14) 4.010 (CAPTTOFU on 2008-10-24) 4.009 (CAPTTOFU on 2008-10-22) 4.008 (CAPTTOFU on 2008-08-15) 4.007 (CAPTTOFU on 2008-05-11) 4.006 (CAPTTOFU on 2007-12-26) 4.005 (CAPTTOFU on 2007-06-08) 4.004 (CAPTTOFU on 2007-03-22) 4.003 (CAPTTOFU on 2007-03-02) 4.001 (CAPTTOFU on 2007-01-08) 4.00 (CAPTTOFU on 2006-12-24) 3.0008_1 DEV (CAPTTOFU on 2006-10-16) 3.0008 (CAPTTOFU on 2006-10-16) 3.0007_2 DEV (CAPTTOFU on 2006-10-07) 3.0007_1 DEV (CAPTTOFU on 2006-09-08) 3.0007 (CAPTTOFU on 2006-09-08) 3.0006_1 DEV (CAPTTOFU on 2006-06-11) 3.0006 (CAPTTOFU on 2006-06-11) 3.0005 (CAPTTOFU on 2006-06-10) 3.0005_1 DEV (CAPTTOFU on 2006-06-10) 3.0004_1 DEV (CAPTTOFU on 2006-05-21) 3.0004 (CAPTTOFU on 2006-05-21) 3.0003_1 DEV (CAPTTOFU on 2006-05-04) 3.0003 (CAPTTOFU on 2006-05-04) 3.0002_5 DEV (CAPTTOFU on 2006-02-01) 3.0002_4 DEV (CAPTTOFU on 2005-11-06) 3.0002_3 DEV (CAPTTOFU on 2005-09-28) 3.0002_2 DEV (CAPTTOFU on 2005-09-26) 3.0002_1 DEV (CAPTTOFU on 2005-08-04) 3.0002 (CAPTTOFU on 2005-07-11) 3.0001_3 DEV (CAPTTOFU on 2005-07-08) 3.0001_2 DEV (CAPTTOFU on 2005-07-07) 3.0001 (CAPTTOFU on 2005-07-07) 3.0001_1 DEV (CAPTTOFU on 2005-07-04) 3.0000_0 DEV (CAPTTOFU on 2005-07-03) 3.0000 (CAPTTOFU on 2005-07-01) 2.9008 (RUDY on 2005-06-06) 2.9007 (CAPTTOFU on 2005-04-27) 2.9015_3 DEV (CAPTTOFU on 2005-04-27) 2.9006 (RUDY on 2005-04-04) 2.9005 (CAPTTOFU on 2005-03-29) 2.9005_3 DEV (RUDY on 2004-10-28) 2.9005_1 DEV (RUDY on 2004-10-20) 2.9004 (RUDY on 2004-07-14) 2.9004_2 DEV (RUDY on 2004-07-01) 2.9003 (RUDY on 2003-10-27) 2.9003001 DEV (RUDY on 2003-09-12) 2.9002 (RUDY on 2003-06-27) 2.1028 (JWIED on 2003-06-25) 2.1027 (JWIED on 2003-05-31) 2.1026 (JWIED on 2003-03-03) 2.1025 (JWIED on 2003-02-07) 2.1024 (JWIED on 2003-01-20) 2.1023 (JWIED on 2003-01-19) 2.1022 (JWIED on 2003-01-03) 2.1021 (JWIED on 2002-12-17) 2.1020 (JWIED on 2002-09-23) 2.1019 (JWIED on 2002-09-16) 2.1018 (JWIED on 2002-08-13) 2.1017 (JWIED on 2002-05-02) 2.1016 (JWIED on 2002-05-01) 2.1015 (JWIED on 2002-04-29) 2.1014 (JWIED on 2002-04-17) 2.1013 (JWIED on 2002-04-15) 2.1012 (JWIED on 2002-04-12) 1.2212.86 (JWIED on 2000-04-15) 4.002 (CAPTTOFU on 2007-03-02) 3.0001_0 DEV (CAPTTOFU on 2005-07-04) 2.1011 (JWIED on 2002-02-12) 2.1010 (JWIED on 2002-01-07) 2.1009 (JWIED on 2002-01-01) 2.1008 (JWIED on 2001-12-28) 2.1006 (JWIED on 2001-12-27) 2.1007 (JWIED on 2001-12-27) 2.1005 (JWIED on 2001-12-13) 2.1004 (JWIED on 2001-11-13) 2.1003 (JWIED on 2001-11-05) 2.1002 (JWIED on 2001-11-04) 2.1001 (JWIED on 2001-11-04) 2.1000 (JWIED on 2001-10-31) 2.0903 (JWIED on 2001-10-28) 2.0902 (JWIED on 2001-07-09) 2.0901 (JWIED on 2001-05-25) 2.0900 (JWIED on 2001-05-06) DBD-mysql-4.035 38 ++ 38 ++  / DBD::mysql 09 Jul 2016 05:50:13 GMT Module version: 4.035 Source (raw) Browse (raw) Changes Homepage Clone repository Issues (81) 4 (5 reviews) Testers Kwalitee License: perl_5 Questions? Chat with us! Activity 24 month Tools MOBI | EPUB Download (142.05Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 4.034 (MICHIELB on 2016-07-06) 4.033_03 DEV (MICHIELB on 2016-07-04) 4.033_02 DEV (MICHIELB on 2015-12-18) 4.033_01 DEV (MICHIELB on 2015-12-15) 4.033 (CAPTTOFU on 2015-10-27) 4.032_03 DEV (MICHIELB on 2015-10-25) 4.032 (CAPTTOFU on 2015-07-21) 4.032_01 DEV (CAPTTOFU on 2015-04-16) 4.031 (CAPTTOFU on 2015-03-06) 4.030_02 DEV (MICHIELB on 2015-03-02) 4.030_01 DEV (CAPTTOFU on 2015-01-28) 4.029 (CAPTTOFU on 2014-12-09) 4.028 (CAPTTOFU on 2014-08-01) 4.027 (CAPTTOFU on 2014-03-19) 4.026 (CAPTTOFU on 2014-01-16) 4.025 (CAPTTOFU on 2013-11-04) 4.024 (CAPTTOFU on 2013-09-17) 4.023 (CAPTTOFU on 2013-04-12) 4.022 (CAPTTOFU on 2012-08-30) 4.021 (CAPTTOFU on 2012-04-28) 4.020 (CAPTTOFU on 2011-08-20) 4.019 (CAPTTOFU on 2011-05-09) 4.018 (CAPTTOFU on 2010-10-26) 4.017 (CAPTTOFU on 2010-08-12) 4.016 (CAPTTOFU on 2010-07-10) 4.015 (CAPTTOFU on 2010-07-09) 4.014 (CAPTTOFU on 2010-04-15) 4.013 (CAPTTOFU on 2009-09-16) 4.012 (CAPTTOFU on 2009-06-19) 4.011 (CAPTTOFU on 2009-04-14) 4.010 (CAPTTOFU on 2008-10-24) 4.009 (CAPTTOFU on 2008-10-22) 4.008 (CAPTTOFU on 2008-08-15) 4.007 (CAPTTOFU on 2008-05-11) 4.006 (CAPTTOFU on 2007-12-26) 4.005 (CAPTTOFU on 2007-06-08) 4.004 (CAPTTOFU on 2007-03-22) 4.003 (CAPTTOFU on 2007-03-02) 4.001 (CAPTTOFU on 2007-01-08) 4.00 (CAPTTOFU on 2006-12-24) 3.0008_1 DEV (CAPTTOFU on 2006-10-16) 3.0008 (CAPTTOFU on 2006-10-16) 3.0007_2 DEV (CAPTTOFU on 2006-10-07) 3.0007_1 DEV (CAPTTOFU on 2006-09-08) 3.0007 (CAPTTOFU on 2006-09-08) 3.0006_1 DEV (CAPTTOFU on 2006-06-11) 3.0006 (CAPTTOFU on 2006-06-11) 3.0005 (CAPTTOFU on 2006-06-10) 3.0005_1 DEV (CAPTTOFU on 2006-06-10) 3.0004_1 DEV (CAPTTOFU on 2006-05-21) 3.0004 (CAPTTOFU on 2006-05-21) 3.0003_1 DEV (CAPTTOFU on 2006-05-04) 3.0003 (CAPTTOFU on 2006-05-04) 3.0002_5 DEV (CAPTTOFU on 2006-02-01) 3.0002_4 DEV (CAPTTOFU on 2005-11-06) 3.0002_3 DEV (CAPTTOFU on 2005-09-28) 3.0002_2 DEV (CAPTTOFU on 2005-09-26) 3.0002_1 DEV (CAPTTOFU on 2005-08-04) 3.0002 (CAPTTOFU on 2005-07-11) 3.0001_3 DEV (CAPTTOFU on 2005-07-08) 3.0001_2 DEV (CAPTTOFU on 2005-07-07) 3.0001 (CAPTTOFU on 2005-07-07) 3.0001_1 DEV (CAPTTOFU on 2005-07-04) 3.0000_0 DEV (CAPTTOFU on 2005-07-03) 3.0000 (CAPTTOFU on 2005-07-01) 2.9008 (RUDY on 2005-06-06) 2.9007 (CAPTTOFU on 2005-04-27) 2.9015_3 DEV (CAPTTOFU on 2005-04-27) 2.9006 (RUDY on 2005-04-04) 2.9005 (CAPTTOFU on 2005-03-29) 2.9005_3 DEV (RUDY on 2004-10-28) 2.9005_1 DEV (RUDY on 2004-10-20) 2.9004 (RUDY on 2004-07-14) 2.9004_2 DEV (RUDY on 2004-07-01) 2.9003 (RUDY on 2003-10-27) 2.9003001 DEV (RUDY on 2003-09-12) 2.9002 (RUDY on 2003-06-27) 2.1028 (JWIED on 2003-06-25) 2.1027 (JWIED on 2003-05-31) 2.1026 (JWIED on 2003-03-03) 2.1025 (JWIED on 2003-02-07) 2.1024 (JWIED on 2003-01-20) 2.1023 (JWIED on 2003-01-19) 2.1022 (JWIED on 2003-01-03) 2.1021 (JWIED on 2002-12-17) 2.1020 (JWIED on 2002-09-23) 2.1019 (JWIED on 2002-09-16) 2.1018 (JWIED on 2002-08-13) 2.1017 (JWIED on 2002-05-02) 2.1016 (JWIED on 2002-05-01) 2.1015 (JWIED on 2002-04-29) 2.1014 (JWIED on 2002-04-17) 2.1013 (JWIED on 2002-04-15) 2.1012 (JWIED on 2002-04-12) 1.2212.86 (JWIED on 2000-04-15) 4.002 (CAPTTOFU on 2007-03-02) 3.0001_0 DEV (CAPTTOFU on 2005-07-04) 2.1011 (JWIED on 2002-02-12) 2.1010 (JWIED on 2002-01-07) 2.1009 (JWIED on 2002-01-01) 2.1008 (JWIED on 2001-12-28) 2.1006 (JWIED on 2001-12-27) 2.1007 (JWIED on 2001-12-27) 2.1005 (JWIED on 2001-12-13) 2.1004 (JWIED on 2001-11-13) 2.1003 (JWIED on 2001-11-05) 2.1002 (JWIED on 2001-11-04) 2.1001 (JWIED on 2001-11-04) 2.1000 (JWIED on 2001-10-31) 2.0903 (JWIED on 2001-10-28) 2.0902 (JWIED on 2001-07-09) 2.0901 (JWIED on 2001-05-25) 2.0900 (JWIED on 2001-05-06) Diff with version 4.034 (MICHIELB on 2016-07-06) 4.033_03 DEV (MICHIELB on 2016-07-04) 4.033_02 DEV (MICHIELB on 2015-12-18) 4.033_01 DEV (MICHIELB on 2015-12-15) 4.033 (CAPTTOFU on 2015-10-27) 4.032_03 DEV (MICHIELB on 2015-10-25) 4.032 (CAPTTOFU on 2015-07-21) 4.032_01 DEV (CAPTTOFU on 2015-04-16) 4.031 (CAPTTOFU on 2015-03-06) 4.030_02 DEV (MICHIELB on 2015-03-02) 4.030_01 DEV (CAPTTOFU on 2015-01-28) 4.029 (CAPTTOFU on 2014-12-09) 4.028 (CAPTTOFU on 2014-08-01) 4.027 (CAPTTOFU on 2014-03-19) 4.026 (CAPTTOFU on 2014-01-16) 4.025 (CAPTTOFU on 2013-11-04) 4.024 (CAPTTOFU on 2013-09-17) 4.023 (CAPTTOFU on 2013-04-12) 4.022 (CAPTTOFU on 2012-08-30) 4.021 (CAPTTOFU on 2012-04-28) 4.020 (CAPTTOFU on 2011-08-20) 4.019 (CAPTTOFU on 2011-05-09) 4.018 (CAPTTOFU on 2010-10-26) 4.017 (CAPTTOFU on 2010-08-12) 4.016 (CAPTTOFU on 2010-07-10) 4.015 (CAPTTOFU on 2010-07-09) 4.014 (CAPTTOFU on 2010-04-15) 4.013 (CAPTTOFU on 2009-09-16) 4.012 (CAPTTOFU on 2009-06-19) 4.011 (CAPTTOFU on 2009-04-14) 4.010 (CAPTTOFU on 2008-10-24) 4.009 (CAPTTOFU on 2008-10-22) 4.008 (CAPTTOFU on 2008-08-15) 4.007 (CAPTTOFU on 2008-05-11) 4.006 (CAPTTOFU on 2007-12-26) 4.005 (CAPTTOFU on 2007-06-08) 4.004 (CAPTTOFU on 2007-03-22) 4.003 (CAPTTOFU on 2007-03-02) 4.001 (CAPTTOFU on 2007-01-08) 4.00 (CAPTTOFU on 2006-12-24) 3.0008_1 DEV (CAPTTOFU on 2006-10-16) 3.0008 (CAPTTOFU on 2006-10-16) 3.0007_2 DEV (CAPTTOFU on 2006-10-07) 3.0007_1 DEV (CAPTTOFU on 2006-09-08) 3.0007 (CAPTTOFU on 2006-09-08) 3.0006_1 DEV (CAPTTOFU on 2006-06-11) 3.0006 (CAPTTOFU on 2006-06-11) 3.0005 (CAPTTOFU on 2006-06-10) 3.0005_1 DEV (CAPTTOFU on 2006-06-10) 3.0004_1 DEV (CAPTTOFU on 2006-05-21) 3.0004 (CAPTTOFU on 2006-05-21) 3.0003_1 DEV (CAPTTOFU on 2006-05-04) 3.0003 (CAPTTOFU on 2006-05-04) 3.0002_5 DEV (CAPTTOFU on 2006-02-01) 3.0002_4 DEV (CAPTTOFU on 2005-11-06) 3.0002_3 DEV (CAPTTOFU on 2005-09-28) 3.0002_2 DEV (CAPTTOFU on 2005-09-26) 3.0002_1 DEV (CAPTTOFU on 2005-08-04) 3.0002 (CAPTTOFU on 2005-07-11) 3.0001_3 DEV (CAPTTOFU on 2005-07-08) 3.0001_2 DEV (CAPTTOFU on 2005-07-07) 3.0001 (CAPTTOFU on 2005-07-07) 3.0001_1 DEV (CAPTTOFU on 2005-07-04) 3.0000_0 DEV (CAPTTOFU on 2005-07-03) 3.0000 (CAPTTOFU on 2005-07-01) 2.9008 (RUDY on 2005-06-06) 2.9007 (CAPTTOFU on 2005-04-27) 2.9015_3 DEV (CAPTTOFU on 2005-04-27) 2.9006 (RUDY on 2005-04-04) 2.9005 (CAPTTOFU on 2005-03-29) 2.9005_3 DEV (RUDY on 2004-10-28) 2.9005_1 DEV (RUDY on 2004-10-20) 2.9004 (RUDY on 2004-07-14) 2.9004_2 DEV (RUDY on 2004-07-01) 2.9003 (RUDY on 2003-10-27) 2.9003001 DEV (RUDY on 2003-09-12) 2.9002 (RUDY on 2003-06-27) 2.1028 (JWIED on 2003-06-25) 2.1027 (JWIED on 2003-05-31) 2.1026 (JWIED on 2003-03-03) 2.1025 (JWIED on 2003-02-07) 2.1024 (JWIED on 2003-01-20) 2.1023 (JWIED on 2003-01-19) 2.1022 (JWIED on 2003-01-03) 2.1021 (JWIED on 2002-12-17) 2.1020 (JWIED on 2002-09-23) 2.1019 (JWIED on 2002-09-16) 2.1018 (JWIED on 2002-08-13) 2.1017 (JWIED on 2002-05-02) 2.1016 (JWIED on 2002-05-01) 2.1015 (JWIED on 2002-04-29) 2.1014 (JWIED on 2002-04-17) 2.1013 (JWIED on 2002-04-15) 2.1012 (JWIED on 2002-04-12) 1.2212.86 (JWIED on 2000-04-15) 4.002 (CAPTTOFU on 2007-03-02) 3.0001_0 DEV (CAPTTOFU on 2005-07-04) 2.1011 (JWIED on 2002-02-12) 2.1010 (JWIED on 2002-01-07) 2.1009 (JWIED on 2002-01-01) 2.1008 (JWIED on 2001-12-28) 2.1006 (JWIED on 2001-12-27) 2.1007 (JWIED on 2001-12-27) 2.1005 (JWIED on 2001-12-13) 2.1004 (JWIED on 2001-11-13) 2.1003 (JWIED on 2001-11-05) 2.1002 (JWIED on 2001-11-04) 2.1001 (JWIED on 2001-11-04) 2.1000 (JWIED on 2001-10-31) 2.0903 (JWIED on 2001-10-28) 2.0902 (JWIED on 2001-07-09) 2.0901 (JWIED on 2001-05-25) 2.0900 (JWIED on 2001-05-06) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 20 PAUSE users 18 non-PAUSE users. MICHIELB Michiel Beijen and 48 contributors show them Patrick Galbraith Alexandr Ciornii Alexey Molchanov Amiri Barksdale at Home Aran Deltac Bernt M. Johnsen Chase Whitener Chip Salzenberg Chris Hammond Chris Weyl Christian Walde Dagfinn Ilmari Mannsåker Daisuke Murase Damyan Ivanov Daniël van Eeden David Farrell David Steinbrunner Giovanni Bechis Graham Ollis Hanno James McCoy Jim Winstead Juergen Weigert Kenny Gryp Lu Shengliang Masahiro Chiba Matthew Horsfall (alh) Mike Pomraning Pali Perlover Petr Písař Reini Urban Rob Hoelz Rob Van Dam Rudy Lippan Scimon Sergey Zhuravlev Sergiy Borodych Sharif Nassar Steffen Mueller Steven Hartland Taro Kobayashi Tatsuhiko Miyagawa Tim Mullin katyavoid tokuhirom zefram zentooo Dependencies DBI and possibly others CPAN Testers List Reverse dependencies Dependency graph × DBD-mysql-4.035 NAME SYNOPSIS EXAMPLE DESCRIPTION Class Methods Private MetaData Methods Server Administration DATABASE HANDLES STATEMENT HANDLES TRANSACTION SUPPORT MULTIPLE RESULT SETS Issues with multiple result sets MULTITHREADING ASYNCHRONOUS QUERIES INSTALLATION AUTHORS CONTRIBUTIONS COPYRIGHT LICENSE MAILING LIST SUPPORT ADDITIONAL DBI INFORMATION BUG REPORTING, ENHANCEMENT/FEATURE REQUESTS NAME DBD::mysql - MySQL driver for the Perl5 Database Interface (DBI) SYNOPSIS     use DBI;      $dsn = ""DBI:mysql:database=$database;host=$hostname;port=$port"";      $dbh = DBI->connect($dsn, $user, $password);       $drh = DBI->install_driver(""mysql"");     @databases = DBI->data_sources(""mysql"");        or     @databases = DBI->data_sources(""mysql"",       {""host"" => $host, ""port"" => $port, ""user"" => $user, password => $pass});      $sth = $dbh->prepare(""SELECT * FROM foo WHERE bla"");        or     $sth = $dbh->prepare(""LISTFIELDS $table"");        or     $sth = $dbh->prepare(""LISTINDEX $table $index"");     $sth->execute;     $numRows = $sth->rows;     $numFields = $sth->{'NUM_OF_FIELDS'};     $sth->finish;      $rc = $drh->func('createdb', $database, $host, $user, $password, 'admin');     $rc = $drh->func('dropdb', $database, $host, $user, $password, 'admin');     $rc = $drh->func('shutdown', $host, $user, $password, 'admin');     $rc = $drh->func('reload', $host, $user, $password, 'admin');      $rc = $dbh->func('createdb', $database, 'admin');     $rc = $dbh->func('dropdb', $database, 'admin');     $rc = $dbh->func('shutdown', 'admin');     $rc = $dbh->func('reload', 'admin'); EXAMPLE   #!/usr/bin/perl    use strict;   use warnings;   use DBI;    # Connect to the database.   my $dbh = DBI->connect(""DBI:mysql:database=test;host=localhost"",                          ""joe"", ""joe's password"",                          {'RaiseError' => 1});    # Drop table 'foo'. This may fail, if 'foo' doesn't exist   # Thus we put an eval around it.   eval { $dbh->do(""DROP TABLE foo"") };   print ""Dropping foo failed: $@\n"" if $@;    # Create a new table 'foo'. This must not fail, thus we don't   # catch errors.   $dbh->do(""CREATE TABLE foo (id INTEGER, name VARCHAR(20))"");    # INSERT some data into 'foo'. We are using $dbh->quote() for   # quoting the name.   $dbh->do(""INSERT INTO foo VALUES (1, "" . $dbh->quote(""Tim"") . "")"");    # same thing, but using placeholders (recommended!)   $dbh->do(""INSERT INTO foo VALUES (?, ?)"", undef, 2, ""Jochen"");    # now retrieve data from the table.   my $sth = $dbh->prepare(""SELECT * FROM foo"");   $sth->execute();   while (my $ref = $sth->fetchrow_hashref()) {     print ""Found a row: id = $ref->{'id'}, name = $ref->{'name'}\n"";   }   $sth->finish();    # Disconnect from the database.   $dbh->disconnect(); DESCRIPTION DBD::mysql is the Perl5 Database Interface driver for the MySQL database. In other words: DBD::mysql is an interface between the Perl programming language and the MySQL programming API that comes with the MySQL relational database management system. Most functions provided by this programming API are supported. Some rarely used functions are missing, mainly because no-one ever requested them. :-) In what follows we first discuss the use of DBD::mysql, because this is what you will need the most. For installation, see the separate document DBD::mysql::INSTALL. See ""EXAMPLE"" for a simple example above. From perl you activate the interface with the statement   use DBI; After that you can connect to multiple MySQL database servers and send multiple queries to any of them via a simple object oriented interface. Two types of objects are available: database handles and statement handles. Perl returns a database handle to the connect method like so:   $dbh = DBI->connect(""DBI:mysql:database=$db;host=$host"",     $user, $password, {RaiseError => 1}); Once you have connected to a database, you can execute SQL statements with:   my $query = sprintf(""INSERT INTO foo VALUES (%d, %s)"",                       $number, $dbh->quote(""name""));   $dbh->do($query); See DBI for details on the quote and do methods. An alternative approach is   $dbh->do(""INSERT INTO foo VALUES (?, ?)"", undef,            $number, $name); in which case the quote method is executed automatically. See also the bind_param method in DBI. See ""DATABASE HANDLES"" below for more details on database handles. If you want to retrieve results, you need to create a so-called statement handle with:   $sth = $dbh->prepare(""SELECT * FROM $table"");   $sth->execute(); This statement handle can be used for multiple things. First of all you can retrieve a row of data:   my $row = $sth->fetchrow_hashref(); If your table has columns ID and NAME, then $row will be hash ref with keys ID and NAME. See ""STATEMENT HANDLES"" below for more details on statement handles. But now for a more formal approach: Class Methods connect     use DBI;      $dsn = ""DBI:mysql:$database"";     $dsn = ""DBI:mysql:database=$database;host=$hostname"";     $dsn = ""DBI:mysql:database=$database;host=$hostname;port=$port"";      $dbh = DBI->connect($dsn, $user, $password); The database is not a required attribute, but please note that MySQL has no such thing as a default database. If you don't specify the database at connection time your active database will be null and you'd need to prefix your tables with the database name; i.e. 'SELECT * FROM mydb.mytable'. This is similar to the behavior of the mysql command line client. Also, 'SELECT DATABASE()' will return the current database active for the handle. host port The hostname, if not specified or specified as '' or 'localhost', will default to a MySQL server running on the local machine using the default for the UNIX socket. To connect to a MySQL server on the local machine via TCP, you must specify the loopback IP address (127.0.0.1) as the host. Should the MySQL server be running on a non-standard port number, you may explicitly state the port number to connect to in the hostname argument, by concatenating the hostname and port number together separated by a colon ( : ) character or by using the port argument. To connect to a MySQL server on localhost using TCP/IP, you must specify the hostname as 127.0.0.1 (with the optional port). When connecting to a MySQL Server with IPv6, a bracketed IPv6 address should be used. Example DSN:   my $dsn = ""DBI:mysql:;host=[1a12:2800:6f2:85::f20:8cf];port=3306""; mysql_client_found_rows Enables (TRUE value) or disables (FALSE value) the flag CLIENT_FOUND_ROWS while connecting to the MySQL server. This has a somewhat funny effect: Without mysql_client_found_rows, if you perform a query like   UPDATE $table SET id = 1 WHERE id = 1; then the MySQL engine will always return 0, because no rows have changed. With mysql_client_found_rows however, it will return the number of rows that have an id 1, as some people are expecting. (At least for compatibility to other engines.) mysql_compression If your DSN contains the option ""mysql_compression=1"", then the communication between client and server will be compressed. mysql_connect_timeout If your DSN contains the option ""mysql_connect_timeout=##"", the connect request to the server will timeout if it has not been successful after the given number of seconds. mysql_write_timeout If your DSN contains the option ""mysql_write_timeout=##"", the write operation to the server will timeout if it has not been successful after the given number of seconds. mysql_read_timeout If your DSN contains the option ""mysql_read_timeout=##"", the read operation to the server will timeout if it has not been successful after the given number of seconds. mysql_init_command If your DSN contains the option ""mysql_init_command=##"", then this SQL statement is executed when connecting to the MySQL server. It is automatically re-executed if reconnection occurs. mysql_skip_secure_auth This option is for older mysql databases that don't have secure auth set. mysql_read_default_file mysql_read_default_group These options can be used to read a config file like /etc/my.cnf or ~/.my.cnf. By default MySQL's C client library doesn't use any config files unlike the client programs (mysql, mysqladmin, ...) that do, but outside of the C client library. Thus you need to explicitly request reading a config file, as in     $dsn = ""DBI:mysql:test;mysql_read_default_file=/home/joe/my.cnf"";     $dbh = DBI->connect($dsn, $user, $password) The option mysql_read_default_group can be used to specify the default group in the config file: Usually this is the client group, but see the following example:     [client]     host=localhost      [perl]     host=perlhost (Note the order of the entries! The example won't work, if you reverse the [client] and [perl] sections!) If you read this config file, then you'll be typically connected to localhost. However, by using     $dsn = ""DBI:mysql:test;mysql_read_default_group=perl;""         . ""mysql_read_default_file=/home/joe/my.cnf"";     $dbh = DBI->connect($dsn, $user, $password); you'll be connected to perlhost. Note that if you specify a default group and do not specify a file, then the default config files will all be read. See the documentation of the C function mysql_options() for details. mysql_socket It is possible to choose the Unix socket that is used for connecting to the server. This is done, for example, with     mysql_socket=/dev/mysql Usually there's no need for this option, unless you are using another location for the socket than that built into the client. mysql_ssl A true value turns on the CLIENT_SSL flag when connecting to the MySQL database:   mysql_ssl=1 This means that your communication with the server will be encrypted. Please note that this can only work if you enabled SSL when compiling DBD::mysql; this is the default starting version 4.034. See DBD::mysql::INSTALL for more details. If you turn mysql_ssl on, you might also wish to use the following flags: mysql_ssl_client_key mysql_ssl_client_cert mysql_ssl_ca_file mysql_ssl_ca_path mysql_ssl_cipher These are used to specify the respective parameters of a call to mysql_ssl_set, if mysql_ssl is turned on. mysql_local_infile The LOCAL capability for LOAD DATA may be disabled in the MySQL client library by default. If your DSN contains the option ""mysql_local_infile=1"", LOAD DATA LOCAL will be enabled. (However, this option is *ineffective* if the server has also been configured to disallow LOCAL.) mysql_multi_statements Support for multiple statements separated by a semicolon (;) may be enabled by using this option. Enabling this option may cause problems if server-side prepared statements are also enabled. Prepared statement support (server side prepare) To use server side prepared statements, all you need to do is set the variable mysql_server_prepare in the connect:   $dbh = DBI->connect(     ""DBI:mysql:database=test;host=localhost;mysql_server_prepare=1"",     """",     """",     { RaiseError => 1, AutoCommit => 1 }   ); There are many benefits to using server side prepare statements, mostly if you are performing many inserts because of that fact that a single statement is prepared to accept multiple insert values. To make sure that the 'make test' step tests whether server prepare works, you just need to export the env variable MYSQL_SERVER_PREPARE:   export MYSQL_SERVER_PREPARE=1 mysql_embedded_options The option <mysql_embedded_options> can be used to pass 'command-line' options to embedded server. Example:   use DBI;   $testdsn=""DBI:mysqlEmb:database=test;mysql_embedded_options=--help,--verbose"";   $dbh = DBI->connect($testdsn,""a"",""b""); This would cause the command line help to the embedded MySQL server library to be printed. mysql_embedded_groups The option <mysql_embedded_groups> can be used to specify the groups in the config file(my.cnf) which will be used to get options for embedded server. If not specified [server] and [embedded] groups will be used. Example:   $testdsn=""DBI:mysqlEmb:database=test;mysql_embedded_groups=embedded_server,common""; mysql_conn_attrs The option <mysql_conn_attrs> is a hash of attribute names and values which can be used to send custom connection attributes to the server. Some attributes like '_os', '_platform', '_client_name' and '_client_version' are added by libmysqlclient and 'program_name' is added by DBD::mysql. You can then later read these attributes from the performance schema tables which can be quite helpful for profiling your database or creating statistics. You'll have to use a MySQL 5.6 server and libmysqlclient or newer to leverage this feature.   my $dbh= DBI->connect($dsn, $user, $password,     { AutoCommit => 0,       mysql_conn_attrs => {         foo => 'bar',         wiz => 'bang'       },     }); Now you can select the results from the performance schema tables. You can do this in the same session, but also afterwards. It can be very useful to answer questions like 'which script sent this query?'.   my $results = $dbh->selectall_hashref(     'SELECT * FROM performance_schema.session_connect_attrs',     'ATTR_NAME'   ); This returns:   $result = {     'foo' => {         'ATTR_VALUE'       => 'bar',         'PROCESSLIST_ID'   => '3',         'ATTR_NAME'        => 'foo',         'ORDINAL_POSITION' => '6'     },     'wiz' => {         'ATTR_VALUE'       => 'bang',         'PROCESSLIST_ID'   => '3',         'ATTR_NAME'        => 'wiz',         'ORDINAL_POSITION' => '3'     },     'program_name' => {         'ATTR_VALUE'       => './foo.pl',         'PROCESSLIST_ID'   => '3',         'ATTR_NAME'        => 'program_name',         'ORDINAL_POSITION' => '5'     },     '_client_name' => {         'ATTR_VALUE'       => 'libmysql',         'PROCESSLIST_ID'   => '3',         'ATTR_NAME'        => '_client_name',         'ORDINAL_POSITION' => '1'     },     '_client_version' => {         'ATTR_VALUE'       => '5.6.24',         'PROCESSLIST_ID'   => '3',         'ATTR_NAME'        => '_client_version',         'ORDINAL_POSITION' => '7'     },     '_os' => {         'ATTR_VALUE'       => 'osx10.8',         'PROCESSLIST_ID'   => '3',         'ATTR_NAME'        => '_os',         'ORDINAL_POSITION' => '0'     },     '_pid' => {         'ATTR_VALUE'       => '59860',         'PROCESSLIST_ID'   => '3',         'ATTR_NAME'        => '_pid',         'ORDINAL_POSITION' => '2'     },     '_platform' => {         'ATTR_VALUE'       => 'x86_64',         'PROCESSLIST_ID'   => '3',         'ATTR_NAME'        => '_platform',         'ORDINAL_POSITION' => '4'     }   }; Private MetaData Methods ListDBs     my $drh = DBI->install_driver(""mysql"");     @dbs = $drh->func(""$hostname:$port"", '_ListDBs');     @dbs = $drh->func($hostname, $port, '_ListDBs');     @dbs = $dbh->func('_ListDBs'); Returns a list of all databases managed by the MySQL server running on $hostname, port $port. This is a legacy method. Instead, you should use the portable method     @dbs = DBI->data_sources(""mysql""); Server Administration admin     $rc = $drh->func(""createdb"", $dbname, [host, user, password,], 'admin');     $rc = $drh->func(""dropdb"", $dbname, [host, user, password,], 'admin');     $rc = $drh->func(""shutdown"", [host, user, password,], 'admin');     $rc = $drh->func(""reload"", [host, user, password,], 'admin');        or      $rc = $dbh->func(""createdb"", $dbname, 'admin');     $rc = $dbh->func(""dropdb"", $dbname, 'admin');     $rc = $dbh->func(""shutdown"", 'admin');     $rc = $dbh->func(""reload"", 'admin'); For server administration you need a server connection. For obtaining this connection you have two options: Either use a driver handle (drh) and supply the appropriate arguments (host, defaults localhost, user, defaults to '' and password, defaults to ''). A driver handle can be obtained with     $drh = DBI->install_driver('mysql'); Otherwise reuse the existing connection of a database handle (dbh). There's only one function available for administrative purposes, comparable to the mysqladmin programs. The command being execute depends on the first argument: createdb Creates the database $dbname. Equivalent to ""mysqladmin create $dbname"". dropdb Drops the database $dbname. Equivalent to ""mysqladmin drop $dbname"". It should be noted that database deletion is not prompted for in any way. Nor is it undo-able from DBI.     Once you issue the dropDB() method, the database will be gone! These method should be used at your own risk. shutdown Silently shuts down the database engine. (Without prompting!) Equivalent to ""mysqladmin shutdown"". reload Reloads the servers configuration files and/or tables. This can be particularly important if you modify access privileges or create new users. DATABASE HANDLES The DBD::mysql driver supports the following attributes of database handles (read only):   $errno = $dbh->{'mysql_errno'};   $error = $dbh->{'mysql_error'};   $info = $dbh->{'mysql_hostinfo'};   $info = $dbh->{'mysql_info'};   $insertid = $dbh->{'mysql_insertid'};   $info = $dbh->{'mysql_protoinfo'};   $info = $dbh->{'mysql_serverinfo'};   $info = $dbh->{'mysql_stat'};   $threadId = $dbh->{'mysql_thread_id'}; These correspond to mysql_errno(), mysql_error(), mysql_get_host_info(), mysql_info(), mysql_insert_id(), mysql_get_proto_info(), mysql_get_server_info(), mysql_stat() and mysql_thread_id(), respectively. mysql_clientinfo List information of the MySQL client library that DBD::mysql was built against:   print ""$dbh->{mysql_clientinfo}\n"";    5.2.0-MariaDB mysql_clientversion   print ""$dbh->{mysql_clientversion}\n"";    50200 mysql_serverversion   print ""$dbh->{mysql_serverversion}\n"";    50200 mysql_dbd_stats   $info_hashref = $dhb->{mysql_dbd_stats}; DBD::mysql keeps track of some statistics in the mysql_dbd_stats attribute. The following stats are being maintained: auto_reconnects_ok The number of times that DBD::mysql successfully reconnected to the mysql server. auto_reconnects_failed The number of times that DBD::mysql tried to reconnect to mysql but failed. The DBD::mysql driver also supports the following attributes of database handles (read/write): mysql_auto_reconnect This attribute determines whether DBD::mysql will automatically reconnect to mysql if the connection be lost. This feature defaults to off; however, if either the GATEWAY_INTERFACE or MOD_PERL environment variable is set, DBD::mysql will turn mysql_auto_reconnect on. Setting mysql_auto_reconnect to on is not advised if 'lock tables' is used because if DBD::mysql reconnect to mysql all table locks will be lost. This attribute is ignored when AutoCommit is turned off, and when AutoCommit is turned off, DBD::mysql will not automatically reconnect to the server. It is also possible to set the default value of the mysql_auto_reconnect attribute for the $dbh by passing it in the \%attr hash for DBI-connect>.   $dbh->{mysql_auto_reconnect} = 1; or   my $dbh = DBI->connect($dsn, $user, $password, {      mysql_auto_reconnect => 1,   }); Note that if you are using a module or framework that performs reconnections for you (for example DBIx::Connector in fixup mode), this value must be set to 0. mysql_use_result This attribute forces the driver to use mysql_use_result rather than mysql_store_result. The former is faster and less memory consuming, but tends to block other processes. mysql_store_result is the default due to that fact storing the result is expected behavior with most applications. It is possible to set the default value of the mysql_use_result attribute for the $dbh via the DSN:   $dbh = DBI->connect(""DBI:mysql:test;mysql_use_result=1"", ""root"", """"); You can also set it after creation of the database handle:    $dbh->{mysql_use_result} = 0; # disable    $dbh->{mysql_use_result} = 1; # enable You can also set or unset the mysql_use_result setting on your statement handle, when creating the statement handle or after it has been created. See ""STATEMENT HANDLES"". mysql_enable_utf8 This attribute determines whether DBD::mysql should assume strings stored in the database are utf8. This feature defaults to off. When set, a data retrieved from a textual column type (char, varchar, etc) will have the UTF-8 flag turned on if necessary. This enables character semantics on that string. You will also need to ensure that your database / table / column is configured to use UTF8. See for more information the chapter on character set support in the MySQL manual: http://dev.mysql.com/doc/refman/5.7/en/charset.html Additionally, turning on this flag tells MySQL that incoming data should be treated as UTF-8. This will only take effect if used as part of the call to connect(). If you turn the flag on after connecting, you will need to issue the command SET NAMES utf8 to get the same effect. mysql_enable_utf8mb4 This is similar to mysql_enable_utf8, but is capable of handling 4-byte UTF-8 characters. mysql_bind_type_guessing This attribute causes the driver (emulated prepare statements) to attempt to guess if a value being bound is a numeric value, and if so, doesn't quote the value. This was created by Dragonchild and is one way to deal with the performance issue of using quotes in a statement that is inserting or updating a large numeric value. This was previously called unsafe_bind_type_guessing because it is experimental. I have successfully run the full test suite with this option turned on, the name can now be simply mysql_bind_type_guessing. CAVEAT: Even though you can insert an integer value into a character column, if this column is indexed, if you query that column with the integer value not being quoted, it will not use the index:     MariaDB [test]> explain select * from test where value0 = '3' \G     *************************** 1. row ***************************                id: 1       select_type: SIMPLE             table: test              type: ref     possible_keys: value0               key: value0           key_len: 13               ref: const              rows: 1             Extra: Using index condition     1 row in set (0.00 sec)      MariaDB [test]> explain select * from test where value0 = 3         -> \G     *************************** 1. row ***************************                id: 1       select_type: SIMPLE             table: test              type: ALL     possible_keys: value0               key: NULL           key_len: NULL               ref: NULL              rows: 6             Extra: Using where     1 row in set (0.00 sec) See bug: https://rt.cpan.org/Ticket/Display.html?id=43822 mysql_bind_type_guessing can be turned on via  - through DSN    my $dbh= DBI->connect('DBI:mysql:test', 'username', 'pass',   { mysql_bind_type_guessing => 1})    - OR after handle creation    $dbh->{mysql_bind_type_guessing} = 1; mysql_bind_comment_placeholders This attribute causes the driver (emulated prepare statements) will cause any placeholders in comments to be bound. This is not correct prepared statement behavior, but some developers have come to depend on this behavior, so I have made it available in 4.015 mysql_no_autocommit_cmd This attribute causes the driver to not issue 'set autocommit' either through explicit or using mysql_autocommit(). This is particularly useful in the case of using MySQL Proxy. See the bug report: https://rt.cpan.org/Public/Bug/Display.html?id=46308 mysql_no_autocommit_cmd can be turned on when creating the database handle:   my $dbh = DBI->connect('DBI:mysql:test', 'username', 'pass',   { mysql_no_autocommit_cmd => 1}); or using an existing database handle:   $dbh->{mysql_no_autocommit_cmd} = 1; STATEMENT HANDLES The statement handles of DBD::mysql support a number of attributes. You access these by using, for example,   my $numFields = $sth->{NUM_OF_FIELDS}; Note, that most attributes are valid only after a successful execute. An undef value will returned otherwise. The most important exception is the mysql_use_result attribute, which forces the driver to use mysql_use_result rather than mysql_store_result. The former is faster and less memory consuming, but tends to block other processes. (That's why mysql_store_result is the default.) To set the mysql_use_result attribute, use either of the following:   my $sth = $dbh->prepare(""QUERY"", { mysql_use_result => 1}); or   my $sth = $dbh->prepare($sql);   $sth->{mysql_use_result} = 1; Column dependent attributes, for example NAME, the column names, are returned as a reference to an array. The array indices are corresponding to the indices of the arrays returned by fetchrow and similar methods. For example the following code will print a header of table names together with all rows:   my $sth = $dbh->prepare(""SELECT * FROM $table"") ||     die ""Error:"" . $dbh->errstr . ""\n"";    $sth->execute ||  die ""Error:"" . $sth->errstr . ""\n"";    my $names = $sth->{NAME};   my $numFields = $sth->{'NUM_OF_FIELDS'} - 1;   for my $i ( 0..$numFields ) {       printf(""%s%s"", $i ? "","" : """", $$names[$i]);   }   print ""\n"";   while (my $ref = $sth->fetchrow_arrayref) {       for my $i ( 0..$numFields ) {       printf(""%s%s"", $i ? "","" : """", $$ref[$i]);       }       print ""\n"";   } For portable applications you should restrict yourself to attributes with capitalized or mixed case names. Lower case attribute names are private to DBD::mysql. The attribute list includes: ChopBlanks this attribute determines whether a fetchrow will chop preceding and trailing blanks off the column values. Chopping blanks does not have impact on the max_length attribute. mysql_insertid MySQL has the ability to choose unique key values automatically. If this happened, the new ID will be stored in this attribute. An alternative way for accessing this attribute is via $dbh->{'mysql_insertid'}. (Note we are using the $dbh in this case!) mysql_is_blob Reference to an array of boolean values; TRUE indicates, that the respective column is a blob. This attribute is valid for MySQL only. mysql_is_key Reference to an array of boolean values; TRUE indicates, that the respective column is a key. This is valid for MySQL only. mysql_is_num Reference to an array of boolean values; TRUE indicates, that the respective column contains numeric values. mysql_is_pri_key Reference to an array of boolean values; TRUE indicates, that the respective column is a primary key. mysql_is_auto_increment Reference to an array of boolean values; TRUE indicates that the respective column is an AUTO_INCREMENT column. This is only valid for MySQL. mysql_length mysql_max_length A reference to an array of maximum column sizes. The max_length is the maximum physically present in the result table, length gives the theoretically possible maximum. max_length is valid for MySQL only. NAME A reference to an array of column names. NULLABLE A reference to an array of boolean values; TRUE indicates that this column may contain NULL's. NUM_OF_FIELDS Number of fields returned by a SELECT or LISTFIELDS statement. You may use this for checking whether a statement returned a result: A zero value indicates a non-SELECT statement like INSERT, DELETE or UPDATE. mysql_table A reference to an array of table names, useful in a JOIN result. TYPE A reference to an array of column types. The engine's native column types are mapped to portable types like DBI::SQL_INTEGER() or DBI::SQL_VARCHAR(), as good as possible. Not all native types have a meaningful equivalent, for example DBD::mysql::FIELD_TYPE_INTERVAL is mapped to DBI::SQL_VARCHAR(). If you need the native column types, use mysql_type. See below. mysql_type A reference to an array of MySQL's native column types, for example DBD::mysql::FIELD_TYPE_SHORT() or DBD::mysql::FIELD_TYPE_STRING(). Use the TYPE attribute, if you want portable types like DBI::SQL_SMALLINT() or DBI::SQL_VARCHAR(). mysql_type_name Similar to mysql, but type names and not numbers are returned. Whenever possible, the ANSI SQL name is preferred. mysql_warning_count The number of warnings generated during execution of the SQL statement. This attribute is available on both statement handles and database handles. TRANSACTION SUPPORT The transaction support works as follows: By default AutoCommit mode is on, following the DBI specifications. If you execute   $dbh->{AutoCommit} = 0; or   $dbh->{AutoCommit} = 1; then the driver will set the MySQL server variable autocommit to 0 or 1, respectively. Switching from 0 to 1 will also issue a COMMIT, following the DBI specifications. The methods     $dbh->rollback();     $dbh->commit(); will issue the commands ROLLBACK and COMMIT, respectively. A ROLLBACK will also be issued if AutoCommit mode is off and the database handles DESTROY method is called. Again, this is following the DBI specifications. Given the above, you should note the following: You should never change the server variable autocommit manually, unless you are ignoring DBI's transaction support. Switching AutoCommit mode from on to off or vice versa may fail. You should always check for errors when changing AutoCommit mode. The suggested way of doing so is using the DBI flag RaiseError. If you don't like RaiseError, you have to use code like the following:   $dbh->{AutoCommit} = 0;   if ($dbh->{AutoCommit}) {     # An error occurred!   } If you detect an error while changing the AutoCommit mode, you should no longer use the database handle. In other words, you should disconnect and reconnect again, because the transaction mode is unpredictable. Alternatively you may verify the transaction mode by checking the value of the server variable autocommit. However, such behaviour isn't portable. DBD::mysql has a ""reconnect"" feature that handles the so-called MySQL ""morning bug"": If the server has disconnected, most probably due to a timeout, then by default the driver will reconnect and attempt to execute the same SQL statement again. However, this behaviour is disabled when AutoCommit is off: Otherwise the transaction state would be completely unpredictable after a reconnect. The ""reconnect"" feature of DBD::mysql can be toggled by using the mysql_auto_reconnect attribute. This behaviour should be turned off in code that uses LOCK TABLE because if the database server time out and DBD::mysql reconnect, table locks will be lost without any indication of such loss. MULTIPLE RESULT SETS DBD::mysql supports multiple result sets, thanks to Guy Harrison! The basic usage of multiple result sets is   do   {     while (@row = $sth->fetchrow_array())     {       do stuff;     }   } while ($sth->more_results) An example would be:   $dbh->do(""drop procedure if exists someproc"") or print $DBI::errstr;    $dbh->do(""create procedure someproc() deterministic    begin    declare a,b,c,d int;    set a=1;    set b=2;    set c=3;    set d=4;    select a, b, c, d;    select d, c, b, a;    select b, a, c, d;    select c, b, d, a;   end"") or print $DBI::errstr;    $sth=$dbh->prepare('call someproc()') ||   die $DBI::err."": "".$DBI::errstr;    $sth->execute || die DBI::err."": "".$DBI::errstr; $rowset=0;   do {     print ""\nRowset "".++$i.""\n---------------------------------------\n\n"";     foreach $colno (0..$sth->{NUM_OF_FIELDS}-1) {       print $sth->{NAME}->[$colno].""\t"";     }     print ""\n"";     while (@row= $sth->fetchrow_array())  {       foreach $field (0..$#row) {         print $row[$field].""\t"";       }       print ""\n"";     }   } until (!$sth->more_results) Issues with multiple result sets Please be aware there could be issues if your result sets are ""jagged"", meaning the number of columns of your results vary. Varying numbers of columns could result in your script crashing. MULTITHREADING The multithreading capabilities of DBD::mysql depend completely on the underlying C libraries. The modules are working with handle data only, no global variables are accessed or (to the best of my knowledge) thread unsafe functions are called. Thus DBD::mysql is believed to be completely thread safe, if the C libraries are thread safe and you don't share handles among threads. The obvious question is: Are the C libraries thread safe? In the case of MySQL the answer is ""mostly"" and, in theory, you should be able to get a ""yes"", if the C library is compiled for being thread safe (By default it isn't.) by passing the option -with-thread-safe-client to configure. See the section on How to make a threadsafe client in the manual. ASYNCHRONOUS QUERIES You can make a single asynchronous query per MySQL connection; this allows you to submit a long-running query to the server and have an event loop inform you when it's ready. An asynchronous query is started by either setting the 'async' attribute to a true value in the ""do"" in DBI method, or in the ""prepare"" in DBI method. Statements created with 'async' set to true in prepare always run their queries asynchronously when ""execute"" in DBI is called. The driver also offers three additional methods: mysql_async_result, mysql_async_ready, and mysql_fd. mysql_async_result returns what do or execute would have; that is, the number of rows affected. mysql_async_ready returns true if mysql_async_result will not block, and zero otherwise. They both return undef if that handle is not currently running an asynchronous query. mysql_fd returns the file descriptor number for the MySQL connection; you can use this in an event loop. Here's an example of how to use the asynchronous query interface:   use feature 'say';   $dbh->do('SELECT SLEEP(10)', { async => 1 });   until($dbh->mysql_async_ready) {     say 'not ready yet!';     sleep 1;   }   my $rows = $dbh->mysql_async_result; INSTALLATION See DBD::mysql::INSTALL. AUTHORS Originally, there was a non-DBI driver, Mysql, which was much like PHP drivers such as mysql and mysqli. The Mysql module was originally written by Andreas König <koenig@kulturbox.de> who still, to this day, contributes patches to DBD::mysql. An emulated version of Mysql was provided to DBD::mysql from Jochen Wiedmann, but eventually deprecated as it was another bundle of code to maintain. The first incarnation of DBD::mysql was developed by Alligator Descartes, who was also aided and abetted by Gary Shea, Andreas König and Tim Bunce. The current incarnation of DBD::mysql was written by Jochen Wiedmann, then numerous changes and bug-fixes were added by Rudy Lippan. Next, prepared statement support was added by Patrick Galbraith and Alexy Stroganov (who also solely added embedded server support). For the past nine years DBD::mysql has been maintained by Patrick Galbraith (patg@patg.net), and recently with the great help of Michiel Beijen (michiel.beijen@gmail.com), along with the entire community of Perl developers who keep sending patches to help continue improving DBD::mysql CONTRIBUTIONS Anyone who desires to contribute to this project is encouraged to do so. Currently, the source code for this project can be found at Github: https://github.com/perl5-dbi/DBD-mysql/ Either fork this repository and produce a branch with your changeset that the maintainer can merge to his tree, or create a diff with git. The maintainer is more than glad to take contributions from the community as many features and fixes from DBD::mysql have come from the community. COPYRIGHT This module is Large Portions Copyright (c) 2004-2013 Patrick Galbraith Large Portions Copyright (c) 2004-2006 Alexey Stroganov Large Portions Copyright (c) 2003-2005 Rudolf Lippan Large Portions Copyright (c) 1997-2003 Jochen Wiedmann, with code portions Copyright (c)1994-1997 their original authors LICENSE This module is released under the same license as Perl itself. See http://www.perl.com/perl/misc/Artistic.html for details. MAILING LIST SUPPORT This module is maintained and supported on a mailing list, dbi-users. To subscribe to this list, send an email to dbi-users-subscribe@perl.org Mailing list archives are at http://groups.google.com/group/perl.dbi.users?hl=en&lr= ADDITIONAL DBI INFORMATION Additional information on the DBI project can be found on the World Wide Web at the following URL: http://dbi.perl.org where documentation, pointers to the mailing lists and mailing list archives and pointers to the most current versions of the modules can be used. Information on the DBI interface itself can be gained by typing:     perldoc DBI Information on DBD::mysql specifically can be gained by typing:     perldoc DBD::mysql (this will display the document you're currently reading) BUG REPORTING, ENHANCEMENT/FEATURE REQUESTS Please report bugs, including all the information needed such as DBD::mysql version, MySQL version, OS type/version, etc to this link: https://rt.cpan.org/Dist/Display.html?Name=DBD-mysql Note: until recently, MySQL/Sun/Oracle responded to bugs and assisted in fixing bugs which many thanks should be given for their help! This driver is outside the realm of the numerous components they support, and the maintainer and community solely support DBD::mysql × Module Install Instructions To install DBD::mysql, simply copy and paste either of the commands in to your terminal cpanm                      cpanm DBD::mysql CPAN shell                      perl -MCPAN -e shell                     install DBD::mysql For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Relational Databases"	"DBD::ODBC"	"https://metacpan.org/pod/DBD::ODBC"	"Any ODBC Driver. MS-SQL w/ placeholders"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DBD::ODBC - ODBC Driver for DBI - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Martin J Evans  /  1.53_2 DEV (MJEVANS on 2016-02-17) 1.53_1 DEV (MJEVANS on 2015-10-16) 1.52 (MJEVANS on 2015-04-15) 1.51_4 DEV (MJEVANS on 2015-01-17) 1.51_3 DEV (MJEVANS on 2015-01-17) 1.51_2 DEV (MJEVANS on 2014-11-19) 1.51_1 DEV (MJEVANS on 2014-11-14) 1.50 (MJEVANS on 2014-07-25) 1.48 (MJEVANS on 2014-03-03) 1.47 (MJEVANS on 2014-02-19) 1.45 (MJEVANS on 2013-10-29) 1.44_4 DEV (MJEVANS on 2013-10-16) 1.43 (MJEVANS on 2013-03-06) 1.13 (JURL on 2004-11-08) 1.12 (JURL on 2004-10-26) 1.11 (JURL on 2004-10-11) 1.10 (JURL on 2004-09-08) 1.09 (JURL on 2004-03-10) 1.08 (JURL on 2004-03-06) 1.07 (JURL on 2004-02-22) 1.06 (JURL on 2003-06-20) 1.05 (JURL on 2003-03-14) 1.04 (JURL on 2003-01-25) 1.03 (JURL on 2003-01-17) 1.02 (JURL on 2003-01-07) 1.01 (JURL on 2002-12-10) 1.00 (JURL on 2002-12-09) 0.450018 DEV (JURL on 2002-09-26) 0.450017 DEV (JURL on 2002-08-26) 0.450016 DEV (JURL on 2002-08-26) 0.450014 DEV (JURL on 2002-08-14) 0.450013 DEV (JURL on 2002-08-09) 0.450012 DEV (JURL on 2002-08-09) 0.450011 DEV (JURL on 2002-08-08) 0.45009 DEV (JURL on 2002-07-30) 0.45008 DEV (JURL on 2002-07-26) 0.45007 DEV (JURL on 2002-07-25) 0.45005 DEV (JURL on 2002-07-23) 0.45004 DEV (JURL on 2002-07-22) 0.43 (JURL on 2002-07-18) 0.42 (JURL on 2002-07-09) 0.41 (JURL on 2002-04-16) 0.40 (JURL on 2002-04-12) 0.39 (JURL on 2002-03-12) 0.38 (JURL on 2002-02-13) 0.37 (JURL on 2002-02-10) 0.36 (JURL on 2002-02-10) 0.35 (JURL on 2002-02-09) 0.34 (JURL on 2002-02-07) 0.33003 DEV (JURL on 2002-02-04) 0.33002 DEV (JURL on 2002-02-04) 0.330001 DEV (JURL on 2002-01-30) 0.32 (JURL on 2002-01-23) 0.31 (JURL on 2002-01-18) 0.30 (JURL on 2002-01-09) 0.28 (JURL on 2000-03-23) 0.20 (TIMB on 1998-08-14) 1.49_4 DEV (MJEVANS on 2014-07-08) 1.49_3 DEV (MJEVANS on 2014-05-01) 1.49_2 DEV (MJEVANS on 2014-04-26) 1.49_1 DEV (MJEVANS on 2014-04-25) 1.46_2 DEV (MJEVANS on 2013-12-17) 1.46_1 DEV (MJEVANS on 2013-11-16) 1.44_3 DEV (MJEVANS on 2013-10-11) 1.44_2 DEV (MJEVANS on 2013-09-07) 1.44_1 DEV (MJEVANS on 2013-06-06) 1.42_5 DEV (MJEVANS on 2013-01-25) 1.42_4 DEV (MJEVANS on 2013-01-24) 1.42_3 DEV (MJEVANS on 2013-01-17) 1.42_2 DEV (MJEVANS on 2012-12-17) 1.42_1 DEV (MJEVANS on 2012-12-12) 1.42_0 DEV (MJEVANS on 2012-11-28) 1.41 (MJEVANS on 2012-10-23) 1.40_3 DEV (MJEVANS on 2012-10-08) 1.40_2 DEV (MJEVANS on 2012-09-06) 1.40_1 DEV (MJEVANS on 2012-09-04) 1.39 (MJEVANS on 2012-07-07) 1.38_3 DEV (MJEVANS on 2012-06-25) 1.38_2 DEV (MJEVANS on 2012-05-24) 1.38_1 DEV (MJEVANS on 2012-05-22) 1.37 (MJEVANS on 2012-04-07) 1.36_2 DEV (MJEVANS on 2012-03-31) 1.36_1 DEV (MJEVANS on 2012-03-21) 1.35 (MJEVANS on 2012-03-06) 1.34_7 DEV (MJEVANS on 2012-03-02) 1.34_6 DEV (MJEVANS on 2012-02-27) 1.34_5 DEV (MJEVANS on 2012-02-17) 1.34_4 DEV (MJEVANS on 2012-02-05) 1.34_2 DEV (MJEVANS on 2012-01-25) 1.34_1 DEV (MJEVANS on 2011-12-11) 1.33 (MJEVANS on 2011-12-01) 1.32_5 DEV (MJEVANS on 2011-11-24) 1.32_4 DEV (MJEVANS on 2011-11-22) 1.32_3 DEV (MJEVANS on 2011-11-15) 1.32_2 DEV (MJEVANS on 2011-10-22) 1.31 (MJEVANS on 2011-06-23) 1.30_7 DEV (MJEVANS on 2011-06-15) 1.30_6 DEV (MJEVANS on 2011-06-07) 1.30_5 DEV (MJEVANS on 2011-05-25) 1.30_4 DEV (MJEVANS on 2011-05-18) 1.30_3 DEV (MJEVANS on 2011-05-17) 1.30_2 DEV (MJEVANS on 2011-05-16) 1.30_1 DEV (MJEVANS on 2011-05-12) 1.29 (MJEVANS on 2011-03-08) 1.28_5 DEV (MJEVANS on 2011-03-06) 1.28_4 DEV (MJEVANS on 2011-02-24) 1.28_3 DEV (MJEVANS on 2011-02-22) 1.28_2 DEV (MJEVANS on 2011-01-24) 1.28_1 DEV (MJEVANS on 2011-01-03) 1.27 (MJEVANS on 2010-12-29) 1.26_4 DEV (MJEVANS on 2010-12-14) 1.26_3 DEV (MJEVANS on 2010-11-18) 1.26_2 DEV (MJEVANS on 2010-11-09) 1.26_1 DEV (MJEVANS on 2010-10-26) 1.25 (MJEVANS on 2010-09-22) 1.24_6 DEV (MJEVANS on 2010-09-17) 1.24_5 DEV (MJEVANS on 2010-09-15) 1.24_4 DEV (MJEVANS on 2010-09-08) 1.24_3 DEV (MJEVANS on 2010-09-06) 1.24_2 DEV (MJEVANS on 2010-07-23) 1.24_1 DEV (MJEVANS on 2010-05-27) 1.24 (MJEVANS on 2010-05-14) 1.23_5 DEV (MJEVANS on 2010-05-06) 1.23_4 DEV (MJEVANS on 2010-04-14) 1.23_2 DEV (MJEVANS on 2010-01-26) 1.23_1 DEV (MJEVANS on 2009-11-12) 1.23 (MJEVANS on 2009-09-11) 1.22_3 DEV (MJEVANS on 2009-08-19) 1.22 (MJEVANS on 2009-06-10) 1.21_1 DEV (MJEVANS on 2009-06-02) 1.21 (MJEVANS on 2009-04-28) 1.20 (MJEVANS on 2009-04-20) 1.19 (MJEVANS on 2009-04-02) 1.18_4 DEV (MJEVANS on 2009-03-13) 1.18_3 DEV (MJEVANS on 2009-03-13) 1.18_2 DEV (MJEVANS on 2009-03-09) 1.18_1 DEV (MJEVANS on 2009-03-06) 1.18 (MJEVANS on 2009-01-16) 1.17_3 DEV (MJEVANS on 2008-12-19) 1.17_2 DEV (MJEVANS on 2008-11-17) 1.17_1 DEV (MJEVANS on 2008-10-10) 1.17 (MJEVANS on 2008-09-22) 1.16_4 DEV (MJEVANS on 2008-09-12) 1.16_3 DEV (MJEVANS on 2008-09-08) 1.16_2 DEV (MJEVANS on 2008-09-02) 1.16_1 DEV (MJEVANS on 2008-08-28) 1.16 (MJEVANS on 2008-05-14) 1.15 (MJEVANS on 2008-01-29) 1.15_2 DEV (MJEVANS on 2007-11-14) 1.15_1 DEV (MJEVANS on 2007-11-06) 1.14 (MJEVANS on 2007-07-17) 1.14_1 DEV (MJEVANS on 2007-07-06) 0.27 (JURL on 2000-03-09) 0.26 (JURL on 2000-03-06) 0.25 (JURL on 2000-03-04) 0.24 (JURL on 2000-02-25) 0.22 (JURL on 1999-09-08) 0.21 (JURL on 1999-09-01) 0.19 (TIMB on 1998-08-12) 0.17 (TIMB on 1998-07-09) 0.16 (TIMB on 1997-07-25) 0.15 (TIMB on 1997-07-18) 0.14 (TIMB on 1997-07-16) DBD-ODBC-1.52 10 ++ 10 ++  / DBD::ODBC 15 Apr 2015 09:01:31 GMT Module version: 1.52 Source (raw) Browse (raw) Changes Homepage Clone repository Issues (7) 5 (4 reviews) Testers (97 / 66 / 0) Kwalitee License: perl_5 Questions? Chat with us! Activity 24 month Tools MOBI | EPUB Download (272.68Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.53_2 DEV (MJEVANS on 2016-02-17) 1.53_1 DEV (MJEVANS on 2015-10-16) 1.51_4 DEV (MJEVANS on 2015-01-17) 1.51_3 DEV (MJEVANS on 2015-01-17) 1.51_2 DEV (MJEVANS on 2014-11-19) 1.51_1 DEV (MJEVANS on 2014-11-14) 1.50 (MJEVANS on 2014-07-25) 1.48 (MJEVANS on 2014-03-03) 1.47 (MJEVANS on 2014-02-19) 1.45 (MJEVANS on 2013-10-29) 1.44_4 DEV (MJEVANS on 2013-10-16) 1.43 (MJEVANS on 2013-03-06) 1.13 (JURL on 2004-11-08) 1.12 (JURL on 2004-10-26) 1.11 (JURL on 2004-10-11) 1.10 (JURL on 2004-09-08) 1.09 (JURL on 2004-03-10) 1.08 (JURL on 2004-03-06) 1.07 (JURL on 2004-02-22) 1.06 (JURL on 2003-06-20) 1.05 (JURL on 2003-03-14) 1.04 (JURL on 2003-01-25) 1.03 (JURL on 2003-01-17) 1.02 (JURL on 2003-01-07) 1.01 (JURL on 2002-12-10) 1.00 (JURL on 2002-12-09) 0.450018 DEV (JURL on 2002-09-26) 0.450017 DEV (JURL on 2002-08-26) 0.450016 DEV (JURL on 2002-08-26) 0.450014 DEV (JURL on 2002-08-14) 0.450013 DEV (JURL on 2002-08-09) 0.450012 DEV (JURL on 2002-08-09) 0.450011 DEV (JURL on 2002-08-08) 0.45009 DEV (JURL on 2002-07-30) 0.45008 DEV (JURL on 2002-07-26) 0.45007 DEV (JURL on 2002-07-25) 0.45005 DEV (JURL on 2002-07-23) 0.45004 DEV (JURL on 2002-07-22) 0.43 (JURL on 2002-07-18) 0.42 (JURL on 2002-07-09) 0.41 (JURL on 2002-04-16) 0.40 (JURL on 2002-04-12) 0.39 (JURL on 2002-03-12) 0.38 (JURL on 2002-02-13) 0.37 (JURL on 2002-02-10) 0.36 (JURL on 2002-02-10) 0.35 (JURL on 2002-02-09) 0.34 (JURL on 2002-02-07) 0.33003 DEV (JURL on 2002-02-04) 0.33002 DEV (JURL on 2002-02-04) 0.330001 DEV (JURL on 2002-01-30) 0.32 (JURL on 2002-01-23) 0.31 (JURL on 2002-01-18) 0.30 (JURL on 2002-01-09) 0.28 (JURL on 2000-03-23) 0.20 (TIMB on 1998-08-14) 1.49_4 DEV (MJEVANS on 2014-07-08) 1.49_3 DEV (MJEVANS on 2014-05-01) 1.49_2 DEV (MJEVANS on 2014-04-26) 1.49_1 DEV (MJEVANS on 2014-04-25) 1.46_2 DEV (MJEVANS on 2013-12-17) 1.46_1 DEV (MJEVANS on 2013-11-16) 1.44_3 DEV (MJEVANS on 2013-10-11) 1.44_2 DEV (MJEVANS on 2013-09-07) 1.44_1 DEV (MJEVANS on 2013-06-06) 1.42_5 DEV (MJEVANS on 2013-01-25) 1.42_4 DEV (MJEVANS on 2013-01-24) 1.42_3 DEV (MJEVANS on 2013-01-17) 1.42_2 DEV (MJEVANS on 2012-12-17) 1.42_1 DEV (MJEVANS on 2012-12-12) 1.42_0 DEV (MJEVANS on 2012-11-28) 1.41 (MJEVANS on 2012-10-23) 1.40_3 DEV (MJEVANS on 2012-10-08) 1.40_2 DEV (MJEVANS on 2012-09-06) 1.40_1 DEV (MJEVANS on 2012-09-04) 1.39 (MJEVANS on 2012-07-07) 1.38_3 DEV (MJEVANS on 2012-06-25) 1.38_2 DEV (MJEVANS on 2012-05-24) 1.38_1 DEV (MJEVANS on 2012-05-22) 1.37 (MJEVANS on 2012-04-07) 1.36_2 DEV (MJEVANS on 2012-03-31) 1.36_1 DEV (MJEVANS on 2012-03-21) 1.35 (MJEVANS on 2012-03-06) 1.34_7 DEV (MJEVANS on 2012-03-02) 1.34_6 DEV (MJEVANS on 2012-02-27) 1.34_5 DEV (MJEVANS on 2012-02-17) 1.34_4 DEV (MJEVANS on 2012-02-05) 1.34_2 DEV (MJEVANS on 2012-01-25) 1.34_1 DEV (MJEVANS on 2011-12-11) 1.33 (MJEVANS on 2011-12-01) 1.32_5 DEV (MJEVANS on 2011-11-24) 1.32_4 DEV (MJEVANS on 2011-11-22) 1.32_3 DEV (MJEVANS on 2011-11-15) 1.32_2 DEV (MJEVANS on 2011-10-22) 1.31 (MJEVANS on 2011-06-23) 1.30_7 DEV (MJEVANS on 2011-06-15) 1.30_6 DEV (MJEVANS on 2011-06-07) 1.30_5 DEV (MJEVANS on 2011-05-25) 1.30_4 DEV (MJEVANS on 2011-05-18) 1.30_3 DEV (MJEVANS on 2011-05-17) 1.30_2 DEV (MJEVANS on 2011-05-16) 1.30_1 DEV (MJEVANS on 2011-05-12) 1.29 (MJEVANS on 2011-03-08) 1.28_5 DEV (MJEVANS on 2011-03-06) 1.28_4 DEV (MJEVANS on 2011-02-24) 1.28_3 DEV (MJEVANS on 2011-02-22) 1.28_2 DEV (MJEVANS on 2011-01-24) 1.28_1 DEV (MJEVANS on 2011-01-03) 1.27 (MJEVANS on 2010-12-29) 1.26_4 DEV (MJEVANS on 2010-12-14) 1.26_3 DEV (MJEVANS on 2010-11-18) 1.26_2 DEV (MJEVANS on 2010-11-09) 1.26_1 DEV (MJEVANS on 2010-10-26) 1.25 (MJEVANS on 2010-09-22) 1.24_6 DEV (MJEVANS on 2010-09-17) 1.24_5 DEV (MJEVANS on 2010-09-15) 1.24_4 DEV (MJEVANS on 2010-09-08) 1.24_3 DEV (MJEVANS on 2010-09-06) 1.24_2 DEV (MJEVANS on 2010-07-23) 1.24_1 DEV (MJEVANS on 2010-05-27) 1.24 (MJEVANS on 2010-05-14) 1.23_5 DEV (MJEVANS on 2010-05-06) 1.23_4 DEV (MJEVANS on 2010-04-14) 1.23_2 DEV (MJEVANS on 2010-01-26) 1.23_1 DEV (MJEVANS on 2009-11-12) 1.23 (MJEVANS on 2009-09-11) 1.22_3 DEV (MJEVANS on 2009-08-19) 1.22 (MJEVANS on 2009-06-10) 1.21_1 DEV (MJEVANS on 2009-06-02) 1.21 (MJEVANS on 2009-04-28) 1.20 (MJEVANS on 2009-04-20) 1.19 (MJEVANS on 2009-04-02) 1.18_4 DEV (MJEVANS on 2009-03-13) 1.18_3 DEV (MJEVANS on 2009-03-13) 1.18_2 DEV (MJEVANS on 2009-03-09) 1.18_1 DEV (MJEVANS on 2009-03-06) 1.18 (MJEVANS on 2009-01-16) 1.17_3 DEV (MJEVANS on 2008-12-19) 1.17_2 DEV (MJEVANS on 2008-11-17) 1.17_1 DEV (MJEVANS on 2008-10-10) 1.17 (MJEVANS on 2008-09-22) 1.16_4 DEV (MJEVANS on 2008-09-12) 1.16_3 DEV (MJEVANS on 2008-09-08) 1.16_2 DEV (MJEVANS on 2008-09-02) 1.16_1 DEV (MJEVANS on 2008-08-28) 1.16 (MJEVANS on 2008-05-14) 1.15 (MJEVANS on 2008-01-29) 1.15_2 DEV (MJEVANS on 2007-11-14) 1.15_1 DEV (MJEVANS on 2007-11-06) 1.14 (MJEVANS on 2007-07-17) 1.14_1 DEV (MJEVANS on 2007-07-06) 0.27 (JURL on 2000-03-09) 0.26 (JURL on 2000-03-06) 0.25 (JURL on 2000-03-04) 0.24 (JURL on 2000-02-25) 0.22 (JURL on 1999-09-08) 0.21 (JURL on 1999-09-01) 0.19 (TIMB on 1998-08-12) 0.17 (TIMB on 1998-07-09) 0.16 (TIMB on 1997-07-25) 0.15 (TIMB on 1997-07-18) 0.14 (TIMB on 1997-07-16) Diff with version 1.53_2 DEV (MJEVANS on 2016-02-17) 1.53_1 DEV (MJEVANS on 2015-10-16) 1.51_4 DEV (MJEVANS on 2015-01-17) 1.51_3 DEV (MJEVANS on 2015-01-17) 1.51_2 DEV (MJEVANS on 2014-11-19) 1.51_1 DEV (MJEVANS on 2014-11-14) 1.50 (MJEVANS on 2014-07-25) 1.48 (MJEVANS on 2014-03-03) 1.47 (MJEVANS on 2014-02-19) 1.45 (MJEVANS on 2013-10-29) 1.44_4 DEV (MJEVANS on 2013-10-16) 1.43 (MJEVANS on 2013-03-06) 1.13 (JURL on 2004-11-08) 1.12 (JURL on 2004-10-26) 1.11 (JURL on 2004-10-11) 1.10 (JURL on 2004-09-08) 1.09 (JURL on 2004-03-10) 1.08 (JURL on 2004-03-06) 1.07 (JURL on 2004-02-22) 1.06 (JURL on 2003-06-20) 1.05 (JURL on 2003-03-14) 1.04 (JURL on 2003-01-25) 1.03 (JURL on 2003-01-17) 1.02 (JURL on 2003-01-07) 1.01 (JURL on 2002-12-10) 1.00 (JURL on 2002-12-09) 0.450018 DEV (JURL on 2002-09-26) 0.450017 DEV (JURL on 2002-08-26) 0.450016 DEV (JURL on 2002-08-26) 0.450014 DEV (JURL on 2002-08-14) 0.450013 DEV (JURL on 2002-08-09) 0.450012 DEV (JURL on 2002-08-09) 0.450011 DEV (JURL on 2002-08-08) 0.45009 DEV (JURL on 2002-07-30) 0.45008 DEV (JURL on 2002-07-26) 0.45007 DEV (JURL on 2002-07-25) 0.45005 DEV (JURL on 2002-07-23) 0.45004 DEV (JURL on 2002-07-22) 0.43 (JURL on 2002-07-18) 0.42 (JURL on 2002-07-09) 0.41 (JURL on 2002-04-16) 0.40 (JURL on 2002-04-12) 0.39 (JURL on 2002-03-12) 0.38 (JURL on 2002-02-13) 0.37 (JURL on 2002-02-10) 0.36 (JURL on 2002-02-10) 0.35 (JURL on 2002-02-09) 0.34 (JURL on 2002-02-07) 0.33003 DEV (JURL on 2002-02-04) 0.33002 DEV (JURL on 2002-02-04) 0.330001 DEV (JURL on 2002-01-30) 0.32 (JURL on 2002-01-23) 0.31 (JURL on 2002-01-18) 0.30 (JURL on 2002-01-09) 0.28 (JURL on 2000-03-23) 0.20 (TIMB on 1998-08-14) 1.49_4 DEV (MJEVANS on 2014-07-08) 1.49_3 DEV (MJEVANS on 2014-05-01) 1.49_2 DEV (MJEVANS on 2014-04-26) 1.49_1 DEV (MJEVANS on 2014-04-25) 1.46_2 DEV (MJEVANS on 2013-12-17) 1.46_1 DEV (MJEVANS on 2013-11-16) 1.44_3 DEV (MJEVANS on 2013-10-11) 1.44_2 DEV (MJEVANS on 2013-09-07) 1.44_1 DEV (MJEVANS on 2013-06-06) 1.42_5 DEV (MJEVANS on 2013-01-25) 1.42_4 DEV (MJEVANS on 2013-01-24) 1.42_3 DEV (MJEVANS on 2013-01-17) 1.42_2 DEV (MJEVANS on 2012-12-17) 1.42_1 DEV (MJEVANS on 2012-12-12) 1.42_0 DEV (MJEVANS on 2012-11-28) 1.41 (MJEVANS on 2012-10-23) 1.40_3 DEV (MJEVANS on 2012-10-08) 1.40_2 DEV (MJEVANS on 2012-09-06) 1.40_1 DEV (MJEVANS on 2012-09-04) 1.39 (MJEVANS on 2012-07-07) 1.38_3 DEV (MJEVANS on 2012-06-25) 1.38_2 DEV (MJEVANS on 2012-05-24) 1.38_1 DEV (MJEVANS on 2012-05-22) 1.37 (MJEVANS on 2012-04-07) 1.36_2 DEV (MJEVANS on 2012-03-31) 1.36_1 DEV (MJEVANS on 2012-03-21) 1.35 (MJEVANS on 2012-03-06) 1.34_7 DEV (MJEVANS on 2012-03-02) 1.34_6 DEV (MJEVANS on 2012-02-27) 1.34_5 DEV (MJEVANS on 2012-02-17) 1.34_4 DEV (MJEVANS on 2012-02-05) 1.34_2 DEV (MJEVANS on 2012-01-25) 1.34_1 DEV (MJEVANS on 2011-12-11) 1.33 (MJEVANS on 2011-12-01) 1.32_5 DEV (MJEVANS on 2011-11-24) 1.32_4 DEV (MJEVANS on 2011-11-22) 1.32_3 DEV (MJEVANS on 2011-11-15) 1.32_2 DEV (MJEVANS on 2011-10-22) 1.31 (MJEVANS on 2011-06-23) 1.30_7 DEV (MJEVANS on 2011-06-15) 1.30_6 DEV (MJEVANS on 2011-06-07) 1.30_5 DEV (MJEVANS on 2011-05-25) 1.30_4 DEV (MJEVANS on 2011-05-18) 1.30_3 DEV (MJEVANS on 2011-05-17) 1.30_2 DEV (MJEVANS on 2011-05-16) 1.30_1 DEV (MJEVANS on 2011-05-12) 1.29 (MJEVANS on 2011-03-08) 1.28_5 DEV (MJEVANS on 2011-03-06) 1.28_4 DEV (MJEVANS on 2011-02-24) 1.28_3 DEV (MJEVANS on 2011-02-22) 1.28_2 DEV (MJEVANS on 2011-01-24) 1.28_1 DEV (MJEVANS on 2011-01-03) 1.27 (MJEVANS on 2010-12-29) 1.26_4 DEV (MJEVANS on 2010-12-14) 1.26_3 DEV (MJEVANS on 2010-11-18) 1.26_2 DEV (MJEVANS on 2010-11-09) 1.26_1 DEV (MJEVANS on 2010-10-26) 1.25 (MJEVANS on 2010-09-22) 1.24_6 DEV (MJEVANS on 2010-09-17) 1.24_5 DEV (MJEVANS on 2010-09-15) 1.24_4 DEV (MJEVANS on 2010-09-08) 1.24_3 DEV (MJEVANS on 2010-09-06) 1.24_2 DEV (MJEVANS on 2010-07-23) 1.24_1 DEV (MJEVANS on 2010-05-27) 1.24 (MJEVANS on 2010-05-14) 1.23_5 DEV (MJEVANS on 2010-05-06) 1.23_4 DEV (MJEVANS on 2010-04-14) 1.23_2 DEV (MJEVANS on 2010-01-26) 1.23_1 DEV (MJEVANS on 2009-11-12) 1.23 (MJEVANS on 2009-09-11) 1.22_3 DEV (MJEVANS on 2009-08-19) 1.22 (MJEVANS on 2009-06-10) 1.21_1 DEV (MJEVANS on 2009-06-02) 1.21 (MJEVANS on 2009-04-28) 1.20 (MJEVANS on 2009-04-20) 1.19 (MJEVANS on 2009-04-02) 1.18_4 DEV (MJEVANS on 2009-03-13) 1.18_3 DEV (MJEVANS on 2009-03-13) 1.18_2 DEV (MJEVANS on 2009-03-09) 1.18_1 DEV (MJEVANS on 2009-03-06) 1.18 (MJEVANS on 2009-01-16) 1.17_3 DEV (MJEVANS on 2008-12-19) 1.17_2 DEV (MJEVANS on 2008-11-17) 1.17_1 DEV (MJEVANS on 2008-10-10) 1.17 (MJEVANS on 2008-09-22) 1.16_4 DEV (MJEVANS on 2008-09-12) 1.16_3 DEV (MJEVANS on 2008-09-08) 1.16_2 DEV (MJEVANS on 2008-09-02) 1.16_1 DEV (MJEVANS on 2008-08-28) 1.16 (MJEVANS on 2008-05-14) 1.15 (MJEVANS on 2008-01-29) 1.15_2 DEV (MJEVANS on 2007-11-14) 1.15_1 DEV (MJEVANS on 2007-11-06) 1.14 (MJEVANS on 2007-07-17) 1.14_1 DEV (MJEVANS on 2007-07-06) 0.27 (JURL on 2000-03-09) 0.26 (JURL on 2000-03-06) 0.25 (JURL on 2000-03-04) 0.24 (JURL on 2000-02-25) 0.22 (JURL on 1999-09-08) 0.21 (JURL on 1999-09-01) 0.19 (TIMB on 1998-08-12) 0.17 (TIMB on 1998-07-09) 0.16 (TIMB on 1997-07-25) 0.15 (TIMB on 1997-07-18) 0.14 (TIMB on 1997-07-16) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 5 PAUSE users 5 non-PAUSE users. MJEVANS Martin J Evans and 2 contributors show them Tim Bunce Jeff Urlwin Dependencies DBI Test::Simple and possibly others CPAN Testers List Reverse dependencies Dependency graph × DBD-ODBC-1.52 NAME VERSION WARNING SYNOPSIS DESCRIPTION Change log and FAQs Important note about the tests DBI attribute handling ReadOnly (boolean) Private attributes common to connection and statement handles odbc_ignore_named_placeholders odbc_default_bind_type odbc_force_bind_type odbc_force_rebind odbc_async_exec odbc_query_timeout odbc_putdata_start odbc_column_display_size odbc_utf8_on odbc_describe_parameters Private methods common to connection and statement handles odbc_getdiagrec odbc_getdiagfield Private connection attributes odbc_err_handler odbc_SQL_ROWSET_SIZE odbc_exec_direct odbc_SQL_DRIVER_ODBC_VER odbc_cursortype odbc_has_unicode odbc_out_connect_string odbc_version odbc_driver_complete odbc_batch_size odbc_array_operations odbc_taf_callback odbc_trace_file odbc_trace Private statement attributes odbc_more_results Private statement methods odbc_rows odbc_lob_read Private DBD::ODBC Functions GetInfo GetTypeInfo GetFunctions GetStatistics GetForeignKeys GetPrimaryKeys data_sources GetSpecialColumns ColAttributes DescribeCol Additional bind_col attributes DiscardString StrictlyTyped TreatAsLOB Tracing Deviations from the DBI specification last_insert_id Comments in SQL do Mixed placeholder types Using the same placeholder more than once Binding named placeholders Sticky Parameter Types disconnect and transactions execute_for_fetch and execute_array type_info_all Binding Columns bind_param Unicode Enabling and Disabling Unicode support Unicode - What is supported? Unicode - What is not supported? Unicode - Caveats Unicode implementation in DBD::ODBC Unicode and Oracle Unicode and PostgreSQL Unicode and Easysoft ODBC Drivers Unicode and other ODBC drivers ODBC Support in ODBC Drivers Drivers without SQLDescribeParam MS SQL Server Query Notification Version Control Contributing CPAN Testers Reporting Others/todo? Random Links Some useful tutorials: Frequently Asked Questions CONFIGURATION AND ENVIRONMENT DEPENDENCIES INCOMPATIBILITIES BUGS AND LIMITATIONS AUTHOR LICENSE AND COPYRIGHT SEE ALSO NAME DBD::ODBC - ODBC Driver for DBI VERSION This documentation refers to DBD::ODBC version 1.52. WARNING This version of DBD::ODBC contains a significant fix to unicode when inserting into CHAR/VARCHAR columns and it is a change in behaviour from 1.45. The change only applies to unicode builds of DBD::ODBC (the default on Windows but you can build it for unicode on unix too) and char/varchar columns and not nchar/nvarchar columns. Prior to this release of DBD::ODBC when you are using the unicode build of DBD::ODBC and inserted data into a CHAR/VARCHAR columns using parameters DBD::ODBC did this: 1 if you set odbc_describe_parameters to 0, (thus preventing DBD::ODBC from calling SQLDescribeParam) parameters for CHAR/VARCHAR columns were bound as SQL_WVARCHAR or SQL_WLONGVARCHAR (depending on the length of the parameter). 2 if you set odbc_force_bind_type then all parameters are bound as you specified. 3 if you override the parameter type in the bind_param method, the type you specified would be used. 4 if the driver does not support SQLDescribeParam or SQLDescribeParam was called and failed then the bind type defaulted as in 1. 5 if none of the above (and I'd guess that is the normal case for most people) then DBD::ODBC calls SQLDescribeParam to find the parameter type. This usually returns SQL_CHAR or SQL_VARCHAR for CHAR/VARCHAR columns unsurprisingly. The parameter was then bound as SQL_VARCHAR. Items 1 to 4 still apply. 5 now has a different behaviour. In this release, DBD::ODBC now looks at your bound data first before using the type returned by SQLDescribeParam. If you data looks like unicode (i.e., SvUTF8() is true) it now binds the parameter as SQL_WVARCHAR. What might this might mean to you? If you had Perl scalars that were bound to CHAR/VARCHAR columns in an insert/update/delete and those scalars contained unicode, DBD::ODBC would actually pass the individual octets in your scalar not characters. For instance, if you had the Perl scalar ""\x{20ac}"" (the Euro unicode character) and you bound it to a CHAR/VARCHAR, DBD::ODBC would pass 0xe2, 0x82, 0xc2 as separate characters because those bytes were Perl's UTF-8 encoding of a euro. These would probably be interpreted by your database engine as 3 characters in its current codepage. If you queried your database to find the length of the data inserted you'd probably get back 3, not 1. However, when DBD::ODBC read that column back in a select statement, it would bind the column as SQL_WCHAR and you'd get back 3 characters with the utf8 flag on (what those characters were depends on how your database or driver translates code page characters to wide characters). What should happen now is that if your bound parameters are unicode, DBD::ODBC will bind them as wide characters (unicode) and your driver or database will attempt to convert them into the code page it is using. This means so long as your database can store the data you are inserting, when you read it back you should get what you inserted. SYNOPSIS   use DBI;    $dbh = DBI->connect('dbi:ODBC:DSN=mydsn', 'user', 'password'); See DBI for more information. DESCRIPTION Change log and FAQs Please note that the change log has been moved to DBD::ODBC::Changes. To access this documentation, use perldoc DBD::ODBC::Changes. The FAQs have also moved to DBD::ODBC::FAQ.pm. To access the FAQs use perldoc DBD::ODBC::FAQ. Important note about the tests DBD::ODBC is unlike most other DBDs in that it connects to literally dozens of possible ODBC Drivers. It is practically impossible for me to test every one and so some tests may fail with some ODBC Drivers. This does not mean DBD::ODBC will not work with your ODBC Driver but it is worth reporting any test failures on rt.cpan.org or to the dbi-users mailing list. DBI attribute handling If a DBI defined attribute is not mentioned here it behaves as per the DBI specification. ReadOnly (boolean) DBI documents the ReadOnly attribute as being settable and retrievable on connection and statement handles. In ODBC setting ReadOnly to true causes the connection attribute SQL_ATTR_ACCESS_MODE to be set to SQL_MODE_READ_ONLY and setting it to false will set the access mode to SQL_MODE_READ_WRITE (which is the default in ODBC). Note: There is no equivalent of setting ReadOnly on a statement handle in ODBC. Note: See ODBC documentation on SQL_ATTR_ACCESS_MODE as setting it to SQL_MODE_READ_ONLY does not prevent your script from running updates or deletes; it is simply a hint to the driver/database that you won't being doing updates. Note: Since DBD::ODCB 1.44_3, if the driver does not support setting SQL_ATTR_ACCESS_MODE and returns SQL_SUCCESS_WITH_INFO and ""option value changed"" a warning is issued (which you'll only see if you have DBI > 1.628). In addition, any subsequent attempts to fetch the ReadOnly attribute will return the value last set. This attribute requires DBI version 1.55 or better. Private attributes common to connection and statement handles odbc_ignore_named_placeholders Use this if you have special needs (such as Oracle triggers, etc) where :new or :name mean something special and are not just place holder names. You must then use ? for binding parameters. Example:  $dbh->{odbc_ignore_named_placeholders} = 1;  $dbh->do(""create trigger foo as if :new.x <> :old.x then ... etc""); Without this, DBD::ODBC will think :new and :old are placeholders for binding and get confused. odbc_default_bind_type This value defaults to 0. Older versions of DBD::ODBC assumed that the parameter binding type was 12 (SQL_VARCHAR). Newer versions always attempt to call SQLDescribeParam to find the parameter types but if SQLDescribeParam is unavailable DBD::ODBC falls back to a default bind type. The internal default bind type is SQL_VARCHAR (for non-unicode build) and SQL_WVARCHAR or SQL_VARCHAR (for a unicode build depending on whether the parameter is unicode or not). If you set odbc_default_bind_type to a value other than 0 you override the internal default. N.B If you call the bind_param method with a SQL type this overrides everything else above. odbc_force_bind_type This value defaults to 0. If set to anything other than 0 this will force bound parameters to be bound as this type and SQLDescribeParam will not be used; in other words it implies ""odbc_describe_parameters"" is set to false too. Older versions of DBD::ODBC assumed the parameter binding type was 12 (SQL_VARCHAR) and newer versions always attempt to call SQLDescribeParam to find the parameter types. If your driver supports SQLDescribeParam and it succeeds it may still fail to describe the parameters accurately (MS SQL Server sometimes does this with some SQL like select myfunc(?) where 1 = 1). Setting odbc_force_bind_type to SQL_VARCHAR will force DBD::ODBC to bind all the parameters as SQL_VARCHAR and ignore SQLDescribeParam. Bear in mind that if you are inserting unicode data you probably want to use SQL_WVARCHAR/SQL_WCHAR/SQL_WLONGVARCHAR and not SQL_VARCHAR. As this attribute was created to work around buggy ODBC Drivers which support SQLDescribeParam but describe the parameters incorrectly you are probably better specifying the bind type on the bind_param call on a per statement level rather than blindly setting odbc_force_bind_type across a whole connection. N.B If you call the bind_param method with a SQL type this overrides everything else above. odbc_force_rebind This is to handle special cases, especially when using multiple result sets. Set this before execute to ""force"" DBD::ODBC to re-obtain the result set's number of columns and column types for each execute. Especially useful for calling stored procedures which may return different result sets each execute. The only performance penalty is during execute(), but I didn't want to incur that penalty for all circumstances. It is probably fairly rare that this occurs. This attribute will be automatically set when multiple result sets are triggered. Most people shouldn't have to worry about this. odbc_async_exec Allow asynchronous execution of queries. This causes a spin-loop (with a small ""sleep"") until the ODBC API being called is complete (i.e., while the ODBC API returns SQL_STILL_EXECUTING). This is useful, however, if you want the error handling and asynchronous messages (see the ""odbc_err_handler"" and t/20SQLServer.t for an example of this). odbc_query_timeout This allows you to change the ODBC query timeout (the ODBC statement attribute SQL_ATTR_QUERY_TIMEOUT). ODBC defines the query time out as the number of seconds to wait for a SQL statement to execute before returning to the application. A value of 0 (the default) means there is no time out. Do not confuse this with the ODBC attributes SQL_ATTR_LOGIN_TIMEOUT and SQL_ATTR_CONNECTION_TIMEOUT. Add   { odbc_query_timeout => 30 } to your connect, set on the dbh before creating a statement or explicitly set it on your statement handle. The odbc_query_timeout on a statement is inherited from the parent connection. Note that internally DBD::ODBC only sets the query timeout if you set it explicitly and the default of 0 (no time out) is implemented by the ODBC driver and not DBD::ODBC. Note that some ODBC drivers implement a maximum query timeout value and will limit timeouts set above their maximum. You may see a warning if your time out is capped by the driver but there is currently no way to retrieve the capped value back from the driver. Note that some drivers may not support this attribute. See t/20SqlServer.t for an example. odbc_putdata_start odbc_putdata_start defines the size at which DBD::ODBC uses SQLPutData and SQLParamData to send larger objects to the database instead of simply binding them as normal with SQLBindParameter. It is mostly a placeholder for future changes allowing chunks of data to be sent to the database and there is little reason for anyone to change it currently. The default for odbc_putdata_start is 32768 because this value was hard-coded in DBD::ODBC until 1.16_1. odbc_column_display_size If you ODBC driver does not support the SQL_COLUMN_DISPLAY_SIZE and SQL_COLUMN_LENGTH attributes to SQLColAtrributes then DBD::ODBC does not know how big the column might be. odbc_column_display_size sets the default value for the column size when retrieving column data where the size cannot be determined. The default for odbc_column_display_size is 2001 because this value was hard-coded in DBD::ODBC until 1.17_3. odbc_utf8_on Set this flag to treat all strings returned from the ODBC driver (except columns described as SQL_BINARY or SQL_TIMESTAMP and its variations) as UTF-8 encoded. Some ODBC drivers (like Aster and maybe PostgreSQL) return UTF-8 encoded data but do not support the SQLxxxW unicode API. Enabling this flag will cause DBD::ODBC to treat driver returned data as UTF-8 encoded and it will be marked as such in Perl. Do not confuse this with DBD::ODBC's unicode support. The odbc_utf8_on attribute only applies to non-unicode enabled builds of DBD::ODBC. odbc_describe_parameters Defaults to on. When set this allows DBD::ODBC to call SQLDescribeParam (if the driver supports it) to retrieve information about any parameters. When off/false DBD::ODBC will not call SQLDescribeParam and defaults to binding parameters as SQL_CHAR/SQL_WCHAR depending on the build type and whether your data is unicode or not. You do not have to disable odbc_describe_parameters just because your driver does not support SQLDescribeParam as DBD::ODBC will work this out at the start via SQLGetFunctions. Note: disabling odbc_describe_parameters when your driver does support SQLDescribeParam may prevent DBD::ODBC binding parameters for some column types properly. You can also set this attribute in the attributes passed to the prepare method. This attribute was added so someone moving from freeTDS (a driver which does not support SQLDescribeParam) to a driver which does support SQLDescribeParam could do so without changing any Perl. The situation was very specific since dates were being bound as dates when SQLDescribeParam was called and chars without and the data format was not a supported date format. Private methods common to connection and statement handles odbc_getdiagrec   @diags = $handle->odbc_getdiagrec($record_number); Introduced in 1.34_3. This is just a wrapper around the ODBC API SQLGetDiagRec. When a method on a connection or statement handle fails if there are any ODBC diagnostics you can use this method to retrieve them. Records start at 1 and there may be more than 1. It returns an array containing the state, native and error message text or an empty array if the requested diagnostic record does not exist. To get all diagnostics available keep incrementing $record_number until odbc_getdiagrec returns an empty array. All of the state, native and message text are already passed to DBI via its set_err method so this method does not really tell you anything you cannot already get from DBI except when there is more than one diagnostic. You may find this useful in an error handler as you can get the ODBC diagnostics as they are and not how DBD::ODBC was forced to fit them into the DBI's system. NOTE: calling this method does not clear DBI's error values as usually happens. odbc_getdiagfield   $diag = $handle->odbc_getdiagfield($record, $identifier); This is just a wrapper around the ODBC API SQLGetDiagField. When a method on a connection or statement handle fails if there are any ODBC diagnostics you can use this method to retrieve the individual diagnostic fields. As with ""odbc_getdiagrec"" records start at 1. The identifier is one of:   SQL_DIAG_CURSOR_ROW_COUNT   SQL_DIAG_DYNAMIC_FUNCTION   SQL_DIAG_DYNAMIC_FUNCTION_CODE   SQL_DIAG_NUMBER   SQL_DIAG_RETURNCODE   SQL_DIAG_ROW_COUNT   SQL_DIAG_CLASS_ORIGIN   SQL_DIAG_COLUMN_NUMBER   SQL_DIAG_CONNECTION_NAME   SQL_DIAG_MESSAGE_TEXT   SQL_DIAG_NATIVE   SQL_DIAG_ROW_NUMBER   SQL_DIAG_SERVER_NAME   SQL_DIAG_SQLSTATE   SQL_DIAG_SUBCLASS_ORIGIN DBD::ODBC exports these constants as 'diags' e.g.,   use DBD::ODBC qw(:diags); Of particular interest is SQL_DIAG_COLUMN_NUMBER as it will tell you which bound column or parameter is in error (assuming your driver supports it). See params_in_error in the examples dir. NOTE: calling this method does not clear DBI's error values as usually happens. Private connection attributes odbc_err_handler NOTE: You might want to look at DBI's error handler before using the one in DBD::ODBC however, there are subtle differences. DBD::ODBC's odbc_err_handler is called for error and informational diagnostics i.e., it is called when an ODBC call fails the SQL_SUCCEEDED macro which means the ODBC call returned SQL_ERROR (-1) or SQL_SUCCESS_WITH_INFO (1). Allow error and informational diagnostics to be handled by the application. A call-back function supplied by the application to handle or ignore messages. The callback function receives four parameters: state (string), error (string), native error code (number) and the status returned from the last ODBC API. The fourth argument was added in 1.30_7. If the error handler returns 0, the error is ignored, otherwise the error is passed through the normal DBI error handling. Note, if the status is SQL_SUCCESS_WITH_INFO this will not reach the DBI error handler as it is not an error. This can also be used for procedures under MS SQL Server (Sybase too, probably) to obtain messages from system procedures such as DBCC. Check t/20SQLServer.t and t/10handler.t.   $dbh->{RaiseError} = 1;   sub err_handler {      ($state, $msg, $native, $rc, $status) = @_;      if ($state = '12345')          return 0; # ignore this error      else          return 1; # propagate error   }   $dbh->{odbc_err_handler} = \&err_handler;   # do something to cause an error   $dbh->{odbc_err_handler} = undef; # cancel the handler odbc_SQL_ROWSET_SIZE Setting odbc_SQL_ROWSET_SIZE results in a call to SQLSetConnectAttr to set the ODBC SQL_ROWSET_SIZE (9) attribute to whatever value you set odbc_SQL_ROWSET_SIZE to. The ODBC default for SQL_ROWSET_SIZE is 1. Usually MS SQL Server does not support multiple active statements (MAS) i.e., you cannot have 2 or more outstanding selects. You can set odbc_SQL_ROWSET_SIZE to 2 to persuade MS SQL Server to support multiple active statements. Setting SQL_ROWSET_SIZE usually only affects calls to SQLExtendedFetch but does allow MAS and as DBD::ODBC does not use SQLExtendedFetch there should be no ill effects to DBD::ODBC. Be careful with this attribute as once set to anything larger than 1 (the default) you must retrieve all result-sets before the statement handle goes out of scope or you can upset the TDS protocol and this can result in a hang. With DBI this is unlikely as DBI warns when a statement goes out of scope with outstanding results. NOTE: if you get an error saying ""[Microsoft][ODBC SQL Server Driver]Invalid attribute/option identifier (SQL-HY092)"" when you set odbc_SQL_ROWSET_SIZE in the connect method you need to either a) upgrade to DBI 1.616 or above b) set odbc_SQL_ROWSET_SIZE after connect. In versions of SQL Server 2005 and later see ""Multiple Active Statements (MAS)"" in the DBD::ODBC::FAQ instead of using this attribute. Thanks to Andrew Brown for the original patch. DBD developer note: Here lies a bag of worms. Firstly, SQL_ROWSET_SIZE is an ODBC 2 attribute and is usually a statement attribute not a connection attribute. However, in ODBC 2.0 you could set statement attributes on a connection handle and it acted as a default for all subsequent statement handles created under that connection handle. If you are using ODBC 3 the driver manager continues to map this call but the ODBC Driver needs to act on it (the MS SQL Server driver still appears to but some other ODBC drivers for MS SQL Server do not). Secondly, somewhere a long the line MS decided it was no longer valid to retrieve the SQL_ROWSET_SIZE attribute from a connection handle in an ODBC 3 application (which DBD::ODBC now is). In itself, this would not be a problem except for a minor bug in DBI which until release 1.616 mistakenly issued a FETCH on any attribute mentioned in the connect method call. As a result, it you use a DBI prior to 1.616 and attempt to set odbc_SQL_ROWSET_SIZE in the connect method call, DBI issues a FETCH on odbc_SQL_ROWSET_SIZE and the driver manager throws it out as an invalid attribute thus resulting in an error. The only way around this (other than upgrading DBI) is to set odbc_SQL_ROWSET_SIZE AFTER the call to connect. Thirdly, MS withdrew the SQLROWSETSIZE macro from the sql header files in MDAC 2.7 for 64 bit platforms i.e., SQLROWSETSIZE is not defined on 64 bit platforms from MDAC 2.7 as it is in a ""#ifdef win32"" (see http://msdn.microsoft.com/en-us/library/ms716287%28v=vs.85%29.aspx). Setting SQL_ROWSET_SIZE still seems to take effect on 64 bit platforms but you can no longer retrieve its value from a connection handle (hence the issue above with DBI redundant FETCH). odbc_exec_direct Force DBD::ODBC to use SQLExecDirect instead of SQLPrepare/SQLExecute. There are drivers that only support SQLExecDirect and the DBD::ODBC do() override does not allow returning result sets. Therefore, the way to do this now is to set the attribute odbc_exec_direct. NOTE: You may also want to use this option if you are creating temporary objects (e.g., tables) in MS SQL Server and for some reason cannot use the do method. see http://technet.microsoft.com/en-US/library/ms131667.aspx which says Prepared statements cannot be used to create temporary objects on SQL Server 2000 or later.... Without odbc_exec_direct, the temporary object will disappear before you can use it. There are currently two ways to get this:     $dbh->prepare($sql, { odbc_exec_direct => 1}); and     $dbh->{odbc_exec_direct} = 1; NOTE: Even if you build DBD::ODBC with unicode support you can still not pass unicode strings to the prepare method if you also set odbc_exec_direct. This is a restriction in this attribute which is unavoidable. odbc_SQL_DRIVER_ODBC_VER This, while available via get_info() is captured here. I may get rid of this as I only used it for debugging purposes. odbc_cursortype This allows multiple concurrent statements on SQL*Server. In your connect, add   { odbc_cursortype => 2 }. If you are using DBI > 1.41, you should also be able to use  { odbc_cursortype => DBI::SQL_CURSOR_DYNAMIC } instead. For example:     my $dbh = DBI->connect(""dbi:ODBC:$DSN"", $user, $pass,                   { RaiseError => 1, odbc_cursortype => 2});     my $sth = $dbh->prepare(""one statement"");     my $sth2 = $dbh->prepare(""two statement"");     $sth->execute;     my @row;     while (@row = $sth->fetchrow_array) {        $sth2->execute($row[0]);     } See t/20SqlServer.t for an example. In versions of SQL Server 2005 and later see ""Multiple Active Statements (MAS)"" in the DBD::ODBC::FAQ instead of using this attribute. odbc_has_unicode A read-only attribute signifying whether DBD::ODBC was built with the C macro WITH_UNICODE or not. A value of 1 indicates DBD::ODBC was built with WITH_UNICODE else the value returned is 0. Building WITH_UNICODE affects columns and parameters which are SQL_C_WCHAR, SQL_WCHAR, SQL_WVARCHAR, and SQL_WLONGVARCHAR, SQL, the connect method and a lot more. See ""Unicode"". When odbc_has_unicode is 1, DBD::ODBC will: bind all string columns as wide characters (SQL_Wxxx) This means that UNICODE data stored in these columns will be returned to Perl correctly as unicode (i.e., encoded in UTF-8 and the UTF-8 flag set). bind parameters the database declares as wide characters or unicode parameters as SQL_Wxxx Parameters bound where the database declares the parameter as being a wide character, or where the parameter data is unicode, or where the parameter type is explicitly set to a wide type (e.g., SQL_Wxxx) are bound as wide characters in the ODBC API and DBD::ODBC encodes the perl parameters as UTF-16 before passing them to the driver. SQL SQL passed to the prepare or do methods which has the UTF-8 flag set will be converted to UTF-16 before being passed to the ODBC APIs SQLPrepare or SQLExecDirect. connection strings Connection strings passed to the connect method will be converted to UTF-16 before being passed to the ODBC API SQLDriverConnectW. This happens irrespective of whether the UTF-8 flag is set on the perl connect strings because unixODBC requires an application to call SQLDriverConnectW to indicate it will be calling the wide ODBC APIs. NOTE: You will need at least Perl 5.8.1 to use UNICODE with DBD::ODBC. NOTE: Binding of unicode output parameters is coded but untested. NOTE: When building DBD::ODBC on Windows ($^O eq 'MSWin32') the WITH_UNICODE macro is automatically added. To disable specify -nou as an argument to Makefile.PL (e.g. perl Makefile.PL -nou). On non-Windows platforms the WITH_UNICODE macro is not enabled by default and to enable you need to specify the -u argument to Makefile.PL. Please bear in mind that some ODBC drivers do not support SQL_Wxxx columns or parameters. UNICODE support in ODBC Drivers differs considerably. Please read the README.unicode file for further details. odbc_out_connect_string After calling the connect method this will be the ODBC driver's out connection string - see documentation on SQLDriverConnect. NOTE: this value is only set if DBD::ODBC calls the SQLDriverConnect ODBC API (and not SQLConnect) which only happens if a) DSN or DRIVER is specified in the connection string or b) SQLConnect fails. Typically, applications (like MS Access and many others) which build a connection string via dialogs and possibly SQLBrowseConnect eventually end up with a successful ODBC connection to the ODBC driver and database. The odbc_out_connect_string provides a string which you can pass to SQLDriverConnect (DBI's connect prefixed with dbi:ODBC:"") which will connect you to the same datasource at a later date. You may also want to see ""odbc_driver_complete"". odbc_version This was added prior to the move to ODBC 3.x to allow the caller to ""force"" ODBC 3.0 compatibility. It's probably not as useful now, but it allowed get_info and get_type_info to return correct/updated information that ODBC 2.x didn't permit/provide. Since DBD::ODBC is now 3.x, this can be used to force 2.x behavior via something like: my   $dbh = DBI->connect(""dbi:ODBC:$DSN"", $user, $pass,                       { odbc_version =>2}); odbc_driver_complete This attribute was added to DBD::ODBC in 1.32_2. odbc_driver_complete is only relevant to the Windows operating system and will be ignored on other platforms. It is off by default. When set to a true value DBD::ODBC attempts to obtain a window handle and calls SQLDriverConnect with the SQL_DRIVER_COMPLETE attribute instead of the normal SQL_DRIVER_NOPROMPT option. What this means is that if the connection string does not describe sufficient attributes to enable the ODBC driver manager to connect to a data source it will throw a dialogue allowing you to input the remaining attributes. Once you ok that dialogue the ODBC Driver Manager will continue as if you specified those attributes in the connection string. Once the connection is complete you may want to look at the odbc_out_connect_string attribute to obtain a connection string you can use in the future to pass into the connect method without prompting. As a window handle is passed to SQLDriverConnect it also means the ODBC driver may throw a dialogue e.g., if your password has expired the MS SQL Server driver will often prompt for a new one. An example is:   my $h = DBI->connect('dbi:ODBC:DRIVER={SQL Server}', ""username"", ""password"",                        {odbc_driver_complete => 1}); As this only provides the driver and further attributes are required a dialogue will be thrown allowing you to specify the SQL Server to connect to and possibly other attributes. odbc_batch_size Sets the batch size for execute_for_fetch which defaults to 10. Bear in mind the bigger you set this the more memory DBD::ODBC will need to allocate when running execute_for_fetch and the memory required is max_length_of_pn * odbc_batch_size * n_parameters. odbc_array_operations NOTE: this was briefly odbc_disable_array_operations in 1.35 and 1.36_1. I did warn it was experimental and it turned out the default was too ambitious and it was a poor name anyway. Also the default was to use array operations and now the default is the opposite. If set to true DBD::ODBC uses its own internal execute_for_fetch instead of DBI's default execute_for_fetch. The default is false. Using the internal execute_for_fetch should be quite a bit faster when using arrays of parameters for insert/update/delete operations as batches of parameters are sent to the database in one go. However, the required support in some ODBC drivers is a little sketchy and there is no way for DBD::ODBC to ascertain this until it is too late. Please read the documentation on execute_array and execute_for_fetch which details subtle differences in DBD::ODBC's implementation compared with using DBI's default implementation. If these difference cause you a problem you can set odbc_array_operations to false and DBD::ODBC will revert to DBI's implementations of the array methods. You can use the environment variable ODBC_DISABLE_ARRAY_OPERATIONS to switch array operations on/off too. When set to 1 array operations are disabled. When not set the default is used (which currently is off). When set to 0 array operations are used no matter what. I know this is slightly counter intuitive but I've found it difficult to change the name (it got picked up and used in a few places very quickly). odbc_taf_callback NOTE: this is experimental until I at least see more than one ODBC driver which supports TAF. Transparent Application Failover (TAF) is a feature in OCI that allows for clients to automatically reconnect to an instance in the event of a failure of the instance. The reconnect happens automatically from within the OCI (Oracle Call Interface) library. TAF supports a callback function which once registered is called by the driver to let you know what is happening and which allows you to a degree, to control how the failover is handled. You need to set up TAF on your instance first and that process is beyond the scope of this document. Once TAF is enabled you simply set odbc_taf_callback to a code reference which should look like this:   sub taf_handler {    my ($dbh, $event, $type) = @_;    # do something here   } DBD::ODBC will pass the connection handle ($dbh), the Oracle event type (OCI_FO_END, OCI_FO_ABORT, OCI_FO_REAUTH, OCI_FO_BEGIN, OCI_FO_ERROR) and the Oracle type (OCI_FO_NONE, OCI_FO_SESSION, OCI_FO_SELECT, OCI_FO_TXNAL). Consult the Oracle documentation for what these are. You can import these constants using the :taf export tag. If your instance is not TAF enabled it is likely an attempt to register a callback will fail but this is driver dependent (all DBD::ODBC does is make a SQLSetConnectAttr call and provide a C wrapper which calls your Perl subroutine). Here is a commented example:   my $h = DBI->connect('dbi:ODBC:oracle','xxx','yyy',                        {RaiseError => 1,                         odbc_taf_callback => \&taf_handler}) or die ""connect"";   while (1) {       my $s = $h->selectall_arrayref(q/select 1 from dual/);       sleep 5;   }    sub taf_handler {      my ($dbh, $event, $type) = @_;       #print ""taf_handler $dbh, $event, $type\n"";       if ($event == OCI_FO_BEGIN) {          print ""Instance unavailable, stand by\n"";          print ""Your TAF type is : "",              ($type == OCI_FO_NONE ? ""NONE"" :                   ($type == OCI_FO_SESSION ? ""SESSION"" :                        ($type == OCI_FO_SELECT ? ""SELECT"" : ""?""))) , ""\n"";          # start a counter and each time OCI_FO_ERROR is passed in we will          # count down and abort the failover when we hit 0.          $count = 10;          return 0;      } elsif ($event == OCI_FO_ERROR) {          # We get an OCI_FO_ERROR each time the failover fails          # sleep a while until the count hits 0          if (--$count < 1) {              print ""Giving up\n"";              return 0;            # give up          } else {              print ""Retrying...\n"";              sleep 1;              return OCI_FO_RETRY; # tell Oracle to retry          }      } elsif ($event == OCI_FO_REAUTH) {          print ""Failed over user. Resuming Services\n"";      } elsif ($event == OCI_FO_END) {          print ""Failover ended - resuming\n"";      }      return 0;   } NOTE: The above example is for use with the Easysoft Oracle ODBC Driver. ODBC does not define any standard way of supporting TAF and so different drivers may use different connection attributes to set it up or may even pass the callback different arguments. Unfortunately, I don't have access to any other ODBC driver which supports TAF. Until I see others I cannot create a generic interface. I'll happily accept patches for any other driver or if you send me a working copy of the driver and the documentation I will add support for it. odbc_trace_file Specify the name and path to a file you want ODBC API trace information to be written to. See ""odbc_trace"". odbc_trace Enable or disable ODBC API tracing. Set to 1 to enable and 0 to disable. This calls SQLSetConnectAttr for SQL_ATTR_TRACE and either sets SQL_OPT_TRACE_ON or SQL_OPT_TRACE_OFF. Enabling tracing will tell the ODBC driver manager to write and ODBC API trace to the file named with ""odbc_trace_file"". NOTE: If you don't set odbc_trace_file most ODBC Driver Managers write to a file called SQL.LOG in the root directory (but this depends on the driver manager used). NOTE: This tracing is produced by the ODBC Driver Manager and has nothing to do with DBD::ODBC other than it should trace the ODBC calls DBD::ODBC makes i.e., DBD::ODBC is not responsible for the tracing mechanism itself. NOTE: Enabling tracing will probably slow your application down a lot. I'd definitely think twice about it if in a production environment unless you are desperate as it tends to produce very large trace files for short periods of ODBC activity. Private statement attributes odbc_more_results Use this attribute to determine if there are more result sets available. Any ODBC Driver which batches results or counts of inserts/updates will need you to loop on odbc_more_results until there are no more results. e.g., if you are performing multiple selects in a procedure or multiple inserts/updates/deletes then you will probably need to loop on odbc_more_results. Use odbc_more_results as follows:   do {      my @row;      while (@row = $sth->fetchrow_array()) {         # do stuff here      }   } while ($sth->{odbc_more_results}); Note that with multiple result sets and output parameters (i.e,. using bind_param_inout), don't expect output parameters to written to until ALL result sets have been retrieved. Under the hood this attribute causes a call to the ODBC API SQLMoreResults and then any result set, insert/update/delete or output parameters are described by DBD::ODBC and the statement handle will be ready for processing the new result. Private statement methods odbc_rows This method was added in 1.42_1. In 64 bit ODBC SQLRowCount can return a 64bit value for the number of rows affected. Unfortunately, the DBI DBD interface currently (at least until 1.622) defines execute as returning an int so values which cannot fit in an int are truncated. See RT 81911. From DBD::ODBC 1.42_1 DBD::ODBC o defines this method which will return the affected rows in an IV (and IVs are guaranteed to be able to hold a pointer) so you can get the real affected rows without truncation. o if it detects an overflow in the execute method it will issue a warning (if Warn is on which it is by default) and return INT_MAX. At some stage DBI may change to fix the issue this works around. NOTE: the return from odbc_rows is not the raw value returned by SQLRowCount. It is the same as execute normally returns e.g., 0E0 (for 0), -1 for unknown and N for N rows affected where N > 0. odbc_lob_read   $chrs_or_bytes_read = $sth->odbc_lob_read($column_no, \$lob, $length, \%attr); Reads $length bytes from the lob at column $column_no returning the lob into $lob and the number of bytes or characters read into $chrs_or_bytes_read. If an error occurs undef will be returned. When there is no more data to be read 0 is returned. NOTE: This is currently an experimental method and may change in the future e.g., it may support automatic concatenation of the lob parts onto the end of the $lob with the addition of an extra flag or destination offset as in DBI's undocumented blob_read. The type the lob is retrieved as may be overridden in %attr using TYPE => sql_type. %attr is optional and if omitted defaults to SQL_C_BINARY for binary columns and SQL_C_CHAR/SQL_C_WCHAR for other column types depending on whether DBD::ODBC is built with unicode support. $chrs_or_bytes_read will by the bytes read when the column types SQL_C_CHAR or SQL_C_BINARY are used and characters read if the column type is SQL_C_WCHAR. When built with unicode support $length specifies the amount of buffer space to be used when retrieving the lob data but as it is returned as SQLWCHAR characters this means you at most retrieve $length/2 characters. When those retrieved characters are encoded in UTF-8 for Perl, the $lob scalar may need to be larger than $length so DBD::ODBC grows it appropriately. You can retrieve a lob in chunks like this:   $sth->bind_col($column, undef, {TreatAsLOB=>1});   while(my $retrieved = $sth->odbc_lob_read($column, \my $data, $length)) {       print ""retrieved=$retrieved lob_data=$data\n"";   } NOTE: to retrieve a lob like this you must first bind the lob column specifying BindAsLOB or DBD::ODBC will 1) bind the column as normal and it will be subject to LongReadLen and b) fail odbc_lob_read. NOTE: Some database engines and ODBC drivers do not allow you to retrieve columns out of order (e.g., MS SQL Server unless you are using cursors). In those cases you must ensure the lob retrieved is the last (or only) column in your select list. NOTE: You can retrieve only part of a lob but you will probably have to call finish on the statement handle before you do anything else with that statement. When only retrieving part of a large lob you could see a small delay when you call finish as some protocols used by ODBC drivers send the lob down the socket synchronously and there is no way to stop it (this means the ODBC driver needs to read all the lob from the socket even though you never retrieved it all yourself). NOTE: If your select contains multiple lobs you cannot read part of the first lob, the second lob then return to the first lob. You must read all lobs in order and completely or read part of a lob and then do no further calls to odbc_lob_read. Private DBD::ODBC Functions You use DBD::ODBC private functions like this:   $dbh->func(arg, private_function_name, @args); GetInfo This private function is now superseded by DBI's get_info method. This function maps to the ODBC SQLGetInfo call and the argument should be a valid ODBC information type (see ODBC specification). e.g.   $value = $dbh->func(6, 'GetInfo'); which returns the SQL_DRIVER_NAME. This function returns a scalar value, which can be a numeric or string value depending on the information value requested. GetTypeInfo This private function is now superseded by DBI's type_info and type_info_all methods however as it is used by those methods it still exists. This function maps to the ODBC SQLGetTypeInfo API and the argument should be a SQL type number (e.g. SQL_VARCHAR) or SQL_ALL_TYPES. SQLGetTypeInfo returns information about a data type supported by the data source. e.g.   use DBI qw(:sql_types);    $sth = $dbh->func(SQL_ALL_TYPES, GetTypeInfo);   DBI::dump_results($sth); This function returns a DBI statement handle for the SQLGetTypeInfo result-set containing many columns of type attributes (see ODBC specification). NOTE: It is VERY important that the use DBI includes the qw(:sql_types) so that values like SQL_VARCHAR are correctly interpreted. This ""imports"" the sql type names into the program's name space. A very common mistake is to forget the qw(:sql_types) and obtain strange results. GetFunctions This function maps to the ODBC SQLGetFunctions API which returns information on whether a function is supported by the ODBC driver. The argument should be SQL_API_ALL_FUNCTIONS (0) for all functions or a valid ODBC function number (e.g. SQL_API_SQLDESCRIBEPARAM which is 58). See ODBC specification or examine your sqlext.h and sql.h header files for all the SQL_API_XXX macros. If called with SQL_API_ALL_FUNCTIONS (0), then a 100 element array is returned where each element will contain a '1' if the ODBC function with that SQL_API_XXX index is supported or '' if it is not. If called with a specific SQL_API_XXX value for a single function it will return true if the ODBC driver supports that function, otherwise false. e.g.     my @x = $dbh->func(0,""GetFunctions"");     print ""SQLDescribeParam is supported\n"" if ($x[58]); or     print ""SQLDescribeParam is supported\n""         if $dbh->func(58, ""GetFunctions""); GetStatistics This private function is now superseded by DBI's statistics_info method. See the ODBC specification for the SQLStatistics API. You call SQLStatistics like this:   $dbh->func($catalog, $schema, $table, $unique, 'GetStatistics'); Prior to DBD::ODBC 1.16 $unique was not defined as being true/false or SQL_INDEX_UNIQUE/SQL_INDEX_ALL. In fact, whatever value you provided for $unique was passed through to the ODBC API SQLStatistics call unchanged. This changed in 1.16, where $unique became a true/false value which is interpreted into SQL_INDEX_UNIQUE for true and SQL_INDEX_ALL for false. GetForeignKeys This private function is now superseded by DBI's foreign_key_info method. See the ODBC specification for the SQLForeignKeys API. You call SQLForeignKeys like this:   $dbh->func($pcatalog, $pschema, $ptable,              $fcatalog, $fschema, $ftable,              ""GetForeignKeys""); GetPrimaryKeys This private function is now superseded by DBI's primary_key_info method. See the ODBC specification for the SQLPrimaryKeys API. You call SQLPrimaryKeys like this:   $dbh->func($catalog, $schema, $table, ""GetPrimaryKeys""); data_sources This private function is now superseded by DBI's data_sources method and was finally removed in 1.49_1 GetSpecialColumns See the ODBC specification for the SQLSpecialColumns API. You call SQLSpecialColumns like this:   $dbh->func($identifier, $catalog, $schema, $table, $scope,              $nullable, 'GetSpecialColumns'); Handled as of version 0.28 ColAttributes This private function is now superseded by DBI's statement attributes NAME, TYPE, PRECISION, SCALE, NULLABLE etc). See the ODBC specification for the SQLColAttributes API. You call SQLColAttributes like this:   $sth->func($column, $ftype, ""ColAttributes"");    SQL_COLUMN_COUNT = 0   SQL_COLUMN_NAME = 1   SQL_COLUMN_TYPE = 2   SQL_COLUMN_LENGTH = 3   SQL_COLUMN_PRECISION = 4   SQL_COLUMN_SCALE = 5   SQL_COLUMN_DISPLAY_SIZE = 6   SQL_COLUMN_NULLABLE = 7   SQL_COLUMN_UNSIGNED = 8   SQL_COLUMN_MONEY = 9   SQL_COLUMN_UPDATABLE = 10   SQL_COLUMN_AUTO_INCREMENT = 11   SQL_COLUMN_CASE_SENSITIVE = 12   SQL_COLUMN_SEARCHABLE = 13   SQL_COLUMN_TYPE_NAME = 14   SQL_COLUMN_TABLE_NAME = 15   SQL_COLUMN_OWNER_NAME = 16   SQL_COLUMN_QUALIFIER_NAME = 17   SQL_COLUMN_LABEL = 18 Note:Oracle's ODBC driver for linux in instant client 11r1 often returns strange values for column name e.g., '20291'. It is wiser to use DBI's NAME and NAME_xx attributes for portability. DescribeCol Removed in DBD::ODBC 1.40_3 Use the DBI's statement attributes NAME, TYPE, PRECISION, SCALE, NULLABLE etc instead. Additional bind_col attributes DBD::ODBC supports a few additional attributes which may be passed to the bind_col method in the attributes. DiscardString See DBI's sql_type_cast utility function. If you bind a column as a specific type (SQL_INTEGER, SQL_DOUBLE and SQL_NUMERIC are the only ones supported currently) and you add DiscardString to the prepare attributes then if the returned bound data is capable of being converted to that type the scalar's pv (the string portion of a scalar) is cleared. NOTE: post DBD::ODBC 1.37, DBD::ODBC binds all SQL_INTEGER columns as SQL_C_LONG and DiscardString is irrelevant. This is especially useful if you are using a module which uses a scalar's flags and/or pv to decide if a scalar is a number. JSON::XS does this and without this flag you have to add 0 to all bound column data returning numbers to get JSON::XS to encode it is N instead of ""N"". NOTE: For DiscardString you need at least DBI 1.611. StrictlyTyped See DBI's sql_type_cast utility function. See ""DiscardString"" above. Specifies that when DBI's sql_type_cast function is called on returned data where a bind type is specified that if the conversion cannot be performed an error will be raised. This is probably not a lot of use with DBD::ODBC as if you ask for say an SQL_INTEGER and the data is not able to be converted to an integer the ODBC driver will probably return ""Invalid character value for cast specification (SQL-22018)"". NOTE: For StrictlyTyped you need at least DBI 1.611. TreatAsLOB See ""odbc_lob_read"". Tracing DBD::ODBC now supports the parse_trace_flag and parse_trace_flags methods introduced in DBI 1.42 (see DBI for a full description). As of DBI 1.604, the only trace flag defined which is relevant to DBD::ODBC is 'SQL' which DBD::ODBC supports by outputting the SQL strings (after modification) passed to the prepare and do methods. From DBI 1.617 DBI also defines ENC (encoding), CON (connection) TXN (transaction) and DBD (DBD only) trace flags. DBI's ENC and CON trace flags are synonymous with DBD::ODBC's odbcunicode and odbcconnection trace flags though I may remove the DBD::ODBC ones in the future. DBI's DBD trace flag allows output of only DBD::ODBC trace messages without DBI's trace messages. Currently DBD::ODBC supports two private trace flags. The 'odbcunicode' flag traces some unicode operations and the odbcconnection traces the connect process. To enable tracing of particular flags you use:   $h->trace($h->parse_trace_flags('SQL|odbcconnection'));   $h->trace($h->parse_trace_flags('1|odbcunicode')); In the first case 'SQL' and 'odbcconnection' tracing is enabled on $h. In the second case trace level 1 is set and 'odbcunicode' tracing is enabled. If you want to enable a DBD::ODBC private trace flag before connecting you need to do something like:   use DBD::ODBC;   DBI->trace(DBD::ODBC->parse_trace_flag('odbcconnection')); or   use DBD::ODBC;   DBI->trace(DBD::ODBC->parse_trace_flags('odbcconnection|odbcunicode')); or   DBI_TRACE=odbcconnection|odbcunicode perl myscript.pl From DBI 1.617 you can output only DBD::ODBC trace messages using   DBI_TRACE=DBD perl myscript.pl DBD::ODBC outputs tracing at levels 3 and above (as levels 1 and 2 are reserved for DBI). For comprehensive tracing of DBI method calls without all the DBI internals see DBIx::Log4perl. Deviations from the DBI specification last_insert_id DBD::ODBC does not support DBI's last_insert_id. There is no ODBC defined way of obtaining this information. Generally the mechanism (and it differs vastly between databases and ODBC drivers) it to issue a select of some form (e.g., select @@identity or select sequence.currval from dual, etc). There are literally dozens of databases and ODBC drivers supported by DBD::ODBC and I cannot have them all. If you know how to retrieve the information for last_insert_id and you mail me the ODBC Driver name/version and database name/version with a small working example I will collect examples and document them here. Microsoft Access. Recent versions of MS Access support select @@identity to retrieve the last insert ID. See http://support.microsoft.com/kb/815629. Information provided by Robert Freimuth. Comments in SQL DBI does not say anything in particular about comments in SQL. DBD::ODBC looks for placeholders in the SQL string and until 1.24_2 it did not recognise comments in SQL strings so could find what it believes to be a placeholder in a comment e.g.,   select '1' /* placeholder ? in comment */   select -- named placeholder :named in comment     '1' I cannot be exact about support for ignoring placeholders in literals but it has existed for a long time in DBD::ODBC. Support for ignoring placeholders in comments was added in 1.24_2. If you find a case where a named placeholder is not ignored and should be, see ""odbc_ignore_named_placeholders"" for a workaround and mail me an example along with your ODBC driver name. do This is not really a deviation from the DBI specification since DBI allows a driver to avoid the overhead of creating an DBI statement handle for do(). DBD::ODBC implements do by calling SQLExecDirect in ODBC and not SQLPrepare followed by SQLExecute so do is not the same as:   $dbh->prepare($sql)->execute() It does this to avoid a round-trip to the server so it is faster. Normally this is good but some people fall foul of this with MS SQL Server if they call a procedure which outputs print statements (e.g., backup) as the procedure may not complete. See the DBD::ODBC FAQ and in general you are better to use prepare/execute when calling procedures. In addition, you should realise that since DBD::ODBC does not create a DBI statement for do calls, if you set up an error handler the handle passed in when a do fails will be the database handle and not a statement handle. Mixed placeholder types There are 3 conventions for place holders in DBI. These are '?', ':N' and ':name' (where 'N' is a number and 'name' is an alpha numeric string not beginning with a number). DBD::ODBC supports all these methods for naming placeholders but you must only use one method throughout a particular SQL string. If you mix placeholder methods you will get an error like:   Can't mix placeholder styles (1/2) Using the same placeholder more than once DBD::ODBC does not support (currently) the use of one named placeholder more than once in a single SQL string. i.e.,   insert into foo values (:bar, :p1, :p2, :bar); is not supported because 'bar' is used more than once but:   insert into foo values(:bar, :p1, :p2) is ok. If you do the former you will get an error like:   DBD::ODBC does not yet support binding a named parameter more than once Binding named placeholders Although the DBI documentation (as of 1.604) does not say how named parameters are bound Tim Bunce has said that in Oracle they are bound with the leading ':' as part of the name and that has always been the case. i.e.,   prepare(""insert into mytable values (:fred)"");   bind_param("":foo"", 1); DBD::ODBC does not support binding named parameters with the ':' introducer. In the above example you must use:   bind_param(""foo"", 1); In discussion on the dbi-dev list is was suggested that the ':' could be made optional and there were no basic objections but it has not made it's way into the pod yet. Sticky Parameter Types The DBI specification post 1.608 says in bind_param:   The data type is 'sticky' in that bind values passed to execute()   are bound with the data type specified by earlier bind_param()   calls, if any.  Portable applications should not rely on being able   to change the data type after the first bind_param call. DBD::ODBC does allow a parameter to be rebound with another data type as ODBC inherently allows this. Therefore you can do:   # parameter 1 set as a SQL_LONGVARCHAR   $sth->bind_param(1, $data, DBI::SQL_LONGVARCHAR);   # without the bind above the $data parameter would be either a DBD::ODBC   # internal default or whatever the ODBC driver said it was but because   # parameter types are sticky, the type is still SQL_LONGVARCHAR.   $sth->execute($data);   # change the bound type to SQL_VARCHAR   # some DBDs will ignore the type in the following, DBD::ODBC does not   $sth->bind_param(1, $data, DBI::SQL_VARCHAR); disconnect and transactions DBI does not define whether a driver commits or rolls back any outstanding transaction when disconnect is called. As such DBD::ODBC cannot deviate from the specification but you should know it rolls back an uncommitted transaction when disconnect is called if SQLDisconnect returns state 25000 (transaction in progress). execute_for_fetch and execute_array From version 1.34_1 DBD::ODBC implements its own execute_for_fetch which binds arrays of parameters and can send multiple rows (""odbc_batch_size"") of parameters through the ODBC driver in one go (this overrides DBI's default execute_for_fetch). This is much faster when inserting, updating or deleting many rows in one go. Note, execute_array uses execute_for_fetch when the parameters are passed for column-wise binding. NOTE: DBD::ODBC 1.34_1 to DBD::ODBC 1.36_1 set the default to use DBD::ODBC's own execute_for_fetch but quite a few ODBC drivers just cannot handle it. As such, from DBD::ODBC 1.36_2 the default was changed to not use DBD::ODBC's execute_for_fetch (i.e., you need to enable it with ""odbc_array_operations""). NOTE: Some ODBC drivers don't support setting SQL_ATTR_PARAMSET_SIZE > 1, and hence cannot support binding arrays of parameters. The only way to detect this is to attempt to set SQL_ATTR_PARAMSET_SIZE to a value greater than 1 and it is too late once someone has called execute_for_fetch. I don't want to add test code on each connect to test for this as it will affect everyone, even those not using the native execute_for_fetch so for now it is a suck it and see. For your information MS Access which does not support arrays of parameters errors with HY092, ""Invalid attribute/option identifier"". However, there are a small number of differences between using DBD::ODBC's execute_for_fetch compared with using DBI's default implementation (which simply calls execute repeatedly once per row). The differences you may see are: o as DBI's execute_for_fetch does one row at a time the result from execute is for one row and just about all ODBC drivers can report the number of affected rows when SQLRowCount is called per execute. When batches of parameters are sent the driver can still return the number of affected rows but it is usually per batch rather than per row. As a result, the tuple_status array you may pass to execute_for_fetch (or execute_array) usually shows -1 (unknown) for each row although the total affected returned in array context is a correct total affected. o not all ODBC drivers have sufficient ODBC support (arguably a bug) for correct diagnostics support when using arrays. DBI dictates that if a row in the batch is in error the tuple_status will contain the state, native and error message text. However the batch may generate multiple errors per row (which DBI says nothing about) and more than one row may error. In ODBC we get a list of errors but to associate each one with a particular row we need to call SQLGetDiagField for SQL_DIAG_ROW_NUMBER and it should say which row in the batch the diagnostic is associated with. Some ODBC drivers do not support SQL_DIAG_ROW_NUMBER properly and then DBD::ODBC cannot know which row in the batch an error refers to. In this case DBD::ODBC will report an error saying ""failed to retrieve diags"", state of HY000 and a native of 1 so you'll still see an error but not necessarily the exact one. Also, when more than one diagnostic is found for a row DBD::ODBC picks the first one (which is usually most relevant) as there is no way to report more than one diagnostic per row in the tuple_status. If the first problem of SQL_DIAG_ROW_NUMBER proves to be a problem for you the DBD::ODBC tracing will show all errors and you can also use ""odbc_getdiagrec"" yourself. o Binding parameters with execute_array and execute_for_fetch does not allow the parameter types to be set. However, as parameter types are sticky you can call bind_param(param_num, undef, {TYPE => sql_type}) before calling execute_for_fetch/execute_array and the TYPE should be sticky when the batch of parameters is bound. o Although you can insert very large columns execute_for_fetch will need ""odbc_batch_size"" * max length of parameter per parameter so you may hit memory limits. If you use DBI's execute_for_fetch DBD::ODBC uses the ODBC API SQLPutData (see ""odbc_putdata_start"") which does not require large amounts of memory as large columns are sent in pieces. o A lot of drivers have bugs with arrays of parameters (see the ODBC FAQ). e.g., as of 18-MAR-2012 I've seen the latest SQLite ODBC driver seg fault and freeTDS 8/0.91 returns the wrong row count for batches. o DO NOT attempt to do an insert/update/delete and a select in the same SQL with execute_array e.g.,   SET IDENTITY_INSERT mytable ON   insert into mytable (id, name) values (?,?)   SET IDENTITY_INSERT mytable OFF   SELECT SCOPE_IDENTITY() It just won't/can't work although you may not have noticed when using DBI's inbuilt execute_* methods. See rt 75687. type_info_all Many ODBC drivers now return 20 columns in type_info_all rather than the 19 DBI documents. The 20th column is usually called ""USERTYPE"". Recent MS SQL Server ODBC drivers do this. Fortunately this should not adversely affect you so long as you are using the keys provided at the start of type_info_all. Binding Columns The DBI specification allows a column type to be overridden in the call to the bind_col method. Mostly, DBD::ODBC ignores this type as it binds integers (SQL_INTEGER) as a SQL_C_LONG (since DBD::ODBC 1.38_1) and all other columns as SQL_C_CHAR or SQL_C_WCHAR and it is too late to change the bind type after the result-set has been described anyway. The only time when the TYPE passed to bind_col is used in DBD::ODBC is when it is SQL_NUMERIC or SQL_DOUBLE in which case DBD::ODBC will call DBI's sql_type_cast method. Since DBD::ODBC 1.38_1 if you attempt to change the bind type after the column has already bound DBD::ODBC will issue a warning and ignore your column type change e.g.,   my $s = $h->prepare(q/select a from mytable);   $s->execute;  # The column type was determined here   my $r;   $s->bind_col(1, \$r); # and bound as the right type here   $s->execute;   $s->bind_col(1, \$r, {TYPE => SQL_XXX}); # warning, type changed Basically, if you are passing a TYPE to bind_col with DBD::ODBC (other than SQL_NUMERIC or SQL_DOUBLE) your code is probably wrong. Significant changes occurred in DBD::ODBC at 1.38_1 for binding columns. Please see the Changes file. bind_param DBD::ODBC follows the DBI specification for bind_param however the third argument (a type or a hashref containing a type) is loosely defined by DBI. From the DBI pod: The \%attr parameter can be used to hint at the data type the placeholder should have. This is rarely needed. As a general rule, don't specify a type when calling bind_param. If you stick to inserting appropriate data into the appropriate column DBD::ODBC will mostly do the right thing especially if the ODBC driver supports SQLDescribeParam. In particular don't just add a type of SQL_DATE because you are inserting a date (it will not work). The correct syntax in ODBC for inserting dates, times and timestamps is: insert into mytable (mydate, mttime, mytimestamp) values(?,?,?); bind_param(1, ""{d 'YYYY-MM-DD'}""); bind_param(2, ""{t 'HH:MM:SS.MM'}""); # :MM can be omitted and some dbs support :MMM bind_param(3, ""{ts 'YYYY-MM-DD HH:MM:SS'}""); See http://technet.microsoft.com/en-US/library/ms190234%28v=SQL.90%29.aspx The only times when you might want to add a type are: 1. If your ODBC driver does not support SQLDescribeParam (or if you told DBD::ODBC not to use it) then DBD::ODBC will default to inserting each parameter as a string (which is usually the right thing anyway). This is ok, most of the time, but is probably not what you want when inserting a binary (use TYPE => SQL_BINARY). 2. If for some reason your driver describes the parameter incorrectly. It is difficult to describe an example of this. 3. If SQLDescribeParam is supported but fails e.g., MS SQL Server has problems with SQL like ""select myfunc(?) where 1 = 1"". Also, DBI exports some types which are not available in ODBC e.g., SQL_BLOB. If you are unsure about ODBC types look at your ODBC header files or look up valid types in the ODBC specification. Unicode The ODBC specification supports wide character versions (a postfix of 'W') of some of the normal ODBC APIs e.g., SQLDriverConnectW is a wide character version of SQLDriverConnect. In ODBC on Windows the wide characters are defined as SQLWCHARs (2 bytes) and are UCS-2 (but UTF-16 is accepted by some drivers now e.g., MS SQL Server 2012 and the new collation suffix _SC which stands for Supplementary Character Support). On non-Windows, the main driver managers I know of have implemented the wide character APIs differently: unixODBC unixODBC mimics the Windows ODBC API precisely meaning the wide character versions expect and return 2-byte characters in UCS-2 or UTF-16. unixODBC will happily recognise ODBC drivers which only have the ANSI versions of the ODBC API and those that have the wide versions too. unixODBC will allow an ANSI application to work with a unicode ODBC driver and vice versa (although in the latter case you obviously cannot actually use unicode). unixODBC does not prevent you sending UTF-8 in the ANSI versions of the ODBC APIs but whether that is understood by your ODBC driver is another matter. unixODBC differs in only one way from the Microsoft ODBC driver in terms of unicode support in that it avoids unnecessary translations between single byte and double byte characters when an ANSI application is using a unicode-aware ODBC driver by requiring unicode applications to signal their intent by calling SQLDriverConnectW first. On Windows, the ODBC driver manager always uses the wide versions of the ODBC API in ODBC drivers which provide the wide versions regardless of what the application really needs and this results in a lot of unnecessary character translations when you have an ANSI application and a unicode ODBC driver. iODBC The wide character versions expect and return wchar_t types. DBD::ODBC has gone with unixODBC so you cannot use iODBC with a unicode build of DBD::ODBC. However, some ODBC drivers support UTF-8 (although how they do this with SQLGetData reliably I don't know) and so you should be able to use those with DBD::ODBC not built for unicode. Enabling and Disabling Unicode support On Windows Unicode support is enabled by default and to disable it you will need to specify -nou to Makefile.PL to get back to the original behavior of DBD::ODBC before any Unicode support was added. e.g.,   perl Makfile.PL -nou On non-Windows platforms Unicode support is disabled by default. To enable it specify -u to Makefile.PL when you configure DBD::ODBC. e.g.,   perl Makefile.PL -u Unicode - What is supported? As of version 1.17 DBD::ODBC has the following unicode support: SQL (introduced in 1.16_2) Unicode strings in calls to the prepare and do methods are supported so long as the odbc_execdirect attribute is not used. unicode connection strings (introduced in 1.16_2) Unicode connection strings are supported but you will need a DBI post 1.607 for that. column names Unicode column names are returned. bound columns (introduced in 1.15) If the DBMS reports the column as being a wide character (SQL_Wxxx) it will be bound as a wide character and any returned data will be converted from UTF-16 to UTF-8 and the UTF-8 flag will then be set on the data. bound parameters If the perl scalars you bind to parameters are marked UTF-8 and the DBMS reports the type as being a wide type or you bind the parameter as a wide type they will be converted to wide characters and bound as such. metadata calls like table_info, column_info As of DBD::ODBC 1.32_3 meta data calls accept Unicode strings. Since version 1.16_4, the default parameter bind type is SQL_WVARCHAR for unicode builds of DBD::ODBC. This only affects ODBC drivers which do not support SQLDescribeParam and only then if you do not specifically set a SQL type on the bind_param method call. The above Unicode support has been tested with the SQL Server, Oracle 9.2+ and Postgres drivers on Windows and various Easysoft ODBC drivers on UNIX. Unicode - What is not supported? You cannot use unicode parameter names e.g.,   select * from table where column = :unicode_param_name You cannot use unicode strings in calls to prepare if you set the odbc_execdirect attribute. You cannot use the iODBC driver manager with DBD::ODBC built for unicode. Unicode - Caveats For Unicode support on any platform in Perl you will need at least Perl 5.8.1 - sorry but this is the way it is with Perl. The Unicode support in DBD::ODBC expects a WCHAR to be 2 bytes (as it is on Windows and as the ODBC specification suggests it is). Until ODBC specifies any other Unicode support it is not envisioned this will change. On UNIX there are a few different ODBC driver managers. I have only tested the unixODBC driver manager (http://www.unixodbc.org) with Unicode support and it was built with defaults which set WCHAR as 2 bytes. I believe that the iODBC driver manager expects wide characters to be wchar_t types (which are usually 4 bytes) and hence DBD::ODBC will not work iODBC when built for unicode. The ODBC Driver must expect Unicode data specified in SQLBindParameter and SQLBindCol to be UTF-16 in local endianness. Similarly, in calls to SQLPrepareW, SQLDescribeColW and SQLDriverConnectW. You should be aware that once Unicode support is enabled it affects a number of DBI methods (some of which you might not expect). For instance, when listing tables, columns etc some drivers (e.g. Microsoft SQL Server) will report the column types as wide types even if the strings actually fit in 7-bit ASCII. As a result, there is an overhead for retrieving this column data as 2 bytes per character will be transmitted (compared with 1 when Unicode support is not enabled) and these strings will be converted into UTF-8 but will end up fitting (in most cases) into 7bit ASCII so a lot of conversion work has been performed for nothing. If you don't have Unicode table and column names or Unicode column data in your tables you are best disabling Unicode support. I am at present unsure if ChopBlanks processing on Unicode strings is working correctly on UNIX. If nothing else the construct L' ' in dbdimp.c might not work with all UNIX compilers. Reports of issues and patches welcome. Unicode implementation in DBD::ODBC DBD::ODBC uses the wide character versions of the ODBC API and the SQL_WCHAR ODBC type to support unicode in Perl. Wide characters returned from the ODBC driver will be converted to UTF-8 and the perl scalars will have the utf8 flag set (by using sv_utf8_decode). IMPORTANT Perl scalars which are UTF-8 and are sent through the ODBC API will be converted to UTF-16 and passed to the ODBC wide APIs or signalled as SQL_WCHARs (e.g., in the case of bound columns). Retrieved data which are wide characters are converted from UTF-16 to UTF-8. However, you should realise most ODBC drivers do not support UTF-16, ODBC only talks about wide characters being 2 bytes and UCS-2 and UCS-2 and UTF-16 are not the same. UCS-2 only supports Unicode characters in the first plane (the Basic Multilangual Plane or BMP) (code points U+0000 to U+FFFF), the most frequently used characters. So why does DBD::ODBC currently encode in UTF-16? For around 97% of Unicode characters in the range 0-0xFFFF UCS-2 and UTF-16 are exactly the same (and where they differ there is no valid Unicode character as the range U+D800 to U+DFFF is reserved from use only as surrogate pairs). As the ODBC API currently uses UCS-2 it does not support Unicode characters with code points above 0xFFFF (if you know better I'd like to hear from you). However, because DBD::ODBC uses UTF-16 encoding you can still insert Unicode characters above 0xFFFF into your database and retrieve them back correctly but they may not being treated as a single Unicode character in your database e.g., a ""select length(a_column) from table"" with a single Unicode character above 0xFFFF may return 2 and not 1 so you cannot use database functions on that data like upper/lower/length etc but you can at least save the data in your database and get it back. When built for unicode, DBD::ODBC will always call SQLDriverConnectW (and not SQLDriverConnect) even if a) your connection string is not unicode b) you have not got a DBI later than 1.607, because unixODBC requires SQLDriverConnectW to be called if you want to call other unicode ODBC APIs later. As a result, if you build for unicode and pass ASCII strings to the connect method they will be converted to UTF-16 and passed to SQLDriverConnectW. This should make no real difference to perl not using unicode connection strings. You will need a DBI later than 1.607 to support unicode connection strings because until post 1.607 there was no way for DBI to pass unicode strings to the DBD. Unicode and Oracle You have to set the environment variables NLS_NCHAR=AL32UTF8 and NLS_LANG=AMERICAN_AMERICA.AL32UTF8 (or any other language setting ending with .AL32UTF8) before loading DBD::ODBC to make Oracle return Unicode data. (See also ""Oracle and Unicode"" in the POD of DBD::Oracle.) On Windows, using the Oracle ODBC Driver you have to enable the Force SQL_WCHAR support Workaround in the data source configuration to make Oracle return Unicode to a non-Unicode application. Alternatively, you can include FWC=T in your connect string. Unless you need to use ODBC, if you want Unicode support with Oracle you are better off using DBD::Oracle. Unicode and PostgreSQL See the odbc_utf8_on parameter to treat all strings as utf8. Some tests from the original DBD::ODBC 1.13 fail with PostgreSQL 8.0.3, so you may not want to use DBD::ODBC to connect to PostgreSQL 8.0.3. Unicode tests fail because PostgreSQL seems not to give any hints about Unicode, so all data is treated as non-Unicode. Unless you need to use ODBC, if you want Unicode support with Postgres you are better off with DBD::Pg as it has a specific attribute named pg_enable_utf8 to enable Unicode support. Unicode and Easysoft ODBC Drivers We have tested the Easysoft SQL Server, Oracle and ODBC Bridge drivers with DBD::ODBC built for Unicode. All work as described without modification except for the Oracle driver you will need to set you NLS_LANG as mentioned above. Unicode and other ODBC drivers If you have a unicode-enabled ODBC driver and it works with DBD::ODBC let me know and I will include it here. ODBC Support in ODBC Drivers Drivers without SQLDescribeParam Some drivers do not support the SQLDescribeParam ODBC API (e.g., Microsoft Access, FreeTDS). DBD::ODBC uses the SQLDescribeParam API when parameters are bound to your SQL to find the types of the parameters. If the ODBC driver does not support SQLDescribeParam, DBD::ODBC assumes the parameters are SQL_VARCHAR or SQL_WVARCHAR types (depending on whether DBD::ODBC is built for unicode or not and whether your parameter is unicode data). In any case, if you bind a parameter and specify a SQL type this overrides any type DBD::ODBC would choose. For ODBC drivers which do not support SQLDescribeParam the default behavior in DBD::ODBC may not be what you want. To change the default parameter bind type set ""odbc_default_bind_type"". If, after that you have some SQL where you need to vary the parameter types used add the SQL type to the end of the bind_param method.   use DBI qw(:sql_types);   $h = DBI->connect;   # set the default bound parameter type   $h->{odbc_default_bind_type} = SQL_VARCHAR;   # bind a parameter with a specific type   $s = $h->prepare(q/insert into mytable values(?)/);   $s->bind_param(1, ""\x{263a}"", SQL_WVARCHAR); MS SQL Server Query Notification Query notifications were introduced in SQL Server 2005 and SQL Server Native Client. Query notifications allow applications to be notified when data has changed. DBD::ODBC supports query notification with MS SQL Server using the additional prepare attributes odbc_qn_msgtxt, odbc_qn_options and odbc_qn_timeout. When you pass suitable values for these attributes to the prepare method, DBD::ODBC will make the appropriate SQLSetStmtAttr calls after the statement has been allocated. It is beyond the scope of this document to provide a tutorial on doing this but here are some notes that might help you get started. On SQL Server   create database MyDatabase   ALTER DATABASE MyDatabase SET ENABLE_BROKER   use MyDatabase   CREATE TABLE QNtest (a int NOT NULL PRIMARY KEY,                        b nchar(5) NOT NULL,                        c datetime NOT NULL)   INSERT QNtest (a, b, c) SELECT 1, 'ALFKI', '19991212'   CREATE QUEUE myQueue   CREATE SERVICE myService ON QUEUE myQueue   See L<http://technet.microsoft.com/en-us/library/ms175110%28v=SQL.105%29.aspx> You need to set these SQL Server permissions unless the subscriber is a sysadmin:   GRANT RECEIVE ON QueryNotificationErrorsQueue TO ""<login-for-subscriber>""   GRANT SUBSCRIBE QUERY NOTIFICATIONS TO ""<login-for-subscriber>"" To subscribe to query notification for this example:   # Prepare the statement.   # This is the SQL you want to know if the result changes later   my $sth = $dbh->prepare(q/SELECT a, b, c FROM dbo.QNtest WHERE a = 1/,                           {odbc_qn_msgtxt => 'Message text',                            odbc_qn_options => 'service=myService',                            odbc_qn_timeout=> 430000});   # Fetch and display the result set value.   while ( my @row = $sth->fetchrow_array ) {      print ""@row\n"";   }   # select * from sys.dm_qn_subscriptions will return a record now you are subscribed To wait for notification:   # Avoid ""String data, right truncation"" error when retrieving   # the message.   $dbh->{LongReadLen} = 800;    # This query generates a result telling you which query has changed   # It will block until the timeout or the query changes   my $sth = $dbh->prepare(q/WAITFOR (RECEIVE * FROM MyQueue)/);   $sth->execute();    # in the mean time someone does UPDATE dbo.QNtest SET c = '19981212' WHERE a = 1    # Fetch and display the result set value.   while ( my @row = $sth->fetchrow_array ) {      print ""@row\n"";   }   # You now need to understand the result and look to decide which query has changed Version Control DBD::ODBC source code was under version control at svn.perl.org until April 2013 when svn.perl.org was closed down and it is now on github at https://github.com/perl5-dbi/DBD-ODBC.git. Contributing There are a number of ways you may help with the development and maintenance of this module: Submitting patches Please send me a git pull request or email a unified diff. Please try and include a test which demonstrates the fix/change working. Reporting installs Install CPAN::Reporter and report you installations. This is easy to do - see ""CPAN Testers Reporting"". Report bugs If you find what you believe is a bug then enter it into the http://rt.cpan.org/Dist/Display.html?Name=DBD-ODBC system. Where possible include code which reproduces the problem including any schema required and the versions of software you are using. If you are unsure whether you have found a bug report it anyway or post it to the dbi-users mailing list. pod comments and corrections If you find inaccuracies in the DBD::ODBC pod or have a comment which you think should be added then go to http://annocpan.org and submit them there. I get an email for every comment added and will review each one and apply any changes to the documentation. Review DBD::ODBC Add your review of DBD::ODBC on http://cpanratings.perl.org. If you are a member on ohloh then add your review or register your use of DBD::ODBC at http://www.ohloh.net/projects/perl_dbd_odbc. submit test cases Most DBDs are built against a single client library for the database. Unlike other DBDs, DBD::ODBC works with many different ODBC drivers. Although they all should be written with regard to the ODBC specification drivers have bugs and in some places the specification is open to interpretation. As a result, when changes are applied to DBD::ODBC it is very easy to break something in one ODBC driver. What helps enormously to identify problems in the many combinations of DBD::ODBC and ODBC drivers is a large test suite. I would greatly appreciate any test cases and in particular any new test cases for databases other than MS SQL Server. Test DBD::ODBC I have a lot of problems deciding when to move a development release to an official release since I get few test reports for development releases. What often happens is I call for testers on various lists, get a few and then get inundated with requests to do an official release. Then I do an official release and loads of rts appear out of nowhere and the cycle starts again. DBD::ODBC by its very nature works with many ODBC Drivers and it is impossible for me to have and test them all (this differs from other DBDs). If you depend on DBD::ODBC you should be interested in new releases and if you send me your email address suggesting you are prepared to be part of the DBD::ODBC testing network I will credit you in the Changes file and perhaps the main DBD::ODBC file. CPAN Testers Reporting Please, please, please (is that enough), consider installing CPAN::Reporter so that when you install perl modules a report of the installation success or failure can be sent to cpan testers. In this way module authors 1) get feedback on the fact that a module is being installed 2) get to know if there are any installation problems. Also other people like you may look at the test reports to see how successful they are before choosing the version of a module to install. See this guide on how to get started with sending test reports: http://wiki.cpantesters.org/wiki/QuickStart. Others/todo? Level 2     SQLColumnPrivileges     SQLProcedureColumns     SQLProcedures     SQLTablePrivileges     SQLDrivers     SQLNativeSql Random Links These are in need of sorting and annotating. Some are relevant only to ODBC developers. You can find DBD::ODBC on ohloh now at: http://www.ohloh.net/projects/perl_dbd_odbc If you use ohloh and DBD::ODBC please say you use it and rate it. There is a good search engine for the various Perl DBI lists at the following URLS: http://perl.markmail.org/search/list:org.perl.dbi-users http://perl.markmail.org/search/list:org.perl.dbi-dev http://perl.markmail.org/search/list:org.perl.dbi-announce http://www.syware.com http://www.microsoft.com/odbc For Linux/Unix folks, compatible ODBC driver managers can be found at: http://www.unixodbc.org (unixODBC source and rpms) http://www.iodbc.org (iODBC driver manager source) For Linux/Unix folks, you can checkout the following for ODBC Drivers and Bridges: http://www.easysoft.com http://www.openlinksw.com http://www.datadirect.com http://www.atinet.com Some useful tutorials: Debugging Perl DBI: http://www.easysoft.com/developer/languages/perl/dbi-debugging.html Enabling ODBC support in Perl with Perl DBI and DBD::ODBC: http://www.easysoft.com/developer/languages/perl/dbi_dbd_odbc.html Perl DBI/DBD::ODBC Tutorial Part 1 - Drivers, Data Sources and Connection: http://www.easysoft.com/developer/languages/perl/dbd_odbc_tutorial_part_1.html Perl DBI/DBD::ODBC Tutorial Part 2 - Introduction to retrieving data from your database: http://www.easysoft.com/developer/languages/perl/dbd_odbc_tutorial_part_2.html Perl DBI/DBD::ODBC Tutorial Part 3 - Connecting Perl on UNIX or Linux to Microsoft SQL Server: http://www.easysoft.com/developer/languages/perl/sql_server_unix_tutorial.html Perl DBI - Put Your Data On The Web: http://www.easysoft.com/developer/languages/perl/tutorial_data_web.html Multiple Active Statements (MAS) and DBD::ODBC http://www.easysoft.com/developer/languages/perl/multiple-active-statements.html 64-bit ODBC http://www.easysoft.com/developer/interfaces/odbc/64-bit.html How do I insert Unicode supplementary characters into SQL Server from Perl? http://www.easysoft.com/support/kb/kb01043.html Some Common Unicode Problems and Solutions using Perl DBD::ODBC and MS SQL Server http://www.easysoft.com/developer/languages/perl/sql-server-unicode.html and a version possibly kept more up to date: https://github.com/mjegh/dbd_odbc_sql_server_unicode/blob/master/common_problems.pod How do I use SQL Server Query Notifications from Linux and UNIX? http://www.easysoft.com/support/kb/kb01069.html Frequently Asked Questions Frequently asked questions are now in DBD::ODBC::FAQ. Run perldoc DBD::ODBC::FAQ to view them. CONFIGURATION AND ENVIRONMENT You should consult the documentation for the ODBC Driver Manager you are using. DEPENDENCIES DBI Test::Simple INCOMPATIBILITIES None known. BUGS AND LIMITATIONS None known other than the deviations from the DBI specification mentioned above in ""Deviations from the DBI specification"". Please report any to me via the CPAN RT system. See http://rt.cpan.org/ for more details. AUTHOR Tim Bunce Jeff Urlwin Thomas K. Wenrich Martin J. Evans LICENSE AND COPYRIGHT This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself. See perlartistic. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Portions of this software are Copyright Tim Bunce, Thomas K. Wenrich, Jeff Urlwin and Martin J. Evans - see the source. SEE ALSO DBI DBD::ODBC can be used with many ODBC drivers to many different databases. If you want a generic DBD for multiple databases DBD::ODBC is probably for you. If you are only accessing a single database then you might want to look for DBD::my_database (e.g. DBD::Oracle) as database specific DBDs often have more functionality. DBIx::LogAny or DBIx::Log4perl for logging DBI method calls, SQL, parameters and results. × Module Install Instructions To install DBD::ODBC, simply copy and paste either of the commands in to your terminal cpanm                      cpanm DBD::ODBC CPAN shell                      perl -MCPAN -e shell                     install DBD::ODBC For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Any ODBC Driver. MS-SQL w/ placeholders"	"true"
"Relational Databases"	"DBD::Oracle"	"https://metacpan.org/pod/DBD::Oracle"	"Oracle database driver for the DBI module"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DBD::Oracle - Oracle database driver for the DBI module - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Pythian Remote DBA  /  1.75_2 DEV (MJEVANS on 2014-11-19) 1.74 (PYTHIAN on 2014-04-25) 1.73_01 DEV (PYTHIAN on 2014-04-23) 1.73_00 DEV (PYTHIAN on 2014-04-23) 1.72 (PYTHIAN on 2014-04-14) 1.71_00 DEV (PYTHIAN on 2014-03-31) 1.70 (PYTHIAN on 2014-02-12) 1.69_02 DEV (PYTHIAN on 2014-01-20) 1.69_01 DEV (PYTHIAN on 2014-01-14) 1.68 (PYTHIAN on 2013-11-25) 1.67_00 DEV (PYTHIAN on 2013-11-05) 1.66 (PYTHIAN on 2013-08-23) 1.65_00 DEV (PYTHIAN on 2013-07-29) 1.64 (PYTHIAN on 2013-05-22) 1.63_00 DEV (PYTHIAN on 2013-05-03) 1.62 (PYTHIAN on 2013-04-30) 1.61_00 DEV (PYTHIAN on 2013-04-15) 1.60 (PYTHIAN on 2013-04-01) 1.58 (PYTHIAN on 2013-03-05) 1.57_00 DEV (PYTHIAN on 2013-02-07) 1.56 (PYTHIAN on 2013-01-08) 1.54 (PYTHIAN on 2013-01-03) 1.53_00 DEV (PYTHIAN on 2012-12-18) 1.52 (PYTHIAN on 2012-10-22) 1.51_00 DEV (PYTHIAN on 2012-09-28) 1.50 (PYTHIAN on 2012-08-15) 1.48 (PYTHIAN on 2012-08-09) 1.47_00 DEV (PYTHIAN on 2012-07-11) 1.46 (PYTHIAN on 2012-07-11) 1.45_00 DEV (PYTHIAN on 2012-06-21) 1.44 (PYTHIAN on 2012-04-23) 1.43_00 DEV (PYTHIAN on 2012-03-30) 1.42 (PYTHIAN on 2012-03-13) 1.40 (PYTHIAN on 2012-03-08) 1.39_00 DEV (PYTHIAN on 2012-02-24) 1.38 (PYTHIAN on 2012-01-13) 1.37_00 DEV (PYTHIAN on 2011-12-30) 1.36 (PYTHIAN on 2011-12-06) 1.35_00 DEV (PYTHIAN on 2011-11-18) 1.34 (PYTHIAN on 2011-10-31) 1.33_00 DEV (PYTHIAN on 2011-10-18) 1.32 (PYTHIAN on 2011-10-18) 1.31_00 DEV (PYTHIAN on 2011-10-06) 1.30 (PYTHIAN on 2011-08-26) 1.29_1 DEV (PYTHIAN on 2011-07-04) 1.28 (PYTHIAN on 2011-03-20) 1.27 (PYTHIAN on 2010-12-20) 1.26 (TIMB on 2010-10-11) 1.25 (PYTHIAN on 2010-09-17) 1.25 (PYTHIAN on 2010-09-17) 1.24 (PYTHIAN on 2010-05-26) 1.24 (PYTHIAN on 2010-02-08) 1.23 (PYTHIAN on 2009-04-29) 1.22 (PYTHIAN on 2008-08-01) 1.21 (PYTHIAN on 2008-04-11) 1.20 (PYTHIAN on 2008-01-11) 1.19 (PYTHIAN on 2006-11-03) 1.18 (PYTHIAN on 2006-07-25) 1.17 (PYTHIAN on 2006-02-08) 1.25 (TIMB on 2010-10-11) 1.25 (TIMB on 2010-10-11) 1.18 (PYTHIAN on 2006-07-24) 1.16 (TIMB on 2004-10-22) 1.15 (TIMB on 2004-01-27) 1.14 (TIMB on 2003-03-27) 1.13 (TIMB on 2003-03-14) 1.12 (TIMB on 2001-08-31) 1.11 (TIMB on 2001-08-31) 1.10 (TIMB on 2001-08-30) 1.09 (TIMB on 2001-08-29) 1.08 (TIMB on 2001-08-07) 1.07 (TIMB on 2001-06-06) 1.06 (TIMB on 2000-07-14) 1.05 (TIMB on 2000-07-14) 1.03 (TIMB on 1999-07-12) 1.02 (TIMB on 1999-06-14) 1.01 (TIMB on 1999-06-08) 0.61 (TIMB on 1999-04-09) 0.60 (TIMB on 1999-03-10) 0.59 (TIMB on 1998-12-28) 0.55 (TIMB on 1998-12-16) 0.540093 DEV (TIMB on 1998-12-14) 0.540092 DEV (TIMB on 1998-12-10) 0.540091 DEV (TIMB on 1998-12-02) 0.540090 DEV (TIMB on 1998-11-29) 0.54 (TIMB on 1998-08-14) 0.53 (TIMB on 1998-08-03) 0.52 (TIMB on 1998-07-28) 0.51 (TIMB on 1998-07-06) 0.50 (TIMB on 1998-06-04) 0.49 (TIMB on 1998-06-02) 0.48 (TIMB on 1998-05-26) 0.47 (TIMB on 1997-09-08) 0.46 (TIMB on 1997-06-20) 0.45 (TIMB on 1997-06-14) 0.44 (TIMB on 1997-01-14) 0.43 (TIMB on 1996-10-29) 0.40 (TIMB on 1996-10-15) 0.39 (TIMB on 1996-09-23) 0.38 (TIMB on 1996-09-23) 0.37 (TIMB on 1996-07-26) 0.36 (TIMB on 1996-07-10) 0.35 (TIMB on 1996-06-22) 0.34 (TIMB on 1996-06-22) 0.33 (TIMB on 1996-06-18) 0.32 (TIMB on 1996-06-05) 0.31 (TIMB on 1996-05-20) 0.30 (TIMB on 1996-05-07) 0.29 (TIMB on 1996-05-07) DBD-Oracle-1.74 19 ++ 19 ++  / DBD::Oracle 25 Apr 2014 01:04:28 GMT Module version: 1.74 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues 4 (14 reviews) Testers (18 / 1 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (438.33Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.75_2 DEV (MJEVANS on 2014-11-19) 1.73_01 DEV (PYTHIAN on 2014-04-23) 1.73_00 DEV (PYTHIAN on 2014-04-23) 1.72 (PYTHIAN on 2014-04-14) 1.71_00 DEV (PYTHIAN on 2014-03-31) 1.70 (PYTHIAN on 2014-02-12) 1.69_02 DEV (PYTHIAN on 2014-01-20) 1.69_01 DEV (PYTHIAN on 2014-01-14) 1.68 (PYTHIAN on 2013-11-25) 1.67_00 DEV (PYTHIAN on 2013-11-05) 1.66 (PYTHIAN on 2013-08-23) 1.65_00 DEV (PYTHIAN on 2013-07-29) 1.64 (PYTHIAN on 2013-05-22) 1.63_00 DEV (PYTHIAN on 2013-05-03) 1.62 (PYTHIAN on 2013-04-30) 1.61_00 DEV (PYTHIAN on 2013-04-15) 1.60 (PYTHIAN on 2013-04-01) 1.58 (PYTHIAN on 2013-03-05) 1.57_00 DEV (PYTHIAN on 2013-02-07) 1.56 (PYTHIAN on 2013-01-08) 1.54 (PYTHIAN on 2013-01-03) 1.53_00 DEV (PYTHIAN on 2012-12-18) 1.52 (PYTHIAN on 2012-10-22) 1.51_00 DEV (PYTHIAN on 2012-09-28) 1.50 (PYTHIAN on 2012-08-15) 1.48 (PYTHIAN on 2012-08-09) 1.47_00 DEV (PYTHIAN on 2012-07-11) 1.46 (PYTHIAN on 2012-07-11) 1.45_00 DEV (PYTHIAN on 2012-06-21) 1.44 (PYTHIAN on 2012-04-23) 1.43_00 DEV (PYTHIAN on 2012-03-30) 1.42 (PYTHIAN on 2012-03-13) 1.40 (PYTHIAN on 2012-03-08) 1.39_00 DEV (PYTHIAN on 2012-02-24) 1.38 (PYTHIAN on 2012-01-13) 1.37_00 DEV (PYTHIAN on 2011-12-30) 1.36 (PYTHIAN on 2011-12-06) 1.35_00 DEV (PYTHIAN on 2011-11-18) 1.34 (PYTHIAN on 2011-10-31) 1.33_00 DEV (PYTHIAN on 2011-10-18) 1.32 (PYTHIAN on 2011-10-18) 1.31_00 DEV (PYTHIAN on 2011-10-06) 1.30 (PYTHIAN on 2011-08-26) 1.29_1 DEV (PYTHIAN on 2011-07-04) 1.28 (PYTHIAN on 2011-03-20) 1.27 (PYTHIAN on 2010-12-20) 1.26 (TIMB on 2010-10-11) 1.25 (PYTHIAN on 2010-09-17) 1.25 (PYTHIAN on 2010-09-17) 1.24 (PYTHIAN on 2010-05-26) 1.24 (PYTHIAN on 2010-02-08) 1.23 (PYTHIAN on 2009-04-29) 1.22 (PYTHIAN on 2008-08-01) 1.21 (PYTHIAN on 2008-04-11) 1.20 (PYTHIAN on 2008-01-11) 1.19 (PYTHIAN on 2006-11-03) 1.18 (PYTHIAN on 2006-07-25) 1.17 (PYTHIAN on 2006-02-08) 1.25 (TIMB on 2010-10-11) 1.25 (TIMB on 2010-10-11) 1.18 (PYTHIAN on 2006-07-24) 1.16 (TIMB on 2004-10-22) 1.15 (TIMB on 2004-01-27) 1.14 (TIMB on 2003-03-27) 1.13 (TIMB on 2003-03-14) 1.12 (TIMB on 2001-08-31) 1.11 (TIMB on 2001-08-31) 1.10 (TIMB on 2001-08-30) 1.09 (TIMB on 2001-08-29) 1.08 (TIMB on 2001-08-07) 1.07 (TIMB on 2001-06-06) 1.06 (TIMB on 2000-07-14) 1.05 (TIMB on 2000-07-14) 1.03 (TIMB on 1999-07-12) 1.02 (TIMB on 1999-06-14) 1.01 (TIMB on 1999-06-08) 0.61 (TIMB on 1999-04-09) 0.60 (TIMB on 1999-03-10) 0.59 (TIMB on 1998-12-28) 0.55 (TIMB on 1998-12-16) 0.540093 DEV (TIMB on 1998-12-14) 0.540092 DEV (TIMB on 1998-12-10) 0.540091 DEV (TIMB on 1998-12-02) 0.540090 DEV (TIMB on 1998-11-29) 0.54 (TIMB on 1998-08-14) 0.53 (TIMB on 1998-08-03) 0.52 (TIMB on 1998-07-28) 0.51 (TIMB on 1998-07-06) 0.50 (TIMB on 1998-06-04) 0.49 (TIMB on 1998-06-02) 0.48 (TIMB on 1998-05-26) 0.47 (TIMB on 1997-09-08) 0.46 (TIMB on 1997-06-20) 0.45 (TIMB on 1997-06-14) 0.44 (TIMB on 1997-01-14) 0.43 (TIMB on 1996-10-29) 0.40 (TIMB on 1996-10-15) 0.39 (TIMB on 1996-09-23) 0.38 (TIMB on 1996-09-23) 0.37 (TIMB on 1996-07-26) 0.36 (TIMB on 1996-07-10) 0.35 (TIMB on 1996-06-22) 0.34 (TIMB on 1996-06-22) 0.33 (TIMB on 1996-06-18) 0.32 (TIMB on 1996-06-05) 0.31 (TIMB on 1996-05-20) 0.30 (TIMB on 1996-05-07) 0.29 (TIMB on 1996-05-07) Diff with version 1.75_2 DEV (MJEVANS on 2014-11-19) 1.73_01 DEV (PYTHIAN on 2014-04-23) 1.73_00 DEV (PYTHIAN on 2014-04-23) 1.72 (PYTHIAN on 2014-04-14) 1.71_00 DEV (PYTHIAN on 2014-03-31) 1.70 (PYTHIAN on 2014-02-12) 1.69_02 DEV (PYTHIAN on 2014-01-20) 1.69_01 DEV (PYTHIAN on 2014-01-14) 1.68 (PYTHIAN on 2013-11-25) 1.67_00 DEV (PYTHIAN on 2013-11-05) 1.66 (PYTHIAN on 2013-08-23) 1.65_00 DEV (PYTHIAN on 2013-07-29) 1.64 (PYTHIAN on 2013-05-22) 1.63_00 DEV (PYTHIAN on 2013-05-03) 1.62 (PYTHIAN on 2013-04-30) 1.61_00 DEV (PYTHIAN on 2013-04-15) 1.60 (PYTHIAN on 2013-04-01) 1.58 (PYTHIAN on 2013-03-05) 1.57_00 DEV (PYTHIAN on 2013-02-07) 1.56 (PYTHIAN on 2013-01-08) 1.54 (PYTHIAN on 2013-01-03) 1.53_00 DEV (PYTHIAN on 2012-12-18) 1.52 (PYTHIAN on 2012-10-22) 1.51_00 DEV (PYTHIAN on 2012-09-28) 1.50 (PYTHIAN on 2012-08-15) 1.48 (PYTHIAN on 2012-08-09) 1.47_00 DEV (PYTHIAN on 2012-07-11) 1.46 (PYTHIAN on 2012-07-11) 1.45_00 DEV (PYTHIAN on 2012-06-21) 1.44 (PYTHIAN on 2012-04-23) 1.43_00 DEV (PYTHIAN on 2012-03-30) 1.42 (PYTHIAN on 2012-03-13) 1.40 (PYTHIAN on 2012-03-08) 1.39_00 DEV (PYTHIAN on 2012-02-24) 1.38 (PYTHIAN on 2012-01-13) 1.37_00 DEV (PYTHIAN on 2011-12-30) 1.36 (PYTHIAN on 2011-12-06) 1.35_00 DEV (PYTHIAN on 2011-11-18) 1.34 (PYTHIAN on 2011-10-31) 1.33_00 DEV (PYTHIAN on 2011-10-18) 1.32 (PYTHIAN on 2011-10-18) 1.31_00 DEV (PYTHIAN on 2011-10-06) 1.30 (PYTHIAN on 2011-08-26) 1.29_1 DEV (PYTHIAN on 2011-07-04) 1.28 (PYTHIAN on 2011-03-20) 1.27 (PYTHIAN on 2010-12-20) 1.26 (TIMB on 2010-10-11) 1.25 (PYTHIAN on 2010-09-17) 1.25 (PYTHIAN on 2010-09-17) 1.24 (PYTHIAN on 2010-05-26) 1.24 (PYTHIAN on 2010-02-08) 1.23 (PYTHIAN on 2009-04-29) 1.22 (PYTHIAN on 2008-08-01) 1.21 (PYTHIAN on 2008-04-11) 1.20 (PYTHIAN on 2008-01-11) 1.19 (PYTHIAN on 2006-11-03) 1.18 (PYTHIAN on 2006-07-25) 1.17 (PYTHIAN on 2006-02-08) 1.25 (TIMB on 2010-10-11) 1.25 (TIMB on 2010-10-11) 1.18 (PYTHIAN on 2006-07-24) 1.16 (TIMB on 2004-10-22) 1.15 (TIMB on 2004-01-27) 1.14 (TIMB on 2003-03-27) 1.13 (TIMB on 2003-03-14) 1.12 (TIMB on 2001-08-31) 1.11 (TIMB on 2001-08-31) 1.10 (TIMB on 2001-08-30) 1.09 (TIMB on 2001-08-29) 1.08 (TIMB on 2001-08-07) 1.07 (TIMB on 2001-06-06) 1.06 (TIMB on 2000-07-14) 1.05 (TIMB on 2000-07-14) 1.03 (TIMB on 1999-07-12) 1.02 (TIMB on 1999-06-14) 1.01 (TIMB on 1999-06-08) 0.61 (TIMB on 1999-04-09) 0.60 (TIMB on 1999-03-10) 0.59 (TIMB on 1998-12-28) 0.55 (TIMB on 1998-12-16) 0.540093 DEV (TIMB on 1998-12-14) 0.540092 DEV (TIMB on 1998-12-10) 0.540091 DEV (TIMB on 1998-12-02) 0.540090 DEV (TIMB on 1998-11-29) 0.54 (TIMB on 1998-08-14) 0.53 (TIMB on 1998-08-03) 0.52 (TIMB on 1998-07-28) 0.51 (TIMB on 1998-07-06) 0.50 (TIMB on 1998-06-04) 0.49 (TIMB on 1998-06-02) 0.48 (TIMB on 1998-05-26) 0.47 (TIMB on 1997-09-08) 0.46 (TIMB on 1997-06-20) 0.45 (TIMB on 1997-06-14) 0.44 (TIMB on 1997-01-14) 0.43 (TIMB on 1996-10-29) 0.40 (TIMB on 1996-10-15) 0.39 (TIMB on 1996-09-23) 0.38 (TIMB on 1996-09-23) 0.37 (TIMB on 1996-07-26) 0.36 (TIMB on 1996-07-10) 0.35 (TIMB on 1996-06-22) 0.34 (TIMB on 1996-06-22) 0.33 (TIMB on 1996-06-18) 0.32 (TIMB on 1996-06-05) 0.31 (TIMB on 1996-05-20) 0.30 (TIMB on 1996-05-07) 0.29 (TIMB on 1996-05-07) Help Wanted developer documenter tester Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 11 PAUSE users 8 non-PAUSE users. PYTHIAN Pythian Remote DBA and 16 contributors show them Tim Bunce John Scoles Yanick Champoux Martin J. Evans David E. Wheeler David Perry David Steinbrunner Gwen Shapira Joe Crotty Michael Portnoy StephenCIQG cjardine gregor herrmann jurl lbaxter robert Dependencies DBI DynaLoader Exporter strict warnings CPAN Testers List Reverse dependencies Dependency graph × DBD-Oracle-1.74 NAME VERSION SYNOPSIS DESCRIPTION CONSTANTS DBI CLASS METHODS connect OS authentication Oracle Environment Variables Timezones Oracle DRCP TAF (Transparent Application Failover) Connect Attributes ora_ncs_buff_mtpl ora_drcp ora_drcp_class ora_drcp_min ora_drcp_max ora_drcp_incr ora_taf ora_taf_function ora_taf_sleep ora_session_mode ora_oratab_orahome ora_module_name ora_driver_name ora_client_info ora_client_identifier ora_action ora_dbh_share ora_envhp ora_charset, ora_ncharset ora_verbose ora_oci_success_warn ora_objects ora_ph_type ora_parse_error_offset ora_array_chunk_size ora_connect_with_default_signals connect_cached data_sources METHODS COMMON TO ALL HANDLES err errstr state trace trace_msg parse_trace_flag and parse_trace_flags func Private database handle functions plsql_errstr dbms_output_enable / dbms_output_put / dbms_output_get dbms_output_enable ( [ buffer_size ] ) dbms_output_put ( [ @lines ] ) dbms_output_get reauthenticate ( $username, $password ) private_attribute_info ATTRIBUTES COMMON TO ALL HANDLES InactiveDestroy (boolean) RaiseError (boolean, inherited) PrintError (boolean, inherited) ShowErrorStatement (boolean, inherited) Warn (boolean, inherited) Executed (boolean, read-only) TraceLevel (integer, inherited) Active (boolean, read-only) Kids (integer, read-only) ActiveKids (integer, read-only) CachedKids (hash ref) ChildHandles (array ref) PrintWarn (boolean, inherited) HandleError (boolean, inherited) HandleSetErr (code ref, inherited) ErrCount (unsigned integer) FetchHashKeyName (string, inherited) ChopBlanks (boolean, inherited) Taint (boolean, inherited) TaintIn (boolean, inherited) TaintOut (boolean, inherited) Profile (inherited) Type (scalar) LongReadLen LongTruncOk CompatMode ORACLE-SPECIFIC DATABASE HANDLE METHODS ora_can_unicode ( [ $refresh ] ) ora_can_taf ora_nls_parameters ( [ $refresh ] ) ORACLE-SPECIFIC DATABASE FUNCTIONS ora_server_version DATABASE HANDLE METHODS selectall_arrayref selectall_hashref selectcol_arrayref prepare Prepare Attributes Placeholders prepare_cached do last_insert_id commit rollback begin_work disconnect ping get_info() table_info() primary_key_info() foreign_key_info() column_info() statistics_info() selectrow_array selectrow_arrayref selectrow_hashref clone DATABASE HANDLE ATTRIBUTES AutoCommit (boolean) ReadOnly (boolean) Name (string, read-only) Username (string, read-only) Driver (handle, read-only) RowCacheSize Row Caching Row Prefetching ORACLE-SPECIFIC STATEMENT HANDLE METHODS ora_stmt_type ora_stmt_type_name DBI STATEMENT HANDLE OBJECT METHODS bind_param Optimizing Results Prepare Postponed Till Execute bind_param_inout Returning A Value from an INSERT Returning A Recordset SYS.DBMS_SQL datatypes ORA_VARCHAR2_TABLE ORA_NUMBER_TABLE bind_param_inout_array bind_param_array execute execute_array execute_for_fetch fetchrow_arrayref fetchrow_array fetchrow_hashref fetchall_arrayref fetchall_hashref finish rows bind_col bind_columns dump_results STATEMENT HANDLE ATTRIBUTES NUM_OF_FIELDS (integer, read-only) NUM_OF_PARAMS (integer, read-only) NAME (arrayref, read-only) NAME_lc (arrayref, read-only) NAME_uc (arrayref, read-only) NAME_hash (hashref, read-only) NAME_lc_hash (hashref, read-only) NAME_uc_hash (hashref, read-only) TYPE (arrayref, read-only) PRECISION (arrayref, read-only) SCALE (arrayref, read-only) NULLABLE (arrayref, read-only) Database (dbh, read-only) ParamValues (hash ref, read-only) ParamTypes (hash ref, read-only) Statement (string, read-only) RowsInCache SCROLLABLE CURSORS Enabling Scrollable Cursors Scrollable Cursor Methods Scrollable Cursor Usage LOBS AND LONGS Data Interface for Persistent LOBs Simple Fetch for LONGs and LONG RAWs Using ora_ncs_buff_mtpl Simple Fetch for CLOBs and BLOBs Piecewise Fetch with Callback Piecewise Fetch with Polling Binding for Updates and Inserts for CLOBs and BLOBs Support for Remote LOBs; Locator Data Interface Simple Usage LOB support in PL/SQL Persistent & Locator Interface Caveats Data Interface for LOB Locators LOB Locator Method Examples Example: Inserting a new row with large data Example: Updating an existing row with large data Example: Streaming character data from the database Example: Truncating existing large data SPACES AND PADDING Trailing Spaces Padded Char Fields UNICODE Perl and Unicode Oracle and Unicode Oracle UTF8 is not UTF-8 DBD::Oracle and Unicode DBD::Oracle and Other Character Sets and Encodings OBJECT & COLLECTION DATA TYPES OTHER DATA TYPES Support for Insert of XMLType (ORA_XMLTYPE) Binding Cursors Fetching Nested Cursors Pre-fetching Nested Cursors PL/SQL Examples Avoid Using ""SQL Call"" CONTRIBUTING How to create a patch using Subversion How to create a patch without Subversion Speak before you patch GitHub repository WHICH VERSION OF DBD::ORACLE IS FOR ME? BUGS AND LIMITATIONS SEE ALSO AUTHORS ACKNOWLEDGEMENTS COPYRIGHT AUTHORS COPYRIGHT AND LICENSE NAME DBD::Oracle - Oracle database driver for the DBI module VERSION version 1.74 SYNOPSIS   use DBI;    $dbh = DBI->connect(""dbi:Oracle:$dbname"", $user, $passwd);    $dbh = DBI->connect(""dbi:Oracle:host=$host;sid=$sid"", $user, $passwd);    # See the DBI module documentation for full details    # for some advanced uses you may need Oracle type values:   use DBD::Oracle qw(:ora_types); DESCRIPTION DBD::Oracle is a Perl module which works with the DBI module to provide access to Oracle databases. This documentation describes driver specific behaviour and restrictions. It is not supposed to be used as the only reference for the user. In any case consult the DBI documentation first! CONSTANTS :ora_session_modes ORA_SYSDBA ORA_SYSOPER ORA_SYSASM ORA_SYSBACKUP ORA_SYSDG ORA_SYSKM :ora_types   ORA_VARCHAR2 ORA_STRING ORA_NUMBER ORA_LONG ORA_ROWID ORA_DATE ORA_RAW   ORA_LONGRAW ORA_CHAR ORA_CHARZ ORA_MLSLABEL ORA_XMLTYPE ORA_CLOB ORA_BLOB   ORA_RSET ORA_VARCHAR2_TABLE ORA_NUMBER_TABLE SQLT_INT SQLT_FLT ORA_OCI   SQLT_CHR SQLT_BIN SQLCS_IMPLICIT SQLCS_NCHAR SQLCS_IMPLICIT and SQLCS_NCHAR are character set form values. See notes about Unicode elsewhere in this document. SQLT_INT SQLT_FLT These types are used only internally, and may be specified as internal bind type for ORA_NUMBER_TABLE. See notes about ORA_NUMBER_TABLE elsewhere in this document ORA_OCI Oracle doesn't provide a formal API for determining the exact version number of the OCI client library used, so DBD::Oracle has to go digging (and sometimes has to more or less guess). The ORA_OCI constant holds the result of that process. In string context ORA_OCI returns the full ""A.B.C.D"" version string. In numeric context ORA_OCI returns the major.minor version number (8.1, 9.2, 10.0 etc). But note that version numbers are not actually floating point and so if Oracle ever makes a release that has a two digit minor version, such as 9.10 it will have a lower numeric value than the preceding 9.9 release. So use with care. The contents and format of ORA_OCI are subject to change (it may, for example, become a version object in later releases). I recommend that you avoid checking for exact values. :ora_fetch_orient   OCI_FETCH_CURRENT OCI_FETCH_NEXT OCI_FETCH_FIRST OCI_FETCH_LAST   OCI_FETCH_PRIOR OCI_FETCH_ABSOLUTE OCI_FETCH_RELATIVE These constants are used to set the orientation of a fetch on a scrollable cursor. :ora_exe_modes   OCI_STMT_SCROLLABLE_READONLY :ora_fail_over   OCI_FO_END OCI_FO_ABORT OCI_FO_REAUTH OCI_FO_BEGIN OCI_FO_ERROR   OCI_FO_NONE OCI_FO_SESSION OCI_FO_SELECT OCI_FO_TXNAL OCI_FO_RETRY DBI CLASS METHODS connect This method creates a database handle by connecting to a database, and is the DBI equivalent of the ""new"" method. To open a connection to an Oracle database you need to specify a database connection string (URL), username and password. The connection string is always of the form: ""dbi:Oracle:<db identifier>"" There are several ways to identify a database: If the database is local, specifying the SID or service name will be enough. If the database is defined in a TNSNAMES.ORA file, you can use the service name given in the file To connect without TNSNAMES.ORA file, you can use an EZCONNECT url, of the form: //host[:port][/service_name] If port name is not specified, 1521 is the default. If service name is not specified, the hostname will be used as a service name. The following examples show several ways a connection can be created:   $dbh = DBI->connect('dbi:Oracle:DB','username','password');    $dbh = DBI->connect('dbi:Oracle:DB','username/password','');    $dbh = DBI->connect('dbi:Oracle:','username@DB','password');    $dbh = DBI->connect('dbi:Oracle:host=foobar;sid=DB;port=1521', 'scott/tiger', '');    $dbh = DBI->connect(""dbi:Oracle://myhost:1522/ORCL"",'username', 'password'); OS authentication To connect to a local database with a user which has been set up to authenticate via the OS (""ALTER USER username IDENTIFIED EXTERNALLY""):   $dbh = DBI->connect('dbi:Oracle:','/',''); Note the lack of a connection name (use the ORACLE_SID environment variable). If an explicit SID is used you will probably get an ORA-01004 error. That only works for local databases. (Authentication to remote Oracle databases using your Unix login name without a password is possible but it is not secure and not recommended so not documented here. Oracle Environment Variables To use DBD::ORACLE to connect to an Oracle database, ORACLE_HOME environment variable should be set correctly. In general, the value used should match the version of Oracle that was used to build DBD::Oracle. If using dynamic linking then ORACLE_HOME should match the version of Oracle that will be used to load in the Oracle client libraries (via LD_LIBRARY_PATH, ldconfig, or similar on Unix). Oracle can use two environment variables to specify default connections: ORACLE_SID and TWO_TASK. To use them, specify either a local SID or service name, or a service name that is specified in the TNSNAMES.ORA file. Note that if you have *both* local and remote databases, and you have ORACLE_SID *and* TWO_TASK set, and you don't specify a fully qualified connect string on the command line, TWO_TASK takes precedence over ORACLE_SID (i.e. you get connected to remote system). It is highly recommended not to rely on environment variables and to always explicitly specify the SID in the connection string. This can prevent serious mistakes such as dropping a schema in the wrong database, and generally makes debugging and troubleshooting easier. Also remember that depending on the operating system you are using the differing ""ORACLE"" environment variables may be case sensitive, so if you are not connecting as you should double check the case of both the variable and its value. Timezones If the query is run through SQL*Net (mostly queries that are executed on remote servers), Oracle will return the time zone based on the setting of the UNIX environment variable ""TZ"" for the user who started the listener. If the query is run locally, Oracle will return the time zone based on the ""TZ"" environment variable setting of the user running the query. With local queries, you can change the time zone for a particular user by simply changing the setting of ""TZ"". To check the current setting, issue the UNIX ""date"" command. Oracle DRCP DBD::Oracle supports DRCP (Database Resident Connection Pool) so if you have an 11.2 database and DRCP is enabled you can direct all of your connections to it by adding ':POOLED' to the SID or setting a connection attribute of ora_drcp, or set the SERVER=POOLED when using a TNSENTRY style connection or even by setting an environment variable ORA_DRCP. All of which are demonstrated below;   $dbh = DBI->connect('dbi:Oracle:DB:POOLED','username','password')    $dbh = DBI->connect('dbi:Oracle:','username@DB:POOLED','password')    $dbh = DBI->connect('dbi:Oracle:DB','username','password',{ora_drcp=>1})    $dbh = DBI->connect('dbi:Oracle:DB','username','password',{ora_drcp=>1,                                                              ora_drcp_class=>'my_app',                                                              ora_drcp_min  =>10})    $dbh = DBI->connect('dbi:Oracle:host=foobar;sid=ORCL;port=1521;SERVER=POOLED', 'scott/tiger', '')    $dbh = DBI->connect('dbi:Oracle:', q{scott/tiger@(DESCRIPTION=   (ADDRESS=(PROTOCOL=TCP)(HOST= foobar)(PORT=1521))   (CONNECT_DATA=(SID=ORCL)(SERVER=POOLED)))}, """")    if the ORA_DRCP environment variable is set then just this    $dbh = DBI->connect('dbi:Oracle:DB','username','password') You can find a white paper on setting up DRCP and its advantages at http://www.oracle.com/technetwork/articles/oracledrcp11g-1-133381.pdf. Please note that DRCP support in DBD::Oracle is relatively new so the mechanics or its implementation are subject to change. TAF (Transparent Application Failover) Transparent Application Failover (TAF) is the feature in OCI that allows for clients to automatically reconnect to an instance in the event of a failure of the instance. The reconnect happens automatically from within the OCI (Oracle Call Interface) library. DBD::Oracle now supports a callback function that will fire when a TAF event takes place. You may use the callback to inform the user a failover is taking place or to setup the session again once the failover has succeeded. You will have to set up TAF on your instance before you can use this callback. You can test your instance to see if you can use TAF callback with   $dbh->ora_can_taf(); If you try to set up a callback without it being enabled DBD::Oracle will croak. NOTE: Currently, you must enable TAF during DBI's connect. However once enabled you can change the TAF settings. It is outside the scope of this document to go through all of the possible TAF situations you might want to set up but here is a simple example: The TNS entry for the instance has had the following added to the CONNECT_DATA section    (FAILOVER_MODE=                (TYPE=select)                (METHOD=basic)                (RETRIES=10)                (DELAY=10)) You will also have to create your own perl function that will be called from the client. You can name it anything you want and it will always be passed two parameters, the failover event value and the failover type. You can also set a sleep value in case of failover error and the OCI client will sleep for the specified seconds before it attempts another event.   use DBD::Oracle(qw(:ora_fail_over));   #import the ora fail over constants    #set up TAF on the connection   # NOTE since DBD::Oracle uses call_pv you may need to pass a full   # name space as the function e.g., 'main::handle_taf'   # NOTE from 1.49_00 ora_taf_function can accept a code ref as well   #      as a sub name as it now uses call_sv   my $dbh = DBI->connect('dbi:Oracle:XE', 'hr', 'hr',                          {ora_taf_function => 'main::handle_taf'});    #create the perl TAF event function    sub handle_taf {     # NOTE from 1.49_00 the $dbh handle was passed to your callback     my ($fo_event,$fo_type, $dbh) = @_;     if ($fo_event == OCI_FO_BEGIN){        print "" Instance Unavailable Please stand by!! \n"";       printf("" Your TAF type is %s \n"",                        (($fo_type==OCI_FO_NONE) ? ""NONE""                        :($fo_type==OCI_FO_SESSION) ? ""SESSION""                        :($fo_type==OCI_FO_SELECT) ? ""SELECT""                        : ""UNKNOWN!""));     }     elsif ($fo_event == OCI_FO_ABORT){        print "" Failover aborted. Failover will not take place.\n"";     }     elsif ($fo_event == OCI_FO_END){        printf("" Failover ended ...Resuming your %s\n"",(($fo_type==OCI_FO_NONE) ? ""NONE""                                                       :($fo_type==OCI_FO_SESSION) ? ""SESSION""                                                       :($fo_type==OCI_FO_SELECT) ? ""SELECT""                                                       : ""UNKNOWN!""));     }     elsif ($fo_event == OCI_FO_REAUTH){        print "" Failed over user. Resuming services\n"";     }     elsif ($fo_event == OCI_FO_ERROR){        print "" Failover error ...\n"";        sleep 5;                 # sleep before having another go        return OCI_FO_RETRY;     }     else {        printf("" Bad Failover Event: %d.\n"",  $fo_event);      }     return 0;   } The TAF types are as follows   OCI_FO_SESSION indicates the user has requested only session failover.   OCI_FO_SELECT indicates the user has requested select failover.   OCI_FO_NONE indicates the user has not requested a failover type.   OCI_FO_TXNAL indicates the user has requested a transaction failover. The TAF events are as follows   OCI_FO_BEGIN indicates that failover has detected a lost connection and failover is starting.   OCI_FO_END   indicates successful completion of failover.   OCI_FO_ABORT indicates that failover was unsuccessful, and there is no option of retrying.   OCI_FO_ERROR also indicates that failover was unsuccessful, but it gives the application the opportunity to handle the error and retry failover.   OCI_FO_REAUTH indicates that you have multiple authentication handles and failover has occurred after the original authentication. It indicates that a user handle has been re-authenticated. To find out which, the application checks the OCI_ATTR_SESSION attribute of the service context handle (which is the first parameter). Connect Attributes ora_ncs_buff_mtpl You can customize the size of the buffer when selecting LOBs with the built-in AUTO Lob. The default value is 4 which is probably excessive for most situations but is needed for backward compatibility. If you not converting between a NCS on the DB and the Client then you might want to set this to 1 to reduce memory usage. This value can also be specified with the ORA_DBD_NCS_BUFFER environment variable in which case it sets the value at the connect stage. ora_drcp For Oracle 11.2 or greater. Set to 1 to enable DRCP. Can also be set via the ORA_DRCP environment variable. ora_drcp_class If you are using DRCP, you can set a CONNECTION_CLASS for your pools as well. As sessions from a DRCP cannot be shared by users, you can use this setting to identify the same user across different applications. OCI will ensure that sessions belonging to a 'class' are not shared outside the class'. The values for ora_drcp_class cannot contain a '*' and must be less than 1024 characters. This value can be also be specified with the ORA_DRCP_CLASS environment variable. ora_drcp_min This optional value specifies the minimum number of sessions that are initially opened. New sessions are only opened after this value has been reached. The default value is 4 and any value above 0 is valid. Generally, it should be set to the number of concurrent statements the application is planning or expecting to run. This value can also be specified with the ORA_DRCP_MIN environment variable. ora_drcp_max This optional value specifies the maximum number of sessions that can be open at one time. Once reached no more sessions can be opened until one becomes free. The default value is 40 and any value above 1 is valid. You should not set this value lower than ora_drcp_min as that will just waste resources. This value can also be specified with the ORA_DRCP_MAX environment variable. ora_drcp_incr This optional value specifies the next increment for sessions to be started if the current number of sessions are less than ora_drcp_max. The default value is 2 and any value above 0 is valid as long as the value of ora_drcp_min + ora_drcp_incr is not greater than ora_drcp_max. This value can also be specified with the ORA_DRCP_INCR environment variable. ora_taf This attribute was removed in 1.49_00 as it was redundant. To enable TAF simply set ""ora_taf_function"". ora_taf_function If your Oracle instance has been configured to use TAF events you can enable the TAF callback by setting this option. The name of the Perl subroutine (or a code ref from 1.49_00) that will be called from OCI when a TAF event occurs. You must supply a perl function to use the callback and it will always receive at least two parameters; the failover event value and the failover type. From 1.49_00 the dbh is passed as the third argument. Below is an example of a TAF function   sub taf_event{      # NOTE from 1.49_00 the $dbh handle is passed to the callback      my ($event, $type, $dbh) = @_;       print ""My TAF event=$event\n"";      print ""My TAF type=$type\n"";      return;   } Note if passing a sub name you will probably have to use the full name space when setting the TAF function e.g., 'main::my_taf_function' and not just 'my_taf_function'. ora_taf_sleep This attribute was removed in 1.49_00 as it was redundant. If you want to sleep between retries simple add a sleep to your callback sub. ora_session_mode The ora_session_mode attribute can be used to connect with SYSDBA, SYSOPER, ORA_SYSASM, ORA_SYSBACKUP, ORA_SYSKM and ORA_SYSDG authorization. The ORA_SYSDBA, ORA_SYSOPER, ORA_SYSASM, ORA_SYSBACKUP, ORA_SYSKM and ORA_SYSDG constants can be imported using   use DBD::Oracle qw(:ora_session_modes); This is one case where setting ORACLE_SID may be useful since connecting as SYSDBA or SYSOPER via SQL*Net is frequently disabled for security reasons. Example:   $dsn = ""dbi:Oracle:"";       # no dbname here   $ENV{ORACLE_SID} = ""orcl"";  # set ORACLE_SID as needed   delete $ENV{TWO_TASK};      # make sure TWO_TASK isn't set    $dbh = DBI->connect($dsn, """", """", { ora_session_mode => ORA_SYSDBA }); It has been reported that this only works if $dsn does not contain a SID so that Oracle then uses the value of ORACLE_SID (not TWO_TASK) environment variable to connect to a local instance. Also the username and password should be empty, and the user executing the script needs to be part of the dba group or osdba group. ora_oratab_orahome Passing a true value for the ora_oratab_orahome attribute will make DBD::Oracle change $ENV{ORACLE_HOME} to make the Oracle home directory that specified in the /etc/oratab file if the database to connect to is specified as a SID that exists in the oratab file, and DBD::Oracle was built to use the Oracle 7 OCI API (not Oracle 8+). ora_module_name After connecting to the database the value of this attribute is passed to the SET_MODULE() function in the DBMS_APPLICATION_INFO PL/SQL package. This can be used to identify the application to the DBA for monitoring and performance tuning purposes. For example:   my $dbh = DBI->connect($dsn, $user, $passwd, { ora_module_name => $0 });    $dbh->{ora_module_name} = $y; The maximum size is 48 bytes. NOTE: You will need an Oracle client 10.1 or later to use this. ora_driver_name For 11g and later you can now set the name of the driver layer using OCI. Perl, Perl5, ApachePerl so on. Names starting with ""ORA"" are reserved. You can enter up to 8 characters. If none is enter then this will default to DBDOxxxx where xxxx is the current version number. This value can be retrieved on the server side using V$SESSION_CONNECT_INFO or GV$SESSION_CONNECT_INFO   my $dbh = DBI->connect($dsn, $user, $passwd, { ora_driver_name => 'ModPerl_1' });    $dbh->{ora_driver_name} = $q; ora_client_info Allows you to add any value (up to 64 bytes) to your session and it can be retrieved on the server side from the V$SESSIONa view.   my $dbh = DBI->connect($dsn, $user, $passwd, { ora_client_info => 'Remote2' });    $dbh->{ora_client_info} = ""Remote2""; NOTE: You will need an Oracle client 10.1 or later to use this. ora_client_identifier Allows you to specify the user identifier in the session handle. Most useful for web applications as it can pass in the session user name which might be different to the connection user name. Can be up to 64 bytes long but do not to include the password for security reasons and the first character of the identifier should not be ':'. This value can be retrieved on the server side using V$SESSION view.   my $dbh = DBI->connect($dsn, $user, $passwd, { ora_client_identifier => $some_web_user });    $dbh->{ora_client_identifier} = $local_user; ora_action Allows you to specify any string up to 32 bytes which may be retrieved on the server side using V$SESSION view.    my $dbh = DBI->connect($dsn, $user, $passwd, { ora_action => ""Login""});     $dbh->{ora_action} = ""New Long Query 22""; NOTE: You will need an Oracle client 10.1 or later to use this. ora_dbh_share Requires at least Perl 5.8.0 compiled with ithreads. Allows you to share database connections between threads. The first connect will make the connection, all following calls to connect with the same ora_dbh_share attribute will use the same database connection. The value must be a reference to a already shared scalar which is initialized to an empty string.   our $orashr : shared = '' ;    $dbh = DBI->connect ($dsn, $user, $passwd, {ora_dbh_share => \$orashr}) ; ora_envhp The first time a connection is made a new OCI 'environment' is created by DBD::Oracle and stored in the driver handle. Subsequent connects reuse (share) that same OCI environment by default. The ora_envhp attribute can be used to disable the reuse of the OCI environment from a previous connect. If the value is 0 then a new OCI environment is allocated and used for this connection. The OCI environment holds information about the client side context, such as the local NLS environment. By altering %ENV and setting ora_envhp to 0 you can create connections with different NLS settings. This is most useful for testing. ora_charset, ora_ncharset For oracle versions >= 9.2 you can specify the client charset and ncharset with the ora_charset and ora_ncharset attributes. You still need to pass ora_envhp = 0 for all but the first connect. These attributes override the settings from environment variables.   $dbh = DBI->connect ($dsn, $user, $passwd,                        {ora_charset => 'AL32UTF8'}); ora_verbose Use this value to enable DBD::Oracle only tracing. Simply either set the ora_verbose attribute on the connect() method to the trace level you desire like this   my $dbh = DBI->connect($dsn, """", """", {ora_verbose=>6}); or set it directly on the DB handle like this;   $dbh->{ora_verbose} =6; In both cases the DBD::Oracle trace level is set to 6, which is the highest level tracing most of the calls to OCI. NOTE: In future versions of DBD::Oracle ora_verbose will be changed so that it is simply a switch to turn DBI's DBD tracing on or off. A true value will turn it on and a false value will turn it off. DBI's ""DBD"" tracing was not available when ora_verbose was created and ora_verbose adds an additional test to every trace test. ora_oci_success_warn Use this value to print otherwise silent OCI warnings that may happen when an execute or fetch returns ""Success With Info"" or when you want to tune RowCaching and LOB Reads   $dbh->{ora_oci_success_warn} = 1; ora_objects Use this value to enable extended embedded oracle objects mode. In extended: Embedded objects are returned as <DBD::Oracle::Object> instance (including type-name etc.) instead of simple ARRAY. Determine object type for each instance. All object attributes are returned (not only super-type's attributes).   $dbh->{ora_objects} = 1; ora_ph_type The default placeholder datatype for the database session. The TYPE or ""ora_type"" attributes to ""bind_param"" in DBI and ""bind_param_inout"" in DBI override the datatype for individual placeholders. The most frequent reason for using this attribute is to permit trailing spaces in values passed by placeholders. Constants for the values allowed for this attribute can be imported using   use DBD::Oracle qw(:ora_types); Only the following values are permitted for this attribute. ORA_VARCHAR2 Oracle clients using OCI 8 will strip trailing spaces and allow embedded \0 bytes. Oracle clients using OCI 9.2 do not strip trailing spaces and allow embedded \0 bytes. This is the normal default placeholder type. ORA_STRING Do not strip trailing spaces and end the string at the first \0. ORA_CHAR Do not strip trailing spaces and allow embedded \0. Force 'blank-padded comparison semantics'. For example:   use DBD::Oracle qw(:ora_types);    $SQL=""select username from all_users where username = ?"";   #username is a char(8)   $sth=$dbh->prepare($SQL)"";   $sth->bind_param(1,'bloggs',{ ora_type => ORA_CHAR}); Will pad bloggs out to 8 characters and return the username. ora_parse_error_offset If the previous error was from a failed prepare due to a syntax error, this attribute gives the offset into the Statement attribute where the error was found. ora_array_chunk_size Due to OCI limitations, DBD::Oracle needs to buffer up rows of bind values in its execute_for_fetch implementation. This attribute sets the number of rows to buffer at a time (default value is 1000). The execute_for_fetch function will collect (at most) this many rows in an array, send them off to the DB for execution, then go back to collect the next chunk of rows and so on. This attribute can be used to limit or extend the number of rows processed at a time. Note that this attribute also applies to execute_array, since that method is implemented using execute_for_fetch. ora_connect_with_default_signals Sometimes the Oracle client seems to change some of the signal handlers of the process during the connect phase. For instance, some users have observed Perl's default $SIG{INT} handler being ignored after connecting to an Oracle database. If this causes problems in your application, set this attribute to an array reference of signals you would like to be localized during the connect process. Once the connect is complete, the signal handlers should be returned to their previous state. For example:   $dbh = DBI->connect ($dsn, $user, $passwd,                        {ora_connect_with_default_signals => [ 'INT' ] }); NOTE disabling the signal handlers the OCI library sets up may affect functionality in the OCI library. NOTE If you are using connect_cached then the above example will lead to DBI thinking each connection is different as an anonymous array reference is being used. To avoid this when using connect_cached you are advised to use:   my @ora_default_signals = (...);   $dbh = DBI->connect($dsn, $user, $passwd,       {ora_connect_with_default_signals => \@ora_default_signals}); In more recent Perl versions you could possibly make use of new state variables. connect_cached Implemented by DBI, no driver-specific impact. Please note that connect_cached as not been tested with DRCP. data_sources   @data_sources = DBI->data_sources('Oracle');   @data_sources = $dbh->data_sources(); Returns a list of available databases. You will have to set either the 'ORACLE_HOME' or 'TNS_ADMIN' environment value to retrieve this list. It will read these values from TNSNAMES.ORA file entries. METHODS COMMON TO ALL HANDLES For all of the methods below, $h can be either a database handle ($dbh) or a statement handle ($sth). Note that $dbh and $sth can be replaced with any variable name you choose: these are just the names most often used. Another common variable used in this documentation is $rv, which stands for ""return value"". err   $rv = $h->err; Returns the error code from the last method called. errstr   $str = $h->errstr; Returns the last error that was reported by Oracle. Starting with ""ORA-00000"" code followed by the error message. state   $str = $h->state; Oracle hasn't supported SQLSTATE since the early versions OCI. It will return empty when the command succeeds and 'S1000' (General Error) for all other errors. While this method can be called as either $sth->state or $dbh->state, it is usually clearer to always use $dbh->state. trace Implemented by DBI, no driver-specific impact. trace_msg Implemented by DBI, no driver-specific impact. parse_trace_flag and parse_trace_flags Implemented by DBI, no driver-specific impact. func DBD::Oracle uses the func method to support a variety of functions. Private database handle functions Some of these functions are called through the method func() which is described in the DBI documentation. Any function that begins with ora_ can be called directly. plsql_errstr This function returns a string which describes the errors from the most recent PL/SQL function, procedure, package, or package body compile in a format similar to the output of the SQL*Plus command 'show errors'. The function returns undef if the error string could not be retrieved due to a database error. Look in $dbh->errstr for the cause of the failure. If there are no compile errors, an empty string is returned. Example:     # Show the errors if CREATE PROCEDURE fails     $dbh->{RaiseError} = 0;     if ( $dbh->do( q{         CREATE OR REPLACE PROCEDURE perl_dbd_oracle_test as         BEGIN             PROCEDURE filltab( stuff OUT TAB ); asdf         END; } ) ) {} # Statement succeeded     }     elsif ( 6550 != $dbh->err ) { die $dbh->errstr; } # Utter failure     else {         my $msg = $dbh->func( 'plsql_errstr' );         die $dbh->errstr if ! defined $msg;         die $msg if $msg;     } dbms_output_enable / dbms_output_put / dbms_output_get These functions use the PL/SQL DBMS_OUTPUT package to store and retrieve text using the DBMS_OUTPUT buffer. Text stored in this buffer by dbms_output_put or any PL/SQL block can be retrieved by dbms_output_get or any PL/SQL block connected to the same database session. Stored text is not available until after dbms_output_put or the PL/SQL block that saved it completes its execution. This means you CAN NOT use these functions to monitor long running PL/SQL procedures. Example 1:   # Enable DBMS_OUTPUT and set the buffer size   $dbh->{RaiseError} = 1;   $dbh->func( 1000000, 'dbms_output_enable' );    # Put text in the buffer . . .   $dbh->func( @text, 'dbms_output_put' );    # . . . and retrieve it later   @text = $dbh->func( 'dbms_output_get' ); Example 2:   $dbh->{RaiseError} = 1;   $sth = $dbh->prepare(q{     DECLARE tmp VARCHAR2(50);     BEGIN       SELECT SYSDATE INTO tmp FROM DUAL;       dbms_output.put_line('The date is '||tmp);     END;   });   $sth->execute;    # retrieve the string   $date_string = $dbh->func( 'dbms_output_get' ); dbms_output_enable ( [ buffer_size ] ) This function calls DBMS_OUTPUT.ENABLE to enable calls to package DBMS_OUTPUT procedures GET, GET_LINE, PUT, and PUT_LINE. Calls to these procedures are ignored unless DBMS_OUTPUT.ENABLE is called first. The buffer_size is the maximum amount of text that can be saved in the buffer and must be between 2000 and 1,000,000. If buffer_size is not given, the default is 20,000 bytes. dbms_output_put ( [ @lines ] ) This function calls DBMS_OUTPUT.PUT_LINE to add lines to the buffer. If all lines were saved successfully the function returns 1. Depending on the context, an empty list or undef is returned for failure. If any line causes buffer_size to be exceeded, a buffer overflow error is raised and the function call fails. Some of the text might be in the buffer. dbms_output_get This function calls DBMS_OUTPUT.GET_LINE to retrieve lines of text from the buffer. In an array context, all complete lines are removed from the buffer and returned as a list. If there are no complete lines, an empty list is returned. In a scalar context, the first complete line is removed from the buffer and returned. If there are no complete lines, undef is returned. Any text in the buffer after a call to DBMS_OUTPUT.GET_LINE or DBMS_OUTPUT.GET is discarded by the next call to DBMS_OUTPUT.PUT_LINE, DBMS_OUTPUT.PUT, or DBMS_OUTPUT.NEW_LINE. reauthenticate ( $username, $password ) Starts a new session against the current database using the credentials supplied. private_attribute_info   $hashref = $dbh->private_attribute_info();   $hashref = $sth->private_attribute_info(); Returns a hash of all private attributes used by DBD::Oracle, for either a database or a statement handle. Currently, all the hash values are undef. ATTRIBUTES COMMON TO ALL HANDLES InactiveDestroy (boolean) Implemented by DBI, no driver-specific impact. RaiseError (boolean, inherited) Forces errors to always raise an exception. Although it defaults to off, it is recommended that this be turned on, as the alternative is to check the return value of every method (prepare, execute, fetch, etc.) manually, which is easy to forget to do. PrintError (boolean, inherited) Forces database errors to also generate warnings, which can then be filtered with methods such as locally redefining $SIG{__WARN__} or using modules such as CGI::Carp. This attribute is on by default. ShowErrorStatement (boolean, inherited) Appends information about the current statement to error messages. If placeholder information is available, adds that as well. Defaults to true. Warn (boolean, inherited) Enables warnings. This is on by default, and should only be turned off in a local block for a short a time only when absolutely needed. Executed (boolean, read-only) Indicates if a handle has been executed. For database handles, this value is true after the ""do"" method has been called, or when one of the child statement handles has issued an ""execute"". Issuing a ""commit"" or ""rollback"" always resets the attribute to false for database handles. For statement handles, any call to ""execute"" or its variants will flip the value to true for the lifetime of the statement handle. TraceLevel (integer, inherited) Sets the trace level, similar to the ""trace"" method. See the sections on ""trace"" and ""parse_trace_flag"" for more details. Active (boolean, read-only) Indicates if a handle is active or not. For database handles, this indicates if the database has been disconnected or not. For statement handles, it indicates if all the data has been fetched yet or not. Use of this attribute is not encouraged. Kids (integer, read-only) Returns the number of child processes created for each handle type. For a driver handle, indicates the number of database handles created. For a database handle, indicates the number of statement handles created. For statement handles, it always returns zero, because statement handles do not create kids. ActiveKids (integer, read-only) Same as Kids, but only returns those that are active. CachedKids (hash ref) Returns a hashref of handles. If called on a database handle, returns all statement handles created by use of the prepare_cached method. If called on a driver handle, returns all database handles created by the ""connect_cached"" method. ChildHandles (array ref) Implemented by DBI, no driver-specific impact. PrintWarn (boolean, inherited) Implemented by DBI, no driver-specific impact. HandleError (boolean, inherited) Implemented by DBI, no driver-specific impact. HandleSetErr (code ref, inherited) Implemented by DBI, no driver-specific impact. ErrCount (unsigned integer) Implemented by DBI, no driver-specific impact. FetchHashKeyName (string, inherited) Implemented by DBI, no driver-specific impact. ChopBlanks (boolean, inherited) Implemented by DBI, no driver-specific impact. Taint (boolean, inherited) Implemented by DBI, no driver-specific impact. TaintIn (boolean, inherited) Implemented by DBI, no driver-specific impact. TaintOut (boolean, inherited) Implemented by DBI, no driver-specific impact. Profile (inherited) Implemented by DBI, no driver-specific impact. Type (scalar) Returns dr for a driver handle, db for a database handle, and st for a statement handle. Should be rarely needed. LongReadLen The maximum size of long or longraw columns to retrieve. If one of these columns is longer than LongReadLen then either a data truncation error will be raised (LongTrunkOk is false) or the column will be silently truncated (LongTruncOk is true). DBI currently defaults this to 80. LongTruncOk Implemented by DBI, no driver-specific impact. CompatMode Type: boolean, inherited The CompatMode attribute is used by emulation layers (such as Oraperl) to enable compatible behaviour in the underlying driver (e.g., DBD::Oracle) for this handle. Not normally set by application code. It also has the effect of disabling the 'quick FETCH' of attribute values from the handles attribute cache. So all attribute values are handled by the drivers own FETCH method. This makes them slightly slower but is useful for special-purpose drivers like DBD::Multiplex. ORACLE-SPECIFIC DATABASE HANDLE METHODS ora_can_unicode ( [ $refresh ] ) Returns a number indicating whether either of the database character sets is a Unicode encoding. Calls ora_nls_parameters() and passes the optional $refresh parameter to it. 0 = Neither character set is a Unicode encoding. 1 = National character set is a Unicode encoding. 2 = Database character set is a Unicode encoding. 3 = Both character sets are Unicode encodings. ora_can_taf Returns true if the current connection supports TAF events. False if otherwise. ora_nls_parameters ( [ $refresh ] ) Returns a hash reference containing the current NLS parameters, as given by the v$nls_parameters view. The values fetched are cached between calls. To cause the latest values to be fetched, pass a true value to the function. ORACLE-SPECIFIC DATABASE FUNCTIONS ora_server_version   $versions = $dbh->func('ora_server_version'); Returns an array reference of server version strings e.g.,   [11,2,0,2,0] DATABASE HANDLE METHODS selectall_arrayref   $ary_ref = $dbh->selectall_arrayref($sql);   $ary_ref = $dbh->selectall_arrayref($sql, \%attr);   $ary_ref = $dbh->selectall_arrayref($sql, \%attr, @bind_values); Returns a reference to an array containing the rows returned by preparing and executing the SQL string. See the DBI documentation for full details. selectall_hashref   $hash_ref = $dbh->selectall_hashref($sql, $key_field); Returns a reference to a hash containing the rows returned by preparing and executing the SQL string. See the DBI documentation for full details. selectcol_arrayref   $ary_ref = $dbh->selectcol_arrayref($sql, \%attr, @bind_values); Returns a reference to an array containing the first column from each rows returned by preparing and executing the SQL string. It is possible to specify exactly which columns to return. See the DBI documentation for full details. prepare   $sth = $dbh->prepare($statement, \%attr); Prepares a statement for later execution by the database engine and returns a reference to a statement handle object. Prepare Attributes These attributes may be used in the \%attr parameter of the ""prepare"" in DBI database handle method. ora_placeholders Set to false to disable processing of placeholders. Used mainly for loading a PL/SQL package that has been wrapped with Oracle's wrap utility. ora_auto_lob If true (the default), fetching retrieves the contents of the CLOB or BLOB column in most circumstances. If false, fetching retrieves the Oracle ""LOB Locator"" of the CLOB or BLOB value. See ""LOBS AND LONGS"" for more details. See also the LOB tests in 05dbi.t of Oracle::OCI for examples of how to use LOB Locators. ora_pers_lob If true the ""Simple Fetch for CLOBs and BLOBs"" method for the ""Data Interface for Persistent LOBs"" will be used for LOBs rather than the default method ""Data Interface for LOB Locators"". ora_clbk_lob If true the ""Piecewise Fetch with Callback"" method for the ""Data Interface for Persistent LOBs"" will be used for LOBs. ora_piece_lob If true the ""Piecewise Fetch with Polling"" method for the ""Data Interface for Persistent LOBs"" will be used for LOBs. ora_piece_size This is the max piece size for the ""Piecewise Fetch with Callback"" and ""Piecewise Fetch with Polling"" methods, in chars for CLOBS, and bytes for BLOBS. ora_check_sql If 1 (default), force SELECT statements to be described in prepare(). If 0, allow SELECT statements to defer describe until execute(). See ""Prepare Postponed Till Execute"" for more information. ora_exe_mode This will set the execute mode of the current statement. Presently only one mode is supported;   OCI_STMT_SCROLLABLE_READONLY - make result set scrollable See ""SCROLLABLE CURSORS"" for more details. ora_prefetch_rows Sets the number of rows to be prefetched. If it is not set, then the default value is 1. See ""Row Prefetching"" for more details. ora_prefetch_memory Sets the memory level for rows to be prefetched. The application then fetches as many rows as will fit into that much memory. See ""Row Prefetching"" for more details. ora_row_cache_off By default DBD::Oracle will use a row cache when fetching to cut down the number of round trips to the server. If you do not want to use an array fetch set this value to any value other than 0; See ""Row Prefetching"" for more details. Placeholders There are three types of placeholders that can be used in DBD::Oracle. The first is the ""question mark"" type, in which each placeholder is represented by a single question mark character. This is the method recommended by the DBI and is the most portable. Each question mark is internally replaced by a ""dollar sign number"" in the order in which they appear in the query (important when using ""bind_param""). The second type of placeholder is ""named parameters"" in the format "":foo"" which is the one Oracle prefers.    $dbh->{RaiseError} = 1;        # save having to check each method call    $sth = $dbh->prepare(""SELECT name, age FROM people WHERE name LIKE :name"");    $sth->bind_param(':name', ""John%"");    $sth->execute;    DBI::dump_results($sth); Note when calling bind_param with named parameters you must include the leading colon. The advantage of this placeholder type is that you can use the same placeholder more than once in the same SQL statement but you only need to bind it once. The last placeholder type is a variation of the two above where you name each placeholder :N (where N is a number). Like the named placeholders above you can use the same placeholder multiple times in the SQL but when you call bind_param you only need to pass the N (e.g., for :1 you use bind_param(1,...) and not bind_param(':1',...). The different types of placeholders cannot be mixed within a statement, but you may use different ones for each statement handle you have. This is confusing at best, so stick to one style within your program. prepare_cached   $sth = $dbh->prepare_cached($statement, \%attr); Implemented by DBI, no driver-specific impact. This method is most useful if the same query is used over and over as it will cut down round trips to the server. do   $rv = $dbh->do($statement);   $rv = $dbh->do($statement, \%attr);   $rv = $dbh->do($statement, \%attr, @bind_values); Prepare and execute a single statement. Returns the number of rows affected if the query was successful, returns undef if an error occurred, and returns -1 if the number of rows is unknown or not available. Note that this method will return 0E0 instead of 0 for 'no rows were affected', in order to always return a true value if no error occurred. last_insert_id Oracle does not implement auto_increment of serial type columns it uses predefined sequences where the id numbers are either selected before insert, at insert time with a trigger, or as part of the query. Below is an example of you to use the latter with the SQL returning clause to get the ID number back on insert with the bind_param_inout method. .   $dbh->do('CREATE SEQUENCE lii_seq START 1');   $dbh->do(q{CREATE TABLE lii (     foobar INTEGER NOT NULL UNIQUE,     baz VARCHAR)});   $SQL = ""INSERT INTO lii (foobar,baz) VALUES (lii_seq.nextval,'XX') returning foobar into :p_new_id"";"";   $sth = $dbh->prepare($SQL);   my $p_new_id='-1';   $sth->bind_param_inout("":p_new_id"",\$p_new_id,38);   $sth->execute();   $db->commit(); commit   $rv = $dbh->commit; Issues a COMMIT to the server, indicating that the current transaction is finished and that all changes made will be visible to other processes. If AutoCommit is enabled, then a warning is given and no COMMIT is issued. Returns true on success, false on error. rollback   $rv = $dbh->rollback; Issues a ROLLBACK to the server, which discards any changes made in the current transaction. If AutoCommit is enabled, then a warning is given and no ROLLBACK is issued. Returns true on success, and false on error. begin_work This method turns on transactions until the next call to ""commit"" or ""rollback"", if ""AutoCommit"" is currently enabled. If it is not enabled, calling begin_work will issue an error. Note that the transaction will not actually begin until the first statement after begin_work is called. disconnect   $rv = $dbh->disconnect; Disconnects from the Oracle database. Any uncommitted changes will be rolled back upon disconnection. It's good policy to always explicitly call commit or rollback at some point before disconnecting, rather than relying on the default rollback behavior. If the script exits before disconnect is called (or, more precisely, if the database handle is no longer referenced by anything), then the database handle's DESTROY method will call the rollback() and disconnect() methods automatically. It is best to explicitly disconnect rather than rely on this behavior. ping   $rv = $dbh->ping; This ping method is used to check the validity of a database handle. The value returned is either 0, indicating that the connection is no longer valid, or 1, indicating the connection is valid. This function does 1 round trip to the Oracle Server. get_info()  $value = $dbh->get_info($info_type); DBD::Oracle supports get_info(), but (currently) only a few info types. table_info() DBD::Oracle supports attributes for table_info(). In Oracle, the concept of user and schema is (currently) the same. Because database objects are owned by an user, the owner names in the data dictionary views correspond to schema names. Oracle does not support catalogues so TABLE_CAT is ignored as selection criterion. Search patterns are supported for TABLE_SCHEM and TABLE_NAME. TABLE_TYPE may contain a comma-separated list of table types. The following table types are supported:   TABLE   VIEW   SYNONYM   SEQUENCE The result set is ordered by TABLE_TYPE, TABLE_SCHEM, TABLE_NAME. The special enumerations of catalogues, schemas and table types are supported. However, TABLE_CAT is always NULL. An identifier is passed as is, i.e. as the user provides or Oracle returns it. table_info() performs a case-sensitive search. So, a selection criterion should respect upper and lower case. Normally, an identifier is case-insensitive. Oracle stores and returns it in upper case. Sometimes, database objects are created with quoted identifiers (for reserved words, mixed case, special characters, ...). Such an identifier is case-sensitive (if not all upper case). Oracle stores and returns it as given. table_info() has no special quote handling, neither adds nor removes quotes. primary_key_info() Oracle does not support catalogues so TABLE_CAT is ignored as selection criterion. The TABLE_CAT field of a fetched row is always NULL (undef). See ""table_info()"" for more detailed information. If the primary key constraint was created without an identifier, PK_NAME contains a system generated name with the form SYS_Cn. The result set is ordered by TABLE_SCHEM, TABLE_NAME, KEY_SEQ. An identifier is passed as is, i.e. as the user provides or Oracle returns it. See ""table_info()"" for more detailed information. foreign_key_info() This method (currently) supports the extended behaviour of SQL/CLI, i.e. the result set contains foreign keys that refer to primary and alternate keys. The field UNIQUE_OR_PRIMARY distinguishes these keys. Oracle does not support catalogues, so $pk_catalog and $fk_catalog are ignored as selection criteria (in the new style interface). The UK_TABLE_CAT and FK_TABLE_CAT fields of a fetched row are always NULL (undef). See ""table_info()"" for more detailed information. If the primary or foreign key constraints were created without an identifier, UK_NAME or FK_NAME contains a system generated name with the form SYS_Cn. The UPDATE_RULE field is always 3 ('NO ACTION'), because Oracle (currently) does not support other actions. The DELETE_RULE field may contain wrong values. This is a known Bug (#1271663) in Oracle's data dictionary views. Currently (as of 8.1.7), 'RESTRICT' and 'SET DEFAULT' are not supported, 'CASCADE' is mapped correctly and all other actions (incl. 'SET NULL') appear as 'NO ACTION'. The DEFERABILITY field is always NULL, because this columns is not present in the ALL_CONSTRAINTS view of older Oracle releases. The result set is ordered by UK_TABLE_SCHEM, UK_TABLE_NAME, FK_TABLE_SCHEM, FK_TABLE_NAME, ORDINAL_POSITION. An identifier is passed as is, i.e. as the user provides or Oracle returns it. See ""table_info()"" for more detailed information. column_info() Oracle does not support catalogues so TABLE_CAT is ignored as selection criterion. The TABLE_CAT field of a fetched row is always NULL (undef). See ""table_info()"" for more detailed information. The CHAR_OCTET_LENGTH field is (currently) always NULL (undef). Don't rely on the values of the BUFFER_LENGTH field! Especially the length of FLOATs may be wrong. Datatype codes for non-standard types are subject to change. Attention! The DATA_DEFAULT (COLUMN_DEF) column is of type LONG so you may have to set LongReadLen on the connection handle before calling column_info if you have a large default column. After DBD::Oracle 1.40 LongReadLen is set automatically to 1Mb when calling column_info and reset aftwerwards. The result set is ordered by TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION. An identifier is passed as is, i.e. as the user provides or Oracle returns it. See ""table_info()"" for more detailed information. It is possible with Oracle to make the names of the various DB objects (table,column,index etc) case sensitive.   alter table bloggind add (""Bla_BLA"" NUMBER) So in the example the exact case ""Bla_BLA"" must be used to get it info on the column. While this  alter table bloggind add (Bla_BLA NUMBER) any case can be used to get info on the column. statistics_info() Oracle does not support catalogues so TABLE_CAT is ignored as selection criterion. The TABLE_CAT field of a fetched row is always NULL (undef). See ""table_info()"" for more detailed information. The INDEX_QUALIFIER field of a fetched row is always NULL (undef), for the same reason as for TABLE_CAT. If an index was created without an identifier (e.g. in the course of a PK creation), INDEX_NAME contains a system generated name with the form SYS_. COLUMN_NAME may contain a system generated name (e.g. for function-based indexes). For the TYPE column, a simple mapping is used:   NORMAL   btree   CLUSTER  clustered   ...      other The $quick parameter is currently ignored. The method uses the dictionary with the gathered statistics, thus cannot ensure that the values for CARDINALITY and PAGES are current. The result set is ordered by NON_UNIQUE, TYPE, INDEX_QUALIFIER, INDEX_NAME, ORDINAL_POSITION. An identifier is passed as is, i.e. as the user provides or Oracle returns it. See ""table_info()"" for more detailed information. selectrow_array   @row_ary = $dbh->selectrow_array($sql);   @row_ary = $dbh->selectrow_array($sql, \%attr);   @row_ary = $dbh->selectrow_array($sql, \%attr, @bind_values); Returns an array of row information after preparing and executing the provided SQL string. The rows are returned by calling ""fetchrow_array"". The string can also be a statement handle generated by a previous prepare. Note that only the first row of data is returned. If called in a scalar context, only the first column of the first row is returned. Because this is not portable, it is not recommended that you use this method in that way. selectrow_arrayref   $ary_ref = $dbh->selectrow_arrayref($statement);   $ary_ref = $dbh->selectrow_arrayref($statement, \%attr);   $ary_ref = $dbh->selectrow_arrayref($statement, \%attr, @bind_values); Exactly the same as ""selectrow_array"", except that it returns a reference to an array, by internal use of the ""fetchrow_arrayref"" method. selectrow_hashref   $hash_ref = $dbh->selectrow_hashref($sql);   $hash_ref = $dbh->selectrow_hashref($sql, \%attr);   $hash_ref = $dbh->selectrow_hashref($sql, \%attr, @bind_values); Exactly the same as ""selectrow_array"", except that it returns a reference to an hash, by internal use of the ""fetchrow_hashref"" method. clone   $other_dbh = $dbh->clone(); Creates a copy of the database handle by connecting with the same parameters as the original handle, then trying to merge the attributes. See the DBI documentation for complete usage. DATABASE HANDLE ATTRIBUTES AutoCommit (boolean) Supported by DBD::Oracle as proposed by DBI.The default of AutoCommit is on, but this may change in the future, so it is highly recommended that you explicitly set it when calling ""connect"". ReadOnly (boolean)   $dbh->{ReadOnly} = 1; Specifies if the current database connection should be in read-only mode or not. Please not that this method is not foolproof: there are still ways to update the database. Consider this a safety net to catch applications that should not be issuing commands such as INSERT, UPDATE, or DELETE. This method method requires DBI version 1.55 or better. Name (string, read-only) Returns the name of the current database. This is the same as the DSN, without the ""dbi:Oracle:"" part. Username (string, read-only) Returns the name of the user connected to the database. Driver (handle, read-only) Holds the handle of the parent driver. The only recommended use for this is to find the name of the driver using:   $dbh->{Driver}->{Name} RowCacheSize DBD::Oracle supports both Server pre-fetch and Client side row caching. By default both are turned on to give optimum performance. Most of the time one can just let DBD::Oracle figure out the best optimization. Row Caching Row caching occurs on the client side and the object of it is to cut down the number of round trips made to the server when fetching rows. At each fetch a set number of rows will be retrieved from the server and stored locally. Further calls the server are made only when the end of the local buffer(cache) is reached. Rows up to the specified top level row count RowCacheSize are fetched if it occupies no more than the specified memory usage limit. The default value is 0, which means that memory size is not included in computing the number of rows to prefetch. If the RowCacheSize value is set to a negative number then the positive value of RowCacheSize is used to compute the number of rows to prefetch. By default RowCacheSize is automatically set. If you want to totally turn off prefetching set this to 1. For any SQL statement that contains a LOB, Long or Object Type Row Caching will be turned off. However server side caching still works. If you are only selecting a LOB Locator then Row Caching will still work. Row Prefetching Row prefetching occurs on the server side and uses the DBI database handle attribute RowCacheSize and or the Prepare Attribute 'ora_prefetch_memory'. Tweaking these values may yield improved performance.   $dbh->{RowCacheSize} = 100;   $sth=$dbh->prepare($SQL,{ora_exe_mode=>OCI_STMT_SCROLLABLE_READONLY,ora_prefetch_memory=>10000}); In the above example 10 rows will be prefetched up to a maximum of 10000 bytes of data. The Oracle Call Interface Programmer's Guide, suggests a good row cache value for a scrollable cursor is about 20% of expected size of the record set. The prefetch settings tell the DBD::Oracle to grab x rows (or x-bytes) when it needs to get new rows. This happens on the first fetch that sets the current_positon to any value other than 0. In the above example if we do a OCI_FETCH_FIRST the first 10 rows are loaded into the buffer and DBD::Oracle will not have to go back to the server for more rows. When record 11 is fetched DBD::Oracle fetches and returns this row and the next 9 rows are loaded into the buffer. In this case if you fetch backwards from 10 to 1 no server round trips are made. With large record sets it is best not to attempt to go to the last record as this may take some time, A large buffer size might even slow down the fetch. If you must get the number of rows in a large record set you might try using an few large OCI_FETCH_ABSOLUTEs and then an OCI_FETCH_LAST, this might save some time. So if you had a record set of 10000 rows and you set the buffer to 5000 and did a OCI_FETCH_LAST one would fetch the first 5000 rows into the buffer then the next 5000 rows. If one requires only the first few rows there is no need to set a large prefetch value. If the ora_prefetch_memory less than 1 or not present then memory size is not included in computing the number of rows to prefetch otherwise the number of rows will be limited to memory size. Likewise if the RowCacheSize is less than 1 it is not included in the computing of the prefetch rows. ORACLE-SPECIFIC STATEMENT HANDLE METHODS ora_stmt_type Returns the OCI Statement Type number for the SQL of a statement handle. ora_stmt_type_name Returns the OCI Statement Type name for the SQL of a statement handle. DBI STATEMENT HANDLE OBJECT METHODS bind_param   $rv = $sth->bind_param($param_num, $bind_value);   $rv = $sth->bind_param($param_num, $bind_value, $bind_type);   $rv = $sth->bind_param($param_num, $bind_value, \%attr); Allows the user to bind a value and/or a data type to a placeholder. The value of $param_num is a number if using the '?' or if using "":foo"" style placeholders, the complete name (e.g. "":foo"") must be given. The $bind_value argument is fairly self-explanatory. A value of undef will bind a NULL to the placeholder. Using undef is useful when you want to change just the type and will be overwriting the value later. (Any value is actually usable, but undef is easy and efficient). The \%attr hash is used to indicate the data type of the placeholder. The default value is ""varchar"". If you need something else, you must use one of the values provided by DBI or by DBD::Pg. To use a SQL value, modify your ""use DBI"" statement at the top of your script as follows:   use DBI qw(:sql_types); This will import some constants into your script. You can plug those directly into the ""bind_param"" call. Some common ones that you will encounter are:   SQL_INTEGER To use Oracle SQL data types, import the list of values like this:   use DBD::Pg qw(:ora_types); You can then set the data types by setting the value of the ora_type key in the hash passed to ""bind_param"". The current list of Oracle data types exported is:   ORA_VARCHAR2 ORA_STRING ORA_NUMBER ORA_LONG ORA_ROWID ORA_DATE ORA_RAW   ORA_LONGRAW ORA_CHAR ORA_CHARZ ORA_MLSLABEL ORA_XMLTYPE ORA_CLOB ORA_BLOB   ORA_RSET ORA_VARCHAR2_TABLE ORA_NUMBER_TABLE SQLT_INT SQLT_FLT ORA_OCI   SQLT_CHR SQLT_BIN Data types are ""sticky,"" in that once a data type is set to a certain placeholder, it will remain for that placeholder, unless it is explicitly set to something else afterwards. If the statement has already been prepared, and you switch the data type to something else, DBD::Oracle will re-prepare the statement for you before doing the next execute. Examples:   use DBI qw(:sql_types);   use DBD::Pg qw(:ora_types);    $SQL = ""SELECT id FROM ptable WHERE size > ? AND title = ?"";   $sth = $dbh->prepare($SQL);    ## Both arguments below are bound to placeholders as ""varchar""   $sth->execute(123, ""Merk"");    ## Reset the datatype for the first placeholder to an integer   $sth->bind_param(1, undef, SQL_INTEGER);    ## The ""undef"" bound above is not used, since we supply params to execute   $sth->execute(123, ""Merk"");    ## Set the first placeholder's value and data type   $sth->bind_param(1, 234, { pg_type => ORA_NUMBER });    ## Set the second placeholder's value and data type.   ## We don't send a third argument, so the default ""varchar"" is used   $sth->bind_param('$2', ""Zool"");    ## We realize that the wrong data type was set above, so we change it:   $sth->bind_param('$1', 234, { pg_type => SQL_INTEGER });    ## We also got the wrong value, so we change that as well.   ## Because the data type is sticky, we don't need to change it   $sth->bind_param(1, 567);    ## This executes the statement with 567 (integer) and ""Zool"" (varchar)   $sth->execute(); These attributes may be used in the \%attr parameter of the ""bind_param"" in DBI or ""bind_param_inout"" in DBI statement handle methods. ora_type Specify the placeholder's datatype using an Oracle datatype. A fatal error is raised if ora_type and the DBI TYPE attribute are used for the same placeholder. Some of these types are not supported by the current version of DBD::Oracle and will cause a fatal error if used. Constants for the Oracle datatypes may be imported using   use DBD::Oracle qw(:ora_types); Potentially useful values when DBD::Oracle was built using OCI 7 and later:   ORA_VARCHAR2, ORA_STRING, ORA_LONG, ORA_RAW, ORA_LONGRAW,   ORA_CHAR, ORA_MLSLABEL, ORA_RSET Additional values when DBD::Oracle was built using OCI 8 and later:   ORA_CLOB, ORA_BLOB, ORA_XMLTYPE, ORA_VARCHAR2_TABLE, ORA_NUMBER_TABLE Additional values when DBD::Oracle was built using OCI 9.2 and later:   SQLT_CHR, SQLT_BIN See ""Binding Cursors"" for the correct way to use ORA_RSET. See ""LOBS AND LONGS"" for how to use ORA_CLOB and ORA_BLOB. See ""SYS.DBMS_SQL datatypes"" for ORA_VARCHAR2_TABLE, ORA_NUMBER_TABLE. See ""Data Interface for Persistent LOBs"" for the correct way to use SQLT_CHR and SQLT_BIN. See ""OTHER DATA TYPES"" for more information. See also ""Placeholders and Bind Values"" in DBI. ora_csform Specify the OCI_ATTR_CHARSET_FORM for the bind value. Valid values are SQLCS_IMPLICIT (1) and SQLCS_NCHAR (2). Both those constants can be imported from the DBD::Oracle module. Rarely needed. ora_csid Specify the integer OCI_ATTR_CHARSET_ID for the bind value. Character set names can't be used currently. ora_maxdata_size Specify the integer OCI_ATTR_MAXDATA_SIZE for the bind value. May be needed if a character set conversion from client to server causes the data to use more space and so fail with a truncation error. ora_maxarray_numentries Specify the maximum number of array entries to allocate. Used with ORA_VARCHAR2_TABLE, ORA_NUMBER_TABLE. Define the maximum number of array entries Oracle can pass back to you in OUT variable of type TABLE OF ... . ora_internal_type Specify internal data representation. Currently is supported only for ORA_NUMBER_TABLE. Optimizing Results Prepare Postponed Till Execute The DBD::Oracle module can avoid an explicit 'describe' operation prior to the execution of the statement unless the application requests information about the results (such as $sth->{NAME}). This reduces communication with the server and increases performance (reducing the number of PARSE_CALLS inside the server). However, it also means that SQL errors are not detected until execute() (or $sth->{NAME} etc) is called instead of when prepare() is called. Note that if the describe is triggered by the use of $sth->{NAME} or a similar attribute and the describe fails then an exception is thrown even if RaiseError is false! Set ""ora_check_sql"" to 0 in prepare() to enable this behaviour. bind_param_inout   $rv = $sth->bind_param_inout($param_num, \$scalar, 0); DBD::Oracle fully supports bind_param_inout below are some uses for this method. Returning A Value from an INSERT Oracle supports an extended SQL insert syntax which will return one or more of the values inserted. This can be particularly useful for single-pass insertion of values with re-used sequence values (avoiding a separate ""select seq.nextval from dual"" step).   $sth = $dbh->prepare(qq{       INSERT INTO foo (id, bar)       VALUES (foo_id_seq.nextval, :bar)       RETURNING id INTO :id   });   $sth->bind_param("":bar"", 42);   $sth->bind_param_inout("":id"", \my $new_id, 99);   $sth->execute;   print ""The id of the new record is $new_id\n""; If you have many columns to bind you can use code like this:   @params = (... column values for record to be inserted ...);   $sth->bind_param($_, $params[$_-1]) for (1..@params);   $sth->bind_param_inout(@params+1, \my $new_id, 99);   $sth->execute; If you have many rows to insert you can take advantage of Oracle's built in execute array feature with code like this:   my @in_values=('1',2,'3','4',5,'6',7,'8',9,'10');   my @out_values;   my @status;   my $sth = $dbh->prepare(qq{         INSERT INTO foo (id, bar)         VALUES (foo_id_seq.nextval, ?)         RETURNING id INTO ?   });   $sth->bind_param_array(1,\@in_values);   $sth->bind_param_inout_array(2,\@out_values,0,{ora_type => ORA_VARCHAR2});   $sth->execute_array({ArrayTupleStatus=>\@status}) or die ""error inserting"";   foreach my $id (@out_values){         print 'returned id='.$id.'\n';   } Which will return all the ids into @out_values. Note: This will only work for numbered (?) placeholders, The third parameter of bind_param_inout_array, (0 in the example), ""maxlen"" is required by DBI but not used by DBD::Oracle The ""ora_type"" attribute is not needed but only ORA_VARCHAR2 will work. Returning A Recordset DBD::Oracle does not currently support binding a PL/SQL table (aka array) as an IN OUT parameter to any Perl data structure. You cannot therefore call a PL/SQL function or procedure from DBI that uses a non-atomic datatype as either a parameter, or a return value. However, if you are using Oracle 9.0.1 or later, you can make use of table (or pipelined) functions. For example, assume you have the existing PL/SQL Package :   CREATE OR REPLACE PACKAGE Array_Example AS     --     TYPE tRec IS RECORD (         Col1    NUMBER,         Col2    VARCHAR2 (10),         Col3    DATE) ;     --     TYPE taRec IS TABLE OF tRec INDEX BY BINARY_INTEGER ;     --     FUNCTION Array_Func RETURN taRec ;     --   END Array_Example ;    CREATE OR REPLACE PACKAGE BODY Array_Example AS   --   FUNCTION Array_Func RETURN taRec AS   --     l_Ret       taRec ;   --   BEGIN     FOR i IN 1 .. 5 LOOP         l_Ret (i).Col1 := i ;         l_Ret (i).Col2 := 'Row : ' || i ;         l_Ret (i).Col3 := TRUNC (SYSDATE) + i ;     END LOOP ;     RETURN l_Ret ;   END ;   --   END Array_Example ;   / Currently, there is no way to directly call the function Array_Example.Array_Func from DBI. However, by making the following relatively painless additions, its not only possible, but extremely efficient. First, you need to create database object types that correspond to the record and table types in the package. From the above example, these would be :   CREATE OR REPLACE TYPE tArray_Example__taRec   AS OBJECT (       Col1    NUMBER,       Col2    VARCHAR2 (10),       Col3    DATE   ) ;    CREATE OR REPLACE TYPE taArray_Example__taRec   AS TABLE OF tArray_Example__taRec ; Now, assuming the existing function needs to remain unchanged (it is probably being called from other PL/SQL code), we need to add a new function to the package. Here's the new package specification and body :   CREATE OR REPLACE PACKAGE Array_Example AS       --       TYPE tRec IS RECORD (           Col1    NUMBER,           Col2    VARCHAR2 (10),           Col3    DATE) ;       --       TYPE taRec IS TABLE OF tRec INDEX BY BINARY_INTEGER ;       --       FUNCTION Array_Func RETURN taRec ;       FUNCTION Array_Func_DBI RETURN taArray_Example__taRec PIPELINED ;       --   END Array_Example ;    CREATE OR REPLACE PACKAGE BODY Array_Example AS   --   FUNCTION Array_Func RETURN taRec AS       l_Ret  taRec ;   BEGIN       FOR i IN 1 .. 5 LOOP           l_Ret (i).Col1 := i ;           l_Ret (i).Col2 := 'Row : ' || i ;           l_Ret (i).Col3 := TRUNC (SYSDATE) + i ;       END LOOP ;       RETURN l_Ret ;   END ;    FUNCTION Array_Func_DBI RETURN taArray_Example__taRec PIPELINED AS       l_Set  taRec ;   BEGIN       l_Set := Array_Func ;       FOR i IN l_Set.FIRST .. l_Set.LAST LOOP           PIPE ROW (               tArray_Example__taRec (                   l_Set (i).Col1,                   l_Set (i).Col2,                   l_Set (i).Col3               )           ) ;       END LOOP ;       RETURN ;   END ;   --   END Array_Example ; As you can see, the new function is very simple. Now, it is a simple matter of calling the function as a straight-forward SELECT from your DBI code. From the above example, the code would look something like this :   my $sth = $dbh->prepare('SELECT * FROM TABLE(Array_Example.Array_Func_DBI)');   $sth->execute;   while ( my ($col1, $col2, $col3) = $sth->fetchrow_array {     ...   } SYS.DBMS_SQL datatypes DBD::Oracle has built-in support for SYS.DBMS_SQL.VARCHAR2_TABLE and SYS.DBMS_SQL.NUMBER_TABLE datatypes. The simple example is here:     my $statement='     DECLARE         tbl     SYS.DBMS_SQL.VARCHAR2_TABLE;     BEGIN         tbl := :mytable;         :cc := tbl.count();         tbl(1) := \'def\';         tbl(2) := \'ijk\';         :mytable := tbl;     END;     ';      my $sth=$dbh->prepare( $statement );      my @arr=( ""abc"",""efg"",""hij"" );      $sth->bind_param_inout("":mytable"", \\@arr, 10, {             ora_type => ORA_VARCHAR2_TABLE,             ora_maxarray_numentries => 100     } ) ;     $sth->bind_param_inout("":cc"", \$cc, 100  );     $sth->execute();     print       ""Result: cc="",$cc,""\n"",         ""\tarr="",Data::Dumper::Dumper(\@arr),""\n""; Note: Take careful note that we use '\\@arr' here because the 'bind_param_inout' will only take a reference to a scalar. ORA_VARCHAR2_TABLE SYS.DBMS_SQL.VARCHAR2_TABLE object is always bound to array reference. ( in bind_param() and bind_param_inout() ). When you bind array, you need to specify full buffer size for OUT data. So, there are two parameters: max_len (specified as 3rd argument of bind_param_inout() ), and ora_maxarray_numentries. They define maximum array entry length and maximum rows, that can be passed to Oracle and back to you. In this example we send array with 1 element with length=3, but allocate space for 100 Oracle array entries with maximum length 10 of each. So, you can get no more than 100 array entries with length <= 10. If you set max_len to zero, maximum array entry length is calculated as maximum length of entry of array bound. If 0 < max_len < length( $some_element ), truncation occur. If you set ora_maxarray_numentries to zero, current (at bind time) bound array length is used as maximum. If 0 < ora_maxarray_numentries < scalar(@array), not all array entries are bound. ORA_NUMBER_TABLE SYS.DBMS_SQL.NUMBER_TABLE object handling is much alike ORA_VARCHAR2_TABLE. The main difference is internal data representation. Currently 2 types of bind is allowed : as C-integer, or as C-double type. To select one of them, you may specify additional bind parameter ora_internal_type as either SQLT_INT or SQLT_FLT for C-integer and C-double types. Integer size is architecture-specific and is usually 32 or 64 bit. Double is standard IEEE 754 type. ora_internal_type defaults to double (SQLT_FLT). max_len is ignored for OCI_NUMBER_TABLE. Currently, you cannot bind full native Oracle NUMBER(38). If you really need, send request to dbi-dev list. The usage example is here:     $statement='     DECLARE             tbl     SYS.DBMS_SQL.NUMBER_TABLE;     BEGIN             tbl := :mytable;             :cc := tbl(2);             tbl(4) := -1;             tbl(5) := -2;             :mytable := tbl;     END;     ';      $sth=$dbh->prepare( $statement );      if( ! defined($sth) ){             die ""Prepare error: "",$dbh->errstr,""\n"";     }      @arr=( 1,""2E0"",""3.5"" );      # note, that ora_internal_type defaults to SQLT_FLT for ORA_NUMBER_TABLE .     if( not $sth->bind_param_inout("":mytable"", \\@arr, 10, {                     ora_type => ORA_NUMBER_TABLE,                     ora_maxarray_numentries => (scalar(@arr)+2),                     ora_internal_type => SQLT_FLT               } ) ){             die ""bind :mytable error: "",$dbh->errstr,""\n"";     }     $cc=undef;     if( not $sth->bind_param_inout("":cc"", \$cc, 100 ) ){             die ""bind :cc error: "",$dbh->errstr,""\n"";     }      if( not $sth->execute() ){             die ""Execute failed: "",$dbh->errstr,""\n"";     }     print   ""Result: cc="",$cc,""\n"",             ""\tarr="",Data::Dumper::Dumper(\@arr),""\n""; The result is like:     Result: cc=2             arr=$VAR1 = [               '1',               '2',               '3.5',               '-1',               '-2'             ]; If you change bind type to SQLT_INT, like:     ora_internal_type => SQLT_INT you get:     Result: cc=2             arr=$VAR1 = [               1,               2,               3,               -1,               -2             ]; bind_param_inout_array DBD::Oracle supports this undocumented feature of DBI. See ""Returning A Value from an INSERT"" for an example. bind_param_array   $rv = $sth->bind_param_array($param_num, $array_ref_or_value)   $rv = $sth->bind_param_array($param_num, $array_ref_or_value, $bind_type)   $rv = $sth->bind_param_array($param_num, $array_ref_or_value, \%attr) Binds an array of values to a placeholder, so that each is used in turn by a call to the ""execute_array"" method. execute   $rv = $sth->execute(@bind_values); Perform whatever processing is necessary to execute the prepared statement. execute_array   $tuples = $sth->execute_array() or die $sth->errstr;   $tuples = $sth->execute_array(\%attr) or die $sth->errstr;   $tuples = $sth->execute_array(\%attr, @bind_values) or die $sth->errstr;    ($tuples, $rows) = $sth->execute_array(\%attr) or die $sth->errstr;   ($tuples, $rows) = $sth->execute_array(\%attr, @bind_values) or die $sth->errstr; Execute a prepared statement once for each item in a passed-in hashref, or items that were previously bound via the ""bind_param_array"" method. See the DBI documentation for more details. DBD::Oracle takes full advantage of OCI's array interface so inserts and updates using this interface will run very quickly. execute_for_fetch   $tuples = $sth->execute_for_fetch($fetch_tuple_sub);   $tuples = $sth->execute_for_fetch($fetch_tuple_sub, \@tuple_status);    ($tuples, $rows) = $sth->execute_for_fetch($fetch_tuple_sub);   ($tuples, $rows) = $sth->execute_for_fetch($fetch_tuple_sub, \@tuple_status); Used internally by the ""execute_array"" method, and rarely used directly. See the DBI documentation for more details. fetchrow_arrayref   $ary_ref = $sth->fetchrow_arrayref; Fetches the next row of data from the statement handle, and returns a reference to an array holding the column values. Any columns that are NULL are returned as undef within the array. If there are no more rows or if an error occurs, the this method return undef. You should check $sth->err afterwards (or use the ""RaiseError"" attribute) to discover if the undef returned was due to an error. Note that the same array reference is returned for each fetch, so don't store the reference and then use it after a later fetch. Also, the elements of the array are also reused for each row, so take care if you want to take a reference to an element. See also ""bind_columns"". fetchrow_array   @ary = $sth->fetchrow_array; Similar to the ""fetchrow_arrayref"" method, but returns a list of column information rather than a reference to a list. Do not use this in a scalar context. fetchrow_hashref   $hash_ref = $sth->fetchrow_hashref;   $hash_ref = $sth->fetchrow_hashref($name); Fetches the next row of data and returns a hashref containing the name of the columns as the keys and the data itself as the values. Any NULL value is returned as undef value. If there are no more rows or if an error occurs, the this method return undef. You should check $sth->err afterwards (or use the ""RaiseError"" attribute) to discover if the undef returned was due to an error. The optional $name argument should be either NAME, NAME_lc or NAME_uc, and indicates what sort of transformation to make to the keys in the hash. By default Oracle uses upper case. fetchall_arrayref   $tbl_ary_ref = $sth->fetchall_arrayref();   $tbl_ary_ref = $sth->fetchall_arrayref( $slice );   $tbl_ary_ref = $sth->fetchall_arrayref( $slice, $max_rows ); Returns a reference to an array of arrays that contains all the remaining rows to be fetched from the statement handle. If there are no more rows, an empty arrayref will be returned. If an error occurs, the data read in so far will be returned. Because of this, you should always check $sth->err after calling this method, unless ""RaiseError"" has been enabled. If $slice is an array reference, fetchall_arrayref uses the ""fetchrow_arrayref"" method to fetch each row as an array ref. If the $slice array is not empty then it is used as a slice to select individual columns by perl array index number (starting at 0, unlike column and parameter numbers which start at 1). With no parameters, or if $slice is undefined, fetchall_arrayref acts as if passed an empty array ref. If $slice is a hash reference, fetchall_arrayref uses ""fetchrow_hashref"" to fetch each row as a hash reference. See the DBI documentation for a complete discussion. fetchall_hashref   $hash_ref = $sth->fetchall_hashref( $key_field ); Returns a hashref containing all rows to be fetched from the statement handle. See the DBI documentation for a full discussion. finish   $rv = $sth->finish; Indicates to DBI that you are finished with the statement handle and are not going to use it again. Only needed when you have not fetched all the possible rows. rows   $rv = $sth->rows; Returns the number of rows affected for updates, deletes and inserts and -1 for selects. bind_col   $rv = $sth->bind_col($column_number, \$var_to_bind);   $rv = $sth->bind_col($column_number, \$var_to_bind, \%attr );   $rv = $sth->bind_col($column_number, \$var_to_bind, $bind_type ); Binds a Perl variable and/or some attributes to an output column of a SELECT statement. Column numbers count up from 1. You do not need to bind output columns in order to fetch data. NOTE: DBD::Oracle does not use the $bind_type to determine how to bind the column; it uses what Oracle says the data type is. You can however set the StrictlyTyped/DiscardString attributes and these will take effect as these attributes are applied after the column is retrieved. See the DBI documentation for a discussion of the optional parameters \%attr and $bind_type bind_columns   $rv = $sth->bind_columns(@list_of_refs_to_vars_to_bind); Calls the ""bind_col"" method for each column in the SELECT statement, using the supplied list. dump_results   $rows = $sth->dump_results($maxlen, $lsep, $fsep, $fh); Fetches all the rows from the statement handle, calls DBI::neat_list for each row, and prints the results to $fh (which defaults to STDOUT). Rows are separated by $lsep (which defaults to a newline). Columns are separated by $fsep (which defaults to a comma). The $maxlen controls how wide the output can be, and defaults to 35. This method is designed as a handy utility for prototyping and testing queries. Since it uses ""neat_list"" to format and edit the string for reading by humans, it is not recommended for data transfer applications. STATEMENT HANDLE ATTRIBUTES NUM_OF_FIELDS (integer, read-only) Returns the number of columns returned by the current statement. A number will only be returned for SELECT statements for INSERT, UPDATE, and DELETE statements which contain a RETURNING clause. This method returns undef if called before execute(). NUM_OF_PARAMS (integer, read-only) Returns the number of placeholders in the current statement. NAME (arrayref, read-only) Returns an arrayref of column names for the current statement. This method will only work for SELECT statements, for SHOW statements, and for INSERT, UPDATE, and DELETE statements which contain a RETURNING clause. This method returns undef if called before execute(). NAME_lc (arrayref, read-only) The same as the NAME attribute, except that all column names are forced to lower case. NAME_uc (arrayref, read-only) The same as the NAME attribute, except that all column names are forced to upper case. NAME_hash (hashref, read-only) Similar to the NAME attribute, but returns a hashref of column names instead of an arrayref. The names of the columns are the keys of the hash, and the values represent the order in which the columns are returned, starting at 0. This method returns undef if called before execute(). NAME_lc_hash (hashref, read-only) The same as the NAME_hash attribute, except that all column names are forced to lower case. NAME_uc_hash (hashref, read-only) The same as the NAME_hash attribute, except that all column names are forced to lower case. TYPE (arrayref, read-only) Returns an arrayref indicating the data type for each column in the statement. This method returns undef if called before execute(). PRECISION (arrayref, read-only) Returns an arrayref of integer values for each column returned by the statement. The number indicates the precision for NUMERIC columns, the size in number of characters for CHAR and VARCHAR columns, and for all other types of columns it returns the number of bytes. This method returns undef if called before execute(). SCALE (arrayref, read-only) Returns an arrayref of integer values for each column returned by the statement. The number indicates the scale of the that column. The only type that will return a value is NUMERIC. This method returns undef if called before execute(). NULLABLE (arrayref, read-only) Returns an arrayref of integer values for each column returned by the statement. The number indicates if the column is nullable or not. 0 = not nullable, 1 = nullable, 2 = unknown. This method returns undef if called before execute(). Database (dbh, read-only) Returns the database handle this statement handle was created from. ParamValues (hash ref, read-only) Returns a reference to a hash containing the values currently bound to placeholders. If the ""named parameters"" type of placeholders are being used (such as "":foo""), then the keys of the hash will be the names of the placeholders (without the colon). If the ""dollar sign numbers"" type of placeholders are being used, the keys of the hash will be the numbers, without the dollar signs. If the ""question mark"" type is used, integer numbers will be returned, starting at one and increasing for every placeholder. If this method is called before ""execute"", the literal values passed in are returned. If called after ""execute"", then the quoted versions of the values are returned. ParamTypes (hash ref, read-only) Returns a reference to a hash containing the type names currently bound to placeholders. The keys are the same as returned by the ParamValues method. The values are hashrefs containing a single key value pair, in which the key is either 'TYPE' if the type has a generic SQL equivalent, and 'pg_type' if the type can only be expressed by a Postgres type. The value is the internal number corresponding to the type originally passed in. (Placeholders that have not yet been bound will return undef as the value). This allows the output of ParamTypes to be passed back to the ""bind_param"" method. Statement (string, read-only) Returns the statement string passed to the most recent ""prepare"" method called in this database handle, even if that method failed. This is especially useful where ""RaiseError"" is enabled and the exception handler checks $@ and sees that a prepare method call failed. RowsInCache Returns the number of un-fetched rows in the cache for selects. SCROLLABLE CURSORS Oracle supports the concept of a 'Scrollable Cursor' which is defined as a 'Result Set' where the rows can be fetched either sequentially or non-sequentially. One can fetch rows forward, backwards, from any given position or the n-th row from the current position in the result set. Rows are numbered sequentially starting at one and client-side caching of the partial or entire result set can improve performance by limiting round trips to the server. Oracle does not support DML type operations with scrollable cursors so you are limited to simple 'Select' operations only. As well you can not use this functionality with remote mapped queries or if the LONG datatype is part of the select list. However, LOBSs, CLOBSs, and BLOBs do work as do all the regular bind, and fetch methods. Only use scrollable cursors if you really have a good reason to. They do use up considerable more server and client resources and have poorer response times than non-scrolling cursors. Enabling Scrollable Cursors To enable this functionality you must first import the 'Fetch Orientation' and the 'Execution Mode' constants by using;    use DBD::Oracle qw(:ora_fetch_orient :ora_exe_modes); Next you will have to tell DBD::Oracle that you will be using scrolling by setting the ora_exe_mode attribute on the statement handle to 'OCI_STMT_SCROLLABLE_READONLY' with the prepare method;   $sth=$dbh->prepare($SQL,{ora_exe_mode=>OCI_STMT_SCROLLABLE_READONLY}); When the statement is executed you will then be able to use 'ora_fetch_scroll' method to get a row or you can still use any of the other fetch methods but with a poorer response time than if you used a non-scrolling cursor. As well scrollable cursors are compatible with any applicable bind methods. Scrollable Cursor Methods The following driver-specific methods are used with scrollable cursors. ora_scroll_position   $position =  $sth->ora_scroll_position(); This method returns the current position (row number) attribute of the result set. Prior to the first fetch this value is 0. This is the only time this value will be 0 after the first fetch the value will be set, so you can use this value to test if any rows have been fetched. The minimum value will always be 1 after the first fetch. The maximum value will always be the total number of rows in the record set. ora_fetch_scroll   $ary_ref = $sth->ora_fetch_scroll($fetch_orient,$fetch_offset); Works the same as fetchrow_arrayref, excepts one passes in a 'Fetch Orientation' constant and a fetch_offset value which will then determine the row that will be fetched. It returns the row as a list containing the field values. Null fields are returned as undef values in the list. The valid orientation constant and fetch offset values combination are detailed below   OCI_FETCH_CURRENT,  fetches the current row, the fetch offset value is ignored.   OCI_FETCH_NEXT,     fetches the next row from the current position, the fetch offset value                       is ignored.   OCI_FETCH_FIRST,    fetches the first row, the fetch offset value is ignored.   OCI_FETCH_LAST,     fetches the last row, the fetch offset value is ignored.   OCI_FETCH_PRIOR,    fetches the previous row from the current position, the fetch offset                       value is ignored.    OCI_FETCH_ABSOLUTE, fetches the row that is specified by the fetch offset value.    OCI_FETCH_ABSOLUTE, and a fetch offset value of 1 is equivalent to a OCI_FETCH_FIRST.   OCI_FETCH_ABSOLUTE, and a fetch offset value of 0 is equivalent to a OCI_FETCH_CURRENT.    OCI_FETCH_RELATIVE, fetches the row relative from the current position as specified by the                       fetch offset value.    OCI_FETCH_RELATIVE, and a fetch offset value of 0 is equivalent to a OCI_FETCH_CURRENT.   OCI_FETCH_RELATIVE, and a fetch offset value of 1 is equivalent to a OCI_FETCH_NEXT.   OCI_FETCH_RELATIVE, and a fetch offset value of -1 is equivalent to a OCI_FETCH_PRIOR. The effect that a ora_fetch_scroll method call has on the current_positon attribute is detailed below.   OCI_FETCH_CURRENT, has no effect on the current_positon attribute.   OCI_FETCH_NEXT,    increments current_positon attribute by 1   OCI_FETCH_NEXT,    when at the last row in the record set does not change current_positon                      attribute, it is equivalent to a OCI_FETCH_CURRENT   OCI_FETCH_FIRST,   sets the current_positon attribute to 1.   OCI_FETCH_LAST,    sets the current_positon attribute to the total number of rows in the                      record set.   OCI_FETCH_PRIOR,   decrements current_positon attribute by 1.   OCI_FETCH_PRIOR,   when at the first row in the record set does not change current_positon                      attribute, it is equivalent to a OCI_FETCH_CURRENT.    OCI_FETCH_ABSOLUTE, sets the current_positon attribute to the fetch offset value.   OCI_FETCH_ABSOLUTE, and a fetch offset value that is less than 1 does not change                       current_positon attribute, it is equivalent to a OCI_FETCH_CURRENT.   OCI_FETCH_ABSOLUTE, and a fetch offset value that is greater than the number of records in                       the record set, does not change current_positon attribute, it is                       equivalent to a OCI_FETCH_CURRENT.   OCI_FETCH_RELATIVE, sets the current_positon attribute to (current_positon attribute +                       fetch offset value).   OCI_FETCH_RELATIVE, and a fetch offset value that makes the current position less than 1,                       does not change fetch offset value so it is equivalent to a OCI_FETCH_CURRENT.   OCI_FETCH_RELATIVE, and a fetch offset value that makes it greater than the number of records                       in the record set, does not change fetch offset value so it is equivalent                       to a OCI_FETCH_CURRENT. The effects of the differing orientation constants on the first fetch (current_postion attribute at 0) are as follows.   OCI_FETCH_CURRENT, dose not fetch a row or change the current_positon attribute.   OCI_FETCH_FIRST,   fetches row 1 and sets the current_positon attribute to 1.   OCI_FETCH_LAST,    fetches the last row in the record set and sets the current_positon                      attribute to the total number of rows in the record set.   OCI_FETCH_NEXT,    equivalent to a OCI_FETCH_FIRST.   OCI_FETCH_PRIOR,   equivalent to a OCI_FETCH_CURRENT.    OCI_FETCH_ABSOLUTE, and a fetch offset value that is less than 1 is equivalent to a                       OCI_FETCH_CURRENT.   OCI_FETCH_ABSOLUTE, and a fetch offset value that is greater than the number of                       records in the record set is equivalent to a OCI_FETCH_CURRENT.   OCI_FETCH_RELATIVE, and a fetch offset value that is less than 1 is equivalent                       to a OCI_FETCH_CURRENT.   OCI_FETCH_RELATIVE, and a fetch offset value that makes it greater than the number                       of records in the record set, is equivalent to a OCI_FETCH_CURRENT. Scrollable Cursor Usage Given a simple code like this:   use DBI;   use DBD::Oracle qw(:ora_types :ora_fetch_orient :ora_exe_modes);   my $dbh = DBI->connect($dsn, $dbuser, '');   my $SQL = ""select id,                      first_name,                      last_name                 from employee"";   my $sth=$dbh->prepare($SQL,{ora_exe_mode=>OCI_STMT_SCROLLABLE_READONLY});   $sth->execute();   my $value; and one assumes that the number of rows returned from the query is 20, the code snippets below will illustrate the use of ora_fetch_scroll method; Fetching the Last Row   $value =  $sth->ora_fetch_scroll(OCI_FETCH_LAST,0);   print ""id="".$value->[0]."", First Name="".$value->[1]."", Last Name="".$value->[2].""\n"";   print ""current scroll position="".$sth->ora_scroll_position().""\n""; The current_positon attribute to will be 20 after this snippet. This is also a way to get the number of rows in the record set, however, if the record set is large this could take some time. Fetching the Current Row   $value =  $sth->ora_fetch_scroll(OCI_FETCH_CURRENT,0);   print ""id="".$value->[0]."", First Name="".$value->[1]."", Last Name="".$value->[2].""\n"";   print ""current scroll position="".$sth->ora_scroll_position().""\n""; The current_positon attribute will still be 20 after this snippet. Fetching the First Row   $value =  $sth->ora_fetch_scroll(OCI_FETCH_FIRST,0);   print ""id="".$value->[0]."", First Name="".$value->[1]."", Last Name="".$value->[2].""\n"";   print ""current scroll position="".$sth->ora_scroll_position().""\n""; The current_positon attribute will be 1 after this snippet. Fetching the Next Row   for(my $i=0;$i<=3;$i++){      $value =  $sth->ora_fetch_scroll(OCI_FETCH_NEXT,0);      print ""id="".$value->[0]."", First Name="".$value->[1]."", Last Name="".$value->[2].""\n"";   }   print ""current scroll position="".$sth->ora_scroll_position().""\n""; The current_positon attribute will be 5 after this snippet. Fetching the Prior Row   for(my $i=0;$i<=3;$i++){      $value =  $sth->ora_fetch_scroll(OCI_FETCH_PRIOR,0);      print ""id="".$value->[0]."", First Name="".$value->[1]."", Last Name="".$value->[2].""\n"";   }   print ""current scroll position="".$sth->ora_scroll_position().""\n""; The current_positon attribute will be 1 after this snippet. Fetching the 10th Row   $value =  $sth->ora_fetch_scroll(OCI_FETCH_ABSOLUTE,10);   print ""id="".$value->[0]."", First Name="".$value->[1]."", Last Name="".$value->[2].""\n"";   print ""current scroll position="".$sth->ora_scroll_position().""\n""; The current_positon attribute will be 10 after this snippet. Fetching the 10th to 14th Row   for(my $i=10;$i<15;$i++){       $value =  $sth->ora_fetch_scroll(OCI_FETCH_ABSOLUTE,$i);       print ""id="".$value->[0]."", First Name="".$value->[1]."", Last Name="".$value->[2].""\n"";   }   print ""current scroll position="".$sth->ora_scroll_position().""\n""; The current_positon attribute will be 14 after this snippet. Fetching the 14th to 10th Row   for(my $i=14;$i>9;$i--){     $value =  $sth->ora_fetch_scroll(OCI_FETCH_ABSOLUTE,$i);     print ""id="".$value->[0]."", First Name="".$value->[1]."", Last Name="".$value->[2].""\n"";   }   print ""current scroll position="".$sth->ora_scroll_position().""\n""; The current_positon attribute will be 10 after this snippet. Fetching the 5th Row From the Present Position.   $value =  $sth->ora_fetch_scroll(OCI_FETCH_RELATIVE,5);   print ""id="".$value->[0]."", First Name="".$value->[1]."", Last Name="".$value->[2].""\n"";   print ""current scroll position="".$sth->ora_scroll_position().""\n""; The current_positon attribute will be 15 after this snippet. Fetching the 9th Row Prior From the Present Position   $value =  $sth->ora_fetch_scroll(OCI_FETCH_RELATIVE,-9);   print ""id="".$value->[0]."", First Name="".$value->[1]."", Last Name="".$value->[2].""\n"";   print ""current scroll position="".$sth->ora_scroll_position().""\n""; The current_positon attribute will be 6 after this snippet. Use Finish   $sth->finish(); When using scrollable cursors it is required that you use the $sth->finish() method when you are done with the cursor as this type of cursor has to be explicitly cancelled on the server. If you do not do this you may cause resource problems on your database. LOBS AND LONGS The key to working with LOBs (CLOB, BLOBs) is to remember the value of an Oracle LOB column is not the content of the LOB. It's a 'LOB Locator' which, after being selected or inserted needs extra processing to read or write the content of the LOB. There are also legacy LONG types (LONG, LONG RAW, VARCHAR2) which are presently deprecated by Oracle but are still in use. These LONG types do not utilize a 'LOB Locator' and also are more limited in functionality than CLOB or BLOB fields. DBD::Oracle now offers three interfaces to LOB and LONG data, ""Data Interface for Persistent LOBs"" With this interface DBD::Oracle handles your data directly utilizing regular OCI calls, Oracle itself takes care of the LOB Locator operations in the case of BLOBs and CLOBs treating them exactly as if they were the same as the legacy LONG or LONG RAW types. ""Data Interface for LOB Locators"" With this interface DBD::Oracle handles your data utilizing LOB Locator OCI calls so it only works with CLOB and BLOB datatypes. With this interface DBD::Oracle takes care of the LOB Locator operations for you. ""LOB Locator Method Interface"" This allows the user direct access to the LOB Locator methods, so you have to take case of the LOB Locator operations yourself. Generally speaking the interface that you will chose will be dependent on what end you are trying to achieve. All have their benefits and drawbacks. One point to remember when working with LOBs (CLOBs, BLOBs) is if your LOB column can be in one of three states; NULL The table cell is created, but the cell holds no locator or value. If your LOB field is in this state then there is no LOB Locator that DBD::Oracle can work so if your encounter a   DBD::Oracle::db::ora_lob_read: locator is not of type OCILobLocatorPtr error when working with a LOB. You can correct this by using an SQL UPDATE statement to reset the LOB column to a non-NULL (or empty LOB) value with either EMPTY_BLOB or EMPTY_CLOB as in this example;   UPDATE lob_example      SET bindata=EMPTY_BLOB()    WHERE bindata IS NULL. Empty A LOB instance with a locator exists in the cell, but it has no value. The length of the LOB is zero. In this case DBD::Oracle will return 'undef' for the field. Populated A LOB instance with a locator and a value exists in the cell. You actually get the LOB value. Data Interface for Persistent LOBs This is the original interface for LONG and LONG RAW datatypes and from Oracle 9iR1 and later the OCI API was extended to work directly with the other LOB datatypes. In other words you can treat all LOB type data (BLOB, CLOB) as if it was a LONG, LONG RAW, or VARCHAR2. So you can perform INSERT, UPDATE, fetch, bind, and define operations on LOBs using the same techniques you would use on other datatypes that store character or binary data. In some cases there are fewer round trips to the server as no 'LOB Locators' are used, normally one can get an entire LOB is a single round trip. Simple Fetch for LONGs and LONG RAWs As the name implies this is the simplest way to use this interface. DBD::Oracle just attempts to get your LONG datatypes as a single large piece. There are no special settings, simply set the database handle's 'LongReadLen' attribute to a value that will be the larger than the expected size of the LONG or LONG RAW. If the size of the LONG or LONG RAW exceeds the 'LongReadLen' DBD::Oracle will return a 'ORA-24345: A Truncation' error. To stop this set the database handle's 'LongTruncOk' attribute to '1'. The maximum value of 'LongReadLen' seems to be dependent on the physical memory limits of the box that Oracle is running on. You have most likely reached this limit if you run into an 'ORA-01062: unable to allocate memory for define buffer' error. One solution is to set the size of 'LongReadLen' to a lower value. For example give this table;   CREATE TABLE test_long (             id NUMBER,             long1 long) this code;   $dbh->{LongReadLen} = 2*1024*1024; #2 meg   $SQL='select p_id,long1 from test_long';   $sth=$dbh->prepare($SQL);   $sth->execute();   while (my ( $p_id,$long )=$sth->fetchrow()){     print ""p_id="".$p_id.""\n"";     print ""long="".$long.""\n"";   } Will select out all of the long1 fields in the table as long as they are all under 2MB in length. A value in long1 longer than this will throw an error. Adding this line;   $dbh->{LongTruncOk}=1; before the execute will return all the long1 fields but they will be truncated at 2MBs. Using ora_ncs_buff_mtpl When getting CLOBs and NCLOBs in or out of Oracle, the Server will translate from the Server's NCharSet to the Client's. If they happen to be the same or at least compatible then all of these actions are a 1 char to 1 char bases. Thus if you set your LongReadLen buffer to 10_000_000 you will get up to 10_000_000 char. However if the Server has to translate from one NCharSet to another it will use bytes for conversion. The buffer value is set to 4 * LONG_READ_LEN which was very wasteful as you might only be asking for 10_000_000 bytes but you were actually using 40_000_000 bytes of buffer under the hood. You would still get 10_000_000 bytes (maybe less characters though) but you are using allot more memory that you need. You can now customize the size of the buffer by setting the 'ora_ncs_buff_mtpl' either on the connection or statement handle. You can also set this as 'ORA_DBD_NCS_BUFFER' OS environment variable so you will have to go back and change all your code if you are getting into trouble. The default value is still set to 4 for backward compatibility. You can lower this value and thus increase the amount of data you can retrieve. If the ora_ncs_buff_mtpl is too small DBD::Oracle will throw and error telling you to increase this buffer by one. If the error is not captured then you may get at some random point later on, usually at a finish() or disconnect() or even a fetch() this error;   ORA-03127: no new operations allowed until the active operation ends This is one of the more obscure ORA errors (have some fun and report it to Meta-Link they will scratch their heads for hours) If you get this, simply increment the ora_ncs_buff_mtpl by one until it goes away. This should greatly increase your ability to select very large CLOBs or NCLOBs, by freeing up a large block of memory. You can tune this value by setting ora_oci_success_warn which will display the following   OCILobRead field 2 of 3 SUCCESS: csform 1 (SQLCS_IMPLICIT), LOBlen 10240(characters), LongReadLen   20(characters), BufLen 80(characters), Got 28(characters) In the case above the query Got 28 characters (well really only 20 characters of 28 bytes) so we could use ora_ncs_buff_mtpl=>2 (20*2=40) thus saving 40bytes of memory. Simple Fetch for CLOBs and BLOBs To use this interface for CLOBs and LOBs datatypes set the 'ora_pers_lob' attribute of the statement handle to '1' with the prepare method, as well set the database handle's 'LongReadLen' attribute to a value that will be the larger than the expected size of the LOB. If the size of the LOB exceeds the 'LongReadLen' DBD::Oracle will return a 'ORA-24345: A Truncation' error. To stop this set the database handle's 'LongTruncOk' attribute to '1'. The maximum value of 'LongReadLen' seems to be dependent on the physical memory limits of the box that Oracle is running on in the same way that LONGs and LONG RAWs are. For CLOBs and NCLOBs the limit is 64k chars if there is no truncation, this is an internal OCI limit complain to them if you want it changed. However if you CLOB is longer than this and also larger than the 'LongReadLen' than the 'LongReadLen' in chars is returned. It seems with BLOBs you are not limited by the 64k. For example give this table;   CREATE TABLE test_lob (id NUMBER,                clob1 CLOB,                clob2 CLOB,                blob1 BLOB,                blob2 BLOB) this code;   $dbh->{LongReadLen} = 2*1024*1024; #2 meg   $SQL='select p_id,lob_1,lob_2,blob_2 from test_lobs';   $sth=$dbh->prepare($SQL,{ora_pers_lob=>1});   $sth->execute();   while (my ( $p_id,$log,$log2,$log3,$log4 )=$sth->fetchrow()){     print ""p_id="".$p_id.""\n"";     print ""clob1="".$clob1.""\n"";     print ""clob2="".$clob2.""\n"";     print ""blob1="".$blob2.""\n"";     print ""blob2="".$blob2.""\n"";   } Will select out all of the LOBs in the table as long as they are all under 2MB in length. Longer lobs will throw an error. Adding this line;   $dbh->{LongTruncOk}=1; before the execute will return all the lobs but they will be truncated at 2MBs. Piecewise Fetch with Callback With a piecewise callback fetch DBD::Oracle sets up a function that will 'callback' to the DB during the fetch and gets your LOB (LONG, LONG RAW, CLOB, BLOB) piece by piece. To use this interface set the 'ora_clbk_lob' attribute of the statement handle to '1' with the prepare method. Next set the 'ora_piece_size' to the size of the piece that you want to return on the callback. Finally set the database handle's 'LongReadLen' attribute to a value that will be the larger than the expected size of the LOB. Like the ""Simple Fetch for LONGs and LONG RAWs"" and ""Simple Fetch for CLOBs and BLOBs"" the if the size of the LOB exceeds the is 'LongReadLen' you can use the 'LongTruncOk' attribute to truncate the LOB or set the 'LongReadLen' to a higher value. With this interface the value of 'ora_piece_size' seems to be constrained by the same memory limit as found on the Simple Fetch interface. If you encounter an 'ORA-01062' error try setting the value of 'ora_piece_size' to a smaller value. The value for 'LongReadLen' is dependent on the version and settings of the Oracle DB you are using. In theory it ranges from 8GBs in 9iR1 up to 128 terabytes with 11g but you will also be limited by the physical memory of your PERL instance. Using the table from the last example this code;   $dbh->{LongReadLen} = 20*1024*1024; #20 meg   $SQL='select p_id,lob_1,lob_2,blob_2 from test_lobs';   $sth=$dbh->prepare($SQL,{ora_clbk_lob=>1,ora_piece_size=>5*1024*1024});   $sth->execute();   while (my ( $p_id,$log,$log2,$log3,$log4 )=$sth->fetchrow()){     print ""p_id="".$p_id.""\n"";     print ""clob1="".$clob1.""\n"";     print ""clob2="".$clob2.""\n"";     print ""blob1="".$blob2.""\n"";     print ""blob2="".$blob2.""\n"";   } Will select out all of the LOBs in the table as long as they are all under 20MB in length. If the LOB is longer than 5MB (ora_piece_size) DBD::Oracle will fetch it in at least 2 pieces to a maximum of 4 pieces (4*5MB=20MB). Like the Simple Fetch examples Lobs longer than 20MB will throw an error. Using the table from the first example (LONG) this code;   $dbh->{LongReadLen} = 20*1024*1024; #2 meg   $SQL='select p_id,long1 from test_long';   $sth=$dbh->prepare($SQL,{ora_clbk_lob=>1,ora_piece_size=>5*1024*1024});   $sth->execute();   while (my ( $p_id,$long )=$sth->fetchrow()){     print ""p_id="".$p_id.""\n"";     print ""long="".$long.""\n"";   } Will select all of the long1 fields from table as long as they are is under 20MB in length. If the long1 filed is longer than 5MB (ora_piece_size) DBD::Oracle will fetch it in at least 2 pieces to a maximum of 4 pieces (4*5MB=20MB). Like the other examples long1 fields longer than 20MB will throw an error. Piecewise Fetch with Polling With a polling piecewise fetch DBD::Oracle iterates (Polls) over the LOB during the fetch getting your LOB (LONG, LONG RAW, CLOB, BLOB) piece by piece. To use this interface set the 'ora_piece_lob' attribute of the statement handle to '1' with the prepare method. Next set the 'ora_piece_size' to the size of the piece that you want to return on the callback. Finally set the database handle's 'LongReadLen' attribute to a value that will be the larger than the expected size of the LOB. Like the ""Piecewise Fetch with Callback"" and Simple Fetches if the size of the LOB exceeds the is 'LongReadLen' you can use the 'LongTruncOk' attribute to truncate the LOB or set the 'LongReadLen' to a higher value. With this interface the value of 'ora_piece_size' seems to be constrained by the same memory limit as found on the ""Piecewise Fetch with Callback"". Using the table from the example above this code;   $dbh->{LongReadLen} = 20*1024*1024; #20 meg   $SQL='select p_id,lob_1,lob_2,blob_2 from test_lobs';   $sth=$dbh->prepare($SQL,{ora_piece_lob=>1,ora_piece_size=>5*1024*1024});   $sth->execute();   while (my ( $p_id,$log,$log2,$log3,$log4 )=$sth->fetchrow()){     print ""p_id="".$p_id.""\n"";     print ""clob1="".$clob1.""\n"";     print ""clob2="".$clob2.""\n"";     print ""blob1="".$blob2.""\n"";     print ""blob2="".$blob2.""\n"";   } Will select out all of the LOBs in the table as long as they are all under 20MB in length. If the LOB is longer than 5MB (ora_piece_size) DBD::Oracle will fetch it in at least 2 pieces to a maximum of 4 pieces (4*5MB=20MB). Like the other fetch methods LOBs longer than 20MB will throw an error. Finally with this code;   $dbh->{LongReadLen} = 20*1024*1024; #2 meg   $SQL='select p_id,long1 from test_long';   $sth=$dbh->prepare($SQL,{ora_piece_lob=>1,ora_piece_size=>5*1024*1024});   $sth->execute();   while (my ( $p_id,$long )=$sth->fetchrow()){     print ""p_id="".$p_id.""\n"";     print ""long="".$long.""\n"";   } Will select all of the long1 fields from table as long as they are is under 20MB in length. If the long1 field is longer than 5MB (ora_piece_size) DBD::Oracle will fetch it in at least 2 pieces to a maximum of 4 pieces (4*5MB=20MB). Like the other examples long1 fields longer than 20MB will throw an error. Binding for Updates and Inserts for CLOBs and BLOBs To bind for updates and inserts all that is required to use this interface is to set the statement handle's prepare method 'ora_type' attribute to 'SQLT_CHR' in the case of CLOBs and NCLOBs or 'SQLT_BIN' in the case of BLOBs as in this example for an insert;   my $in_clob = ""<document>\n"";   $in_clob .= ""  <value>$_</value>\n"" for 1 .. 10_000;   $in_clob .= ""</document>\n"";   my $in_blob =""0101"" for 1 .. 10_000;    $SQL='insert into test_lob3@tpgtest (id,clob1,clob2, blob1,blob2) values(?,?,?,?,?)';   $sth=$dbh->prepare($SQL );   $sth->bind_param(1,3);   $sth->bind_param(2,$in_clob,{ora_type=>SQLT_CHR});   $sth->bind_param(3,$in_clob,{ora_type=>SQLT_CHR});   $sth->bind_param(4,$in_blob,{ora_type=>SQLT_BIN});   $sth->bind_param(5,$in_blob,{ora_type=>SQLT_BIN});   $sth->execute(); So far the only limit reached with this form of insert is the LOBs must be under 2GB in size. Support for Remote LOBs; Starting with Oracle 10gR2 the interface for Persistent LOBs was expanded to support remote LOBs (access over a dblink). Given a database called 'lob_test' that has a 'LINK' defined like this;   CREATE DATABASE LINK link_test CONNECT TO test_lobs IDENTIFIED BY tester USING 'lob_test'; to a remote database called 'test_lobs', the following code will work;   $dbh = DBI->connect('dbi:Oracle:','test@lob_test','test');   $dbh->{LongReadLen} = 2*1024*1024; #2 meg   $SQL='select p_id,lob_1,lob_2,blob_2 from test_lobs@link_test';   $sth=$dbh->prepare($SQL,{ora_pers_lob=>1});   $sth->execute();   while (my ( $p_id,$log,$log2,$log3,$log4 )=$sth->fetchrow()){      print ""p_id="".$p_id.""\n"";      print ""clob1="".$clob1.""\n"";      print ""clob2="".$clob2.""\n"";      print ""blob1="".$blob2.""\n"";      print ""blob2="".$blob2.""\n"";   } Below are the limitations of Remote LOBs; Queries involving more than one database are not supported; so the following returns an error:   SELECT t1.lobcol,          a2.lobcol     FROM t1,          t2.lobcol@dbs2 a2 W    WHERE LENGTH(t1.lobcol) = LENGTH(a2.lobcol); as does:      SELECT t1.lobcol        FROM t1@dbs1   UNION ALL      SELECT t2.lobcol        FROM t2@dbs2; DDL commands are not supported; so the following returns an error:   CREATE VIEW v AS SELECT lob_col FROM tab@dbs; Only binds and defines for data going into remote persistent LOBs are supported. so that parameter passing in PL/SQL where CHAR data is bound or defined for remote LOBs is not allowed . These statements all produce errors:   SELECT foo() FROM table1@dbs2;    SELECT foo()@dbs INTO char_val FROM DUAL;    SELECT XMLType().getclobval FROM table1@dbs2; If the remote object is a view such as   CREATE VIEW v AS SELECT foo() FROM ... the following would not work:   SELECT * FROM v@dbs2; Limited PL/SQL parameter passing PL/SQL parameter passing is not allowed where the actual argument is a LOB type and the remote argument is one of VARCHAR2, NVARCHAR2, CHAR, NCHAR, or RAW. RETURNING INTO does not support implicit conversions between CHAR and CLOB. so the following returns an error:   SELECT t1.lobcol as test, a2.lobcol FROM t1, t2.lobcol@dbs2 a2 RETURNING test Locator Data Interface Simple Usage When fetching LOBs with this interface a 'LOB Locator' is created then used to get the lob with the LongReadLen and LongTruncOk attributes. The value for 'LongReadLen' is dependent on the version and settings of the Oracle DB you are using. In theory it ranges from 8GBs in 9iR1 up to 128 terabytes with 11g but you will also be limited by the physical memory of your PERL instance. When inserting or updating LOBs some major magic has to be performed behind the scenes to make it transparent. Basically the driver has to insert a 'LOB Locator' and then refetch the newly inserted LOB Locator before being able to write the data into it. However, it works well most of the time, and I've made it as fast as possible, just one extra server-round-trip per insert or update after the first. For the time being, only single-row LOB updates are supported. To insert or update a large LOB using a placeholder, DBD::Oracle has to know in advance that it is a LOB type. So you need to say:   $sth->bind_param($field_num, $lob_value, { ora_type => ORA_CLOB }); The ORA_CLOB and ORA_BLOB constants can be imported using   use DBD::Oracle qw(:ora_types); or use the corresponding integer values (112 and 113). One further wrinkle: for inserts and updates of LOBs, DBD::Oracle has to be able to tell which parameters relate to which table fields. In all cases where it can possibly work it out for itself, it does, however, if there are multiple LOB fields of the same type in the table then you need to tell it which field each LOB param relates to:   $sth->bind_param($idx, $value, { ora_type=>ORA_CLOB, ora_field=>'foo' }); There are some limitations inherent in the way DBD::Oracle makes typical LOB operations simple by hiding the LOB Locator processing:  - Can't read/write LOBs in chunks (except via DBMS_LOB.WRITEAPPEND in PL/SQL)  - To INSERT a LOB, you need UPDATE privilege. The alternative is to disable the automatic LOB Locator processing. If ""ora_auto_lob"" is 0 in prepare(), you can fetch the LOB Locators and do all the work yourself using the ora_lob_*() methods. See the ""Data Interface for LOB Locators"" section below. LOB support in PL/SQL LOB Locators can be passed to PL/SQL calls by binding them to placeholders with the proper ora_type. If ""ora_auto_lob"" is true, output LOB parameters will be automatically returned as strings. If the Oracle driver has support for temporary LOBs (Oracle 9i and higher), strings can be bound to input LOB placeholders and will be automatically converted to LOBs. Example: # Build a large XML document, bind it as a CLOB, # extract elements through PL/SQL and return as a CLOB      # $dbh is a connected database handle      # output will be large       local $dbh->{LongReadLen} = 1_000_000;       my $in_clob = ""<document>\n"";      $in_clob .= ""  <value>$_</value>\n"" for 1 .. 10_000;      $in_clob .= ""</document>\n"";       my $out_clob;        my $sth = $dbh->prepare(<<PLSQL_END);      -- extract 'value' nodes      DECLARE        x XMLTYPE := XMLTYPE(:in);      BEGIN        :out := x.extract('/document/value').getClobVal();      END;       PLSQL_END       # :in param will be converted to a temp lob      # :out parameter will be returned as a string.       $sth->bind_param( ':in', $in_clob, { ora_type => ORA_CLOB } );      $sth->bind_param_inout( ':out', \$out_clob, 0, { ora_type => ORA_CLOB } );      $sth->execute; If you ever get an   ORA-01691 unable to extend lob segment sss.ggg by nnn in tablespace ttt error, while attempting to insert a LOB, this means the Oracle user has insufficient space for LOB you are trying to insert. One solution it to use ""alter database datafile 'sss.ggg' resize Mnnn"" to increase the available memory for LOBs. Persistent & Locator Interface Caveats Now that one has the option of using the Persistent or the Locator interface for LOBs the questions arises which one to use. For starters, if you want to access LOBs over a dblink you will have to use the Persistent interface so that choice is simple. The question of which one to use after that is a little more tricky. It basically boils down to a choice between LOB size and speed. The Callback and Polling piecewise fetches are very very slow when compared to the Simple and the Locator fetches but they can handle very large blocks of data. Given a situation where a large LOB is to be read the Locator fetch may time out while either of the piecewise fetches may not. With the Simple fetch you are limited by physical memory of your server but it runs a little faster than the Locator, as there are fewer round trips to the server. So if you have small LOBs and need to save a little bandwidth this is the one to use. It you are going after large LOBs then the Locator interface is the one to use. If you need to update more than a single row of with LOB data then the Persistent interface can do it while the Locator can't. If you encounter a situation where you have to access the legacy LOBs (LONG, LONG RAW) and the values are to large for you system then you can use the Callback or Polling piecewise fetches to get all of the data. Not all of the Persistent interface has been implemented yet, the following are not supported;   1) Piecewise, polling and callback binds for INSERT and UPDATE operations.   2) Piecewise array binds for SELECT, INSERT and UPDATE operations. Most of the time you should just use the ""Locator Data Interface"" as this is in one that has the best combination of speed and size. All this being said if you are doing some critical programming I would use the ""Data Interface for LOB Locators"" as this gives you very fine grain control of your LOBs, of course the code for this will be somewhat more involved. Data Interface for LOB Locators The following driver-specific methods let you manipulate ""LOB Locators"" directly. To select a LOB locator directly set the if the ora_auto_lob attribute to false, or alternatively they can be returned via PL/SQL procedure calls. (If using a DBI version earlier than 1.36 they must be called via the func() method. Note that methods called via func() don't honour RaiseError etc, and so it's important to check $dbh->err after each call. It's recommended that you upgrade to DBI 1.38 or later.) Note that LOB locators are only valid while the statement handle that created them is valid. When all references to the original statement handle are lost, the handle is destroyed and the locators are freed. ora_lob_read   $data = $dbh->ora_lob_read($lob_locator, $offset, $length); Read a portion of the LOB. $offset starts at 1. Uses the Oracle OCILobRead function. NOTE: DBD::Oracle post 1.46 will return undef for any read lob if the length specified in the ora_lob_read is 0. See RT 55028. This avoids the potential problem with empty lobs (created with empty_clob) which return a length of 0 from ora_lob_length and prior to 1.46 a call to ora_lob_read with a 0 length would segfault. ora_lob_write   $rc = $dbh->ora_lob_write($lob_locator, $offset, $data); Write/overwrite a portion of the LOB. $offset starts at 1. Uses the Oracle OCILobWrite function. ora_lob_append   $rc = $dbh->ora_lob_append($lob_locator, $data); Append $data to the LOB. Uses the Oracle OCILobWriteAppend function. ora_lob_trim   $rc = $dbh->ora_lob_trim($lob_locator, $length); Trims the length of the LOB to $length. Uses the Oracle OCILobTrim function. ora_lob_length   $length = $dbh->ora_lob_length($lob_locator); Returns the length of the LOB. Uses the Oracle OCILobGetLength function. ora_lob_is_init   $is_init = $dbh->ora_lob_is_init($lob_locator); Returns true(1) if the Lob Locator is initialized false(0) if it is not, or 'undef' if there is an error. Uses the Oracle OCILobLocatorIsInit function. ora_lob_chunk_size   $chunk_size = $dbh->ora_lob_chunk_size($lob_locator); Returns the chunk size of the LOB. Uses the Oracle OCILobGetChunkSize function. For optimal performance, Oracle recommends reading from and writing to a LOB in batches using a multiple of the LOB chunk size. In Oracle 10g and before, when all defaults are in place, this chunk size defaults to 8k (8192). LOB Locator Method Examples Note: Make sure you first read the note in the section above about multi-byte character set issues with these methods. The following examples demonstrate the usage of LOB Locators to read, write, and append data, and to query the size of large data. The following examples assume a table containing two large object columns, one binary and one character, with a primary key column, defined as follows:    CREATE TABLE lob_example (       lob_id      INTEGER PRIMARY KEY,       bindata     BLOB,       chardata    CLOB    ) It also assumes a sequence for use in generating unique lob_id field values, defined as follows:    CREATE SEQUENCE lob_example_seq Example: Inserting a new row with large data Unless enough memory is available to store and bind the entire LOB data for insert all at once, the LOB columns must be written interactively, piece by piece. In the case of a new row, this is performed by first inserting a row, with empty values in the LOB columns, then modifying the row by writing the large data interactively to the LOB columns using their LOB locators as handles. The insert statement must create token values in the LOB columns. Here, we use the empty string for both the binary and character large object columns 'bindata' and 'chardata'. After the INSERT statement, a SELECT statement is used to acquire LOB locators to the 'bindata' and 'chardata' fields of the newly inserted row. Because these LOB locators are subsequently written, they must be acquired from a select statement containing the clause 'FOR UPDATE' (LOB locators are only valid within the transaction that fetched them, so can't be used effectively if AutoCommit is enabled).    my $lob_id = $dbh->selectrow_array( <<""   SQL"" );       SELECT lob_example_seq.nextval FROM DUAL    SQL     my $sth = $dbh->prepare( <<""   SQL"" );       INSERT INTO lob_example       ( lob_id, bindata, chardata )       VALUES ( ?, EMPTY_BLOB(),EMPTY_CLOB() )    SQL    $sth->execute( $lob_id );     $sth = $dbh->prepare( <<""   SQL"", { ora_auto_lob => 0 } );       SELECT bindata, chardata       FROM lob_example       WHERE lob_id = ?       FOR UPDATE    SQL    $sth->execute( $lob_id );    my ( $bin_locator, $char_locator ) = $sth->fetchrow_array();    $sth->finish();     open BIN_FH, ""/binary/data/source"" or die;    open CHAR_FH, ""/character/data/source"" or die;    my $chunk_size = $dbh->ora_lob_chunk_size( $bin_locator );     # BEGIN WRITING BIN_DATA COLUMN    my $offset = 1;   # Offsets start at 1, not 0    my $length = 0;    my $buffer = '';    while( $length = read( BIN_FH, $buffer, $chunk_size ) ) {       $dbh->ora_lob_write( $bin_locator, $offset, $buffer );       $offset += $length;    }     # BEGIN WRITING CHAR_DATA COLUMN    $chunk_size = $dbh->ora_lob_chunk_size( $char_locator );    $offset = 1;   # Offsets start at 1, not 0    $length = 0;    $buffer = '';    while( $length = read( CHAR_FH, $buffer, $chunk_size ) ) {       $dbh->ora_lob_write( $char_locator, $offset, $buffer );       $offset += $length;    } In this example we demonstrate the use of ora_lob_write() interactively to append data to the columns 'bin_data' and 'char_data'. Had we used ora_lob_append(), we could have saved ourselves the trouble of keeping track of the offset into the lobs. The snippet of code beneath the comment 'BEGIN WRITING BIN_DATA COLUMN' could look as follows:    my $buffer = '';    while ( read( BIN_FH, $buffer, $chunk_size ) ) {       $dbh->ora_lob_append( $bin_locator, $buffer );    } The scalar variables $offset and $length are no longer needed, because ora_lob_append() keeps track of the offset for us. Example: Updating an existing row with large data In this example, we demonstrate a technique for overwriting a portion of a blob field with new binary data. The blob data before and after the section overwritten remains unchanged. Hence, this technique could be used for updating fixed length subfields embedded in a binary field.    my $lob_id = 5;   # Arbitrary row identifier, for example     $sth = $dbh->prepare( <<""   SQL"", { ora_auto_lob => 0 } );       SELECT bindata       FROM lob_example       WHERE lob_id = ?       FOR UPDATE    SQL    $sth->execute( $lob_id );    my ( $bin_locator ) = $sth->fetchrow_array();     my $offset = 100234;    my $data = ""This string will overwrite a portion of the blob"";    $dbh->ora_lob_write( $bin_locator, $offset, $data ); After running this code, the row where lob_id = 5 will contain, starting at position 100234 in the bin_data column, the string ""This string will overwrite a portion of the blob"". Example: Streaming character data from the database In this example, we demonstrate a technique for streaming data from the database to a file handle, in this case STDOUT. This allows more data to be read in and written out than could be stored in memory at a given time.    my $lob_id = 17;   # Arbitrary row identifier, for example     $sth = $dbh->prepare( <<""   SQL"", { ora_auto_lob => 0 } );       SELECT chardata       FROM lob_example       WHERE lob_id = ?    SQL    $sth->execute( $lob_id );    my ( $char_locator ) = $sth->fetchrow_array();     my $chunk_size = 1034;   # Arbitrary chunk size, for example    my $offset = 1;   # Offsets start at 1, not 0    while(1) {       my $data = $dbh->ora_lob_read( $char_locator, $offset, $chunk_size );       last unless length $data;       print STDOUT $data;       $offset += $chunk_size;    } Notice that the select statement does not contain the phrase ""FOR UPDATE"". Because we are only reading from the LOB Locator returned, and not modifying the LOB it refers to, the select statement does not require the ""FOR UPDATE"" clause. A word of caution when using the data returned from an ora_lob_read in a conditional statement. for example if the code below;    while( my $data = $dbh->ora_lob_read( $char_locator, $offset, $chunk_size ) ) {         print STDOUT $data;         $offset += $chunk_size;    } was used with a chunk size of 4096 against a blob that requires more than 1 chunk to return the data and the last chunk is one byte long and contains a zero (ASCII 48) you will miss this last byte as $data will contain 0 which PERL will see as false and not print it out. Example: Truncating existing large data In this example, we truncate the data already present in a large object column in the database. Specifically, for each row in the table, we truncate the 'bindata' value to half its previous length. After acquiring a LOB Locator for the column, we query its length, then we trim the length by half. Because we modify the large objects with the call to ora_lob_trim(), we must select the LOB locators 'FOR UPDATE'.    my $sth = $dbh->prepare( <<""   SQL"", { ora_auto_lob => 0 } );       SELECT bindata       FROM lob_example       FOR UPATE    SQL    $sth->execute();    while( my ( $bin_locator ) = $sth->fetchrow_array() ) {       my $binlength = $dbh->ora_lob_length( $bin_locator );       if( $binlength > 0 ) {          $dbh->ora_lob_trim( $bin_locator, $binlength/2 );       }    } SPACES AND PADDING Trailing Spaces Only the Oracle OCI 8 strips trailing spaces from VARCHAR placeholder values and uses Nonpadded Comparison Semantics with the result. This causes trouble if the spaces are needed for comparison with a CHAR value or to prevent the value from becoming '' which Oracle treats as NULL. Look for Blank-padded Comparison Semantics and Nonpadded Comparison Semantics in Oracle's SQL Reference or Server SQL Reference for more details. To preserve trailing spaces in placeholder values for Oracle clients that use OCI 8, either change the default placeholder type with ""ora_ph_type"" or the placeholder type for a particular call to ""bind"" in DBI or ""bind_param_inout"" in DBI with ""ora_type"" or TYPE. Using ORA_CHAR with ora_type or SQL_CHAR with TYPE allows the placeholder to be used with Padded Comparison Semantics if the value it is being compared to is a CHAR, NCHAR, or literal. Please remember that using spaces as a value or at the end of a value makes visually distinguishing values with different numbers of spaces difficult and should be avoided. Oracle Clients that use OCI 9.2 do not strip trailing spaces. Padded Char Fields Oracle Clients after OCI 9.2 will automatically pad CHAR placeholder values to the size of the CHAR. As the default placeholder type value in DBD::Oracle is ORA_VARCHAR2 to access this behaviour you will have to change the default placeholder type with ""ora_ph_type"" or placeholder type for a particular call with ""bind"" in DBI or ""bind_param_inout"" in DBI with ""ORA_CHAR"". UNICODE DBD::Oracle now supports Unicode UTF-8. There are, however, a number of issues you should be aware of, so please read all this section carefully. In this section we'll discuss ""Perl and Unicode"", then ""Oracle and Unicode"", and finally ""DBD::Oracle and Unicode"". Information about Unicode in general can be found at: http://www.unicode.org/. It is well worth reading because there are many misconceptions about Unicode and you may be holding some of them. Perl and Unicode Perl began implementing Unicode with version 5.6, but the implementation did not mature until version 5.8 and later. If you plan to use Unicode you are strongly urged to use Perl 5.8.2 or later and to carefully read the Perl documentation on Unicode:    perldoc perluniintro    # in Perl 5.8 or later    perldoc perlunicode And then read it again. Perl's internal Unicode format is UTF-8 which corresponds to the Oracle character set called AL32UTF8. Oracle and Unicode Oracle supports many characters sets, including several different forms of Unicode. These include:   AL16UTF16  =>  valid for NCHAR columns (CSID=2000)   UTF8       =>  valid for NCHAR columns (CSID=871), deprecated   AL32UTF8   =>  valid for NCHAR and CHAR columns (CSID=873) When you create an Oracle database, you must specify the DATABASE character set (used for DDL, DML and CHAR datatypes) and the NATIONAL character set (used for NCHAR and NCLOB types). The character sets used in your database can be found using:   $hash_ref = $dbh->ora_nls_parameters()   $database_charset = $hash_ref->{NLS_CHARACTERSET};   $national_charset = $hash_ref->{NLS_NCHAR_CHARACTERSET}; The Oracle 9.2 and later default for the national character set is AL16UTF16. The default for the database character set is often US7ASCII. Although many experienced DBAs will consider an 8bit character set like WE8ISO8859P1 or WE8MSWIN1252. To use any character set with Oracle other than US7ASCII, requires that the NLS_LANG environment variable be set. See the ""Oracle UTF8 is not UTF-8"" section below. You are strongly urged to read the Oracle Internationalization documentation specifically with respect the choices and trade offs for creating a databases for use with international character sets. Oracle uses the NLS_LANG environment variable to indicate what character set is being used on the client. When fetching data Oracle will convert from whatever the database character set is to the client character set specified by NLS_LANG. Similarly, when sending data to the database Oracle will convert from the character set specified by NLS_LANG to the database character set. The NLS_NCHAR environment variable can be used to define a different character set for 'national' (NCHAR) character types. Both UTF8 and AL32UTF8 can be used in NLS_LANG and NLS_NCHAR. For example:    NLS_LANG=AMERICAN_AMERICA.UTF8    NLS_LANG=AMERICAN_AMERICA.AL32UTF8    NLS_NCHAR=UTF8    NLS_NCHAR=AL32UTF8 Oracle UTF8 is not UTF-8 AL32UTF8 should be used in preference to UTF8 if it works for you, which it should for Oracle 9.2 or later. If you're using an old version of Oracle that doesn't support AL32UTF8 then you should avoid using any Unicode characters that require surrogates, in other words characters beyond the Unicode BMP (Basic Multilingual Plane). That's because the character set that Oracle calls ""UTF8"" doesn't conform to the UTF-8 standard in its handling of surrogate characters. Technically the encoding that Oracle calls ""UTF8"" is known as ""CESU-8"". Here are a couple of extracts from http://www.unicode.org/reports/tr26/:   CESU-8 is useful in 8-bit processing environments where binary   collation with UTF-16 is required. It is designed and recommended   for use only within products requiring this UTF-16 binary collation   equivalence. It is not intended nor recommended for open interchange.    As a very small percentage of characters in a typical data stream   are expected to be supplementary characters, there is a strong   possibility that CESU-8 data may be misinterpreted as UTF-8.   Therefore, all use of CESU-8 outside closed implementations is   strongly discouraged, such as the emittance of CESU-8 in output   files, markup language or other open transmission forms. Oracle uses this internally because it collates (sorts) in the same order as UTF16, which is the basis of Oracle's internal collation definitions. Rather than change UTF8 for clients Oracle chose to define a new character set called ""AL32UTF8"" which does conform to the UTF-8 standard. (The AL32UTF8 character set can't be used on the server because it would break collation.) Because of that, for the rest of this document we'll use ""AL32UTF8"". If you're using an Oracle version below 9.2 you'll need to use ""UTF8"" until you upgrade. DBD::Oracle and Unicode DBD::Oracle Unicode support has been implemented for Oracle versions 9 or greater, and Perl version 5.6 or greater (though we strongly suggest that you use Perl 5.8.2 or later). You can check which Oracle version your DBD::Oracle was built with by importing the ORA_OCI constant from DBD::Oracle. Fetching Data Any data returned from Oracle to DBD::Oracle in the AL32UTF8 character set will be marked as UTF-8 to ensure correct handling by Perl. For Oracle to return data in the AL32UTF8 character set the NLS_LANG or NLS_NCHAR environment variable must be set as described in the previous section. When fetching NCHAR, NVARCHAR, or NCLOB data from Oracle, DBD::Oracle will set the Perl UTF-8 flag on the returned data if either NLS_NCHAR is AL32UTF8, or NLS_NCHAR is not set and NLS_LANG is AL32UTF8. When fetching other character data from Oracle, DBD::Oracle will set the Perl UTF-8 flag on the returned data if NLS_LANG is AL32UTF8. Sending Data using Placeholders Data bound to a placeholder is assumed to be in the default client character set (specified by NLS_LANG) except for a few special cases. These are listed here with the highest precedence first: If the ora_csid attribute is given to bind_param() then that is passed to Oracle and takes precedence. If the value is a Perl Unicode string (UTF-8) then DBD::Oracle ensures that Oracle uses the Unicode character set, regardless of the NLS_LANG and NLS_NCHAR settings. If the placeholder is for inserting an NCLOB then the client NLS_NCHAR character set is used. (That's useful but inconsistent with the other behaviour so may change. Best to be explicit by using the ora_csform attribute.) If the ora_csform attribute is given to bind_param() then that determines if the value should be assumed to be in the default (NLS_LANG) or NCHAR (NLS_NCHAR) client character set.    use DBD::Oracle qw( SQLCS_IMPLICIT SQLCS_NCHAR );    ...    $sth->bind_param(1, $value, { ora_csform => SQLCS_NCHAR }); or    $dbh->{ora_ph_csform} = SQLCS_NCHAR; # default for all future placeholders Binding with bind_param_array and execute_array is also UTF-8 compatible in the same way. If you attempt to insert UTF-8 data into a non UTF-8 Oracle instance or with an non UTF-8 NCHAR or NVARCHAR the insert will still happen but a error code of 0 will be returned with the following warning;   DBD Oracle Warning: You have mixed utf8 and non-utf8 in an array bind in parameter#1. This may result in corrupt data.   The Query charset id=1, name=US7ASCII The warning will report the parameter number and the NCHAR setting that the query is running. Sending Data using SQL Oracle assumes the SQL statement is in the default client character set (as specified by NLS_LANG). So Unicode strings containing non-ASCII characters should not be used unless the default client character set is AL32UTF8. DBD::Oracle and Other Character Sets and Encodings The only multi-byte Oracle character set supported by DBD::Oracle is ""AL32UTF8"" (and ""UTF8""). Single-byte character sets should work well. OBJECT & COLLECTION DATA TYPES Oracle databases allow for the creation of object oriented like user-defined types. There are two types of objects, Embedded--an object stored in a column of a regular table and REF--an object that uses the REF retrieval mechanism. DBD::Oracle supports only the 'selection' of embedded objects of the following types OBJECT, VARRAY and TABLE in any combination. Support is seamless and recursive, meaning you need only supply a simple SQL statement to get all the values in an embedded object. You can either get the values as an array of scalars or they can be returned into a DBD::Oracle::Object. Array example, given this type and table;   CREATE OR REPLACE TYPE  ""PHONE_NUMBERS"" as varray(10) of varchar(30);    CREATE TABLE  ""CONTACT""      (  ""COMPANYNAME"" VARCHAR2(40),         ""ADDRESS"" VARCHAR2(100),         ""PHONE_NUMBERS""  ""PHONE_NUMBERS""    ) The code to access all the data in the table could be something like this;    my $sth = $dbh->prepare('SELECT * FROM CONTACT');    $sth->execute;    while ( my ($company, $address, $phone) = $sth->fetchrow()) {         print ""Company: "".$company.""\n"";         print ""Address: "".$address.""\n"";         print ""Phone #: "";          foreach my $items (@$phone){            print $items."", "";         }         print ""\n"";    } Note that values in PHONE_NUMBERS are returned as an array reference '@$phone'. As stated before DBD::Oracle will automatically drill into the embedded object and extract all of the data as reference arrays of scalars. The example below has OBJECT type embedded in a TABLE type embedded in an SQL TABLE;    CREATE OR REPLACE TYPE GRADELIST AS TABLE OF NUMBER;     CREATE OR REPLACE TYPE STUDENT AS OBJECT(        NAME          VARCHAR2(60),        SOME_GRADES   GRADELIST);     CREATE OR REPLACE TYPE STUDENTS_T AS TABLE OF STUDENT;     CREATE TABLE GROUPS(        GRP_ID        NUMBER(4),        GRP_NAME      VARCHAR2(10),        STUDENTS      STUDENTS_T)      NESTED TABLE STUDENTS STORE AS GROUP_STUDENTS_TAB       (NESTED TABLE SOME_GRADES STORE AS GROUP_STUDENT_GRADES_TAB); The following code will access all of the embedded data;    $SQL='select grp_id,grp_name,students as my_students_test from groups';    $sth=$dbh->prepare($SQL);    $sth->execute();    while (my ($grp_id,$grp_name,$students)=$sth->fetchrow()){       print ""Group ID#"".$grp_id."" Group Name ="".$grp_name.""\n"";       foreach my $student (@$students){          print ""Name:"".$student->[0].""\n"";          print ""Marks:"";          foreach my $grades (@$student->[1]){             foreach my $marks (@$grades){                print $marks."","";             }          }          print ""\n"";       }       print ""\n"";    } Object example, given this object and table;    CREATE OR REPLACE TYPE Person AS OBJECT (      name    VARCHAR2(20),      age     INTEGER)    ) NOT FINAL;     CREATE TYPE Employee UNDER Person (      salary  NUMERIC(8,2)    );     CREATE TABLE people (id INTEGER, obj Person);     INSERT INTO people VALUES (1, Person('Black', 25));    INSERT INTO people VALUES (2, Employee('Smith', 44, 5000)); The following code will access the data;    $dbh{'ora_objects'} =>1;     $sth = $dbh->prepare(""select * from people order by id"");    $sth->execute();     # object are fetched as instance of DBD::Oracle::Object    my ($id1, $obj1) = $sth->fetchrow();    my ($id2, $obj2) = $sth->fetchrow();     # get full type-name of object    print $obj1->type_name.""44\n"";     # 'TEST.PERSON' is printed    print $obj2->type_name.""4\n"";      # 'TEST.EMPLOYEE' is printed     # get attribute NAME from object    print $obj1->attr('NAME').""3\n"";   # 'Black' is printed    print $obj2->attr('NAME').""3\n"";   # 'Smith' is printed     # get all atributes as hash reference    my $h1 = $obj1->attr;        # returns {'NAME' => 'Black', 'AGE' => 25}    my $h2 = $obj2->attr;        # returns {'NAME' => 'Smith', 'AGE' => 44,                                 #          'SALARY' => 5000 }     # get all attributes (names and values) as array    my @a1 = $obj1->attributes;  # returns ('NAME', 'Black', 'AGE', 25)    my @a2 = $obj2->attributes;  # returns ('NAME', 'Smith', 'AGE', 44,                                 #          'SALARY', 5000 ) So far DBD::Oracle has been tested on a table with 20 embedded Objects, Varrays and Tables nested to 10 levels. Any NULL values found in the embedded object will be returned as 'undef'. OTHER DATA TYPES DBD::Oracle does not explicitly support most Oracle datatypes. It simply asks Oracle to return them as strings and Oracle does so. Mostly. Similarly when binding placeholder values DBD::Oracle binds them as strings and Oracle converts them to the appropriate type, such as DATE, when used. Some of these automatic conversions to and from strings use NLS settings to control the formatting for output and the parsing for input. The most common example is the DATE type. The default NLS format for DATE might be DD-MON-YYYY and so when a DATE type is fetched that's how Oracle will format the date. NLS settings also control the default parsing of strings into DATE values. An error will be generated if the contents of the string don't match the NLS format. If you're dealing in dates which don't match the default NLS format then you can either change the default NLS format or, more commonly, use TO_CHAR(field, ""format"") and TO_DATE(?, ""format"") to explicitly specify formats for converting to and from strings. A slightly more subtle problem can occur with NUMBER types. The default NLS settings might format numbers with a fullstop (""."") to separate thousands and a comma ("","") as the decimal point. Perl will generate warnings and use incorrect values when numbers, returned and formatted as strings in this way by Oracle, are used in a numeric context. You could explicitly convert each numeric value using the TO_CHAR(...) function but that gets tedious very quickly. The best fix is to change the NLS settings. That can be done for an individual connection by doing:   $dbh->do(""ALTER SESSION SET NLS_NUMERIC_CHARACTERS = '.,'""); There are some types, like BOOLEAN, that Oracle does not automatically convert to or from strings (pity). These need to be converted explicitly using SQL or PL/SQL functions. Examples:   # DATE values   my $sth0 = $dbh->prepare( <<SQL_END );   SELECT username, TO_CHAR( created, ? )       FROM all_users       WHERE created >= TO_DATE( ?, ? )    SQL_END   $sth0->execute( 'YYYY-MM-DD HH24:MI:SS', ""2003"", 'YYYY' );    # BOOLEAN values   my $sth2 = $dbh->prepare( <<PLSQL_END );   DECLARE       b0 BOOLEAN;       b1 BOOLEAN;       o0 VARCHAR2(32);       o1 VARCHAR2(32);        FUNCTION to_bool( i VARCHAR2 ) RETURN BOOLEAN IS       BEGIN          IF    i IS NULL          THEN RETURN NULL;          ELSIF i = 'F' OR i = '0' THEN RETURN FALSE;          ELSE                          RETURN TRUE;          END IF;       END;       FUNCTION from_bool( i BOOLEAN ) RETURN NUMBER IS       BEGIN          IF    i IS NULL THEN RETURN NULL;          ELSIF i         THEN RETURN 1;          ELSE                 RETURN 0;          END IF;       END;   BEGIN       -- Converting values to BOOLEAN       b0 := to_bool( :i0 );       b1 := to_bool( :i1 );        -- Converting values from BOOLEAN       :o0 := from_bool( b0 );       :o1 := from_bool( b1 );   END;   PLSQL_END   my ( $i0, $i1, $o0, $o1 ) = ( """", ""Something else"" );   $sth2->bind_param( "":i0"", $i0 );   $sth2->bind_param( "":i1"", $i1 );   $sth2->bind_param_inout( "":o0"", \$o0, 32 );   $sth2->bind_param_inout( "":o1"", \$o1, 32 );   $sth2->execute();   foreach ( $i0, $b0, $o0, $i1, $b1, $o1 ) {       $_ = ""(undef)"" if ! defined $_;   }   print ""$i0 to $o0, $i1 to $o1\n"";   # Result is : ""'' to '(undef)', 'Something else' to '1'"" Support for Insert of XMLType (ORA_XMLTYPE) Inserting large XML data sets into tables with XMLType fields is now supported by DBD::Oracle. The only special requirement is the use of bind_param() with an attribute hash parameter that specifies ora_type as ORA_XMLTYPE. For example with a table like this;    create table books (book_id number, book_xml XMLType); one can insert data using this code    $SQL='insert into books values (1,:p_xml)';    $xml= '<Books>                 <Book id=1>                         <Title>Programming the Perl DBI</Title>                         <Subtitle>The Cheetah Book</Subtitle>                         <Authors>                                 <Author>T. Bunce</Author>                                 <Author>Alligator Descartes</Author>                         </Authors>                  </Book>                 <Book id=10000>...             </Books>';    my $sth =$dbh-> prepare($SQL);    $sth-> bind_param(""p_xml"", $xml, { ora_type => ORA_XMLTYPE });    $sth-> execute(); In the above case we will assume that $xml has 10000 Book nodes and is over 32k in size and is well formed XML. This will also work for XML that is smaller than 32k as well. Attempting to insert malformed XML will cause an error. Binding Cursors Cursors can be returned from PL/SQL blocks, either from stored functions (or procedures with OUT parameters) or from direct OPEN statements, as shown below:   use DBI;   use DBD::Oracle qw(:ora_types);   my $dbh = DBI->connect(...);   my $sth1 = $dbh->prepare(q{       BEGIN OPEN :cursor FOR           SELECT table_name, tablespace_name           FROM user_tables WHERE tablespace_name = :space;       END;   });   $sth1->bind_param("":space"", ""USERS"");   my $sth2;   $sth1->bind_param_inout("":cursor"", \$sth2, 0, { ora_type => ORA_RSET } );   $sth1->execute;   # $sth2 is now a valid DBI statement handle for the cursor   while ( my @row = $sth2->fetchrow_array ) { ... } The only special requirement is the use of bind_param_inout() with an attribute hash parameter that specifies ora_type as ORA_RSET. If you don't do that you'll get an error from the execute() like: ""ORA-06550: line X, column Y: PLS-00306: wrong number or types of arguments in call to ..."". Here's an alternative form using a function that returns a cursor. This example uses the pre-defined weak (or generic) REF CURSOR type SYS_REFCURSOR. This is an Oracle 9 feature.   # Create the function that returns a cursor   $dbh->do(q{       CREATE OR REPLACE FUNCTION sp_ListEmp RETURN SYS_REFCURSOR       AS l_cursor SYS_REFCURSOR;       BEGIN           OPEN l_cursor FOR select ename, empno from emp               ORDER BY ename;           RETURN l_cursor;       END;   });    # Use the function that returns a cursor   my $sth1 = $dbh->prepare(q{BEGIN :cursor := sp_ListEmp; END;});   my $sth2;   $sth1->bind_param_inout("":cursor"", \$sth2, 0, { ora_type => ORA_RSET } );   $sth1->execute;   # $sth2 is now a valid DBI statement handle for the cursor   while ( my @row = $sth2->fetchrow_array ) { ... } A cursor obtained from PL/SQL as above may be passed back to PL/SQL by binding for input, as shown in this example, which explicitly closes a cursor:   my $sth3 = $dbh->prepare(""BEGIN CLOSE :cursor; END;"");   $sth3->bind_param("":cursor"", $sth2, { ora_type => ORA_RSET } );   $sth3->execute; It is not normally necessary to close a cursor explicitly in this way. Oracle will close the cursor automatically at the first client-server interaction after the cursor statement handle is destroyed. An explicit close may be desirable if the reference to the cursor handle from the PL/SQL statement handle delays the destruction of the cursor handle for too long. This reference remains until the PL/SQL handle is re-bound, re-executed or destroyed. NOTE: From DBD::Oracle 1.57 functions or procedures returning SYS_REFCURSORs which have not been opened (are still in the initialised state) will return undef for the cursor statement handle e.g., in the example above if the sp_ListEmp function simply returned l_cursor instead of opening it. This means you can have a function/procedure which can elect to open the cursor or not, Before this change if you called a function/procedure which returned a SYS_REFCURSOR which was not opened DBD::Oracle would error in the execute for a OCIAttrGet on the uninitialised cursor. See the curref.pl script in the Oracle.ex directory in the DBD::Oracle source distribution for a complete working example. Fetching Nested Cursors Oracle supports the use of select list expressions of type REF CURSOR. These may be explicit cursor expressions - CURSOR(SELECT ...), or calls to PL/SQL functions which return REF CURSOR values. The values of these expressions are known as nested cursors. The value returned to a Perl program when a nested cursor is fetched is a statement handle. This statement handle is ready to be fetched from. It should not (indeed, must not) be executed. Oracle imposes a restriction on the order of fetching when nested cursors are used. Suppose $sth1 is a handle for a select statement involving nested cursors, and $sth2 is a nested cursor handle fetched from $sth1. $sth2 can only be fetched from while $sth1 is still active, and the row containing $sth2 is still current in $sth1. Any attempt to fetch another row from $sth1 renders all nested cursor handles previously fetched from $sth1 defunct. Fetching from such a defunct handle results in an error with the message ERROR nested cursor is defunct (parent row is no longer current). This means that the fetchall... or selectall... methods are not useful for queries returning nested cursors. By the time such a method returns, all the nested cursor handles it has fetched will be defunct. It is necessary to use an explicit fetch loop, and to do all the fetching of nested cursors within the loop, as the following example shows:     use DBI;     my $dbh = DBI->connect(...);     my $sth = $dbh->prepare(q{         SELECT dname, CURSOR(             SELECT ename FROM emp                 WHERE emp.deptno = dept.deptno                 ORDER BY ename         ) FROM dept ORDER BY dname     });     $sth->execute;     while ( my ($dname, $nested) = $sth->fetchrow_array ) {         print ""$dname\n"";         while ( my ($ename) = $nested->fetchrow_array ) {             print ""        $ename\n"";         }     } The cursor returned by the function sp_ListEmp defined in the previous section can be fetched as a nested cursor as follows:     my $sth = $dbh->prepare(q{SELECT sp_ListEmp FROM dual});     $sth->execute;     my ($nested) = $sth->fetchrow_array;     while ( my @row = $nested->fetchrow_array ) { ... } Pre-fetching Nested Cursors By default, DBD::Oracle pre-fetches rows in order to reduce the number of round trips to the server. For queries which do not involve nested cursors, the number of pre-fetched rows is controlled by the DBI database handle attribute RowCacheSize (q.v.). In Oracle, server side open cursors are a controlled resource, limited in number, on a per session basis, to the value of the initialization parameter OPEN_CURSORS. Nested cursors count towards this limit. Each nested cursor in the current row counts 1, as does each nested cursor in a pre-fetched row. Defunct nested cursors do not count. An Oracle specific database handle attribute, ora_max_nested_cursors, further controls pre-fetching for queries involving nested cursors. For each statement handle, the total number of nested cursors in pre-fetched rows is limited to the value of this parameter. The default value is 0, which disables pre-fetching for queries involving nested cursors. PL/SQL Examples Most of these PL/SQL examples come from: Eric Bartley <bartley@cc.purdue.edu>.    /*     * PL/SQL to create package with stored procedures invoked by     * Perl examples.  Execute using sqlplus.     *     * Use of ""... OR REPLACE"" prevents failure in the event that the     * package already exists.     */      CREATE OR REPLACE PACKAGE plsql_example     IS       PROCEDURE proc_np;        PROCEDURE proc_in (           err_code IN NUMBER       );        PROCEDURE proc_in_inout (           test_num IN NUMBER,           is_odd IN OUT NUMBER       );        FUNCTION func_np         RETURN VARCHAR2;      END plsql_example;   /      CREATE OR REPLACE PACKAGE BODY plsql_example     IS       PROCEDURE proc_np       IS         whoami VARCHAR2(20) := NULL;       BEGIN         SELECT USER INTO whoami FROM DUAL;       END;        PROCEDURE proc_in (         err_code IN NUMBER       )       IS       BEGIN         RAISE_APPLICATION_ERROR(err_code, 'This is a test.');       END;        PROCEDURE proc_in_inout (         test_num IN NUMBER,         is_odd IN OUT NUMBER       )       IS       BEGIN         is_odd := MOD(test_num, 2);       END;        FUNCTION func_np         RETURN VARCHAR2       IS         ret_val VARCHAR2(20);       BEGIN         SELECT USER INTO ret_val FROM DUAL;         RETURN ret_val;       END;      END plsql_example;   /   /* End PL/SQL for example package creation. */    use DBI;    my($db, $csr, $ret_val);    $db = DBI->connect('dbi:Oracle:database','user','password')         or die ""Unable to connect: $DBI::errstr"";    # So we don't have to check every DBI call we set RaiseError.   # See the DBI docs now if you're not familiar with RaiseError.   $db->{RaiseError} = 1;    # Example 1   Eric Bartley <bartley@cc.purdue.edu>   #   # Calling a PLSQL procedure that takes no parameters. This shows you the   # basic's of what you need to execute a PLSQL procedure. Just wrap your   # procedure call in a BEGIN END; block just like you'd do in SQL*Plus.   #   # p.s. If you've used SQL*Plus's exec command all it does is wrap the   #      command in a BEGIN END; block for you.    $csr = $db->prepare(q{     BEGIN       PLSQL_EXAMPLE.PROC_NP;     END;   });   $csr->execute;     # Example 2   Eric Bartley <bartley@cc.purdue.edu>   #   # Now we call a procedure that has 1 IN parameter. Here we use bind_param   # to bind out parameter to the prepared statement just like you might   # do for an INSERT, UPDATE, DELETE, or SELECT statement.   #   # I could have used positional placeholders (e.g. :1, :2, etc.) or   # ODBC style placeholders (e.g. ?), but I prefer Oracle's named   # placeholders (but few DBI drivers support them so they're not portable).    my $err_code = -20001;    $csr = $db->prepare(q{         BEGIN             PLSQL_EXAMPLE.PROC_IN(:err_code);         END;   });    $csr->bind_param("":err_code"", $err_code);    # PROC_IN will RAISE_APPLICATION_ERROR which will cause the execute to 'fail'.   # Because we set RaiseError, the DBI will croak (die) so we catch that with eval.   eval {     $csr->execute;   };   print 'After proc_in: $@=',""'$@', errstr=$DBI::errstr, ret_val=$ret_val\n"";     # Example 3   Eric Bartley <bartley@cc.purdue.edu>   #   # Building on the last example, I've added 1 IN OUT parameter. We still   # use a placeholders in the call to prepare, the difference is that   # we now call bind_param_inout to bind the value to the place holder.   #   # Note that the third parameter to bind_param_inout is the maximum size   # of the variable. You normally make this slightly larger than necessary.   # But note that the Perl variable will have that much memory assigned to   # it even if the actual value returned is shorter.    my $test_num = 5;   my $is_odd;    $csr = $db->prepare(q{         BEGIN             PLSQL_EXAMPLE.PROC_IN_INOUT(:test_num, :is_odd);         END;   });    # The value of $test_num is _copied_ here   $csr->bind_param("":test_num"", $test_num);    $csr->bind_param_inout("":is_odd"", \$is_odd, 1);    # The execute will automagically update the value of $is_odd   $csr->execute;    print ""$test_num is "", ($is_odd) ? ""odd - ok"" : ""even - error!"", ""\n"";     # Example 4   Eric Bartley <bartley@cc.purdue.edu>   #   # What about the return value of a PLSQL function? Well treat it the same   # as you would a call to a function from SQL*Plus. We add a placeholder   # for the return value and bind it with a call to bind_param_inout so   # we can access it's value after execute.    my $whoami = """";    $csr = $db->prepare(q{         BEGIN             :whoami := PLSQL_EXAMPLE.FUNC_NP;         END;   });    $csr->bind_param_inout("":whoami"", \$whoami, 20);   $csr->execute;   print ""Your database user name is $whoami\n"";    $db->disconnect; You can find more examples in the t/plsql.t file in the DBD::Oracle source directory. Oracle 9.2 appears to have a bug where a variable bound with bind_param_inout() that isn't assigned to by the executed PL/SQL block may contain garbage. See http://www.mail-archive.com/dbi-users@perl.org/msg18835.html Avoid Using ""SQL Call"" Avoid using the ""SQL Call"" statement with DBD:Oracle as you might find that DBD::Oracle will not raise an exception in some case. Specifically if you use ""SQL Call"" to run a procedure all ""No data found"" exceptions will be quietly ignored and returned as null. According to Oracle support this is part of the same mechanism where;   select (select * from dual where 0=1) from dual returns a null value rather than an exception. CONTRIBUTING If you'd like DBD::Oracle to do something new or different the best way to make that happen is to do it yourself and email to dbi-dev@perl.org a patch of the source code (using 'diff' - see below) that shows the changes. How to create a patch using Subversion The DBD::Oracle source code is maintained using Subversion (a replacement for CVS, see http://subversion.tigris.org/). To access the source you'll need to install a Subversion client. Then, to get the source code, do:   svn checkout http://svn.perl.org/modules/dbd-oracle/trunk If it prompts for a username and password use your perl.org account if you have one, else just 'guest' and 'guest'. The source code will be in a new subdirectory called trunk. To keep informed about changes to the source you can send an empty email to dbd-oracle-changes-subscribe@perl.org after which you'll get an email with the change log message and diff of each change checked-in to the source. After making your changes you can generate a patch file, but before you do, make sure your source is still upto date using:   svn update If you get any conflicts reported you'll need to fix them first. Then generate the patch file from within the trunk directory using:   svn diff > foo.patch Read the patch file, as a sanity check, and then email it to dbi-dev@perl.org. How to create a patch without Subversion Unpack a fresh copy of the distribution:   tar xfz DBD-Oracle-1.40.tar.gz Rename the newly created top level directory:   mv DBD-Oracle-1.40 DBD-Oracle-1.40.your_foo Edit the contents of DBD-Oracle-1.40.your_foo/* till it does what you want. Test your changes and then remove all temporary files:   make test && make distclean Go back to the directory you originally unpacked the distribution:   cd .. Unpack another copy of the original distribution you started with:   tar xfz DBD-Oracle-1.40.tar.gz Then create a patch file by performing a recursive diff on the two top level directories:   diff -r -u DBD-Oracle-1.40 DBD-Oracle-1.40.your_foo > DBD-Oracle-1.40.your_foo.patch Speak before you patch For anything non-trivial or possibly controversial it's a good idea to discuss (on dbi-dev@perl.org) the changes you propose before actually spending time working on them. Otherwise you run the risk of them being rejected because they don't fit into some larger plans you may not be aware of. GitHub repository A git mirror of the subversion is also available at `https://github.com/yanick/DBD-Oracle`. WHICH VERSION OF DBD::ORACLE IS FOR ME? From version 1.25 onwards DBD::Oracle only support Oracle clients 9.2 or greater. Support for ProC connections was dropped in 1.29. If you are still stuck with an older version of Oracle or its client you might want to look at the table below.   +---------------------+-----------------------------------------------------+   |                     |                   Oracle Version                    |   +---------------------+----+-------------+---------+------+--------+--------+   | DBD::Oracle Version | <8 | 8.0.3~8.0.6 | 8iR1~R2 | 8iR3 |   9i   | 9.2~11 |   +---------------------+----+-------------+---------+------+--------+--------+   |      0.1~16         | Y  |      Y      |    Y    |  Y   |    Y   |    Y   |   +---------------------+----+-------------+---------+------+--------+--------+   |      1.17           | Y  |      Y      |    Y    |  Y   |    Y   |    Y   |   +---------------------+----+-------------+---------+------+--------+--------+   |      1.18           | N  |      N      |    N    |  Y   |    Y   |    Y   |   +---------------------+----+-------------+---------+------+--------+--------+   |      1.19           | N  |      N      |    N    |  Y   |    Y   |    Y   |   +---------------------+----+-------------+---------+------+--------+--------+   |      1.20           | N  |      N      |    N    |  Y   |    Y   |    Y   |   +---------------------+----+-------------+---------+------+--------+--------+   |      1.21~1.24      | N  |      N      |    N    |  N   |    Y   |    Y   |   +---------------------+----+-------------+---------+------+--------+--------+   |      1.25+          | N  |      N      |    N    |  N   |    N   |    Y   |   +---------------------+----+-------------+---------+------+--------+--------+ As there are dozens of different versions of Oracle's clients this list does not include all of them, just the major released versions of Oracle. Note that one can still connect to any Oracle version with the older DBD::Oracle versions the only problem you will have is that some of the newer OCI and Oracle features available in later DBD::Oracle releases will not be available to you. So to make a short story a little longer: If you are using Oracle 7 or early 8 DB and you can manage to get a 9 client and you can use any DBD::Oracle version. If you have to use an Oracle 7 client then DBD::Oracle 1.17 should work Same thing for 8 up to R2, use 1.17, if you are lucky and have the right patch-set you might go with 1.18. For 8iR3 you can use any of the DBD::Oracle versions up to 1.21. Again this depends on your patch-set, If you run into trouble go with 1.19 After 9.2 you can use any version you want. It seems that the 10g client can only connect to 9 and 11 DBs while the 9 can go back to 7 and even get to 10. I am not sure what the 11g client can connect to. BUGS AND LIMITATIONS There is a known problem with the 11.2g Oracle client and the DBMS_LOB.GETLENGTH() PL/SQL function. See https://rt.cpan.org/Public/Bug/Display.html?id=69350 for the details. SEE ALSO DBI http://search.cpan.org/~timb/DBD-Oracle/MANIFEST for all files in the DBD::Oracle source distribution including the examples in the Oracle.ex directory DBD::Oracle Tutorial http://www.pythian.com/blogs/wp-content/uploads/introduction-dbd-oracle.html Oracle Instant Client http://www.oracle.com/technology/tech/oci/instantclient/index.html Oracle on Linux http://www.ixora.com.au/ Free Oracle Tools and Links ora_explain supplied and installed with DBD::Oracle. http://www.orafaq.com/ http://vonnieda.org/oracletool/ Commercial Oracle Tools and Links Assorted tools and references for general information. No recommendation implied. http://www.platinum.com http://www.SoftTreeTech.com Also PL/Vision from RevealNet and Steven Feuerstein, and ""Q"" from Savant Corporation. AUTHORS DBI by Tim Bunce http://www.tim.bunce.name. The original DBD::Oracle was by Tim Bunce. Maintained as of release 1.17 (February 2006) by John Scoles, then Yanick Champoux, under the auspice of the Pythian Group (http://www.pythian.com). ACKNOWLEDGEMENTS A great many people have helped with DBD::Oracle over the 17 years between 1994 and 2011. Far too many to name, but we thank them all. Many are named in the Changes file. COPYRIGHT The DBD::Oracle module is Copyright (c) 1994-2006 Tim Bunce. Ireland. The DBD::Oracle module is Copyright (c) 2006-2011 John Scoles (The Pythian Group). Canada. The DBD::Oracle module is Copyright (c) 2011 John Scoles. Canada. The DBD::Oracle module is free open source software; you can redistribute it and/or modify it under the same terms as Perl 5. AUTHORS Tim Bunce <timb@cpan.org> John Scoles <byterock@cpan.org> Yanick Champoux <yanick@cpan.org> Martin J. Evans <mjevans@cpan.org> COPYRIGHT AND LICENSE This software is copyright (c) 1994 by Tim Bunce. This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself. × Module Install Instructions To install DBD::Oracle, simply copy and paste either of the commands in to your terminal cpanm                      cpanm DBD::Oracle CPAN shell                      perl -MCPAN -e shell                     install DBD::Oracle For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Oracle database driver for the DBI module"	"true"
"Relational Databases"	"DBD::Pg"	"https://metacpan.org/pod/DBD::Pg"	"PostgreSQL driver for DBI."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DBD::Pg - PostgreSQL database driver for the DBI module - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Greg Sabino Mullane  /  3.5.3 (TURNSTEP on 2015-10-01) 3.5.2 (TURNSTEP on 2015-09-29) 3.5.1 (TURNSTEP on 2015-02-17) 3.5.0_2 DEV (TURNSTEP on 2015-02-16) 3.5.0_1 DEV (TURNSTEP on 2015-02-07) 3.5.0 (TURNSTEP on 2015-01-06) 3.4.2 (TURNSTEP on 2014-09-25) 3.4.1 (TURNSTEP on 2014-08-20) 3.4.0 (TURNSTEP on 2014-08-16) 3.3.0 (TURNSTEP on 2014-05-31) 3.2.1 (TURNSTEP on 2014-05-20) 3.2.0 (TURNSTEP on 2014-05-15) 3.1.1 (TURNSTEP on 2014-04-06) 3.1.0 (TURNSTEP on 2014-04-05) 3.0.0 (TURNSTEP on 2014-02-04) 2.20.1_6 DEV (TURNSTEP on 2014-01-11) 2.19.3 (TURNSTEP on 2012-08-21) 1.32 (RUDY on 2004-02-25) 1.32002 DEV (RUDY on 2004-02-19) 1.32001 DEV (RUDY on 2004-02-13) 1.31 (RUDY on 2003-11-18) 1.31009 DEV (RUDY on 2003-11-14) 1.31008 DEV (RUDY on 2003-11-10) 1.31007 DEV (RUDY on 2003-10-29) 1.31005 DEV (RUDY on 2003-09-10) 1.13 (JBAKER on 2002-04-27) 1.12 (JBAKER on 2002-04-10) 1.11 (JBAKER on 2002-03-07) 1.10 (JBAKER on 2002-03-06) 1.01 (MERGL on 2001-06-27) 1.00 (MERGL on 2001-05-27) 0.99 (MERGL on 2001-05-24) 0.95 (MERGL on 2000-07-10) 0.94 (MERGL on 2000-07-07) 0.93 (MERGL on 1999-09-29) 0.92 (MERGL on 1999-06-16) 0.91 (MERGL on 1999-02-14) 0.90 (MERGL on 1999-01-16) 0.3 (MERGL on 1997-04-28) 2.20.1_4 DEV (TURNSTEP on 2013-11-27) 2.20.1_3 DEV (TURNSTEP on 2013-11-26) 2.20.1_2 DEV (TURNSTEP on 2013-11-21) 2.20.1_1 DEV (TURNSTEP on 2013-11-16) 2.19.2 (TURNSTEP on 2012-03-12) 2.19.1 (TURNSTEP on 2012-03-11) 2.19.0 (TURNSTEP on 2012-03-09) 2.99.9_2 DEV (TURNSTEP on 2011-06-20) 2.99.9_1 DEV (TURNSTEP on 2011-06-19) 2.18.1 (TURNSTEP on 2011-05-09) 2.18.0 (TURNSTEP on 2011-03-29) 2.17.2_1 DEV (TURNSTEP on 2011-03-27) 2.17.2 (TURNSTEP on 2010-11-21) 2.17.1 (TURNSTEP on 2010-04-08) 2.17.0 (TURNSTEP on 2010-04-06) 2.16.1 (TURNSTEP on 2010-01-20) 2.16.0 (TURNSTEP on 2009-12-17) 2.8.8 (TURNSTEP on 2009-12-17) 2.15.1 (TURNSTEP on 2009-08-07) 2.15.0 (TURNSTEP on 2009-08-04) 2.14.1_1 DEV (TURNSTEP on 2009-08-04) 2.14.1 (TURNSTEP on 2009-07-28) 2.14.0 (TURNSTEP on 2009-07-27) 2.13.1_7 DEV (TURNSTEP on 2009-07-21) 2.13.1_6 DEV (TURNSTEP on 2009-07-21) 2.13.1_5 DEV (TURNSTEP on 2009-07-20) 2.13.1_4 DEV (TURNSTEP on 2009-07-17) 2.13.1_3 DEV (TURNSTEP on 2009-07-15) 2.13.1_2 DEV (TURNSTEP on 2009-07-14) 2.13.1_1 DEV (TURNSTEP on 2009-07-13) 2.13.1 (TURNSTEP on 2009-04-23) 2.13.0 (TURNSTEP on 2009-04-14) 2.12.0 (TURNSTEP on 2009-03-28) 2.11.8_2 DEV (TURNSTEP on 2009-03-26) 2.11.8_1 DEV (TURNSTEP on 2009-03-24) 2.11.8 (TURNSTEP on 2008-12-28) 2.11.7 (TURNSTEP on 2008-12-13) 2.11.6 (TURNSTEP on 2008-11-30) 2.11.5 (TURNSTEP on 2008-11-24) 2.11.4 (TURNSTEP on 2008-11-12) 2.11.3 (TURNSTEP on 2008-11-03) 2.11.2 (TURNSTEP on 2008-10-16) 2.11.1 (TURNSTEP on 2008-10-14) 2.11.0 (TURNSTEP on 2008-10-13) 2.10.7 (TURNSTEP on 2008-09-23) 2.10.6 (TURNSTEP on 2008-09-19) 2.10.5 (TURNSTEP on 2008-09-16) 2.10.4 (TURNSTEP on 2008-09-16) 2.10.3 (TURNSTEP on 2008-09-01) 2.10.2 (TURNSTEP on 2008-09-01) 2.10.1 (TURNSTEP on 2008-08-31) 2.10.0 (TURNSTEP on 2008-08-27) 2.9.2 (TURNSTEP on 2008-08-18) 2.9.1 (TURNSTEP on 2008-08-18) 2.9.0 (TURNSTEP on 2008-08-03) 2.8.7 (TURNSTEP on 2008-07-24) 2.8.6 (TURNSTEP on 2008-07-21) 2.8.5 (TURNSTEP on 2008-07-13) 2.8.4 (TURNSTEP on 2008-07-10) 2.8.3 (TURNSTEP on 2008-07-07) 2.8.2 (TURNSTEP on 2008-06-30) 2.8.1 (TURNSTEP on 2008-06-12) 2.8.0 (TURNSTEP on 2008-06-02) 2.7.2 (TURNSTEP on 2008-05-14) 2.7.1 (TURNSTEP on 2008-05-11) 2.7.0 (TURNSTEP on 2008-05-10) 2.6.6 (TURNSTEP on 2008-05-07) 2.6.5 (TURNSTEP on 2008-05-07) 2.6.4 (TURNSTEP on 2008-05-02) 2.6.3 (TURNSTEP on 2008-05-01) 2.6.2 (TURNSTEP on 2008-04-30) 2.6.1_1 DEV (TURNSTEP on 2008-04-28) 2.6.1 (TURNSTEP on 2008-04-22) 2.6.0 (TURNSTEP on 2008-04-16) 2.5.2_1 DEV (TURNSTEP on 2008-04-14) 2.5.1 (TURNSTEP on 2008-04-07) 2.5.0 (TURNSTEP on 2008-03-23) 2.4.0 (TURNSTEP on 2008-03-21) 2.3.0 (TURNSTEP on 2008-03-19) 2.2.2 (TURNSTEP on 2008-03-03) 2.2.1 (TURNSTEP on 2008-03-02) 2.2.0 (TURNSTEP on 2008-02-28) 2.1.3_2 DEV (TURNSTEP on 2008-02-26) 2.1.3_1 DEV (TURNSTEP on 2008-02-26) 2.1.3 (TURNSTEP on 2008-02-21) 2.1.2 (TURNSTEP on 2008-02-20) 2.1.1_1 DEV (TURNSTEP on 2008-02-19) 2.1.1 (TURNSTEP on 2008-02-19) 2.1.0 (TURNSTEP on 2008-02-19) 2.0.1_3 DEV (TURNSTEP on 2008-02-18) 2.0.1_2 DEV (TURNSTEP on 2008-02-18) 2.0.1_1 DEV (TURNSTEP on 2008-02-17) 2.0.0_2 DEV (TURNSTEP on 2008-02-17) 2.0.0_1 DEV (TURNSTEP on 2008-02-17) 2.0.0 (TURNSTEP on 2008-02-10) 2.0.0_9 DEV (TURNSTEP on 2008-01-28) 2.0.0_8 DEV (TURNSTEP on 2008-01-28) 2.0.0_7 DEV (TURNSTEP on 2008-01-26) 2.0.0_6 DEV (TURNSTEP on 2008-01-23) 2.0.0_5 DEV (DBDPG on 2008-01-19) 2.0.0_4 DEV (DBDPG on 2008-01-18) 2.0.0_3 DEV (DBDPG on 2008-01-18) 2.0.0_2 DEV (DBDPG on 2008-01-17) 2.0.0 DEV (DBDPG on 2008-01-17) 1.49 (DBDPG on 2006-05-05) 1.48 (DBDPG on 2006-04-05) 1.47 (DBDPG on 2006-03-19) 1.46 (DBDPG on 2006-03-17) 1.45 (DBDPG on 2006-02-26) 1.44 (DBDPG on 2006-02-22) 1.43_2 DEV (DBDPG on 2006-02-13) 1.43_1 DEV (DBDPG on 2005-09-13) 1.43 (DBDPG on 2005-06-23) 1.42_1 DEV (DBDPG on 2005-06-22) 1.42 (DBDPG on 2005-05-21) 1.41_2 DEV (DBDPG on 2005-05-19) 1.41_1 DEV (DBDPG on 2005-05-07) 1.41 (DBDPG on 2005-04-06) 1.40_04 DEV (DBDPG on 2005-04-05) 1.40_03 DEV (DBDPG on 2005-04-01) 1.40_2 DEV (DBDPG on 2005-03-31) 1.40_1 DEV (DBDPG on 2005-03-31) 1.40 (DBDPG on 2005-02-22) 1.39_02 DEV (DBDPG on 2005-02-06) 1.22 (DWHEELER on 2003-03-27) 1.21 (DWHEELER on 2003-01-13) 1.20 (DWHEELER on 2002-11-27) 0.98 (MERGL on 2001-04-25) 0.97 (MERGL on 2001-04-20) 0.96 (MERGL on 2001-04-09) 0.89 (MERGL on 1998-11-05) 0.73 (MERGL on 1998-06-03) 0.72 (MERGL on 1998-04-20) 0.69 (MERGL on 1998-03-06) 0.68 (MERGL on 1998-03-03) 0.67 (MERGL on 1998-02-21) 0.66 (MERGL on 1998-02-19) 0.65 (MERGL on 1998-02-15) 0.64 (MERGL on 1998-02-02) 0.63 (MERGL on 1997-10-05) 0.62 (MERGL on 1997-08-26) 0.61 (MERGL on 1997-08-23) 0.52 (MERGL on 1997-08-17) 0.51 (MERGL on 1997-08-16) 0.5 (MERGL on 1997-08-10) 0.1 (MERGL on 1997-03-13) DBD-Pg-3.5.3 54 ++ 54 ++  / DBD::Pg 01 Oct 2015 14:06:04 GMT Module version: v3.5.3 Source (raw) Browse (raw) Changes Homepage Clone repository Issues (44) 4 (12 reviews) Testers (2101 / 5 / 0) Kwalitee License: perl_5 Questions? Chat with us! Activity 24 month Tools MOBI | EPUB Download (250.56Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 3.5.2 (TURNSTEP on 2015-09-29) 3.5.1 (TURNSTEP on 2015-02-17) 3.5.0_2 DEV (TURNSTEP on 2015-02-16) 3.5.0_1 DEV (TURNSTEP on 2015-02-07) 3.5.0 (TURNSTEP on 2015-01-06) 3.4.2 (TURNSTEP on 2014-09-25) 3.4.1 (TURNSTEP on 2014-08-20) 3.4.0 (TURNSTEP on 2014-08-16) 3.3.0 (TURNSTEP on 2014-05-31) 3.2.1 (TURNSTEP on 2014-05-20) 3.2.0 (TURNSTEP on 2014-05-15) 3.1.1 (TURNSTEP on 2014-04-06) 3.1.0 (TURNSTEP on 2014-04-05) 3.0.0 (TURNSTEP on 2014-02-04) 2.20.1_6 DEV (TURNSTEP on 2014-01-11) 2.19.3 (TURNSTEP on 2012-08-21) 1.32 (RUDY on 2004-02-25) 1.32002 DEV (RUDY on 2004-02-19) 1.32001 DEV (RUDY on 2004-02-13) 1.31 (RUDY on 2003-11-18) 1.31009 DEV (RUDY on 2003-11-14) 1.31008 DEV (RUDY on 2003-11-10) 1.31007 DEV (RUDY on 2003-10-29) 1.31005 DEV (RUDY on 2003-09-10) 1.13 (JBAKER on 2002-04-27) 1.12 (JBAKER on 2002-04-10) 1.11 (JBAKER on 2002-03-07) 1.10 (JBAKER on 2002-03-06) 1.01 (MERGL on 2001-06-27) 1.00 (MERGL on 2001-05-27) 0.99 (MERGL on 2001-05-24) 0.95 (MERGL on 2000-07-10) 0.94 (MERGL on 2000-07-07) 0.93 (MERGL on 1999-09-29) 0.92 (MERGL on 1999-06-16) 0.91 (MERGL on 1999-02-14) 0.90 (MERGL on 1999-01-16) 0.3 (MERGL on 1997-04-28) 2.20.1_4 DEV (TURNSTEP on 2013-11-27) 2.20.1_3 DEV (TURNSTEP on 2013-11-26) 2.20.1_2 DEV (TURNSTEP on 2013-11-21) 2.20.1_1 DEV (TURNSTEP on 2013-11-16) 2.19.2 (TURNSTEP on 2012-03-12) 2.19.1 (TURNSTEP on 2012-03-11) 2.19.0 (TURNSTEP on 2012-03-09) 2.99.9_2 DEV (TURNSTEP on 2011-06-20) 2.99.9_1 DEV (TURNSTEP on 2011-06-19) 2.18.1 (TURNSTEP on 2011-05-09) 2.18.0 (TURNSTEP on 2011-03-29) 2.17.2_1 DEV (TURNSTEP on 2011-03-27) 2.17.2 (TURNSTEP on 2010-11-21) 2.17.1 (TURNSTEP on 2010-04-08) 2.17.0 (TURNSTEP on 2010-04-06) 2.16.1 (TURNSTEP on 2010-01-20) 2.16.0 (TURNSTEP on 2009-12-17) 2.8.8 (TURNSTEP on 2009-12-17) 2.15.1 (TURNSTEP on 2009-08-07) 2.15.0 (TURNSTEP on 2009-08-04) 2.14.1_1 DEV (TURNSTEP on 2009-08-04) 2.14.1 (TURNSTEP on 2009-07-28) 2.14.0 (TURNSTEP on 2009-07-27) 2.13.1_7 DEV (TURNSTEP on 2009-07-21) 2.13.1_6 DEV (TURNSTEP on 2009-07-21) 2.13.1_5 DEV (TURNSTEP on 2009-07-20) 2.13.1_4 DEV (TURNSTEP on 2009-07-17) 2.13.1_3 DEV (TURNSTEP on 2009-07-15) 2.13.1_2 DEV (TURNSTEP on 2009-07-14) 2.13.1_1 DEV (TURNSTEP on 2009-07-13) 2.13.1 (TURNSTEP on 2009-04-23) 2.13.0 (TURNSTEP on 2009-04-14) 2.12.0 (TURNSTEP on 2009-03-28) 2.11.8_2 DEV (TURNSTEP on 2009-03-26) 2.11.8_1 DEV (TURNSTEP on 2009-03-24) 2.11.8 (TURNSTEP on 2008-12-28) 2.11.7 (TURNSTEP on 2008-12-13) 2.11.6 (TURNSTEP on 2008-11-30) 2.11.5 (TURNSTEP on 2008-11-24) 2.11.4 (TURNSTEP on 2008-11-12) 2.11.3 (TURNSTEP on 2008-11-03) 2.11.2 (TURNSTEP on 2008-10-16) 2.11.1 (TURNSTEP on 2008-10-14) 2.11.0 (TURNSTEP on 2008-10-13) 2.10.7 (TURNSTEP on 2008-09-23) 2.10.6 (TURNSTEP on 2008-09-19) 2.10.5 (TURNSTEP on 2008-09-16) 2.10.4 (TURNSTEP on 2008-09-16) 2.10.3 (TURNSTEP on 2008-09-01) 2.10.2 (TURNSTEP on 2008-09-01) 2.10.1 (TURNSTEP on 2008-08-31) 2.10.0 (TURNSTEP on 2008-08-27) 2.9.2 (TURNSTEP on 2008-08-18) 2.9.1 (TURNSTEP on 2008-08-18) 2.9.0 (TURNSTEP on 2008-08-03) 2.8.7 (TURNSTEP on 2008-07-24) 2.8.6 (TURNSTEP on 2008-07-21) 2.8.5 (TURNSTEP on 2008-07-13) 2.8.4 (TURNSTEP on 2008-07-10) 2.8.3 (TURNSTEP on 2008-07-07) 2.8.2 (TURNSTEP on 2008-06-30) 2.8.1 (TURNSTEP on 2008-06-12) 2.8.0 (TURNSTEP on 2008-06-02) 2.7.2 (TURNSTEP on 2008-05-14) 2.7.1 (TURNSTEP on 2008-05-11) 2.7.0 (TURNSTEP on 2008-05-10) 2.6.6 (TURNSTEP on 2008-05-07) 2.6.5 (TURNSTEP on 2008-05-07) 2.6.4 (TURNSTEP on 2008-05-02) 2.6.3 (TURNSTEP on 2008-05-01) 2.6.2 (TURNSTEP on 2008-04-30) 2.6.1_1 DEV (TURNSTEP on 2008-04-28) 2.6.1 (TURNSTEP on 2008-04-22) 2.6.0 (TURNSTEP on 2008-04-16) 2.5.2_1 DEV (TURNSTEP on 2008-04-14) 2.5.1 (TURNSTEP on 2008-04-07) 2.5.0 (TURNSTEP on 2008-03-23) 2.4.0 (TURNSTEP on 2008-03-21) 2.3.0 (TURNSTEP on 2008-03-19) 2.2.2 (TURNSTEP on 2008-03-03) 2.2.1 (TURNSTEP on 2008-03-02) 2.2.0 (TURNSTEP on 2008-02-28) 2.1.3_2 DEV (TURNSTEP on 2008-02-26) 2.1.3_1 DEV (TURNSTEP on 2008-02-26) 2.1.3 (TURNSTEP on 2008-02-21) 2.1.2 (TURNSTEP on 2008-02-20) 2.1.1_1 DEV (TURNSTEP on 2008-02-19) 2.1.1 (TURNSTEP on 2008-02-19) 2.1.0 (TURNSTEP on 2008-02-19) 2.0.1_3 DEV (TURNSTEP on 2008-02-18) 2.0.1_2 DEV (TURNSTEP on 2008-02-18) 2.0.1_1 DEV (TURNSTEP on 2008-02-17) 2.0.0_2 DEV (TURNSTEP on 2008-02-17) 2.0.0_1 DEV (TURNSTEP on 2008-02-17) 2.0.0 (TURNSTEP on 2008-02-10) 2.0.0_9 DEV (TURNSTEP on 2008-01-28) 2.0.0_8 DEV (TURNSTEP on 2008-01-28) 2.0.0_7 DEV (TURNSTEP on 2008-01-26) 2.0.0_6 DEV (TURNSTEP on 2008-01-23) 2.0.0_5 DEV (DBDPG on 2008-01-19) 2.0.0_4 DEV (DBDPG on 2008-01-18) 2.0.0_3 DEV (DBDPG on 2008-01-18) 2.0.0_2 DEV (DBDPG on 2008-01-17) 2.0.0 DEV (DBDPG on 2008-01-17) 1.49 (DBDPG on 2006-05-05) 1.48 (DBDPG on 2006-04-05) 1.47 (DBDPG on 2006-03-19) 1.46 (DBDPG on 2006-03-17) 1.45 (DBDPG on 2006-02-26) 1.44 (DBDPG on 2006-02-22) 1.43_2 DEV (DBDPG on 2006-02-13) 1.43_1 DEV (DBDPG on 2005-09-13) 1.43 (DBDPG on 2005-06-23) 1.42_1 DEV (DBDPG on 2005-06-22) 1.42 (DBDPG on 2005-05-21) 1.41_2 DEV (DBDPG on 2005-05-19) 1.41_1 DEV (DBDPG on 2005-05-07) 1.41 (DBDPG on 2005-04-06) 1.40_04 DEV (DBDPG on 2005-04-05) 1.40_03 DEV (DBDPG on 2005-04-01) 1.40_2 DEV (DBDPG on 2005-03-31) 1.40_1 DEV (DBDPG on 2005-03-31) 1.40 (DBDPG on 2005-02-22) 1.39_02 DEV (DBDPG on 2005-02-06) 1.22 (DWHEELER on 2003-03-27) 1.21 (DWHEELER on 2003-01-13) 1.20 (DWHEELER on 2002-11-27) 0.98 (MERGL on 2001-04-25) 0.97 (MERGL on 2001-04-20) 0.96 (MERGL on 2001-04-09) 0.89 (MERGL on 1998-11-05) 0.73 (MERGL on 1998-06-03) 0.72 (MERGL on 1998-04-20) 0.69 (MERGL on 1998-03-06) 0.68 (MERGL on 1998-03-03) 0.67 (MERGL on 1998-02-21) 0.66 (MERGL on 1998-02-19) 0.65 (MERGL on 1998-02-15) 0.64 (MERGL on 1998-02-02) 0.63 (MERGL on 1997-10-05) 0.62 (MERGL on 1997-08-26) 0.61 (MERGL on 1997-08-23) 0.52 (MERGL on 1997-08-17) 0.51 (MERGL on 1997-08-16) 0.5 (MERGL on 1997-08-10) 0.1 (MERGL on 1997-03-13) Diff with version 3.5.2 (TURNSTEP on 2015-09-29) 3.5.1 (TURNSTEP on 2015-02-17) 3.5.0_2 DEV (TURNSTEP on 2015-02-16) 3.5.0_1 DEV (TURNSTEP on 2015-02-07) 3.5.0 (TURNSTEP on 2015-01-06) 3.4.2 (TURNSTEP on 2014-09-25) 3.4.1 (TURNSTEP on 2014-08-20) 3.4.0 (TURNSTEP on 2014-08-16) 3.3.0 (TURNSTEP on 2014-05-31) 3.2.1 (TURNSTEP on 2014-05-20) 3.2.0 (TURNSTEP on 2014-05-15) 3.1.1 (TURNSTEP on 2014-04-06) 3.1.0 (TURNSTEP on 2014-04-05) 3.0.0 (TURNSTEP on 2014-02-04) 2.20.1_6 DEV (TURNSTEP on 2014-01-11) 2.19.3 (TURNSTEP on 2012-08-21) 1.32 (RUDY on 2004-02-25) 1.32002 DEV (RUDY on 2004-02-19) 1.32001 DEV (RUDY on 2004-02-13) 1.31 (RUDY on 2003-11-18) 1.31009 DEV (RUDY on 2003-11-14) 1.31008 DEV (RUDY on 2003-11-10) 1.31007 DEV (RUDY on 2003-10-29) 1.31005 DEV (RUDY on 2003-09-10) 1.13 (JBAKER on 2002-04-27) 1.12 (JBAKER on 2002-04-10) 1.11 (JBAKER on 2002-03-07) 1.10 (JBAKER on 2002-03-06) 1.01 (MERGL on 2001-06-27) 1.00 (MERGL on 2001-05-27) 0.99 (MERGL on 2001-05-24) 0.95 (MERGL on 2000-07-10) 0.94 (MERGL on 2000-07-07) 0.93 (MERGL on 1999-09-29) 0.92 (MERGL on 1999-06-16) 0.91 (MERGL on 1999-02-14) 0.90 (MERGL on 1999-01-16) 0.3 (MERGL on 1997-04-28) 2.20.1_4 DEV (TURNSTEP on 2013-11-27) 2.20.1_3 DEV (TURNSTEP on 2013-11-26) 2.20.1_2 DEV (TURNSTEP on 2013-11-21) 2.20.1_1 DEV (TURNSTEP on 2013-11-16) 2.19.2 (TURNSTEP on 2012-03-12) 2.19.1 (TURNSTEP on 2012-03-11) 2.19.0 (TURNSTEP on 2012-03-09) 2.99.9_2 DEV (TURNSTEP on 2011-06-20) 2.99.9_1 DEV (TURNSTEP on 2011-06-19) 2.18.1 (TURNSTEP on 2011-05-09) 2.18.0 (TURNSTEP on 2011-03-29) 2.17.2_1 DEV (TURNSTEP on 2011-03-27) 2.17.2 (TURNSTEP on 2010-11-21) 2.17.1 (TURNSTEP on 2010-04-08) 2.17.0 (TURNSTEP on 2010-04-06) 2.16.1 (TURNSTEP on 2010-01-20) 2.16.0 (TURNSTEP on 2009-12-17) 2.8.8 (TURNSTEP on 2009-12-17) 2.15.1 (TURNSTEP on 2009-08-07) 2.15.0 (TURNSTEP on 2009-08-04) 2.14.1_1 DEV (TURNSTEP on 2009-08-04) 2.14.1 (TURNSTEP on 2009-07-28) 2.14.0 (TURNSTEP on 2009-07-27) 2.13.1_7 DEV (TURNSTEP on 2009-07-21) 2.13.1_6 DEV (TURNSTEP on 2009-07-21) 2.13.1_5 DEV (TURNSTEP on 2009-07-20) 2.13.1_4 DEV (TURNSTEP on 2009-07-17) 2.13.1_3 DEV (TURNSTEP on 2009-07-15) 2.13.1_2 DEV (TURNSTEP on 2009-07-14) 2.13.1_1 DEV (TURNSTEP on 2009-07-13) 2.13.1 (TURNSTEP on 2009-04-23) 2.13.0 (TURNSTEP on 2009-04-14) 2.12.0 (TURNSTEP on 2009-03-28) 2.11.8_2 DEV (TURNSTEP on 2009-03-26) 2.11.8_1 DEV (TURNSTEP on 2009-03-24) 2.11.8 (TURNSTEP on 2008-12-28) 2.11.7 (TURNSTEP on 2008-12-13) 2.11.6 (TURNSTEP on 2008-11-30) 2.11.5 (TURNSTEP on 2008-11-24) 2.11.4 (TURNSTEP on 2008-11-12) 2.11.3 (TURNSTEP on 2008-11-03) 2.11.2 (TURNSTEP on 2008-10-16) 2.11.1 (TURNSTEP on 2008-10-14) 2.11.0 (TURNSTEP on 2008-10-13) 2.10.7 (TURNSTEP on 2008-09-23) 2.10.6 (TURNSTEP on 2008-09-19) 2.10.5 (TURNSTEP on 2008-09-16) 2.10.4 (TURNSTEP on 2008-09-16) 2.10.3 (TURNSTEP on 2008-09-01) 2.10.2 (TURNSTEP on 2008-09-01) 2.10.1 (TURNSTEP on 2008-08-31) 2.10.0 (TURNSTEP on 2008-08-27) 2.9.2 (TURNSTEP on 2008-08-18) 2.9.1 (TURNSTEP on 2008-08-18) 2.9.0 (TURNSTEP on 2008-08-03) 2.8.7 (TURNSTEP on 2008-07-24) 2.8.6 (TURNSTEP on 2008-07-21) 2.8.5 (TURNSTEP on 2008-07-13) 2.8.4 (TURNSTEP on 2008-07-10) 2.8.3 (TURNSTEP on 2008-07-07) 2.8.2 (TURNSTEP on 2008-06-30) 2.8.1 (TURNSTEP on 2008-06-12) 2.8.0 (TURNSTEP on 2008-06-02) 2.7.2 (TURNSTEP on 2008-05-14) 2.7.1 (TURNSTEP on 2008-05-11) 2.7.0 (TURNSTEP on 2008-05-10) 2.6.6 (TURNSTEP on 2008-05-07) 2.6.5 (TURNSTEP on 2008-05-07) 2.6.4 (TURNSTEP on 2008-05-02) 2.6.3 (TURNSTEP on 2008-05-01) 2.6.2 (TURNSTEP on 2008-04-30) 2.6.1_1 DEV (TURNSTEP on 2008-04-28) 2.6.1 (TURNSTEP on 2008-04-22) 2.6.0 (TURNSTEP on 2008-04-16) 2.5.2_1 DEV (TURNSTEP on 2008-04-14) 2.5.1 (TURNSTEP on 2008-04-07) 2.5.0 (TURNSTEP on 2008-03-23) 2.4.0 (TURNSTEP on 2008-03-21) 2.3.0 (TURNSTEP on 2008-03-19) 2.2.2 (TURNSTEP on 2008-03-03) 2.2.1 (TURNSTEP on 2008-03-02) 2.2.0 (TURNSTEP on 2008-02-28) 2.1.3_2 DEV (TURNSTEP on 2008-02-26) 2.1.3_1 DEV (TURNSTEP on 2008-02-26) 2.1.3 (TURNSTEP on 2008-02-21) 2.1.2 (TURNSTEP on 2008-02-20) 2.1.1_1 DEV (TURNSTEP on 2008-02-19) 2.1.1 (TURNSTEP on 2008-02-19) 2.1.0 (TURNSTEP on 2008-02-19) 2.0.1_3 DEV (TURNSTEP on 2008-02-18) 2.0.1_2 DEV (TURNSTEP on 2008-02-18) 2.0.1_1 DEV (TURNSTEP on 2008-02-17) 2.0.0_2 DEV (TURNSTEP on 2008-02-17) 2.0.0_1 DEV (TURNSTEP on 2008-02-17) 2.0.0 (TURNSTEP on 2008-02-10) 2.0.0_9 DEV (TURNSTEP on 2008-01-28) 2.0.0_8 DEV (TURNSTEP on 2008-01-28) 2.0.0_7 DEV (TURNSTEP on 2008-01-26) 2.0.0_6 DEV (TURNSTEP on 2008-01-23) 2.0.0_5 DEV (DBDPG on 2008-01-19) 2.0.0_4 DEV (DBDPG on 2008-01-18) 2.0.0_3 DEV (DBDPG on 2008-01-18) 2.0.0_2 DEV (DBDPG on 2008-01-17) 2.0.0 DEV (DBDPG on 2008-01-17) 1.49 (DBDPG on 2006-05-05) 1.48 (DBDPG on 2006-04-05) 1.47 (DBDPG on 2006-03-19) 1.46 (DBDPG on 2006-03-17) 1.45 (DBDPG on 2006-02-26) 1.44 (DBDPG on 2006-02-22) 1.43_2 DEV (DBDPG on 2006-02-13) 1.43_1 DEV (DBDPG on 2005-09-13) 1.43 (DBDPG on 2005-06-23) 1.42_1 DEV (DBDPG on 2005-06-22) 1.42 (DBDPG on 2005-05-21) 1.41_2 DEV (DBDPG on 2005-05-19) 1.41_1 DEV (DBDPG on 2005-05-07) 1.41 (DBDPG on 2005-04-06) 1.40_04 DEV (DBDPG on 2005-04-05) 1.40_03 DEV (DBDPG on 2005-04-01) 1.40_2 DEV (DBDPG on 2005-03-31) 1.40_1 DEV (DBDPG on 2005-03-31) 1.40 (DBDPG on 2005-02-22) 1.39_02 DEV (DBDPG on 2005-02-06) 1.22 (DWHEELER on 2003-03-27) 1.21 (DWHEELER on 2003-01-13) 1.20 (DWHEELER on 2002-11-27) 0.98 (MERGL on 2001-04-25) 0.97 (MERGL on 2001-04-20) 0.96 (MERGL on 2001-04-09) 0.89 (MERGL on 1998-11-05) 0.73 (MERGL on 1998-06-03) 0.72 (MERGL on 1998-04-20) 0.69 (MERGL on 1998-03-06) 0.68 (MERGL on 1998-03-03) 0.67 (MERGL on 1998-02-21) 0.66 (MERGL on 1998-02-19) 0.65 (MERGL on 1998-02-15) 0.64 (MERGL on 1998-02-02) 0.63 (MERGL on 1997-10-05) 0.62 (MERGL on 1997-08-26) 0.61 (MERGL on 1997-08-23) 0.52 (MERGL on 1997-08-17) 0.51 (MERGL on 1997-08-16) 0.5 (MERGL on 1997-08-10) 0.1 (MERGL on 1997-03-13) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 32 PAUSE users 22 non-PAUSE users. TURNSTEP Greg Sabino Mullane Dependencies DBI version and possibly others CPAN Testers List Reverse dependencies Dependency graph × DBD-Pg-3.5.3 NAME SYNOPSIS VERSION DESCRIPTION MODULE DOCUMENTATION THE DBI CLASS DBI Class Methods connect connect_cached data_sources Methods Common To All Handles err errstr state trace trace_msg parse_trace_flag and parse_trace_flags func private_attribute_info ATTRIBUTES COMMON TO ALL HANDLES InactiveDestroy (boolean) AutoInactiveDestroy (boolean) RaiseError (boolean, inherited) PrintError (boolean, inherited) ShowErrorStatement (boolean, inherited) Warn (boolean, inherited) Executed (boolean, read-only) TraceLevel (integer, inherited) Active (boolean, read-only) Kids (integer, read-only) ActiveKids (integer, read-only) CachedKids (hash ref) ChildHandles (array ref) PrintWarn (boolean, inherited) HandleError (boolean, inherited) HandleSetErr (code ref, inherited) ErrCount (unsigned integer) FetchHashKeyName (string, inherited) ChopBlanks (boolean, inherited) Taint (boolean, inherited) TaintIn (boolean, inherited) TaintOut (boolean, inherited) Profile (inherited) Type (scalar) LongReadLen LongTruncOk CompatMode DBI DATABASE HANDLE OBJECTS Database Handle Methods selectall_arrayref selectall_hashref selectcol_arrayref prepare Placeholders prepare_cached do last_insert_id commit rollback begin_work disconnect quote quote_identifier pg_notifies ping pg_ping get_info table_info column_info primary_key_info primary_key foreign_key_info statistics_info tables type_info_all type_info pg_server_trace pg_server_untrace selectrow_array selectrow_arrayref selectrow_hashref clone Database Handle Attributes AutoCommit (boolean) pg_bool_tf (boolean) ReadOnly (boolean) pg_server_prepare (integer) pg_switch_prepared (integer) pg_placeholder_dollaronly (boolean) pg_placeholder_nocolons (boolean) pg_enable_utf8 (integer) pg_errorlevel (integer) pg_lib_version (integer, read-only) pg_server_version (integer, read-only) Name (string, read-only) Username (string, read-only) pg_db (string, read-only) pg_user (string, read-only) pg_host (string, read-only) pg_port (integer, read-only) pg_socket (integer, read-only) pg_pass (string, read-only) pg_options (string, read-only) pg_default_port (integer, read-only) pg_pid (integer, read-only) pg_prepare_now (boolean) pg_expand_array (boolean) pg_async_status (integer, read-only) pg_standard_conforming_strings (boolean, read-only) pg_INV_READ (integer, read-only) pg_INV_WRITE (integer, read-only) Driver (handle, read-only) pg_protocol (integer, read-only) RowCacheSize DBI STATEMENT HANDLE OBJECTS Statement Handle Methods bind_param bind_param_inout bind_param_array execute execute_array execute_for_fetch fetchrow_arrayref fetchrow_array fetchrow_hashref fetchall_arrayref fetchall_hashref finish rows bind_col bind_columns dump_results blob_read Statement Handle Attributes NUM_OF_FIELDS (integer, read-only) NUM_OF_PARAMS (integer, read-only) NAME (arrayref, read-only) NAME_lc (arrayref, read-only) NAME_uc (arrayref, read-only) NAME_hash (hashref, read-only) NAME_lc_hash (hashref, read-only) NAME_uc_hash (hashref, read-only) TYPE (arrayref, read-only) PRECISION (arrayref, read-only) SCALE (arrayref, read-only) NULLABLE (arrayref, read-only) Database (dbh, read-only) ParamValues (hash ref, read-only) ParamTypes (hash ref, read-only) Statement (string, read-only) pg_current_row (integer, read-only) pg_numbound (integer, read-only) pg_bound (hashref, read-only) pg_size (arrayref, read-only) pg_type (arrayref, read-only) pg_segments (arrayref, read-only) pg_oid_status (integer, read-only) pg_cmd_status (integer, read-only) pg_direct (boolean) pg_prepare_now (boolean) pg_prepare_name (string) pg_server_prepare (integer) pg_switch_prepared (integer) pg_placeholder_dollaronly (boolean) pg_placeholder_nocolons (boolean) pg_async (integer) RowsInCache RowCache CursorName FURTHER INFORMATION Encoding Transactions Savepoints pg_savepoint pg_rollback_to pg_release Asynchronous Queries Asynchronous Constants Asynchronous Methods Asynchronous Examples Array support COPY support pg_getcopydata pg_putcopydata pg_putcopyend Large Objects Cursors Datatype bool Schema support SEE ALSO BUGS DEVELOPMENT AUTHORS COPYRIGHT AND LICENSE NAME DBD::Pg - PostgreSQL database driver for the DBI module SYNOPSIS   use DBI;    $dbh = DBI->connect(""dbi:Pg:dbname=$dbname"", '', '', {AutoCommit => 0});   # The AutoCommit attribute should always be explicitly set    # For some advanced uses you may need PostgreSQL type values:   use DBD::Pg qw(:pg_types);    # For asynchronous calls, import the async constants:   use DBD::Pg qw(:async);    $dbh->do('INSERT INTO mytable(a) VALUES (1)');    $sth = $dbh->prepare('INSERT INTO mytable(a) VALUES (?)');   $sth->execute(); VERSION This documents version 3.5.3 of the DBD::Pg module DESCRIPTION DBD::Pg is a Perl module that works with the DBI module to provide access to PostgreSQL databases. MODULE DOCUMENTATION This documentation describes driver specific behavior and restrictions. It is not supposed to be used as the only reference for the user. In any case consult the DBI documentation first! Latest DBI docmentation. THE DBI CLASS DBI Class Methods connect This method creates a database handle by connecting to a database, and is the DBI equivalent of the ""new"" method. To connect to a Postgres database with a minimum of parameters, use the following syntax:   $dbh = DBI->connect(""dbi:Pg:dbname=$dbname"", '', '', {AutoCommit => 0}); This connects to the database named in the $dbname variable on the default port (usually 5432) without any user authentication. The following connect statement shows almost all possible parameters:   $dbh = DBI->connect(""dbi:Pg:dbname=$dbname;host=$host;port=$port;options=$options"",                       $username,                       $password,                       {AutoCommit => 0, RaiseError => 1, PrintError => 0}                      ); If a parameter is not given, the connect() method will first look for specific environment variables, and then fall back to hard-coded defaults:   parameter    environment variable    hard coded default   ------------------------------------------------------   host         PGHOST                  local domain socket   hostaddr     PGHOSTADDR              local domain socket   port         PGPORT                  5432   dbname*      PGDATABASE              current userid   username     PGUSER                  current userid   password     PGPASSWORD              (none)   options      PGOPTIONS               (none)   service      PGSERVICE               (none)   sslmode      PGSSLMODE               (none) * May also use the aliases db or database If the username and password values passed via connect() are undefined (as opposed to merely being empty strings), DBI will use the environment variables DBI_USER and DBI_PASS if they exist. You can also connect by using a service connection file, which is named pg_service.conf. The location of this file can be controlled by setting the PGSYSCONFDIR environment variable. To use one of the named services within the file, set the name by using either the service parameter or the environment variable PGSERVICE. Note that when connecting this way, only the minimum parameters should be used. For example, to connect to a service named ""zephyr"", you could use:   $dbh = DBI->connect(""dbi:Pg:service=zephyr"", '', ''); You could also set $ENV{PGSERVICE} to ""zephyr"" and connect like this:   $dbh = DBI->connect(""dbi:Pg:"", '', ''); The format of the pg_service.conf file is simply a bracketed service name, followed by one parameter per line in the format name=value. For example:   [zephyr]   dbname=winds   user=wisp   password=W$2Hc00YSgP   port=6543 There are four valid arguments to the sslmode parameter, which controls whether to use SSL to connect to the database: disable: SSL connections are never used allow: try non-SSL, then SSL prefer: try SSL, then non-SSL require: connect only with SSL You can also connect using sockets in a specific directory. This may be needed if the server you are connecting to has a different default socket directory from the one used to compile DBD::Pg. Use the complete path to the socket directory as the name of the host, like this:   $dbh = DBI->connect('dbi:Pg:dbname=foo;host=/var/tmp/socket',     $username,     $password,     {AutoCommit => 0, RaiseError => 1}); The attribute hash can also contain a key named dbd_verbose, which simply calls $dbh->trace('DBD') after the handle is created. This attribute is not recommended, as it is clearer to simply explicitly call trace explicitly in your script. connect_cached   $dbh = DBI->connect_cached(""dbi:Pg:dbname=$dbname"", $username, $password, \%options); Implemented by DBI, no driver-specific impact. data_sources   @data_sources = DBI->data_sources('Pg');   @data_sources = $dbh->data_sources(); Returns a list of available databases. Unless the environment variable DBI_DSN is set, a connection will be attempted to the database template1. The normal connection environment variables also apply, such as PGHOST, PGPORT, DBI_USER, DBI_PASS, and PGSERVICE. You can also pass in options to add to the connection string For example, to specify an alternate port and host:   @data_sources = DBI->data_sources('Pg', 'port=5824;host=example.com');    or:    @data_sources = $dbh->data_sources('port=5824;host=example.com'); Methods Common To All Handles For all of the methods below, $h can be either a database handle ($dbh) or a statement handle ($sth). Note that $dbh and $sth can be replaced with any variable name you choose: these are just the names most often used. Another common variable used in this documentation is $rv, which stands for ""return value"". err   $rv = $h->err; Returns the error code from the last method called. For the connect method it returns PQstatus, which is a number used by libpq (the Postgres connection library). A value of 0 indicates no error (CONNECTION_OK), while any other number indicates a failed connection. The only other number commonly seen is 1 (CONNECTION_BAD). See the libpq documentation for the complete list of return codes. In all other non-connect methods $h->err returns the PQresultStatus of the current handle. This is a number used by libpq and is one of:   0  Empty query string   1  A command that returns no data successfully completed.   2  A command that returns data successfully completed.   3  A COPY OUT command is still in progress.   4  A COPY IN command is still in progress.   5  A bad response was received from the backend.   6  A nonfatal error occurred (a notice or warning message)   7  A fatal error was returned: the last query failed. errstr   $str = $h->errstr; Returns the last error that was reported by Postgres. This message is affected by the pg_errorlevel setting. state   $str = $h->state; Returns a five-character ""SQLSTATE"" code. Success is indicated by a 00000 code, which gets mapped to an empty string by DBI. A code of S8006 indicates a connection failure, usually because the connection to the Postgres server has been lost. While this method can be called as either $sth->state or $dbh->state, it is usually clearer to always use $dbh->state. The list of codes used by PostgreSQL can be found at: http://www.postgresql.org/docs/current/static/errcodes-appendix.html Note that these codes are part of the SQL standard and only a small number of them will be used by PostgreSQL. Common codes:   00000 Successful completion   25P01 No active SQL transaction   25P02 In failed SQL transaction   S8006 Connection failure trace   $h->trace($trace_settings);   $h->trace($trace_settings, $trace_filename);   $trace_settings = $h->trace; Changes the trace settings on a database or statement handle. The optional second argument specifies a file to write the trace information to. If no filename is given, the information is written to STDERR. Note that tracing can be set globally as well by setting DBI->trace, or by using the environment variable DBI_TRACE. The value is either a numeric level or a named flag. For the flags that DBD::Pg uses, see parse_trace_flag. trace_msg   $h->trace_msg($message_text);   $h->trace_msg($message_text, $min_level); Writes a message to the current trace output (as set by the ""trace"" method). If a second argument is given, the message is only written if the current tracing level is equal to or greater than the $min_level. parse_trace_flag and parse_trace_flags   $h->trace($h->parse_trace_flags('SQL|pglibpq'));   $h->trace($h->parse_trace_flags('1|pgstart'));    ## Simpler:   $h->trace('SQL|pglibpq');   $h->trace('1|pgstart');    my $value = DBD::Pg->parse_trace_flag('pglibpq');   DBI->trace($value); The parse_trace_flags method is used to convert one or more named flags to a number which can passed to the ""trace"" method. DBD::Pg currently supports the DBI-specific flag, SQL, as well as the ones listed below. Flags can be combined by using the parse_trace_flags method, which simply calls parse_trace_flag on each item and combines them. Sometimes you may wish to turn the tracing on before you connect to the database. The second example above shows a way of doing this: the call to DBD::Pg->parse_trace_flags provides a number than can be fed to DBI->trace before you create a database handle. DBD::Pg supports the following trace flags: SQL Outputs all SQL statements. Note that the output provided will not necessarily be in a form suitable to passing directly to Postgres, as server-side prepared statements are used extensively by DBD::Pg. For maximum portability of output (but with a potential performance hit), use with $dbh->{pg_server_prepare} = 0. DBD Turns on all non-DBI flags, in other words, only the ones that are specific to DBD::Pg (all those below which start with the letters 'pg'). pglibpq Outputs the name of each libpq function (without arguments) immediately before running it. This is a good way to trace the flow of your program at a low level. This information is also output if the trace level is set to 4 or greater. pgstart Outputs the name of each internal DBD::Pg function, and other information such as the function arguments or important global variables, as each function starts. This information is also output if the trace level is set to 4 or greater. pgend Outputs a simple message at the very end of each internal DBD::Pg function. This is also output if the trace level is set to 4 or greater. pgprefix Forces each line of trace output to begin with the string dbdpg: . This helps to differentiate it from the normal DBI trace output. pglogin Outputs a message showing the connection string right before a new database connection is attempted, a message when the connection was successful, and a message right after the database has been disconnected. Also output if trace level is 5 or greater. See the DBI section on TRACING for more information. func DBD::Pg uses the func method to support a variety of functions. Note that the name of the function comes last, after the arguments. table_attributes   $attrs = $dbh->func($table, 'table_attributes'); Use of the tables_attributes function is no longer recommended. Instead, you can use the more portable column_info and primary_key methods to access the same information. The table_attributes method returns, for the given table argument, a reference to an array of hashes, each of which contains the following keys:   NAME        attribute name   TYPE        attribute type   SIZE        attribute size (-1 for variable size)   NULLABLE    flag nullable   DEFAULT     default value   CONSTRAINT  constraint   PRIMARY_KEY flag is_primary_key   REMARKS     attribute description pg_lo_creat   $lobjId = $dbh->pg_lo_creat($mode); Creates a new large object and returns the object-id. $mode is a bitmask describing read and write access to the new object. This setting is ignored since Postgres version 8.1. For backwards compatibility, however, you should set a valid mode anyway (see ""pg_lo_open"" for a list of valid modes). Upon failure it returns undef. This function cannot be used if AutoCommit is enabled. The old way of calling large objects functions is deprecated: $dbh->func(.., 'lo_); pg_lo_open   $lobj_fd = $dbh->pg_lo_open($lobjId, $mode); Opens an existing large object and returns an object-descriptor for use in subsequent pg_lo_* calls. $mode is a bitmask describing read and write access to the opened object. It may be one of:   $dbh->{pg_INV_READ}   $dbh->{pg_INV_WRITE}   $dbh->{pg_INV_READ} | $dbh->{pg_INV_WRITE} pg_INV_WRITE and pg_INV_WRITE | pg_INV_READ modes are identical; in both modes, the large object can be read from or written to. Reading from the object will provide the object as written in other committed transactions, along with any writes performed by the current transaction. Objects opened with pg_INV_READ cannot be written to. Reading from this object will provide the stored data at the time of the transaction snapshot which was active when pg_lo_write was called. Returns undef upon failure. Note that 0 is a perfectly correct (and common) object descriptor! This function cannot be used if AutoCommit is enabled. pg_lo_write   $nbytes = $dbh->pg_lo_write($lobj_fd, $buffer, $len); Writes $len bytes of c<$buffer> into the large object $lobj_fd. Returns the number of bytes written and undef upon failure. This function cannot be used if AutoCommit is enabled. pg_lo_read   $nbytes = $dbh->pg_lo_read($lobj_fd, $buffer, $len); Reads $len bytes into c<$buffer> from large object $lobj_fd. Returns the number of bytes read and undef upon failure. This function cannot be used if AutoCommit is enabled. pg_lo_lseek   $loc = $dbh->pg_lo_lseek($lobj_fd, $offset, $whence); Changes the current read or write location on the large object $obj_id. Currently $whence can only be 0 (which is L_SET). Returns the current location and undef upon failure. This function cannot be used if AutoCommit is enabled. pg_lo_tell   $loc = $dbh->pg_lo_tell($lobj_fd); Returns the current read or write location on the large object $lobj_fd and undef upon failure. This function cannot be used if AutoCommit is enabled. pg_lo_truncate   $loc = $dbh->pg_lo_truncate($lobj_fd, $len); Truncates the given large object to the new size. Returns undef on failure, and 0 on success. This function cannot be used if AutoCommit is enabled. pg_lo_close   $lobj_fd = $dbh->pg_lo_close($lobj_fd); Closes an existing large object. Returns true upon success and false upon failure. This function cannot be used if AutoCommit is enabled. pg_lo_unlink   $ret = $dbh->pg_lo_unlink($lobjId); Deletes an existing large object. Returns true upon success and false upon failure. This function cannot be used if AutoCommit is enabled. pg_lo_import   $lobjId = $dbh->pg_lo_import($filename); Imports a Unix file as a large object and returns the object id of the new object or undef upon failure. pg_lo_import_with_oid   $lobjId = $dbh->pg_lo_import($filename, $OID); Same as pg_lo_import, but attempts to use the supplied OID as the large object number. If this number is 0, it falls back to the behavior of pg_lo_import (which assigns the next available OID). This is only available when DBD::Pg is compiled against a Postgres server version 8.4 or later. pg_lo_export   $ret = $dbh->pg_lo_export($lobjId, $filename); Exports a large object into a Unix file. Returns false upon failure, true otherwise. getfd   $fd = $dbh->func('getfd'); Deprecated, use $dbh->{pg_socket} instead. private_attribute_info   $hashref = $dbh->private_attribute_info();   $hashref = $sth->private_attribute_info(); Returns a hash of all private attributes used by DBD::Pg, for either a database or a statement handle. Currently, all the hash values are undef. ATTRIBUTES COMMON TO ALL HANDLES InactiveDestroy (boolean) If set to true, then the ""disconnect"" method will not be automatically called when the database handle goes out of scope. This is required if you are forking, and even then you must tread carefully and ensure that either the parent or the child (but not both!) handles all database calls from that point forwards, so that messages from the Postgres backend are only handled by one of the processes. If you don't set things up properly, you will see messages such as ""server closed the connection unexpectedly"", and ""message type 0x32 arrived from server while idle"". The best solution is to either have the child process reconnect to the database with a fresh database handle, or to rewrite your application not to use forking. See the section on ""Asynchronous Queries"" for a way to have your script continue to work while the database is processing a request. AutoInactiveDestroy (boolean) The InactiveDestroy attribute, described above, needs to be explicitly set in the child process after a fork. If the code that performs the fork is in a third party module such as Sys::Syslog, this can present a problem. Use AutoInactiveDestroy to get around this problem. RaiseError (boolean, inherited) Forces errors to always raise an exception. Although it defaults to off, it is recommended that this be turned on, as the alternative is to check the return value of every method (prepare, execute, fetch, etc.) manually, which is easy to forget to do. PrintError (boolean, inherited) Forces database errors to also generate warnings, which can then be filtered with methods such as locally redefining $SIG{__WARN__} or using modules such as CGI::Carp. This attribute is on by default. ShowErrorStatement (boolean, inherited) Appends information about the current statement to error messages. If placeholder information is available, adds that as well. Defaults to false. Warn (boolean, inherited) Enables warnings. This is on by default, and should only be turned off in a local block for a short a time only when absolutely needed. Executed (boolean, read-only) Indicates if a handle has been executed. For database handles, this value is true after the ""do"" method has been called, or when one of the child statement handles has issued an ""execute"". Issuing a ""commit"" or ""rollback"" always resets the attribute to false for database handles. For statement handles, any call to ""execute"" or its variants will flip the value to true for the lifetime of the statement handle. TraceLevel (integer, inherited) Sets the trace level, similar to the ""trace"" method. See the sections on ""trace"" and parse_trace_flag for more details. Active (boolean, read-only) Indicates if a handle is active or not. For database handles, this indicates if the database has been disconnected or not. For statement handles, it indicates if all the data has been fetched yet or not. Use of this attribute is not encouraged. Kids (integer, read-only) Returns the number of child processes created for each handle type. For a driver handle, indicates the number of database handles created. For a database handle, indicates the number of statement handles created. For statement handles, it always returns zero, because statement handles do not create kids. ActiveKids (integer, read-only) Same as Kids, but only returns those that are active. CachedKids (hash ref) Returns a hashref of handles. If called on a database handle, returns all statement handles created by use of the prepare_cached method. If called on a driver handle, returns all database handles created by the ""connect_cached"" method. ChildHandles (array ref) Implemented by DBI, no driver-specific impact. PrintWarn (boolean, inherited) Implemented by DBI, no driver-specific impact. HandleError (boolean, inherited) Implemented by DBI, no driver-specific impact. HandleSetErr (code ref, inherited) Implemented by DBI, no driver-specific impact. ErrCount (unsigned integer) Implemented by DBI, no driver-specific impact. FetchHashKeyName (string, inherited) Implemented by DBI, no driver-specific impact. ChopBlanks (boolean, inherited) Supported by DBD::Pg as proposed by DBI. This method is similar to the SQL function RTRIM. Taint (boolean, inherited) Implemented by DBI, no driver-specific impact. TaintIn (boolean, inherited) Implemented by DBI, no driver-specific impact. TaintOut (boolean, inherited) Implemented by DBI, no driver-specific impact. Profile (inherited) Implemented by DBI, no driver-specific impact. Type (scalar) Returns dr for a driver handle, db for a database handle, and st for a statement handle. Should be rarely needed. LongReadLen Not used by DBD::Pg LongTruncOk Not used by DBD::Pg CompatMode Not used by DBD::Pg DBI DATABASE HANDLE OBJECTS Database Handle Methods selectall_arrayref   $ary_ref = $dbh->selectall_arrayref($sql);   $ary_ref = $dbh->selectall_arrayref($sql, \%attr);   $ary_ref = $dbh->selectall_arrayref($sql, \%attr, @bind_values); Returns a reference to an array containing the rows returned by preparing and executing the SQL string. See the DBI documentation for full details. selectall_hashref   $hash_ref = $dbh->selectall_hashref($sql, $key_field); Returns a reference to a hash containing the rows returned by preparing and executing the SQL string. See the DBI documentation for full details. selectcol_arrayref   $ary_ref = $dbh->selectcol_arrayref($sql, \%attr, @bind_values); Returns a reference to an array containing the first column from each rows returned by preparing and executing the SQL string. It is possible to specify exactly which columns to return. See the DBI documentation for full details. prepare   $sth = $dbh->prepare($statement, \%attr); WARNING: DBD::Pg now (as of version 1.40) uses true prepared statements by sending them to the backend to be prepared by the Postgres server. Statements that were legal before may no longer work. See below for details. The prepare method prepares a statement for later execution. PostgreSQL supports prepared statements, which enables DBD::Pg to only send the query once, and simply send the arguments for every subsequent call to ""execute"". DBD::Pg can use these server-side prepared statements, or it can just send the entire query to the server each time. The best way is automatically chosen for each query. This will be sufficient for most users: keep reading for a more detailed explanation and some optional flags. Queries that do not begin with the word ""SELECT"", ""INSERT"", ""UPDATE"", or ""DELETE"" are never sent as server-side prepared statements. Deciding whether or not to use prepared statements depends on many factors, but you can force them to be used or not used by using the pg_server_prepare attribute when calling ""prepare"". Setting this to ""0"" means to never use prepared statements. Setting pg_server_prepare to ""1"" means that prepared statements should be used whenever possible. This is the default when connected to Postgres servers version 8.0 or higher. Servers that are version 7.4 get a special default value of ""2"", because server-side statements were only partially supported in that version. In this case, it only uses server-side prepares if all parameters are specifically bound. The pg_server_prepare attribute can also be set at connection time like so:   $dbh = DBI->connect($DBNAME, $DBUSER, $DBPASS,                       { AutoCommit => 0,                         RaiseError => 1,                         pg_server_prepare => 0,                       }); or you may set it after your database handle is created:   $dbh->{pg_server_prepare} = 1; To enable it for just one particular statement:   $sth = $dbh->prepare(""SELECT id FROM mytable WHERE val = ?"",                        { pg_server_prepare => 1 }); You can even toggle between the two as you go:   $sth->{pg_server_prepare} = 1;   $sth->execute(22);   $sth->{pg_server_prepare} = 0;   $sth->execute(44);   $sth->{pg_server_prepare} = 1;   $sth->execute(66); In the above example, the first execute will use the previously prepared statement. The second execute will not, but will build the query into a single string and send it to the server. The third one will act like the first and only send the arguments. Even if you toggle back and forth, a statement is only prepared once. Using prepared statements is in theory quite a bit faster: not only does the PostgreSQL backend only have to prepare the query only once, but DBD::Pg no longer has to worry about quoting each value before sending it to the server. However, there are some drawbacks. The server cannot always choose the ideal parse plan because it will not know the arguments before hand. But for most situations in which you will be executing similar data many times, the default plan will probably work out well. Programs such as PgBouncer which cache connections at a low level should not use prepared statements via DBD::Pg, or must take extra care in the application to account for the fact that prepared statements are not shared across database connections. Further discussion on this subject is beyond the scope of this documentation: please consult the pgsql-performance mailing list, http://archives.postgresql.org/pgsql-performance/ Only certain commands will be sent to a server-side prepare: currently these include SELECT, INSERT, UPDATE, and DELETE. DBD::Pg uses a simple naming scheme for the prepared statements themselves: dbdpg_XY_Z, where Y is the current PID, X is either 'p' or 'n' (depending on if the PID is a positive or negative number), and Z is a number that starts at 1 and increases each time a new statement is prepared. This number is tracked at the database handle level, so multiple statement handles will not collide. You cannot send more than one command at a time in the same prepare command (by separating them with semi-colons) when using server-side prepares. The actual PREPARE is usually not performed until the first execute is called, due to the fact that information on the data types (provided by ""bind_param"") may be provided after the prepare but before the execute. A server-side prepare may happen before the first ""execute"", but only if the server can handle the server-side prepare, and the statement contains no placeholders. It will also be prepared if the pg_prepare_now attribute is passed in and set to a true value. Similarly, the pg_prepare_now attribute can be set to 0 to ensure that the statement is not prepared immediately, although the cases in which you would want this are very rare. Finally, you can set the default behavior of all prepare statements by setting the pg_prepare_now attribute on the database handle:   $dbh->{pg_prepare_now} = 1; The following two examples will be prepared right away:   $sth->prepare(""SELECT 123""); ## no placeholders    $sth->prepare(""SELECT 123, ?"", {pg_prepare_now => 1}); The following two examples will NOT be prepared right away:   $sth->prepare(""SELECT 123, ?""); ## has a placeholder    $sth->prepare(""SELECT 123"", {pg_prepare_now => 0}); There are times when you may want to prepare a statement yourself. To do this, simply send the PREPARE statement directly to the server (e.g. with the ""do"" method). Create a statement handle and set the prepared name via the pg_prepare_name attribute. The statement handle can be created with a dummy statement, as it will not be executed. However, it should have the same number of placeholders as your prepared statement. Example:   $dbh->do('PREPARE mystat AS SELECT COUNT(*) FROM pg_class WHERE reltuples < ?');   $sth = $dbh->prepare('SELECT ?');   $sth->bind_param(1, 1, SQL_INTEGER);   $sth->{pg_prepare_name} = 'mystat';   $sth->execute(123); The above will run the equivalent of this query on the backend:   EXECUTE mystat(123); which is the equivalent of:   SELECT COUNT(*) FROM pg_class WHERE reltuples < 123; You can force DBD::Pg to send your query directly to the server by adding the pg_direct attribute to your prepare call. This is not recommended, but is added just in case you need it. Placeholders There are three types of placeholders that can be used in DBD::Pg. The first is the ""question mark"" type, in which each placeholder is represented by a single question mark character. This is the method recommended by the DBI specs and is the most portable. Each question mark is internally replaced by a ""dollar sign number"" in the order in which they appear in the query (important when using ""bind_param""). The second type of placeholder is ""dollar sign numbers"". This is the method that Postgres uses internally and is overall probably the best method to use if you do not need compatibility with other database systems. DBD::Pg, like PostgreSQL, allows the same number to be used more than once in the query. Numbers must start with ""1"" and increment by one value (but can appear in any order within the query). If the same number appears more than once in a query, it is treated as a single parameter and all instances are replaced at once. Examples: Not legal:   $SQL = 'SELECT count(*) FROM pg_class WHERE relpages > $2'; # Does not start with 1    $SQL = 'SELECT count(*) FROM pg_class WHERE relpages BETWEEN $1 AND $3'; # Missing 2 Legal:   $SQL = 'SELECT count(*) FROM pg_class WHERE relpages > $1';    $SQL = 'SELECT count(*) FROM pg_class WHERE relpages BETWEEN $1 AND $2';    $SQL = 'SELECT count(*) FROM pg_class WHERE relpages BETWEEN $2 AND $1'; # legal but confusing    $SQL = 'SELECT count(*) FROM pg_class WHERE relpages BETWEEN $1 AND $2 AND reltuples > $1';    $SQL = 'SELECT count(*) FROM pg_class WHERE relpages > $1 AND reltuples > $1'; In the final statement above, DBI thinks there is only one placeholder, so this statement will replace both placeholders:   $sth->bind_param(1, 2045); While a simple execute with no bind_param calls requires only a single argument as well:   $sth->execute(2045); The final placeholder type is ""named parameters"" in the format "":foo"". While this syntax is supported by DBD::Pg, its use is discouraged in favor of dollar-sign numbers. The different types of placeholders cannot be mixed within a statement, but you may use different ones for each statement handle you have. This is confusing at best, so stick to one style within your program. If your queries use operators that contain question marks (e.g. some of the native Postgres geometric operators and JSON operators) or array slices (e.g. data[100:300]), there are methods to instruct DBD::Pg to not treat some symbols as placeholders. First, you may simply add a backslash before the start of a placeholder, and DBD::Pg will strip the backslash and not treat the character as a placeholder. You can also tell DBD::Pg to ignore any non-dollar sign placeholders by setting the pg_placeholder_dollaronly attribute at either the database handle or the statement handle level. Examples:   $dbh->{pg_placeholder_dollaronly} = 1;   $sth = $dbh->prepare(q{SELECT * FROM mytable WHERE lseg1 ?# lseg2 AND name = $1});   $sth->execute('segname'); Alternatively, you can set it at prepare time:   $sth = $dbh->prepare(q{SELECT * FROM mytable WHERE lseg1 ?-| lseg2 AND name = $1},     {pg_placeholder_dollaronly => 1});   $sth->execute('segname'); If your queries use array slices but you still want to use question marks as placeholders, you can tell DBD::Pg to ignore just colon placeholders by setting the ""pg_placeholder_nocolons"" attribute in the same way. Examples:   $dbh->{pg_placeholder_nocolons} = 1;   $sth = $dbh->prepare(q{SELECT array[1:2] FROM mytable WHERE id = ?});   $sth->execute(1); Again, you may set it param time as well:   $sth = $dbh->prepare(q{SELECT array[1:2] FROM mytable WHERE id = ?}.     {pg_placeholder_nocolons => 1});   $sth->execute(1); prepare_cached   $sth = $dbh->prepare_cached($statement, \%attr); Implemented by DBI, no driver-specific impact. This method is most useful when using a server that supports server-side prepares, and you have asked the prepare to happen immediately via the pg_prepare_now attribute. do   $rv = $dbh->do($statement);   $rv = $dbh->do($statement, \%attr);   $rv = $dbh->do($statement, \%attr, @bind_values); Prepare and execute a single statement. Returns the number of rows affected if the query was successful, returns undef if an error occurred, and returns -1 if the number of rows is unknown or not available. Note that this method will return 0E0 instead of 0 for 'no rows were affected', in order to always return a true value if no error occurred. If neither \%attr nor @bind_values is given, the query will be sent directly to the server without the overhead of internally creating a statement handle and running prepare and execute, for a measurable speed increase. Note that an empty statement (a string with no length) will not be passed to the server; if you want a simple test, use ""SELECT 123"" or the ""ping"" method. last_insert_id   $rv = $dbh->last_insert_id(undef, $schema, $table, undef);   $rv = $dbh->last_insert_id(undef, $schema, $table, undef, {sequence => $seqname}); Attempts to return the id of the last value to be inserted into a table. You can either provide a sequence name (preferred) or provide a table name with optional schema, and DBD::Pg will attempt to find the sequence itself. The current value of the sequence is returned by a call to the CURRVAL() PostgreSQL function. This will fail if the sequence has not yet been used in the current database connection. If you do not know the name of the sequence, you can provide a table name and DBD::Pg will attempt to return the correct value. To do this, there must be at least one column in the table with a NOT NULL constraint, that has a unique constraint, and which uses a sequence as a default value. If more than one column meets these conditions, the primary key will be used. This involves some looking up of things in the system table, so DBD::Pg will cache the sequence name for subsequent calls. If you need to disable this caching for some reason, (such as the sequence name changing), you can control it by adding pg_cache => 0 to the final (hashref) argument for last_insert_id. Please keep in mind that this method is far from foolproof, so make your script use it properly. Specifically, make sure that it is called immediately after the insert, and that the insert does not add a value to the column that is using the sequence as a default value. However, because we are using sequences, you can be sure that the value you got back has not been used by any other process. Some examples:   $dbh->do('CREATE SEQUENCE lii_seq START 1');   $dbh->do(q{CREATE TABLE lii (     foobar INTEGER NOT NULL UNIQUE DEFAULT nextval('lii_seq'),     baz VARCHAR)});   $SQL = 'INSERT INTO lii(baz) VALUES (?)';   $sth = $dbh->prepare($SQL);   for (qw(uno dos tres cuatro)) {     $sth->execute($_);     my $newid = $dbh->last_insert_id(undef,undef,undef,undef,{sequence=>'lii_seq'});     print ""Last insert id was $newid\n"";   } If you did not want to worry about the sequence name:   $dbh->do('CREATE TABLE lii2 (     foobar SERIAL UNIQUE,     baz VARCHAR)');   $SQL = 'INSERT INTO lii2(baz) VALUES (?)';   $sth = $dbh->prepare($SQL);   for (qw(uno dos tres cuatro)) {     $sth->execute($_);     my $newid = $dbh->last_insert_id(undef,undef,""lii2"",undef);     print ""Last insert id was $newid\n"";   } commit   $rv = $dbh->commit; Issues a COMMIT to the server, indicating that the current transaction is finished and that all changes made will be visible to other processes. If AutoCommit is enabled, then a warning is given and no COMMIT is issued. Returns true on success, false on error. See also the section on ""Transactions"". rollback   $rv = $dbh->rollback; Issues a ROLLBACK to the server, which discards any changes made in the current transaction. If AutoCommit is enabled, then a warning is given and no ROLLBACK is issued. Returns true on success, and false on error. See also the the section on ""Transactions"". begin_work This method turns on transactions until the next call to ""commit"" or ""rollback"", if AutoCommit is currently enabled. If it is not enabled, calling begin_work will issue an error. Note that the transaction will not actually begin until the first statement after begin_work is called. Example:   $dbh->{AutoCommit} = 1;   $dbh->do('INSERT INTO foo VALUES (123)'); ## Changes committed immediately   $dbh->begin_work();   ## Not in a transaction yet, but AutoCommit is set to 0    $dbh->do(""INSERT INTO foo VALUES (345)"");   ## DBD::PG actually issues two statements here:   ## BEGIN;   ## INSERT INTO foo VALUES (345)   ## We are now in a transaction    $dbh->commit();   ## AutoCommit is now set to 1 again disconnect   $rv = $dbh->disconnect; Disconnects from the Postgres database. Any uncommitted changes will be rolled back upon disconnection. It's good policy to always explicitly call commit or rollback at some point before disconnecting, rather than relying on the default rollback behavior. This method may give warnings about ""disconnect invalidates X active statement handle(s)"". This means that you called $sth->execute() but did not finish fetching all the rows from them. To avoid seeing this warning, either fetch all the rows or call $sth->finish() for each executed statement handle. If the script exits before disconnect is called (or, more precisely, if the database handle is no longer referenced by anything), then the database handle's DESTROY method will call the rollback() and disconnect() methods automatically. It is best to explicitly disconnect rather than rely on this behavior. quote   $rv = $dbh->quote($value, $data_type); This module implements its own quote method. For simple string types, both backslashes and single quotes are doubled. You may also quote arrayrefs and receive a string suitable for passing into Postgres array columns. If the value contains backslashes, and the server is version 8.1 or higher, then the escaped string syntax will be used (which places a capital E before the first single quote). This syntax is always used when quoting bytea values on servers 8.1 and higher. The data_type argument is optional and should be one of the type constants exported by DBD::Pg (such as PG_BYTEA). In addition to string, bytea, char, bool, and other standard types, the following geometric types are supported: point, line, lseg, box, path, polygon, and circle (PG_POINT, PG_LINE, PG_LSEG, PG_BOX, PG_PATH, PG_POLYGON, and PG_CIRCLE respectively). To quote a Postgres-specific data type, you must use a 'hashref' argument like so:   my $quotedval = $dbh->quote($value, { pg_type => PG_VARCHAR }); NOTE: The undocumented (and invalid) support for the SQL_BINARY data type is officially deprecated. Use PG_BYTEA with bind_param() instead:   $rv = $sth->bind_param($param_num, $bind_value,                          { pg_type => PG_BYTEA }); quote_identifier   $string = $dbh->quote_identifier( $name );   $string = $dbh->quote_identifier( undef, $schema, $table); Returns a quoted version of the supplied string, which is commonly a schema, table, or column name. The three argument form will return the schema and the table together, separated by a dot. Examples:   print $dbh->quote_identifier('grapefruit'); ## Prints: ""grapefruit""    print $dbh->quote_identifier('juicy fruit'); ## Prints: ""juicy fruit""    print $dbh->quote_identifier(undef, 'public', 'pg_proc');   ## Prints: ""public"".""pg_proc"" pg_notifies   $ret = $dbh->pg_notifies; Looks for any asynchronous notifications received and returns either undef or a reference to a three-element array consisting of an event name, the PID of the backend that sent the NOTIFY command, and the optional payload string. Note that this does not check if the connection to the database is still valid first - for that, use the c<ping> method. You may need to commit if not in autocommit mode - new notices will not be picked up while in the middle of a transaction. An example:   $dbh->do(""LISTEN abc"");   $dbh->do(""LISTEN def"");    ## Hang around until we get the message we want   LISTENLOOP: {     while (my $notify = $dbh->pg_notifies) {       my ($name, $pid, $payload) = @$notify;       print qq{I received notice ""$name"" from PID $pid, payload was ""$payload""\n};       ## Do something based on the notice received     }     $dbh->ping() or die qq{Ping failed!};     $dbh->commit();     sleep(5);     redo;   } Payloads will always be an empty string unless you are connecting to a Postgres server version 9.0 or higher. ping   $rv = $dbh->ping; The ping method determines if there is a working connection to an active database server. It does this by sending a small query to the server, currently 'DBD::Pg ping test v3.5.3'. It returns 0 (false) if the connection is not valid, otherwise it returns a positive number (true). The value returned indicates the current state:   Value    Meaning   --------------------------------------------------     1      Database is idle (not in a transaction)     2      Database is active, there is a command in progress (usually seen after a COPY command)     3      Database is idle within a transaction     4      Database is idle, within a failed transaction Additional information on why a handle is not valid can be obtained by using the ""pg_ping"" method. pg_ping   $rv = $dbh->pg_ping; This is a DBD::Pg-specific extension to the ""ping"" method. This will check the validity of a database handle in exactly the same way as ping, but instead of returning a 0 for an invalid connection, it will return a negative number. So in addition to returning the positive numbers documented for ping, it may also return the following:   Value    Meaning   --------------------------------------------------    -1      There is no connection to the database at all (e.g. after disconnect)    -2      An unknown transaction status was returned (e.g. after forking)    -3      The test query failed (PQexec returned null)    -4      PQstatus returned a CONNECTION_BAD get_info   $value = $dbh->get_info($info_type); Supports a very large set (> 250) of the information types, including the minimum recommended by DBI. table_info   $sth = $dbh->table_info(undef, $schema, $table, $type); Returns all tables and views visible to the current user. The schema and table arguments will do a LIKE search if a percent sign (%) or an underscore (_) is detected in the argument. The $type argument accepts any comma-separated combination of ""TABLE"", ""VIEW"", ""SYSTEM TABLE"", ""SYSTEM VIEW"", ""MATERIALIZED VIEW"", ""SYSTEM MATERIALIZED VIEW"", or ""LOCAL TEMPORARY"". (Using all is the default action.) Note that a statement handle is returned, and not a direct list of tables. See the examples below for ways to handle this. The following fields are returned: TABLE_CAT: Always NULL, as Postgres does not have the concept of catalogs. TABLE_SCHEM: The name of the schema that the table or view is in. TABLE_NAME: The name of the table or view. TABLE_TYPE: The type of object returned. Will be one of ""TABLE"", ""VIEW"", ""MATERIALIZED VIEW"", ""SYSTEM VIEW"", ""SYSTEM MATERIALIZED VIEW"", ""SYSTEM TABLE"", or ""LOCAL TEMPORARY"". The TABLE_SCHEM and TABLE_NAME will be quoted via quote_ident(). Two additional fields specific to DBD::Pg are returned: pg_schema: the unquoted name of the schema pg_table: the unquoted name of the table If your database supports tablespaces (version 8.0 or greater), two additional DBD::Pg specific fields are returned: pg_tablespace_name: the name of the tablespace the table is in pg_tablespace_location: the location of the tablespace the table is in Tables that have not been assigned to a particular tablespace (or views) will return NULL (undef) for both of the above field. Rows are returned alphabetically, with all tables first, and then all views. Examples of use:   ## Display all tables and views in the public schema:   $sth = $dbh->table_info('', 'public', undef, undef);   for my $rel (@{$sth->fetchall_arrayref({})}) {     print ""$rel->{TABLE_TYPE} name is $rel->{TABLE_NAME}\n"";   }     # Display the schema of all tables named 'foo':   $sth = $dbh->table_info('', undef, 'foo', 'TABLE');   for my $rel (@{$sth->fetchall_arrayref({})}) {     print ""Table name is $rel->{TABLE_SCHEM}.$rel->{TABLE_NAME}\n"";   } column_info   $sth = $dbh->column_info( undef, $schema, $table, $column ); Supported by this driver as proposed by DBI with the follow exceptions. These fields are currently always returned with NULL (undef) values:    TABLE_CAT    BUFFER_LENGTH    DECIMAL_DIGITS    NUM_PREC_RADIX    SQL_DATA_TYPE    SQL_DATETIME_SUB    CHAR_OCTET_LENGTH Also, six additional non-standard fields are returned: pg_type: data type with additional info i.e. ""character varying(20)"" pg_constraint: holds column constraint definition pg_schema: the unquoted name of the schema pg_table: the unquoted name of the table pg_column: the unquoted name of the column pg_enum_values: an array reference of allowed values for an enum column Note that the TABLE_SCHEM, TABLE_NAME, and COLUMN_NAME fields all return output wrapped in quote_ident(). If you need the unquoted version, use the pg_ fields above. primary_key_info   $sth = $dbh->primary_key_info( undef, $schema, $table, \%attr ); Supported by this driver as proposed by DBI. There are no search patterns allowed, but leaving the $schema argument blank will cause the first table found in the schema search path to be used. An additional field, ""DATA_TYPE"", is returned and shows the data type for each of the arguments in the ""COLUMN_NAME"" field. This method will also return tablespace information for servers that support tablespaces. See the ""table_info"" entry for more information. The five additional custom fields returned are: pg_tablespace_name: name of the tablespace, if any pg_tablespace_location: location of the tablespace pg_schema: the unquoted name of the schema pg_table: the unquoted name of the table pg_column: the unquoted name of the column In addition to the standard format of returning one row for each column found for the primary key, you can pass the pg_onerow attribute to force a single row to be used. If the primary key has multiple columns, the ""KEY_SEQ"", ""COLUMN_NAME"", and ""DATA_TYPE"" fields will return a comma-delimited string. If the pg_onerow attribute is set to ""2"", the fields will be returned as an arrayref, which can be useful when multiple columns are involved:   $sth = $dbh->primary_key_info('', '', 'dbd_pg_test', {pg_onerow => 2});   if (defined $sth) {     my $pk = $sth->fetchall_arrayref()->[0];     print ""Table $pk->[2] has a primary key on these columns:\n"";     for (my $x=0; defined $pk->[3][$x]; $x++) {       print ""Column: $pk->[3][$x]  (data type: $pk->[6][$x])\n"";     }   } primary_key   @key_column_names = $dbh->primary_key(undef, $schema, $table); Simple interface to the ""primary_key_info"" method. Returns a list of the column names that comprise the primary key of the specified table. The list is in primary key column sequence order. If there is no primary key then an empty list is returned. foreign_key_info   $sth = $dbh->foreign_key_info( $pk_catalog, $pk_schema, $pk_table,                                  $fk_catalog, $fk_schema, $fk_table ); Supported by this driver as proposed by DBI, using the SQL/CLI variant. There are no search patterns allowed, but leaving the $schema argument blank will cause the first table found in the schema search path to be used. Two additional fields, ""UK_DATA_TYPE"" and ""FK_DATA_TYPE"", are returned to show the data type for the unique and foreign key columns. Foreign keys that have no named constraint (where the referenced column only has an unique index) will return undef for the ""UK_NAME"" field. statistics_info   $sth = $dbh->statistics_info( undef, $schema, $table, $unique_only, $quick ); Returns a statement handle that can be fetched from to give statistics information on a specific table and its indexes. The $table argument is mandatory. The $schema argument is optional but recommended. The $unique_only argument, if true, causes only information about unique indexes to be returned. The $quick argument is not used by DBD::Pg. For information on the format of the standard rows returned, please see the DBI documentation. DBI section on statistics_info In addition, the following Postgres specific columns are returned: pg_expression Postgres allows indexes on functions and scalar expressions based on one or more columns. This field will always be populated if an index, but the lack of an entry in the COLUMN_NAME should indicate that this is an index expression. tables   @names = $dbh->tables( undef, $schema, $table, $type, \%attr ); Supported by this driver as proposed by DBI. This method returns all tables and/or views (including materialized views) which are visible to the current user: see ""table_info"" for more information about the arguments. The name of the schema appears before the table or view name. This can be turned off by adding in the pg_noprefix attribute:   my @tables = $dbh->tables( '', '', 'dbd_pg_test', '', {pg_noprefix => 1} ); type_info_all   $type_info_all = $dbh->type_info_all; Supported by this driver as proposed by DBI. Information is only provided for SQL datatypes and for frequently used datatypes. The mapping between the PostgreSQL typename and the SQL92 datatype (if possible) has been done according to the following table:   +---------------+------------------------------------+   | typname       | SQL92                              |   |---------------+------------------------------------|   | bool          | BOOL                               |   | text          | /                                  |   | bpchar        | CHAR(n)                            |   | varchar       | VARCHAR(n)                         |   | int2          | SMALLINT                           |   | int4          | INT                                |   | int8          | BIGINT                             |   | money         | /                                  |   | float4        | FLOAT(p)   p<7=float4, p<16=float8 |   | float8        | REAL                               |   | abstime       | /                                  |   | reltime       | /                                  |   | tinterval     | /                                  |   | date          | /                                  |   | time          | /                                  |   | datetime      | /                                  |   | timespan      | TINTERVAL                          |   | timestamp     | TIMESTAMP                          |   +---------------+------------------------------------+ type_info   @type_info = $dbh->type_info($data_type); Returns a list of hash references holding information about one or more variants of $data_type. See the DBI documentation for more details. pg_server_trace   $dbh->pg_server_trace($filehandle); Writes debugging information from the PostgreSQL backend to a file. This is not related to the DBI ""trace"" method and you should not use this method unless you know what you are doing. If you do enable this, be aware that the file will grow very large, very quick. To stop logging to the file, use the ""pg_server_untrace"" method. The first argument must be a file handle, not a filename. Example:   my $pid = $dbh->{pg_pid};   my $file = ""pgbackend.$pid.debug.log"";   open(my $fh, "">$file"") or die qq{Could not open ""$file"": $!\n};   $dbh->pg_server_trace($fh);   ## Run code you want to trace here   $dbh->pg_server_untrace;   close($fh); pg_server_untrace   $dbh->pg_server_untrace; Stop server logging to a previously opened file. selectrow_array   @row_ary = $dbh->selectrow_array($sql);   @row_ary = $dbh->selectrow_array($sql, \%attr);   @row_ary = $dbh->selectrow_array($sql, \%attr, @bind_values); Returns an array of row information after preparing and executing the provided SQL string. The rows are returned by calling ""fetchrow_array"". The string can also be a statement handle generated by a previous prepare. Note that only the first row of data is returned. If called in a scalar context, only the first column of the first row is returned. Because this is not portable, it is not recommended that you use this method in that way. selectrow_arrayref   $ary_ref = $dbh->selectrow_arrayref($statement);   $ary_ref = $dbh->selectrow_arrayref($statement, \%attr);   $ary_ref = $dbh->selectrow_arrayref($statement, \%attr, @bind_values); Exactly the same as ""selectrow_array"", except that it returns a reference to an array, by internal use of the ""fetchrow_arrayref"" method. selectrow_hashref   $hash_ref = $dbh->selectrow_hashref($sql);   $hash_ref = $dbh->selectrow_hashref($sql, \%attr);   $hash_ref = $dbh->selectrow_hashref($sql, \%attr, @bind_values); Exactly the same as ""selectrow_array"", except that it returns a reference to an hash, by internal use of the ""fetchrow_hashref"" method. clone   $other_dbh = $dbh->clone(); Creates a copy of the database handle by connecting with the same parameters as the original handle, then trying to merge the attributes. See the DBI documentation for complete usage. Database Handle Attributes AutoCommit (boolean) Supported by DBD::Pg as proposed by DBI. According to the classification of DBI, PostgreSQL is a database in which a transaction must be explicitly started. Without starting a transaction, every change to the database becomes immediately permanent. The default of AutoCommit is on, but this may change in the future, so it is highly recommended that you explicitly set it when calling ""connect"". For details see the notes about ""Transactions"" elsewhere in this document. pg_bool_tf (boolean) DBD::Pg specific attribute. If true, boolean values will be returned as the characters 't' and 'f' instead of '1' and '0'. ReadOnly (boolean) $dbh->{ReadOnly} = 1; Specifies if the current database connection should be in read-only mode or not. In this mode, changes that change the database are not allowed and will throw an error. Note: this method will not work if ""AutoCommit"" is true. The read-only effect is accomplished by sending a SET TRANSACTION READ ONLY after every begin. For more details, please see: http://www.postgresql.org/docs/current/interactive/sql-set-transaction.html Please not that this method is not foolproof: there are still ways to update the database. Consider this a safety net to catch applications that should not be issuing commands such as INSERT, UPDATE, or DELETE. This method requires DBI version 1.55 or better. pg_server_prepare (integer) DBD::Pg specific attribute. Indicates if DBD::Pg should attempt to use server-side prepared statements. The default value, 1, indicates that prepared statements should be used whenever possible. See the section on the ""prepare"" method for more information. pg_switch_prepared (integer) DBD::Pg specific attribute. Indicates when DBD::Pg will internally switch from using PQexecParams to PQexecPrepared. In other words, when it will start using server-side prepared statements (assuming all other requirements for them are met). The default value, 2, means that a prepared statement will be prepared and used the second and subsequent time execute is called. To always use PQexecPrepared instead of PQexecParams, set pg_switch_prepared to 1 (this was the default behavior in earlier versions). Setting pg_switch_prepared to 0 will force DBD::Pg to always use PQexecParams. pg_placeholder_dollaronly (boolean) DBD::Pg specific attribute. Defaults to false. When true, question marks inside of statements are not treated as placeholders. Useful for statements that contain unquoted question marks, such as geometric operators. Note that you may also simply escape question marks with a backslash to prevent them from being treated as placeholders. pg_placeholder_nocolons (boolean) DBD::Pg specific attribute. Defaults to false. When true, colons inside of statements are not treated as placeholders. Useful for statements that contain an array slice. You may also place a backslash directly before the colon to prevent it from being treated as a placeholder. pg_enable_utf8 (integer) DBD::Pg specific attribute. The behavior of DBD::Pg with regards to this flag has changed as of version 3.0.0. The default value for this attribute, -1, indicates that the internal Perl utf8 flag will be turned on for all strings coming back from the database if the client_encoding is set to 'UTF8'. Use of this default is highly encouraged. If your code was previously using pg_enable_utf8, you can probably remove mention of it entirely. If this attribute is set to 0, then the internal utf8 flag will *never* be turned on for returned data, regardless of the current client_encoding. If this attribute is set to 1, then the internal utf8 flag will *always* be turned on for returned data, regardless of the current client_encoding (with the exception of bytea data). Note that the value of client_encoding is only checked on connection time. If you change the client_encoding to/from 'UTF8' after connecting, you can set pg_enable_utf8 to -1 to force DBD::Pg to read in the new client_encoding and act accordingly. pg_errorlevel (integer) DBD::Pg specific attribute. Sets the amount of information returned by the server's error messages. Valid entries are 0, 1, and 2. Any other number will be forced to the default value of 1. A value of 0 (""TERSE"") will show severity, primary text, and position only and will usually fit on a single line. A value of 1 (""DEFAULT"") will also show any detail, hint, or context fields. A value of 2 (""VERBOSE"") will show all available information. pg_lib_version (integer, read-only) DBD::Pg specific attribute. Indicates which version of PostgreSQL that DBD::Pg was compiled against. In other words, which libraries were used. Returns a number with major, minor, and revision together; version 8.1.4 would be returned as 80104. pg_server_version (integer, read-only) DBD::Pg specific attribute. Indicates which version of PostgreSQL that the current database handle is connected to. Returns a number with major, minor, and revision together; version 8.0.1 would be 80001. Name (string, read-only) Returns the name of the current database. This is the same as the DSN, without the ""dbi:Pg:"" part. Before version 2.0.0, this only returned the bare database name (e.g. 'foo'). From version 2.0.0 onwards, it returns the more correct output (e.g. 'dbname=foo') Username (string, read-only) Returns the name of the user connected to the database. pg_db (string, read-only) DBD::Pg specific attribute. Returns the name of the current database. pg_user (string, read-only) DBD::Pg specific attribute. Returns the name of the user that connected to the server. pg_host (string, read-only) DBD::Pg specific attribute. Returns the host of the current server connection. Locally connected hosts will return an empty string. pg_port (integer, read-only) DBD::Pg specific attribute. Returns the port of the connection to the server. pg_socket (integer, read-only) DBD::Pg specific attribute. Returns the file description number of the connection socket to the server. pg_pass (string, read-only) DBD::Pg specific attribute. Returns the password used to connect to the server. pg_options (string, read-only) DBD::Pg specific attribute. Returns the command-line options passed to the server. May be an empty string. pg_default_port (integer, read-only) DBD::Pg specific attribute. Returns the default port used if none is specifically given. pg_pid (integer, read-only) DBD::Pg specific attribute. Returns the process id (PID) of the backend server process handling the connection. pg_prepare_now (boolean) DBD::Pg specific attribute. Default is off. If true, then the ""prepare"" method will immediately prepare commands, rather than waiting until the first execute. pg_expand_array (boolean) DBD::Pg specific attribute. Defaults to true. If false, arrays returned from the server will not be changed into a Perl arrayref, but remain as a string. pg_async_status (integer, read-only) DBD::Pg specific attribute. Returns the current status of an asynchronous command. 0 indicates no asynchronous command is in progress, 1 indicates that an asynchronous command has started and -1 indicated that an asynchronous command has been cancelled. pg_standard_conforming_strings (boolean, read-only) DBD::Pg specific attribute. Returns true if the server is currently using standard conforming strings. Only available if the target server is version 8.2 or better. pg_INV_READ (integer, read-only) Constant to be used for the mode in ""pg_lo_creat"" and ""pg_lo_open"". pg_INV_WRITE (integer, read-only) Constant to be used for the mode in ""pg_lo_creat"" and ""pg_lo_open"". Driver (handle, read-only) Holds the handle of the parent driver. The only recommended use for this is to find the name of the driver using:   $dbh->{Driver}->{Name} pg_protocol (integer, read-only) DBD::Pg specific attribute. Returns the version of the PostgreSQL server. If DBD::Pg is unable to figure out the version, it will return a ""0"". Otherwise, a ""3"" is returned. RowCacheSize Not used by DBD::Pg DBI STATEMENT HANDLE OBJECTS Statement Handle Methods bind_param   $rv = $sth->bind_param($param_num, $bind_value);   $rv = $sth->bind_param($param_num, $bind_value, $bind_type);   $rv = $sth->bind_param($param_num, $bind_value, \%attr); Allows the user to bind a value and/or a data type to a placeholder. This is especially important when using server-side prepares. See the ""prepare"" method for more information. The value of $param_num is a number if using the '?' or '$1' style placeholders. If using "":foo"" style placeholders, the complete name (e.g. "":foo"") must be given. For numeric values, you can either use a number or use a literal '$1'. See the examples below. The $bind_value argument is fairly self-explanatory. A value of undef will bind a NULL to the placeholder. Using undef is useful when you want to change just the type and will be overwriting the value later. (Any value is actually usable, but undef is easy and efficient). The \%attr hash is used to indicate the data type of the placeholder. The default value is ""varchar"". If you need something else, you must use one of the values provided by DBI or by DBD::Pg. To use a SQL value, modify your ""use DBI"" statement at the top of your script as follows:   use DBI qw(:sql_types); This will import some constants into your script. You can plug those directly into the ""bind_param"" call. Some common ones that you will encounter are:   SQL_INTEGER To use PostgreSQL data types, import the list of values like this:   use DBD::Pg qw(:pg_types); You can then set the data types by setting the value of the pg_type key in the hash passed to ""bind_param"". The current list of Postgres data types exported is:  PG_ABSTIME PG_ABSTIMEARRAY PG_ACLITEM PG_ACLITEMARRAY PG_ANY PG_ANYARRAY  PG_ANYELEMENT PG_ANYENUM PG_ANYNONARRAY PG_ANYRANGE PG_BIT PG_BITARRAY  PG_BOOL PG_BOOLARRAY PG_BOX PG_BOXARRAY PG_BPCHAR PG_BPCHARARRAY  PG_BYTEA PG_BYTEAARRAY PG_CHAR PG_CHARARRAY PG_CID PG_CIDARRAY  PG_CIDR PG_CIDRARRAY PG_CIRCLE PG_CIRCLEARRAY PG_CSTRING PG_CSTRINGARRAY  PG_DATE PG_DATEARRAY PG_DATERANGE PG_DATERANGEARRAY PG_EVENT_TRIGGER PG_FDW_HANDLER  PG_FLOAT4 PG_FLOAT4ARRAY PG_FLOAT8 PG_FLOAT8ARRAY PG_GTSVECTOR PG_GTSVECTORARRAY  PG_INET PG_INETARRAY PG_INT2 PG_INT2ARRAY PG_INT2VECTOR PG_INT2VECTORARRAY  PG_INT4 PG_INT4ARRAY PG_INT4RANGE PG_INT4RANGEARRAY PG_INT8 PG_INT8ARRAY  PG_INT8RANGE PG_INT8RANGEARRAY PG_INTERNAL PG_INTERVAL PG_INTERVALARRAY PG_JSON  PG_JSONARRAY PG_JSONB PG_JSONBARRAY PG_LANGUAGE_HANDLER PG_LINE PG_LINEARRAY  PG_LSEG PG_LSEGARRAY PG_MACADDR PG_MACADDRARRAY PG_MONEY PG_MONEYARRAY  PG_NAME PG_NAMEARRAY PG_NUMERIC PG_NUMERICARRAY PG_NUMRANGE PG_NUMRANGEARRAY  PG_OID PG_OIDARRAY PG_OIDVECTOR PG_OIDVECTORARRAY PG_OPAQUE PG_PATH  PG_PATHARRAY PG_PG_ATTRIBUTE PG_PG_CLASS PG_PG_LSN PG_PG_LSNARRAY PG_PG_NODE_TREE  PG_PG_PROC PG_PG_TYPE PG_POINT PG_POINTARRAY PG_POLYGON PG_POLYGONARRAY  PG_RECORD PG_RECORDARRAY PG_REFCURSOR PG_REFCURSORARRAY PG_REGCLASS PG_REGCLASSARRAY  PG_REGCONFIG PG_REGCONFIGARRAY PG_REGDICTIONARY PG_REGDICTIONARYARRAY PG_REGOPER PG_REGOPERARRAY  PG_REGOPERATOR PG_REGOPERATORARRAY PG_REGPROC PG_REGPROCARRAY PG_REGPROCEDURE PG_REGPROCEDUREARRAY  PG_REGTYPE PG_REGTYPEARRAY PG_RELTIME PG_RELTIMEARRAY PG_SMGR PG_TEXT  PG_TEXTARRAY PG_TID PG_TIDARRAY PG_TIME PG_TIMEARRAY PG_TIMESTAMP  PG_TIMESTAMPARRAY PG_TIMESTAMPTZ PG_TIMESTAMPTZARRAY PG_TIMETZ PG_TIMETZARRAY PG_TINTERVAL  PG_TINTERVALARRAY PG_TRIGGER PG_TSQUERY PG_TSQUERYARRAY PG_TSRANGE PG_TSRANGEARRAY  PG_TSTZRANGE PG_TSTZRANGEARRAY PG_TSVECTOR PG_TSVECTORARRAY PG_TXID_SNAPSHOT PG_TXID_SNAPSHOTARRAY  PG_UNKNOWN PG_UUID PG_UUIDARRAY PG_VARBIT PG_VARBITARRAY PG_VARCHAR  PG_VARCHARARRAY PG_VOID PG_XID PG_XIDARRAY PG_XML PG_XMLARRAY Data types are ""sticky,"" in that once a data type is set to a certain placeholder, it will remain for that placeholder, unless it is explicitly set to something else afterwards. If the statement has already been prepared, and you switch the data type to something else, DBD::Pg will re-prepare the statement for you before doing the next execute. Examples:   use DBI qw(:sql_types);   use DBD::Pg qw(:pg_types);    $SQL = ""SELECT id FROM ptable WHERE size > ? AND title = ?"";   $sth = $dbh->prepare($SQL);    ## Both arguments below are bound to placeholders as ""varchar""   $sth->execute(123, ""Merk"");    ## Reset the datatype for the first placeholder to an integer   $sth->bind_param(1, undef, SQL_INTEGER);    ## The ""undef"" bound above is not used, since we supply params to execute   $sth->execute(123, ""Merk"");    ## Set the first placeholder's value and data type   $sth->bind_param(1, 234, { pg_type => PG_TIMESTAMP });    ## Set the second placeholder's value and data type.   ## We don't send a third argument, so the default ""varchar"" is used   $sth->bind_param('$2', ""Zool"");    ## We realize that the wrong data type was set above, so we change it:   $sth->bind_param('$1', 234, { pg_type => SQL_INTEGER });    ## We also got the wrong value, so we change that as well.   ## Because the data type is sticky, we don't need to change it   $sth->bind_param(1, 567);    ## This executes the statement with 567 (integer) and ""Zool"" (varchar)   $sth->execute(); bind_param_inout   $rv = $sth->bind_param_inout($param_num, \$scalar, 0); Experimental support for this feature is provided. The first argument to bind_param_inout should be a placeholder number. The second argument should be a reference to a scalar variable in your script. The third argument is not used and should simply be set to 0. Note that what this really does is assign a returned column to the variable, in the order in which the column appears. For example:   my $foo = 123;   $sth = $dbh->prepare(""SELECT 1+?::int"");   $sth->bind_param_inout(1, \$foo, 0);   $foo = 222;   $sth->execute(444);   $sth->fetch; The above will cause $foo to have a new value of ""223"" after the final fetch. Note that the variables bound in this manner are very sticky, and will trump any values passed in to execute. This is because the binding is done as late as possible, at the execute() stage, allowing the value to be changed between the time it was bound and the time the query is executed. Thus, the above execute is the same as:   $sth->execute(); bind_param_array   $rv = $sth->bind_param_array($param_num, $array_ref_or_value)   $rv = $sth->bind_param_array($param_num, $array_ref_or_value, $bind_type)   $rv = $sth->bind_param_array($param_num, $array_ref_or_value, \%attr) Binds an array of values to a placeholder, so that each is used in turn by a call to the ""execute_array"" method. execute   $rv = $sth->execute(@bind_values); Executes a previously prepared statement. In addition to UPDATE, DELETE, INSERT statements, for which it returns always the number of affected rows, the execute method can also be used for SELECT ... INTO table statements. The ""prepare/bind/execute"" process has changed significantly for PostgreSQL servers 7.4 and later: please see the prepare() and bind_param() entries for much more information. Setting one of the bind_values to ""undef"" is the equivalent of setting the value to NULL in the database. Setting the bind_value to $DBDPG_DEFAULT is equivalent to sending the literal string 'DEFAULT' to the backend. Note that using this option will force server-side prepares off until such time as PostgreSQL supports using DEFAULT in prepared statements. DBD::Pg also supports passing in arrays to execute: simply pass in an arrayref, and DBD::Pg will flatten it into a string suitable for input on the backend. If you are using Postgres version 8.2 or greater, you can also use any of the fetch methods to retrieve the values of a RETURNING clause after you execute an UPDATE, DELETE, or INSERT. For example:   $dbh->do(q{CREATE TABLE abc (id SERIAL, country TEXT)});   $SQL = q{INSERT INTO abc (country) VALUES (?) RETURNING id};   $sth = $dbh->prepare($SQL);   $sth->execute('France');   $countryid = $sth->fetch()->[0];   $sth->execute('New Zealand');   $countryid = $sth->fetch()->[0]; execute_array   $tuples = $sth->execute_array() or die $sth->errstr;   $tuples = $sth->execute_array(\%attr) or die $sth->errstr;   $tuples = $sth->execute_array(\%attr, @bind_values) or die $sth->errstr;    ($tuples, $rows) = $sth->execute_array(\%attr) or die $sth->errstr;   ($tuples, $rows) = $sth->execute_array(\%attr, @bind_values) or die $sth->errstr; Execute a prepared statement once for each item in a passed-in hashref, or items that were previously bound via the ""bind_param_array"" method. See the DBI documentation for more details. execute_for_fetch   $tuples = $sth->execute_for_fetch($fetch_tuple_sub);   $tuples = $sth->execute_for_fetch($fetch_tuple_sub, \@tuple_status);    ($tuples, $rows) = $sth->execute_for_fetch($fetch_tuple_sub);   ($tuples, $rows) = $sth->execute_for_fetch($fetch_tuple_sub, \@tuple_status); Used internally by the ""execute_array"" method, and rarely used directly. See the DBI documentation for more details. fetchrow_arrayref   $ary_ref = $sth->fetchrow_arrayref; Fetches the next row of data from the statement handle, and returns a reference to an array holding the column values. Any columns that are NULL are returned as undef within the array. If there are no more rows or if an error occurs, the this method return undef. You should check $sth->err afterwards (or use the RaiseError attribute) to discover if the undef returned was due to an error. Note that the same array reference is returned for each fetch, so don't store the reference and then use it after a later fetch. Also, the elements of the array are also reused for each row, so take care if you want to take a reference to an element. See also ""bind_columns"". fetchrow_array   @ary = $sth->fetchrow_array; Similar to the ""fetchrow_arrayref"" method, but returns a list of column information rather than a reference to a list. Do not use this in a scalar context. fetchrow_hashref   $hash_ref = $sth->fetchrow_hashref;   $hash_ref = $sth->fetchrow_hashref($name); Fetches the next row of data and returns a hashref containing the name of the columns as the keys and the data itself as the values. Any NULL value is returned as an undef value. If there are no more rows or if an error occurs, the this method return undef. You should check $sth->err afterwards (or use the RaiseError attribute) to discover if the undef returned was due to an error. The optional $name argument should be either NAME, NAME_lc or NAME_uc, and indicates what sort of transformation to make to the keys in the hash. fetchall_arrayref   $tbl_ary_ref = $sth->fetchall_arrayref();   $tbl_ary_ref = $sth->fetchall_arrayref( $slice );   $tbl_ary_ref = $sth->fetchall_arrayref( $slice, $max_rows ); Returns a reference to an array of arrays that contains all the remaining rows to be fetched from the statement handle. If there are no more rows, an empty arrayref will be returned. If an error occurs, the data read in so far will be returned. Because of this, you should always check $sth->err after calling this method, unless RaiseError has been enabled. If $slice is an array reference, fetchall_arrayref uses the ""fetchrow_arrayref"" method to fetch each row as an array ref. If the $slice array is not empty then it is used as a slice to select individual columns by perl array index number (starting at 0, unlike column and parameter numbers which start at 1). With no parameters, or if $slice is undefined, fetchall_arrayref acts as if passed an empty array ref. If $slice is a hash reference, fetchall_arrayref uses ""fetchrow_hashref"" to fetch each row as a hash reference. See the DBI documentation for a complete discussion. fetchall_hashref   $hash_ref = $sth->fetchall_hashref( $key_field ); Returns a hashref containing all rows to be fetched from the statement handle. See the DBI documentation for a full discussion. finish   $rv = $sth->finish; Indicates to DBI that you are finished with the statement handle and are not going to use it again. Only needed when you have not fetched all the possible rows. rows   $rv = $sth->rows; Returns the number of rows returned by the last query. In contrast to many other DBD modules, the number of rows is available immediately after calling $sth->execute. Note that the ""execute"" method itself returns the number of rows itself, which means that this method is rarely needed. bind_col   $rv = $sth->bind_col($column_number, \$var_to_bind);   $rv = $sth->bind_col($column_number, \$var_to_bind, \%attr );   $rv = $sth->bind_col($column_number, \$var_to_bind, $bind_type ); Binds a Perl variable and/or some attributes to an output column of a SELECT statement. Column numbers count up from 1. You do not need to bind output columns in order to fetch data. See the DBI documentation for a discussion of the optional parameters \%attr and $bind_type bind_columns   $rv = $sth->bind_columns(@list_of_refs_to_vars_to_bind); Calls the ""bind_col"" method for each column in the SELECT statement, using the supplied list. dump_results   $rows = $sth->dump_results($maxlen, $lsep, $fsep, $fh); Fetches all the rows from the statement handle, calls DBI::neat_list for each row, and prints the results to $fh (which defaults to STDOUT). Rows are separated by $lsep (which defaults to a newline). Columns are separated by $fsep (which defaults to a comma). The $maxlen controls how wide the output can be, and defaults to 35. This method is designed as a handy utility for prototyping and testing queries. Since it uses ""neat_list"" to format and edit the string for reading by humans, it is not recommended for data transfer applications. blob_read   $blob = $sth->blob_read($id, $offset, $len); Supported by DBD::Pg. This method is implemented by DBI but not currently documented by DBI, so this method might change. This method seems to be heavily influenced by the current implementation of blobs in Oracle. Nevertheless we try to be as compatible as possible. Whereas Oracle suffers from the limitation that blobs are related to tables and every table can have only one blob (datatype LONG), PostgreSQL handles its blobs independent of any table by using so-called object identifiers. This explains why the blob_read method is blessed into the STATEMENT package and not part of the DATABASE package. Here the field parameter has been used to handle this object identifier. The offset and len parameters may be set to zero, in which case the whole blob is fetched at once. See also the PostgreSQL-specific functions concerning blobs, which are available via the func interface. For further information and examples about blobs, please read the chapter about Large Objects in the PostgreSQL Programmer's Guide at http://www.postgresql.org/docs/current/static/largeobjects.html. Statement Handle Attributes NUM_OF_FIELDS (integer, read-only) Returns the number of columns returned by the current statement. A number will only be returned for SELECT statements, for SHOW statements (which always return 1), and for INSERT, UPDATE, and DELETE statements which contain a RETURNING clause. This method returns undef if called before execute(). NUM_OF_PARAMS (integer, read-only) Returns the number of placeholders in the current statement. NAME (arrayref, read-only) Returns an arrayref of column names for the current statement. This method will only work for SELECT statements, for SHOW statements, and for INSERT, UPDATE, and DELETE statements which contain a RETURNING clause. This method returns undef if called before execute(). NAME_lc (arrayref, read-only) The same as the NAME attribute, except that all column names are forced to lower case. NAME_uc (arrayref, read-only) The same as the NAME attribute, except that all column names are forced to upper case. NAME_hash (hashref, read-only) Similar to the NAME attribute, but returns a hashref of column names instead of an arrayref. The names of the columns are the keys of the hash, and the values represent the order in which the columns are returned, starting at 0. This method returns undef if called before execute(). NAME_lc_hash (hashref, read-only) The same as the NAME_hash attribute, except that all column names are forced to lower case. NAME_uc_hash (hashref, read-only) The same as the NAME_hash attribute, except that all column names are forced to lower case. TYPE (arrayref, read-only) Returns an arrayref indicating the data type for each column in the statement. This method returns undef if called before execute(). PRECISION (arrayref, read-only) Returns an arrayref of integer values for each column returned by the statement. The number indicates the precision for NUMERIC columns, the size in number of characters for CHAR and VARCHAR columns, and for all other types of columns it returns the number of bytes. This method returns undef if called before execute(). SCALE (arrayref, read-only) Returns an arrayref of integer values for each column returned by the statement. The number indicates the scale of the that column. The only type that will return a value is NUMERIC. This method returns undef if called before execute(). NULLABLE (arrayref, read-only) Returns an arrayref of integer values for each column returned by the statement. The number indicates if the column is nullable or not. 0 = not nullable, 1 = nullable, 2 = unknown. This method returns undef if called before execute(). Database (dbh, read-only) Returns the database handle this statement handle was created from. ParamValues (hash ref, read-only) Returns a reference to a hash containing the values currently bound to placeholders. If the ""named parameters"" type of placeholders are being used (such as "":foo""), then the keys of the hash will be the names of the placeholders (without the colon). If the ""dollar sign numbers"" type of placeholders are being used, the keys of the hash will be the numbers, without the dollar signs. If the ""question mark"" type is used, integer numbers will be returned, starting at one and increasing for every placeholder. If this method is called before ""execute"", the literal values passed in are returned. If called after ""execute"", then the quoted versions of the values are returned. ParamTypes (hash ref, read-only) Returns a reference to a hash containing the type names currently bound to placeholders. The keys are the same as returned by the ParamValues method. The values are hashrefs containing a single key value pair, in which the key is either 'TYPE' if the type has a generic SQL equivalent, and 'pg_type' if the type can only be expressed by a Postgres type. The value is the internal number corresponding to the type originally passed in. (Placeholders that have not yet been bound will return undef as the value). This allows the output of ParamTypes to be passed back to the ""bind_param"" method. Statement (string, read-only) Returns the statement string passed to the most recent ""prepare"" method called in this database handle, even if that method failed. This is especially useful where ""RaiseError"" is enabled and the exception handler checks $@ and sees that a prepare method call failed. pg_current_row (integer, read-only) DBD::Pg specific attribute. Returns the number of the tuple (row) that was most recently fetched. Returns zero before and after fetching is performed. pg_numbound (integer, read-only) DBD::Pg specific attribute. Returns the number of placeholders that are currently bound (via bind_param). pg_bound (hashref, read-only) DBD::Pg specific attribute. Returns a hash of all named placeholders. The key is the name of the placeholder, and the value is a 0 or a 1, indicating if the placeholder has been bound yet (e.g. via bind_param) pg_size (arrayref, read-only) DBD::Pg specific attribute. It returns a reference to an array of integer values for each column. The integer shows the size of the column in bytes. Variable length columns are indicated by -1. pg_type (arrayref, read-only) DBD::Pg specific attribute. It returns a reference to an array of strings for each column. The string shows the name of the data_type. pg_segments (arrayref, read-only) DBD::Pg specific attribute. Returns an arrayref of the query split on the placeholders. pg_oid_status (integer, read-only) DBD::Pg specific attribute. It returns the OID of the last INSERT command. pg_cmd_status (integer, read-only) DBD::Pg specific attribute. It returns the type of the last command. Possible types are: ""INSERT"", ""DELETE"", ""UPDATE"", ""SELECT"". pg_direct (boolean) DBD::Pg specific attribute. Default is false. If true, the query is passed directly to the backend without parsing for placeholders. pg_prepare_now (boolean) DBD::Pg specific attribute. Default is off. If true, the query will be immediately prepared, rather than waiting for the ""execute"" call. pg_prepare_name (string) DBD::Pg specific attribute. Specifies the name of the prepared statement to use for this statement handle. Not normally needed, see the section on the ""prepare"" method for more information. pg_server_prepare (integer) DBD::Pg specific attribute. Indicates if DBD::Pg should attempt to use server-side prepared statements for this statement handle. The default value, 1, indicates that prepared statements should be used whenever possible. See the section on the ""prepare"" method for more information. pg_switch_prepared (integer) DBD::Pg specific attribute. Indicates when DBD::Pg will internally switch from using PQexecParams to PQexecPrepared. In other words, when it will start using server-side prepared statements (assuming all other requirements for them are met). The default value, 2, means that a prepared statement will be prepared and used the second and subsequent time execute is called. To always use PQexecPrepared instead of PQexecParams, set pg_switch_prepared to 1 (this was the default behavior in earlier versions). Setting pg_switch_prepared to 0 will force DBD::Pg to always use PQexecParams. pg_placeholder_dollaronly (boolean) DBD::Pg specific attribute. Defaults to false. When true, question marks inside of the query being prepared are not treated as placeholders. Useful for statements that contain unquoted question marks, such as geometric operators. Note that you may also simply escape question marks with a backslash to prevent them from being treated as placeholders. pg_placeholder_nocolons (boolean) DBD::Pg specific attribute. Defaults to false. When true, colons inside of statements are not treated as placeholders. Useful for statements that contain an array slice. You may also place a backslash directly before the colon to prevent it from being treated as a placeholder. pg_async (integer) DBD::Pg specific attribute. Indicates the current behavior for asynchronous queries. See the section on ""Asynchronous Constants"" for more information. RowsInCache Not used by DBD::Pg RowCache Not used by DBD::Pg CursorName Not used by DBD::Pg. See the note about ""Cursors"" elsewhere in this document. FURTHER INFORMATION Encoding DBD::Pg has extensive support for a client_encoding of UTF-8, and most things like encoding and decoding should happen automatically. If you are using a different encoding, you will need do the encoding and decoding yourself. For this reason, it is highly recommended to always use a client_encoding of UTF-8. The server_encoding can be anything, and no recommendations are made there, other than avoid SQL_ASCII whenever possible. Transactions Transaction behavior is controlled via the ""AutoCommit"" attribute. For a complete definition of AutoCommit please refer to the DBI documentation. According to the DBI specification the default for AutoCommit is a true value. In this mode, any change to the database becomes valid immediately. Any BEGIN, COMMIT or ROLLBACK statements will be rejected. Note that preparing a statement does not always contact the server, as the actual PREPARE is usually postponed until the first call to ""execute"". Savepoints PostgreSQL version 8.0 introduced the concept of savepoints, which allows transactions to be rolled back to a certain point without affecting the rest of the transaction. DBD::Pg encourages using the following methods to control savepoints: pg_savepoint Creates a savepoint. This will fail unless you are inside of a transaction. The only argument is the name of the savepoint. Note that PostgreSQL DOES allow multiple savepoints with the same name to exist.   $dbh->pg_savepoint(""mysavepoint""); pg_rollback_to Rolls the database back to a named savepoint, discarding any work performed after that point. If more than one savepoint with that name exists, rolls back to the most recently created one.   $dbh->pg_rollback_to(""mysavepoint""); pg_release Releases (or removes) a named savepoint. If more than one savepoint with that name exists, it will only destroy the most recently created one. Note that all savepoints created after the one being released are also destroyed.   $dbh->pg_release(""mysavepoint""); Asynchronous Queries It is possible to send a query to the backend and have your script do other work while the query is running on the backend. Both queries sent by the ""do"" method, and by the ""execute"" method can be sent asynchronously. (NOTE: This will only work if DBD::Pg has been compiled against Postgres libraries of version 8.0 or greater) The basic usage is as follows:   use DBD::Pg ':async';    print ""Async do() example:\n"";   $dbh->do(""SELECT long_running_query()"", {pg_async => PG_ASYNC});   do_something_else();   {     if ($dbh->pg_ready()) {       $res = $dbh->pg_result();       print ""Result of do(): $res\n"";     }     print ""Query is still running...\n"";     if (cancel_request_received) {       $dbh->pg_cancel();     }     sleep 1;     redo;   }    print ""Async prepare/execute example:\n"";   $sth = $dbh->prepare(""SELECT long_running_query(1)"", {pg_async => PG_ASYNC});   $sth->execute();    ## Changed our mind, cancel and run again:   $sth = $dbh->prepare(""SELECT 678"", {pg_async => PG_ASYNC + PG_OLDQUERY_CANCEL});   $sth->execute();    do_something_else();    if (!$sth->pg_ready) {     do_another_thing();   }    ## We wait until it is done, and get the result:   $res = $dbh->pg_result(); Asynchronous Constants There are currently three asynchronous constants exported by DBD::Pg. You can import all of them by putting either of these at the top of your script:   use DBD::Pg;    use DBD::Pg ':async'; You may also use the numbers instead of the constants, but using the constants is recommended as it makes your script more readable. PG_ASYNC This is a constant for the number 1. It is passed to either the ""do"" or the ""prepare"" method as a value to the pg_async key and indicates that the query should be sent asynchronously. PG_OLDQUERY_CANCEL This is a constant for the number 2. When passed to either the ""do"" or the ""prepare"" method, it causes any currently running asynchronous query to be cancelled and rolled back. It has no effect if no asynchronous query is currently running. PG_OLDQUERY_WAIT This is a constant for the number 4. When passed to either the ""do"" or the ""prepare"" method, it waits for any currently running asynchronous query to complete. It has no effect if there is no asynchronous query currently running. Asynchronous Methods pg_cancel This database-level method attempts to cancel any currently running asynchronous query. It returns true if the cancel succeeded, and false otherwise. Note that a query that has finished before this method is executed will also return false. WARNING: a successful cancellation may leave the database in an unusable state, so you may need to ROLLBACK or ROLLBACK TO a savepoint. As of version 2.17.0 of DBD::Pg, rollbacks are not done automatically.   $result = $dbh->pg_cancel(); pg_ready This method can be called as a database handle method or (for convenience) as a statement handle method. Both simply see if a previously issued asynchronous query has completed yet. It returns true if the statement has finished, in which case you should then call the ""pg_result"" method. Calls to pg_ready() should only be used when you have other things to do while the query is running. If you simply want to wait until the query is done, do not call pg_ready() over and over, but simply call the pg_result() method.   my $time = 0;   while (!$dbh->pg_ready) {     print ""Query is still running. Seconds: $time\n"";     $time++;     sleep 1;   }   $result = $dbh->pg_result; pg_result This database handle method returns the results of a previously issued asynchronous query. If the query is still running, this method will wait until it has finished. The result returned is the number of rows: the same thing that would have been returned by the asynchronous ""do"" or ""execute"" if it had been called without an asynchronous flag.   $result = $dbh->pg_result; Asynchronous Examples Here are some working examples of asynchronous queries. Note that we'll use the pg_sleep function to emulate a long-running query.   use strict;   use warnings;   use Time::HiRes 'sleep';   use DBD::Pg ':async';    my $dbh = DBI->connect('dbi:Pg:dbname=postgres', 'postgres', '', {AutoCommit=>0,RaiseError=>1});    ## Kick off a long running query on the first database:   my $sth = $dbh->prepare(""SELECT pg_sleep(?)"", {pg_async => PG_ASYNC});   $sth->execute(5);    ## While that is running, do some other things   print ""Your query is processing. Thanks for waiting\n"";   check_on_the_kids(); ## Expensive sub, takes at least three seconds.    while (!$dbh->pg_ready) {     check_on_the_kids();     ## If the above function returns quickly for some reason, we add a small sleep     sleep 0.1;   }    print ""The query has finished. Gathering results\n"";   my $result = $sth->pg_result;   print ""Result: $result\n"";   my $info = $sth->fetchall_arrayref(); Without asynchronous queries, the above script would take about 8 seconds to run: five seconds waiting for the execute to finish, then three for the check_on_the_kids() function to return. With asynchronous queries, the script takes about 6 seconds to run, and gets in two iterations of check_on_the_kids in the process. Here's an example showing the ability to cancel a long-running query. Imagine two slave databases in different geographic locations over a slow network. You need information as quickly as possible, so you query both at once. When you get an answer, you tell the other one to stop working on your query, as you don't need it anymore.   use strict;   use warnings;   use Time::HiRes 'sleep';   use DBD::Pg ':async';    my $dbhslave1 = DBI->connect('dbi:Pg:dbname=postgres;host=slave1', 'postgres', '', {AutoCommit=>0,RaiseError=>1});   my $dbhslave2 = DBI->connect('dbi:Pg:dbname=postgres;host=slave2', 'postgres', '', {AutoCommit=>0,RaiseError=>1});    $SQL = ""SELECT count(*) FROM largetable WHERE flavor='blueberry'"";    my $sth1 = $dbhslave1->prepare($SQL, {pg_async => PG_ASYNC});   my $sth2 = $dbhslave2->prepare($SQL, {pg_async => PG_ASYNC});    $sth1->execute();   $sth2->execute();    my $winner;   while (!defined $winner) {     if ($sth1->pg_ready) {       $winner = 1;     }     elsif ($sth2->pg_ready) {       $winner = 2;     }     Time::HiRes::sleep 0.05;   }    my $count;   if ($winner == 1) {     $sth2->pg_cancel();     $sth1->pg_result();     $count = $sth1->fetchall_arrayref()->[0][0];   }   else {     $sth1->pg_cancel();     $sth2->pg_result();     $count = $sth2->fetchall_arrayref()->[0][0];   } Array support DBD::Pg allows arrays (as arrayrefs) to be passed in to both the ""quote"" and the ""execute"" methods. In both cases, the array is flattened into a string representing a Postgres array. When fetching rows from a table that contains a column with an array type, the result will be passed back to your script as an arrayref. To turn off the automatic parsing of returned arrays into arrayrefs, you can set the attribute pg_expand_array, which is true by default.   $dbh->{pg_expand_array} = 0; COPY support DBD::Pg allows for quick (bulk) reading and storing of data by using the COPY command. The basic process is to use $dbh->do to issue a COPY command, and then to either add rows using ""pg_putcopydata"", or to read them by using ""pg_getcopydata"". The first step is to put the server into ""COPY"" mode. This is done by sending a complete COPY command to the server, by using the ""do"" method. For example:   $dbh->do(""COPY foobar FROM STDIN""); This would tell the server to enter a COPY IN mode (yes, that's confusing, but the mode is COPY IN because of the command COPY FROM). It is now ready to receive information via the ""pg_putcopydata"" method. The complete syntax of the COPY command is more complex and not documented here: the canonical PostgreSQL documentation for COPY can be found at: http://www.postgresql.org/docs/current/static/sql-copy.html Once a COPY command has been issued, no other SQL commands are allowed until ""pg_putcopyend"" has been issued (for COPY FROM), or the final ""pg_getcopydata"" has been called (for COPY TO). Note: All other COPY methods (pg_putline, pg_getline, etc.) are now heavily deprecated in favor of the pg_getcopydata, pg_putcopydata, and pg_putcopyend methods. pg_getcopydata Used to retrieve data from a table after the server has been put into a COPY OUT mode by calling ""COPY tablename TO STDOUT"". Data is always returned one data row at a time. The first argument to pg_getcopydata is the variable into which the data will be stored (this variable should not be undefined, or it may throw a warning, although it may be a reference). The pg_getcopydata method returns a number greater than 1 indicating the new size of the variable, or a -1 when the COPY has finished. Once a -1 has been returned, no other action is necessary, as COPY mode will have already terminated. Example:   $dbh->do(""COPY mytable TO STDOUT"");   my @data;   my $x=0;   1 while $dbh->pg_getcopydata($data[$x++]) >= 0; There is also a variation of this method called pg_getcopydata_async, which, as the name suggests, returns immediately. The only difference from the original method is that this version may return a 0, indicating that the row is not ready to be delivered yet. When this happens, the variable has not been changed, and you will need to call the method again until you get a non-zero result. (Data is still always returned one data row at a time.) pg_putcopydata Used to put data into a table after the server has been put into COPY IN mode by calling ""COPY tablename FROM STDIN"". The only argument is the data you want inserted. Issue a pg_putcopyend() when you have added all your rows. The default delimiter is a tab character, but this can be changed in the COPY statement. Returns a 1 on successful input. Examples:   ## Simple example:   $dbh->do(""COPY mytable FROM STDIN"");   $dbh->pg_putcopydata(""123\tPepperoni\t3\n"");   $dbh->pg_putcopydata(""314\tMushroom\t8\n"");   $dbh->pg_putcopydata(""6\tAnchovies\t100\n"");   $dbh->pg_putcopyend();    ## This example uses explicit columns and a custom delimiter   $dbh->do(""COPY mytable(flavor, slices) FROM STDIN WITH DELIMITER '~'"");   $dbh->pg_putcopydata(""Pepperoni~123\n"");   $dbh->pg_putcopydata(""Mushroom~314\n"");   $dbh->pg_putcopydata(""Anchovies~6\n"");   $dbh->pg_putcopyend(); pg_putcopyend When you are finished with pg_putcopydata, call pg_putcopyend to let the server know that you are done, and it will return to a normal, non-COPY state. Returns a 1 on success. This method will fail if called when not in COPY IN mode. Large Objects DBD::Pg supports all largeobject functions provided by libpq via the $dbh->pg_lo* methods. Please note that access to a large object, even read-only large objects, must be put into a transaction. Cursors Although PostgreSQL supports cursors, they have not been used in the current implementation. When DBD::Pg was created, cursors in PostgreSQL could only be used inside a transaction block. Because only one transaction block at a time is allowed, this would have implied the restriction not to use any nested SELECT statements. Therefore the ""execute"" method fetches all data at once into data structures located in the front-end application. This fact must to be considered when selecting large amounts of data! You can use cursors in your application, but you'll need to do a little work. First you must declare your cursor. Now you can issue queries against the cursor, then select against your queries. This typically results in a double loop, like this:   # WITH HOLD is not needed if AutoCommit is off   $dbh->do(""DECLARE csr CURSOR WITH HOLD FOR $sql"");   while (1) {     my $sth = $dbh->prepare(""fetch 1000 from csr"");     $sth->execute;     last if 0 == $sth->rows;      while (my $row = $sth->fetchrow_hashref) {       # Do something with the data.     }   }   $dbh->do(""CLOSE csr""); Datatype bool The current implementation of PostgreSQL returns 't' for true and 'f' for false. From the Perl point of view, this is a rather unfortunate choice. DBD::Pg therefore translates the result for the BOOL data type in a Perlish manner: 'f' becomes the number 0 and 't' becomes the number 1. This way the application does not have to check the database-specific returned values for the data-type BOOL because Perl treats 0 as false and 1 as true. You may set the pg_bool_tf attribute to a true value to change the values back to 't' and 'f' if you wish. Boolean values can be passed to PostgreSQL as TRUE, 't', 'true', 'y', 'yes' or '1' for true and FALSE, 'f', 'false', 'n', 'no' or '0' for false. Schema support The PostgreSQL schema concept may differ from those of other databases. In a nutshell, a schema is a named collection of objects within a single database. Please refer to the PostgreSQL documentation for more details: http://www.postgresql.org/docs/current/static/ddl-schemas.html DBD::Pg does not provide explicit support for PostgreSQL schemas. However, schema functionality may be used without any restrictions by explicitly addressing schema objects, e.g.   my $res = $dbh->selectall_arrayref(""SELECT * FROM my_schema.my_table""); or by manipulating the schema search path with SET search_path, e.g.   $dbh->do(""SET search_path TO my_schema, public""); SEE ALSO The DBI module BUGS To report a bug, or view the current list of bugs, please visit http://rt.cpan.org/Public/Dist/Display.html?Name=DBD-Pg DEVELOPMENT Patches can be submitted to rt.cpan.org. Detailed information on how to help out with this module can be found in the README.dev file. The latest development version can be obtained via: git clone git://bucardo.org/dbdpg.git AUTHORS DBI by Tim Bunce http://www.tim.bunce.name The original DBD-Pg was by Edmund Mergl (E.Mergl@bawue.de) and Jeffrey W. Baker (jwbaker@acm.org). Major developers include David Wheeler <david@justatheory.com>, Jason Stewart <jason@openinformatics.com>, Bruce Momjian <pgman@candle.pha.pa.us>, and Greg Sabino Mullane <greg@turnstep.com>, with help from many others: see the Changes file (http://search.cpan.org/dist/DBD-Pg/Changes) for a complete list. Parts of this package were originally copied from DBI and DBD-Oracle. Mailing List The current maintainers may be reached through the 'dbd-pg' mailing list: <dbd-pg@perl.org>. Subscribe by sending an email to dbd-pg-subscribe@perl.org. Visit the archives at http://grokbase.com/g/perl/dbd-pg COPYRIGHT AND LICENSE Copyright (C) 1994-2015, Greg Sabino Mullane This module (DBD::Pg) is free software; you can redistribute it and/or modify it under the same terms as Perl 5.10.0. For more details, see the full text of the licenses in the directory LICENSES. × Module Install Instructions To install DBD::Pg, simply copy and paste either of the commands in to your terminal cpanm                      cpanm DBD::Pg CPAN shell                      perl -MCPAN -e shell                     install DBD::Pg For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"PostgreSQL driver for DBI."	"true"
"Relational Databases"	"DBD::SQLite"	"https://metacpan.org/pod/DBD::SQLite"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DBD::SQLite - Self-contained RDBMS in a DBI Driver - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Kenichi Ishigaki  /  1.51_05 DEV (ISHIGAKI on 2016-06-23) 1.51_04 DEV (ISHIGAKI on 2016-03-07) 1.51_03 DEV (ISHIGAKI on 2016-02-20) 1.51_02 DEV (ISHIGAKI on 2016-02-20) 1.51_01 DEV (ISHIGAKI on 2016-02-20) 1.50 (ISHIGAKI on 2016-02-10) 1.48 (ISHIGAKI on 2015-06-11) 1.38_03 DEV (ADAMK on 2013-05-21) 1.38_02 DEV (ADAMK on 2013-04-09) 1.38_01 DEV (ADAMK on 2012-09-24) 1.37 (ADAMK on 2012-06-09) 1.36_04 DEV (ADAMK on 2012-05-19) 1.36_03 DEV (ADAMK on 2012-05-07) 1.36_02 DEV (ADAMK on 2012-02-23) 1.36_01 DEV (ADAMK on 2012-01-19) 1.35 (ADAMK on 2011-11-29) 1.34_03 DEV (ADAMK on 2011-11-01) 1.34_02 DEV (ADAMK on 2011-10-21) 1.34_01 DEV (ADAMK on 2011-09-21) 1.33 (ADAMK on 2011-05-30) 1.32_04 DEV (ADAMK on 2011-05-20) 1.32_03 DEV (ADAMK on 2011-05-12) 1.32_02 DEV (ADAMK on 2011-03-07) 1.32_01 DEV (ADAMK on 2010-12-10) 1.31 (ADAMK on 2010-09-15) 1.30_06 DEV (ADAMK on 2010-09-09) 1.30_05 DEV (ADAMK on 2010-08-27) 1.30_04 DEV (ADAMK on 2010-08-25) 1.30_03 DEV (ADAMK on 2010-05-31) 1.30_02 DEV (ADAMK on 2010-03-30) 1.30_01 DEV (ADAMK on 2010-03-10) 1.29 (ADAMK on 2010-01-08) 1.27 (ADAMK on 2009-11-23) 1.25 (ADAMK on 2009-04-23) 1.14 (MSERGEANT on 2007-09-19) 1.13 (MSERGEANT on 2006-09-08) 1.12 (MSERGEANT on 2006-04-10) 1.11 (MSERGEANT on 2005-12-02) 1.10 (MSERGEANT on 2005-12-01) 1.09 (MSERGEANT on 2005-06-20) 1.08 (MSERGEANT on 2005-02-26) 1.07 (MSERGEANT on 2004-10-12) 1.06 (MSERGEANT on 2004-09-21) 1.05 (MSERGEANT on 2004-09-10) 1.04 (MSERGEANT on 2004-08-23) 1.03 (MSERGEANT on 2004-08-09) 1.02 (MSERGEANT on 2004-08-02) 1.01 (MSERGEANT on 2004-08-01) 1.00 (MSERGEANT on 2004-07-21) 0.31 (MSERGEANT on 2004-02-14) 0.30 (MSERGEANT on 2004-02-08) 0.29 (MSERGEANT on 2003-12-05) 0.28 (MSERGEANT on 2003-08-25) 0.27 (MSERGEANT on 2003-08-18) 0.26 (MSERGEANT on 2003-07-31) 0.25 (MSERGEANT on 2003-03-06) 0.24 (MSERGEANT on 2003-01-29) 0.23 (MSERGEANT on 2002-12-29) 0.22 (MSERGEANT on 2002-12-18) 1.49_08 DEV (ISHIGAKI on 2016-01-30) 1.49_07 DEV (ISHIGAKI on 2016-01-21) 1.49_06 DEV (ISHIGAKI on 2016-01-15) 1.49_05 DEV (ISHIGAKI on 2016-01-11) 1.49_04 DEV (ISHIGAKI on 2015-11-24) 1.49_03 DEV (ISHIGAKI on 2015-11-05) 1.49_02 DEV (ISHIGAKI on 2015-10-10) 1.49_01 DEV (ISHIGAKI on 2015-08-04) 1.47_05 DEV (ISHIGAKI on 2015-05-08) 1.47_04 DEV (ISHIGAKI on 2015-05-01) 1.47_03 DEV (ISHIGAKI on 2015-04-16) 1.47_02 DEV (ISHIGAKI on 2015-04-16) 1.47_01 DEV (ISHIGAKI on 2015-02-17) 1.46 (ISHIGAKI on 2014-12-10) 1.45_06 DEV (ISHIGAKI on 2014-11-26) 1.45_05 DEV (ISHIGAKI on 2014-11-25) 1.45_04 DEV (ISHIGAKI on 2014-10-28) 1.45_03 DEV (ISHIGAKI on 2014-10-24) 1.45_02 DEV (ISHIGAKI on 2014-10-23) 1.45_01 DEV (ISHIGAKI on 2014-10-22) 1.44 (ISHIGAKI on 2014-10-22) 1.43_09 DEV (ISHIGAKI on 2014-10-20) 1.43_08 DEV (ISHIGAKI on 2014-08-21) 1.43_07 DEV (ISHIGAKI on 2014-07-29) 1.43_06 DEV (ISHIGAKI on 2014-07-22) 1.43_05 DEV (ISHIGAKI on 2014-07-21) 1.43_04 DEV (ISHIGAKI on 2014-07-21) 1.43_03 DEV (ISHIGAKI on 2014-06-12) 1.43_02 DEV (ISHIGAKI on 2014-03-25) 1.43_01 DEV (ISHIGAKI on 2014-03-25) 1.42 (ISHIGAKI on 2014-03-19) 1.41_07 DEV (ISHIGAKI on 2014-03-13) 1.41_06 DEV (ISHIGAKI on 2014-02-12) 1.41_05 DEV (ISHIGAKI on 2014-01-22) 1.41_04 DEV (ISHIGAKI on 2014-01-12) 1.41_03 DEV (ISHIGAKI on 2013-09-04) 1.41_02 DEV (ISHIGAKI on 2013-08-29) 1.41_01 DEV (ISHIGAKI on 2013-08-27) 1.40 (ISHIGAKI on 2013-07-28) 1.39 (ISHIGAKI on 2013-06-09) 1.38_05 DEV (ISHIGAKI on 2013-05-31) 1.38_04 DEV (ISHIGAKI on 2013-05-29) 1.28_02 DEV (ADAMK on 2010-01-03) 1.28_01 DEV (ADAMK on 2009-12-23) 1.26_07 DEV (ADAMK on 2009-11-16) 1.26_06 DEV (ADAMK on 2009-10-28) 1.26_05 DEV (ADAMK on 2009-10-15) 1.26_04 DEV (ADAMK on 2009-10-06) 1.26_03 DEV (ADAMK on 2009-08-12) 1.26_02 DEV (ADAMK on 2009-06-19) 1.26_01 DEV (ADAMK on 2009-05-05) 1.24_02 DEV (ADAMK on 2009-04-23) 1.24_01 DEV (ADAMK on 2009-04-22) 1.23 (ADAMK on 2009-04-19) 1.22_08 DEV (ADAMK on 2009-04-17) 1.22_07 DEV (ADAMK on 2009-04-16) 1.22_06 DEV (ADAMK on 2009-04-15) 1.22_05 DEV (ADAMK on 2009-04-14) 1.22_04 DEV (ADAMK on 2009-04-11) 1.22_03 DEV (ADAMK on 2009-04-09) 1.22_02 DEV (ADAMK on 2009-04-08) 1.22_01 DEV (ADAMK on 2009-04-08) 1.21 (ADAMK on 2009-04-08) 1.20 (ADAMK on 2009-04-07) 1.19_10 DEV (ADAMK on 2009-04-05) 1.19_09 DEV (ADAMK on 2009-04-05) 1.19_08 DEV (ADAMK on 2009-04-04) 1.19_07 DEV (ADAMK on 2009-04-04) 1.19_06 DEV (ADAMK on 2009-04-03) 1.19_05 DEV (ADAMK on 2009-04-02) 1.19_04 DEV (ADAMK on 2009-03-31) 1.19_03 DEV (ADAMK on 2009-03-30) 1.19_02 DEV (ADAMK on 2009-03-28) 1.19_01 DEV (ADAMK on 2009-03-27) 0.21 (MSERGEANT on 2002-10-18) 0.20 (MSERGEANT on 2002-10-17) 0.19 (MSERGEANT on 2002-08-13) 0.18 (MSERGEANT on 2002-07-12) 0.17 (MSERGEANT on 2002-06-26) 0.16 (MSERGEANT on 2002-06-17) 0.15 (MSERGEANT on 2002-04-02) 0.14 (MSERGEANT on 2002-03-28) 0.13 (MSERGEANT on 2002-03-26) 0.12 (MSERGEANT on 2002-03-21) 0.11 (MSERGEANT on 2002-03-13) 0.10 (MSERGEANT on 2002-02-28) 0.09 (MSERGEANT on 2002-02-27) 0.08 (MSERGEANT on 2002-02-25) 0.07 (MSERGEANT on 2002-02-23) 0.06 (MSERGEANT on 2002-02-22) 0.05 (MSERGEANT on 2002-02-19) DBD-SQLite-1.50 63 ++ 63 ++  / DBD::SQLite 10 Feb 2016 15:04:42 GMT Module version: 1.50 Source (raw) Browse (raw) Changes Clone repository Issues (16) 4.5 (16 reviews) Testers (2324 / 1 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (1.93Mb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.51_05 DEV (ISHIGAKI on 2016-06-23) 1.51_04 DEV (ISHIGAKI on 2016-03-07) 1.51_03 DEV (ISHIGAKI on 2016-02-20) 1.51_02 DEV (ISHIGAKI on 2016-02-20) 1.51_01 DEV (ISHIGAKI on 2016-02-20) 1.48 (ISHIGAKI on 2015-06-11) 1.38_03 DEV (ADAMK on 2013-05-21) 1.38_02 DEV (ADAMK on 2013-04-09) 1.38_01 DEV (ADAMK on 2012-09-24) 1.37 (ADAMK on 2012-06-09) 1.36_04 DEV (ADAMK on 2012-05-19) 1.36_03 DEV (ADAMK on 2012-05-07) 1.36_02 DEV (ADAMK on 2012-02-23) 1.36_01 DEV (ADAMK on 2012-01-19) 1.35 (ADAMK on 2011-11-29) 1.34_03 DEV (ADAMK on 2011-11-01) 1.34_02 DEV (ADAMK on 2011-10-21) 1.34_01 DEV (ADAMK on 2011-09-21) 1.33 (ADAMK on 2011-05-30) 1.32_04 DEV (ADAMK on 2011-05-20) 1.32_03 DEV (ADAMK on 2011-05-12) 1.32_02 DEV (ADAMK on 2011-03-07) 1.32_01 DEV (ADAMK on 2010-12-10) 1.31 (ADAMK on 2010-09-15) 1.30_06 DEV (ADAMK on 2010-09-09) 1.30_05 DEV (ADAMK on 2010-08-27) 1.30_04 DEV (ADAMK on 2010-08-25) 1.30_03 DEV (ADAMK on 2010-05-31) 1.30_02 DEV (ADAMK on 2010-03-30) 1.30_01 DEV (ADAMK on 2010-03-10) 1.29 (ADAMK on 2010-01-08) 1.27 (ADAMK on 2009-11-23) 1.25 (ADAMK on 2009-04-23) 1.14 (MSERGEANT on 2007-09-19) 1.13 (MSERGEANT on 2006-09-08) 1.12 (MSERGEANT on 2006-04-10) 1.11 (MSERGEANT on 2005-12-02) 1.10 (MSERGEANT on 2005-12-01) 1.09 (MSERGEANT on 2005-06-20) 1.08 (MSERGEANT on 2005-02-26) 1.07 (MSERGEANT on 2004-10-12) 1.06 (MSERGEANT on 2004-09-21) 1.05 (MSERGEANT on 2004-09-10) 1.04 (MSERGEANT on 2004-08-23) 1.03 (MSERGEANT on 2004-08-09) 1.02 (MSERGEANT on 2004-08-02) 1.01 (MSERGEANT on 2004-08-01) 1.00 (MSERGEANT on 2004-07-21) 0.31 (MSERGEANT on 2004-02-14) 0.30 (MSERGEANT on 2004-02-08) 0.29 (MSERGEANT on 2003-12-05) 0.28 (MSERGEANT on 2003-08-25) 0.27 (MSERGEANT on 2003-08-18) 0.26 (MSERGEANT on 2003-07-31) 0.25 (MSERGEANT on 2003-03-06) 0.24 (MSERGEANT on 2003-01-29) 0.23 (MSERGEANT on 2002-12-29) 0.22 (MSERGEANT on 2002-12-18) 1.49_08 DEV (ISHIGAKI on 2016-01-30) 1.49_07 DEV (ISHIGAKI on 2016-01-21) 1.49_06 DEV (ISHIGAKI on 2016-01-15) 1.49_05 DEV (ISHIGAKI on 2016-01-11) 1.49_04 DEV (ISHIGAKI on 2015-11-24) 1.49_03 DEV (ISHIGAKI on 2015-11-05) 1.49_02 DEV (ISHIGAKI on 2015-10-10) 1.49_01 DEV (ISHIGAKI on 2015-08-04) 1.47_05 DEV (ISHIGAKI on 2015-05-08) 1.47_04 DEV (ISHIGAKI on 2015-05-01) 1.47_03 DEV (ISHIGAKI on 2015-04-16) 1.47_02 DEV (ISHIGAKI on 2015-04-16) 1.47_01 DEV (ISHIGAKI on 2015-02-17) 1.46 (ISHIGAKI on 2014-12-10) 1.45_06 DEV (ISHIGAKI on 2014-11-26) 1.45_05 DEV (ISHIGAKI on 2014-11-25) 1.45_04 DEV (ISHIGAKI on 2014-10-28) 1.45_03 DEV (ISHIGAKI on 2014-10-24) 1.45_02 DEV (ISHIGAKI on 2014-10-23) 1.45_01 DEV (ISHIGAKI on 2014-10-22) 1.44 (ISHIGAKI on 2014-10-22) 1.43_09 DEV (ISHIGAKI on 2014-10-20) 1.43_08 DEV (ISHIGAKI on 2014-08-21) 1.43_07 DEV (ISHIGAKI on 2014-07-29) 1.43_06 DEV (ISHIGAKI on 2014-07-22) 1.43_05 DEV (ISHIGAKI on 2014-07-21) 1.43_04 DEV (ISHIGAKI on 2014-07-21) 1.43_03 DEV (ISHIGAKI on 2014-06-12) 1.43_02 DEV (ISHIGAKI on 2014-03-25) 1.43_01 DEV (ISHIGAKI on 2014-03-25) 1.42 (ISHIGAKI on 2014-03-19) 1.41_07 DEV (ISHIGAKI on 2014-03-13) 1.41_06 DEV (ISHIGAKI on 2014-02-12) 1.41_05 DEV (ISHIGAKI on 2014-01-22) 1.41_04 DEV (ISHIGAKI on 2014-01-12) 1.41_03 DEV (ISHIGAKI on 2013-09-04) 1.41_02 DEV (ISHIGAKI on 2013-08-29) 1.41_01 DEV (ISHIGAKI on 2013-08-27) 1.40 (ISHIGAKI on 2013-07-28) 1.39 (ISHIGAKI on 2013-06-09) 1.38_05 DEV (ISHIGAKI on 2013-05-31) 1.38_04 DEV (ISHIGAKI on 2013-05-29) 1.28_02 DEV (ADAMK on 2010-01-03) 1.28_01 DEV (ADAMK on 2009-12-23) 1.26_07 DEV (ADAMK on 2009-11-16) 1.26_06 DEV (ADAMK on 2009-10-28) 1.26_05 DEV (ADAMK on 2009-10-15) 1.26_04 DEV (ADAMK on 2009-10-06) 1.26_03 DEV (ADAMK on 2009-08-12) 1.26_02 DEV (ADAMK on 2009-06-19) 1.26_01 DEV (ADAMK on 2009-05-05) 1.24_02 DEV (ADAMK on 2009-04-23) 1.24_01 DEV (ADAMK on 2009-04-22) 1.23 (ADAMK on 2009-04-19) 1.22_08 DEV (ADAMK on 2009-04-17) 1.22_07 DEV (ADAMK on 2009-04-16) 1.22_06 DEV (ADAMK on 2009-04-15) 1.22_05 DEV (ADAMK on 2009-04-14) 1.22_04 DEV (ADAMK on 2009-04-11) 1.22_03 DEV (ADAMK on 2009-04-09) 1.22_02 DEV (ADAMK on 2009-04-08) 1.22_01 DEV (ADAMK on 2009-04-08) 1.21 (ADAMK on 2009-04-08) 1.20 (ADAMK on 2009-04-07) 1.19_10 DEV (ADAMK on 2009-04-05) 1.19_09 DEV (ADAMK on 2009-04-05) 1.19_08 DEV (ADAMK on 2009-04-04) 1.19_07 DEV (ADAMK on 2009-04-04) 1.19_06 DEV (ADAMK on 2009-04-03) 1.19_05 DEV (ADAMK on 2009-04-02) 1.19_04 DEV (ADAMK on 2009-03-31) 1.19_03 DEV (ADAMK on 2009-03-30) 1.19_02 DEV (ADAMK on 2009-03-28) 1.19_01 DEV (ADAMK on 2009-03-27) 0.21 (MSERGEANT on 2002-10-18) 0.20 (MSERGEANT on 2002-10-17) 0.19 (MSERGEANT on 2002-08-13) 0.18 (MSERGEANT on 2002-07-12) 0.17 (MSERGEANT on 2002-06-26) 0.16 (MSERGEANT on 2002-06-17) 0.15 (MSERGEANT on 2002-04-02) 0.14 (MSERGEANT on 2002-03-28) 0.13 (MSERGEANT on 2002-03-26) 0.12 (MSERGEANT on 2002-03-21) 0.11 (MSERGEANT on 2002-03-13) 0.10 (MSERGEANT on 2002-02-28) 0.09 (MSERGEANT on 2002-02-27) 0.08 (MSERGEANT on 2002-02-25) 0.07 (MSERGEANT on 2002-02-23) 0.06 (MSERGEANT on 2002-02-22) 0.05 (MSERGEANT on 2002-02-19) Diff with version 1.51_05 DEV (ISHIGAKI on 2016-06-23) 1.51_04 DEV (ISHIGAKI on 2016-03-07) 1.51_03 DEV (ISHIGAKI on 2016-02-20) 1.51_02 DEV (ISHIGAKI on 2016-02-20) 1.51_01 DEV (ISHIGAKI on 2016-02-20) 1.48 (ISHIGAKI on 2015-06-11) 1.38_03 DEV (ADAMK on 2013-05-21) 1.38_02 DEV (ADAMK on 2013-04-09) 1.38_01 DEV (ADAMK on 2012-09-24) 1.37 (ADAMK on 2012-06-09) 1.36_04 DEV (ADAMK on 2012-05-19) 1.36_03 DEV (ADAMK on 2012-05-07) 1.36_02 DEV (ADAMK on 2012-02-23) 1.36_01 DEV (ADAMK on 2012-01-19) 1.35 (ADAMK on 2011-11-29) 1.34_03 DEV (ADAMK on 2011-11-01) 1.34_02 DEV (ADAMK on 2011-10-21) 1.34_01 DEV (ADAMK on 2011-09-21) 1.33 (ADAMK on 2011-05-30) 1.32_04 DEV (ADAMK on 2011-05-20) 1.32_03 DEV (ADAMK on 2011-05-12) 1.32_02 DEV (ADAMK on 2011-03-07) 1.32_01 DEV (ADAMK on 2010-12-10) 1.31 (ADAMK on 2010-09-15) 1.30_06 DEV (ADAMK on 2010-09-09) 1.30_05 DEV (ADAMK on 2010-08-27) 1.30_04 DEV (ADAMK on 2010-08-25) 1.30_03 DEV (ADAMK on 2010-05-31) 1.30_02 DEV (ADAMK on 2010-03-30) 1.30_01 DEV (ADAMK on 2010-03-10) 1.29 (ADAMK on 2010-01-08) 1.27 (ADAMK on 2009-11-23) 1.25 (ADAMK on 2009-04-23) 1.14 (MSERGEANT on 2007-09-19) 1.13 (MSERGEANT on 2006-09-08) 1.12 (MSERGEANT on 2006-04-10) 1.11 (MSERGEANT on 2005-12-02) 1.10 (MSERGEANT on 2005-12-01) 1.09 (MSERGEANT on 2005-06-20) 1.08 (MSERGEANT on 2005-02-26) 1.07 (MSERGEANT on 2004-10-12) 1.06 (MSERGEANT on 2004-09-21) 1.05 (MSERGEANT on 2004-09-10) 1.04 (MSERGEANT on 2004-08-23) 1.03 (MSERGEANT on 2004-08-09) 1.02 (MSERGEANT on 2004-08-02) 1.01 (MSERGEANT on 2004-08-01) 1.00 (MSERGEANT on 2004-07-21) 0.31 (MSERGEANT on 2004-02-14) 0.30 (MSERGEANT on 2004-02-08) 0.29 (MSERGEANT on 2003-12-05) 0.28 (MSERGEANT on 2003-08-25) 0.27 (MSERGEANT on 2003-08-18) 0.26 (MSERGEANT on 2003-07-31) 0.25 (MSERGEANT on 2003-03-06) 0.24 (MSERGEANT on 2003-01-29) 0.23 (MSERGEANT on 2002-12-29) 0.22 (MSERGEANT on 2002-12-18) 1.49_08 DEV (ISHIGAKI on 2016-01-30) 1.49_07 DEV (ISHIGAKI on 2016-01-21) 1.49_06 DEV (ISHIGAKI on 2016-01-15) 1.49_05 DEV (ISHIGAKI on 2016-01-11) 1.49_04 DEV (ISHIGAKI on 2015-11-24) 1.49_03 DEV (ISHIGAKI on 2015-11-05) 1.49_02 DEV (ISHIGAKI on 2015-10-10) 1.49_01 DEV (ISHIGAKI on 2015-08-04) 1.47_05 DEV (ISHIGAKI on 2015-05-08) 1.47_04 DEV (ISHIGAKI on 2015-05-01) 1.47_03 DEV (ISHIGAKI on 2015-04-16) 1.47_02 DEV (ISHIGAKI on 2015-04-16) 1.47_01 DEV (ISHIGAKI on 2015-02-17) 1.46 (ISHIGAKI on 2014-12-10) 1.45_06 DEV (ISHIGAKI on 2014-11-26) 1.45_05 DEV (ISHIGAKI on 2014-11-25) 1.45_04 DEV (ISHIGAKI on 2014-10-28) 1.45_03 DEV (ISHIGAKI on 2014-10-24) 1.45_02 DEV (ISHIGAKI on 2014-10-23) 1.45_01 DEV (ISHIGAKI on 2014-10-22) 1.44 (ISHIGAKI on 2014-10-22) 1.43_09 DEV (ISHIGAKI on 2014-10-20) 1.43_08 DEV (ISHIGAKI on 2014-08-21) 1.43_07 DEV (ISHIGAKI on 2014-07-29) 1.43_06 DEV (ISHIGAKI on 2014-07-22) 1.43_05 DEV (ISHIGAKI on 2014-07-21) 1.43_04 DEV (ISHIGAKI on 2014-07-21) 1.43_03 DEV (ISHIGAKI on 2014-06-12) 1.43_02 DEV (ISHIGAKI on 2014-03-25) 1.43_01 DEV (ISHIGAKI on 2014-03-25) 1.42 (ISHIGAKI on 2014-03-19) 1.41_07 DEV (ISHIGAKI on 2014-03-13) 1.41_06 DEV (ISHIGAKI on 2014-02-12) 1.41_05 DEV (ISHIGAKI on 2014-01-22) 1.41_04 DEV (ISHIGAKI on 2014-01-12) 1.41_03 DEV (ISHIGAKI on 2013-09-04) 1.41_02 DEV (ISHIGAKI on 2013-08-29) 1.41_01 DEV (ISHIGAKI on 2013-08-27) 1.40 (ISHIGAKI on 2013-07-28) 1.39 (ISHIGAKI on 2013-06-09) 1.38_05 DEV (ISHIGAKI on 2013-05-31) 1.38_04 DEV (ISHIGAKI on 2013-05-29) 1.28_02 DEV (ADAMK on 2010-01-03) 1.28_01 DEV (ADAMK on 2009-12-23) 1.26_07 DEV (ADAMK on 2009-11-16) 1.26_06 DEV (ADAMK on 2009-10-28) 1.26_05 DEV (ADAMK on 2009-10-15) 1.26_04 DEV (ADAMK on 2009-10-06) 1.26_03 DEV (ADAMK on 2009-08-12) 1.26_02 DEV (ADAMK on 2009-06-19) 1.26_01 DEV (ADAMK on 2009-05-05) 1.24_02 DEV (ADAMK on 2009-04-23) 1.24_01 DEV (ADAMK on 2009-04-22) 1.23 (ADAMK on 2009-04-19) 1.22_08 DEV (ADAMK on 2009-04-17) 1.22_07 DEV (ADAMK on 2009-04-16) 1.22_06 DEV (ADAMK on 2009-04-15) 1.22_05 DEV (ADAMK on 2009-04-14) 1.22_04 DEV (ADAMK on 2009-04-11) 1.22_03 DEV (ADAMK on 2009-04-09) 1.22_02 DEV (ADAMK on 2009-04-08) 1.22_01 DEV (ADAMK on 2009-04-08) 1.21 (ADAMK on 2009-04-08) 1.20 (ADAMK on 2009-04-07) 1.19_10 DEV (ADAMK on 2009-04-05) 1.19_09 DEV (ADAMK on 2009-04-05) 1.19_08 DEV (ADAMK on 2009-04-04) 1.19_07 DEV (ADAMK on 2009-04-04) 1.19_06 DEV (ADAMK on 2009-04-03) 1.19_05 DEV (ADAMK on 2009-04-02) 1.19_04 DEV (ADAMK on 2009-03-31) 1.19_03 DEV (ADAMK on 2009-03-30) 1.19_02 DEV (ADAMK on 2009-03-28) 1.19_01 DEV (ADAMK on 2009-03-27) 0.21 (MSERGEANT on 2002-10-18) 0.20 (MSERGEANT on 2002-10-17) 0.19 (MSERGEANT on 2002-08-13) 0.18 (MSERGEANT on 2002-07-12) 0.17 (MSERGEANT on 2002-06-26) 0.16 (MSERGEANT on 2002-06-17) 0.15 (MSERGEANT on 2002-04-02) 0.14 (MSERGEANT on 2002-03-28) 0.13 (MSERGEANT on 2002-03-26) 0.12 (MSERGEANT on 2002-03-21) 0.11 (MSERGEANT on 2002-03-13) 0.10 (MSERGEANT on 2002-02-28) 0.09 (MSERGEANT on 2002-02-27) 0.08 (MSERGEANT on 2002-02-25) 0.07 (MSERGEANT on 2002-02-23) 0.06 (MSERGEANT on 2002-02-22) 0.05 (MSERGEANT on 2002-02-19) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 37 PAUSE users 26 non-PAUSE users. ISHIGAKI Kenichi Ishigaki and 1 contributors show them Adam Kennedy Dependencies DBI Scalar::Util Tie::Hash and possibly others CPAN Testers List Reverse dependencies Dependency graph × DBD-SQLite-1.50 NAME SYNOPSIS DESCRIPTION SQLITE VERSION NOTABLE DIFFERENCES FROM OTHER DRIVERS Database Name Is A File Name Read-Only Database DBD::SQLite And File::Temp DBD::SQLite and fork() Accessing A Database With Other Tools Blobs Functions And Bind Parameters Placeholders Pragma Foreign Keys Transactions Transaction and Database Locking $sth->finish and Transaction Rollback Processing Multiple Statements At A Time Performance DRIVER PRIVATE ATTRIBUTES Database Handle Attributes Statement Handle Attributes METHODS table_info primary_key, primary_key_info foreign_key_info statistics_info ping DRIVER PRIVATE METHODS $dbh->sqlite_last_insert_rowid() $dbh->sqlite_db_filename() $dbh->sqlite_busy_timeout() $dbh->sqlite_busy_timeout( $ms ) $dbh->sqlite_create_function( $name, $argc, $code_ref, $flags ) REGEXP function $dbh->sqlite_create_collation( $name, $code_ref ) $dbh->sqlite_collation_needed( $code_ref ) $dbh->sqlite_create_aggregate( $name, $argc, $pkg, $flags ) $dbh->sqlite_progress_handler( $n_opcodes, $code_ref ) $dbh->sqlite_commit_hook( $code_ref ) $dbh->sqlite_rollback_hook( $code_ref ) $dbh->sqlite_update_hook( $code_ref ) $dbh->sqlite_set_authorizer( $code_ref ) $dbh->sqlite_backup_from_file( $filename ) $dbh->sqlite_backup_to_file( $filename ) $dbh->sqlite_enable_load_extension( $bool ) $dbh->sqlite_load_extension( $file, $proc ) $dbh->sqlite_trace( $code_ref ) $dbh->sqlite_profile( $code_ref ) $dbh->sqlite_table_column_metadata( $dbname, $tablename, $columnname ) $dbh->sqlite_db_status() $sth->sqlite_st_status() $dbh->sqlite_create_module() DRIVER FUNCTIONS DBD::SQLite::compile_options() DBD::SQLite::sqlite_status() DBD::SQLite::strlike($pattern, $string, $escape_char), DBD::SQLite::strglob($pattern, $string) DRIVER CONSTANTS Authorizer Return Codes Action Codes COLLATION FUNCTIONS Definition Builtin collation sequences Usage Unicode handling Adding user-defined collations FULLTEXT SEARCH R* TREE SUPPORT VIRTUAL TABLES IMPLEMENTED IN PERL FOR DBD::SQLITE EXTENSION AUTHORS TO DO Leak Detection Stream API for Blobs Support for custom callbacks for R-Tree queries SUPPORT AUTHORS COPYRIGHT NAME DBD::SQLite - Self-contained RDBMS in a DBI Driver SYNOPSIS   use DBI;   my $dbh = DBI->connect(""dbi:SQLite:dbname=$dbfile"","""",""""); DESCRIPTION SQLite is a public domain file-based relational database engine that you can find at http://www.sqlite.org/. DBD::SQLite is a Perl DBI driver for SQLite, that includes the entire thing in the distribution. So in order to get a fast transaction capable RDBMS working for your perl project you simply have to install this module, and nothing else. SQLite supports the following features: Implements a large subset of SQL92 See http://www.sqlite.org/lang.html for details. A complete DB in a single disk file Everything for your database is stored in a single disk file, making it easier to move things around than with DBD::CSV. Atomic commit and rollback Yes, DBD::SQLite is small and light, but it supports full transactions! Extensible User-defined aggregate or regular functions can be registered with the SQL parser. There's lots more to it, so please refer to the docs on the SQLite web page, listed above, for SQL details. Also refer to DBI for details on how to use DBI itself. The API works like every DBI module does. However, currently many statement attributes are not implemented or are limited by the typeless nature of the SQLite database. SQLITE VERSION DBD::SQLite is usually compiled with a bundled SQLite library (SQLite version 3.10.2 as of this release) for consistency. However, a different version of SQLite may sometimes be used for some reasons like security, or some new experimental features. You can look at $DBD::SQLite::sqlite_version (3.x.y format) or $DBD::SQLite::sqlite_version_number (3xxxyyy format) to find which version of SQLite is actually used. You can also check DBD::SQLite::Constants::SQLITE_VERSION_NUMBER(). You can also find how the library is compiled by calling DBD::SQLite::compile_options() (see below). NOTABLE DIFFERENCES FROM OTHER DRIVERS Database Name Is A File Name SQLite creates a file per a database. You should pass the path of the database file (with or without a parent directory) in the DBI connection string (as a database name):   my $dbh = DBI->connect(""dbi:SQLite:dbname=$dbfile"","""",""""); The file is opened in read/write mode, and will be created if it does not exist yet. Although the database is stored in a single file, the directory containing the database file must be writable by SQLite because the library will create several temporary files there. If the filename $dbfile is "":memory:"", then a private, temporary in-memory database is created for the connection. This in-memory database will vanish when the database connection is closed. It is handy for your library tests. Note that future versions of SQLite might make use of additional special filenames that begin with the "":"" character. It is recommended that when a database filename actually does begin with a "":"" character you should prefix the filename with a pathname such as ""./"" to avoid ambiguity. If the filename $dbfile is an empty string, then a private, temporary on-disk database will be created. This private database will be automatically deleted as soon as the database connection is closed. As of 1.41_01, you can pass URI filename (see http://www.sqlite.org/uri.html) as well for finer control:   my $dbh = DBI->connect(""dbi:SQLite:uri=file:$path_to_dbfile?mode=rwc""); Note that this is not for remote SQLite database connection. You can only connect to a local database. Read-Only Database You can set sqlite_open_flags (only) when you connect to a database:   use DBD::SQLite::Constants qw/:file_open/;   my $dbh = DBI->connect(""dbi:SQLite:$dbfile"", undef, undef, {     sqlite_open_flags => SQLITE_OPEN_READONLY,   }); See http://www.sqlite.org/c3ref/open.html for details. As of 1.49_05, you can also make a database read-only by setting ReadOnly attribute to true (only) when you connect to a database. Actually you can set it after you connect, but in that case, it can't make the database read-only, and you'll see a warning (which you can hide by turning PrintWarn off). DBD::SQLite And File::Temp When you use File::Temp to create a temporary file/directory for SQLite databases, you need to remember: tempfile may be locked exclusively You may want to use tempfile() to create a temporary database filename for DBD::SQLite, but as noted in File::Temp's POD, this file may have an exclusive lock under some operating systems (notably Mac OSX), and result in a ""database is locked"" error. To avoid this, set EXLOCK option to false when you call tempfile().   ($fh, $filename) = tempfile($template, EXLOCK => 0); CLEANUP may not work unless a database is disconnected When you set CLEANUP option to true when you create a temporary directory with tempdir() or newdir(), you may have to disconnect databases explicitly before the temporary directory is gone (notably under MS Windows). (The above is quoted from the pod of File::Temp.) If you don't need to keep or share a temporary database, use "":memory:"" database instead. It's much handier and cleaner for ordinary testing. DBD::SQLite and fork() Follow the advice in the SQLite FAQ (https://sqlite.org/faq.html). Under Unix, you should not carry an open SQLite database across a fork() system call into the child process. Problems will result if you do. You shouldn't (re)use a database handle you created (probably to set up a database schema etc) before you fork(). Otherwise, you might see a database corruption in the worst case. If you need to fork(), (re)open a database after you fork(). You might also want to tweak sqlite_busy_timeout and sqlite_use_immediate_transaction (see below), depending on your needs. If you need a higher level of concurrency than SQLite supports, consider using other client/server database engines. Accessing A Database With Other Tools To access the database from the command line, try using dbish which comes with the DBI::Shell module. Just type:   dbish dbi:SQLite:foo.db On the command line to access the file foo.db. Alternatively you can install SQLite from the link above without conflicting with DBD::SQLite and use the supplied sqlite3 command line tool. Blobs As of version 1.11, blobs should ""just work"" in SQLite as text columns. However this will cause the data to be treated as a string, so SQL statements such as length(x) will return the length of the column as a NUL terminated string, rather than the size of the blob in bytes. In order to store natively as a BLOB use the following code:   use DBI qw(:sql_types);   my $dbh = DBI->connect(""dbi:SQLite:dbfile"","""","""");      my $blob = `cat foo.jpg`;   my $sth = $dbh->prepare(""INSERT INTO mytable VALUES (1, ?)"");   $sth->bind_param(1, $blob, SQL_BLOB);   $sth->execute(); And then retrieval just works:   $sth = $dbh->prepare(""SELECT * FROM mytable WHERE id = 1"");   $sth->execute();   my $row = $sth->fetch;   my $blobo = $row->[1];      # now $blobo == $blob Functions And Bind Parameters As of this writing, a SQL that compares a return value of a function with a numeric bind value like this doesn't work as you might expect.   my $sth = $dbh->prepare(q{     SELECT bar FROM foo GROUP BY bar HAVING count(*) > ?;   });   $sth->execute(5); This is because DBD::SQLite assumes that all the bind values are text (and should be quoted) by default. Thus the above statement becomes like this while executing:   SELECT bar FROM foo GROUP BY bar HAVING count(*) > ""5""; There are three workarounds for this. Use bind_param() explicitly As shown above in the BLOB section, you can always use bind_param() to tell the type of a bind value.   use DBI qw(:sql_types);  # Don't forget this      my $sth = $dbh->prepare(q{     SELECT bar FROM foo GROUP BY bar HAVING count(*) > ?;   });   $sth->bind_param(1, 5, SQL_INTEGER);   $sth->execute(); Add zero to make it a number This is somewhat weird, but works anyway.   my $sth = $dbh->prepare(q{     SELECT bar FROM foo GROUP BY bar HAVING count(*) > (? + 0);   });   $sth->execute(5); Set sqlite_see_if_its_a_number database handle attribute As of version 1.32_02, you can use sqlite_see_if_its_a_number to let DBD::SQLite to see if the bind values are numbers or not.   $dbh->{sqlite_see_if_its_a_number} = 1;   my $sth = $dbh->prepare(q{     SELECT bar FROM foo GROUP BY bar HAVING count(*) > ?;   });   $sth->execute(5); You can set it to true when you connect to a database.   my $dbh = DBI->connect('dbi:SQLite:foo', undef, undef, {     AutoCommit => 1,     RaiseError => 1,     sqlite_see_if_its_a_number => 1,   }); This is the most straightforward solution, but as noted above, existing data in your databases created by DBD::SQLite have not always been stored as numbers, so this *might* cause other obscure problems. Use this sparingly when you handle existing databases. If you handle databases created by other tools like native sqlite3 command line tool, this attribute would help you. As of 1.41_04, sqlite_see_if_its_a_number works only for bind values with no explicit type.   my $dbh = DBI->connect('dbi:SQLite:foo', undef, undef, {     AutoCommit => 1,     RaiseError => 1,     sqlite_see_if_its_a_number => 1,   });   my $sth = $dbh->prepare('INSERT INTO foo VALUES(?)');   # '1.230' will be inserted as a text, instead of 1.23 as a number,   # even though sqlite_see_if_its_a_number is set.   $sth->bind_param(1, '1.230', SQL_VARCHAR);   $sth->execute; Placeholders SQLite supports several placeholder expressions, including ? and :AAAA. Consult the DBI and SQLite documentation for details. http://www.sqlite.org/lang_expr.html#varparam Note that a question mark actually means a next unused (numbered) placeholder. You're advised not to use it with other (numbered or named) placeholders to avoid confusion.   my $sth = $dbh->prepare(     'update TABLE set a=?1 where b=?2 and a IS NOT ?1'   );   $sth->execute(1, 2); Pragma SQLite has a set of ""Pragma""s to modify its operation or to query for its internal data. These are specific to SQLite and are not likely to work with other DBD libraries, but you may find some of these are quite useful, including: journal_mode You can use this pragma to change the journal mode for SQLite databases, maybe for better performance, or for compatibility. Its default mode is DELETE, which means SQLite uses a rollback journal to implement transactions, and the journal is deleted at the conclusion of each transaction. If you use TRUNCATE instead of DELETE, the journal will be truncated, which is usually much faster. A WAL (write-ahead log) mode is introduced as of SQLite 3.7.0. This mode is persistent, and it stays in effect even after closing and reopening the database. In other words, once the WAL mode is set in an application or in a test script, the database becomes inaccessible by older clients. This tends to be an issue when you use a system sqlite3 executable under a conservative operating system. To fix this, You need to issue PRAGMA journal_mode = DELETE (or TRUNCATE) beforehand, or install a newer version of sqlite3. legacy_file_format If you happen to need to create a SQLite database that will also be accessed by a very old SQLite client (prior to 3.3.0 released in Jan. 2006), you need to set this pragma to ON before you create a database. reverse_unordered_selects You can set this pragma to ON to reverse the order of results of SELECT statements without an ORDER BY clause so that you can see if applications are making invalid assumptions about the result order. Note that SQLite 3.7.15 (bundled with DBD::SQLite 1.38_02) enhanced its query optimizer and the order of results of a SELECT statement without an ORDER BY clause may be different from the one of the previous versions. synchronous You can set set this pragma to OFF to make some of the operations in SQLite faster with a possible risk of database corruption in the worst case. See also ""Performance"" section below. See http://www.sqlite.org/pragma.html for more details. Foreign Keys SQLite has started supporting foreign key constraints since 3.6.19 (released on Oct 14, 2009; bundled in DBD::SQLite 1.26_05). To be exact, SQLite has long been able to parse a schema with foreign keys, but the constraints has not been enforced. Now you can issue a foreign_keys pragma to enable this feature and enforce the constraints, preferably as soon as you connect to a database and you're not in a transaction:   $dbh->do(""PRAGMA foreign_keys = ON""); And you can explicitly disable the feature whenever you like by turning the pragma off:   $dbh->do(""PRAGMA foreign_keys = OFF""); As of this writing, this feature is disabled by default by the SQLite team, and by us, to secure backward compatibility, as this feature may break your applications, and actually broke some for us. If you have used a schema with foreign key constraints but haven't cared them much and supposed they're always ignored for SQLite, be prepared, and please do extensive testing to ensure that your applications will continue to work when the foreign keys support is enabled by default. See http://www.sqlite.org/foreignkeys.html for details. Transactions DBI/DBD::SQLite's transactions may be a bit confusing. They behave differently according to the status of the AutoCommit flag: When the AutoCommit flag is on You're supposed to always use the auto-commit mode, except you explicitly begin a transaction, and when the transaction ended, you're supposed to go back to the auto-commit mode. To begin a transaction, call begin_work method, or issue a BEGIN statement. To end it, call commit/rollback methods, or issue the corresponding statements.   $dbh->{AutoCommit} = 1;      $dbh->begin_work; # or $dbh->do('BEGIN TRANSACTION');      # $dbh->{AutoCommit} is turned off temporarily during a transaction;      $dbh->commit; # or $dbh->do('COMMIT');      # $dbh->{AutoCommit} is turned on again; When the AutoCommit flag is off You're supposed to always use the transactional mode, until you explicitly turn on the AutoCommit flag. You can explicitly issue a BEGIN statement (only when an actual transaction has not begun yet) but you're not allowed to call begin_work method (if you don't issue a BEGIN, it will be issued internally). You can commit or roll it back freely. Another transaction will automatically begins if you execute another statement.   $dbh->{AutoCommit} = 0;      # $dbh->do('BEGIN TRANSACTION') is not necessary, but possible      ...      $dbh->commit; # or $dbh->do('COMMIT');      # $dbh->{AutoCommit} stays intact;      $dbh->{AutoCommit} = 1;  # ends the transactional mode This AutoCommit mode is independent from the autocommit mode of the internal SQLite library, which always begins by a BEGIN statement, and ends by a COMMIT or a <ROLLBACK>. Transaction and Database Locking The default transaction behavior of SQLite is deferred, that means, locks are not acquired until the first read or write operation, and thus it is possible that another thread or process could create a separate transaction and write to the database after the BEGIN on the current thread has executed, and eventually cause a ""deadlock"". To avoid this, DBD::SQLite internally issues a BEGIN IMMEDIATE if you begin a transaction by calling begin_work or by turning off AutoCommit (since 1.38_01). If you really need to turn off this feature for some reasons, set sqlite_use_immediate_transaction database handle attribute to false, and the default deferred transaction will be used.   my $dbh = DBI->connect(""dbi:SQLite::memory:"", """", """", {     sqlite_use_immediate_transaction => 0,   }); Or, issue a BEGIN statement explicitly each time you begin a transaction. See http://sqlite.org/lockingv3.html for locking details. $sth->finish and Transaction Rollback As the DBI doc says, you almost certainly do not need to call ""finish"" in DBI method if you fetch all rows (probably in a loop). However, there are several exceptions to this rule, and rolling-back of an unfinished SELECT statement is one of such exceptional cases. SQLite prohibits ROLLBACK of unfinished SELECT statements in a transaction (See http://sqlite.org/lang_transaction.html for details). So you need to call finish before you issue a rollback.   $sth = $dbh->prepare(""SELECT * FROM t"");   $dbh->begin_work;   eval {       $sth->execute;       $row = $sth->fetch;       ...       die ""For some reason"";       ...   };   if($@) {      $sth->finish;  # You need this for SQLite      $dbh->rollback;   } else {      $dbh->commit;   } Processing Multiple Statements At A Time DBI's statement handle is not supposed to process multiple statements at a time. So if you pass a string that contains multiple statements (a dump) to a statement handle (via prepare or do), DBD::SQLite only processes the first statement, and discards the rest. If you need to process multiple statements at a time, set a sqlite_allow_multiple_statements attribute of a database handle to true when you connect to a database, and do method takes care of the rest (since 1.30_01, and without creating DBI's statement handles internally since 1.47_01). If you do need to use prepare or prepare_cached (which I don't recommend in this case, because typically there's no placeholder nor reusable part in a dump), you can look at << $sth->{sqlite_unprepared_statements} >> to retrieve what's left, though it usually contains nothing but white spaces. Performance SQLite is fast, very fast. Matt processed his 72MB log file with it, inserting the data (400,000+ rows) by using transactions and only committing every 1000 rows (otherwise the insertion is quite slow), and then performing queries on the data. Queries like count(*) and avg(bytes) took fractions of a second to return, but what surprised him most of all was:   SELECT url, count(*) as count   FROM access_log   GROUP BY url   ORDER BY count desc   LIMIT 20 To discover the top 20 hit URLs on the site (http://axkit.org), and it returned within 2 seconds. He was seriously considering switching his log analysis code to use this little speed demon! Oh yeah, and that was with no indexes on the table, on a 400MHz PIII. For best performance be sure to tune your hdparm settings if you are using linux. Also you might want to set:   PRAGMA synchronous = OFF Which will prevent SQLite from doing fsync's when writing (which slows down non-transactional writes significantly) at the expense of some peace of mind. Also try playing with the cache_size pragma. The memory usage of SQLite can also be tuned using the cache_size pragma.   $dbh->do(""PRAGMA cache_size = 800000""); The above will allocate 800M for DB cache; the default is 2M. Your sweet spot probably lies somewhere in between. DRIVER PRIVATE ATTRIBUTES Database Handle Attributes sqlite_version Returns the version of the SQLite library which DBD::SQLite is using, e.g., ""2.8.0"". Can only be read. sqlite_unicode If set to a true value, DBD::SQLite will turn the UTF-8 flag on for all text strings coming out of the database (this feature is currently disabled for perl < 5.8.5). For more details on the UTF-8 flag see perlunicode. The default is for the UTF-8 flag to be turned off. Also note that due to some bizarreness in SQLite's type system (see http://www.sqlite.org/datatype3.html), if you want to retain blob-style behavior for some columns under $dbh->{sqlite_unicode} = 1 (say, to store images in the database), you have to state so explicitly using the 3-argument form of ""bind_param"" in DBI when doing updates:   use DBI qw(:sql_types);   $dbh->{sqlite_unicode} = 1;   my $sth = $dbh->prepare(""INSERT INTO mytable (blobcolumn) VALUES (?)"");      # Binary_data will be stored as is.   $sth->bind_param(1, $binary_data, SQL_BLOB); Defining the column type as BLOB in the DDL is not sufficient. This attribute was originally named as unicode, and renamed to sqlite_unicode for integrity since version 1.26_06. Old unicode attribute is still accessible but will be deprecated in the near future. sqlite_allow_multiple_statements If you set this to true, do method will process multiple statements at one go. This may be handy, but with performance penalty. See above for details. sqlite_use_immediate_transaction If you set this to true, DBD::SQLite tries to issue a begin immediate transaction (instead of begin transaction) when necessary. See above for details. As of version 1.38_01, this attribute is set to true by default. If you really need to use deferred transactions for some reasons, set this to false explicitly. sqlite_see_if_its_a_number If you set this to true, DBD::SQLite tries to see if the bind values are number or not, and does not quote if they are numbers. See above for details. Statement Handle Attributes sqlite_unprepared_statements Returns an unprepared part of the statement you pass to prepare. Typically this contains nothing but white spaces after a semicolon. See above for details. METHODS See also to the DBI documentation for the details of other common methods. table_info   $sth = $dbh->table_info(undef, $schema, $table, $type, \%attr); Returns all tables and schemas (databases) as specified in ""table_info"" in DBI. The schema and table arguments will do a LIKE search. You can specify an ESCAPE character by including an 'Escape' attribute in \%attr. The $type argument accepts a comma separated list of the following types 'TABLE', 'VIEW', 'LOCAL TEMPORARY' and 'SYSTEM TABLE' (by default all are returned). Note that a statement handle is returned, and not a direct list of tables. The following fields are returned: TABLE_CAT: Always NULL, as SQLite does not have the concept of catalogs. TABLE_SCHEM: The name of the schema (database) that the table or view is in. The default schema is 'main', temporary tables are in 'temp' and other databases will be in the name given when the database was attached. TABLE_NAME: The name of the table or view. TABLE_TYPE: The type of object returned. Will be one of 'TABLE', 'VIEW', 'LOCAL TEMPORARY' or 'SYSTEM TABLE'. primary_key, primary_key_info   @names = $dbh->primary_key(undef, $schema, $table);   $sth   = $dbh->primary_key_info(undef, $schema, $table, \%attr); You can retrieve primary key names or more detailed information. As noted above, SQLite does not have the concept of catalogs, so the first argument of the methods is usually undef, and you'll usually set undef for the second one (unless you want to know the primary keys of temporary tables). foreign_key_info   $sth = $dbh->foreign_key_info(undef, $pk_schema, $pk_table,                                 undef, $fk_schema, $fk_table); Returns information about foreign key constraints, as specified in ""foreign_key_info"" in DBI, but with some limitations : information in rows returned by the $sth is incomplete with respect to the ""foreign_key_info"" in DBI specification. All requested fields are present, but the content is undef for some of them. The following nonempty fields are returned : PKTABLE_NAME: The primary (unique) key table identifier. PKCOLUMN_NAME: The primary (unique) key column identifier. FKTABLE_NAME: The foreign key table identifier. FKCOLUMN_NAME: The foreign key column identifier. KEY_SEQ: The column sequence number (starting with 1), when several columns belong to a same constraint. UPDATE_RULE: The referential action for the UPDATE rule. The following codes are defined:   CASCADE              0   RESTRICT             1   SET NULL             2   NO ACTION            3   SET DEFAULT          4 Default is 3 ('NO ACTION'). DELETE_RULE: The referential action for the DELETE rule. The codes are the same as for UPDATE_RULE. Unfortunately, the DEFERRABILITY field is always undef; as a matter of fact, deferrability clauses are supported by SQLite, but they can't be reported because the PRAGMA foreign_key_list tells nothing about them. UNIQUE_OR_PRIMARY: Whether the column is primary or unique. Note: foreign key support in SQLite must be explicitly turned on through a PRAGMA command; see ""Foreign keys"" earlier in this manual. statistics_info   $sth = $dbh->statistics_info(undef, $schema, $table,                                 $unique_only, $quick); Returns information about a table and it's indexes, as specified in ""statistics_info"" in DBI, but with some limitations : information in rows returned by the $sth is incomplete with respect to the ""statistics_info"" in DBI specification. All requested fields are present, but the content is undef for some of them. The following nonempty fields are returned : TABLE_SCHEM: The name of the schema (database) that the table is in. The default schema is 'main', temporary tables are in 'temp' and other databases will be in the name given when the database was attached. TABLE_NAME: The name of the table NON_UNIQUE: Contains 0 for unique indexes, 1 for non-unique indexes INDEX_NAME: The name of the index TYPE: SQLite uses 'btree' for all it's indexes ORDINAL_POSITION: Column sequence number (starting with 1). COLUMN_NAME: The name of the column ping   my $bool = $dbh->ping; returns true if the database file exists (or the database is in-memory), and the database connection is active. DRIVER PRIVATE METHODS The following methods can be called via the func() method with a little tweak, but the use of func() method is now discouraged by the DBI author for various reasons (see DBI's document http://search.cpan.org/dist/DBI/lib/DBI/DBD.pm#Using_install_method()_to_expose_driver-private_methods for details). So, if you're using DBI >= 1.608, use these sqlite_ methods. If you need to use an older DBI, you can call these like this:   $dbh->func( ..., ""(method name without sqlite_ prefix)"" ); Exception: sqlite_trace should always be called as is, even with func() method (to avoid conflict with DBI's trace() method).   $dbh->func( ..., ""sqlite_trace""); $dbh->sqlite_last_insert_rowid() This method returns the last inserted rowid. If you specify an INTEGER PRIMARY KEY as the first column in your table, that is the column that is returned. Otherwise, it is the hidden ROWID column. See the SQLite docs for details. Generally you should not be using this method. Use the DBI last_insert_id method instead. The usage of this is:   $h->last_insert_id($catalog, $schema, $table_name, $field_name [, \%attr ]) Running $h->last_insert_id("""","""","""","""") is the equivalent of running $dbh->sqlite_last_insert_rowid() directly. $dbh->sqlite_db_filename() Retrieve the current (main) database filename. If the database is in-memory or temporary, this returns undef. $dbh->sqlite_busy_timeout() Retrieve the current busy timeout. $dbh->sqlite_busy_timeout( $ms ) Set the current busy timeout. The timeout is in milliseconds. $dbh->sqlite_create_function( $name, $argc, $code_ref, $flags ) This method will register a new function which will be usable in an SQL query. The method's parameters are: $name The name of the function. This is the name of the function as it will be used from SQL. $argc The number of arguments taken by the function. If this number is -1, the function can take any number of arguments. $code_ref This should be a reference to the function's implementation. $flags You can optionally pass an extra flag bit to create_function, which then would be ORed with SQLITE_UTF8 (default). As of 1.47_02 (SQLite 3.8.9), only meaning bit is SQLITE_DETERMINISTIC (introduced at SQLite 3.8.3), which can make the function perform better. See C API documentation at http://sqlite.org/c3ref/create_function.html for details. For example, here is how to define a now() function which returns the current number of seconds since the epoch:   $dbh->sqlite_create_function( 'now', 0, sub { return time } ); After this, it could be used from SQL as:   INSERT INTO mytable ( now() ); REGEXP function SQLite includes syntactic support for an infix operator 'REGEXP', but without any implementation. The DBD::SQLite driver automatically registers an implementation that performs standard perl regular expression matching, using current locale. So for example you can search for words starting with an 'A' with a query like   SELECT * from table WHERE column REGEXP '\bA\w+' If you want case-insensitive searching, use perl regex flags, like this :   SELECT * from table WHERE column REGEXP '(?i:\bA\w+)' The default REGEXP implementation can be overridden through the create_function API described above. Note that regexp matching will not use SQLite indices, but will iterate over all rows, so it could be quite costly in terms of performance. $dbh->sqlite_create_collation( $name, $code_ref ) This method manually registers a new function which will be usable in an SQL query as a COLLATE option for sorting. Such functions can also be registered automatically on demand: see section ""COLLATION FUNCTIONS"" below. The method's parameters are: $name The name of the function exposed to SQL. $code_ref Reference to the function's implementation. The driver will check that this is a proper sorting function. $dbh->sqlite_collation_needed( $code_ref ) This method manually registers a callback function that will be invoked whenever an undefined collation sequence is required from an SQL statement. The callback is invoked as   $code_ref->($dbh, $collation_name) and should register the desired collation using ""sqlite_create_collation"". An initial callback is already registered by DBD::SQLite, so for most common cases it will be simpler to just add your collation sequences in the %DBD::SQLite::COLLATION hash (see section ""COLLATION FUNCTIONS"" below). $dbh->sqlite_create_aggregate( $name, $argc, $pkg, $flags ) This method will register a new aggregate function which can then be used from SQL. The method's parameters are: $name The name of the aggregate function, this is the name under which the function will be available from SQL. $argc This is an integer which tells the SQL parser how many arguments the function takes. If that number is -1, the function can take any number of arguments. $pkg This is the package which implements the aggregator interface. $flags You can optionally pass an extra flag bit to create_aggregate, which then would be ORed with SQLITE_UTF8 (default). As of 1.47_02 (SQLite 3.8.9), only meaning bit is SQLITE_DETERMINISTIC (introduced at SQLite 3.8.3), which can make the function perform better. See C API documentation at http://sqlite.org/c3ref/create_function.html for details. The aggregator interface consists of defining three methods: new() This method will be called once to create an object which should be used to aggregate the rows in a particular group. The step() and finalize() methods will be called upon the reference return by the method. step(@_) This method will be called once for each row in the aggregate. finalize() This method will be called once all rows in the aggregate were processed and it should return the aggregate function's result. When there is no rows in the aggregate, finalize() will be called right after new(). Here is a simple aggregate function which returns the variance (example adapted from pysqlite):   package variance;      sub new { bless [], shift; }      sub step {       my ( $self, $value ) = @_;          push @$self, $value;   }      sub finalize {       my $self = $_[0];          my $n = @$self;          # Variance is NULL unless there is more than one row       return undef unless $n || $n == 1;          my $mu = 0;       foreach my $v ( @$self ) {           $mu += $v;       }       $mu /= $n;          my $sigma = 0;       foreach my $v ( @$self ) {           $sigma += ($v - $mu)**2;       }       $sigma = $sigma / ($n - 1);          return $sigma;   }      $dbh->sqlite_create_aggregate( ""variance"", 1, 'variance' ); The aggregate function can then be used as:   SELECT group_name, variance(score)   FROM results   GROUP BY group_name; For more examples, see the DBD::SQLite::Cookbook. $dbh->sqlite_progress_handler( $n_opcodes, $code_ref ) This method registers a handler to be invoked periodically during long running calls to SQLite. An example use for this interface is to keep a GUI updated during a large query. The parameters are: $n_opcodes The progress handler is invoked once for every $n_opcodes virtual machine opcodes in SQLite. $code_ref Reference to the handler subroutine. If the progress handler returns non-zero, the SQLite operation is interrupted. This feature can be used to implement a ""Cancel"" button on a GUI dialog box. Set this argument to undef if you want to unregister a previous progress handler. $dbh->sqlite_commit_hook( $code_ref ) This method registers a callback function to be invoked whenever a transaction is committed. Any callback set by a previous call to sqlite_commit_hook is overridden. A reference to the previous callback (if any) is returned. Registering an undef disables the callback. When the commit hook callback returns zero, the commit operation is allowed to continue normally. If the callback returns non-zero, then the commit is converted into a rollback (in that case, any attempt to explicitly call $dbh->rollback() afterwards would yield an error). $dbh->sqlite_rollback_hook( $code_ref ) This method registers a callback function to be invoked whenever a transaction is rolled back. Any callback set by a previous call to sqlite_rollback_hook is overridden. A reference to the previous callback (if any) is returned. Registering an undef disables the callback. $dbh->sqlite_update_hook( $code_ref ) This method registers a callback function to be invoked whenever a row is updated, inserted or deleted. Any callback set by a previous call to sqlite_update_hook is overridden. A reference to the previous callback (if any) is returned. Registering an undef disables the callback. The callback will be called as   $code_ref->($action_code, $database, $table, $rowid) where $action_code is an integer equal to either DBD::SQLite::INSERT, DBD::SQLite::DELETE or DBD::SQLite::UPDATE (see ""Action Codes""); $database is the name of the database containing the affected row; $table is the name of the table containing the affected row; $rowid is the unique 64-bit signed integer key of the affected row within that table. $dbh->sqlite_set_authorizer( $code_ref ) This method registers an authorizer callback to be invoked whenever SQL statements are being compiled by the ""prepare"" in DBI method. The authorizer callback should return DBD::SQLite::OK to allow the action, DBD::SQLite::IGNORE to disallow the specific action but allow the SQL statement to continue to be compiled, or DBD::SQLite::DENY to cause the entire SQL statement to be rejected with an error. If the authorizer callback returns any other value, then prepare call that triggered the authorizer will fail with an error message. An authorizer is used when preparing SQL statements from an untrusted source, to ensure that the SQL statements do not try to access data they are not allowed to see, or that they do not try to execute malicious statements that damage the database. For example, an application may allow a user to enter arbitrary SQL queries for evaluation by a database. But the application does not want the user to be able to make arbitrary changes to the database. An authorizer could then be put in place while the user-entered SQL is being prepared that disallows everything except SELECT statements. The callback will be called as   $code_ref->($action_code, $string1, $string2, $database, $trigger_or_view) where $action_code is an integer that specifies what action is being authorized (see ""Action Codes""). $string1, $string2 are strings that depend on the action code (see ""Action Codes""). $database is the name of the database (main, temp, etc.) if applicable. $trigger_or_view is the name of the inner-most trigger or view that is responsible for the access attempt, or undef if this access attempt is directly from top-level SQL code. $dbh->sqlite_backup_from_file( $filename ) This method accesses the SQLite Online Backup API, and will take a backup of the named database file, copying it to, and overwriting, your current database connection. This can be particularly handy if your current connection is to the special :memory: database, and you wish to populate it from an existing DB. $dbh->sqlite_backup_to_file( $filename ) This method accesses the SQLite Online Backup API, and will take a backup of the currently connected database, and write it out to the named file. $dbh->sqlite_enable_load_extension( $bool ) Calling this method with a true value enables loading (external) SQLite3 extensions. After the call, you can load extensions like this:   $dbh->sqlite_enable_load_extension(1);   $sth = $dbh->prepare(""select load_extension('libsqlitefunctions.so')"")   or die ""Cannot prepare: "" . $dbh->errstr(); $dbh->sqlite_load_extension( $file, $proc ) Loading an extension by a select statement (with the ""load_extension"" SQLite3 function like above) has some limitations. If you need to, say, create other functions from an extension, use this method. $file (a path to the extension) is mandatory, and $proc (an entry point name) is optional. You need to call sqlite_enable_load_extension before calling sqlite_load_extension. $dbh->sqlite_trace( $code_ref ) This method registers a trace callback to be invoked whenever SQL statements are being run. The callback will be called as   $code_ref->($statement) where $statement is a UTF-8 rendering of the SQL statement text as the statement first begins executing. Additional callbacks might occur as each triggered subprogram is entered. The callbacks for triggers contain a UTF-8 SQL comment that identifies the trigger. See also ""TRACING"" in DBI for better tracing options. $dbh->sqlite_profile( $code_ref ) This method registers a profile callback to be invoked whenever a SQL statement finishes. The callback will be called as   $code_ref->($statement, $elapsed_time) where $statement is the original statement text (without bind parameters). $elapsed_time is an estimate of wall-clock time of how long that statement took to run (in milliseconds). This method is considered experimental and is subject to change in future versions of SQLite. See also DBI::Profile for better profiling options. $dbh->sqlite_table_column_metadata( $dbname, $tablename, $columnname ) is for internal use only. $dbh->sqlite_db_status() Returns a hash reference that holds a set of status information of database connection such as cache usage. See http://www.sqlite.org/c3ref/c_dbstatus_options.html for details. You may also pass 0 as an argument to reset the status. $sth->sqlite_st_status() Returns a hash reference that holds a set of status information of SQLite statement handle such as full table scan count. See http://www.sqlite.org/c3ref/c_stmtstatus_counter.html for details. Statement status only holds the current value.   my $status = $sth->sqlite_st_status();   my $cur = $status->{fullscan_step}; You may also pass 0 as an argument to reset the status. $dbh->sqlite_create_module() Registers a name for a virtual table module. Module names must be registered before creating a new virtual table using the module and before using a preexisting virtual table for the module. Virtual tables are explained in DBD::SQLite::VirtualTable. DRIVER FUNCTIONS DBD::SQLite::compile_options() Returns an array of compile options (available since SQLite 3.6.23, bundled in DBD::SQLite 1.30_01), or an empty array if the bundled library is old or compiled with SQLITE_OMIT_COMPILEOPTION_DIAGS. DBD::SQLite::sqlite_status() Returns a hash reference that holds a set of status information of SQLite runtime such as memory usage or page cache usage (see http://www.sqlite.org/c3ref/c_status_malloc_count.html for details). Each of the entry contains the current value and the highwater value.   my $status = DBD::SQLite::sqlite_status();   my $cur  = $status->{memory_used}{current};   my $high = $status->{memory_used}{highwater}; You may also pass 0 as an argument to reset the status. DBD::SQLite::strlike($pattern, $string, $escape_char), DBD::SQLite::strglob($pattern, $string) As of 1.49_05 (SQLite 3.10.0), you can use these two functions to see if a string matches a pattern. These may be useful when you create a virtual table or a custom function. See http://sqlite.org/c3ref/strlike.html and http://sqlite.org/c3ref/strglob.html for details. DRIVER CONSTANTS A subset of SQLite C constants are made available to Perl, because they may be needed when writing hooks or authorizer callbacks. For accessing such constants, the DBD::SQLite module must be explicitly used at compile time. For example, an authorizer that forbids any DELETE operation would be written as follows :   use DBD::SQLite;   $dbh->sqlite_set_authorizer(sub {     my $action_code = shift;     return $action_code == DBD::SQLite::DELETE ? DBD::SQLite::DENY                                                : DBD::SQLite::OK;   }); The list of constants implemented in DBD::SQLite is given below; more information can be found ad at http://www.sqlite.org/c3ref/constlist.html. Authorizer Return Codes   OK   DENY   IGNORE Action Codes The ""set_authorizer"" method registers a callback function that is invoked to authorize certain SQL statement actions. The first parameter to the callback is an integer code that specifies what action is being authorized. The second and third parameters to the callback are strings, the meaning of which varies according to the action code. Below is the list of action codes, together with their associated strings.   # constant              string1         string2   # ========              =======         =======   CREATE_INDEX            Index Name      Table Name   CREATE_TABLE            Table Name      undef   CREATE_TEMP_INDEX       Index Name      Table Name   CREATE_TEMP_TABLE       Table Name      undef   CREATE_TEMP_TRIGGER     Trigger Name    Table Name   CREATE_TEMP_VIEW        View Name       undef   CREATE_TRIGGER          Trigger Name    Table Name   CREATE_VIEW             View Name       undef   DELETE                  Table Name      undef   DROP_INDEX              Index Name      Table Name   DROP_TABLE              Table Name      undef   DROP_TEMP_INDEX         Index Name      Table Name   DROP_TEMP_TABLE         Table Name      undef   DROP_TEMP_TRIGGER       Trigger Name    Table Name   DROP_TEMP_VIEW          View Name       undef   DROP_TRIGGER            Trigger Name    Table Name   DROP_VIEW               View Name       undef   INSERT                  Table Name      undef   PRAGMA                  Pragma Name     1st arg or undef   READ                    Table Name      Column Name   SELECT                  undef           undef   TRANSACTION             Operation       undef   UPDATE                  Table Name      Column Name   ATTACH                  Filename        undef   DETACH                  Database Name   undef   ALTER_TABLE             Database Name   Table Name   REINDEX                 Index Name      undef   ANALYZE                 Table Name      undef   CREATE_VTABLE           Table Name      Module Name   DROP_VTABLE             Table Name      Module Name   FUNCTION                undef           Function Name   SAVEPOINT               Operation       Savepoint Name COLLATION FUNCTIONS Definition SQLite v3 provides the ability for users to supply arbitrary comparison functions, known as user-defined ""collation sequences"" or ""collating functions"", to be used for comparing two text values. http://www.sqlite.org/datatype3.html#collation explains how collations are used in various SQL expressions. Builtin collation sequences The following collation sequences are builtin within SQLite : BINARY Compares string data using memcmp(), regardless of text encoding. NOCASE The same as binary, except the 26 upper case characters of ASCII are folded to their lower case equivalents before the comparison is performed. Note that only ASCII characters are case folded. SQLite does not attempt to do full UTF case folding due to the size of the tables required. RTRIM The same as binary, except that trailing space characters are ignored. In addition, DBD::SQLite automatically installs the following collation sequences : perl corresponds to the Perl cmp operator perllocale Perl cmp operator, in a context where use locale is activated. Usage You can write for example   CREATE TABLE foo(       txt1 COLLATE perl,       txt2 COLLATE perllocale,       txt3 COLLATE nocase   ) or   SELECT * FROM foo ORDER BY name COLLATE perllocale Unicode handling If the attribute $dbh->{sqlite_unicode} is set, strings coming from the database and passed to the collation function will be properly tagged with the utf8 flag; but this only works if the sqlite_unicode attribute is set before the first call to a perl collation sequence . The recommended way to activate unicode is to set the parameter at connection time :   my $dbh = DBI->connect(       ""dbi:SQLite:dbname=foo"", """", """",       {           RaiseError     => 1,           sqlite_unicode => 1,       }   ); Adding user-defined collations The native SQLite API for adding user-defined collations is exposed through methods ""sqlite_create_collation"" and ""sqlite_collation_needed"". To avoid calling these functions every time a $dbh handle is created, DBD::SQLite offers a simpler interface through the %DBD::SQLite::COLLATION hash : just insert your own collation functions in that hash, and whenever an unknown collation name is encountered in SQL, the appropriate collation function will be loaded on demand from the hash. For example, here is a way to sort text values regardless of their accented characters :   use DBD::SQLite;   $DBD::SQLite::COLLATION{no_accents} = sub {     my ( $a, $b ) = map lc, @_;     tr[����������������������������]       [aaaaaacdeeeeiiiinoooooouuuuy] for $a, $b;     $a cmp $b;   };   my $dbh  = DBI->connect(""dbi:SQLite:dbname=dbfile"");   my $sql  = ""SELECT ... FROM ... ORDER BY ... COLLATE no_accents"");   my $rows = $dbh->selectall_arrayref($sql); The builtin perl or perllocale collations are predefined in that same hash. The COLLATION hash is a global registry within the current process; hence there is a risk of undesired side-effects. Therefore, to prevent action at distance, the hash is implemented as a ""write-only"" hash, that will happily accept new entries, but will raise an exception if any attempt is made to override or delete a existing entry (including the builtin perl and perllocale). If you really, really need to change or delete an entry, you can always grab the tied object underneath %DBD::SQLite::COLLATION --- but don't do that unless you really know what you are doing. Also observe that changes in the global hash will not modify existing collations in existing database handles: it will only affect new requests for collations. In other words, if you want to change the behaviour of a collation within an existing $dbh, you need to call the ""create_collation"" method directly. FULLTEXT SEARCH SQLite is bundled with an extension module for full-text indexing. Tables with this feature enabled can be efficiently queried to find rows that contain one or more instances of some specified words, in any column, even if the table contains many large documents. Explanations for using this feature are provided in a separate document: see DBD::SQLite::Fulltext_search. R* TREE SUPPORT The RTREE extension module within SQLite adds support for creating a R-Tree, a special index for range and multidimensional queries. This allows users to create tables that can be loaded with (as an example) geospatial data such as latitude/longitude coordinates for buildings within a city :   CREATE VIRTUAL TABLE city_buildings USING rtree(      id,               -- Integer primary key      minLong, maxLong, -- Minimum and maximum longitude      minLat, maxLat    -- Minimum and maximum latitude   ); then query which buildings overlap or are contained within a specified region:   # IDs that are contained within query coordinates   my $contained_sql = <<"""";   SELECT id FROM try_rtree      WHERE  minLong >= ? AND maxLong <= ?      AND    minLat  >= ? AND maxLat  <= ?      # ... and those that overlap query coordinates   my $overlap_sql = <<"""";   SELECT id FROM try_rtree      WHERE    maxLong >= ? AND minLong <= ?      AND      maxLat  >= ? AND minLat  <= ?      my $contained = $dbh->selectcol_arrayref($contained_sql,undef,                         $minLong, $maxLong, $minLat, $maxLat);      my $overlapping = $dbh->selectcol_arrayref($overlap_sql,undef,                         $minLong, $maxLong, $minLat, $maxLat);  For more detail, please see the SQLite R-Tree page (http://www.sqlite.org/rtree.html). Note that custom R-Tree queries using callbacks, as mentioned in the prior link, have not been implemented yet. VIRTUAL TABLES IMPLEMENTED IN PERL SQLite has a concept of ""virtual tables"" which look like regular tables but are implemented internally through specific functions. The fulltext or R* tree features described in the previous chapters are examples of such virtual tables, implemented in C code. DBD::SQLite also supports virtual tables implemented in Perl code: see DBD::SQLite::VirtualTable for using or implementing such virtual tables. These can have many interesting uses for joining regular DBMS data with some other kind of data within your Perl programs. Bundled with the present distribution are : DBD::SQLite::VirtualTable::FileContent : implements a virtual column that exposes file contents. This is especially useful in conjunction with a fulltext index; see DBD::SQLite::Fulltext_search. DBD::SQLite::VirtualTable::PerlData : binds to a Perl array within the Perl program. This can be used for simple import/export operations, for debugging purposes, for joining data from different sources, etc. Other Perl virtual tables may also be published separately on CPAN. FOR DBD::SQLITE EXTENSION AUTHORS Since 1.30_01, you can retrieve the bundled SQLite C source and/or header like this:   use File::ShareDir 'dist_dir';   use File::Spec::Functions 'catfile';      # the whole sqlite3.h header   my $sqlite3_h = catfile(dist_dir('DBD-SQLite'), 'sqlite3.h');      # or only a particular header, amalgamated in sqlite3.c   my $what_i_want = 'parse.h';   my $sqlite3_c = catfile(dist_dir('DBD-SQLite'), 'sqlite3.c');   open my $fh, '<', $sqlite3_c or die $!;   my $code = do { local $/; <$fh> };   my ($parse_h) = $code =~ m{(     /\*+[ ]Begin[ ]file[ ]$what_i_want[ ]\*+     .+?     /\*+[ ]End[ ]of[ ]$what_i_want[ ]\*+/   )}sx;   open my $out, '>', $what_i_want or die $!;   print $out $parse_h;   close $out; You usually want to use this in your extension's Makefile.PL, and you may want to add DBD::SQLite to your extension's CONFIGURE_REQUIRES to ensure your extension users use the same C source/header they use to build DBD::SQLite itself (instead of the ones installed in their system). TO DO The following items remain to be done. Leak Detection Implement one or more leak detection tests that only run during AUTOMATED_TESTING and RELEASE_TESTING and validate that none of the C code we work with leaks. Stream API for Blobs Reading/writing into blobs using sqlite2_blob_open / sqlite2_blob_close. Support for custom callbacks for R-Tree queries Custom queries of a R-Tree index using a callback are possible with the SQLite C API (http://www.sqlite.org/rtree.html), so one could potentially use a callback that narrowed the result set down based on a specific need, such as querying for overlapping circles. SUPPORT Bugs should be reported via the CPAN bug tracker at http://rt.cpan.org/NoAuth/ReportBug.html?Queue=DBD-SQLite Note that bugs of bundled SQLite library (i.e. bugs in sqlite3.[ch]) should be reported to the SQLite developers at sqlite.org via their bug tracker or via their mailing list. The master repository is on GitHub: https://github.com/DBD-SQLite/DBD-SQLite. We also have a mailing list: http://lists.scsys.co.uk/cgi-bin/mailman/listinfo/dbd-sqlite AUTHORS Matt Sergeant <matt@sergeant.org> Francis J. Lacoste <flacoste@logreport.org> Wolfgang Sourdeau <wolfgang@logreport.org> Adam Kennedy <adamk@cpan.org> Max Maischein <corion@cpan.org> Laurent Dami <dami@cpan.org> Kenichi Ishigaki <ishigaki@cpan.org> COPYRIGHT The bundled SQLite code in this distribution is Public Domain. DBD::SQLite is copyright 2002 - 2007 Matt Sergeant. Some parts copyright 2008 Francis J. Lacoste. Some parts copyright 2008 Wolfgang Sourdeau. Some parts copyright 2008 - 2013 Adam Kennedy. Some parts copyright 2009 - 2013 Kenichi Ishigaki. Some parts derived from DBD::SQLite::Amalgamation copyright 2008 Audrey Tang. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself. The full text of the license can be found in the LICENSE file included with this module. × Module Install Instructions To install DBD::SQLite, simply copy and paste either of the commands in to your terminal cpanm                      cpanm DBD::SQLite CPAN shell                      perl -MCPAN -e shell                     install DBD::SQLite For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Relational Databases"	"DBD::Sybase"	"https://metacpan.org/pod/DBD::Sybase"	"Sybase and MS-SQL. No placeholders w/ MS-SQL though"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DBD::Sybase - Sybase database driver for the DBI module - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Michael Peppler  /  1.15 (MEWP on 2013-04-04) 1.14 (MEWP on 2011-10-02) 1.13 (MEWP on 2011-09-06) 1.12 (MEWP on 2011-04-25) 1.11 (MEWP on 2010-11-06) 1.10 (MEWP on 2010-04-12) 1.09 (MEWP on 2008-08-31) 1.08 (MEWP on 2007-04-21) 1.07 (MEWP on 2005-10-04) 1.06 (MEWP on 2005-08-05) 1.05_03 DEV (MEWP on 2005-07-23) 1.05_02 DEV (MEWP on 2005-06-27) 1.05_01 DEV (MEWP on 2005-04-09) 1.05 (MEWP on 2004-12-19) 1.04_16 DEV (MEWP on 2004-12-15) 1.04_15 DEV (MEWP on 2004-12-01) 1.04_14 DEV (MEWP on 2004-11-25) 1.04_11 DEV (MEWP on 2004-10-07) 1.04_10 DEV (MEWP on 2004-10-04) 1.04_9 DEV (MEWP on 2004-09-23) 1.04.8 (MEWP on 2004-09-23) 1.04 (MEWP on 2004-06-22) 1.03 (MEWP on 2004-06-16) 1.02 (MEWP on 2003-12-24) 1.01 (MEWP on 2003-09-08) 1.00 (MEWP on 2003-04-03) 0.95 (MEWP on 2002-10-23) 0.94 (MEWP on 2001-12-13) 0.93 (MEWP on 2001-08-03) 0.91 (MEWP on 2000-11-15) 0.90 (MEWP on 2000-11-06) 0.23 (MEWP on 2000-09-01) 0.22 (MEWP on 2000-03-24) 0.21 (MEWP on 1999-10-01) 0.20 (MEWP on 1999-09-07) 0.19 (MEWP on 1999-06-25) 0.18 (MEWP on 1999-06-22) 0.17 (MEWP on 1999-05-31) 0.16 (MEWP on 1999-05-23) 0.15 (MEWP on 1999-05-17) 0.14 (MEWP on 1999-05-16) 0.13 (MEWP on 1998-11-23) 0.12 (MEWP on 1998-11-17) 0.11 (MEWP on 1998-11-15) 0.10 (MEWP on 1998-10-28) 0.09 (MEWP on 1998-10-08) 0.08 (MEWP on 1998-05-20) 0.06 (MEWP on 1997-11-03) 0.05 (MEWP on 1997-10-31) 0.04 (MEWP on 1997-10-07) 0.03 (MEWP on 1997-09-26) 0.01 (MEWP on 1996-02-02) DBD-Sybase-1.15 4 ++ 4 ++  / DBD::Sybase 04 Apr 2013 19:53:55 GMT Module version: 1.15 Source (raw) Browse (raw) Changes Issues (63) 5 (4 reviews) Testers (0 / 0 / 0) Kwalitee License: unknown Activity 24 month Tools MOBI | EPUB Download (195.17Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.14 (MEWP on 2011-10-02) 1.13 (MEWP on 2011-09-06) 1.12 (MEWP on 2011-04-25) 1.11 (MEWP on 2010-11-06) 1.10 (MEWP on 2010-04-12) 1.09 (MEWP on 2008-08-31) 1.08 (MEWP on 2007-04-21) 1.07 (MEWP on 2005-10-04) 1.06 (MEWP on 2005-08-05) 1.05_03 DEV (MEWP on 2005-07-23) 1.05_02 DEV (MEWP on 2005-06-27) 1.05_01 DEV (MEWP on 2005-04-09) 1.05 (MEWP on 2004-12-19) 1.04_16 DEV (MEWP on 2004-12-15) 1.04_15 DEV (MEWP on 2004-12-01) 1.04_14 DEV (MEWP on 2004-11-25) 1.04_11 DEV (MEWP on 2004-10-07) 1.04_10 DEV (MEWP on 2004-10-04) 1.04_9 DEV (MEWP on 2004-09-23) 1.04.8 (MEWP on 2004-09-23) 1.04 (MEWP on 2004-06-22) 1.03 (MEWP on 2004-06-16) 1.02 (MEWP on 2003-12-24) 1.01 (MEWP on 2003-09-08) 1.00 (MEWP on 2003-04-03) 0.95 (MEWP on 2002-10-23) 0.94 (MEWP on 2001-12-13) 0.93 (MEWP on 2001-08-03) 0.91 (MEWP on 2000-11-15) 0.90 (MEWP on 2000-11-06) 0.23 (MEWP on 2000-09-01) 0.22 (MEWP on 2000-03-24) 0.21 (MEWP on 1999-10-01) 0.20 (MEWP on 1999-09-07) 0.19 (MEWP on 1999-06-25) 0.18 (MEWP on 1999-06-22) 0.17 (MEWP on 1999-05-31) 0.16 (MEWP on 1999-05-23) 0.15 (MEWP on 1999-05-17) 0.14 (MEWP on 1999-05-16) 0.13 (MEWP on 1998-11-23) 0.12 (MEWP on 1998-11-17) 0.11 (MEWP on 1998-11-15) 0.10 (MEWP on 1998-10-28) 0.09 (MEWP on 1998-10-08) 0.08 (MEWP on 1998-05-20) 0.06 (MEWP on 1997-11-03) 0.05 (MEWP on 1997-10-31) 0.04 (MEWP on 1997-10-07) 0.03 (MEWP on 1997-09-26) 0.01 (MEWP on 1996-02-02) Diff with version 1.14 (MEWP on 2011-10-02) 1.13 (MEWP on 2011-09-06) 1.12 (MEWP on 2011-04-25) 1.11 (MEWP on 2010-11-06) 1.10 (MEWP on 2010-04-12) 1.09 (MEWP on 2008-08-31) 1.08 (MEWP on 2007-04-21) 1.07 (MEWP on 2005-10-04) 1.06 (MEWP on 2005-08-05) 1.05_03 DEV (MEWP on 2005-07-23) 1.05_02 DEV (MEWP on 2005-06-27) 1.05_01 DEV (MEWP on 2005-04-09) 1.05 (MEWP on 2004-12-19) 1.04_16 DEV (MEWP on 2004-12-15) 1.04_15 DEV (MEWP on 2004-12-01) 1.04_14 DEV (MEWP on 2004-11-25) 1.04_11 DEV (MEWP on 2004-10-07) 1.04_10 DEV (MEWP on 2004-10-04) 1.04_9 DEV (MEWP on 2004-09-23) 1.04.8 (MEWP on 2004-09-23) 1.04 (MEWP on 2004-06-22) 1.03 (MEWP on 2004-06-16) 1.02 (MEWP on 2003-12-24) 1.01 (MEWP on 2003-09-08) 1.00 (MEWP on 2003-04-03) 0.95 (MEWP on 2002-10-23) 0.94 (MEWP on 2001-12-13) 0.93 (MEWP on 2001-08-03) 0.91 (MEWP on 2000-11-15) 0.90 (MEWP on 2000-11-06) 0.23 (MEWP on 2000-09-01) 0.22 (MEWP on 2000-03-24) 0.21 (MEWP on 1999-10-01) 0.20 (MEWP on 1999-09-07) 0.19 (MEWP on 1999-06-25) 0.18 (MEWP on 1999-06-22) 0.17 (MEWP on 1999-05-31) 0.16 (MEWP on 1999-05-23) 0.15 (MEWP on 1999-05-17) 0.14 (MEWP on 1999-05-16) 0.13 (MEWP on 1998-11-23) 0.12 (MEWP on 1998-11-17) 0.11 (MEWP on 1998-11-15) 0.10 (MEWP on 1998-10-28) 0.09 (MEWP on 1998-10-08) 0.08 (MEWP on 1998-05-20) 0.06 (MEWP on 1997-11-03) 0.05 (MEWP on 1997-10-31) 0.04 (MEWP on 1997-10-07) 0.03 (MEWP on 1997-09-26) 0.01 (MEWP on 1996-02-02) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 4 PAUSE users MEWP Michael Peppler Dependencies unknown CPAN Testers List Reverse dependencies NAME SYNOPSIS DESCRIPTION Connecting to Sybase The interfaces file Specifying the server name Specifying other connection specific parameters Handling Multiple Result Sets $sth->execute() failure mode behavior Sybase Specific Attributes Database Handle Attributes Statement Handle Attributes Controlling DATETIME output formats Retrieving OUTPUT parameters from stored procedures Multiple active statements on one $dbh Working with IMAGE and TEXT columns Handling IMAGE/TEXT data with syb_ct_get_data()/syb_ct_send_data() AutoCommit, Transactions and Transact-SQL Behavior of $dbh->last_insert_id Using ? Placeholders & bind parameters to $sth->execute Calling Stored Procedures Stored Procedures and Placeholders Other Private Methods DBD::Sybase private Database Handle Methods DBD::Sybase private Statement Handle Methods Experimental Bulk-Load Functionality Using DBD::Sybase with MS-SQL nsql Multi-Threading BUGS SEE ALSO AUTHOR COPYRIGHT ACKNOWLEDGEMENTS NAME DBD::Sybase - Sybase database driver for the DBI module SYNOPSIS     use DBI;      $dbh = DBI->connect(""dbi:Sybase:"", $user, $passwd);      # See the DBI module documentation for full details DESCRIPTION DBD::Sybase is a Perl module which works with the DBI module to provide access to Sybase databases. Connecting to Sybase The interfaces file The DBD::Sybase module is built on top of the Sybase Open Client Client Library API. This library makes use of the Sybase interfaces file (sql.ini on Win32 machines) to make a link between a logical server name (e.g. SYBASE) and the physical machine / port number that the server is running on. The OpenClient library uses the environment variable SYBASE to find the location of the interfaces file, as well as other files that it needs (such as locale files). The SYBASE environment is the path to the Sybase installation (eg '/usr/local/sybase'). If you need to set it in your scripts, then you must set it in a BEGIN{} block:    BEGIN {        $ENV{SYBASE} = '/opt/sybase/11.0.2';    }     my $dbh = DBI->connect('dbi:Sybase:', $user, $passwd); Specifying the server name The server that DBD::Sybase connects to defaults to SYBASE, but can be specified in two ways. You can set the DSQUERY environement variable:     $ENV{DSQUERY} = ""ENGINEERING"";     $dbh = DBI->connect('dbi:Sybase:', $user, $passwd); Or you can pass the server name in the first argument to connect():     $dbh = DBI->connect(""dbi:Sybase:server=ENGINEERING"", $user, $passwd); Specifying other connection specific parameters It is sometimes necessary (or beneficial) to specify other connection properties. Currently the following are supported: server Specify the server that we should connect to.      $dbh = DBI->connect(""dbi:Sybase:server=BILLING"",                          $user, $passwd); The default server is SYBASE, or the value of the $DSQUERY environment variable, if it is set. host port If you built DBD::Sybase with OpenClient 12.5.1 or later, then you can use the host and port values to define the server you want to connect to. This will by-pass the server name lookup in the interfaces file. This is useful in the case where the server hasn't been entered in the interfaces file.      $dbh = DBI->connect(""dbi:Sybase:host=db1.domain.com;port=4100"",                          $user, $passwd); maxConnect By default DBD::Sybase (and the underlying OpenClient libraries) is limited to openening 25 simultaneous connections to one or more database servers. If you need more than 25 connections at the same time, you can use the maxConnect option to increase this number.      $dbh = DBI->connect(""dbi:Sybase:maxConnect=100"",                          $user, $passwd); database Specify the database that should be made the default database.      $dbh = DBI->connect(""dbi:Sybase:database=sybsystemprocs"",                          $user, $passwd); This is equivalent to     $dbh = DBI->connect('dbi:Sybase:', $user, $passwd);     $dbh->do(""use sybsystemprocs""); charset Specify the character set that the client uses.      $dbh = DBI->connect(""dbi:Sybase:charset=iso_1"",                          $user, $passwd); The default charset used depends on the locale that the application runs in. If you wish to interact with unicode varaiables (see syb_enable_utf8, below) then you should set charset=utf8. Note however that this means that Sybase will expect all data sent to it for char/varchar columns to be encoded in utf8 (e.g. sending iso8859-1 characters like e-grave, etc). language Specify the language that the client uses.      $dbh = DBI->connect(""dbi:Sybase:language=us_english"",                          $user, $passwd); Note that the language has to have been installed on the server (via langinstall or sp_addlanguage) for this to work. If the language is not installed the session will default to the default language of the server. packetSize Specify the network packet size that the connection should use. Using a larger packet size can increase performance for certain types of queries. See the Sybase documentation on how to enable this feature on the server.      $dbh = DBI->connect(""dbi:Sybase:packetSize=8192"",                          $user, $passwd); interfaces Specify the location of an alternate interfaces file:      $dbh = DBI->connect(""dbi:Sybase:interfaces=/usr/local/sybase/interfaces"",                          $user, $passwd); loginTimeout Specify the number of seconds that DBI->connect() will wait for a response from the Sybase server. If the server fails to respond before the specified number of seconds the DBI->connect() call fails with a timeout error. The default value is 60 seconds, which is usually enough, but on a busy server it is sometimes necessary to increase this value:      $dbh = DBI->connect(""dbi:Sybase:loginTimeout=240"", # wait up to 4 minutes                          $user, $passwd); timeout Specify the number of seconds after which any Open Client calls will timeout the connection and mark it as dead. Once a timeout error has been received on a connection it should be closed and re-opened for further processing. Setting this value to 0 or a negative number will result in an unlimited timeout value. See also the Open Client documentation on CS_TIMEOUT.      $dbh = DBI->connect(""dbi:Sybase:timeout=240"", # wait up to 4 minutes                          $user, $passwd); scriptName Specify the name for this connection that will be displayed in sp_who (ie in the sysprocesses table in the program_name column).     $dbh=DBI->connect(""dbi:Sybase:scriptName=myScript"", $user, $password); hostname Specify the hostname that will be displayed by sp_who (and will be stored in the hostname column of sysprocesses)..     $dbh=DBI->connect(""dbi:Sybase:hostname=kiruna"", $user, $password); tdsLevel Specify the TDS protocol level to use when connecting to the server. Valid values are CS_TDS_40, CS_TDS_42, CS_TDS_46, CS_TDS_495 and CS_TDS_50. In general this is automatically negotiated between the client and the server, but in certain cases this may need to be forced to a lower level by the client.     $dbh=DBI->connect(""dbi:Sybase:tdsLevel=CS_TDS_42"", $user, $password); NOTE: Setting the tdsLevel below CS_TDS_495 will disable a number of features, ?-style placeholders and CHAINED non-AutoCommit mode, in particular. encryptPassword Specify the use of the client password encryption supported by CT-Lib. Specify a value of 1 to use encrypted passwords.     $dbh=DBI->connect(""dbi:Sybase:encryptPassword=1"", $user, $password); kerberos Note: Requires OpenClient 11.1.1 or later. Sybase and OpenClient can use Kerberos to perform network-based login. If you use Kerberos for authentication you can use this feature and pass a kerberos serverprincipal using the kerberos=value parameter:     $dbh = DBI->connect(""dbi:Sybase:kerberos=$serverprincipal"", '', ''); In addition, if you have a system for retrieving Kerberos serverprincipals at run-time you can tell DBD::Sybase to call a perl subroutine to get the serverprincipal from connect():     sub sybGetPrinc {         my $srv = shift;         return the serverprincipal...     }     $dbh = DBI->connect('dbi:Sybase:server=troll', '', '', { syb_kerberos_serverprincipal => \&sybGetPrinc }); The subroutine will be called with one argument (the server that we will connect to, using the normal Sybase behavior of checking the DSQUERY environment variable if no server is specified in the connect()) and is expected to return a string (the Kerberos serverprincipal) to the caller. sslCAFile Specify the location of an alternate trusted.txt file for SSL connection negotiation:   $dbh->DBI->connect(""dbi:Sybase:sslCAFile=/usr/local/sybase/trusted.txt.ENGINEERING"", $user, $password); bulkLogin Set this to 1 if the connection is going to be used for a bulk-load operation (see Experimental Bulk-Load functionality elsewhere in this document.)   $dbh->DBI->connect(""dbi:Sybase:bulkLogin=1"", $user, $password); serverType Tell DBD::Sybase what the server type is. Defaults to ASE. Setting it to something else will prevent certain actions (such as setting options, fetching the ASE version via @@version, etc.) and avoid spurious errors. tds_keepalive Set this to 1 to tell OpenClient to enable the KEEP_ALIVE attribute on the connection. Default 1. These different parameters (as well as the server name) can be strung together by separating each entry with a semi-colon:     $dbh = DBI->connect(""dbi:Sybase:server=ENGINEERING;packetSize=8192;language=us_english;charset=iso_1"",                         $user, $pwd); Handling Multiple Result Sets Sybase's Transact SQL has the ability to return multiple result sets from a single SQL statement. For example the query:     select b.title, b.author, s.amount       from books b, sales s      where s.authorID = b.authorID      order by b.author, b.title     compute sum(s.amount) by b.author which lists sales by author and title and also computes the total sales by author returns two types of rows. The DBI spec doesn't really handle this situation, nor the more hairy     exec my_proc @p1='this', @p2='that', @p3 out where my_proc could return any number of result sets (ie it could perform an unknown number of select statements. I've decided to handle this by returning an empty row at the end of each result set, and by setting a special Sybase attribute in $sth which you can check to see if there is more data to be fetched. The attribute is syb_more_results which you should check to see if you need to re-start the fetch() loop. To make sure all results are fetched, the basic fetch loop can be written like this:      {          while($d = $sth->fetch) {             ... do something with the data          }           redo if $sth->{syb_more_results};      } You can get the type of the current result set with $sth->{syb_result_type}. This returns a numerical value, as defined in $SYBASE/$SYBASE_OCS/include/cspublic.h:         #define CS_ROW_RESULT           (CS_INT)4040         #define CS_CURSOR_RESULT        (CS_INT)4041         #define CS_PARAM_RESULT         (CS_INT)4042         #define CS_STATUS_RESULT        (CS_INT)4043         #define CS_MSG_RESULT           (CS_INT)4044         #define CS_COMPUTE_RESULT       (CS_INT)4045 In particular, the return status of a stored procedure is returned as CS_STATUS_RESULT (4043), and is normally the last result set that is returned in a stored proc execution, but see the syb_do_proc_status attribute for an alternative way of handling this result type. See Executing Stored Procedures elsewhere in this document for more information. If you add a     use DBD::Sybase; to your script then you can use the symbolic values (CS_xxx_RESULT) instead of the numeric values in your programs, which should make them easier to read. See also the $sth-syb_output_params> call to handle stored procedures that only return OUTPUT parameters. $sth->execute() failure mode behavior DBD::Sybase has the ability to handle multi-statement SQL commands in a single batch. For example, you could insert several rows in a single batch like this:    $sth = $dbh->prepare(""    insert foo(one, two, three) values(1, 2, 3)    insert foo(one, two, three) values(4, 5, 6)    insert foo(one, two, three) values(10, 11, 12)    insert foo(one, two, three) values(11, 12, 13)    "");    $sth->execute; If any one of the above inserts fails for any reason then $sth->execute will return undef, HOWEVER the inserts that didn't fail will still be in the database, unless AutoCommit is off. It's also possible to write a statement like this:    $sth = $dbh->prepare(""    insert foo(one, two, three) values(1, 2, 3)    select * from bar    insert foo(one, two, three) values(10, 11, 12)    "");    $sth->execute; If the second insert is the one that fails, then $sth->execute will NOT return undef. The error will get flagged after the rows from bar have been fetched. I know that this is not as intuitive as it could be, but I am constrained by the Sybase API here. As an aside, I know that the example above doesn't really make sense, but I need to illustrate this particular sequence... You can also see the t/fail.t test script which shows this particular behavior. Sybase Specific Attributes There are a number of handle attributes that are specific to this driver. These attributes all start with syb_ so as to not clash with any normal DBI attributes. Database Handle Attributes The following Sybase specific attributes can be set at the Database handle level: syb_show_sql (bool) If set then the current statement is included in the string returned by $dbh->errstr. syb_show_eed (bool) If set, then extended error information is included in the string returned by $dbh->errstr. Extended error information include the index causing a duplicate insert to fail, for example. syb_err_handler (subroutine ref) This attribute is used to set an ad-hoc error handler callback (ie a perl subroutine) that gets called before the normal error handler does it's job. If this subroutine returns 0 then the error is ignored. This is useful for handling PRINT statements in Transact-SQL, for handling messages from the Backup Server, showplan output, dbcc output, etc. The subroutine is called with nine parameters:   o the Sybase error number   o the severity   o the state   o the line number in the SQL batch   o the server name (if available)   o the stored procedure name (if available)   o the message text   o the current SQL command buffer   o either of the strings ""client"" (for Client Library errors) or     ""server"" (for server errors, such as SQL syntax errors, etc),     allowing you to identify the error type.   As a contrived example, here is a port of the distinct error and message handlers from the Sybase documentation:   Example:      sub err_handler {       my($err, $sev, $state, $line, $server,         $proc, $msg, $sql, $err_type) = @_;         my @msg = ();       if($err_type eq 'server') {          push @msg,            ('',             'Server message',             sprintf('Message number: %ld, Severity %ld, State %ld, Line %ld',                     $err,$sev,$state,$line),             (defined($server) ? ""Server '$server' "" : '') .             (defined($proc) ? ""Procedure '$proc'"" : ''),             ""Message String:$msg"");       } else {          push @msg,            ('',             'Open Client Message:',             sprintf('Message number: SEVERITY = (%ld) NUMBER = (%ld)',                     $sev, $err),             ""Message String: $msg"");       }       print STDERR join(""\n"",@msg);       return 0; ## CS_SUCCEED   }  In a simpler and more focused example, this error handler traps showplan messages:    %showplan_msgs = map { $_ => 1}  (3612 .. 3615, 6201 .. 6299, 10201 .. 10299);    sub err_handler {       my($err, $sev, $state, $line, $server,         $proc, $msg, $sql, $err_type) = @_;           if($showplan_msgs{$err}) { # it's a showplan message          print SHOWPLAN ""$err - $msg\n"";          return 0;    # This is not an error        }        return 1;    }   and this is how you would use it:     $dbh = DBI->connect('dbi:Sybase:server=troll', 'sa', '');     $dbh->{syb_err_handler} = \&err_handler;     $dbh->do(""set showplan on"");     open(SHOWPLAN, "">>/var/tmp/showplan.log"") || die ""Can't open showplan log: $!"";     $dbh->do(""exec someproc"");    # get the showplan trace for this proc.     $dbh->disconnect; NOTE - if you set the error handler in the DBI->connect() call like this     $dbh = DBI->connect('dbi:Sybase:server=troll', 'sa', '',                      { syb_err_handler => \&err_handler }); then the err_handler() routine will get called if there is an error during the connect itself. This is new behavior in DBD::Sybase 0.95. syb_flush_finish (bool) If $dbh->{syb_flush_finish} is set then $dbh->finish will drain any results remaining for the current command by actually fetching them. The default behaviour is to issue a ct_cancel(CS_CANCEL_ALL), but this appears to cause connections to hang or to fail in certain cases (although I've never witnessed this myself.) syb_dynamic_supported (bool) This is a read-only attribute that returns TRUE if the dataserver you are connected to supports ?-style placeholders. Typically placeholders are not supported when using DBD::Sybase to connect to a MS-SQL server. syb_chained_txn (bool) If set then we use CHAINED transactions when AutoCommit is off. Otherwise we issue an explicit BEGIN TRAN as needed. The default is on if it is supported by the server. This attribute should usually be used only during the connect() call:     $dbh = DBI->connect('dbi:Sybase:', $user, $pwd, {syb_chained_txn => 1}); Using it at any other time with AutoCommit turned off will force a commit on the current handle. syb_quoted_identifier (bool) If set, then identifiers that would normally clash with Sybase reserved words can be quoted using ""identifier"". In this case strings must be quoted with the single quote. This attribute can only be set if the database handle is idle (no active statement handle.) Default is for this attribute to be off. syb_rowcount (int) Setting this attribute to non-0 will limit the number of rows returned by a SELECT, or affected by an UPDATE or DELETE statement to the rowcount value. Setting it back to 0 clears the limit. This attribute can only be set if the database handle is idle. Default is for this attribute to be 0. syb_do_proc_status (bool) Setting this attribute causes $sth->execute() to fetch the return status of any executed stored procs in the SQL being executed. If the return status is non-0 then $sth->execute() will report that the operation failed. NOTE The result status is NOT the first result set that is fetched from a stored proc execution. If the procedure includes SELECT statements then these will be fetched first, which means that $sth-execute> will NOT return a failure in that case as DBD::Sybase won't have seen the result status yet at that point. The RaiseError will NOT be triggered by a non-0 return status if there isn't an associated error message either generated by Sybase (duplicate insert error, etc) or generated in the procedure via a T-SQL raiserror statement. Setting this attribute does NOT affect existing $sth handles, only those that are created after setting it. To change the behavior of an existing $sth handle use $sth->{syb_do_proc_status}. The proc status is available in $sth->{syb_proc_status} after all the result sets in the procedure have been processed. The default is for this attribute to be off. syb_use_bin_0x If set, BINARY and VARBINARY values are prefixed with '0x' in the result. The default is off. syb_binary_images If set, IMAGE data is returned in raw binary format. Otherwise the data is converted to a long hex string. The default is off. syb_oc_version (string) Returns the identification string of the version of Client Library that this binary is currently using. This is a read-only attribute. For example:     troll (7:59AM):348 > perl -MDBI -e '$dbh = DBI->connect(""dbi:Sybase:"", ""sa""); print ""$dbh->{syb_oc_version}\n"";'      Sybase Client-Library/11.1.1/P/Linux Intel/Linux 2.2.5 i586/1/OPT/Mon Jun  7 07:50:21 1999 This is very useful information to have when reporting a problem. syb_server_version syb_server_version_string These two attributes return the Sybase server version, respectively version string, and can be used to turn server-specific functionality on or off. Example:     print ""$dbh->{syb_server_version}\n$dbh->{syb_server_version_string}\n""; prints     12.5.2     Adaptive Server Enterprise/12.5.2/EBF 12061 ESD#2/P/Linux Intel/Enterprise Linux/ase1252/1844/32-bit/OPT/Wed Aug 11 21:36:26 2004 syb_failed_db_fatal (bool) If this is set, then a connect() request where the database specified doesn't exist or is not accessible will fail. This needs to be set in the attribute hash passed during the DBI->connect() call to be effective. Default: off syb_no_child_con (bool) If this attribute is set then DBD::Sybase will not allow multiple simultaneously active statement handles on one database handle (i.e. multiple $dbh->prepare() calls without completely processing the results from any existing statement handle). This can be used to debug situations where incorrect or unexpected results are found due to the creation of a sub-connection where the connection attributes (in particular the current database) are different. Default: off syb_bind_empty_string_as_null (bool) If this attribute is set then an empty string (i.e. """") passed as a parameter to an $sth->execute() call will be converted to a NULL value. If the attribute is not set then an empty string is converted to a single space. Default: off syb_cancel_request_on_error (bool) If this attribute is set then a failure in a multi-statement request (for example, a stored procedure execution) will cause $sth->execute() to return failure, and will cause any other results from this request to be discarded. The default value (on) changes the behavior that DBD::Sybase exhibited up to version 0.94. Default: on syb_date_fmt (string) Defines the date/time conversion string when fetching data. See the entry for the syb_date_fmt() method elsewhere in this document for a description of the available formats. syb_has_blk (bool) This read-only attribute is set to TRUE if the BLK API is available in this version of DBD::Sybase. syb_disconnect_in_child (bool) Sybase client library allows using opened connections across a fork (i.e. the opened connection can be used in the child process). DBI by default will set flags such that this connection will be closed when the child process terminates. This is in most cases not what you want. DBI provides the InactiveDestroy attribute to control this, but you have to set this attribute manually as it defaults to False (i.e. when DESTROY is called for the handle the connection is closed). The syb_disconnect_in_child attribute attempts to correct this - the default is for this attribute to be False - thereby inhibitting the closing of the connection(s) when the current process ID doesn't match the process ID that created the connection. Default: off syb_enable_utf8 (bool) If this attribute is set then DBD::Sybase will convert UNIVARCHAR, UNICHAR, and UNITEXT data to Perl's internal utf-8 encoding when they are retrieved. Updating a unicode column will cause Sybase to convert any incoming data from utf-8 to its internal utf-16 encoding. This feature requires OpenClient 15.x to work. Default: off Statement Handle Attributes The following read-only attributes are available at the statement level: syb_more_results (bool) See the discussion on handling multiple result sets above. syb_result_type (int) Returns the numeric result type of the current result set. Useful when executing stored procedurs to determine what type of information is currently fetchable (normal select rows, output parameters, status results, etc...). syb_do_proc_status (bool) See above (under Database Handle Attributes) for an explanation. syb_proc_status (read-only) If syb_do_proc_status is set, then the return status of stored procedures will be available via $sth->{syb_proc_status}. syb_no_bind_blob (bool) If set then any IMAGE or TEXT columns in a query are NOT returned when calling $sth->fetch (or any variation). Instead, you would use     $sth->syb_ct_get_data($column, \$data, $size); to retrieve the IMAGE or TEXT data. If $size is 0 then the entire item is fetched, otherwis you can call this in a loop to fetch chunks of data:     while(1) {         $sth->syb_ct_get_data($column, \$data, 1024);         last unless $data;         print OUT $data;     } The fetched data is still subject to Sybase's TEXTSIZE option (see the SET command in the Sybase reference manual). This can be manipulated with DBI's LongReadLen attribute, but $dbh-{LongReadLen}> must be set before $dbh->prepare() is called to take effect (this is a change in 1.05 - previously you could call it after the prepare() but before the execute()). Note that LongReadLen has no effect when using DBD::Sybase with an MS-SQL server. Note: The IMAGE or TEXT column that is to be fetched this way must be last in the select list. See also the description of the ct_get_data() API call in the Sybase OpenClient manual, and the ""Working with TEXT/IMAGE columns"" section elsewhere in this document. Controlling DATETIME output formats By default DBD::Sybase will return DATETIME and SMALLDATETIME columns in the Nov 15 1998 11:13AM format. This can be changed via a private syb_date_fmt() method. The syntax is     $dbh->syb_date_fmt($fmt); where $fmt is a string representing the format that you want to apply. Note that this requires DBI 1.37 or later. The formats are based on Sybase's standard conversion routines. The following subset of available formats has been implemented: LONG Nov 15 1998 11:30:11:496AM LONGMS New with ASE 15.5 - for bigtime/bigdatetime datatypes, includes microseconds: Apr 7 2010 10:40:33.532315PM SHORT Nov 15 1998 11:30AM DMY4_YYYY 15 Nov 1998 MDY1_YYYY 11/15/1998 DMY1_YYYY 15/11/1998 DMY2_YYYY 15.11.1998 YMD3_YYYY 19981115 HMS 11:30:11 ISO 2004-08-21 14:36:48.080 ISO_strict 2004-08-21T14:36:48.080Z Note that Sybase has no concept of a timezone, so the trailing ""Z"" is really not correct (assumes that the time is in UTC). However, there is no guarantee that the client and the server run in the same timezone, so assuming the timezone of the client isn't really a valid option either. Retrieving OUTPUT parameters from stored procedures Sybase lets you pass define OUTPUT parameters to stored procedures, which are a little like parameters passed by reference in C (or perl.) In Transact-SQL this is done like this    declare @id_value int, @id_name char(10)    exec my_proc @name = 'a string', @number = 1234, @id = @id_value OUTPUT, @out_name = @id_name OUTPUT    -- Now @id_value and @id_name are set to whatever 'my_proc' set @id and @out_name to So how can we get at @param using DBD::Sybase? If your stored procedure only returns OUTPUT parameters, then you can use this shorthand:     $sth = $dbh->prepare('...');     $sth->execute;     @results = $sth->syb_output_params(); This will return an array for all the OUTPUT parameters in the proc call, and will ignore any other results. The array will be undefined if there are no OUTPUT params, or if the stored procedure failed for some reason. The more generic way looks like this:    $sth = $dbh->prepare(""declare \@id_value int, \@id_name       exec my_proc @name = 'a string', @number = 1234, @id = @id_value OUTPUT, @out_name = @id_name OUTPUT"");    $sth->execute;    {       while($d = $sth->fetch) {          if($sth->{syb_result_type} == 4042) { # it's a PARAM result             $id_value = $d->[0];             $id_name  = $d->[1];          }       }        redo if $sth->{syb_more_results};    } So the OUTPUT params are returned as one row in a special result set. Multiple active statements on one $dbh It is possible to open multiple active statements on a single database handle. This is done by opening a new physical connection in $dbh->prepare() if there is already an active statement handle for this $dbh. This feature has been implemented to improve compatibility with other drivers, but should not be used if you are coding directly to the Sybase driver. The syb_no_child_con attribute controls whether this feature is turned on. If it is FALSE (the default), then multiple statement handles are supported. If it is TRUE then multiple statements on the same database handle are disabled. Also see below for interaction with AutoCommit. If AutoCommit is OFF then multiple statement handles on a single $dbh is NOT supported. This is to avoid various deadlock problems that can crop up in this situation, and because you will not get real transactional integrity using multiple statement handles simultaneously as these in reality refer to different physical connections. Working with IMAGE and TEXT columns DBD::Sybase can store and retrieve IMAGE or TEXT data (aka ""blob"" data) via standard SQL statements. The LongReadLen handle attribute controls the maximum size of IMAGE or TEXT data being returned for each data element. When using standard SQL the default for IMAGE data is to be converted to a hex string, but you can use the syb_binary_images handle attribute to change this behaviour. Alternatively you can use something like     $binary = pack(""H*"", $hex_string); to do the conversion. IMAGE and TEXT datatypes can not be passed as parameters using ?-style placeholders, and placeholders can't refer to IMAGE or TEXT columns (this is a limitation of the TDS protocol used by Sybase, not a DBD::Sybase limitation.) There is an alternative way to access and update IMAGE/TEXT data using the natice OpenClient API. This is done via $h->func() calls, and is, unfortunately, a little convoluted. Handling IMAGE/TEXT data with syb_ct_get_data()/syb_ct_send_data() With DBI 1.37 and later you can call all of these ct_xxx() calls directly as statement handle methods by prefixing them with syb_, so for example     $sth->func($col, $dataref, $numbytes, 'ct_fetch_data'); becomes     $sth->syb_ct_fetch_data($col, $dataref, $numbytes); $len = ct_fetch_data($col, $dataref, $numbytes) The ct_get_data() call allows you to fetch IMAGE/TEXT data in raw format, either in one piece or in chunks. To use this function you must set the syb_no_bind_blob statement handle to TRUE. ct_get_data() takes 3 parameters: The column number (starting at 1) of the query, a scalar ref and a byte count. If the byte count is 0 then we read as many bytes as possible. Note that the IMAGE/TEXT column must be last in the select list for this to work. The call sequence is:     $sth = $dbh->prepare(""select id, img from some_table where id = 1"");     $sth->{syb_no_bind_blob} = 1;     $sth->execute;     while($d = $sth->fetchrow_arrayref) {        # The data is in the second column        $len = $sth->syb_ct_get_data(2, \$img, 0);        # with DBI 1.33 and earlier, this would be        # $len = $sth->func(2, \$img, 0, 'ct_get_data');     } ct_get_data() returns the number of bytes that were effectively fetched, so that when fetching chunks you can do something like this:    while(1) {       $len = $sth->syb_ct_get_data(2, $imgchunk, 1024);       ... do something with the $imgchunk ...       last if $len != 1024;    } To explain further: Sybase stores IMAGE/TEXT data separately from normal table data, in a chain of pagesize blocks (a Sybase database page is defined at the server level, and can be 2k, 4k, 8k or 16k in size.) To update an IMAGE/TEXT column Sybase needs to find the head of this chain, which is known as the ""text pointer"". As there is no where clause when the ct_send_data() API is used we need to retrieve the text pointer for the correct data item first, which is done via the ct_data_info(CS_GET) call. Subsequent ct_send_data() calls will then know which data item to update. $status = ct_data_info($action, $column, $attr) ct_data_info() is used to fetch or update the CS_IODESC structure for the IMAGE/TEXT data item that you wish to update. $action should be one of ""CS_SET"" or ""CS_GET"", $column is the column number of the active select statement (ignored for a CS_SET operation) and $attr is a hash ref used to set the values in the struct. ct_data_info() must be first called with CS_GET to fetch the CS_IODESC structure for the IMAGE/TEXT data item that you wish to update. Then you must update the value of the total_txtlen structure element to the length (in bytes) of the IMAGE/TEXT data that you are going to insert, and optionally set the log_on_update to TRUE to enable full logging of the operation. ct_data_info(CS_GET) will fail if the IMAGE/TEXT data for which the CS_IODESC is being fetched is NULL. If you have a NULL value that needs updating you must first update it to some non-NULL value (for example an empty string) using standard SQL before you can retrieve the CS_IODESC entry. This actually makes sense because as long as the data item is NULL there is no text pointer and no TEXT page chain for that item. See the ct_send_data() entry below for an example. ct_prepare_send() ct_prepare_send() must be called to initialize a IMAGE/TEXT write operation. See the ct_send_data() entry below for an example. ct_finish_send() ct_finish_send() is called to finish/commit an IMAGE/TEXT write operation. See the ct_send_data() entry below for an example. ct_send_data($image, $bytes) Send $bytes bytes of $image to the database. The request must have been set up via ct_prepare_send() and ct_data_info() for this to work. ct_send_data() returns TRUE on success, and FALSE on failure. In this example, we wish to update the data in the img column where the id column is 1. We assume that DBI is at version 1.37 or later and use the direct method calls:   # first we need to find the CS_IODESC data for the data   $sth = $dbh->prepare(""select img from imgtable where id = 1"");   $sth->execute;   while($sth->fetch) {    # don't care about the data!       $sth->syb_ct_data_info('CS_GET', 1);   }    # OK - we have the CS_IODESC values, so do the update:   $sth->syb_ct_prepare_send();   # Set the size of the new data item (that we are inserting), and make   # the operation unlogged   $sth->syb_ct_data_info('CS_SET', 1, {total_txtlen => length($image), log_on_update => 0});   # now transfer the data (in a single chunk, this time)   $sth->syb_ct_send_data($image, length($image));   # commit the operation   $sth->syb_ct_finish_send(); The ct_send_data() call can also transfer the data in chunks, however you must know the total size of the image before you start the insert. For example:   # update a database entry with a new version of a file:   my $size = -s $file;   # first we need to find the CS_IODESC data for the data   $sth = $dbh->prepare(""select img from imgtable where id = 1"");   $sth->execute;   while($sth->fetch) {    # don't care about the data!       $sth->syb_ct_data_info('CS_GET', 1);   }    # OK - we have the CS_IODESC values, so do the update:   $sth->syb_ct_prepare_send();   # Set the size of the new data item (that we are inserting), and make   # the operation unlogged   $sth->syb_ct_data_info('CS_SET', 1, {total_txtlen => $size, log_on_update => 0});    # open the file, and store it in the db in 1024 byte chunks.   open(IN, $file) || die ""Can't open $file: $!"";   while($size) {       $to_read = $size > 1024 ? 1024 : $size;       $bytesread = read(IN, $buff, $to_read);       $size -= $bytesread;        $sth->syb_ct_send_data($buff, $bytesread);   }   close(IN);   # commit the operation   $sth->syb_ct_finish_send();       AutoCommit, Transactions and Transact-SQL When $h->{AutoCommit} is off all data modification SQL statements that you issue (insert/update/delete) will only take effect if you call $dbh->commit. DBD::Sybase implements this via two distinct methods, depending on the setting of the $h->{syb_chained_txn} attribute and the version of the server that is being accessed. If $h->{syb_chained_txn} is off, then the DBD::Sybase driver will send a BEGIN TRAN before the first $dbh->prepare(), and after each call to $dbh->commit() or $dbh->rollback(). This works fine, but will cause any SQL that contains any CREATE TABLE (or other DDL) statements to fail. These CREATE TABLE statements can be burried in a stored procedure somewhere (for example, sp_helprotect creates two temp tables when it is run). You can get around this limit by setting the ddl in tran option (at the database level, via sp_dboption.) You should be aware that this can have serious effects on performance as this causes locks to be held on certain system tables for the duration of the transaction. If $h->{syb_chained_txn} is on, then DBD::Sybase sets the CHAINED option, which tells Sybase not to commit anything automatically. Again, you will need to call $dbh->commit() to make any changes to the data permanent. Behavior of $dbh->last_insert_id This version of DBD::Sybase includes support for the last_insert_id() call, with the following caveats: The last_insert_id() call is simply a wrapper around a ""select @@identity"" query. To be successful (i.e. to return the correct value) this must be executed on the same connection as the INSERT that generated the new IDENTITY value. Therefore the statement handle that was used to perform the insert must have been closed/freed before last_insert_id() can be called. Otherwise last_insert_id() will be forced to open a different connection to perform the query, and will return an invalid value (usually in this case it will return 0). last_insert_id() ignores any parameters passed to it, and will NOT return the last @@identity value generated in the case where placeholders were used, or where the insert was encapsulated in a stored procedure. Using ? Placeholders & bind parameters to $sth->execute DBD::Sybase supports the use of ? placeholders in SQL statements as long as the underlying library and database engine supports it. It does this by using what Sybase calls Dynamic SQL. The ? placeholders allow you to write something like:         $sth = $dbh->prepare(""select * from employee where empno = ?"");          # Retrieve rows from employee where empno == 1024:         $sth->execute(1024);         while($data = $sth->fetch) {             print ""@$data\n"";         }         # Now get rows where empno = 2000:                  $sth->execute(2000);         while($data = $sth->fetch) {             print ""@$data\n"";         } When you use ? placeholders Sybase goes and creates a temporary stored procedure that corresponds to your SQL statement. You then pass variables to $sth->execute or $dbh->do, which get inserted in the query, and any rows are returned. DBD::Sybase uses the underlying Sybase API calls to handle ?-style placeholders. For select/insert/update/delete statements DBD::Sybase calls the ct_dynamic() family of Client Library functions, which gives DBD::Sybase data type information for each parameter to the query. You can only use ?-style placeholders for statements that return a single result set, and the ? placeholders can only appear in a WHERE clause, in the SET clause of an UPDATE statement, or in the VALUES list of an INSERT statement. The DBI docs mention the following regarding NULL values and placeholders:        Binding an `undef' (NULL) to the placeholder will not        select rows which have a NULL `product_code'! Refer to the        SQL manual for your database engine or any SQL book for        the reasons for this.  To explicitly select NULLs you have        to say ""`WHERE product_code IS NULL'"" and to make that        general you have to say:           ... WHERE (product_code = ? OR (? IS NULL AND product_code IS NULL))         and bind the same value to both placeholders. This will not work with a Sybase database server. If you attempt the above construct you will get the following error: The datatype of a parameter marker used in the dynamic prepare statement could not be resolved. The specific problem here is that when using ? placeholders the prepare() operation is sent to the database server for parameter resoltion. This extracts the datatypes for each of the placeholders. Unfortunately the ? is null construct doesn't tie the ? placeholder with an existing table column, so the database server can't find the data type. As this entire operation happens inside the Sybase libraries there is no easy way for DBD::Sybase to work around it. Note that Sybase will normally handle the foo = NULL construct the same way that other systems handle foo is NULL, so the convoluted construct that is described above is not necessary to obtain the correct results when querying a Sybase database. The underlying API does not support ?-style placeholders for stored procedures, but see the section on titled Stored Procedures and Placeholders elsewhere in this document. ?-style placeholders can NOT be used to pass TEXT or IMAGE data items to the server. This is a limitation of the TDS protocol, not of DBD::Sybase. There is also a performance issue: OpenClient creates stored procedures in tempdb for each prepare() call that includes ? placeholders. Creating these objects requires updating system tables in the tempdb database, and can therefore create a performance hotspot if a lot of prepare() statements from multiple clients are executed simultaneously. This problem has been corrected for Sybase 11.9.x and later servers, as they create ""lightweight"" temporary stored procs which are held in the server memory cache and don't affect the system tables at all. In general however I find that if your application is going to run against Sybase it is better to write ad-hoc stored procedures rather than use the ? placeholders in embedded SQL. Out of curiosity I did some simple timings to see what the overhead of doing a prepare with ? placehoders is vs. a straight SQL prepare and vs. a stored procedure prepare. Against an 11.0.3.3 server (linux) the placeholder prepare is significantly slower, and you need to do ~30 execute() calls on the prepared statement to make up for the overhead. Against a 12.0 server (solaris) however the situation was very different, with placeholder prepare() calls slightly faster than straight SQL prepare(). This is something that I really don't understand, but the numbers were pretty clear. In all cases stored proc prepare() calls were clearly faster, and consistently so. This test did not try to gauge concurrency issues, however. It is not possible to retrieve the last IDENTITY value after an insert done with ?-style placeholders. This is a Sybase limitation/bug, not a DBD::Sybase problem. For example, assuming table foo has an identity column:   $dbh->do(""insert foo(col1, col2) values(?, ?)"", undef, ""string1"", ""string2"");   $sth = $dbh->prepare('select @@identity')      || die ""Can't prepare the SQL statement: $DBI::errstr"";   $sth->execute || die ""Can't execute the SQL statement: $DBI::errstr"";    #Get the data back.   while (my $row = $sth->fetchrow_arrayref()) {     print ""IDENTITY value = $row->[0]\n"";   } will always return an identity value of 0, which is obviously incorrect. This behaviour is due to the fact that the handling of ?-style placeholders is implemented using temporary stored procedures in Sybase, and the value of @@identity is reset when the stored procedure has executed. Using an explicit stored procedure to do the insert and trying to retrieve @@identity after it has executed results in the same behaviour. Please see the discussion on Dynamic SQL in the OpenClient C Programmer's Guide for details. The guide is available on-line at http://sybooks.sybase.com/ Calling Stored Procedures DBD::Sybase handles stored procedures in the same way as any other Transact-SQL statement. The only real difference is that Sybase stored procedures always return an extra result set with the return status from the proc which corresponds to the return statement in the stored procedure code. This result set with a single row is always returned last and has a result type of CS_STATUS_RESULT (4043). By default this result set is returned like any other, but you can ask DBD::Sybase to process it under the covers via the $h->{syb_do_proc_status} attribute. If this attribute is set then DBD::Sybase will process the CS_STATUS_RESULT result set itself, place the return status value in $sth->{syb_proc_status}, and possibly raise an error if the result set is different from 0. Note that a non-0 return status will NOT cause $sth->execute to return a failure code if the proc has at least one other result set that returned rows (reason: the rows are returned and fetched before the return status is seen). Stored Procedures and Placeholders DBD::Sybase has the ability to use ?-style placeholders as parameters to stored proc calls. The requirements are that the stored procedure call be initiated with an ""exec"" and that it be the only statement in the batch that is being prepared(): For example, this prepares a stored proc call with named parameters:     my $sth = $dbh->prepare(""exec my_proc \@p1 = ?, \@p2 = ?"");     $sth->execute('one', 'two'); You can also use positional parameters:     my $sth = $dbh->prepare(""exec my_proc ?, ?"");     $sth->execute('one', 'two'); You may not mix positional and named parameter in the same prepare. You can't mix placeholder parameters and hard coded parameters. For example     $sth = $dbh->prepare(""exec my_proc \@p1 = 1, \@p2 = ?""); will not work - because the @p1 parameter isn't parsed correctly and won't be sent to the server. You can specify OUTPUT parameters in the usual way, but you can NOT use bind_param_inout() to get the output result - instead you have to call fetch() and/or $sth->func('syb_output_params'):     my $sth = $dbh->prepare(""exec my_proc \@p1 = ?, \@p2 = ?, \@p3 = ? OUTPUT "");     $sth->execute('one', 'two', 'three');     my (@data) = $sth->syb_output_params(); DBD::Sybase does not attempt to figure out the correct parameter type for each parameter (it would be possible to do this for most cases, but there are enough exceptions that I preferred to avoid the issue for the time being). DBD::Sybase defaults all the parameters to SQL_CHAR, and you have to use bind_param() with an explicit type value to set this to something different. The type is then remembered, so you only need to use the explicit call once for each parameter:     my $sth = $dbh->prepare(""exec my_proc \@p1 = ?, \@p2 = ?"");     $sth->bind_param(1, 'one', SQL_CHAR);     $sth->bind_param(2, 2.34, SQL_FLOAT);     $sth->execute;     ....     $sth->execute('two', 3.456);     etc... Note that once a type has been defined for a parameter you can't change it. When binding SQL_NUMERIC or SQL_DECIMAL data you may get fatal conversion errors if the scale or the precision exceeds the size of the target parameter definition. For example, consider the following stored proc definition:     declare proc my_proc @p1 numeric(5,2) as... and the following prepare/execute snippet:     my $sth = $dbh->prepare(""exec my_proc \@p1 = ?"");     $sth->bind_param(1, 3.456, SQL_NUMERIC); This generates the following error: DBD::Sybase::st execute failed: Server message number=241 severity=16 state=2 line=0 procedure=dbitest text=Scale error during implicit conversion of NUMERIC value '3.456' to a NUMERIC field. You can tell Sybase (and DBD::Sybase) to ignore these sorts of errors by setting the arithabort option:     $dbh->do(""set arithabort off""); See the set command in the Sybase Adaptive Server Enterprise Reference Manual for more information on the set command and on the arithabort option. Other Private Methods DBD::Sybase private Database Handle Methods $bool = $dbh->syb_isdead Tests the connection to see if the connection has been marked DEAD by OpenClient. The connection can get marked DEAD if an error occurs on the connection, or the connection fails. DBD::Sybase private Statement Handle Methods @data = $sth->syb_describe([$assoc]) Retrieves the description of each of the output columns of the current result set. Each element of the returned array is a reference to a hash that describes the column. The following fields are set: NAME, TYPE, SYBTYPE, MAXLENGTH, SCALE, PRECISION, STATUS. You could use it like this:    my $sth = $dbh->prepare(""select name, uid from sysusers"");    $sth->execute;    my @description = $sth->syb_describe;    print ""$description[0]->{NAME}\n"";         # prints name    print ""$description[0]->{MAXLENGTH}\n"";    # prints 30    ....     while(my $row = $sth->fetch) {       ....    } The STATUS field is a string which can be tested for the following values: CS_CANBENULL, CS_HIDDEN, CS_IDENTITY, CS_KEY, CS_VERSION_KEY, CS_TIMESTAMP and CS_UPDATABLE. See table 3-46 of the Open Client Client Library Reference Manual for a description of each of these values. The TYPE field is the data type that Sybase::CTlib converts the column to when retrieving the data, so a DATETIME column will be returned as a CS_CHAR_TYPE column. The SYBTYPE field is the real Sybase data type for this column. Note that the symbolic values of the CS_xxx symbols isn't available yet in DBD::Sybase. Experimental Bulk-Load Functionality NOTE: This feature requires that the libblk.a library be available at build time. This is not always the case if the Sybase SDK isn't installed. You can test the $dbh->{syb_has_blk} attribute to see if the BLK api calls are available in your copy of DBD::Sybase. Starting with release 1.04.2 DBD::Sybase has the ability to use Sybase's BLK (bulk-loading) API to perform fast data loads. Basic usage is as follows:   my $dbh = DBI->connect('dbi:Sybase:server=MY_SERVER;bulkLogin=1', $user, $pwd);    $dbh->begin_work;  # optional.   my $sth = $dbh->prepare(""insert the_table values(?, ?, ?, ?, ?)"",                           {syb_bcp_attribs => { identity_flag => 0,                                                identity_column => 0 }}});   while(<DATA>) {     chomp;     my @row = split(/\|/, $_);   # assume a pipe-delimited file...     $sth->execute(@row);   }   $dbh->commit;   print ""Sent "", $sth->rows, "" to the server\n"";   $sth->finish; First, you need to specify the new bulkLogin attribute in the connection string, which turns on the CS_BULK_LOGIN property for the connection. Without this property the BLK api will not be functional. You call $dbh->prepare() with a regular INSERT statement and the special syb_bcp_attribs attribute to turn on BLK handling of the data. The identity_flag sub-attribute can be set to 1 if your source data includes the values for the target table's IDENTITY column. If the target table has an IDENTITY column but you want the insert operation to generate a new value for each row then leave identity_flag at 0, but set identity_col to the column number of the identity column (it's usually the first column in the table, but not always.) The number of placeholders in the INSERT statement must correspond to the number of columns in the table, and the input data must be in the same order as the table's physical column order. Any column list in the INSERT statement (i.e. insert table(a, b, c,...) values(...) is ignored. The value of AutoCommit is ignored for BLK operations - rows are only commited when you call $dbh->commit. You can call $dbh->rollback to cancel any uncommited rows, but this also cancels the rest of the BLK operation: any attempt to load rows to the server after a call to $dbh->rollback() will fail. If a row fails to load due to a CLIENT side error (such as a data conversion error) then $sth->execute() will return a failure (i.e. false) and $sth->errstr will have the reason for the error. If a row fails on the SERVER side (for example due to a duplicate row error) then the entire batch (i.e. between two $dbh->commit() calls) will fail. This is normal behavior for BLK/bcp. The Bulk-Load API is very sensitive to data conversion issues, as all the conversions are handled on the client side, and the row is pre-formatted before being sent to the server. By default any conversion that is flagged by Sybase's cs_convert() call will result in a failed row. Some of these conversion errors are patently fatal (e.g. converting 'Feb 30 2001' to a DATETIME value...), while others are debatable (e.g. converting 123.456 to a NUMERIC(6,2) which results in a loss of precision). The default behavior of failing any row that has a conversion error in it can be modified by using a special error handler. Returning 0 from this handler tells DBD::Sybase to fail this row, and returning 1 means that we still want to try to send the row to the server (obviously Sybase's internal code can still fail the row at that point.) You set the handler like this:     DBD::Sybase::syb_set_cslib_cb(\&handler); and a sample handler:    sub cslib_handler {      my ($layer, $origin, $severity, $errno, $errmsg, $osmsg, $blkmsg) = @_;            print ""Layer: $layer, Origin: $origin, Severity: $severity, Error: $errno\n"";      print $msg;      print $osmsg if($osmsg);      print $blkmsg if $blkmsg;       return 1 if($errno == 36)       return 0;    } Please see the t/xblk.t test script for some examples. Reminder - this is an experimental implementation. It may change in the future, and it could be buggy. Using DBD::Sybase with MS-SQL MS-SQL started out as Sybase 4.2, and there are still a lot of similarities between Sybase and MS-SQL which makes it possible to use DBD::Sybase to query a MS-SQL dataserver using either the Sybase OpenClient libraries or the FreeTDS libraries (see http://www.freetds.org). However, using the Sybase libraries to query an MS-SQL server has certain limitations. In particular ?-style placeholders are not supported (although support when using the FreeTDS libraries is possible in a future release of the libraries), and certain syb_ attributes may not be supported. Sybase defaults the TEXTSIZE attribute (aka LongReadLen) to 32k, but MS-SQL 7 doesn't seem to do that correctly, resulting in very large memory requests when querying tables with TEXT/IMAGE data columns. The work-around is to set TEXTSIZE to some decent value via $dbh->{LongReadLen} (if that works - I haven't had any confirmation that it does) or via $dbh->do(""set textsize <somesize>""); nsql The nsql() call is a direct port of the function of the same name that exists in Sybase::DBlib. From 1.08 it has been extended to offer new functionality. Usage:    @data = $dbh->func($sql, $type, $callback, $options, 'nsql'); If the DBI version is 1.37 or later, then you can also call it this way:    @data = $dbh->syb_nsql($sql, $type, $callback, $options); This executes the query in $sql, and returns all the data in @data. The $type parameter can be used to specify that each returned row be in array form (i.e. $type passed as 'ARRAY', which is the default) or in hash form ($type passed as 'HASH') with column names as keys. If $callback is specified it is taken as a reference to a perl sub, and each row returned by the query is passed to this subroutine instead of being returned by the routine (to allow processing of large result sets, for example). If $options is specified and is a HASH ref, the following keys affect the value returned by nsql(): oktypes => [...] This generalises syb_nsql_nostatus (see below) by ignoring any result sets which are of a type not listed. bytype => 0|1|'merge' If this option is set to a true value, each result set will be returned as the value of a hash, the key of which is the result type of this result set as defined by the CS_*_TYPE values described above. If the special value 'merge' is used, result sets of the same type will be catenated (as nsql() does by default) into a single array of results and the result of the nsql() call will be a single hash keyed by result type. Usage is better written %data = $dbh->syb_nsql(...) in this case. arglist => [...] This option provides support for placeholders in the SQL query passed to nsql(). Each time the SQL statement is executed the array value of this option will be passed as the parameter list to the execute() method. Note that if $callback is omitted, a hash reference in that parameter position will be interpreted as an option hash if no hash reference is found in the $options parameter position. nsql also checks three special attributes to enable deadlock retry logic (Note none of these attributes have any effect anywhere else at the moment): syb_deadlock_retry count Set this to a non-0 value to enable deadlock detection and retry logic within nsql(). If a deadlock error is detected (error code 1205) then the entire batch is re-submitted up to syb_deadlock_retry times. Default is 0 (off). syb_deadlock_sleep seconds Number of seconds to sleep between deadlock retries. Default is 60. syb_deadlock_verbose (bool) Enable verbose logging of deadlock retry logic. Default is off. syb_nsql_nostatus (bool) If true then stored procedure return status values (i.e. results of type CS_STATUS_RESULT) are ignored. Deadlock detection will be added to the $dbh->do() method in a future version of DBD::Sybase. Multi-Threading DBD::Sybase is thread-safe (i.e. can be used in a multi-threaded perl application where more than one thread accesses the database server) with the following restrictions: perl version >= 5.8 DBD::Sybase requires the use of ithreads, available in the perl 5.8.0 release. It will not work with the older 5.005 threading model. Sybase thread-safe libraries Sybase's Client Library comes in two flavors. DBD::Sybase must find the thread-safe version of the libraries (ending in _r on Unix/linux). This means Open Client 11.1.1 or later. In particular this means that you can't use the 10.0.4 libraries from the free 11.0.3.3 release on linux if you want to use multi-threading. Note: when using perl >= 5.8 with the thread-safe libraries (libct_r.so, etc) then signal handling is broken and any signal delivered to the perl process will result in a segmentation fault. It is recommended in that case to link with the non-threadsafe libraries. use DBD::Sybase You must include the use DBD::Sybase; line in your program. This is needed because DBD::Sybase needs to do some setup before the first thread is started. You can check to see if your version of DBD::Sybase is thread-safe at run-time by calling DBD::Sybase::thread_enabled(). This will return true if multi-threading is available. See t/thread.t for a simple example. BUGS You can run out of space in the tempdb database if you use a lot of calls with bind variables (ie ?-style placeholders) without closing the connection and Sybase 11.5.x or older. This is because Sybase creates stored procedures for each prepare() call. In 11.9.x and later Sybase will create ""light-weight"" stored procedures which don't use up any space in the tempdb database. The primary_key_info() method will only return data for tables where a declarative ""primary key"" constraint was included when the table was created. I have a simple bug tracking database at http://www.peppler.org/bugdb/ . You can use it to view known problems, or to report new ones. SEE ALSO DBI Sybase OpenClient C manuals. Sybase Transact SQL manuals. AUTHOR DBD::Sybase by Michael Peppler COPYRIGHT The DBD::Sybase module is Copyright (c) 1996-2007 Michael Peppler. The DBD::Sybase module is free software; you can redistribute it and/or modify it under the same terms as Perl itself. ACKNOWLEDGEMENTS Tim Bunce for DBI, obviously! See also ""ACKNOWLEDGEMENTS"" in DBI. 1 POD Error The following errors were encountered while parsing the POD: Around line 2005: Non-ASCII character seen before =encoding in 'DEAD if'. Assuming UTF-8 × Module Install Instructions To install DBD::Sybase, simply copy and paste either of the commands in to your terminal cpanm                      cpanm DBD::Sybase CPAN shell                      perl -MCPAN -e shell                     install DBD::Sybase For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Sybase and MS-SQL. No placeholders w/ MS-SQL though"	"true"
"NoSQL Databases"	"Cache::Memcached::Fast"	"https://metacpan.org/pod/Cache::Memcached::Fast"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Cache::Memcached::Fast - Perl client for memcached, in C language - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors C::M::F seeks new maintainer  /  0.23 (KROKI on 2014-11-15) 0.22 (KROKI on 2014-04-28) 0.21 (KROKI on 2013-04-06) 0.20 (KROKI on 2013-04-03) 0.19 (KROKI on 2010-04-24) 0.18 (KROKI on 2010-04-06) 0.17 (KROKI on 2009-11-02) 0.16 (KROKI on 2009-06-15) 0.15 (KROKI on 2009-06-15) 0.14 (KROKI on 2009-02-07) 0.13 (KROKI on 2008-10-13) 0.12 (KROKI on 2008-07-21) 0.11 (KROKI on 2008-07-17) 0.10 (KROKI on 2008-05-01) 0.09 (KROKI on 2008-03-06) 0.08 (KROKI on 2008-01-24) 0.07 (KROKI on 2008-01-18) 0.06 (KROKI on 2007-12-20) 0.05 (KROKI on 2007-12-18) 0.04 (KROKI on 2007-12-16) 0.03 (KROKI on 2007-12-16) 0.02 (KROKI on 2007-12-15) Cache-Memcached-Fast-0.23 12 ++ 12 ++  / Cache::Memcached::Fast 15 Nov 2014 16:46:00 GMT Module version: 0.23 Source (raw) Browse (raw) Changes Clone repository Issues (6) 5 (3 reviews) Testers (1580 / 3 / 0) Kwalitee License: unknown Activity 24 month Tools MOBI | EPUB Download (99.81Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.22 (KROKI on 2014-04-28) 0.21 (KROKI on 2013-04-06) 0.20 (KROKI on 2013-04-03) 0.19 (KROKI on 2010-04-24) 0.18 (KROKI on 2010-04-06) 0.17 (KROKI on 2009-11-02) 0.16 (KROKI on 2009-06-15) 0.15 (KROKI on 2009-06-15) 0.14 (KROKI on 2009-02-07) 0.13 (KROKI on 2008-10-13) 0.12 (KROKI on 2008-07-21) 0.11 (KROKI on 2008-07-17) 0.10 (KROKI on 2008-05-01) 0.09 (KROKI on 2008-03-06) 0.08 (KROKI on 2008-01-24) 0.07 (KROKI on 2008-01-18) 0.06 (KROKI on 2007-12-20) 0.05 (KROKI on 2007-12-18) 0.04 (KROKI on 2007-12-16) 0.03 (KROKI on 2007-12-16) 0.02 (KROKI on 2007-12-15) Diff with version 0.22 (KROKI on 2014-04-28) 0.21 (KROKI on 2013-04-06) 0.20 (KROKI on 2013-04-03) 0.19 (KROKI on 2010-04-24) 0.18 (KROKI on 2010-04-06) 0.17 (KROKI on 2009-11-02) 0.16 (KROKI on 2009-06-15) 0.15 (KROKI on 2009-06-15) 0.14 (KROKI on 2009-02-07) 0.13 (KROKI on 2008-10-13) 0.12 (KROKI on 2008-07-21) 0.11 (KROKI on 2008-07-17) 0.10 (KROKI on 2008-05-01) 0.09 (KROKI on 2008-03-06) 0.08 (KROKI on 2008-01-24) 0.07 (KROKI on 2008-01-18) 0.06 (KROKI on 2007-12-20) 0.05 (KROKI on 2007-12-18) 0.04 (KROKI on 2007-12-16) 0.03 (KROKI on 2007-12-16) 0.02 (KROKI on 2007-12-15) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 4 PAUSE users 8 non-PAUSE users. KROKI C::M::F seeks new maintainer and 1 contributors show them Tomash Brechko Dependencies Test::More and possibly others CPAN Testers List Reverse dependencies Dependency graph × Cache-Memcached-Fast-0.23 NAME VERSION SYNOPSIS DESCRIPTION CONSTRUCTOR METHODS Compatibility with Cache::Memcached Constructor parameters Methods Tainted data Threads BUGS SUPPORT SEE ALSO AUTHORS ACKNOWLEDGEMENTS WARRANTY COPYRIGHT AND LICENSE NAME Cache::Memcached::Fast - Perl client for memcached, in C language VERSION Version 0.23. SYNOPSIS   use Cache::Memcached::Fast;    my $memd = new Cache::Memcached::Fast({       servers => [ { address => 'localhost:11211', weight => 2.5 },                    '192.168.254.2:11211',                    { address => '/path/to/unix.sock', noreply => 1 } ],       namespace => 'my:',       connect_timeout => 0.2,       io_timeout => 0.5,       close_on_error => 1,       compress_threshold => 100_000,       compress_ratio => 0.9,       compress_methods => [ \&IO::Compress::Gzip::gzip,                             \&IO::Uncompress::Gunzip::gunzip ],       max_failures => 3,       failure_timeout => 2,       ketama_points => 150,       nowait => 1,       hash_namespace => 1,       serialize_methods => [ \&Storable::freeze, \&Storable::thaw ],       utf8 => ($^V ge v5.8.1 ? 1 : 0),       max_size => 512 * 1024,   });    # Get server versions.   my $versions = $memd->server_versions;   while (my ($server, $version) = each %$versions) {       #...   }    # Store scalars.   $memd->add('skey', 'text');   $memd->add_multi(['skey2', 'text2'], ['skey3', 'text3', 10]);    $memd->replace('skey', 'val');   $memd->replace_multi(['skey2', 'val2'], ['skey3', 'val3']);    $memd->set('nkey', 5);   $memd->set_multi(['nkey2', 10], ['skey3', 'text', 5]);    # Store arbitrary Perl data structures.   my %hash = (a => 1, b => 2);   my @list = (1, 2);   $memd->set('hash', \%hash);   $memd->set_multi(['scalar', 1], ['list', \@list]);    # Add to strings.   $memd->prepend('skey', 'This is a ');   $memd->prepend_multi(['skey2', 'This is a '], ['skey3', 'prefix ']);   $memd->append('skey', 'ue.');   $memd->append_multi(['skey2', 'ue.'], ['skey3', ' suffix']);    # Do arithmetic.   $memd->incr('nkey', 10);   print ""OK\n"" if $memd->decr('nkey', 3) == 12;    my @counters = qw(c1 c2);   $memd->set_multi(map { [$_, 0] } @counters, 'c3', 'c4');   $memd->incr_multi(['c3', 2], @counters, ['c4', 10]);    # Retrieve values.   my $val = $memd->get('skey');   print ""OK\n"" if $val eq 'This is a value.';   my $href = $memd->get_multi('hash', 'nkey');   print ""OK\n"" if $href->{hash}->{b} == 2 and $href->{nkey} == 12;    # Do atomic test-and-set operations.   my $cas_val = $memd->gets('nkey');   $$cas_val[1] = 0 if $$cas_val[1] == 12;   if ($memd->cas('nkey', @$cas_val)) {       print ""OK, value updated\n"";   } else {       print ""Update failed, probably another client""           . "" has updated the value\n"";   }    # Delete some data.   $memd->delete('skey');    my @keys = qw(k1 k2 k3);   $memd->delete_multi(@keys);    # Wait for all commands that were executed in nowait mode.   $memd->nowait_push;    # Wipe out all cached data.   $memd->flush_all; DESCRIPTION Cache::Memcached::Fast is a Perl client for memcached, a memory cache daemon (http://www.memcached.org/). Module core is implemented in C and tries hard to minimize number of system calls and to avoid any key/value copying for speed. As a result, it has very low CPU consumption. API is largely compatible with Cache::Memcached, original pure Perl client, most users of the original module may start using this module by installing it and adding ""::Fast"" to the old name in their scripts (see ""Compatibility with Cache::Memcached"" below for full details). CONSTRUCTOR new   my $memd = new Cache::Memcached::Fast($params); Create new client object. $params is a reference to a hash with client parameters. Currently recognized keys are: servers   servers => [ { address => 'localhost:11211', weight => 2.5 },                '192.168.254.2:11211',                { address => '/path/to/unix.sock', noreply => 1 } ],   (default: none) The value is a reference to an array of server addresses. Each address is either a scalar, a hash reference, or an array reference (for compatibility with Cache::Memcached, deprecated). If hash reference, the keys are address (scalar), weight (positive rational number), and noreply (boolean flag). The server address is in the form host:port for network TCP connections, or /path/to/unix.sock for local Unix socket connections. When weight is not given, 1 is assumed. Client will distribute keys across servers proportionally to server weights. If you want to get key distribution compatible with Cache::Memcached, all server weights should be integer, and their sum should be less than 32768. When noreply is enabled, commands executed in a void context will instruct the server to not send the reply. Compare with ""nowait"" below. memcached server implements noreply starting with version 1.2.5. If you enable noreply for earlier server versions, things will go wrongly, and the client will eventually block. Use with care. namespace   namespace => 'my::'   (default: '') The value is a scalar that will be prepended to all key names passed to the memcached server. By using different namespaces clients avoid interference with each other. hash_namespace   hash_namespace => 1   (default: disabled) The value is a boolean which enables (true) or disables (false) the hashing of the namespace key prefix. By default for compatibility with Cache::Memcached namespace prefix is not hashed along with the key. Thus   namespace => 'prefix/',   ...   $memd->set('key', $val); may use different memcached server than   namespace => '',   ...   $memd->set('prefix/key', $val); because hash values of 'key' and 'prefix/key' may be different. However sometimes is it necessary to hash the namespace prefix, for instance for interoperability with other clients that do not have the notion of the namespace. When hash_namespace is enabled, both examples above will use the same server, the one that 'prefix/key' is mapped to. Note that there's no performance penalty then, as namespace prefix is hashed only once. See ""namespace"". nowait   nowait => 1   (default: disabled) The value is a boolean which enables (true) or disables (false) nowait mode. If enabled, when you call a method that only returns its success status (like ""set""), in a void context, it sends the request to the server and returns immediately, not waiting the reply. This avoids the round-trip latency at a cost of uncertain command outcome. Internally there is a counter of how many outstanding replies there should be, and on any command the client reads and discards any replies that have already arrived. When you later execute some method in a non-void context, all outstanding replies will be waited for, and then the reply for this command will be read and returned. connect_timeout   connect_timeout => 0.7   (default: 0.25 seconds) The value is a non-negative rational number of seconds to wait for connection to establish. Applies only to network connections. Zero disables timeout, but keep in mind that operating systems have their own heuristic connect timeout. Note that network connect process consists of several steps: destination host address lookup, which may return several addresses in general case (especially for IPv6, see http://people.redhat.com/drepper/linux-rfc3484.html and http://people.redhat.com/drepper/userapi-ipv6.html), then the attempt to connect to one of those addresses. connect_timeout applies only to one such connect, i.e. to one connect(2) call. Thus overall connect process may take longer than connect_timeout seconds, but this is unavoidable. io_timeout (or deprecated select_timeout)   io_timeout => 0.5   (default: 1.0 seconds) The value is a non-negative rational number of seconds to wait before giving up on communicating with the server(s). Zero disables timeout. Note that for commands that communicate with more than one server (like ""get_multi"") the timeout applies per server set, not per each server. Thus it won't expire if one server is quick enough to communicate, even if others are silent. But if some servers are dead those alive will finish communication, and then dead servers would timeout. close_on_error   close_on_error => 0   (default: enabled) The value is a boolean which enables (true) or disables (false) close_on_error mode. When enabled, any error response from the memcached server would make client close the connection. Note that such ""error response"" is different from ""negative response"". The latter means the server processed the command and yield negative result. The former means the server failed to process the command for some reason. close_on_error is enabled by default for safety. Consider the following scenario: 1 Client want to set some value, but mistakenly sends malformed command (this can't happen with current module of course ;)):   set key 10\r\n   value_data\r\n 2 Memcached server reads first line, 'set key 10', and can't parse it, because there's wrong number of tokens in it. So it sends   ERROR\r\n 3 Then the server reads 'value_data' while it is in accept-command state! It can't parse it either (hopefully), and sends another   ERROR\r\n But the client expects one reply per command, so after sending the next command it will think that the second 'ERROR' is a reply for this new command. This means that all replies will shift, including replies for ""get"" commands! By closing the connection we eliminate such possibility. When connection dies, or the client receives the reply that it can't understand, it closes the socket regardless the close_on_error setting. compress_threshold   compress_threshold => 10_000   (default: -1) The value is an integer. When positive it denotes the threshold size in bytes: data with the size equal or larger than this should be compressed. See ""compress_ratio"" and ""compress_methods"" below. Negative value disables compression. compress_ratio   compress_ratio => 0.9   (default: 0.8) The value is a fractional number between 0 and 1. When ""compress_threshold"" triggers the compression, compressed size should be less or equal to (original-size * compress_ratio). Otherwise the data will be stored uncompressed. compress_methods   compress_methods => [ \&IO::Compress::Gzip::gzip,                         \&IO::Uncompress::Gunzip::gunzip ]   (default: [ sub { ${$_[1]} = Compress::Zlib::memGzip(${$_[0]}) },               sub { ${$_[1]} = Compress::Zlib::memGunzip(${$_[0]}) } ]    when Compress::Zlib is available) The value is a reference to an array holding two code references for compression and decompression routines respectively. Compression routine is called when the size of the $value passed to ""set"" method family is greater than or equal to ""compress_threshold"" (also see ""compress_ratio""). The fact that compression was performed is remembered along with the data, and decompression routine is called on data retrieval with ""get"" method family. The interface of these routines should be the same as for IO::Compress family (for instance see IO::Compress::Gzip::gzip and IO::Uncompress::Gunzip::gunzip). I.e. compression routine takes a reference to scalar value and a reference to scalar where compressed result will be stored. Decompression routine takes a reference to scalar with compressed data and a reference to scalar where uncompressed result will be stored. Both routines should return true on success, and false on error. By default we use Compress::Zlib because as of this writing it appears to be much faster than IO::Uncompress::Gunzip. max_failures   max_failures => 3   (default: 0) The value is a non-negative integer. When positive, if there happened max_failures in failure_timeout seconds, the client does not try to connect to this particular server for another failure_timeout seconds. Value of zero disables this behaviour. failure_timeout   failure_timeout => 30   (default: 10 seconds) The value is a positive integer number of seconds. See ""max_failures"". ketama_points   ketama_points => 150   (default: 0) The value is a non-negative integer. When positive, enables the Ketama consistent hashing algorithm (http://www.last.fm/user/RJ/journal/2007/04/10/392555/), and specifies the number of points the server with weight 1 will be mapped to. Thus each server will be mapped to ketama_points * weight points in continuum. Larger value will result in more uniform distribution. Note that the number of internal bucket structures, and hence memory consumption, will be proportional to sum of such products. But bucket structures themselves are small (two integers each), so you probably shouldn't worry. Zero value disables the Ketama algorithm. See also server weight in ""servers"" above. serialize_methods   serialize_methods => [ \&Storable::freeze, \&Storable::thaw ],   (default: [ \&Storable::nfreeze, \&Storable::thaw ]) The value is a reference to an array holding two code references for serialization and deserialization routines respectively. Serialization routine is called when the $value passed to ""set"" method family is a reference. The fact that serialization was performed is remembered along with the data, and deserialization routine is called on data retrieval with ""get"" method family. The interface of these routines should be the same as for Storable::nfreeze and Storable::thaw. I.e. serialization routine takes a reference and returns a scalar string; it should not fail. Deserialization routine takes scalar string and returns a reference; if deserialization fails (say, wrong data format) it should throw an exception (call die). The exception will be caught by the module and ""get"" will then pretend that the key hasn't been found. utf8   utf8 => 1   (default: disabled) The value is a boolean which enables (true) or disables (false) the conversion of Perl character strings to octet sequences in UTF-8 encoding on store, and the reverse conversion on fetch (when the retrieved data is marked as being UTF-8 octet sequence). See perlunicode. max_size   max_size => 512 * 1024   (default: 1024 * 1024) The value is a maximum size of an item to be stored in memcached. When trying to set a key to a value longer than max_size bytes (after serialization and compression) nothing is sent to the server, and set methods return undef. Note that the real maximum on the server is less than 1MB, and depends on key length among other things. So some values in the range [1MB - N bytes, 1MB], where N is several hundreds, will still be sent to the server, and rejected there. You may set max_size to a smaller value to avoid this. check_args   check_args => 'skip'   (default: not 'skip') The value is a string. Currently the only recognized string is 'skip'. By default all constructor parameter names are checked to be recognized, and a warning is given for unknown parameter. This will catch spelling errors that otherwise might go unnoticed. When set to 'skip', the check will be bypassed. This may be desired when you share the same argument hash among different client versions, or among different clients. METHODS enable_compress   $memd->enable_compress($enable); Enable compression when boolean $enable is true, disable when false. Note that you can enable compression only when you set ""compress_threshold"" to some positive value and ""compress_methods"" is set. Return: none. namespace   $memd->namespace;   $memd->namespace($string); Without the argument return the current namespace prefix. With the argument set the namespace prefix to $string, and return the old prefix. Return: scalar, the namespace prefix that was in effect before the call. set   $memd->set($key, $value);   $memd->set($key, $value, $expiration_time); Store the $value on the server under the $key. $key should be a scalar. $value should be defined and may be of any Perl data type. When it is a reference, the referenced Perl data structure will be transparently serialized by routines specified with ""serialize_methods"", which see. Optional $expiration_time is a positive integer number of seconds after which the value will expire and wouldn't be accessible any longer. Return: boolean, true for positive server reply, false for negative server reply, or undef in case of some error. set_multi   $memd->set_multi(       [$key, $value],       [$key, $value, $expiration_time],       ...   ); Like ""set"", but operates on more than one key. Takes the list of references to arrays each holding $key, $value and optional $expiration_time. Note that multi commands are not all-or-nothing, some operations may succeed, while others may fail. Return: in list context returns the list of results, each $list[$index] is the result value corresponding to the argument at position $index. In scalar context, hash reference is returned, where $href->{$key} holds the result value. See ""set"" to learn what the result value is. cas   $memd->cas($key, $cas, $value);   $memd->cas($key, $cas, $value, $expiration_time); Store the $value on the server under the $key, but only if CAS (Consistent Access Storage) value associated with this key is equal to $cas. $cas is an opaque object returned with ""gets"" or ""gets_multi"". See ""set"" for $key, $value, $expiration_time parameters description. Return: boolean, true for positive server reply, false for negative server reply, or undef in case of some error. Thus if the key exists on the server, false would mean that some other client has updated the value, and ""gets"", ""cas"" command sequence should be repeated. cas command first appeared in memcached 1.2.4. cas_multi   $memd->cas_multi(       [$key, $cas, $value],       [$key, $cas, $value, $expiration_time],       ...   ); Like ""cas"", but operates on more than one key. Takes the list of references to arrays each holding $key, $cas, $value and optional $expiration_time. Note that multi commands are not all-or-nothing, some operations may succeed, while others may fail. Return: in list context returns the list of results, each $list[$index] is the result value corresponding to the argument at position $index. In scalar context, hash reference is returned, where $href->{$key} holds the result value. See ""cas"" to learn what the result value is. cas command first appeared in memcached 1.2.4. add   $memd->add($key, $value);   $memd->add($key, $value, $expiration_time); Store the $value on the server under the $key, but only if the key doesn't exists on the server. See ""set"" for $key, $value, $expiration_time parameters description. Return: boolean, true for positive server reply, false for negative server reply, or undef in case of some error. add_multi   $memd->add_multi(       [$key, $value],       [$key, $value, $expiration_time],       ...   ); Like ""add"", but operates on more than one key. Takes the list of references to arrays each holding $key, $value and optional $expiration_time. Note that multi commands are not all-or-nothing, some operations may succeed, while others may fail. Return: in list context returns the list of results, each $list[$index] is the result value corresponding to the argument at position $index. In scalar context, hash reference is returned, where $href->{$key} holds the result value. See ""add"" to learn what the result value is. replace  $memd->replace($key, $value);  $memd->replace($key, $value, $expiration_time); Store the $value on the server under the $key, but only if the key does exists on the server. See ""set"" for $key, $value, $expiration_time parameters description. Return: boolean, true for positive server reply, false for negative server reply, or undef in case of some error. replace_multi   $memd->replace_multi(       [$key, $value],       [$key, $value, $expiration_time],       ...   ); Like ""replace"", but operates on more than one key. Takes the list of references to arrays each holding $key, $value and optional $expiration_time. Note that multi commands are not all-or-nothing, some operations may succeed, while others may fail. Return: in list context returns the list of results, each $list[$index] is the result value corresponding to the argument at position $index. In scalar context, hash reference is returned, where $href->{$key} holds the result value. See ""replace"" to learn what the result value is. append   $memd->append($key, $value); Append the $value to the current value on the server under the $key. $key and $value should be scalars, as well as current value on the server. append doesn't affect expiration time of the value. Return: boolean, true for positive server reply, false for negative server reply, or undef in case of some error. append command first appeared in memcached 1.2.4. append_multi   $memd->append_multi(       [$key, $value],       ...   ); Like ""append"", but operates on more than one key. Takes the list of references to arrays each holding $key, $value. Note that multi commands are not all-or-nothing, some operations may succeed, while others may fail. Return: in list context returns the list of results, each $list[$index] is the result value corresponding to the argument at position $index. In scalar context, hash reference is returned, where $href->{$key} holds the result value. See ""append"" to learn what the result value is. append command first appeared in memcached 1.2.4. prepend   $memd->prepend($key, $value); Prepend the $value to the current value on the server under the $key. $key and $value should be scalars, as well as current value on the server. prepend doesn't affect expiration time of the value. Return: boolean, true for positive server reply, false for negative server reply, or undef in case of some error. prepend command first appeared in memcached 1.2.4. prepend_multi   $memd->prepend_multi(       [$key, $value],       ...   ); Like ""prepend"", but operates on more than one key. Takes the list of references to arrays each holding $key, $value. Note that multi commands are not all-or-nothing, some operations may succeed, while others may fail. Return: in list context returns the list of results, each $list[$index] is the result value corresponding to the argument at position $index. In scalar context, hash reference is returned, where $href->{$key} holds the result value. See ""prepend"" to learn what the result value is. prepend command first appeared in memcached 1.2.4. get   $memd->get($key); Retrieve the value for a $key. $key should be a scalar. Return: value associated with the $key, or nothing. get_multi   $memd->get_multi(@keys); Retrieve several values associated with @keys. @keys should be an array of scalars. Return: reference to hash, where $href->{$key} holds corresponding value. gets   $memd->gets($key); Retrieve the value and its CAS for a $key. $key should be a scalar. Return: reference to an array [$cas, $value], or nothing. You may conveniently pass it back to ""cas"" with @$res:   my $cas_val = $memd->gets($key);   # Update value.   if (defined $cas_val) {       $$cas_val[1] = 3;       $memd->cas($key, @$cas_val);   } gets command first appeared in memcached 1.2.4. gets_multi   $memd->gets_multi(@keys); Retrieve several values and their CASs associated with @keys. @keys should be an array of scalars. Return: reference to hash, where $href->{$key} holds a reference to an array [$cas, $value]. Compare with ""gets"". gets command first appeared in memcached 1.2.4. incr   $memd->incr($key);   $memd->incr($key, $increment); Increment the value for the $key. Starting with memcached 1.3.3 $key should be set to a number or the command will fail. An optional $increment should be a positive integer, when not given 1 is assumed. Note that the server doesn't check for overflow. Return: unsigned integer, new value for the $key, or false for negative server reply, or undef in case of some error. incr_multi   $memd->incr_multi(       @keys,       [$key],       [$key, $increment],       ...   ); Like ""incr"", but operates on more than one key. Takes the list of keys and references to arrays each holding $key and optional $increment. Note that multi commands are not all-or-nothing, some operations may succeed, while others may fail. Return: in list context returns the list of results, each $list[$index] is the result value corresponding to the argument at position $index. In scalar context, hash reference is returned, where $href->{$key} holds the result value. See ""incr"" to learn what the result value is. decr   $memd->decr($key);   $memd->decr($key, $decrement); Decrement the value for the $key. Starting with memcached 1.3.3 $key should be set to a number or the command will fail. An optional $decrement should be a positive integer, when not given 1 is assumed. Note that the server does check for underflow, attempt to decrement the value below zero would set the value to zero. Similar to DBI, zero is returned as ""0E0"", and evaluates to true in a boolean context. Return: unsigned integer, new value for the $key, or false for negative server reply, or undef in case of some error. decr_multi   $memd->decr_multi(       @keys,       [$key],       [$key, $decrement],       ...   ); Like ""decr"", but operates on more than one key. Takes the list of keys and references to arrays each holding $key and optional $decrement. Note that multi commands are not all-or-nothing, some operations may succeed, while others may fail. Return: in list context returns the list of results, each $list[$index] is the result value corresponding to the argument at position $index. In scalar context, hash reference is returned, where $href->{$key} holds the result value. See ""decr"" to learn what the result value is. delete   $memd->delete($key); Delete $key and its value from the cache. Return: boolean, true for positive server reply, false for negative server reply, or undef in case of some error. remove (deprecated) Alias for ""delete"", for compatibility with Cache::Memcached. delete_multi   $memd->delete_multi(@keys); Like ""delete"", but operates on more than one key. Takes the list of keys. Note that multi commands are not all-or-nothing, some operations may succeed, while others may fail. Return: in list context returns the list of results, each $list[$index] is the result value corresponding to the argument at position $index. In scalar context, hash reference is returned, where $href->{$key} holds the result value. See ""delete"" to learn what the result value is. touch   $memd->touch($key, $expiration_time); Update the expiration time of $key without fetching it. Optional $expiration_time is a positive integer number of seconds after which the value will expire and wouldn't be accessible any longer. Return: boolean, true for positive server reply, false for negative server reply, or undef in case of some error. touch command first appeared in memcached 1.4.8. touch_multi   $memd->touch_multi(       [$key],       [$key, $expiration_time],       ...   ); Like ""touch"", but operates on more than one key. Takes the list of references to arrays each holding $key and optional $expiration_time. Note that multi commands are not all-or-nothing, some operations may succeed, while others may fail. Return: in list context returns the list of results, each $list[$index] is the result value corresponding to the argument at position $index. In scalar context, hash reference is returned, where $href->{$key} holds the result value. See ""touch"" to learn what the result value is. touch command first appeared in memcached 1.4.8. flush_all   $memd->flush_all;   $memd->flush_all($delay); Flush all caches the client knows about. This command invalidates all items in the caches, none of them will be returned on subsequent retrieval command. $delay is an optional non-negative integer number of seconds to delay the operation. The delay will be distributed across the servers. For instance, when you have three servers, and call flush_all(30), the servers would get 30, 15, 0 seconds delays respectively. When omitted, zero is assumed, i.e. flush immediately. Return: reference to hash, where $href->{$server} holds corresponding result value. $server is either host:port or /path/to/unix.sock, as described in ""servers"". Result value is a boolean, true for positive server reply, false for negative server reply, or undef in case of some error. nowait_push   $memd->nowait_push; Push all pending requests to the server(s), and wait for all replies. When ""nowait"" mode is enabled, the requests issued in a void context may not reach the server(s) immediately (because the reply is not waited for). Instead they may stay in the send queue on the local host, or in the receive queue on the remote host(s), for quite a long time. This method ensures that they are delivered to the server(s), processed there, and the replies have arrived (or some error has happened that caused some connection(s) to be closed). Destructor will call this method to ensure that all requests are processed before the connection is closed. Return: nothing. server_versions   $memd->server_versions; Get server versions. Return: reference to hash, where $href->{$server} holds corresponding server version. $server is either host:port or /path/to/unix.sock, as described in ""servers"". disconnect_all   $memd->disconnect_all; Closes all open sockets to memcached servers. Must be called after ""fork"" in perlfunc if the parent process has open sockets to memcacheds (as the child process inherits the socket and thus two processes end up using the same socket which leads to protocol errors.) Return: nothing. Compatibility with Cache::Memcached This module is designed to be a drop in replacement for Cache::Memcached. Where constructor parameters are the same as in Cache::Memcached, the default values are also the same, and new parameters are disabled by default (the exception is ""close_on_error"", which is absent in Cache::Memcached and enabled by default in this module, and ""check_args"", which see). Internally Cache::Memcached::Fast uses the same hash function as Cache::Memcached, and thus should distribute the keys across several servers the same way. So both modules may be used interchangeably. Most users of the original module should be able to use this module after replacing ""Cache::Memcached"" with ""Cache::Memcached::Fast"", without further code modifications. However, as of this release, the following features of Cache::Memcached are not supported by Cache::Memcached::Fast (and some of them will never be): Constructor parameters no_rehash Current implementation never rehashes keys, instead ""max_failures"" and ""failure_timeout"" are used. If the client would rehash the keys, a consistency problem would arise: when the failure occurs the client can't tell whether the server is down, or there's a (transient) network failure. While some clients might fail to reach a particular server, others may still reach it, so some clients will start rehashing, while others will not, and they will no longer agree which key goes where. readonly Not supported. Easy to add. However I'm not sure about the demand for it, and it will slow down things a bit (because from design point of view it's better to add it on Perl side rather than on XS side). debug Not supported. Since the implementation is different, there can't be any compatibility on debug level. Methods Passing keys Every key should be a scalar. The syntax when key is a reference to an array [$precomputed_hash, $key] is not supported. set_servers Not supported. Server set should not change after client object construction. set_debug Not supported. See ""debug"". set_readonly Not supported. See ""readonly"". set_norehash Not supported. See ""no_rehash"". set_compress_threshold Not supported. Easy to add. Currently you specify compress_threshold during client object construction. stats Not supported. Perhaps will appear in the future releases. Tainted data In current implementation tainted flag is neither tested nor preserved, storing tainted data and retrieving it back would clear tainted flag. See perlsec. Threads This module is thread-safe when used with Perl >= 5.7.2. As with other Perl data each thread gets its own copy of Cache::Memcached::Fast object that is in scope when the thread is created. Such copies share no state, and may be used concurrently. For example:   use threads;    my $memd = new Cache::Memcached::Fast({...});    sub thread_job {     $memd->set(""key"", ""thread value"");   }    threads->new(\&thread_job);   $memd->set(""key"", ""main value""); Here both sets will be executed concurrently, and the value of key will be either main value or thread value, depending on the timing of operations. Note that $memd inside thread_job internally refers to a different Cache::Memcached::Fast object than $memd from the outer scope. Each object has its own connections to servers, its own counter of outstanding replies for ""nowait"" mode, etc. New object copy is created with the same constructor arguments, but initially is not connected to any server (even when master copy has open connections). No file descriptor is allocated until the command is executed through this new object. You may safely create Cache::Memcached::Fast object from threads other than main thread, and/or pass them as parameters to threads::new(). However you can't return the object from top-level thread function. I.e., the following won't work:   use threads;    sub thread_job {     return new Cache::Memcached::Fast({...});   }    my $thread = threads->new(\&thread_job);    my $memd = $thread->join;  # The object will be destroyed here. This is a Perl limitation (see ""BUGS AND LIMITATIONS"" in threads). BUGS Please report any bugs or feature requests to bug-cache-memcached-fast at rt.cpan.org, or through the web interface at http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Cache-Memcached-Fast. I will be notified, and then you'll automatically be notified of progress on your bug as I make changes. SUPPORT You can find documentation for this module with the perldoc command.     perldoc Cache::Memcached::Fast You can also look for information at: Project home http://openhack.ru/Cache-Memcached-Fast RT: CPAN's request tracker http://rt.cpan.org/NoAuth/Bugs.html?Dist=Cache-Memcached-Fast AnnoCPAN: Annotated CPAN documentation http://annocpan.org/dist/Cache-Memcached-Fast CPAN Ratings http://cpanratings.perl.org/d/Cache-Memcached-Fast Search CPAN http://search.cpan.org/dist/Cache-Memcached-Fast SEE ALSO https://github.com/kroki/Cache-Memcached-Fast - project home. Latest development tree can be found there. http://openhack.ru/Cache-Memcached-Fast - old project home. Cache::Memcached - original pure Perl memcached client. http://www.memcached.org/ - memcached website. AUTHORS Tomash Brechko, <tomash.brechko at gmail.com> - design and implementation. Michael Monashev, <postmaster at softsearch.ru> - project management, design suggestions, testing. ACKNOWLEDGEMENTS Development of this module was sponsored by Monashev Co. Ltd. Thanks to Peter J. Holzer for enlightening on UTF-8 support. Thanks to Yasuhiro Matsumoto for initial Win32 patch. WARRANTY There's NONE, neither explicit nor implied. But you knew it already ;). COPYRIGHT AND LICENSE Copyright (C) 2007-2010 Tomash Brechko. All rights reserved. This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself, either Perl version 5.8.8 or, at your option, any later version of Perl 5 you may have available. × Module Install Instructions To install Cache::Memcached::Fast, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Cache::Memcached::Fast CPAN shell                      perl -MCPAN -e shell                     install Cache::Memcached::Fast For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"NoSQL Databases"	"Mango"	"https://metacpan.org/pod/Mango"	"Pure-Perl non-blocking I/O MongoDB driver"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Mango - Pure-Perl non-blocking I/O MongoDB driver - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Olivier Duclos  /  1.29 (ODC on 2016-06-28) 1.28 (ODC on 2016-04-11) 1.27 (ODC on 2016-02-29) 1.26 (ODC on 2016-02-25) 1.25 (ODC on 2016-02-16) 1.24 (ODC on 2016-01-01) 1.23 (ODC on 2015-11-12) 1.22 (ODC on 2015-11-06) 1.21 (ODC on 2015-11-04) 1.20 (ODC on 2015-08-04) 1.19 (ODC on 2015-08-03) 1.18 (ODC on 2015-06-04) 1.17 (ODC on 2015-03-23) 1.16 (ODC on 2015-02-03) 1.15 (ODC on 2015-02-03) 0.01000_13 DEV (CLACO on 2008-06-02) 1.14 (SRI on 2014-09-22) 1.13 (SRI on 2014-09-21) 1.12 (SRI on 2014-09-12) 1.11 (SRI on 2014-09-10) 1.10 (SRI on 2014-09-06) 1.09 (SRI on 2014-09-01) 1.08 (SRI on 2014-08-23) 1.07 (SRI on 2014-08-23) 1.06 (SRI on 2014-08-22) 1.05 (SRI on 2014-08-09) 1.04 (SRI on 2014-07-25) 1.03 (SRI on 2014-07-25) 1.02 (SRI on 2014-07-24) 1.01 (SRI on 2014-06-28) 1.0 (SRI on 2014-06-24) 0.43 (SRI on 2014-06-15) 0.42 (SRI on 2014-06-04) 0.41 (SRI on 2014-06-02) 0.40 (SRI on 2014-05-31) 0.39 (SRI on 2014-05-13) 0.38 (SRI on 2014-05-12) 0.37 (SRI on 2014-05-12) 0.36 (SRI on 2014-05-05) 0.35 (SRI on 2014-05-03) 0.34 (SRI on 2014-05-02) 0.33 (SRI on 2014-04-30) 0.32 (SRI on 2014-04-24) 0.31 (SRI on 2014-04-23) 0.30 (SRI on 2014-04-08) 0.24 (SRI on 2014-02-27) 0.23 (SRI on 2014-01-22) 0.22 (SRI on 2013-12-18) 0.21 (SRI on 2013-12-04) 0.20 (SRI on 2013-11-30) 0.19 (SRI on 2013-11-18) 0.18 (SRI on 2013-11-11) 0.17 (SRI on 2013-10-30) 0.16 (SRI on 2013-10-12) 0.15 (SRI on 2013-10-11) 0.14 (SRI on 2013-10-06) 0.13 (SRI on 2013-09-21) 0.12 (SRI on 2013-08-17) 0.11 (SRI on 2013-08-14) 0.10 (SRI on 2013-08-05) 0.09 (SRI on 2013-07-28) 0.08 (SRI on 2013-07-20) 0.07 (SRI on 2013-07-18) 0.06 (SRI on 2013-07-17) 0.05 (SRI on 2013-07-08) 0.04 (SRI on 2013-02-10) 0.03 (SRI on 2013-02-09) 0.02 (SRI on 2013-02-07) 0.01 (SRI on 2013-02-06) 0.001_01 DEV (AWNCORP on 2012-05-10) 0.01000_12 DEV (CLACO on 2008-05-13) 0.01000_11 DEV (CLACO on 2008-04-14) 0.01000_10 DEV (CLACO on 2008-01-19) 0.01000_09 DEV (CLACO on 2008-01-16) 0.01000_08 DEV (CLACO on 2008-01-13) 0.01000_07 DEV (CLACO on 2008-01-08) 0.01000_06 DEV (CLACO on 2007-09-10) 0.01000_05 DEV (CLACO on 2007-05-30) 0.01000_04 DEV (CLACO on 2007-05-28) 0.01000_03 DEV (CLACO on 2007-04-22) 0.01000_02 DEV (CLACO on 2007-04-19) 0.01000_01 DEV (CLACO on 2007-04-17) Mango-1.29 41 ++ 41 ++  / Mango 28 Jun 2016 20:02:22 GMT Module version: 1.29 Source (raw) Browse (raw) Changes Homepage Clone repository Issues Testers Kwalitee License: artistic_2 Questions? Chat with us! Activity 24 month Tools MOBI | EPUB Download (49.42Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.28 (ODC on 2016-04-11) 1.27 (ODC on 2016-02-29) 1.26 (ODC on 2016-02-25) 1.25 (ODC on 2016-02-16) 1.24 (ODC on 2016-01-01) 1.23 (ODC on 2015-11-12) 1.22 (ODC on 2015-11-06) 1.21 (ODC on 2015-11-04) 1.20 (ODC on 2015-08-04) 1.19 (ODC on 2015-08-03) 1.18 (ODC on 2015-06-04) 1.17 (ODC on 2015-03-23) 1.16 (ODC on 2015-02-03) 1.15 (ODC on 2015-02-03) 0.01000_13 DEV (CLACO on 2008-06-02) 1.14 (SRI on 2014-09-22) 1.13 (SRI on 2014-09-21) 1.12 (SRI on 2014-09-12) 1.11 (SRI on 2014-09-10) 1.10 (SRI on 2014-09-06) 1.09 (SRI on 2014-09-01) 1.08 (SRI on 2014-08-23) 1.07 (SRI on 2014-08-23) 1.06 (SRI on 2014-08-22) 1.05 (SRI on 2014-08-09) 1.04 (SRI on 2014-07-25) 1.03 (SRI on 2014-07-25) 1.02 (SRI on 2014-07-24) 1.01 (SRI on 2014-06-28) 1.0 (SRI on 2014-06-24) 0.43 (SRI on 2014-06-15) 0.42 (SRI on 2014-06-04) 0.41 (SRI on 2014-06-02) 0.40 (SRI on 2014-05-31) 0.39 (SRI on 2014-05-13) 0.38 (SRI on 2014-05-12) 0.37 (SRI on 2014-05-12) 0.36 (SRI on 2014-05-05) 0.35 (SRI on 2014-05-03) 0.34 (SRI on 2014-05-02) 0.33 (SRI on 2014-04-30) 0.32 (SRI on 2014-04-24) 0.31 (SRI on 2014-04-23) 0.30 (SRI on 2014-04-08) 0.24 (SRI on 2014-02-27) 0.23 (SRI on 2014-01-22) 0.22 (SRI on 2013-12-18) 0.21 (SRI on 2013-12-04) 0.20 (SRI on 2013-11-30) 0.19 (SRI on 2013-11-18) 0.18 (SRI on 2013-11-11) 0.17 (SRI on 2013-10-30) 0.16 (SRI on 2013-10-12) 0.15 (SRI on 2013-10-11) 0.14 (SRI on 2013-10-06) 0.13 (SRI on 2013-09-21) 0.12 (SRI on 2013-08-17) 0.11 (SRI on 2013-08-14) 0.10 (SRI on 2013-08-05) 0.09 (SRI on 2013-07-28) 0.08 (SRI on 2013-07-20) 0.07 (SRI on 2013-07-18) 0.06 (SRI on 2013-07-17) 0.05 (SRI on 2013-07-08) 0.04 (SRI on 2013-02-10) 0.03 (SRI on 2013-02-09) 0.02 (SRI on 2013-02-07) 0.01 (SRI on 2013-02-06) 0.001_01 DEV (AWNCORP on 2012-05-10) 0.01000_12 DEV (CLACO on 2008-05-13) 0.01000_11 DEV (CLACO on 2008-04-14) 0.01000_10 DEV (CLACO on 2008-01-19) 0.01000_09 DEV (CLACO on 2008-01-16) 0.01000_08 DEV (CLACO on 2008-01-13) 0.01000_07 DEV (CLACO on 2008-01-08) 0.01000_06 DEV (CLACO on 2007-09-10) 0.01000_05 DEV (CLACO on 2007-05-30) 0.01000_04 DEV (CLACO on 2007-05-28) 0.01000_03 DEV (CLACO on 2007-04-22) 0.01000_02 DEV (CLACO on 2007-04-19) 0.01000_01 DEV (CLACO on 2007-04-17) Diff with version 1.28 (ODC on 2016-04-11) 1.27 (ODC on 2016-02-29) 1.26 (ODC on 2016-02-25) 1.25 (ODC on 2016-02-16) 1.24 (ODC on 2016-01-01) 1.23 (ODC on 2015-11-12) 1.22 (ODC on 2015-11-06) 1.21 (ODC on 2015-11-04) 1.20 (ODC on 2015-08-04) 1.19 (ODC on 2015-08-03) 1.18 (ODC on 2015-06-04) 1.17 (ODC on 2015-03-23) 1.16 (ODC on 2015-02-03) 1.15 (ODC on 2015-02-03) 0.01000_13 DEV (CLACO on 2008-06-02) 1.14 (SRI on 2014-09-22) 1.13 (SRI on 2014-09-21) 1.12 (SRI on 2014-09-12) 1.11 (SRI on 2014-09-10) 1.10 (SRI on 2014-09-06) 1.09 (SRI on 2014-09-01) 1.08 (SRI on 2014-08-23) 1.07 (SRI on 2014-08-23) 1.06 (SRI on 2014-08-22) 1.05 (SRI on 2014-08-09) 1.04 (SRI on 2014-07-25) 1.03 (SRI on 2014-07-25) 1.02 (SRI on 2014-07-24) 1.01 (SRI on 2014-06-28) 1.0 (SRI on 2014-06-24) 0.43 (SRI on 2014-06-15) 0.42 (SRI on 2014-06-04) 0.41 (SRI on 2014-06-02) 0.40 (SRI on 2014-05-31) 0.39 (SRI on 2014-05-13) 0.38 (SRI on 2014-05-12) 0.37 (SRI on 2014-05-12) 0.36 (SRI on 2014-05-05) 0.35 (SRI on 2014-05-03) 0.34 (SRI on 2014-05-02) 0.33 (SRI on 2014-04-30) 0.32 (SRI on 2014-04-24) 0.31 (SRI on 2014-04-23) 0.30 (SRI on 2014-04-08) 0.24 (SRI on 2014-02-27) 0.23 (SRI on 2014-01-22) 0.22 (SRI on 2013-12-18) 0.21 (SRI on 2013-12-04) 0.20 (SRI on 2013-11-30) 0.19 (SRI on 2013-11-18) 0.18 (SRI on 2013-11-11) 0.17 (SRI on 2013-10-30) 0.16 (SRI on 2013-10-12) 0.15 (SRI on 2013-10-11) 0.14 (SRI on 2013-10-06) 0.13 (SRI on 2013-09-21) 0.12 (SRI on 2013-08-17) 0.11 (SRI on 2013-08-14) 0.10 (SRI on 2013-08-05) 0.09 (SRI on 2013-07-28) 0.08 (SRI on 2013-07-20) 0.07 (SRI on 2013-07-18) 0.06 (SRI on 2013-07-17) 0.05 (SRI on 2013-07-08) 0.04 (SRI on 2013-02-10) 0.03 (SRI on 2013-02-09) 0.02 (SRI on 2013-02-07) 0.01 (SRI on 2013-02-06) 0.001_01 DEV (AWNCORP on 2012-05-10) 0.01000_12 DEV (CLACO on 2008-05-13) 0.01000_11 DEV (CLACO on 2008-04-14) 0.01000_10 DEV (CLACO on 2008-01-19) 0.01000_09 DEV (CLACO on 2008-01-16) 0.01000_08 DEV (CLACO on 2008-01-13) 0.01000_07 DEV (CLACO on 2008-01-08) 0.01000_06 DEV (CLACO on 2007-09-10) 0.01000_05 DEV (CLACO on 2007-05-30) 0.01000_04 DEV (CLACO on 2007-05-28) 0.01000_03 DEV (CLACO on 2007-04-22) 0.01000_02 DEV (CLACO on 2007-04-19) 0.01000_01 DEV (CLACO on 2007-04-17) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 16 PAUSE users 25 non-PAUSE users. ODC Olivier Duclos Dependencies Mojolicious and possibly others CPAN Testers List Reverse dependencies Dependency graph × Mango-1.29 NAME SYNOPSIS DESCRIPTION EVENTS connection ATTRIBUTES default_db hosts inactivity_timeout ioloop j max_bson_size max_connections max_write_batch_size protocol w wtimeout METHODS backlog db from_string get_more kill_cursors new query DEBUGGING SPONSORS AUTHOR CREDITS COPYRIGHT AND LICENSE SEE ALSO NAME Mango - Pure-Perl non-blocking I/O MongoDB driver SYNOPSIS   use Mango;    # Declare a Mango helper   sub mango { state $m = Mango->new('mongodb://localhost:27017') }   # or in a Mojolicious::Lite app   helper mango => sub { state $m = Mango->new('mongodb://localhost:27017') };    # Insert document   my $oid   = mango->db('test')->collection('foo')->insert({bar => 'baz'});    # Find document   my $doc = mango->db('test')->collection('foo')->find_one({bar => 'baz'});   say $doc->{bar};    # Update document   mango->db('test')->collection('foo')     ->update({bar => 'baz'}, {bar => 'yada'});    # Remove document   mango->db('test')->collection('foo')->remove({bar => 'yada'});    # Insert document with special BSON types   use Mango::BSON ':bson';   my $oid = mango->db('test')->collection('foo')     ->insert({data => bson_bin(""\x00\x01""), now => bson_time});    # Non-blocking concurrent find   my $delay = Mojo::IOLoop->delay(sub {     my ($delay, @docs) = @_;     ...   });   for my $name (qw(sri marty)) {     my $end = $delay->begin(0);     mango->db('test')->collection('users')->find({name => $name})->all(sub {       my ($cursor, $err, $docs) = @_;       $end->(@$docs);     });   }   $delay->wait;    # Event loops such as AnyEvent are supported through EV   use EV;   use AnyEvent;   my $cv = AE::cv;   mango->db('test')->command(buildInfo => sub {     my ($db, $err, $doc) = @_;     $cv->send($doc->{version});   });   say $cv->recv; DESCRIPTION Mango is a pure-Perl non-blocking I/O MongoDB driver, optimized for use with the Mojolicious real-time web framework, and with multiple event loop support. Since MongoDB is still changing rapidly, only the latest stable version is supported. For MongoDB 2.6 support, use Mango 1.16. To learn more about MongoDB you should take a look at the official documentation, the documentation included in this distribution is no replacement for it. Look at Mango::Collection for CRUD operations. Many arguments passed to methods as well as values of attributes get serialized to BSON with Mango::BSON, which provides many helper functions you can use to generate data types that are not available natively in Perl. All connections will be reset automatically if a new process has been forked, this allows multiple processes to share the same Mango object safely. For better scalability (epoll, kqueue) and to provide IPv6, SOCKS5 as well as TLS support, the optional modules EV (4.0+), IO::Socket::IP (0.20+), IO::Socket::Socks (0.64+) and IO::Socket::SSL (1.84+) will be used automatically if they are installed. Individual features can also be disabled with the MOJO_NO_IPV6, MOJO_NO_SOCKS and MOJO_NO_TLS environment variables. EVENTS Mango inherits all events from Mojo::EventEmitter and can emit the following new ones. connection   $mango->on(connection => sub {     my ($mango, $id) = @_;     ...   }); Emitted when a new connection has been established. ATTRIBUTES Mango implements the following attributes. default_db   my $name = $mango->default_db;   $mango   = $mango->default_db('test'); Default database, defaults to admin. hosts   my $hosts = $mango->hosts;   $mango    = $mango->hosts([['localhost', 3000], ['localhost', 4000]]); Servers to connect to, defaults to localhost and port 27017. inactivity_timeout   my $timeout = $mango->inactivity_timeout;   $mango      = $mango->inactivity_timeout(15); Maximum amount of time in seconds a connection can be inactive before getting closed, defaults to 0. Setting the value to 0 will allow connections to be inactive indefinitely. ioloop   my $loop = $mango->ioloop;   $mango   = $mango->ioloop(Mojo::IOLoop->new); Event loop object to use for blocking I/O operations, defaults to a Mojo::IOLoop object. j   my $j  = $mango->j;   $mango = $mango->j(1); Wait for all operations to have reached the journal, defaults to 0. max_bson_size   my $max = $mango->max_bson_size;   $mango  = $mango->max_bson_size(16777216); Maximum size for BSON documents in bytes, defaults to 16777216 (16MB). max_connections   my $max = $mango->max_connections;   $mango  = $mango->max_connections(5); Maximum number of connections to use for non-blocking operations, defaults to 5. max_write_batch_size   my $max = $mango->max_write_batch_size;   $mango  = $mango->max_write_batch_size(1000);   Maximum number of write operations to batch together, defaults to C<1000>. protocol   my $protocol = $mango->protocol;   $mango       = $mango->protocol(Mango::Protocol->new); Protocol handler, defaults to a Mango::Protocol object. w   my $w  = $mango->w;   $mango = $mango->w(2); Wait for all operations to have reached at least this many servers, 1 indicates just primary, 2 indicates primary and at least one secondary, defaults to 1. wtimeout   my $timeout = $mango->wtimeout;   $mango      = $mango->wtimeout(1); Timeout for write propagation in milliseconds, defaults to 1000. METHODS Mango inherits all methods from Mojo::Base and implements the following new ones. backlog   my $num = $mango->backlog; Number of queued operations that have not yet been assigned to a connection. db   my $db = $mango->db;   my $db = $mango->db('test'); Build Mango::Database object for database, uses ""default_db"" if no name is provided. Note that the reference ""mango"" in Mango::Database is weakened, so the Mango object needs to be referenced elsewhere as well. from_string   $mango     = $mango->from_string('mongodb://sri:s3cret@localhost:3000/test?w=2'); Parse configuration from connection string. get_more   my $reply = $mango->get_more($namespace, $return, $cursor); Perform low level GET_MORE operation. You can also append a callback to perform operation non-blocking.   $mango->get_more(($namespace, $return, $cursor) => sub {     my ($mango, $err, $reply) = @_;     ...   });   Mojo::IOLoop->start unless Mojo::IOLoop->is_running; kill_cursors   $mango->kill_cursors(@ids); Perform low level KILL_CURSORS operation. You can also append a callback to perform operation non-blocking.     $mango->kill_cursors(@ids => sub {       my ($mango, $err) = @_;       ...     });     Mojo::IOLoop->start unless Mojo::IOLoop->is_running; new   my $mango = Mango->new;   my $mango = Mango->new('mongodb://sri:s3cret@localhost:3000/test?w=2'); Construct a new Mango object and parse connection string with ""from_string"" if necessary. Not that is is strongly recommended to build your Mango object inside a helper function like shown in the synopsis. This is because the Mango's object reference inside Mango::Database objects is weakened to avoid memory leaks. This means your Mango instance is quickly going to get undefined after you use the db method. So, use a helper to prevent that. If a username and password are provided, Mango will try to authenticate using SCRAM-SHA1. Warning: this will require Authen::SCRAM which is not installed by default. query   my $reply     = $mango->query($namespace, $flags, $skip, $return, $query, $fields); Perform low level QUERY operation. You can also append a callback to perform operation non-blocking.   $mango->query(($namespace, $flags, $skip, $return, $query, $fields) => sub {     my ($mango, $err, $reply) = @_;     ...   });   Mojo::IOLoop->start unless Mojo::IOLoop->is_running; DEBUGGING You can set the MANGO_DEBUG environment variable to get some advanced diagnostics information printed to STDERR.   MANGO_DEBUG=1 SPONSORS Some of the work on this distribution has been sponsored by Drip Depot, thank you! AUTHOR Sebastian Riedel, sri@cpan.org. Current maintainer: Olivier Duclos odc@cpan.org. CREDITS In alphabetical order: alexbyk Andrey Khozov Colin Cyr COPYRIGHT AND LICENSE Copyright (C) 2013-2014, Sebastian Riedel. This program is free software, you can redistribute it and/or modify it under the terms of the Artistic License version 2.0. SEE ALSO https://github.com/oliwer/mango, Mojolicious::Guides, http://mojolicio.us. × Module Install Instructions To install Mango, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Mango CPAN shell                      perl -MCPAN -e shell                     install Mango For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Pure-Perl non-blocking I/O MongoDB driver"	"true"
"NoSQL Databases"	"Redis"	"https://metacpan.org/pod/Redis"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Redis - Perl binding for Redis database - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Damien Krotkine  /  1.982 (DAMS on 2016-02-11) 1.981 (DAMS on 2015-09-29) 1.980 (DAMS on 2015-08-24) 1.979 (DAMS on 2015-05-14) 1.978 (DAMS on 2015-01-28) 1.977 (DAMS on 2015-01-28) 1.976 (DAMS on 2014-10-03) 1.975 (DAMS on 2014-08-03) 1.974 (DAMS on 2014-05-16) 1.973_04 DEV (DAMS on 2014-05-12) 1.973_03 DEV (DAMS on 2014-05-12) 1.973_02 DEV (DAMS on 2014-04-30) 1.973_01 DEV (DAMS on 2014-04-26) 1.972 (DAMS on 2014-02-17) 1.971 (DAMS on 2014-02-01) 1.970 (DAMS on 2014-01-30) 1.969 (DAMS on 2014-01-30) 1.968 (DAMS on 2014-01-30) 1.967 (DAMS on 2013-12-28) 1.966 (DAMS on 2013-12-17) 1.965 (DAMS on 2013-11-29) 1.964 (DAMS on 2013-11-14) 1.963 (DAMS on 2013-11-13) 1.962 (DAMS on 2013-10-16) 1.961 (MELO on 2013-01-23) 1.960 (MELO on 2013-01-23) 1.959 (MELO on 2013-01-22) 1.958 (MELO on 2013-01-15) 1.957 (MELO on 2013-01-15) 1.956 (MELO on 2013-01-15) 1.955 (MELO on 2012-10-10) 1.954 (MELO on 2012-10-10) 1.953 (MELO on 2012-09-05) 1.952 (MELO on 2012-09-04) 1.951 (MELO on 2012-03-13) 1.950 (MELO on 2012-03-12) 1.926 (MELO on 2012-01-11) 1.925 (MELO on 2012-01-10) 1.904 (MELO on 2011-03-05) 1.903 (MELO on 2011-02-22) 1.902 (MELO on 2011-02-05) 1.901 (MELO on 2011-02-05) 1.900_01 DEV (MELO on 2011-01-30) 1.2001 (DPAVLIN on 2010-03-19) 0.0801 (DPAVLIN on 2009-09-14) Redis-1.982 37 ++ 37 ++  / Redis 11 Feb 2016 08:10:55 GMT Module version: 1.982 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues Testers (947 / 13 / 1) Kwalitee License: artistic_2 Activity 24 month Tools MOBI | EPUB Download (45.46Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.981 (DAMS on 2015-09-29) 1.980 (DAMS on 2015-08-24) 1.979 (DAMS on 2015-05-14) 1.978 (DAMS on 2015-01-28) 1.977 (DAMS on 2015-01-28) 1.976 (DAMS on 2014-10-03) 1.975 (DAMS on 2014-08-03) 1.974 (DAMS on 2014-05-16) 1.973_04 DEV (DAMS on 2014-05-12) 1.973_03 DEV (DAMS on 2014-05-12) 1.973_02 DEV (DAMS on 2014-04-30) 1.973_01 DEV (DAMS on 2014-04-26) 1.972 (DAMS on 2014-02-17) 1.971 (DAMS on 2014-02-01) 1.970 (DAMS on 2014-01-30) 1.969 (DAMS on 2014-01-30) 1.968 (DAMS on 2014-01-30) 1.967 (DAMS on 2013-12-28) 1.966 (DAMS on 2013-12-17) 1.965 (DAMS on 2013-11-29) 1.964 (DAMS on 2013-11-14) 1.963 (DAMS on 2013-11-13) 1.962 (DAMS on 2013-10-16) 1.961 (MELO on 2013-01-23) 1.960 (MELO on 2013-01-23) 1.959 (MELO on 2013-01-22) 1.958 (MELO on 2013-01-15) 1.957 (MELO on 2013-01-15) 1.956 (MELO on 2013-01-15) 1.955 (MELO on 2012-10-10) 1.954 (MELO on 2012-10-10) 1.953 (MELO on 2012-09-05) 1.952 (MELO on 2012-09-04) 1.951 (MELO on 2012-03-13) 1.950 (MELO on 2012-03-12) 1.926 (MELO on 2012-01-11) 1.925 (MELO on 2012-01-10) 1.904 (MELO on 2011-03-05) 1.903 (MELO on 2011-02-22) 1.902 (MELO on 2011-02-05) 1.901 (MELO on 2011-02-05) 1.900_01 DEV (MELO on 2011-01-30) 1.2001 (DPAVLIN on 2010-03-19) 0.0801 (DPAVLIN on 2009-09-14) Diff with version 1.981 (DAMS on 2015-09-29) 1.980 (DAMS on 2015-08-24) 1.979 (DAMS on 2015-05-14) 1.978 (DAMS on 2015-01-28) 1.977 (DAMS on 2015-01-28) 1.976 (DAMS on 2014-10-03) 1.975 (DAMS on 2014-08-03) 1.974 (DAMS on 2014-05-16) 1.973_04 DEV (DAMS on 2014-05-12) 1.973_03 DEV (DAMS on 2014-05-12) 1.973_02 DEV (DAMS on 2014-04-30) 1.973_01 DEV (DAMS on 2014-04-26) 1.972 (DAMS on 2014-02-17) 1.971 (DAMS on 2014-02-01) 1.970 (DAMS on 2014-01-30) 1.969 (DAMS on 2014-01-30) 1.968 (DAMS on 2014-01-30) 1.967 (DAMS on 2013-12-28) 1.966 (DAMS on 2013-12-17) 1.965 (DAMS on 2013-11-29) 1.964 (DAMS on 2013-11-14) 1.963 (DAMS on 2013-11-13) 1.962 (DAMS on 2013-10-16) 1.961 (MELO on 2013-01-23) 1.960 (MELO on 2013-01-23) 1.959 (MELO on 2013-01-22) 1.958 (MELO on 2013-01-15) 1.957 (MELO on 2013-01-15) 1.956 (MELO on 2013-01-15) 1.955 (MELO on 2012-10-10) 1.954 (MELO on 2012-10-10) 1.953 (MELO on 2012-09-05) 1.952 (MELO on 2012-09-04) 1.951 (MELO on 2012-03-13) 1.950 (MELO on 2012-03-12) 1.926 (MELO on 2012-01-11) 1.925 (MELO on 2012-01-10) 1.904 (MELO on 2011-03-05) 1.903 (MELO on 2011-02-22) 1.902 (MELO on 2011-02-05) 1.901 (MELO on 2011-02-05) 1.900_01 DEV (MELO on 2011-01-30) 1.2001 (DPAVLIN on 2010-03-19) 0.0801 (DPAVLIN on 2009-09-14) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 20 PAUSE users 17 non-PAUSE users. DAMS Damien Krotkine and 1 contributors show them Pedro Melo Dependencies IO::Socket::Timeout Try::Tiny CPAN Testers List Reverse dependencies Dependency graph × Redis-1.982 NAME VERSION SYNOPSIS DESCRIPTION PIPELINING ENCODING CONSTRUCTOR new server reconnect, every conservative_reconnect cnx_timeout sentinels_cnx_timeout read_timeout sentinels_read_timeout write_timeout sentinels_write_timeout password on_connect no_auto_connect_on_new no_sentinels_list_update name debug CONNECTION HANDLING connect quit ping PIPELINE MANAGEMENT wait_all_responses wait_one_response PUBLISH/SUBSCRIBE COMMANDS publish subscribe unsubscribe psubscribe punsubscribe is_subscriber wait_for_messages IMPORTANT NOTES ON METHODS methods that return multiple values transaction-handling methods exec keys hashes eval info KEYS del dump exists expire expireat keys migrate move object persist pexpire pexpireat pttl randomkey rename renamenx restore scan sort ttl type STRINGS append bitcount bitop bitpos blpop brpop brpoplpush decr decrby get getbit getrange getset incr incrby incrbyfloat mget mset msetnx psetex set setbit setex setnx setrange strlen HASHES hdel hexists hget hgetall hincrby hincrbyfloat hkeys hlen hmget hmset hscan hset hsetnx hvals SETS sadd scard sdiff sdiffstore sinter sinterstore sismember smembers smove spop srandmember srem sscan sunion sunionstore SORTED SETS zadd zcard zcount zincrby zinterstore zlexcount zrange zrangebylex zrangebyscore zrank zrem zremrangebylex zremrangebyrank zremrangebyscore zrevrange zrevrangebylex zrevrangebyscore zrevrank zscan zscore zunionstore HYPERLOGLOG pfadd pfcount pfmerge PUB/SUB pubsub TRANSACTIONS discard exec multi unwatch watch SCRIPTING eval evalsha script_exists script_flush script_kill script_load CONNECTION auth echo ping quit select SERVER bgrewriteaof bgsave client_getname client_kill client_list client_pause client_setname cluster_slots command command_count command_getkeys command_info config_get config_resetstat config_rewrite config_set dbsize debug_object debug_segfault flushall flushdb info lastsave lindex linsert llen lpop lpush lpushx lrange lrem lset ltrim monitor role rpop rpoplpush rpush rpushx save shutdown slaveof slowlog sync time ACKNOWLEDGEMENTS AUTHORS COPYRIGHT AND LICENSE NAME Redis - Perl binding for Redis database VERSION version 1.982 SYNOPSIS     ## Defaults to $ENV{REDIS_SERVER} or 127.0.0.1:6379     my $redis = Redis->new;      my $redis = Redis->new(server => 'redis.example.com:8080');      ## Set the connection name (requires Redis 2.6.9)     my $redis = Redis->new(       server => 'redis.example.com:8080',       name => 'my_connection_name',     );     my $generation = 0;     my $redis = Redis->new(       server => 'redis.example.com:8080',       name => sub { ""cache-$$-"".++$generation },     );      ## Use UNIX domain socket     my $redis = Redis->new(sock => '/path/to/socket');      ## Enable auto-reconnect     ## Try to reconnect every 1s up to 60 seconds until success     ## Die if you can't after that     my $redis = Redis->new(reconnect => 60, every => 1_000_000);      ## Try each 100ms upto 2 seconds (every is in microseconds)     my $redis = Redis->new(reconnect => 2, every => 100_000);      ## Enable connection timeout (in seconds)     my $redis = Redis->new(cnx_timeout => 60);      ## Enable read timeout (in seconds)     my $redis = Redis->new(read_timeout => 0.5);      ## Enable write timeout (in seconds)     my $redis = Redis->new(write_timeout => 1.2);      ## Connect via a list of Sentinels to a given service     my $redis = Redis->new(sentinels => [ '127.0.0.1:12345' ], service => 'mymaster');      ## Same, but with connection, read and write timeout on the sentinel hosts     my $redis = Redis->new( sentinels => [ '127.0.0.1:12345' ], service => 'mymaster',                             sentinels_cnx_timeout => 0.1,                             sentinels_read_timeout => 1,                             sentinels_write_timeout => 1,                           );      ## Use all the regular Redis commands, they all accept a list of     ## arguments     ## See http://redis.io/commands for full list     $redis->get('key');     $redis->set('key' => 'value');     $redis->sort('list', 'DESC');     $redis->sort(qw{list LIMIT 0 5 ALPHA DESC});      ## Add a coderef argument to run a command in the background     $redis->sort(qw{list LIMIT 0 5 ALPHA DESC}, sub {       my ($reply, $error) = @_;       die ""Oops, got an error: $error\n"" if defined $error;       print ""$_\n"" for @$reply;     });     long_computation();     $redis->wait_all_responses;     ## or     $redis->wait_one_response();      ## Or run a large batch of commands in a pipeline     my %hash = _get_large_batch_of_commands();     $redis->hset('h', $_, $hash{$_}, sub {}) for keys %hash;     $redis->wait_all_responses;      ## Publish/Subscribe     $redis->subscribe(       'topic_1',       'topic_2',       sub {         my ($message, $topic, $subscribed_topic) = @_            ## $subscribed_topic can be different from topic if           ## you use psubscribe() with wildcards       }     );     $redis->psubscribe('nasdaq.*', sub {...});      ## Blocks and waits for messages, calls subscribe() callbacks     ##  ... forever     my $timeout = 10;     $redis->wait_for_messages($timeout) while 1;      ##  ... until some condition     my $keep_going = 1; ## other code will set to false to quit     $redis->wait_for_messages($timeout) while $keep_going;      $redis->publish('topic_1', 'message'); DESCRIPTION Pure perl bindings for http://redis.io/ This version supports protocol 2.x (multi-bulk) or later of Redis available at https://github.com/antirez/redis/. This documentation lists commands which are exercised in test suite, but additional commands will work correctly since protocol specifies enough information to support almost all commands with same piece of code with a little help of AUTOLOAD. PIPELINING Usually, running a command will wait for a response. However, if you're doing large numbers of requests, it can be more efficient to use what Redis calls pipelining: send multiple commands to Redis without waiting for a response, then wait for the responses that come in. To use pipelining, add a coderef argument as the last argument to a command method call:   $r->set('foo', 'bar', sub {}); Pending responses to pipelined commands are processed in a single batch, as soon as at least one of the following conditions holds: A non-pipelined (synchronous) command is called on the same connection A pub/sub subscription command (one of subscribe, unsubscribe, psubscribe, or punsubscribe) is about to be called on the same connection. One of ""wait_all_responses"" or ""wait_one_response"" methods is called explicitly. The coderef you supply to a pipelined command method is invoked once the response is available. It takes two arguments, $reply and $error. If $error is defined, it contains the text of an error reply sent by the Redis server. Otherwise, $reply is the non-error reply. For almost all commands, that means it's undef, or a defined but non-reference scalar, or an array ref of any of those; but see ""keys"", ""info"", and ""exec"". Note the contrast with synchronous commands, which throw an exception on receipt of an error reply, or return a non-error reply directly. The fact that pipelined commands never throw an exception can be particularly useful for Redis transactions; see ""exec"". ENCODING There is no encoding feature anymore, it has been deprecated and finally removed. This module consider that any data sent to the Redis server is a binary data. And it doesn't do anything when getting data from the Redis server. So, if you are working with character strings, you should pre-encode or post-decode it if needed ! CONSTRUCTOR new     my $r = Redis->new; # $ENV{REDIS_SERVER} or 127.0.0.1:6379      my $r = Redis->new( server => '192.168.0.1:6379', debug => 0 );     my $r = Redis->new( server => '192.168.0.1:6379', encoding => undef );     my $r = Redis->new( sock => '/path/to/sock' );     my $r = Redis->new( reconnect => 60, every => 5000 );     my $r = Redis->new( password => 'boo' );     my $r = Redis->new( on_connect => sub { my ($redis) = @_; ... } );     my $r = Redis->new( name => 'my_connection_name' );     my $r = Redis->new( name => sub { ""cache-for-$$"" });      my $redis = Redis->new(sentinels => [ '127.0.0.1:12345', '127.0.0.1:23456' ],                            service => 'mymaster');      ## Connect via a list of Sentinels to a given service     my $redis = Redis->new(sentinels => [ '127.0.0.1:12345' ], service => 'mymaster');      ## Same, but with connection, read and write timeout on the sentinel hosts     my $redis = Redis->new( sentinels => [ '127.0.0.1:12345' ], service => 'mymaster',                             sentinels_cnx_timeout => 0.1,                             sentinels_read_timeout => 1,                             sentinels_write_timeout => 1,                           ); server The server parameter specifies the Redis server we should connect to, via TCP. Use the 'IP:PORT' format. If no server option is present, we will attempt to use the REDIS_SERVER environment variable. If neither of those options are present, it defaults to '127.0.0.1:6379'. Alternatively you can use the sock parameter to specify the path of the UNIX domain socket where the Redis server is listening. Alternatively you can use the sentinels parameter and the service parameter to specify a list of sentinels to contact and try to get the address of the given service name. sentinels must be an ArrayRef and service an Str. The REDIS_SERVER can be used for UNIX domain sockets too. The following formats are supported: /path/to/sock unix:/path/to/sock 127.0.0.1:11011 tcp:127.0.0.1:11011 reconnect, every The reconnect option enables auto-reconnection mode. If we cannot connect to the Redis server, or if a network write fails, we enter retry mode. We will try a new connection every every microseconds (1 ms by default), up-to reconnect seconds. Be aware that read errors will always thrown an exception, and will not trigger a retry until the new command is sent. If we cannot re-establish a connection after reconnect seconds, an exception will be thrown. conservative_reconnect conservative_reconnect option makes sure that reconnection is only attempted when no pending command is ongoing. For instance, if you're doing $redis-incr('key')>, and if the server properly understood and processed the command, but the network connection is dropped just before the server replies : the command has been processed but the client doesn't know it. In this situation, if reconnect is enabled, the Redis client will reconnect and send the incr command *again*. If it succeeds, at the end the key as been incremented *two* times. To avoid this issue, you can set the conservative_reconnect option to a true value. In this case, the client will reconnect only if no request is pending. Otherwise it will die with the message: reconnect disabled while responses are pending and safe reconnect mode enabled. cnx_timeout The cnx_timeout option enables connection timeout. The Redis client will wait at most that number of seconds (can be fractional) before giving up connecting to a server. sentinels_cnx_timeout The sentinels_cnx_timeout option enables sentinel connection timeout. When using the sentinels feature, Redis client will wait at most that number of seconds (can be fractional) before giving up connecting to a sentinel. Default: 0.1 read_timeout The read_timeout option enables read timeout. The Redis client will wait at most that number of seconds (can be fractional) before giving up when reading from the server. sentinels_read_timeout The sentinels_read_timeout option enables sentinel read timeout. When using the sentinels feature, the Redis client will wait at most that number of seconds (can be fractional) before giving up when reading from a sentinel server. Default: 1 write_timeout The write_timeout option enables write timeout. The Redis client will wait at most that number of seconds (can be fractional) before giving up when reading from the server. sentinels_write_timeout The sentinels_write_timeout option enables sentinel write timeout. When using the sentinels feature, the Redis client will wait at most that number of seconds (can be fractional) before giving up when reading from a sentinel server. Default: 1 password If your Redis server requires authentication, you can use the password attribute. After each established connection (at the start or when reconnecting), the Redis AUTH command will be send to the server. If the password is wrong, an exception will be thrown and reconnect will be disabled. on_connect You can also provide a code reference that will be immediately after each successful connection. The on_connect attribute is used to provide the code reference, and it will be called with the first parameter being the Redis object. no_auto_connect_on_new You can also provide no_auto_connect_on_new in which case new won't call $obj->connect for you implicitly, you'll have to do that yourself. This is useful for figuring out how long connection setup takes so you can configure the cnx_timeout appropriately. no_sentinels_list_update You can also provide no_sentinels_list_update. By default (that is, without this option), when successfully contacting a sentinel server, the Redis client will ask it for the list of sentinels known for the given service, and merge it with its list of sentinels (in the sentinels attribute). You can disable this behavior by setting no_sentinels_list_update to a true value. name You can also set a name for each connection. This can be very useful for debugging purposes, using the CLIENT LIST command. To set a connection name, use the name parameter. You can use both a scalar value or a CodeRef. If the latter, it will be called after each connection, with the Redis object, and it should return the connection name to use. If it returns a undefined value, Redis will not set the connection name. Please note that there are restrictions on the name you can set, the most important of which is, no spaces. See the CLIENT SETNAME documentation for all the juicy details. This feature is safe to use with all versions of Redis servers. If CLIENT SETNAME support is not available (Redis servers 2.6.9 and above only), the name parameter is ignored. debug The debug parameter enables debug information to STDERR, including all interactions with the server. You can also enable debug with the REDIS_DEBUG environment variable. CONNECTION HANDLING connect   $r->connect; Connects to the Redis server. This is done by default when the obect is constructed using new(), unless no_auto_connect_on_new has been set. See this option in the new() constructor. quit   $r->quit; Closes the connection to the server. The quit method does not support pipelined operation. ping   $r->ping || die ""no server?""; The ping method does not support pipelined operation. PIPELINE MANAGEMENT wait_all_responses Waits until all pending pipelined responses have been received, and invokes the pipeline callback for each one. See ""PIPELINING"". wait_one_response Waits until the first pending pipelined response has been received, and invokes its callback. See ""PIPELINING"". PUBLISH/SUBSCRIBE COMMANDS When one of ""subscribe"" or ""psubscribe"" is used, the Redis object will enter PubSub mode. When in PubSub mode only commands in this section, plus ""quit"", will be accepted. If you plan on using PubSub and other Redis functions, you should use two Redis objects, one dedicated to PubSub and the other for regular commands. All Pub/Sub commands receive a callback as the last parameter. This callback receives three arguments: The published message. The topic over which the message was sent. The subscribed topic that matched the topic for the message. With ""subscribe"" these last two are the same, always. But with ""psubscribe"", this parameter tells you the pattern that matched. See the Pub-Sub notes for more information about the messages you will receive on your callbacks after each ""subscribe"", ""unsubscribe"", ""psubscribe"" and ""punsubscribe"". publish   $r->publish($topic, $message); Publishes the $message to the $topic. subscribe   $r->subscribe(       @topics_to_subscribe_to,       my $savecallback = sub {         my ($message, $topic, $subscribed_topic) = @_;         ...       },   ); Subscribe one or more topics. Messages published into one of them will be received by Redis, and the specified callback will be executed. unsubscribe   $r->unsubscribe(@topic_list, $savecallback); Stops receiving messages via $savecallback for all the topics in @topic_list. WARNING: it is important that you give the same calleback that you used for subscribtion. The value of the CodeRef must be the same, as this is how internally the code identifies it. psubscribe   my @topic_matches = ('prefix1.*', 'prefix2.*');   $r->psubscribe(@topic_matches, my $savecallback = sub { my ($m, $t, $s) = @_; ... }); Subscribes a pattern of topics. All messages to topics that match the pattern will be delivered to the callback. punsubscribe   my @topic_matches = ('prefix1.*', 'prefix2.*');   $r->punsubscribe(@topic_matches, $savecallback); Stops receiving messages via $savecallback for all the topics pattern matches in @topic_list. WARNING: it is important that you give the same calleback that you used for subscribtion. The value of the CodeRef must be the same, as this is how internally the code identifies it. is_subscriber   if ($r->is_subscriber) { say ""We are in Pub/Sub mode!"" } Returns true if we are in Pub/Sub mode. wait_for_messages   my $keep_going = 1; ## Set to false somewhere to leave the loop   my $timeout = 5;   $r->wait_for_messages($timeout) while $keep_going; Blocks, waits for incoming messages and delivers them to the appropriate callbacks. Requires a single parameter, the number of seconds to wait for messages. Use 0 to wait for ever. If a positive non-zero value is used, it will return after that amount of seconds without a single notification. Please note that the timeout is not a commitment to return control to the caller at most each timeout seconds, but more a idle timeout, were control will return to the caller if Redis is idle (as in no messages were received during the timeout period) for more than timeout seconds. The ""wait_for_messages"" call returns the number of messages processed during the run. IMPORTANT NOTES ON METHODS methods that return multiple values When a method returns more than one value, it checks the context and returns either a list of values or an ArrayRef. transaction-handling methods Warning: the behaviour of the TRANSACTIONS commands when combined with pipelining is still under discussion, and you should NOT use them at the same time just now. You can follow the discussion to see the open issues with this. exec   my @individual_replies = $r->exec; exec has special behaviour when run in a pipeline: the $reply argument to the pipeline callback is an array ref whose elements are themselves [$reply, $error] pairs. This means that you can accurately detect errors yielded by any command in the transaction, and without any exceptions being thrown. keys   my @keys = $r->keys( '*glob_pattern*' );   my $keys = $r->keys( '*glob_pattern*' ); # count of matching keys Note that synchronous keys calls in a scalar context return the number of matching keys (not an array ref of matching keys as you might expect). This does not apply in pipelined mode: assuming the server returns a list of keys, as expected, it is always passed to the pipeline callback as an array ref. hashes Hashes in Redis cannot be nested as in perl, if you want to store a nested hash, you need to serialize the hash first. If you want to have a named hash, you can use Redis-hashes. You will find an example in the tests of this module t/01-basic.t eval Note that this commands sends the Lua script every time you call it. See ""evalsha"" and ""script_load"" for an alternative. info   my $info_hash = $r->info; The info method is unique in that it decodes the server's response into a hashref, if possible. This decoding happens in both synchronous and pipelined modes. KEYS del   $r->del(key [key ...]) Delete a key (see http://redis.io/commands/del) dump   $r->dump(key) Return a serialized version of the value stored at the specified key. (see http://redis.io/commands/dump) exists   $r->exists(key) Determine if a key exists (see http://redis.io/commands/exists) expire   $r->expire(key, seconds) Set a key's time to live in seconds (see http://redis.io/commands/expire) expireat   $r->expireat(key, timestamp) Set the expiration for a key as a UNIX timestamp (see http://redis.io/commands/expireat) keys   $r->keys(pattern) Find all keys matching the given pattern (see http://redis.io/commands/keys) migrate   $r->migrate(host, port, key, destination-db, timeout, [COPY], [REPLACE]) Atomically transfer a key from a Redis instance to another one. (see http://redis.io/commands/migrate) move   $r->move(key, db) Move a key to another database (see http://redis.io/commands/move) object   $r->object(subcommand, [arguments [arguments ...]]) Inspect the internals of Redis objects (see http://redis.io/commands/object) persist   $r->persist(key) Remove the expiration from a key (see http://redis.io/commands/persist) pexpire   $r->pexpire(key, milliseconds) Set a key's time to live in milliseconds (see http://redis.io/commands/pexpire) pexpireat   $r->pexpireat(key, milliseconds-timestamp) Set the expiration for a key as a UNIX timestamp specified in milliseconds (see http://redis.io/commands/pexpireat) pttl   $r->pttl(key) Get the time to live for a key in milliseconds (see http://redis.io/commands/pttl) randomkey   $r->randomkey() Return a random key from the keyspace (see http://redis.io/commands/randomkey) rename   $r->rename(key, newkey) Rename a key (see http://redis.io/commands/rename) renamenx   $r->renamenx(key, newkey) Rename a key, only if the new key does not exist (see http://redis.io/commands/renamenx) restore   $r->restore(key, ttl, serialized-value) Create a key using the provided serialized value, previously obtained using DUMP. (see http://redis.io/commands/restore) scan   $r->scan(cursor, [MATCH pattern], [COUNT count]) Incrementally iterate the keys space (see http://redis.io/commands/scan) sort   $r->sort(key, [BY pattern], [LIMIT offset count], [GET pattern [GET pattern ...]], [ASC|DESC], [ALPHA], [STORE destination]) Sort the elements in a list, set or sorted set (see http://redis.io/commands/sort) ttl   $r->ttl(key) Get the time to live for a key (see http://redis.io/commands/ttl) type   $r->type(key) Determine the type stored at key (see http://redis.io/commands/type) STRINGS append   $r->append(key, value) Append a value to a key (see http://redis.io/commands/append) bitcount   $r->bitcount(key, [start end]) Count set bits in a string (see http://redis.io/commands/bitcount) bitop   $r->bitop(operation, destkey, key [key ...]) Perform bitwise operations between strings (see http://redis.io/commands/bitop) bitpos   $r->bitpos(key, bit, [start], [end]) Find first bit set or clear in a string (see http://redis.io/commands/bitpos) blpop   $r->blpop(key [key ...], timeout) Remove and get the first element in a list, or block until one is available (see http://redis.io/commands/blpop) brpop   $r->brpop(key [key ...], timeout) Remove and get the last element in a list, or block until one is available (see http://redis.io/commands/brpop) brpoplpush   $r->brpoplpush(source, destination, timeout) Pop a value from a list, push it to another list and return it; or block until one is available (see http://redis.io/commands/brpoplpush) decr   $r->decr(key) Decrement the integer value of a key by one (see http://redis.io/commands/decr) decrby   $r->decrby(key, decrement) Decrement the integer value of a key by the given number (see http://redis.io/commands/decrby) get   $r->get(key) Get the value of a key (see http://redis.io/commands/get) getbit   $r->getbit(key, offset) Returns the bit value at offset in the string value stored at key (see http://redis.io/commands/getbit) getrange   $r->getrange(key, start, end) Get a substring of the string stored at a key (see http://redis.io/commands/getrange) getset   $r->getset(key, value) Set the string value of a key and return its old value (see http://redis.io/commands/getset) incr   $r->incr(key) Increment the integer value of a key by one (see http://redis.io/commands/incr) incrby   $r->incrby(key, increment) Increment the integer value of a key by the given amount (see http://redis.io/commands/incrby) incrbyfloat   $r->incrbyfloat(key, increment) Increment the float value of a key by the given amount (see http://redis.io/commands/incrbyfloat) mget   $r->mget(key [key ...]) Get the values of all the given keys (see http://redis.io/commands/mget) mset   $r->mset(key value [key value ...]) Set multiple keys to multiple values (see http://redis.io/commands/mset) msetnx   $r->msetnx(key value [key value ...]) Set multiple keys to multiple values, only if none of the keys exist (see http://redis.io/commands/msetnx) psetex   $r->psetex(key, milliseconds, value) Set the value and expiration in milliseconds of a key (see http://redis.io/commands/psetex) set   $r->set(key, value, ['EX',  seconds], ['PX', milliseconds], ['NX'|'XX']) Set the string value of a key (see http://redis.io/commands/set). Example:   $r->set('key', 'test', 'EX', 60, 'NX') setbit   $r->setbit(key, offset, value) Sets or clears the bit at offset in the string value stored at key (see http://redis.io/commands/setbit) setex   $r->setex(key, seconds, value) Set the value and expiration of a key (see http://redis.io/commands/setex) setnx   $r->setnx(key, value) Set the value of a key, only if the key does not exist (see http://redis.io/commands/setnx) setrange   $r->setrange(key, offset, value) Overwrite part of a string at key starting at the specified offset (see http://redis.io/commands/setrange) strlen   $r->strlen(key) Get the length of the value stored in a key (see http://redis.io/commands/strlen) HASHES hdel   $r->hdel(key, field [field ...]) Delete one or more hash fields (see http://redis.io/commands/hdel) hexists   $r->hexists(key, field) Determine if a hash field exists (see http://redis.io/commands/hexists) hget   $r->hget(key, field) Get the value of a hash field (see http://redis.io/commands/hget) hgetall   $r->hgetall(key) Get all the fields and values in a hash (see http://redis.io/commands/hgetall) hincrby   $r->hincrby(key, field, increment) Increment the integer value of a hash field by the given number (see http://redis.io/commands/hincrby) hincrbyfloat   $r->hincrbyfloat(key, field, increment) Increment the float value of a hash field by the given amount (see http://redis.io/commands/hincrbyfloat) hkeys   $r->hkeys(key) Get all the fields in a hash (see http://redis.io/commands/hkeys) hlen   $r->hlen(key) Get the number of fields in a hash (see http://redis.io/commands/hlen) hmget   $r->hmget(key, field [field ...]) Get the values of all the given hash fields (see http://redis.io/commands/hmget) hmset   $r->hmset(key, field value [field value ...]) Set multiple hash fields to multiple values (see http://redis.io/commands/hmset) hscan   $r->hscan(key, cursor, [MATCH pattern], [COUNT count]) Incrementally iterate hash fields and associated values (see http://redis.io/commands/hscan) hset   $r->hset(key, field, value) Set the string value of a hash field (see http://redis.io/commands/hset) hsetnx   $r->hsetnx(key, field, value) Set the value of a hash field, only if the field does not exist (see http://redis.io/commands/hsetnx) hvals   $r->hvals(key) Get all the values in a hash (see http://redis.io/commands/hvals) SETS sadd   $r->sadd(key, member [member ...]) Add one or more members to a set (see http://redis.io/commands/sadd) scard   $r->scard(key) Get the number of members in a set (see http://redis.io/commands/scard) sdiff   $r->sdiff(key [key ...]) Subtract multiple sets (see http://redis.io/commands/sdiff) sdiffstore   $r->sdiffstore(destination, key [key ...]) Subtract multiple sets and store the resulting set in a key (see http://redis.io/commands/sdiffstore) sinter   $r->sinter(key [key ...]) Intersect multiple sets (see http://redis.io/commands/sinter) sinterstore   $r->sinterstore(destination, key [key ...]) Intersect multiple sets and store the resulting set in a key (see http://redis.io/commands/sinterstore) sismember   $r->sismember(key, member) Determine if a given value is a member of a set (see http://redis.io/commands/sismember) smembers   $r->smembers(key) Get all the members in a set (see http://redis.io/commands/smembers) smove   $r->smove(source, destination, member) Move a member from one set to another (see http://redis.io/commands/smove) spop   $r->spop(key) Remove and return a random member from a set (see http://redis.io/commands/spop) srandmember   $r->srandmember(key, [count]) Get one or multiple random members from a set (see http://redis.io/commands/srandmember) srem   $r->srem(key, member [member ...]) Remove one or more members from a set (see http://redis.io/commands/srem) sscan   $r->sscan(key, cursor, [MATCH pattern], [COUNT count]) Incrementally iterate Set elements (see http://redis.io/commands/sscan) sunion   $r->sunion(key [key ...]) Add multiple sets (see http://redis.io/commands/sunion) sunionstore   $r->sunionstore(destination, key [key ...]) Add multiple sets and store the resulting set in a key (see http://redis.io/commands/sunionstore) SORTED SETS zadd   $r->zadd(key, score member [score member ...]) Add one or more members to a sorted set, or update its score if it already exists (see http://redis.io/commands/zadd) zcard   $r->zcard(key) Get the number of members in a sorted set (see http://redis.io/commands/zcard) zcount   $r->zcount(key, min, max) Count the members in a sorted set with scores within the given values (see http://redis.io/commands/zcount) zincrby   $r->zincrby(key, increment, member) Increment the score of a member in a sorted set (see http://redis.io/commands/zincrby) zinterstore   $r->zinterstore(destination, numkeys, key [key ...], [WEIGHTS weight [weight ...]], [AGGREGATE SUM|MIN|MAX]) Intersect multiple sorted sets and store the resulting sorted set in a new key (see http://redis.io/commands/zinterstore) zlexcount   $r->zlexcount(key, min, max) Count the number of members in a sorted set between a given lexicographical range (see http://redis.io/commands/zlexcount) zrange   $r->zrange(key, start, stop, [WITHSCORES]) Return a range of members in a sorted set, by index (see http://redis.io/commands/zrange) zrangebylex   $r->zrangebylex(key, min, max, [LIMIT offset count]) Return a range of members in a sorted set, by lexicographical range (see http://redis.io/commands/zrangebylex) zrangebyscore   $r->zrangebyscore(key, min, max, [WITHSCORES], [LIMIT offset count]) Return a range of members in a sorted set, by score (see http://redis.io/commands/zrangebyscore) zrank   $r->zrank(key, member) Determine the index of a member in a sorted set (see http://redis.io/commands/zrank) zrem   $r->zrem(key, member [member ...]) Remove one or more members from a sorted set (see http://redis.io/commands/zrem) zremrangebylex   $r->zremrangebylex(key, min, max) Remove all members in a sorted set between the given lexicographical range (see http://redis.io/commands/zremrangebylex) zremrangebyrank   $r->zremrangebyrank(key, start, stop) Remove all members in a sorted set within the given indexes (see http://redis.io/commands/zremrangebyrank) zremrangebyscore   $r->zremrangebyscore(key, min, max) Remove all members in a sorted set within the given scores (see http://redis.io/commands/zremrangebyscore) zrevrange   $r->zrevrange(key, start, stop, [WITHSCORES]) Return a range of members in a sorted set, by index, with scores ordered from high to low (see http://redis.io/commands/zrevrange) zrevrangebylex   $r->zrevrangebylex(key, max, min, [LIMIT offset count]) Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings. (see http://redis.io/commands/zrevrangebylex) zrevrangebyscore   $r->zrevrangebyscore(key, max, min, [WITHSCORES], [LIMIT offset count]) Return a range of members in a sorted set, by score, with scores ordered from high to low (see http://redis.io/commands/zrevrangebyscore) zrevrank   $r->zrevrank(key, member) Determine the index of a member in a sorted set, with scores ordered from high to low (see http://redis.io/commands/zrevrank) zscan   $r->zscan(key, cursor, [MATCH pattern], [COUNT count]) Incrementally iterate sorted sets elements and associated scores (see http://redis.io/commands/zscan) zscore   $r->zscore(key, member) Get the score associated with the given member in a sorted set (see http://redis.io/commands/zscore) zunionstore   $r->zunionstore(destination, numkeys, key [key ...], [WEIGHTS weight [weight ...]], [AGGREGATE SUM|MIN|MAX]) Add multiple sorted sets and store the resulting sorted set in a new key (see http://redis.io/commands/zunionstore) HYPERLOGLOG pfadd   $r->pfadd(key, element [element ...]) Adds the specified elements to the specified HyperLogLog. (see http://redis.io/commands/pfadd) pfcount   $r->pfcount(key [key ...]) Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s). (see http://redis.io/commands/pfcount) pfmerge   $r->pfmerge(destkey, sourcekey [sourcekey ...]) Merge N different HyperLogLogs into a single one. (see http://redis.io/commands/pfmerge) PUB/SUB pubsub   $r->pubsub(subcommand, [argument [argument ...]]) Inspect the state of the Pub/Sub subsystem (see http://redis.io/commands/pubsub) TRANSACTIONS discard   $r->discard() Discard all commands issued after MULTI (see http://redis.io/commands/discard) exec   $r->exec() Execute all commands issued after MULTI (see http://redis.io/commands/exec) multi   $r->multi() Mark the start of a transaction block (see http://redis.io/commands/multi) unwatch   $r->unwatch() Forget about all watched keys (see http://redis.io/commands/unwatch) watch   $r->watch(key [key ...]) Watch the given keys to determine execution of the MULTI/EXEC block (see http://redis.io/commands/watch) SCRIPTING eval   $r->eval(script, numkeys, key [key ...], arg [arg ...]) Execute a Lua script server side (see http://redis.io/commands/eval) evalsha   $r->evalsha(sha1, numkeys, key [key ...], arg [arg ...]) Execute a Lua script server side (see http://redis.io/commands/evalsha) script_exists   $r->script_exists(script [script ...]) Check existence of scripts in the script cache. (see http://redis.io/commands/script-exists) script_flush   $r->script_flush() Remove all the scripts from the script cache. (see http://redis.io/commands/script-flush) script_kill   $r->script_kill() Kill the script currently in execution. (see http://redis.io/commands/script-kill) script_load   $r->script_load(script) Load the specified Lua script into the script cache. (see http://redis.io/commands/script-load) CONNECTION auth   $r->auth(password) Authenticate to the server (see http://redis.io/commands/auth) echo   $r->echo(message) Echo the given string (see http://redis.io/commands/echo) ping   $r->ping() Ping the server (see http://redis.io/commands/ping) quit   $r->quit() Close the connection (see http://redis.io/commands/quit) select   $r->select(index) Change the selected database for the current connection (see http://redis.io/commands/select) SERVER bgrewriteaof   $r->bgrewriteaof() Asynchronously rewrite the append-only file (see http://redis.io/commands/bgrewriteaof) bgsave   $r->bgsave() Asynchronously save the dataset to disk (see http://redis.io/commands/bgsave) client_getname   $r->client_getname() Get the current connection name (see http://redis.io/commands/client-getname) client_kill   $r->client_kill([ip:port], [ID client-id], [TYPE normal|slave|pubsub], [ADDR ip:port], [SKIPME yes/no]) Kill the connection of a client (see http://redis.io/commands/client-kill) client_list   $r->client_list() Get the list of client connections (see http://redis.io/commands/client-list) client_pause   $r->client_pause(timeout) Stop processing commands from clients for some time (see http://redis.io/commands/client-pause) client_setname   $r->client_setname(connection-name) Set the current connection name (see http://redis.io/commands/client-setname) cluster_slots   $r->cluster_slots() Get array of Cluster slot to node mappings (see http://redis.io/commands/cluster-slots) command   $r->command() Get array of Redis command details (see http://redis.io/commands/command) command_count   $r->command_count() Get total number of Redis commands (see http://redis.io/commands/command-count) command_getkeys   $r->command_getkeys() Extract keys given a full Redis command (see http://redis.io/commands/command-getkeys) command_info   $r->command_info(command-name [command-name ...]) Get array of specific Redis command details (see http://redis.io/commands/command-info) config_get   $r->config_get(parameter) Get the value of a configuration parameter (see http://redis.io/commands/config-get) config_resetstat   $r->config_resetstat() Reset the stats returned by INFO (see http://redis.io/commands/config-resetstat) config_rewrite   $r->config_rewrite() Rewrite the configuration file with the in memory configuration (see http://redis.io/commands/config-rewrite) config_set   $r->config_set(parameter, value) Set a configuration parameter to the given value (see http://redis.io/commands/config-set) dbsize   $r->dbsize() Return the number of keys in the selected database (see http://redis.io/commands/dbsize) debug_object   $r->debug_object(key) Get debugging information about a key (see http://redis.io/commands/debug-object) debug_segfault   $r->debug_segfault() Make the server crash (see http://redis.io/commands/debug-segfault) flushall   $r->flushall() Remove all keys from all databases (see http://redis.io/commands/flushall) flushdb   $r->flushdb() Remove all keys from the current database (see http://redis.io/commands/flushdb) info   $r->info([section]) Get information and statistics about the server (see http://redis.io/commands/info) lastsave   $r->lastsave() Get the UNIX time stamp of the last successful save to disk (see http://redis.io/commands/lastsave) lindex   $r->lindex(key, index) Get an element from a list by its index (see http://redis.io/commands/lindex) linsert   $r->linsert(key, BEFORE|AFTER, pivot, value) Insert an element before or after another element in a list (see http://redis.io/commands/linsert) llen   $r->llen(key) Get the length of a list (see http://redis.io/commands/llen) lpop   $r->lpop(key) Remove and get the first element in a list (see http://redis.io/commands/lpop) lpush   $r->lpush(key, value [value ...]) Prepend one or multiple values to a list (see http://redis.io/commands/lpush) lpushx   $r->lpushx(key, value) Prepend a value to a list, only if the list exists (see http://redis.io/commands/lpushx) lrange   $r->lrange(key, start, stop) Get a range of elements from a list (see http://redis.io/commands/lrange) lrem   $r->lrem(key, count, value) Remove elements from a list (see http://redis.io/commands/lrem) lset   $r->lset(key, index, value) Set the value of an element in a list by its index (see http://redis.io/commands/lset) ltrim   $r->ltrim(key, start, stop) Trim a list to the specified range (see http://redis.io/commands/ltrim) monitor   $r->monitor() Listen for all requests received by the server in real time (see http://redis.io/commands/monitor) role   $r->role() Return the role of the instance in the context of replication (see http://redis.io/commands/role) rpop   $r->rpop(key) Remove and get the last element in a list (see http://redis.io/commands/rpop) rpoplpush   $r->rpoplpush(source, destination) Remove the last element in a list, append it to another list and return it (see http://redis.io/commands/rpoplpush) rpush   $r->rpush(key, value [value ...]) Append one or multiple values to a list (see http://redis.io/commands/rpush) rpushx   $r->rpushx(key, value) Append a value to a list, only if the list exists (see http://redis.io/commands/rpushx) save   $r->save() Synchronously save the dataset to disk (see http://redis.io/commands/save) shutdown   $r->shutdown([NOSAVE], [SAVE]) Synchronously save the dataset to disk and then shut down the server (see http://redis.io/commands/shutdown) slaveof   $r->slaveof(host, port) Make the server a slave of another instance, or promote it as master (see http://redis.io/commands/slaveof) slowlog   $r->slowlog(subcommand, [argument]) Manages the Redis slow queries log (see http://redis.io/commands/slowlog) sync   $r->sync() Internal command used for replication (see http://redis.io/commands/sync) time   $r->time() Return the current server time (see http://redis.io/commands/time) ACKNOWLEDGEMENTS The following persons contributed to this project (random order): Aaron Crane (pipelining and AUTOLOAD caching support) Dirk Vleugels Flavio Poletti Jeremy Zawodny sunnavy at bestpractical.com Thiago Berlitz Rondon Ulrich Habel Ivan Kruglov Steffen Mueller <smueller@cpan.org> AUTHORS Pedro Melo <melo@cpan.org> Damien Krotkine <dams@cpan.org> COPYRIGHT AND LICENSE This software is Copyright (c) 2015 by Pedro Melo, Damien Krotkine. This is free software, licensed under:   The Artistic License 2.0 (GPL Compatible) × Module Install Instructions To install Redis, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Redis CPAN shell                      perl -MCPAN -e shell                     install Redis For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"NoSQL Databases"	"Redis::Fast"	"https://metacpan.org/pod/Redis::Fast"	"Perl wrapper around hiredis driver"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Redis::Fast - Perl binding for Redis database - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Shogo Ichinose  /  0.18 (SHOGO on 2016-01-26) 0.17 (SHOGO on 2016-01-23) 0.16 (SHOGO on 2015-03-12) 0.15 (SHOGO on 2015-03-10) 0.14 (SHOGO on 2014-12-07) 0.13 (SHOGO on 2014-10-16) 0.12 (SHOGO on 2014-09-08) 0.11 (SHOGO on 2014-07-16) 0.10 (SHOGO on 2014-07-16) 0.09 (SHOGO on 2014-07-08) 0.08 (SHOGO on 2014-05-31) 0.07 (SHOGO on 2014-05-17) 0.06 (SHOGO on 2014-02-01) 0.05 (SHOGO on 2013-12-20) 0.04 (SHOGO on 2013-12-10) 0.03 (SHOGO on 2013-10-16) 0.02 (SHOGO on 2013-10-13) 0.01 (SHOGO on 2013-10-10) Redis-Fast-0.18 7 ++ 7 ++  / Redis::Fast 26 Jan 2016 13:13:22 GMT Module version: 0.18 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues (5) Testers (349 / 1 / 2) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (99.99Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.17 (SHOGO on 2016-01-23) 0.16 (SHOGO on 2015-03-12) 0.15 (SHOGO on 2015-03-10) 0.14 (SHOGO on 2014-12-07) 0.13 (SHOGO on 2014-10-16) 0.12 (SHOGO on 2014-09-08) 0.11 (SHOGO on 2014-07-16) 0.10 (SHOGO on 2014-07-16) 0.09 (SHOGO on 2014-07-08) 0.08 (SHOGO on 2014-05-31) 0.07 (SHOGO on 2014-05-17) 0.06 (SHOGO on 2014-02-01) 0.05 (SHOGO on 2013-12-20) 0.04 (SHOGO on 2013-12-10) 0.03 (SHOGO on 2013-10-16) 0.02 (SHOGO on 2013-10-13) 0.01 (SHOGO on 2013-10-10) Diff with version 0.17 (SHOGO on 2016-01-23) 0.16 (SHOGO on 2015-03-12) 0.15 (SHOGO on 2015-03-10) 0.14 (SHOGO on 2014-12-07) 0.13 (SHOGO on 2014-10-16) 0.12 (SHOGO on 2014-09-08) 0.11 (SHOGO on 2014-07-16) 0.10 (SHOGO on 2014-07-16) 0.09 (SHOGO on 2014-07-08) 0.08 (SHOGO on 2014-05-31) 0.07 (SHOGO on 2014-05-17) 0.06 (SHOGO on 2014-02-01) 0.05 (SHOGO on 2013-12-20) 0.04 (SHOGO on 2013-12-10) 0.03 (SHOGO on 2013-10-16) 0.02 (SHOGO on 2013-10-13) 0.01 (SHOGO on 2013-10-10) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 2 PAUSE users 5 non-PAUSE users. SHOGO Shogo Ichinose and 38 contributors show them Ichinose Shogo sunnavy U-LIFEBOOK\Administrator Dobrica Pavlinusic Jeff Lavallee Flavio Poletti Ulrich Habel Thiago Berlitz Rondon Aaron Crane Michael Klishin Gregor Herrmann Volker Kroll Pedro Melo perlpong zhihong zhang João Bolila Damien Krotkine hisaichi5518 Masayuki Matsuki David Steinbrunner Ivan Kruglov Michiel Beijen Andreas Koenig Steffen Mueller Rafael Garcia-Suarez Ævar Arnfjörð Bjarmason Celogeek xtab bj5004 shogo82148 Victor dams Erik Carlsson Alex Kapranoff nise_nabe Vincent Jose Luis Perez Diez Syohei YOSHIDA Dependencies Time::HiRes Try::Tiny CPAN Testers List Reverse dependencies Dependency graph × Redis-Fast-0.18 NAME SYNOPSIS DESCRIPTION PERFORMANCE IN SYNCHRONIZE MODE Redis.pm Redis::Fast PERFORMANCE IN PIPELINE MODE AUTHOR SEE ALSO LICENSE NAME Redis::Fast - Perl binding for Redis database SYNOPSIS     ## Defaults to $ENV{REDIS_SERVER} or 127.0.0.1:6379     my $redis = Redis::Fast->new;      my $redis = Redis::Fast->new(server => 'redis.example.com:8080');      ## Set the connection name (requires Redis 2.6.9)     my $redis = Redis::Fast->new(       server => 'redis.example.com:8080',       name => 'my_connection_name',     );     my $generation = 0;     my $redis = Redis::Fast->new(       server => 'redis.example.com:8080',       name => sub { ""cache-$$-"".++$generation },     );      ## Use UNIX domain socket     my $redis = Redis::Fast->new(sock => '/path/to/socket');      ## Enable auto-reconnect     ## Try to reconnect every 500ms up to 60 seconds until success     ## Die if you can't after that     my $redis = Redis::Fast->new(reconnect => 60, every => 500_000);      ## Try each 100ms upto 2 seconds (every is in microseconds)     my $redis = Redis::Fast->new(reconnect => 2, every => 100_000);      ## Disable the automatic utf8 encoding => much more performance     ## !!!! This will be the default after 2.000, see ENCODING below     my $redis = Redis::Fast->new(encoding => undef);      ## Use all the regular Redis commands, they all accept a list of     ## arguments     ## See http://redis.io/commands for full list     $redis->get('key');     $redis->set('key' => 'value');     $redis->sort('list', 'DESC');     $redis->sort(qw{list LIMIT 0 5 ALPHA DESC});      ## Add a coderef argument to run a command in the background     $redis->sort(qw{list LIMIT 0 5 ALPHA DESC}, sub {       my ($reply, $error) = @_;       die ""Oops, got an error: $error\n"" if defined $error;       print ""$_\n"" for @$reply;     });     long_computation();     $redis->wait_all_responses;     ## or     $redis->wait_one_response();      ## Or run a large batch of commands in a pipeline     my %hash = _get_large_batch_of_commands();     $redis->hset('h', $_, $hash{$_}, sub {}) for keys %hash;     $redis->wait_all_responses;      ## Publish/Subscribe     $redis->subscribe(       'topic_1',       'topic_2',       sub {         my ($message, $topic, $subscribed_topic) = @_            ## $subscribed_topic can be different from topic if           ## you use psubscribe() with wildcards       }     );     $redis->psubscribe('nasdaq.*', sub {...});      ## Blocks and waits for messages, calls subscribe() callbacks     ##  ... forever     my $timeout = 10;     $redis->wait_for_messages($timeout) while 1;      ##  ... until some condition     my $keep_going = 1; ## other code will set to false to quit     $redis->wait_for_messages($timeout) while $keep_going;      $redis->publish('topic_1', 'message'); DESCRIPTION Redis::Fast is a wrapper around Salvatore Sanfilippo's hiredis C client. It is compatible with Redis.pm. This version supports protocol 2.x (multi-bulk) or later of Redis available at https://github.com/antirez/redis/. PERFORMANCE IN SYNCHRONIZE MODE Redis.pm     Benchmark: running 00_ping, 10_set, 11_set_r, 20_get, 21_get_r, 30_incr, 30_incr_r, 40_lpush, 50_lpop, 90_h_get, 90_h_set for at least 5 CPU seconds...        00_ping:  8 wallclock secs ( 0.69 usr +  4.77 sys =  5.46 CPU) @ 5538.64/s (n=30241)         10_set:  8 wallclock secs ( 1.07 usr +  4.01 sys =  5.08 CPU) @ 5794.09/s (n=29434)       11_set_r:  7 wallclock secs ( 0.42 usr +  4.84 sys =  5.26 CPU) @ 5051.33/s (n=26570)         20_get:  8 wallclock secs ( 0.69 usr +  4.82 sys =  5.51 CPU) @ 5080.40/s (n=27993)       21_get_r:  7 wallclock secs ( 2.21 usr +  3.09 sys =  5.30 CPU) @ 5389.06/s (n=28562)        30_incr:  7 wallclock secs ( 0.69 usr +  4.73 sys =  5.42 CPU) @ 5671.77/s (n=30741)      30_incr_r:  7 wallclock secs ( 0.85 usr +  4.31 sys =  5.16 CPU) @ 5824.42/s (n=30054)       40_lpush:  8 wallclock secs ( 0.60 usr +  4.77 sys =  5.37 CPU) @ 5832.59/s (n=31321)        50_lpop:  7 wallclock secs ( 1.24 usr +  4.17 sys =  5.41 CPU) @ 5112.75/s (n=27660)       90_h_get:  7 wallclock secs ( 0.63 usr +  4.65 sys =  5.28 CPU) @ 5716.29/s (n=30182)       90_h_set:  7 wallclock secs ( 0.65 usr +  4.74 sys =  5.39 CPU) @ 5593.14/s (n=30147) Redis::Fast Redis::Fast is 50% faster than Redis.pm.     Benchmark: running 00_ping, 10_set, 11_set_r, 20_get, 21_get_r, 30_incr, 30_incr_r, 40_lpush, 50_lpop, 90_h_get, 90_h_set for at least 5 CPU seconds...        00_ping:  9 wallclock secs ( 0.18 usr +  4.84 sys =  5.02 CPU) @ 7939.24/s (n=39855)         10_set: 10 wallclock secs ( 0.31 usr +  5.40 sys =  5.71 CPU) @ 7454.64/s (n=42566)       11_set_r:  9 wallclock secs ( 0.31 usr +  4.87 sys =  5.18 CPU) @ 7993.05/s (n=41404)         20_get: 10 wallclock secs ( 0.27 usr +  4.84 sys =  5.11 CPU) @ 8350.68/s (n=42672)       21_get_r: 10 wallclock secs ( 0.32 usr +  5.17 sys =  5.49 CPU) @ 8238.62/s (n=45230)        30_incr:  9 wallclock secs ( 0.23 usr +  5.27 sys =  5.50 CPU) @ 8221.82/s (n=45220)      30_incr_r:  8 wallclock secs ( 0.28 usr +  4.91 sys =  5.19 CPU) @ 8092.29/s (n=41999)       40_lpush:  9 wallclock secs ( 0.18 usr +  5.06 sys =  5.24 CPU) @ 8312.02/s (n=43555)        50_lpop:  9 wallclock secs ( 0.20 usr +  4.84 sys =  5.04 CPU) @ 8010.12/s (n=40371)       90_h_get:  9 wallclock secs ( 0.19 usr +  5.51 sys =  5.70 CPU) @ 7467.72/s (n=42566)       90_h_set:  8 wallclock secs ( 0.28 usr +  4.83 sys =  5.11 CPU) @ 7724.07/s (n=39470)o PERFORMANCE IN PIPELINE MODE     #!/usr/bin/perl     use warnings;     use strict;     use Time::HiRes qw/time/;     use Redis;          my $count = 100000;     {         my $r = Redis->new;         my $start = time;         for(1..$count) {             $r->set('hoge', 'fuga', sub{});         }         $r->wait_all_responses;         printf ""Redis.pm:\n%.2f/s\n"", $count / (time - $start);     }          {         my $r = Redis::Fast->new;         my $start = time;         for(1..$count) {             $r->set('hoge', 'fuga', sub{});         }         $r->wait_all_responses;         printf ""Redis::Fast:\n%.2f/s\n"", $count / (time - $start);     } Redis::Fast is 4x faster than Redis.pm in pipeline mode.     Redis.pm:     22588.95/s     Redis::Fast:     81098.01/s AUTHOR Ichinose Shogo <shogo82148@gmail.com> SEE ALSO Redis.pm LICENSE This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself. × Module Install Instructions To install Redis::Fast, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Redis::Fast CPAN shell                      perl -MCPAN -e shell                     install Redis::Fast For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Perl wrapper around hiredis driver"	"true"
"NoSQL Databases"	"UnQLite"	"https://metacpan.org/pod/UnQLite"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"UnQLite - Perl bindings for UnQLite - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors MATSUNO★Tokuhiro  /  0.05 (TOKUHIROM on 2014-12-23) 0.04 (TOKUHIROM on 2014-08-30) 0.03 (TOKUHIROM on 2013-07-18) 0.02 (TOKUHIROM on 2013-07-05) 0.01 (TOKUHIROM on 2013-07-03) UnQLite-0.05 5 ++ 5 ++  / UnQLite 23 Dec 2014 22:57:03 GMT Module version: 0.05 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues (1) Testers (463 / 0 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (446.61Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.04 (TOKUHIROM on 2014-08-30) 0.03 (TOKUHIROM on 2013-07-18) 0.02 (TOKUHIROM on 2013-07-05) 0.01 (TOKUHIROM on 2013-07-03) Diff with version 0.04 (TOKUHIROM on 2014-08-30) 0.03 (TOKUHIROM on 2013-07-18) 0.02 (TOKUHIROM on 2013-07-05) 0.01 (TOKUHIROM on 2013-07-03) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 2 PAUSE users 3 non-PAUSE users. TOKUHIROM MATSUNO★Tokuhiro and 3 contributors show them tokuhirom Kenichi Ishigaki Reini Urban Dependencies none CPAN Testers List Reverse dependencies NAME SYNOPSIS DESCRIPTION METHODS UnQLite::Cursor METHODS LICENSE AUTHOR NAME UnQLite - Perl bindings for UnQLite SYNOPSIS     use UnQLite;      my $db = UnQLite->open('foo.db', UnQLite::UNQLITE_OPEN_READWRITE|UnQLite::UNQLITE_OPEN_CREATE);     $db->kv_store('foo', 'bar');     say $db->kv_fetch('foo'); # => bar     $db->kv_delete('foo');     undef $db; # close database      # tie interface     tie my %hash, 'UnQLite', 'foo.db', UnQLite::UNQLITE_OPEN_READWRITE;     $hash{foo} = 'bar';     say $hash{foo}; # => bar DESCRIPTION UnQLite is a in-process software library which implements a self-contained, serverless, zero-configuration, transactional NoSQL database engine. UnQLite is a document store database similar to MongoDB, Redis, CouchDB etc. as well a standard Key/Value store similar to BerkeleyDB, LevelDB, etc. This module is Perl5 binding for UnQLite. If you want to know more information about UnQLite, see http://unqlite.org/. This version of UnQLite.pm does not provides document store feature. Patches welcome. You can use UnQLite.pm as DBM. METHODS my $db = UnQLite->open('foo.db'[, $mode]); Open the database. Modes:     UnQLite::UNQLITE_OPEN_CREATE      (Default)     UnQLite::UNQLITE_OPEN_READONLY     UnQLite::UNQLITE_OPEN_READWRITE     UnQLite::UNQLITE_OPEN_EXCLUSIVE     UnQLite::UNQLITE_OPEN_TEMP_DB     UnQLite::UNQLITE_OPEN_OMIT_JOURNALING     UnQLite::UNQLITE_OPEN_IN_MEMORY     UnQLite::UNQLITE_OPEN_MMAP $db->kv_store($key, $value); Store the entry to database. $db->kv_fetch($key); Fetch data from database. $db->kv_delete($key); Delte $key from database. $db->rc(); Return code from UnQLite. It may updates after any UnQLite API call. $db->errstr() This API returns stringified version of $db->rc(). It's not human readable but it's better than magic number. my $cursor = $db->cursor_init() Create new cursor object. UnQLite::Cursor UnQLite supports cursor for iterating entries. Here is example code:     my $cursor = $db->cursor_init();     my @ret;     for ($cursor->first_entry; $cursor->valid_entry; $cursor->next_entry) {         push @ret, $cursor->key(), $cursor->data()     } METHODS $cursor->first_entry() Seek cursor to first entry. Return true if succeeded, false otherwise. $cursor->last_entry() Seek cursor to last entry. Return true if succeeded, false otherwise. $cursor->valid_entry() This will return 1 when valid. 0 otherwise $cursor->key() Get current entry's key. $cursor->data() Get current entry's data. $cursor->next_entry() Seek cursor to next entry. $cursor->prev_entry() Seek cursor to previous entry. Return true if succeeded, false otherwise. $cursor->seek($key, $opt=UnQLite::UNQLITE_CURSOR_MATCH_EXACT) Seek cursor to $key . You can specify the option as $opt . Please see http://unqlite.org/c_api/unqlite_kv_cursor.html for more details. Return true if succeeded, false otherwise. $cursor->delete_entry() Delete the database entry pointed by the cursor. Return true if succeeded, false otherwise. LICENSE Copyright (C) tokuhirom. This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself. AUTHOR tokuhirom <tokuhirom@gmail.com> × Module Install Instructions To install UnQLite, simply copy and paste either of the commands in to your terminal cpanm                      cpanm UnQLite CPAN shell                      perl -MCPAN -e shell                     install UnQLite For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Date & Time"	"DateTime"	"https://metacpan.org/pod/DateTime"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DateTime - A date and time object for Perl - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Dave Rolsky  /  1.34 (DROLSKY on 2016-07-06) 1.33 (DROLSKY on 2016-06-29) 1.32 (DROLSKY on 2016-06-29) 1.31 DEV (DROLSKY on 2016-06-18) 1.30 DEV (DROLSKY on 2016-06-18) 1.29 DEV (DROLSKY on 2016-06-18) 1.28 (DROLSKY on 2016-05-21) 1.27 (DROLSKY on 2016-05-13) 1.26 (DROLSKY on 2016-03-21) 1.25 (DROLSKY on 2016-03-06) 1.24 (DROLSKY on 2016-02-29) 1.23 (DROLSKY on 2016-02-28) 1.22 DEV (DROLSKY on 2016-02-21) 1.21 (DROLSKY on 2015-09-30) 1.20 (DROLSKY on 2015-07-01) 1.19 (DROLSKY on 2015-05-31) 1.18 (DROLSKY on 2015-01-05) 1.17 (DROLSKY on 2015-01-05) 1.16 DEV (DROLSKY on 2015-01-04) 1.15 DEV (DROLSKY on 2015-01-03) 1.14 (DROLSKY on 2015-01-03) 1.13 (DROLSKY on 2015-01-03) 1.12 (DROLSKY on 2014-08-31) 1.11 (DROLSKY on 2014-08-31) 1.10 (DROLSKY on 2014-05-05) 1.09 (DROLSKY on 2014-05-03) 1.08 (DROLSKY on 2014-03-11) 1.07 (DROLSKY on 2014-02-07) 1.06 (DROLSKY on 2013-12-31) 1.05 (DROLSKY on 2013-12-22) 1.04 (DROLSKY on 2013-12-07) 1.03 (DROLSKY on 2013-04-17) 1.02 (DROLSKY on 2013-04-16) 1.01 (DROLSKY on 2013-04-01) 1.00 (DROLSKY on 2013-03-31) 0.78 (DROLSKY on 2012-11-16) 0.77 (DROLSKY on 2012-09-25) 0.76 (DROLSKY on 2012-07-01) 0.75 (DROLSKY on 2012-06-11) 0.74 (DROLSKY on 2012-03-22) 0.73 (DROLSKY on 2012-03-17) 0.72 (DROLSKY on 2012-01-05) 0.71 (DROLSKY on 2012-01-05) 0.70 (DROLSKY on 2011-05-09) 0.69 (DROLSKY on 2011-05-04) 0.68 (DROLSKY on 2011-04-25) 0.67 (DROLSKY on 2011-04-24) 0.66 (DROLSKY on 2010-11-26) 0.65 (DROLSKY on 2010-10-26) 0.64 (DROLSKY on 2010-10-26) 0.63 (DROLSKY on 2010-09-25) 0.62 (DROLSKY on 2010-09-23) 0.61 (DROLSKY on 2010-07-17) 0.60 (DROLSKY on 2010-07-03) 0.59 (DROLSKY on 2010-06-29) 0.58 (DROLSKY on 2010-06-28) 0.57 (DROLSKY on 2010-06-26) 0.56 (DROLSKY on 2010-06-26) 0.55 (DROLSKY on 2010-03-16) 0.54 (DROLSKY on 2010-03-14) 0.53 (DROLSKY on 2009-12-06) 0.52 (DROLSKY on 2009-12-05) 0.51 (DROLSKY on 2009-11-01) 0.50 (DROLSKY on 2009-05-11) 0.49 (DROLSKY on 2009-05-04) 0.48 (DROLSKY on 2009-05-04) 0.47 (DROLSKY on 2009-03-01) 0.46 (DROLSKY on 2009-02-28) 0.4501 (DROLSKY on 2008-11-25) 0.45 (DROLSKY on 2008-11-12) 0.4401 (DROLSKY on 2008-11-03) 0.44 (DROLSKY on 2008-11-01) 0.4305 (DROLSKY on 2008-10-03) 0.4304 (DROLSKY on 2008-07-13) 0.4303 (DROLSKY on 2008-07-12) 0.4302 (DROLSKY on 2008-05-20) 0.4301 (DROLSKY on 2008-05-18) 0.43 (DROLSKY on 2008-05-18) 0.42 (DROLSKY on 2008-02-29) 0.41 (DROLSKY on 2007-09-10) 0.40 (DROLSKY on 2007-08-30) 0.39 (DROLSKY on 2007-07-17) 0.38 (DROLSKY on 2007-07-01) 0.37 (DROLSKY on 2007-03-30) 0.36 (DROLSKY on 2007-01-18) 0.35 (DROLSKY on 2006-10-22) 0.34 (DROLSKY on 2006-08-11) 0.33 (DROLSKY on 2006-08-09) 0.32 (DROLSKY on 2006-07-24) 0.31 (DROLSKY on 2006-05-21) 0.30 (DROLSKY on 2005-12-22) 0.2901 (DROLSKY on 2005-07-04) 0.29 (DROLSKY on 2005-06-03) 0.28 (DROLSKY on 2005-02-28) 0.27 (DROLSKY on 2005-01-31) 0.26 (DROLSKY on 2005-01-27) 0.25 (DROLSKY on 2005-01-11) 0.24 (DROLSKY on 2004-12-10) 0.23 (DROLSKY on 2004-12-09) 0.22 (DROLSKY on 2004-07-23) 0.2101 (DROLSKY on 2004-06-10) 0.21 (DROLSKY on 2004-03-28) 0.20 (DROLSKY on 2004-02-12) 0.1901 (DROLSKY on 2004-01-07) 0.19 (DROLSKY on 2003-12-02) 0.18 (DROLSKY on 2003-10-27) 0.1705 (DROLSKY on 2003-10-07) 0.1704 (DROLSKY on 2003-10-07) 0.1703 (DROLSKY on 2003-09-22) 0.1702 (DROLSKY on 2003-09-18) 0.1503 (DROLSKY on 2003-09-15) 0.17 (DROLSKY on 2003-08-29) 0.1601 (DROLSKY on 2003-08-07) 0.16 (DROLSKY on 2003-08-06) 0.1503 (DROLSKY on 2003-07-31) 0.1502 (DROLSKY on 2003-07-31) 0.1501 (DROLSKY on 2003-07-30) 0.15 (DROLSKY on 2003-07-29) 0.1402 (DROLSKY on 2003-07-24) 0.1401 (DROLSKY on 2003-07-24) 0.14 (DROLSKY on 2003-07-24) 0.13 (DROLSKY on 2003-06-26) 0.12 (DROLSKY on 2003-05-05) 0.11 (DROLSKY on 2003-05-03) 0.10 (DROLSKY on 2003-04-19) 0.01 (PGOLLUCCI on 2003-04-17) 0.09 (DROLSKY on 2003-04-05) 0.08 (DROLSKY on 2003-03-21) 0.07 (DROLSKY on 2003-02-27) 0.06 (DROLSKY on 2003-02-16) 0.05 (DROLSKY on 2003-02-14) 0.03 (DROLSKY on 2003-02-09) 0.02 (DROLSKY on 2003-02-09) 0.010000 DEV (DROLSKY on 2003-02-04) DateTime-1.34 161 ++ 161 ++  / DateTime 06 Jul 2016 14:15:39 GMT Module version: 1.34 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues (24) 4.5 (14 reviews) Testers Kwalitee License: artistic_2 Activity 24 month Tools MOBI | EPUB Download (229Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.33 (DROLSKY on 2016-06-29) 1.32 (DROLSKY on 2016-06-29) 1.31 DEV (DROLSKY on 2016-06-18) 1.30 DEV (DROLSKY on 2016-06-18) 1.29 DEV (DROLSKY on 2016-06-18) 1.28 (DROLSKY on 2016-05-21) 1.27 (DROLSKY on 2016-05-13) 1.26 (DROLSKY on 2016-03-21) 1.25 (DROLSKY on 2016-03-06) 1.24 (DROLSKY on 2016-02-29) 1.23 (DROLSKY on 2016-02-28) 1.22 DEV (DROLSKY on 2016-02-21) 1.21 (DROLSKY on 2015-09-30) 1.20 (DROLSKY on 2015-07-01) 1.19 (DROLSKY on 2015-05-31) 1.18 (DROLSKY on 2015-01-05) 1.17 (DROLSKY on 2015-01-05) 1.16 DEV (DROLSKY on 2015-01-04) 1.15 DEV (DROLSKY on 2015-01-03) 1.14 (DROLSKY on 2015-01-03) 1.13 (DROLSKY on 2015-01-03) 1.12 (DROLSKY on 2014-08-31) 1.11 (DROLSKY on 2014-08-31) 1.10 (DROLSKY on 2014-05-05) 1.09 (DROLSKY on 2014-05-03) 1.08 (DROLSKY on 2014-03-11) 1.07 (DROLSKY on 2014-02-07) 1.06 (DROLSKY on 2013-12-31) 1.05 (DROLSKY on 2013-12-22) 1.04 (DROLSKY on 2013-12-07) 1.03 (DROLSKY on 2013-04-17) 1.02 (DROLSKY on 2013-04-16) 1.01 (DROLSKY on 2013-04-01) 1.00 (DROLSKY on 2013-03-31) 0.78 (DROLSKY on 2012-11-16) 0.77 (DROLSKY on 2012-09-25) 0.76 (DROLSKY on 2012-07-01) 0.75 (DROLSKY on 2012-06-11) 0.74 (DROLSKY on 2012-03-22) 0.73 (DROLSKY on 2012-03-17) 0.72 (DROLSKY on 2012-01-05) 0.71 (DROLSKY on 2012-01-05) 0.70 (DROLSKY on 2011-05-09) 0.69 (DROLSKY on 2011-05-04) 0.68 (DROLSKY on 2011-04-25) 0.67 (DROLSKY on 2011-04-24) 0.66 (DROLSKY on 2010-11-26) 0.65 (DROLSKY on 2010-10-26) 0.64 (DROLSKY on 2010-10-26) 0.63 (DROLSKY on 2010-09-25) 0.62 (DROLSKY on 2010-09-23) 0.61 (DROLSKY on 2010-07-17) 0.60 (DROLSKY on 2010-07-03) 0.59 (DROLSKY on 2010-06-29) 0.58 (DROLSKY on 2010-06-28) 0.57 (DROLSKY on 2010-06-26) 0.56 (DROLSKY on 2010-06-26) 0.55 (DROLSKY on 2010-03-16) 0.54 (DROLSKY on 2010-03-14) 0.53 (DROLSKY on 2009-12-06) 0.52 (DROLSKY on 2009-12-05) 0.51 (DROLSKY on 2009-11-01) 0.50 (DROLSKY on 2009-05-11) 0.49 (DROLSKY on 2009-05-04) 0.48 (DROLSKY on 2009-05-04) 0.47 (DROLSKY on 2009-03-01) 0.46 (DROLSKY on 2009-02-28) 0.4501 (DROLSKY on 2008-11-25) 0.45 (DROLSKY on 2008-11-12) 0.4401 (DROLSKY on 2008-11-03) 0.44 (DROLSKY on 2008-11-01) 0.4305 (DROLSKY on 2008-10-03) 0.4304 (DROLSKY on 2008-07-13) 0.4303 (DROLSKY on 2008-07-12) 0.4302 (DROLSKY on 2008-05-20) 0.4301 (DROLSKY on 2008-05-18) 0.43 (DROLSKY on 2008-05-18) 0.42 (DROLSKY on 2008-02-29) 0.41 (DROLSKY on 2007-09-10) 0.40 (DROLSKY on 2007-08-30) 0.39 (DROLSKY on 2007-07-17) 0.38 (DROLSKY on 2007-07-01) 0.37 (DROLSKY on 2007-03-30) 0.36 (DROLSKY on 2007-01-18) 0.35 (DROLSKY on 2006-10-22) 0.34 (DROLSKY on 2006-08-11) 0.33 (DROLSKY on 2006-08-09) 0.32 (DROLSKY on 2006-07-24) 0.31 (DROLSKY on 2006-05-21) 0.30 (DROLSKY on 2005-12-22) 0.2901 (DROLSKY on 2005-07-04) 0.29 (DROLSKY on 2005-06-03) 0.28 (DROLSKY on 2005-02-28) 0.27 (DROLSKY on 2005-01-31) 0.26 (DROLSKY on 2005-01-27) 0.25 (DROLSKY on 2005-01-11) 0.24 (DROLSKY on 2004-12-10) 0.23 (DROLSKY on 2004-12-09) 0.22 (DROLSKY on 2004-07-23) 0.2101 (DROLSKY on 2004-06-10) 0.21 (DROLSKY on 2004-03-28) 0.20 (DROLSKY on 2004-02-12) 0.1901 (DROLSKY on 2004-01-07) 0.19 (DROLSKY on 2003-12-02) 0.18 (DROLSKY on 2003-10-27) 0.1705 (DROLSKY on 2003-10-07) 0.1704 (DROLSKY on 2003-10-07) 0.1703 (DROLSKY on 2003-09-22) 0.1702 (DROLSKY on 2003-09-18) 0.1503 (DROLSKY on 2003-09-15) 0.17 (DROLSKY on 2003-08-29) 0.1601 (DROLSKY on 2003-08-07) 0.16 (DROLSKY on 2003-08-06) 0.1503 (DROLSKY on 2003-07-31) 0.1502 (DROLSKY on 2003-07-31) 0.1501 (DROLSKY on 2003-07-30) 0.15 (DROLSKY on 2003-07-29) 0.1402 (DROLSKY on 2003-07-24) 0.1401 (DROLSKY on 2003-07-24) 0.14 (DROLSKY on 2003-07-24) 0.13 (DROLSKY on 2003-06-26) 0.12 (DROLSKY on 2003-05-05) 0.11 (DROLSKY on 2003-05-03) 0.10 (DROLSKY on 2003-04-19) 0.01 (PGOLLUCCI on 2003-04-17) 0.09 (DROLSKY on 2003-04-05) 0.08 (DROLSKY on 2003-03-21) 0.07 (DROLSKY on 2003-02-27) 0.06 (DROLSKY on 2003-02-16) 0.05 (DROLSKY on 2003-02-14) 0.03 (DROLSKY on 2003-02-09) 0.02 (DROLSKY on 2003-02-09) 0.010000 DEV (DROLSKY on 2003-02-04) Diff with version 1.33 (DROLSKY on 2016-06-29) 1.32 (DROLSKY on 2016-06-29) 1.31 DEV (DROLSKY on 2016-06-18) 1.30 DEV (DROLSKY on 2016-06-18) 1.29 DEV (DROLSKY on 2016-06-18) 1.28 (DROLSKY on 2016-05-21) 1.27 (DROLSKY on 2016-05-13) 1.26 (DROLSKY on 2016-03-21) 1.25 (DROLSKY on 2016-03-06) 1.24 (DROLSKY on 2016-02-29) 1.23 (DROLSKY on 2016-02-28) 1.22 DEV (DROLSKY on 2016-02-21) 1.21 (DROLSKY on 2015-09-30) 1.20 (DROLSKY on 2015-07-01) 1.19 (DROLSKY on 2015-05-31) 1.18 (DROLSKY on 2015-01-05) 1.17 (DROLSKY on 2015-01-05) 1.16 DEV (DROLSKY on 2015-01-04) 1.15 DEV (DROLSKY on 2015-01-03) 1.14 (DROLSKY on 2015-01-03) 1.13 (DROLSKY on 2015-01-03) 1.12 (DROLSKY on 2014-08-31) 1.11 (DROLSKY on 2014-08-31) 1.10 (DROLSKY on 2014-05-05) 1.09 (DROLSKY on 2014-05-03) 1.08 (DROLSKY on 2014-03-11) 1.07 (DROLSKY on 2014-02-07) 1.06 (DROLSKY on 2013-12-31) 1.05 (DROLSKY on 2013-12-22) 1.04 (DROLSKY on 2013-12-07) 1.03 (DROLSKY on 2013-04-17) 1.02 (DROLSKY on 2013-04-16) 1.01 (DROLSKY on 2013-04-01) 1.00 (DROLSKY on 2013-03-31) 0.78 (DROLSKY on 2012-11-16) 0.77 (DROLSKY on 2012-09-25) 0.76 (DROLSKY on 2012-07-01) 0.75 (DROLSKY on 2012-06-11) 0.74 (DROLSKY on 2012-03-22) 0.73 (DROLSKY on 2012-03-17) 0.72 (DROLSKY on 2012-01-05) 0.71 (DROLSKY on 2012-01-05) 0.70 (DROLSKY on 2011-05-09) 0.69 (DROLSKY on 2011-05-04) 0.68 (DROLSKY on 2011-04-25) 0.67 (DROLSKY on 2011-04-24) 0.66 (DROLSKY on 2010-11-26) 0.65 (DROLSKY on 2010-10-26) 0.64 (DROLSKY on 2010-10-26) 0.63 (DROLSKY on 2010-09-25) 0.62 (DROLSKY on 2010-09-23) 0.61 (DROLSKY on 2010-07-17) 0.60 (DROLSKY on 2010-07-03) 0.59 (DROLSKY on 2010-06-29) 0.58 (DROLSKY on 2010-06-28) 0.57 (DROLSKY on 2010-06-26) 0.56 (DROLSKY on 2010-06-26) 0.55 (DROLSKY on 2010-03-16) 0.54 (DROLSKY on 2010-03-14) 0.53 (DROLSKY on 2009-12-06) 0.52 (DROLSKY on 2009-12-05) 0.51 (DROLSKY on 2009-11-01) 0.50 (DROLSKY on 2009-05-11) 0.49 (DROLSKY on 2009-05-04) 0.48 (DROLSKY on 2009-05-04) 0.47 (DROLSKY on 2009-03-01) 0.46 (DROLSKY on 2009-02-28) 0.4501 (DROLSKY on 2008-11-25) 0.45 (DROLSKY on 2008-11-12) 0.4401 (DROLSKY on 2008-11-03) 0.44 (DROLSKY on 2008-11-01) 0.4305 (DROLSKY on 2008-10-03) 0.4304 (DROLSKY on 2008-07-13) 0.4303 (DROLSKY on 2008-07-12) 0.4302 (DROLSKY on 2008-05-20) 0.4301 (DROLSKY on 2008-05-18) 0.43 (DROLSKY on 2008-05-18) 0.42 (DROLSKY on 2008-02-29) 0.41 (DROLSKY on 2007-09-10) 0.40 (DROLSKY on 2007-08-30) 0.39 (DROLSKY on 2007-07-17) 0.38 (DROLSKY on 2007-07-01) 0.37 (DROLSKY on 2007-03-30) 0.36 (DROLSKY on 2007-01-18) 0.35 (DROLSKY on 2006-10-22) 0.34 (DROLSKY on 2006-08-11) 0.33 (DROLSKY on 2006-08-09) 0.32 (DROLSKY on 2006-07-24) 0.31 (DROLSKY on 2006-05-21) 0.30 (DROLSKY on 2005-12-22) 0.2901 (DROLSKY on 2005-07-04) 0.29 (DROLSKY on 2005-06-03) 0.28 (DROLSKY on 2005-02-28) 0.27 (DROLSKY on 2005-01-31) 0.26 (DROLSKY on 2005-01-27) 0.25 (DROLSKY on 2005-01-11) 0.24 (DROLSKY on 2004-12-10) 0.23 (DROLSKY on 2004-12-09) 0.22 (DROLSKY on 2004-07-23) 0.2101 (DROLSKY on 2004-06-10) 0.21 (DROLSKY on 2004-03-28) 0.20 (DROLSKY on 2004-02-12) 0.1901 (DROLSKY on 2004-01-07) 0.19 (DROLSKY on 2003-12-02) 0.18 (DROLSKY on 2003-10-27) 0.1705 (DROLSKY on 2003-10-07) 0.1704 (DROLSKY on 2003-10-07) 0.1703 (DROLSKY on 2003-09-22) 0.1702 (DROLSKY on 2003-09-18) 0.1503 (DROLSKY on 2003-09-15) 0.17 (DROLSKY on 2003-08-29) 0.1601 (DROLSKY on 2003-08-07) 0.16 (DROLSKY on 2003-08-06) 0.1503 (DROLSKY on 2003-07-31) 0.1502 (DROLSKY on 2003-07-31) 0.1501 (DROLSKY on 2003-07-30) 0.15 (DROLSKY on 2003-07-29) 0.1402 (DROLSKY on 2003-07-24) 0.1401 (DROLSKY on 2003-07-24) 0.14 (DROLSKY on 2003-07-24) 0.13 (DROLSKY on 2003-06-26) 0.12 (DROLSKY on 2003-05-05) 0.11 (DROLSKY on 2003-05-03) 0.10 (DROLSKY on 2003-04-19) 0.01 (PGOLLUCCI on 2003-04-17) 0.09 (DROLSKY on 2003-04-05) 0.08 (DROLSKY on 2003-03-21) 0.07 (DROLSKY on 2003-02-27) 0.06 (DROLSKY on 2003-02-16) 0.05 (DROLSKY on 2003-02-14) 0.03 (DROLSKY on 2003-02-09) 0.02 (DROLSKY on 2003-02-09) 0.010000 DEV (DROLSKY on 2003-02-04) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 93 PAUSE users 68 non-PAUSE users. DROLSKY Dave Rolsky and 18 contributors show them Ben Bennett Christian Hansen Daisuke Maki David E. Wheeler Doug Bell Flávio Soibelmann Glock Gregory Oschwald Iain Truskett <deceased> Jason McIntosh Joshua Hoblitt Karen Etheridge Michael Conrad Nick Tonkin Ovid Ricardo Signes Richard Bowen Ron Hill viviparous Dependencies base Carp constant DateTime::Locale DateTime::TimeZone Dist::CheckConflicts integer overload Params::Validate POSIX Scalar::Util strict Try::Tiny vars warnings warnings::register XSLoader CPAN Testers List Reverse dependencies Dependency graph × DateTime-1.34 NAME VERSION SYNOPSIS DESCRIPTION USAGE 0-based Versus 1-based Numbers Error Handling Locales Floating DateTimes Math Determining the Local Time Zone Can Be Slow Globally Setting a Default Time Zone Upper and Lower Bounds METHODS Constructors Warnings DateTime->new( ... ) Parsing Dates Ambiguous Local Times Invalid Local Times DateTime->from_epoch( epoch => $epoch, ... ) DateTime->now( ... ) DateTime->today( ... ) DateTime->from_object( object => $object, ... ) DateTime->last_day_of_month( ... ) DateTime->from_day_of_year( ... ) $dt->clone() ""Get"" Methods $dt->year() $dt->ce_year() $dt->era_name() $dt->era_abbr() $dt->christian_era() $dt->secular_era() $dt->year_with_era() $dt->year_with_christian_era() $dt->year_with_secular_era() $dt->month() $dt->month_name() $dt->month_abbr() $dt->day() $dt->day_of_week() $dt->local_day_of_week() $dt->day_name() $dt->day_abbr() $dt->day_of_year() $dt->quarter() $dt->quarter_name() $dt->quarter_abbr() $dt->day_of_quarter() $dt->weekday_of_month() $dt->ymd( $optional_separator ), $dt->mdy(...), $dt->dmy(...) $dt->hour() $dt->hour_1() $dt->hour_12() $dt->hour_12_0() $dt->am_or_pm() $dt->minute() $dt->second() $dt->fractional_second() $dt->millisecond() $dt->microsecond() $dt->nanosecond() $dt->hms( $optional_separator ) $dt->datetime() $dt->is_leap_year() $dt->week() $dt->week_year() $dt->week_number() $dt->week_of_month() $dt->jd(), $dt->mjd() $dt->time_zone() $dt->offset() $dt->is_dst() $dt->time_zone_long_name() $dt->time_zone_short_name() $dt->strftime( $format, ... ) $dt->format_cldr( $format, ... ) $dt->epoch() $dt->hires_epoch() $dt->is_finite(), $dt->is_infinite() $dt->utc_rd_values() $dt->local_rd_values() $dt->leap_seconds() $dt->utc_rd_as_seconds() $dt->locale() $dt->formatter() ""Set"" Methods $dt->set( .. ) $dt->set_year(), $dt->set_month(), etc. $dt->truncate( to => ... ) $dt->set_locale( $locale ) $dt->set_time_zone( $tz ) $dt->set_formatter( $formatter ) Math Methods $dt->duration_class() $dt->add_duration( $duration_object ) $dt->add( DateTime::Duration->new parameters ) $dt->subtract_duration( $duration_object ) $dt->subtract( DateTime::Duration->new parameters ) $dt->subtract_datetime( $datetime ) $dt->delta_md( $datetime ) $dt->delta_days( $datetime ) $dt->delta_ms( $datetime ) $dt->subtract_datetime_absolute( $datetime ) Class Methods DateTime->DefaultLocale( $locale ) DateTime->compare( $dt1, $dt2 ), DateTime->compare_ignore_floating( $dt1, $dt2 ) Testing Code That Uses DateTime How DateTime Math Works Making Things Simple Adding a Duration to a Datetime Datetime Subtraction Reversibility Leap Seconds and Date Math Local vs. UTC and 24 hours vs. 1 day Overloading Formatters And Stringification CLDR Patterns CLDR ""Available Formats"" strftime Patterns DateTime.pm and Storable THE DATETIME PROJECT ECOSYSTEM DateTime::Set Format Modules Calendar Modules Event Modules Others KNOWN BUGS SEE ALSO SUPPORT DONATIONS AUTHOR CONTRIBUTORS COPYRIGHT AND LICENCE NAME DateTime - A date and time object for Perl VERSION version 1.34 SYNOPSIS   use DateTime;    $dt = DateTime->new(       year       => 1964,       month      => 10,       day        => 16,       hour       => 16,       minute     => 12,       second     => 47,       nanosecond => 500000000,       time_zone  => 'Asia/Taipei',   );    $dt = DateTime->from_epoch( epoch => $epoch );   $dt = DateTime->now; # same as ( epoch => time() )    $year   = $dt->year;   $month  = $dt->month;          # 1-12    $day    = $dt->day;            # 1-31    $dow    = $dt->day_of_week;    # 1-7 (Monday is 1)    $hour   = $dt->hour;           # 0-23   $minute = $dt->minute;         # 0-59    $second = $dt->second;         # 0-61 (leap seconds!)    $doy    = $dt->day_of_year;    # 1-366 (leap years)    $doq    = $dt->day_of_quarter; # 1..    $qtr    = $dt->quarter;        # 1-4    # all of the start-at-1 methods above have corresponding start-at-0   # methods, such as $dt->day_of_month_0, $dt->month_0 and so on    $ymd    = $dt->ymd;           # 2002-12-06   $ymd    = $dt->ymd('/');      # 2002/12/06    $mdy    = $dt->mdy;           # 12-06-2002   $mdy    = $dt->mdy('/');      # 12/06/2002    $dmy    = $dt->dmy;           # 06-12-2002   $dmy    = $dt->dmy('/');      # 06/12/2002    $hms    = $dt->hms;           # 14:02:29   $hms    = $dt->hms('!');      # 14!02!29    $is_leap  = $dt->is_leap_year;    # these are localizable, see Locales section   $month_name  = $dt->month_name; # January, February, ...   $month_abbr  = $dt->month_abbr; # Jan, Feb, ...   $day_name    = $dt->day_name;   # Monday, Tuesday, ...   $day_abbr    = $dt->day_abbr;   # Mon, Tue, ...    # May not work for all possible datetime, see the docs on this   # method for more details.   $epoch_time  = $dt->epoch;    $dt2 = $dt + $duration_object;    $dt3 = $dt - $duration_object;    $duration_object = $dt - $dt2;    $dt->set( year => 1882 );    $dt->set_time_zone( 'America/Chicago' );    $dt->set_formatter( $formatter ); DESCRIPTION DateTime is a class for the representation of date/time combinations, and is part of the Perl DateTime project. For details on this project please see http://datetime.perl.org/. The DateTime site has a FAQ which may help answer many ""how do I do X?"" questions. The FAQ is at http://datetime.perl.org/wiki/datetime/page/FAQ. It represents the Gregorian calendar, extended backwards in time before its creation (in 1582). This is sometimes known as the ""proleptic Gregorian calendar"". In this calendar, the first day of the calendar (the epoch), is the first day of year 1, which corresponds to the date which was (incorrectly) believed to be the birth of Jesus Christ. The calendar represented does have a year 0, and in that way differs from how dates are often written using ""BCE/CE"" or ""BC/AD"". For infinite datetimes, please see the DateTime::Infinite module. USAGE 0-based Versus 1-based Numbers The DateTime.pm module follows a simple logic for determining whether or not a given number is 0-based or 1-based. Month, day of month, day of week, and day of year are 1-based. Any method that is 1-based also has an equivalent 0-based method ending in ""_0"". So for example, this class provides both day_of_week() and day_of_week_0() methods. The day_of_week_0() method still treats Monday as the first day of the week. All time-related numbers such as hour, minute, and second are 0-based. Years are neither, as they can be both positive or negative, unlike any other datetime component. There is a year 0. There is no quarter_0() method. Error Handling Some errors may cause this module to die with an error string. This can only happen when calling constructor methods, methods that change the object, such as set(), or methods that take parameters. Methods that retrieve information about the object, such as year() or epoch(), will never die. Locales All the object methods which return names or abbreviations return data based on a locale. This is done by setting the locale when constructing a DateTime object. If this is not set, then ""en-US"" is used. Floating DateTimes The default time zone for new DateTime objects, except where stated otherwise, is the ""floating"" time zone. This concept comes from the iCal standard. A floating datetime is one which is not anchored to any particular time zone. In addition, floating datetimes do not include leap seconds, since we cannot apply them without knowing the datetime's time zone. The results of date math and comparison between a floating datetime and one with a real time zone are not really valid, because one includes leap seconds and the other does not. Similarly, the results of datetime math between two floating datetimes and two datetimes with time zones are not really comparable. If you are planning to use any objects with a real time zone, it is strongly recommended that you do not mix these with floating datetimes. Math If you are going to be doing date math, please read the section ""How DateTime Math Works"". Determining the Local Time Zone Can Be Slow If $ENV{TZ} is not set, it may involve reading a number of files in /etc or elsewhere. If you know that the local time zone won't change while your code is running, and you need to make many objects for the local time zone, it is strongly recommended that you retrieve the local time zone once and cache it:   our $App::LocalTZ = DateTime::TimeZone->new( name => 'local' );    ... # then everywhere else    my $dt = DateTime->new( ..., time_zone => $App::LocalTZ ); DateTime itself does not do this internally because local time zones can change, and there's no good way to determine if it's changed without doing all the work to look it up. Do not try to use named time zones (like ""America/Chicago"") with dates very far in the future (thousands of years). The current implementation of DateTime::TimeZone will use a huge amount of memory calculating all the DST changes from now until the future date. Use UTC or the floating time zone and you will be safe. Globally Setting a Default Time Zone Warning: This is very dangerous. Do this at your own risk! By default, DateTime uses either the floating time zone or UTC for newly created objects, depending on the constructor. You can force DateTime to use a different time zone by setting the PERL_DATETIME_DEFAULT_TZ environment variable. As noted above, this is very dangerous, as it affects all code that creates a DateTime object, including modules from CPAN. If those modules expect the normal default, then setting this can cause confusing breakage or subtly broken data. Before setting this variable, you are strongly encouraged to audit your CPAN dependencies to see how they use DateTime. Try running the test suite for each dependency with this environment variable set before using this in production. Upper and Lower Bounds Internally, dates are represented the number of days before or after 0001-01-01. This is stored as an integer, meaning that the upper and lower bounds are based on your Perl's integer size ($Config{ivsize}). The limit on 32-bit systems is around 2^29 days, which gets you to year (+/-)1,469,903. On a 64-bit system you get 2^62 days, (+/-)12,626,367,463,883,278 (12.626 quadrillion). METHODS DateTime provide many methods. The documentation breaks them down into groups based on what they do (constructor, accessors, modifiers, etc.). Constructors All constructors can die when invalid parameters are given. Warnings Currently, constructors will warn if you try to create a far future DateTime (year >= 5000) with any time zone besides floating or UTC. This can be very slow if the time zone has future DST transitions that need to be calculated. If the date is sufficiently far in the future this can be really slow (minutes). All warnings from DateTime use the DateTime category and can be suppressed with:     no warnings 'DateTime'; This warning may be removed in the future if DateTime::TimeZone is made much faster. DateTime->new( ... ) This class method accepts parameters for each date and time component: ""year"", ""month"", ""day"", ""hour"", ""minute"", ""second"", ""nanosecond"". It also accepts ""locale"", ""time_zone"", and ""formatter"" parameters.   my $dt = DateTime->new(       year       => 1966,       month      => 10,       day        => 25,       hour       => 7,       minute     => 15,       second     => 47,       nanosecond => 500000000,       time_zone  => 'America/Chicago',   ); DateTime validates the ""month"", ""day"", ""hour"", ""minute"", and ""second"", and ""nanosecond"" parameters. The valid values for these parameters are: month An integer from 1-12. day An integer from 1-31, and it must be within the valid range of days for the specified month. hour An integer from 0-23. minute An integer from 0-59. second An integer from 0-61 (to allow for leap seconds). Values of 60 or 61 are only allowed when they match actual leap seconds. nanosecond An integer >= 0. If this number is greater than 1 billion, it will be normalized into the second value for the DateTime object. Invalid parameter types (like an array reference) will cause the constructor to die. The value for seconds may be from 0 to 61, to account for leap seconds. If you give a value greater than 59, DateTime does check to see that it really matches a valid leap second. All of the parameters are optional except for ""year"". The ""month"" and ""day"" parameters both default to 1, while the ""hour"", ""minute"", ""second"", and ""nanosecond"" parameters all default to 0. The ""locale"" parameter should be a string containing a locale code, like ""en-US"" or ""zh-Hant-TW"", or an object returned by DateTime::Locale->load. See the DateTime::Locale documentation for details. The ""time_zone"" parameter can be either a string or a DateTime::TimeZone object. A string will simply be passed to the DateTime::TimeZone->new method as its ""name"" parameter. This string may be an Olson DB time zone name (""America/Chicago""), an offset string (""+0630""), or the words ""floating"" or ""local"". See the DateTime::TimeZone documentation for more details. The default time zone is ""floating"". The ""formatter"" can be either a scalar or an object, but the class specified by the scalar or the object must implement a format_datetime() method. Parsing Dates This module does not parse dates! That means there is no constructor to which you can pass things like ""March 3, 1970 12:34"". Instead, take a look at the various DateTime::Format::* modules on CPAN. These parse all sorts of different date formats, and you're bound to find something that can handle your particular needs. Ambiguous Local Times Because of Daylight Saving Time, it is possible to specify a local time that is ambiguous. For example, in the US in 2003, the transition from to saving to standard time occurred on October 26, at 02:00:00 local time. The local clock changed from 01:59:59 (saving time) to 01:00:00 (standard time). This means that the hour from 01:00:00 through 01:59:59 actually occurs twice, though the UTC time continues to move forward. If you specify an ambiguous time, then the latest UTC time is always used, in effect always choosing standard time. In this case, you can simply subtract an hour to the object in order to move to saving time, for example:   # This object represent 01:30:00 standard time   my $dt = DateTime->new(       year      => 2003,       month     => 10,       day       => 26,       hour      => 1,       minute    => 30,       second    => 0,       time_zone => 'America/Chicago',   );    print $dt->hms;  # prints 01:30:00    # Now the object represent 01:30:00 saving time   $dt->subtract( hours => 1 );    print $dt->hms;  # still prints 01:30:00 Alternately, you could create the object with the UTC time zone, and then call the set_time_zone() method to change the time zone. This is a good way to ensure that the time is not ambiguous. Invalid Local Times Another problem introduced by Daylight Saving Time is that certain local times just do not exist. For example, in the US in 2003, the transition from standard to saving time occurred on April 6, at the change to 2:00:00 local time. The local clock changes from 01:59:59 (standard time) to 03:00:00 (saving time). This means that there is no 02:00:00 through 02:59:59 on April 6! Attempting to create an invalid time currently causes a fatal error. This may change in future version of this module. DateTime->from_epoch( epoch => $epoch, ... ) This class method can be used to construct a new DateTime object from an epoch time instead of components. Just as with the new() method, it accepts ""time_zone"", ""locale"", and ""formatter"" parameters. If the epoch value is a floating-point value, it will be rounded to nearest microsecond. By default, the returned object will be in the UTC time zone. DateTime->now( ... ) This class method is equivalent to calling from_epoch() with the value returned from Perl's time() function. Just as with the new() method, it accepts ""time_zone"" and ""locale"" parameters. By default, the returned object will be in the UTC time zone. DateTime->today( ... ) This class method is equivalent to:   DateTime->now(@_)->truncate( to => 'day' ); DateTime->from_object( object => $object, ... ) This class method can be used to construct a new DateTime object from any object that implements the utc_rd_values() method. All DateTime::Calendar modules must implement this method in order to provide cross-calendar compatibility. This method accepts a ""locale"" and ""formatter"" parameter If the object passed to this method has a time_zone() method, that is used to set the time zone of the newly created DateTime.pm object. Otherwise, the returned object will be in the floating time zone. DateTime->last_day_of_month( ... ) This constructor takes the same arguments as can be given to the new() method, except for ""day"". Additionally, both ""year"" and ""month"" are required. DateTime->from_day_of_year( ... ) This constructor takes the same arguments as can be given to the new() method, except that it does not accept a ""month"" or ""day"" argument. Instead, it requires both ""year"" and ""day_of_year"". The day of year must be between 1 and 366, and 366 is only allowed for leap years. $dt->clone() This object method returns a new object that is replica of the object upon which the method is called. ""Get"" Methods This class has many methods for retrieving information about an object. $dt->year() Returns the year. $dt->ce_year() Returns the year according to the BCE/CE numbering system. The year before year 1 in this system is year -1, aka ""1 BCE"". $dt->era_name() Returns the long name of the current era, something like ""Before Christ"". See the Locales section for more details. $dt->era_abbr() Returns the abbreviated name of the current era, something like ""BC"". See the Locales section for more details. $dt->christian_era() Returns a string, either ""BC"" or ""AD"", according to the year. $dt->secular_era() Returns a string, either ""BCE"" or ""CE"", according to the year. $dt->year_with_era() Returns a string containing the year immediately followed by its era abbreviation. The year is the absolute value of ce_year(), so that year 1 is ""1AD"" and year 0 is ""1BC"". $dt->year_with_christian_era() Like year_with_era(), but uses the christian_era() method to get the era name. $dt->year_with_secular_era() Like year_with_era(), but uses the secular_era() method to get the era name. $dt->month() Returns the month of the year, from 1..12. Also available as $dt->mon(). $dt->month_name() Returns the name of the current month. See the Locales section for more details. $dt->month_abbr() Returns the abbreviated name of the current month. See the Locales section for more details. $dt->day() Returns the day of the month, from 1..31. Also available as $dt->mday() and $dt->day_of_month(). $dt->day_of_week() Returns the day of the week as a number, from 1..7, with 1 being Monday and 7 being Sunday. Also available as $dt->wday() and $dt->dow(). $dt->local_day_of_week() Returns the day of the week as a number, from 1..7. The day corresponding to 1 will vary based on the locale. $dt->day_name() Returns the name of the current day of the week. See the Locales section for more details. $dt->day_abbr() Returns the abbreviated name of the current day of the week. See the Locales section for more details. $dt->day_of_year() Returns the day of the year. Also available as $dt->doy(). $dt->quarter() Returns the quarter of the year, from 1..4. $dt->quarter_name() Returns the name of the current quarter. See the Locales section for more details. $dt->quarter_abbr() Returns the abbreviated name of the current quarter. See the Locales section for more details. $dt->day_of_quarter() Returns the day of the quarter. Also available as $dt->doq(). $dt->weekday_of_month() Returns a number from 1..5 indicating which week day of the month this is. For example, June 9, 2003 is the second Monday of the month, and so this method returns 2 for that day. $dt->ymd( $optional_separator ), $dt->mdy(...), $dt->dmy(...) Each method returns the year, month, and day, in the order indicated by the method name. Years are zero-padded to four digits. Months and days are 0-padded to two digits. By default, the values are separated by a dash (-), but this can be overridden by passing a value to the method. The $dt->ymd() method is also available as $dt->date(). $dt->hour() Returns the hour of the day, from 0..23. $dt->hour_1() Returns the hour of the day, from 1..24. $dt->hour_12() Returns the hour of the day, from 1..12. $dt->hour_12_0() Returns the hour of the day, from 0..11. $dt->am_or_pm() Returns the appropriate localized abbreviation, depending on the current hour. $dt->minute() Returns the minute of the hour, from 0..59. Also available as $dt->min(). $dt->second() Returns the second, from 0..61. The values 60 and 61 are used for leap seconds. Also available as $dt->sec(). $dt->fractional_second() Returns the second, as a real number from 0.0 until 61.999999999 The values 60 and 61 are used for leap seconds. $dt->millisecond() Returns the fractional part of the second as milliseconds (1E-3 seconds). Half a second is 500 milliseconds. This value will always be rounded down to the nearest integer. $dt->microsecond() Returns the fractional part of the second as microseconds (1E-6 seconds). Half a second is 500_000 microseconds. This value will always be rounded down to the nearest integer. $dt->nanosecond() Returns the fractional part of the second as nanoseconds (1E-9 seconds). Half a second is 500_000_000 nanoseconds. $dt->hms( $optional_separator ) Returns the hour, minute, and second, all zero-padded to two digits. If no separator is specified, a colon (:) is used by default. Also available as $dt->time(). $dt->datetime() This method is equivalent to:   $dt->ymd('-') . 'T' . $dt->hms(':') This method is also available as $dt->iso8601(), but it's not really a very good ISO8601 format, as it lacks a time zone. $dt->is_leap_year() This method returns a true or false indicating whether or not the datetime object is in a leap year. $dt->week()  ($week_year, $week_number) = $dt->week; Returns information about the calendar week which contains this datetime object. The values returned by this method are also available separately through the week_year and week_number methods. The first week of the year is defined by ISO as the one which contains the fourth day of January, which is equivalent to saying that it's the first week to overlap the new year by at least four days. Typically the week year will be the same as the year that the object is in, but dates at the very beginning of a calendar year often end up in the last week of the prior year, and similarly, the final few days of the year may be placed in the first week of the next year. $dt->week_year() Returns the year of the week. See $dt->week() for details. $dt->week_number() Returns the week of the year, from 1..53. See $dt->week() for details. $dt->week_of_month() The week of the month, from 0..5. The first week of the month is the first week that contains a Thursday. This is based on the ICU definition of week of month, and correlates to the ISO8601 week of year definition. A day in the week before the week with the first Thursday will be week 0. $dt->jd(), $dt->mjd() These return the Julian Day and Modified Julian Day, respectively. The value returned is a floating point number. The fractional portion of the number represents the time portion of the datetime. $dt->time_zone() This returns the DateTime::TimeZone object for the datetime object. $dt->offset() This returns the offset from UTC, in seconds, of the datetime object according to the time zone. $dt->is_dst() Returns a boolean indicating whether or not the datetime object is currently in Daylight Saving Time or not. $dt->time_zone_long_name() This is a shortcut for $dt->time_zone->name. It's provided so that one can use ""%{time_zone_long_name}"" as a strftime format specifier. $dt->time_zone_short_name() This method returns the time zone abbreviation for the current time zone, such as ""PST"" or ""GMT"". These names are not definitive, and should not be used in any application intended for general use by users around the world. $dt->strftime( $format, ... ) This method implements functionality similar to the strftime() method in C. However, if given multiple format strings, then it will return multiple scalars, one for each format string. See the ""strftime Patterns"" section for a list of all possible strftime patterns. If you give a pattern that doesn't exist, then it is simply treated as text. $dt->format_cldr( $format, ... ) This method implements formatting based on the CLDR date patterns. If given multiple format strings, then it will return multiple scalars, one for each format string. See the ""CLDR Patterns"" section for a list of all possible CLDR patterns. If you give a pattern that doesn't exist, then it is simply treated as text. $dt->epoch() Return the UTC epoch value for the datetime object. Internally, this is implemented using Time::Local, which uses the Unix epoch even on machines with a different epoch (such as MacOS). Datetimes before the start of the epoch will be returned as a negative number. The return value from this method is always an integer. Since the epoch does not account for leap seconds, the epoch time for 1972-12-31T23:59:60 (UTC) is exactly the same as that for 1973-01-01T00:00:00. This module uses Time::Local to calculate the epoch, which may or may not handle epochs before 1904 or after 2038 (depending on the size of your system's integers, and whether or not Perl was compiled with 64-bit int support). $dt->hires_epoch() Returns the epoch as a floating point number. The floating point portion of the value represents the nanosecond value of the object. This method is provided for compatibility with the Time::HiRes module. Note that this method suffers from the imprecision of floating point numbers, and the result may end up rounded to an arbitrary degree depending on your platform.     my $dt = DateTime->new( year => 2012, nanosecond => 4 );     say $dt->hires_epoch(); On my system, this simply prints 1325376000 because adding 0.000000004 to 1325376000 returns 1325376000. $dt->is_finite(), $dt->is_infinite() These methods allow you to distinguish normal datetime objects from infinite ones. Infinite datetime objects are documented in DateTime::Infinite. $dt->utc_rd_values() Returns the current UTC Rata Die days, seconds, and nanoseconds as a three element list. This exists primarily to allow other calendar modules to create objects based on the values provided by this object. $dt->local_rd_values() Returns the current local Rata Die days, seconds, and nanoseconds as a three element list. This exists for the benefit of other modules which might want to use this information for date math, such as DateTime::Event::Recurrence. $dt->leap_seconds() Returns the number of leap seconds that have happened up to the datetime represented by the object. For floating datetimes, this always returns 0. $dt->utc_rd_as_seconds() Returns the current UTC Rata Die days and seconds purely as seconds. This number ignores any fractional seconds stored in the object, as well as leap seconds. $dt->locale() Returns the current locale object. $dt->formatter() Returns current formatter object or class. See ""Formatters And Stringification"" for details. ""Set"" Methods The remaining methods provided by DateTime.pm, except where otherwise specified, return the object itself, thus making method chaining possible. For example:   my $dt = DateTime->now->set_time_zone( 'Australia/Sydney' );    my $first = DateTime                 ->last_day_of_month( year => 2003, month => 3 )                 ->add( days => 1 )                 ->subtract( seconds => 1 ); $dt->set( .. ) This method can be used to change the local components of a date time. This method accepts any parameter allowed by the new() method except for ""locale"" or ""time_zone"". Use set_locale() and set_time_zone() for those instead. This method performs parameter validation just like the new() method. Do not use this method to do date math. Use the add() and subtract() methods instead. $dt->set_year(), $dt->set_month(), etc. DateTime has a set_* method for every item that can be passed to the constructor: $dt->set_year() $dt->set_month() $dt->set_day() $dt->set_hour() $dt->set_minute() $dt->set_second() $dt->set_nanosecond() These are shortcuts to calling set() with a single key. They all take a single parameter. $dt->truncate( to => ... ) This method allows you to reset some of the local time components in the object to their ""zero"" values. The ""to"" parameter is used to specify which values to truncate, and it may be one of ""year"", ""quarter"", ""month"", ""week"", ""local_week"", ""day"", ""hour"", ""minute"", or ""second"". For example, if ""month"" is specified, then the local day becomes 1, and the hour, minute, and second all become 0. If ""week"" is given, then the datetime is set to the Monday of the week in which it occurs, and the time components are all set to 0. If you truncate to ""local_week"", then the first day of the week is locale-dependent. For example, in the en-US locale, the first day of the week is Sunday. $dt->set_locale( $locale ) Sets the object's locale. You can provide either a locale code like ""en-US"" or an object returned by DateTime::Locale->load. $dt->set_time_zone( $tz ) This method accepts either a time zone object or a string that can be passed as the ""name"" parameter to DateTime::TimeZone->new(). If the new time zone's offset is different from the old time zone, then the local time is adjusted accordingly. For example:   my $dt = DateTime->new(       year      => 2000,       month     => 5,       day       => 10,       hour      => 15,       minute    => 15,       time_zone => 'America/Los_Angeles',   );    print $dt->hour; # prints 15    $dt->set_time_zone( 'America/Chicago' );    print $dt->hour; # prints 17 If the old time zone was a floating time zone, then no adjustments to the local time are made, except to account for leap seconds. If the new time zone is floating, then the UTC time is adjusted in order to leave the local time untouched. Fans of Tsai Ming-Liang's films will be happy to know that this does work:   my $dt = DateTime->now( time_zone => 'Asia/Taipei' );    $dt->set_time_zone( 'Europe/Paris' ); Yes, now we can know ""ni3 na4 bian1 ji2dian3?"" $dt->set_formatter( $formatter ) Set the formatter for the object. See ""Formatters And Stringification"" for details. You can set this to undef to revert to the default formatter. Math Methods Like the set methods, math related methods always return the object itself, to allow for chaining:   $dt->add( days => 1 )->subtract( seconds => 1 ); $dt->duration_class() This returns DateTime::Duration, but exists so that a subclass of DateTime.pm can provide a different value. $dt->add_duration( $duration_object ) This method adds a DateTime::Duration to the current datetime. See the DateTime::Duration docs for more details. $dt->add( DateTime::Duration->new parameters ) This method is syntactic sugar around the add_duration() method. It simply creates a new DateTime::Duration object using the parameters given, and then calls the add_duration() method. $dt->subtract_duration( $duration_object ) When given a DateTime::Duration object, this method simply calls invert() on that object and passes that new duration to the add_duration method. $dt->subtract( DateTime::Duration->new parameters ) Like add(), this is syntactic sugar for the subtract_duration() method. $dt->subtract_datetime( $datetime ) This method returns a new DateTime::Duration object representing the difference between the two dates. The duration is relative to the object from which $datetime is subtracted. For example:     2003-03-15 00:00:00.00000000  -  2003-02-15 00:00:00.00000000  -------------------------------  = 1 month Note that this duration is not an absolute measure of the amount of time between the two datetimes, because the length of a month varies, as well as due to the presence of leap seconds. The returned duration may have deltas for months, days, minutes, seconds, and nanoseconds. $dt->delta_md( $datetime ) $dt->delta_days( $datetime ) Each of these methods returns a new DateTime::Duration object representing some portion of the difference between two datetimes. The delta_md() method returns a duration which contains only the month and day portions of the duration is represented. The delta_days() method returns a duration which contains only days. The delta_md and delta_days methods truncate the duration so that any fractional portion of a day is ignored. Both of these methods operate on the date portion of a datetime only, and so effectively ignore the time zone. Unlike the subtraction methods, these methods always return a positive (or zero) duration. $dt->delta_ms( $datetime ) Returns a duration which contains only minutes and seconds. Any day and month differences to minutes are converted to minutes and seconds. This method also always return a positive (or zero) duration. $dt->subtract_datetime_absolute( $datetime ) This method returns a new DateTime::Duration object representing the difference between the two dates in seconds and nanoseconds. This is the only way to accurately measure the absolute amount of time between two datetimes, since units larger than a second do not represent a fixed number of seconds. Note that because of leap seconds, this may not return the same result as doing this math based on the value returned by $dt->epoch(). Class Methods DateTime->DefaultLocale( $locale ) This can be used to specify the default locale to be used when creating DateTime objects. If unset, then ""en-US"" is used. DateTime->compare( $dt1, $dt2 ), DateTime->compare_ignore_floating( $dt1, $dt2 )   $cmp = DateTime->compare( $dt1, $dt2 );    $cmp = DateTime->compare_ignore_floating( $dt1, $dt2 ); Compare two DateTime objects. The semantics are compatible with Perl's sort() function; it returns -1 if $dt1 < $dt2, 0 if $dt1 == $dt2, 1 if $dt1 > $dt2. If one of the two DateTime objects has a floating time zone, it will first be converted to the time zone of the other object. This is what you want most of the time, but it can lead to inconsistent results when you compare a number of DateTime objects, some of which are floating, and some of which are in other time zones. If you want to have consistent results (because you want to sort a number of objects, for example), you can use the compare_ignore_floating() method:   @dates = sort { DateTime->compare_ignore_floating($a, $b) } @dates; In this case, objects with a floating time zone will be sorted as if they were UTC times. Since DateTime objects overload comparison operators, this:   @dates = sort @dates; is equivalent to this:   @dates = sort { DateTime->compare($a, $b) } @dates; DateTime objects can be compared to any other calendar class that implements the utc_rd_values() method. Testing Code That Uses DateTime If you are trying to test code that calls uses DateTime, you may want to be able to explicitly set the value returned by Perl's time() builtin. This builtin is called by DateTime->now() and DateTime->today(). You can override CORE::GLOBAL::time(), but this will only work if you do this before loading DateTime. If doing this is inconvenient, you can also override DateTime::_core_time():     no warnings 'redefine';     local *DateTime::_core_time = sub { return 42 }; DateTime is guaranteed to call this subroutine to get the current time() value. You can also override the _core_time() sub in a subclass of DateTime and use that. How DateTime Math Works It's important to have some understanding of how datetime math is implemented in order to effectively use this module and DateTime::Duration. Making Things Simple If you want to simplify your life and not have to think too hard about the nitty-gritty of datetime math, I have several recommendations: use the floating time zone If you do not care about time zones or leap seconds, use the ""floating"" timezone:   my $dt = DateTime->now( time_zone => 'floating' ); Math done on two objects in the floating time zone produces very predictable results. Note that in most cases you will want to start by creating an object in a specific zone and then convert it to the floating time zone. When an object goes from a real zone to the floating zone, the time for the object remains the same. This means that passing the floating zone to a constructor may not do what you want.   my $dt = DateTime->now( time_zone => 'floating' ); is equivalent to   my $dt = DateTime->now( time_zone => 'UTC' )->set_time_zone('floating'); This might not be what you wanted. Instead, you may prefer to do this:   my $dt = DateTime->now( time_zone => 'local' )->set_time_zone('floating'); use UTC for all calculations If you do care about time zones (particularly DST) or leap seconds, try to use non-UTC time zones for presentation and user input only. Convert to UTC immediately and convert back to the local time zone for presentation:   my $dt = DateTime->new( %user_input, time_zone => $user_tz );   $dt->set_time_zone('UTC');    # do various operations - store it, retrieve it, add, subtract, etc.    $dt->set_time_zone($user_tz);   print $dt->datetime; math on non-UTC time zones If you need to do date math on objects with non-UTC time zones, please read the caveats below carefully. The results DateTime.pm produces are predictable and correct, and mostly intuitive, but datetime math gets very ugly when time zones are involved, and there are a few strange corner cases involving subtraction of two datetimes across a DST change. If you can always use the floating or UTC time zones, you can skip ahead to Leap Seconds and Date Math date vs datetime math If you only care about the date (calendar) portion of a datetime, you should use either delta_md() or delta_days(), not subtract_datetime(). This will give predictable, unsurprising results, free from DST-related complications. subtract_datetime() and add_duration() You must convert your datetime objects to the UTC time zone before doing date math if you want to make sure that the following formulas are always true:   $dt2 - $dt1 = $dur   $dt1 + $dur = $dt2   $dt2 - $dur = $dt1 Note that using delta_days ensures that this formula always works, regardless of the timezone of the objects involved, as does using subtract_datetime_absolute(). Other methods of subtraction are not always reversible. never do math on two objects where only is in the floating time zone The date math code accounts for leap seconds whenever the DateTime object is not in the floating time zone. If you try to do math where one object is in the floating zone and the other isn't, the results will be confusing and wrong. Adding a Duration to a Datetime The parts of a duration can be broken down into five parts. These are months, days, minutes, seconds, and nanoseconds. Adding one month to a date is different than adding 4 weeks or 28, 29, 30, or 31 days. Similarly, due to DST and leap seconds, adding a day can be different than adding 86,400 seconds, and adding a minute is not exactly the same as 60 seconds. We cannot convert between these units, except for seconds and nanoseconds, because there is no fixed conversion between the two units, because of things like leap seconds, DST changes, etc. DateTime.pm always adds (or subtracts) days, then months, minutes, and then seconds and nanoseconds. If there are any boundary overflows, these are normalized at each step. For the days and months the local (not UTC) values are used. For minutes and seconds, the local values are used. This generally just works. This means that adding one month and one day to February 28, 2003 will produce the date April 1, 2003, not March 29, 2003.   my $dt = DateTime->new( year => 2003, month => 2, day => 28 );    $dt->add( months => 1, days => 1 );    # 2003-04-01 - the result On the other hand, if we add months first, and then separately add days, we end up with March 29, 2003:   $dt->add( months => 1 )->add( days => 1 );    # 2003-03-29 We see similar strangeness when math crosses a DST boundary:   my $dt = DateTime->new(       year      => 2003,       month     => 4,       day       => 5,       hour      => 1,       minute    => 58,       time_zone => ""America/Chicago"",   );    $dt->add( days => 1, minutes => 3 );   # 2003-04-06 02:01:00    $dt->add( minutes => 3 )->add( days => 1 );   # 2003-04-06 03:01:00 Note that if you converted the datetime object to UTC first you would get predictable results. If you want to know how many seconds a duration object represents, you have to add it to a datetime to find out, so you could do:  my $now = DateTime->now( time_zone => 'UTC' );  my $later = $now->clone->add_duration($duration);   my $seconds_dur = $later->subtract_datetime_absolute($now); This returns a duration which only contains seconds and nanoseconds. If we were add the duration to a different datetime object we might get a different number of seconds. DateTime::Duration supports three different end-of-month algorithms for adding months. This comes into play when an addition results in a day past the end of the month (for example, adding one month to January 30).  # 2010-08-31 + 1 month = 2010-10-01  $dt->add( months => 1, end_of_month => 'wrap' );   # 2010-01-30 + 1 month = 2010-02-28  $dt->add( months => 1, end_of_month => 'limit' );   # 2010-04-30 + 1 month = 2010-05-31  $dt->add( months => 1, end_of_month => 'preserve' ); By default, it uses ""wrap"" for positive durations and ""preserve"" for negative durations. See DateTime::Duration for a detailed explanation of these algorithms. If you need to do lots of work with durations, take a look at Rick Measham's DateTime::Format::Duration module, which lets you present information from durations in many useful ways. There are other subtract/delta methods in DateTime.pm to generate different types of durations. These methods are subtract_datetime(), subtract_datetime_absolute(), delta_md(), delta_days(), and delta_ms(). Datetime Subtraction Date subtraction is done solely based on the two object's local datetimes, with one exception to handle DST changes. Also, if the two datetime objects are in different time zones, one of them is converted to the other's time zone first before subtraction. This is best explained through examples: The first of these probably makes the most sense:   my $dt1 = DateTime->new(       year      => 2003,       month     => 5,       day       => 6,       time_zone => 'America/Chicago',   );    # not DST    my $dt2 = DateTime->new(       year      => 2003,       month     => 11,       day       => 6,       time_zone => 'America/Chicago',   );    # is DST    my $dur = $dt2->subtract_datetime($dt1);   # 6 months Nice and simple. This one is a little trickier, but still fairly logical:   my $dt1 = DateTime->new(       year      => 2003,       month     => 4,       day       => 5,       hour      => 1,       minute    => 58,       time_zone => ""America/Chicago"",   );    # is DST    my $dt2 = DateTime->new(       year      => 2003,       month     => 4,       day       => 7,       hour      => 2,       minute    => 1,       time_zone => ""America/Chicago"",   );    # not DST    my $dur = $dt2->subtract_datetime($dt1);    # 2 days and 3 minutes Which contradicts the result this one gives, even though they both make sense:   my $dt1 = DateTime->new(       year      => 2003,       month     => 4,       day       => 5,       hour      => 1,       minute    => 58,       time_zone => ""America/Chicago"",   );    # is DST    my $dt2 = DateTime->new(       year      => 2003,       month     => 4,       day       => 6,       hour      => 3,       minute    => 1,       time_zone => ""America/Chicago"",   );    # not DST    my $dur = $dt2->subtract_datetime($dt1);    # 1 day and 3 minutes This last example illustrates the ""DST"" exception mentioned earlier. The exception accounts for the fact 2003-04-06 only lasts 23 hours. And finally:   my $dt2 = DateTime->new(       year      => 2003,       month     => 10,       day       => 26,       hour      => 1,       time_zone => 'America/Chicago',   );    my $dt1 = $dt2->clone->subtract( hours => 1 );    my $dur = $dt2->subtract_datetime($dt1);   # 60 minutes This seems obvious until you realize that subtracting 60 minutes from $dt2 in the above example still leaves the clock time at ""01:00:00"". This time we are accounting for a 25 hour day. Reversibility Date math operations are not always reversible. This is because of the way that addition operations are ordered. As was discussed earlier, adding 1 day and 3 minutes in one call to add() is not the same as first adding 3 minutes and 1 day in two separate calls. If we take a duration returned from subtract_datetime() and then try to add or subtract that duration from one of the datetimes we just used, we sometimes get interesting results:   my $dt1 = DateTime->new(       year      => 2003,       month     => 4,       day       => 5,       hour      => 1,       minute    => 58,       time_zone => ""America/Chicago"",   );    my $dt2 = DateTime->new(       year      => 2003,       month     => 4,       day       => 6,       hour      => 3,       minute    => 1,       time_zone => ""America/Chicago"",   );    my $dur = $dt2->subtract_datetime($dt1);   # 1 day and 3 minutes    $dt1->add_duration($dur);   # gives us $dt2    $dt2->subtract_duration($dur);   # gives us 2003-04-05 02:58:00 - 1 hour later than $dt1 The subtract_duration() operation gives us a (perhaps) unexpected answer because it first subtracts one day to get 2003-04-05T03:01:00 and then subtracts 3 minutes to get the final result. If we explicitly reverse the order we can get the original value of $dt1. This can be facilitated by DateTime::Duration's calendar_duration() and clock_duration() methods:   $dt2->subtract_duration( $dur->clock_duration )       ->subtract_duration( $dur->calendar_duration ); Leap Seconds and Date Math The presence of leap seconds can cause even more anomalies in date math. For example, the following is a legal datetime:   my $dt = DateTime->new(       year      => 1972,       month     => 12,       day       => 31,       hour      => 23,       minute    => 59,       second    => 60,       time_zone => 'UTC'   ); If we do the following:  $dt->add( months => 1 ); Then the datetime is now ""1973-02-01 00:00:00"", because there is no 23:59:60 on 1973-01-31. Leap seconds also force us to distinguish between minutes and seconds during date math. Given the following datetime:   my $dt = DateTime->new(       year      => 1972,       month     => 12,       day       => 31,       hour      => 23,       minute    => 59,       second    => 30,       time_zone => 'UTC'   ); we will get different results when adding 1 minute than we get if we add 60 seconds. This is because in this case, the last minute of the day, beginning at 23:59:00, actually contains 61 seconds. Here are the results we get:   # 1972-12-31 23:59:30 - our starting datetime    $dt->clone->add( minutes => 1 );   # 1973-01-01 00:00:30 - one minute later    $dt->clone->add( seconds => 60 );   # 1973-01-01 00:00:29 - 60 seconds later    $dt->clone->add( seconds => 61 );   # 1973-01-01 00:00:30 - 61 seconds later Local vs. UTC and 24 hours vs. 1 day When math crosses a daylight saving boundary, a single day may have more or less than 24 hours. For example, if you do this:   my $dt = DateTime->new(       year      => 2003,       month     => 4,       day       => 5,       hour      => 2,       time_zone => 'America/Chicago',   );    $dt->add( days => 1 ); then you will produce an invalid local time, and therefore an exception will be thrown. However, this works:   my $dt = DateTime->new(       year      => 2003,       month     => 4,       day       => 5,       hour      => 2,       time_zone => 'America/Chicago',   );    $dt->add( hours => 24 ); and produces a datetime with the local time of ""03:00"". If all this makes your head hurt, there is a simple alternative. Just convert your datetime object to the ""UTC"" time zone before doing date math on it, and switch it back to the local time zone afterwards. This avoids the possibility of having date math throw an exception, and makes sure that 1 day equals 24 hours. Of course, this may not always be desirable, so caveat user! Overloading This module explicitly overloads the addition (+), subtraction (-), string and numeric comparison operators. This means that the following all do sensible things:   my $new_dt = $dt + $duration_obj;    my $new_dt = $dt - $duration_obj;    my $duration_obj = $dt - $new_dt;    foreach my $dt ( sort @dts ) { ... } Additionally, the fallback parameter is set to true, so other derivable operators (+=, -=, etc.) will work properly. Do not expect increment (++) or decrement (--) to do anything useful. The string comparison operators, eq or ne, will use the string value to compare with non-DateTime objects. DateTime objects do not have a numeric value, using == or <=> to compare a DateTime object with a non-DateTime object will result in an exception. To safely sort mixed DateTime and non-DateTime objects, use sort { $a cmp $b } @dates. The module also overloads stringification using the object's formatter, defaulting to iso8601() method. See ""Formatters And Stringification"" for details. Formatters And Stringification You can optionally specify a ""formatter"", which is usually a DateTime::Format::* object/class, to control the stringification of the DateTime object. Any of the constructor methods can accept a formatter argument:   my $formatter = DateTime::Format::Strptime->new(...);   my $dt = DateTime->new(year => 2004, formatter => $formatter); Or, you can set it afterwards:   $dt->set_formatter($formatter);   $formatter = $dt->formatter(); Once you set the formatter, the overloaded stringification method will use the formatter. If unspecified, the iso8601() method is used. A formatter can be handy when you know that in your application you want to stringify your DateTime objects into a special format all the time, for example to a different language. If you provide a formatter class name or object, it must implement a format_datetime method. This method will be called with just the DateTime object as its argument. CLDR Patterns The CLDR pattern language is both more powerful and more complex than strftime. Unlike strftime patterns, you often have to explicitly escape text that you do not want formatted, as the patterns are simply letters without any prefix. For example, ""yyyy-MM-dd"" is a valid CLDR pattern. If you want to include any lower or upper case ASCII characters as-is, you can surround them with single quotes ('). If you want to include a single quote, you must escape it as two single quotes ('').   'Today is ' EEEE   'It is now' h 'o''clock' a Spaces and any non-letter text will always be passed through as-is. Many CLDR patterns which produce numbers will pad the number with leading zeroes depending on the length of the format specifier. For example, ""h"" represents the current hour from 1-12. If you specify ""hh"" then the 1-9 will have a leading zero prepended. However, CLDR often uses five of a letter to represent the narrow form of a pattern. This inconsistency is necessary for backwards compatibility. CLDR often distinguishes between the ""format"" and ""stand-alone"" forms of a pattern. The format pattern is used when the thing in question is being placed into a larger string. The stand-alone form is used when displaying that item by itself, for example in a calendar. It also often provides three sizes for each item, wide (the full name), abbreviated, and narrow. The narrow form is often just a single character, for example ""T"" for ""Tuesday"", and may not be unique. CLDR provides a fairly complex system for localizing time zones that we ignore entirely. The time zone patterns just use the information provided by DateTime::TimeZone, and do not follow the CLDR spec. The output of a CLDR pattern is always localized, when applicable. CLDR provides the following patterns: G{1,3} The abbreviated era (BC, AD). GGGG The wide era (Before Christ, Anno Domini). GGGGG The narrow era, if it exists (and it mostly doesn't). y and y{3,} The year, zero-prefixed as needed. Negative years will start with a ""-"", and this will be included in the length calculation. In other, words the ""yyyyy"" pattern will format year -1234 as ""-1234"", not ""-01234"". yy This is a special case. It always produces a two-digit year, so ""1976"" becomes ""76"". Negative years will start with a ""-"", making them one character longer. Y{1,} The year in ""week of the year"" calendars, from $dt->week_year(). u{1,} Same as ""y"" except that ""uu"" is not a special case. Q{1,2} The quarter as a number (1..4). QQQ The abbreviated format form for the quarter. QQQQ The wide format form for the quarter. q{1,2} The quarter as a number (1..4). qqq The abbreviated stand-alone form for the quarter. qqqq The wide stand-alone form for the quarter. M{1,2] The numerical month. MMM The abbreviated format form for the month. MMMM The wide format form for the month. MMMMM The narrow format form for the month. L{1,2] The numerical month. LLL The abbreviated stand-alone form for the month. LLLL The wide stand-alone form for the month. LLLLL The narrow stand-alone form for the month. w{1,2} The week of the year, from $dt->week_number(). W The week of the month, from $dt->week_of_month(). d{1,2} The numeric day of the month. D{1,3} The numeric day of the year. F The day of the week in the month, from $dt->weekday_of_month(). g{1,} The modified Julian day, from $dt->mjd(). E{1,3} and eee The abbreviated format form for the day of the week. EEEE and eeee The wide format form for the day of the week. EEEEE and eeeee The narrow format form for the day of the week. e{1,2} The local numeric day of the week, from 1 to 7. This number depends on what day is considered the first day of the week, which varies by locale. For example, in the US, Sunday is the first day of the week, so this returns 2 for Monday. c The numeric day of the week from 1 to 7, treating Monday as the first of the week, regardless of locale. ccc The abbreviated stand-alone form for the day of the week. cccc The wide stand-alone form for the day of the week. ccccc The narrow format form for the day of the week. a The localized form of AM or PM for the time. h{1,2} The hour from 1-12. H{1,2} The hour from 0-23. K{1,2} The hour from 0-11. k{1,2} The hour from 1-24. j{1,2} The hour, in 12 or 24 hour form, based on the preferred form for the locale. In other words, this is equivalent to either ""h{1,2}"" or ""H{1,2}"". m{1,2} The minute. s{1,2} The second. S{1,} The fractional portion of the seconds, rounded based on the length of the specifier. This returned without a leading decimal point, but may have leading or trailing zeroes. A{1,} The millisecond of the day, based on the current time. In other words, if it is 12:00:00.00, this returns 43200000. z{1,3} The time zone short name. zzzz The time zone long name. Z{1,3} The time zone offset. ZZZZ The time zone short name and the offset as one string, so something like ""CDT-0500"". ZZZZZ The time zone offset as a sexagesimal number, so something like ""-05:00"". (This is useful for W3C format.) v{1,3} The time zone short name. vvvv The time zone long name. V{1,3} The time zone short name. VVVV The time zone long name. CLDR ""Available Formats"" The CLDR data includes pre-defined formats for various patterns such as ""month and day"" or ""time of day"". Using these formats lets you render information about a datetime in the most natural way for users from a given locale. These formats are indexed by a key that is itself a CLDR pattern. When you look these up, you get back a different CLDR pattern suitable for the locale. Let's look at some example We'll use 2008-02-05T18:30:30 as our example datetime value, and see how this is rendered for the en-US and fr-FR locales. MMMd The abbreviated month and day as number. For en-US, we get the pattern MMM d, which renders as Feb 5. For fr-FR, we get the pattern d MMM, which renders as 5 févr.. yQQQ The year and abbreviated quarter of year. For en-US, we get the pattern QQQ y, which renders as Q1 2008. For fr-FR, we get the same pattern, QQQ y, which renders as T1 2008. hm The 12-hour time of day without seconds. For en-US, we get the pattern h:mm a, which renders as 6:30 PM. For fr-FR, we get the exact same pattern and rendering. The available formats for each locale are documented in the POD for that locale. To get back the format, you use the $locale->format_for method. For example:     say $dt->format_cldr( $dt->locale->format_for('MMMd') ); strftime Patterns The following patterns are allowed in the format string given to the $dt->strftime() method: %a The abbreviated weekday name. %A The full weekday name. %b The abbreviated month name. %B The full month name. %c The default datetime format for the object's locale. %C The century number (year/100) as a 2-digit integer. %d The day of the month as a decimal number (range 01 to 31). %D Equivalent to %m/%d/%y. This is not a good standard format if you want folks from both the United States and the rest of the world to understand the date! %e Like %d, the day of the month as a decimal number, but a leading zero is replaced by a space. %F Equivalent to %Y-%m-%d (the ISO 8601 date format) %G The ISO 8601 year with century as a decimal number. The 4-digit year corresponding to the ISO week number (see %V). This has the same format and value as %Y, except that if the ISO week number belongs to the previous or next year, that year is used instead. (TZ) %g Like %G, but without century, i.e., with a 2-digit year (00-99). %h Equivalent to %b. %H The hour as a decimal number using a 24-hour clock (range 00 to 23). %I The hour as a decimal number using a 12-hour clock (range 01 to 12). %j The day of the year as a decimal number (range 001 to 366). %k The hour (24-hour clock) as a decimal number (range 0 to 23); single digits are preceded by a blank. (See also %H.) %l The hour (12-hour clock) as a decimal number (range 1 to 12); single digits are preceded by a blank. (See also %I.) %m The month as a decimal number (range 01 to 12). %M The minute as a decimal number (range 00 to 59). %n A newline character. %N The fractional seconds digits. Default is 9 digits (nanoseconds).   %3N   milliseconds (3 digits)   %6N   microseconds (6 digits)   %9N   nanoseconds  (9 digits) This value will always be rounded down to the nearest integer. %p Either `AM' or `PM' according to the given time value, or the corresponding strings for the current locale. Noon is treated as `pm' and midnight as `am'. %P Like %p but in lowercase: `am' or `pm' or a corresponding string for the current locale. %r The time in a.m. or p.m. notation. In the POSIX locale this is equivalent to `%I:%M:%S %p'. %R The time in 24-hour notation (%H:%M). (SU) For a version including the seconds, see %T below. %s The number of seconds since the epoch. %S The second as a decimal number (range 00 to 61). %t A tab character. %T The time in 24-hour notation (%H:%M:%S). %u The day of the week as a decimal, range 1 to 7, Monday being 1. See also %w. %U The week number of the current year as a decimal number, range 00 to 53, starting with the first Sunday as the first day of week 01. See also %V and %W. %V The ISO 8601:1988 week number of the current year as a decimal number, range 01 to 53, where week 1 is the first week that has at least 4 days in the current year, and with Monday as the first day of the week. See also %U and %W. %w The day of the week as a decimal, range 0 to 6, Sunday being 0. See also %u. %W The week number of the current year as a decimal number, range 00 to 53, starting with the first Monday as the first day of week 01. %x The default date format for the object's locale. %X The default time format for the object's locale. %y The year as a decimal number without a century (range 00 to 99). %Y The year as a decimal number including the century. %z The time-zone as hour offset from UTC. Required to emit RFC822-conformant dates (using ""%a, %d %b %Y %H:%M:%S %z""). %Z The time zone or name or abbreviation. %% A literal `%' character. %{method} Any method name may be specified using the format %{method} name where ""method"" is a valid DateTime.pm object method. DateTime.pm and Storable DateTime implements Storable hooks in order to reduce the size of a serialized DateTime object. THE DATETIME PROJECT ECOSYSTEM This module is part of a larger ecosystem of modules in the DateTime family. DateTime::Set The DateTime::Set module represents sets (including recurrences) of datetimes. Many modules return sets or recurrences. Format Modules The various format modules exist to parse and format datetimes. For example, DateTime::Format::HTTP parses dates according to the RFC 1123 format:   my $datetime       = DateTime::Format::HTTP->parse_datetime('Thu Feb  3 17:03:55 GMT 1994');    print DateTime::Format::HTTP->format_datetime($datetime); Most format modules are suitable for use as a formatter with a DateTime object. All format modules start with DateTime::Format::. Calendar Modules There are a number of modules on CPAN that implement non-Gregorian calendars, such as the Chinese, Mayan, and Julian calendars. All calendar modules start with DateTime::Calendar::. Event Modules There are a number of modules that calculate the dates for events, such as Easter, Sunrise, etc. All event modules start with DateTime::Event::. Others There are many other modules that work with DateTime, including modules in the DateTimeX namespace, as well as others. See the datetime wiki and search.cpan.org for more details. KNOWN BUGS The tests in 20infinite.t seem to fail on some machines, particularly on Win32. This appears to be related to Perl's internal handling of IEEE infinity and NaN, and seems to be highly platform/compiler/phase of moon dependent. If you don't plan to use infinite datetimes you can probably ignore this. This will be fixed (perhaps) in future versions. SEE ALSO A Date with Perl - a talk I've given at a few YAPCs. datetime@perl.org mailing list http://datetime.perl.org/ SUPPORT Bugs may be submitted through the RT bug tracker (or bug-datetime@rt.cpan.org). There is a mailing list available for users of this distribution, mailto:datetime@perl.org. I am also usually active on IRC as 'drolsky' on irc://irc.perl.org. DONATIONS If you'd like to thank me for the work I've done on this module, please consider making a ""donation"" to me via PayPal. I spend a lot of free time creating free software, and would appreciate any support you'd care to offer. Please note that I am not suggesting that you must do this in order for me to continue working on this particular software. I will continue to do so, inasmuch as I have in the past, for as long as it interests me. Similarly, a donation made in this way will probably not make me work on this software much more, unless I get so many donations that I can consider working on free software full time (let's all have a chuckle at that together). To donate, log into PayPal and send money to autarch@urth.org, or use the button at http://www.urth.org/~autarch/fs-donation.html. AUTHOR Dave Rolsky <autarch@urth.org> CONTRIBUTORS Ben Bennett <fiji@limey.net> Christian Hansen <chansen@cpan.org> Daisuke Maki <dmaki@cpan.org> David E. Wheeler <david@justatheory.com> Doug Bell <madcityzen@gmail.com> Flávio Soibelmann Glock <fglock@gmail.com> Gregory Oschwald <oschwald@gmail.com> Iain Truskett <deceased> Jason McIntosh <jmac@jmac.org> Joshua Hoblitt <jhoblitt@cpan.org> Karen Etheridge <ether@cpan.org> Michael Conrad <mike@nrdvana.net> Nick Tonkin <1nickt@users.noreply.github.com> Ovid <curtis_ovid_poe@yahoo.com> Ricardo Signes <rjbs@cpan.org> Richard Bowen <bowen@cpan.org> Ron Hill <rkhill@cpan.org> viviparous <viviparous@prc> COPYRIGHT AND LICENCE This software is Copyright (c) 2016 by Dave Rolsky. This is free software, licensed under:   The Artistic License 2.0 (GPL Compatible) × Module Install Instructions To install DateTime, simply copy and paste either of the commands in to your terminal cpanm                      cpanm DateTime CPAN shell                      perl -MCPAN -e shell                     install DateTime For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Date & Time"	"Time::Moment"	"https://metacpan.org/pod/Time::Moment"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Time::Moment - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Christian Hansen  /  0.38 (CHANSEN on 2016-01-21) 0.37 (CHANSEN on 2015-12-17) 0.36 (CHANSEN on 2015-10-11) 0.31 (CHANSEN on 2015-09-28) 0.30 (CHANSEN on 2015-09-23) 0.29 (CHANSEN on 2015-09-17) 0.28 (CHANSEN on 2015-09-12) 0.17 (CHANSEN on 2014-08-07) 0.35 (CHANSEN on 2015-10-10) 0.34 (CHANSEN on 2015-10-10) 0.33 (CHANSEN on 2015-10-10) 0.32 (CHANSEN on 2015-10-09) 0.27 (CHANSEN on 2015-09-02) 0.26 (CHANSEN on 2015-08-28) 0.25 (CHANSEN on 2015-07-07) 0.24 (CHANSEN on 2015-05-20) 0.23 (CHANSEN on 2015-05-19) 0.22 (CHANSEN on 2015-02-14) 0.21 (CHANSEN on 2014-11-23) 0.20 (CHANSEN on 2014-11-04) 0.19 (CHANSEN on 2014-10-08) 0.18 (CHANSEN on 2014-09-09) 0.16 (CHANSEN on 2014-03-18) 0.15 (CHANSEN on 2014-02-23) 0.14 (CHANSEN on 2014-01-26) 0.13 (CHANSEN on 2014-01-04) 0.12 (CHANSEN on 2013-12-28) 0.11 (CHANSEN on 2013-12-15) 0.10 (CHANSEN on 2013-12-07) 0.09 (CHANSEN on 2013-12-05) 0.08 (CHANSEN on 2013-12-03) 0.07 (CHANSEN on 2013-12-02) 0.06 (CHANSEN on 2013-12-01) 0.05 (CHANSEN on 2013-11-30) 0.04 (CHANSEN on 2013-11-30) 0.03 (CHANSEN on 2013-11-28) 0.02 (CHANSEN on 2013-11-25) 0.01 (CHANSEN on 2013-11-24) Time-Moment-0.38 57 ++ 57 ++  / Time::Moment 21 Jan 2016 23:36:51 GMT Module version: 0.38 Source (raw) Browse (raw) Changes Clone repository Issues (7) Testers (746 / 3 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (147.33Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.37 (CHANSEN on 2015-12-17) 0.36 (CHANSEN on 2015-10-11) 0.31 (CHANSEN on 2015-09-28) 0.30 (CHANSEN on 2015-09-23) 0.29 (CHANSEN on 2015-09-17) 0.28 (CHANSEN on 2015-09-12) 0.17 (CHANSEN on 2014-08-07) 0.35 (CHANSEN on 2015-10-10) 0.34 (CHANSEN on 2015-10-10) 0.33 (CHANSEN on 2015-10-10) 0.32 (CHANSEN on 2015-10-09) 0.27 (CHANSEN on 2015-09-02) 0.26 (CHANSEN on 2015-08-28) 0.25 (CHANSEN on 2015-07-07) 0.24 (CHANSEN on 2015-05-20) 0.23 (CHANSEN on 2015-05-19) 0.22 (CHANSEN on 2015-02-14) 0.21 (CHANSEN on 2014-11-23) 0.20 (CHANSEN on 2014-11-04) 0.19 (CHANSEN on 2014-10-08) 0.18 (CHANSEN on 2014-09-09) 0.16 (CHANSEN on 2014-03-18) 0.15 (CHANSEN on 2014-02-23) 0.14 (CHANSEN on 2014-01-26) 0.13 (CHANSEN on 2014-01-04) 0.12 (CHANSEN on 2013-12-28) 0.11 (CHANSEN on 2013-12-15) 0.10 (CHANSEN on 2013-12-07) 0.09 (CHANSEN on 2013-12-05) 0.08 (CHANSEN on 2013-12-03) 0.07 (CHANSEN on 2013-12-02) 0.06 (CHANSEN on 2013-12-01) 0.05 (CHANSEN on 2013-11-30) 0.04 (CHANSEN on 2013-11-30) 0.03 (CHANSEN on 2013-11-28) 0.02 (CHANSEN on 2013-11-25) 0.01 (CHANSEN on 2013-11-24) Diff with version 0.37 (CHANSEN on 2015-12-17) 0.36 (CHANSEN on 2015-10-11) 0.31 (CHANSEN on 2015-09-28) 0.30 (CHANSEN on 2015-09-23) 0.29 (CHANSEN on 2015-09-17) 0.28 (CHANSEN on 2015-09-12) 0.17 (CHANSEN on 2014-08-07) 0.35 (CHANSEN on 2015-10-10) 0.34 (CHANSEN on 2015-10-10) 0.33 (CHANSEN on 2015-10-10) 0.32 (CHANSEN on 2015-10-09) 0.27 (CHANSEN on 2015-09-02) 0.26 (CHANSEN on 2015-08-28) 0.25 (CHANSEN on 2015-07-07) 0.24 (CHANSEN on 2015-05-20) 0.23 (CHANSEN on 2015-05-19) 0.22 (CHANSEN on 2015-02-14) 0.21 (CHANSEN on 2014-11-23) 0.20 (CHANSEN on 2014-11-04) 0.19 (CHANSEN on 2014-10-08) 0.18 (CHANSEN on 2014-09-09) 0.16 (CHANSEN on 2014-03-18) 0.15 (CHANSEN on 2014-02-23) 0.14 (CHANSEN on 2014-01-26) 0.13 (CHANSEN on 2014-01-04) 0.12 (CHANSEN on 2013-12-28) 0.11 (CHANSEN on 2013-12-15) 0.10 (CHANSEN on 2013-12-07) 0.09 (CHANSEN on 2013-12-05) 0.08 (CHANSEN on 2013-12-03) 0.07 (CHANSEN on 2013-12-02) 0.06 (CHANSEN on 2013-12-01) 0.05 (CHANSEN on 2013-11-30) 0.04 (CHANSEN on 2013-11-30) 0.03 (CHANSEN on 2013-11-28) 0.02 (CHANSEN on 2013-11-25) 0.01 (CHANSEN on 2013-11-24) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 36 PAUSE users 21 non-PAUSE users. CHANSEN Christian Hansen Dependencies Carp Time::HiRes XSLoader and possibly others CPAN Testers List Reverse dependencies Dependency graph × Time-Moment-0.38 NAME SYNOPSIS DESCRIPTION CONSTRUCTORS new now now_utc from_epoch from_object from_string from_rd from_jd from_mjd INSTANCE METHODS year quarter month week day_of_year day_of_quarter day_of_month day_of_week hour minute minute_of_day second second_of_day millisecond millisecond_of_day microsecond microsecond_of_day nanosecond nanosecond_of_day epoch offset jd mjd rd with with_year with_quarter with_month with_week with_day_of_year with_day_of_quarter with_day_of_month with_day_of_week with_hour with_minute with_minute_of_day with_second with_second_of_day with_millisecond with_millisecond_of_day with_microsecond with_microsecond_of_day with_nanosecond with_nanosecond_of_day with_offset_same_instant with_offset_same_local plus_years plus_months plus_weeks plus_days plus_hours plus_minutes plus_seconds plus_milliseconds plus_microseconds plus_nanoseconds minus_years minus_months minus_weeks minus_days minus_hours minus_minutes minus_seconds minus_milliseconds minus_microseconds minus_nanoseconds delta_years delta_months delta_weeks delta_days delta_hours delta_minutes delta_seconds delta_milliseconds delta_microseconds delta_nanoseconds at_utc at_midnight at_noon at_last_day_of_year at_last_day_of_quarter at_last_day_of_month is_before is_after is_equal compare is_leap_year to_string strftime length_of_year length_of_quarter length_of_month length_of_week_year utc_rd_values utc_rd_as_seconds local_rd_values local_rd_as_seconds OVERLOADED OPERATORS stringification comparison SERIALIZATION Storable JSON CBOR Sereal FREEZE/THAW EXAMPLE FORMAT STRINGS ISO 8601 - Data elements and interchange formats Date Time of day Date and time of day ISO 9075 - Information technology - Database languages - SQL RFC 1123 - Requirements for Internet Hosts RFC 2616 - HTTP/1.1 RFC 5322 - Internet Message Format TIME ZONES Converting from instant time to designated time zone Converting from local time to designated time zone The Effect of Daylight Saving Time DIAGNOSTICS THREAD SAFETY SEE ALSO SUPPORT Bugs / Feature Requests SOURCE CODE AUTHOR COPYRIGHT NAME Time::Moment - Represents a date and time of day with an offset from UTC SYNOPSIS     $tm = Time::Moment->new(         year       => 2012,         month      => 12,         day        => 24,         hour       => 15,         minute     => 30,         second     => 45,         nanosecond => 123456789,         offset     => 0,     );     $tm = Time::Moment->now;     $tm = Time::Moment->now_utc;     $tm = Time::Moment->from_epoch($seconds);     $tm = Time::Moment->from_object($object);     $tm = Time::Moment->from_string($string);     $tm = Time::Moment->from_rd($rd);     $tm = Time::Moment->from_jd($jd);     $tm = Time::Moment->from_mjd($mjd);          $year         = $tm->year;                      # [1, 9999]     $quarter      = $tm->quarter;                   # [1, 4]     $month        = $tm->month;                     # [1, 12]     $week         = $tm->week;                      # [1, 53]          $day          = $tm->day_of_year;               # [1, 366]     $day          = $tm->day_of_quarter;            # [1, 92]     $day          = $tm->day_of_month;              # [1, 31]     $day          = $tm->day_of_week;               # [1=Monday, 7=Sunday]          $hour         = $tm->hour;                      # [0, 23]     $minute       = $tm->minute;                    # [0, 59]     $minute       = $tm->minute_of_day;             # [0, 1439]     $second       = $tm->second;                    # [0, 59]     $second       = $tm->second_of_day;             # [0, 86_399]     $millisecond  = $tm->millisecond;               # [0, 999]     $millisecond  = $tm->millisecond_of_day;        # [0, 86_399_999]     $microsecond  = $tm->microsecond;               # [0, 999_999]     $microsecond  = $tm->microsecond_of_day;        # [0, 86_399_999_999]     $nanosecond   = $tm->nanosecond;                # [0, 999_999_999]     $nanosecond   = $tm->nanosecond_of_day;         # [0, 86_399_999_999_999]          $epoch        = $tm->epoch;     $offset       = $tm->offset;                    # [-1080, 1080] (±18:00)          $jd           = $tm->jd;                        # Julian Date     $mjd          = $tm->mjd;                       # Modified Julian Date     $rd           = $tm->rd;                        # Rata Die          $tm2          = $tm1->with($adjuster);     $tm2          = $tm1->with_year($year);     $tm2          = $tm1->with_quarter($quarter);     $tm2          = $tm1->with_month($month);     $tm2          = $tm1->with_week($week);     $tm2          = $tm1->with_day_of_year($day);     $tm2          = $tm1->with_day_of_quarter($day);     $tm2          = $tm1->with_day_of_month($day);     $tm2          = $tm1->with_day_of_week($day);     $tm2          = $tm1->with_hour($hour);     $tm2          = $tm1->with_minute($minute);     $tm2          = $tm1->with_minute_of_day($minute);     $tm2          = $tm1->with_second($second);     $tm2          = $tm1->with_second_of_day($second);     $tm2          = $tm1->with_millisecond($millisecond);     $tm2          = $tm1->with_millisecond_of_day($millisecond);     $tm2          = $tm1->with_microsecond($microsecond);     $tm2          = $tm1->with_microsecond_of_day($microsecond);     $tm2          = $tm1->with_nanosecond($nanosecond);     $tm2          = $tm1->with_nanosecond_of_day($nanosecond);          $tm2          = $tm1->with_offset_same_instant($offset);     $tm2          = $tm1->with_offset_same_local($offset);          $tm2          = $tm1->plus_years($years);     $tm2          = $tm1->plus_months($months);     $tm2          = $tm1->plus_weeks($weeks);     $tm2          = $tm1->plus_days($days);     $tm2          = $tm1->plus_hours($hours);     $tm2          = $tm1->plus_minutes($minutes);     $tm2          = $tm1->plus_seconds($seconds);     $tm2          = $tm1->plus_milliseconds($milliseconds);     $tm2          = $tm1->plus_microseconds($microseconds);     $tm2          = $tm1->plus_nanoseconds($nanoseconds);          $tm2          = $tm1->minus_years($years);     $tm2          = $tm1->minus_months($months);     $tm2          = $tm1->minus_weeks($weeks);     $tm2          = $tm1->minus_days($days);     $tm2          = $tm1->minus_hours($hours);     $tm2          = $tm1->minus_minutes($minutes);     $tm2          = $tm1->minus_seconds($seconds);     $tm2          = $tm1->minus_milliseconds($milliseconds);     $tm2          = $tm1->minus_microseconds($microseconds);     $tm2          = $tm1->minus_nanoseconds($nanoseconds);          $years        = $tm1->delta_years($tm2);     $months       = $tm1->delta_months($tm2);     $weeks        = $tm1->delta_weeks($tm2);     $days         = $tm1->delta_days($tm2);     $hours        = $tm1->delta_hours($tm2);     $minutes      = $tm1->delta_minutes($tm2);     $seconds      = $tm1->delta_seconds($tm2);     $milliseconds = $tm1->delta_milliseconds($tm2);     $microseconds = $tm1->delta_microseconds($tm2);     $nanoseconds  = $tm1->delta_nanoseconds($tm2);          $tm2          = $tm1->at_utc;          $tm2          = $tm1->at_midnight;              # T00:00:00.0     $tm2          = $tm1->at_noon;                  # T12:00:00.0          $tm2          = $tm1->at_last_day_of_year;     $tm2          = $tm1->at_last_day_of_quarter;     $tm2          = $tm1->at_last_day_of_month;          $boolean      = $tm1->is_before($tm2);     $boolean      = $tm1->is_after($tm2);     $boolean      = $tm1->is_equal($tm2);          $integer      = $tm1->compare($tm2);          $boolean      = $tm->is_leap_year;          $string       = $tm->to_string;     $string       = $tm->strftime($format);          $integer      = $tm->length_of_year;            # [365, 366]     $integer      = $tm->length_of_quarter;         # [90, 92]     $integer      = $tm->length_of_month;           # [28, 31]     $integer      = $tm->length_of_week_year;       # [52, 53]          @values       = $tm->utc_rd_values;     $seconds      = $tm->utc_rd_as_seconds;     @values       = $tm->local_rd_values;     $seconds      = $tm->local_rd_as_seconds;          $integer      = $tm1 <=> $tm2;          $boolean      = $tm1 == $tm2;     $boolean      = $tm1 != $tm2;     $boolean      = $tm1 <  $tm2;     $boolean      = $tm1 >  $tm2;     $boolean      = $tm1 <= $tm2;     $boolean      = $tm1 >= $tm2;          $string       = ""$tm""; DESCRIPTION Time::Moment is an immutable object representing a date and time of day with an offset from UTC in the ISO 8601 calendar system. Time is measured in nanoseconds since 0001-01-01T00Z. In Time:Moment leap seconds are ignored. It is assumed that there are exactly 86,400,000,000,000 nanoseconds per day. Time::Moment can represent all epoch integers from -62,135,596,800 to 2,534,02,300,799; this range suffices to measure times to nanosecond precision for any instant that is within 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z. CONSTRUCTORS new     $tm = Time::Moment->new(         year       => 2012,         month      => 12,         day        => 24,         hour       => 15,         minute     => 30,         second     => 45,         nanosecond => 123456789,         offset     => 0,     ); Constructs an instance of Time::Moment from the given components. Parameters: year The year [1, 9999]. month The month of the year [1, 12]. day The day of the month [1, 31]. The day must be valid for the year and month, otherwise an exception is raised. hour The hour of the day [0, 23]. minute The minute of the hour [0, 59]. second The second of the minute [0, 59]. nanosecond The nanosecond of the second [0, 999_999_999]. offset The offset from UTC in minutes [-1080, 1080] (±18:00). now     $tm = Time::Moment->now; Constructs an instance of Time::Moment that is set to the current date and time from the system clock in the system time zone, with the offset set to the system's time zone offset from UTC. now_utc     $tm = Time::Moment->now_utc; Constructs an instance of Time::Moment that is set to the current date and time from the system clock in the UTC time zone. from_epoch     $tm = Time::Moment->from_epoch($seconds);     $tm = Time::Moment->from_epoch($seconds, $nanosecond);     $tm = Time::Moment->from_epoch($seconds [, nanosecond => 0] [, precision => 6]); Constructs an instance of Time::Moment from the given seconds from the epoch of 1970-01-01T00Z. Fractional seconds is supported if the constructor is invoked with seconds only, the default precision is 6 (microseconds). Parameters: nanosecond     $tm = Time::Moment->from_epoch($seconds, nanosecond => 0); The optional parameter nanosecond [0, 999_999_999] specifies the nanosecond of the second. precision     $tm = Time::Moment->from_epoch($seconds, precision => 6); The optional parameter precision [0, 9] specifies the precision of the fractional seconds. The default precision is 6 (microseconds). from_object     $tm = Time::Moment->from_object($object); Constructs an instance of Time::Moment from the given object. If the given object is an instance of Time::Moment it's returned otherwise an attempt is made to coerce the given object to an instance of Time::Moment. Time::Moment implements coercion handlers for the following object types: DateTime     $tm = Time::Moment->from_object( DateTime->now ); The given DateTime object must be within the supported range and must have a time zone or an offset from UTC, coercing from the 'floating' time zone is not supported. Time::Piece     $tm = Time::Moment->from_object( scalar Time::Piece::localtime() ); The given Time::Piece object must be within the supported date range. The coercion scheme is extensible and implemented as documented in Params::Coerce:     $tm = Params::Coerce::coerce('Time::Moment', scalar Time::Piece::localtime());     $tm = Params::Coerce::coerce('Time::Moment', DateTime->now); Time::Moment also implements a coercion handler from Time::Moment to DateTime and Time::Piece:     $dt = Params::Coerce::coerce('DateTime', Time::Moment->now);     $tp = Params::Coerce::coerce('Time::Piece', Time::Moment->now); from_string     $tm = Time::Moment->from_string($string);     $tm = Time::Moment->from_string($string [, lenient => false]); Constructs an instance of Time::Moment from the given string. The string must consist of a complete date representation and time of day followed by a zone designator. The time of day may be reduced to hour of the day, the second of the minute may have a decimal fraction. The decimal sign can be either the comma [,] or the full stop [.]. A decimal fraction must have at least one digit and may have a total of nine digits, if the fractional precision is greater than nine digits, the value will be truncated. The following are examples of complete date and time of day representations:     Basic format:                 Example:     YYYYMMDDThhmmssZ              20121224T121530Z     YYYYMMDDThhmmss±hhmm          20121224T121530+0100     YYYYMMDDThhmmss±hh            20121224T121530+01          YYYYMMDDThhmmss.ssZ           20121224T121530.500Z     YYYYMMDDThhmmss.ss±hhmm       20121224T121530.500+0100     YYYYMMDDThhmmss.ss±hh         20121224T121530.500+01          YYYYMMDDThhZ                  20121224T12Z              (reduced accuracy)     YYYYMMDDThhmmZ                20121224T1215Z            (reduced accuracy)     YYYYMMDDThhmm±hhmm            20121224T1215+0100        (reduced accuracy)     YYYYMMDDThhmm±hh              20121224T1215+01          (reduced accuracy)          Extended format:              Example:     YYYY-MM-DDThh:mm:ssZ          2012-12-24T12:15:30Z     YYYY-MM-DDThh:mm:ss±hh:mm     2012-12-24T12:15:30+01:00     YYYY-MM-DDThh:mm:ss±hh        2012-12-24T12:15:30+01          YYYY-MM-DDThh:mm:ss.ssZ       2012-12-24T12:15:30.500Z     YYYY-MM-DDThh:mm:ss.ss±hh:mm  2012-12-24T12:15:30.500+01:00     YYYY-MM-DDThh:mm:ss.ss±hh     2012-12-24T12:15:30.500+01          YYYY-MM-DDThhZ                2012-12-24T12Z            (reduced accuracy)     YYYY-MM-DDThh:mmZ             2012-12-24T12:15Z         (reduced accuracy)     YYYY-MM-DDThh:mm±hh:mm        2012-12-24T12:15+01:00    (reduced accuracy)     YYYY-MM-DDThh:mm±hh           2012-12-24T12:15+01       (reduced accuracy) Where representations using calendar dates are shown, ordinal dates or week dates may be substituted. This ISO 8601 profile correspond to a subset of ISO 8601:2004 4.3 Date and time of day. If the optional boolean parameter lenient is true, the following examples are also accepted:     YYYY-MM-DD hh:mm:ssZ          2012-12-24 12:15:30Z     YYYY-MM-DD hh:mm:ssz          2012-12-24 12:15:30z     YYYY-MM-DD hh:mm:ss±hhmm      2012-12-24 12:15:30+0100     YYYY-MM-DD hh:mm:ss±hh:mm     2012-12-24 12:15:30+01:00     YYYY-MM-DD hh:mm:ss±hh        2012-12-24 12:15:30+01          YYYY-MM-DD hh:mm:ss.ssZ       2012-12-24 12:15:30.500Z     YYYY-MM-DD hh:mm:ss.ssz       2012-12-24 12:15:30.500z     YYYY-MM-DD hh:mm:ss.ss±hhmm   2012-12-24 12:15:30.500+0100     YYYY-MM-DD hh:mm:ss.ss±hh:mm  2012-12-24 12:15:30.500+01:00     YYYY-MM-DD hh:mm:ss.ss±hh     2012-12-24 12:15:30.500+01          YYYY-MM-DD hh:mmZ             2012-12-24 12:15Z     YYYY-MM-DD hh:mmz             2012-12-24 12:15z     YYYY-MM-DD hh:mm±hhmm         2012-12-24 12:15+0100     YYYY-MM-DD hh:mm±hh:mm        2012-12-24 12:15+01:00     YYYY-MM-DD hh:mm±hh           2012-12-24 12:15+01          YYYY-MM-DD hh:mm:ss ±hh:mm    2012-12-24 12:15:30 +01:00     YYYY-MM-DD hh:mm:ss ±hhmm     2012-12-24 12:15:30 +0100     YYYY-MM-DD hh:mm:ss ±hh       2012-12-24 12:15:30 +01     YYYY-MM-DD hh:mm:ss GMT       2012-12-24 12:15:30 GMT     YYYY-MM-DD hh:mm:ss GMT±hh    2012-12-24 12:15:30 GMT+01     YYYY-MM-DD hh:mm:ss UTC       2012-12-24 12:15:30 UTC     YYYY-MM-DD hh:mm:ss UTC±hh    2012-12-24 12:15:30 UTC+01          YYYY-MM-DD hh:mm:ss.ss ±hhmm  2012-12-24 12:15:30.500 +0100     YYYY-MM-DD hh:mm:ss.ss ±hh:mm 2012-12-24 12:15:30.500 +01:00     YYYY-MM-DD hh:mm:ss.ss ±hh    2012-12-24 12:15:30.500 +01          YYYY-MM-DD hh:mm ±hh:mm       2012-12-24 12:15 +01:00     YYYY-MM-DD hh:mm ±hhmm        2012-12-24 12:15 +0100     YYYY-MM-DD hh:mm ±hh          2012-12-24 12:15 +01 The string representation may consist of a mixture of the basic format and the extended format. The time designator [T] may be in lower case [t] or replaced with a single space. A single space is also accepted between the time of day and the zone designator. The UTC designator [Z] may also be in lower case [z]. The literal string GMT or UTC may be used as a UTC designator and may have an offset. Usage of these string representations is strongly discouraged as they do not conform to the ISO 8601 standard. from_rd     $tm = Time::Moment->from_rd($rd);     $tm = Time::Moment->from_rd($rd [, offset => 0] [, precision => 3] [, epoch => 0]); Constructs an instance of Time::Moment from the given Rata Die. The Rata Die is a count of days elapsed since 0000-12-31T00. The fractional part corresponds to the fraction of the day after midnight. The minimum acceptable Rata Die is 1 which corresponds to 0001-01-01T00. Parameters: offset     $tm = Time::Moment->from_rd($rd, offset => 0); The optional parameter offset [-1080, 1080] (±18:00) specifies the offset from UTC in minutes. The default offset is 0. precision     $tm = Time::Moment->from_rd($rd, precision => 3); The optional parameter precision [0, 9] specifies the precision of the fractional seconds. The default precision is 3 (milliseconds). epoch     $tm = Time::Moment->from_rd($rd, epoch => 0); The optional parameter epoch specifies the epoch date relative to 0000-12-31T00. The epoch date for the Rata Die is 0. from_jd     $tm = Time::Moment->from_jd($jd);     $tm = Time::Moment->from_jd($jd [, precision => 3] [, epoch => -1721424.5]); Constructs an instance of Time::Moment from the given Julian Date. The Julian Date is a count of days elapsed since -4713-11-24T12Z. The fractional part corresponds to the fraction of the day after noon. The minimum acceptable Julian Date is 1721425.5 which corresponds to 0001-01-01T00Z. Parameters: precision     $tm = Time::Moment->from_jd($jd, precision => 3); The optional parameter precision [0, 9] specifies the precision of the fractional seconds. The default precision is 3 (milliseconds). epoch     $tm = Time::Moment->from_jd($jd, epoch => -1721424.5); The optional parameter epoch specifies the epoch date relative to 0000-12-31T00Z. The epoch date for the Julian Date is -1721424.5. from_mjd     $tm = Time::Moment->from_mjd($mjd);     $tm = Time::Moment->from_mjd($mjd [, precision => 3] [, epoch => 678576]); Constructs an instance of Time::Moment from the given Modified Julian Date. The Modified Julian Date is a count of days elapsed since 1858-11-17T00Z. The fractional part corresponds to the fraction of the day after midnight. The minimum acceptable Modified Julian Date is -678575 which corresponds to 0001-01-01T00Z. Parameters: precision     $tm = Time::Moment->from_mjd($mjd, precision => 3); The optional parameter precision [0, 9] specifies the precision of the fractional seconds. The default precision is 3 (milliseconds). epoch     $tm = Time::Moment->from_mjd($mjd, epoch => 678576); The optional parameter epoch specifies the epoch date relative to 0000-12-31T00Z. The epoch date for the Modified Julian Date is 678576. INSTANCE METHODS year     $year = $tm->year; Returns the year [1, 9999]. quarter     $quarter = $tm->quarter; Returns the quarter of the year [1, 4]. month     $month = $tm->month; Returns the month of the year [1, 12]. week     $week = $tm->week; Returns the week of the year [1, 53]. day_of_year     $day = $tm->day_of_year; Returns the day of the year [1, 366]. day_of_quarter     $day = $tm->day_of_quarter; Returns the day of the quarter [1, 92]. day_of_month     $day = $tm->day_of_month; Returns the day of the month [1, 31]. day_of_week     $day = $tm->day_of_week; Returns the day of the week [1=Monday, 7=Sunday]. hour     $hour = $tm->hour; Returns the hour of the day [0, 23]. minute     $minute = $tm->minute; Returns the minute of the hour [0, 59]. minute_of_day     $minute = $tm->minute_of_day; Returns the minute of the day [0, 1439]. second     $second = $tm->second; Returns the second of the minute [0, 59]. second_of_day     $second = $tm->second_of_day; Returns the second of the day [0, 86_399]. millisecond     $millisecond = $tm->millisecond; Returns the millisecond of the second [0, 999]. millisecond_of_day     $millisecond = $tm->millisecond_of_day; Returns the millisecond of the day [0, 86_399_999]. microsecond     $microsecond = $tm->microsecond; Returns the microsecond of the second [0, 999_999]. microsecond_of_day     $microsecond = $tm->microsecond_of_day; Returns the microsecond of the day [0, 86_399_999_999]. nanosecond     $nanosecond = $tm->nanosecond; Returns the nanosecond of the second [0, 999_999_999]. nanosecond_of_day     $nanosecond = $tm->nanosecond_of_day; Returns the nanosecond of the day [0, 86_399_999_999_999]. epoch     $epoch = $tm->epoch; Returns the number of integral seconds from the epoch of 1970-01-01T00Z. offset     $offset = $tm->offset; Returns the offset from UTC in minutes [-1080, 1080] (±18:00). jd     $jd = $tm->jd;     $jd = $tm->jd([precision => 3]); Returns the Julian Date. The Julian Date is a count of days elapsed since -4713-11-24T12Z. The fractional part corresponds to the fraction of the day after noon. The optional named parameter precision [0, 9] specifies the precision of the fractional seconds. The default precision is 3 (milliseconds). mjd     $mjd = $tm->mjd;     $mjd = $tm->mjd([precision => 3]); Returns the Modified Julian Date. The Modified Julian Date is a count of days elapsed since 1858-11-17T00Z. The fractional part corresponds to the fraction of the day after midnight. The optional named parameter precision [0, 9] specifies the precision of the fractional seconds. The default precision is 3 (milliseconds). rd     $rd = $tm->rd;     $rd = $tm->rd([precision => 3]); Returns the Rata Die. The Rata Die is a count of days elapsed since 0000-12-31T00. The fractional part corresponds to the fraction of the day after midnight. The optional named parameter precision [0, 9] specifies the precision of the fractional seconds. The default precision is 3 (milliseconds). with     $tm2 = $tm1->with($adjuster); Returns a copy of this instance adjusted by the given adjuster. The adjuster is a CODE reference invoked with an instance of Time::Moment and is expected to return an instance of Time::Moment. Please see Time::Moment::Adjusters for available adjusters. with_year     $tm2 = $tm1->with_year($year); Returns a copy of this instance with the given year [1, 9999] altered. The day of the month of the date is unchanged unless the day does not exist in the month. In that case, the day is set to the last day of the month. with_quarter     $tm2 = $tm1->with_quarter($quarter); Returns a copy of this instance with the given quarter of the year [1, 4] altered. The day of the month of the date is unchanged unless the day does not exist in the month of the quarter. In that case, the day is set to the last day of the month. with_month     $tm2 = $tm1->with_month($month); Returns a copy of this instance with the given month of the year [1, 12] altered. The day of the month of the date is unchanged unless the day does not exist in the given month. In that case, the day is set to the last day of the given month. with_week     $tm2 = $tm1->with_week($week); Returns a copy of this instance with the given week of the year [1, 53] altered. The week must be valid for the year, otherwise an exception is raised. with_day_of_year     $tm2 = $tm1->with_day_of_year($day); Returns a copy of this instance with the given day of the year [1, 366] altered. The day must be valid for the year, otherwise an exception is raised. with_day_of_quarter     $tm2 = $tm1->with_day_of_quarter($day); Returns a copy of this instance with the given day of the quarter [1, 92] altered. The day must be valid for the year and quarter, otherwise an exception is raised. with_day_of_month     $tm2 = $tm1->with_day_of_month($day); Returns a copy of this instance with the given day of the month [1, 31] altered. The day must be valid for the year and month, otherwise an exception is raised. with_day_of_week     $tm2 = $tm1->with_day_of_week($day); Returns a copy of this instance with the given day of the week [1=Monday, 7=Sunday] altered. with_hour     $tm2 = $tm1->with_hour($hour); Returns a copy of this instance with the given hour of the day [0, 23] altered. with_minute     $tm2 = $tm1->with_minute($minute); Returns a copy of this instance with the given minute of the hour [0, 59] altered. with_minute_of_day     $tm2 = $tm1->with_minute_of_day($minute); Returns a copy of this instance with the given minute of the day [0, 1439] altered, any lower-order time elements is unaltered. with_second     $tm2 = $tm1->with_second($second); Returns a copy of this instance with the given second of the minute [0, 59] altered. with_second_of_day     $tm2 = $tm1->with_second_of_day($second); Returns a copy of this instance with the given second of the day [0, 86_399] altered, any lower-order time elements is unaltered. with_millisecond     $tm2 = $tm1->with_millisecond($millisecond); Returns a copy of this instance with the given millisecond of the second [0, 999] altered. The nanosecond of the second is replaced with the given millisecond multiplied by 1,000,000. with_millisecond_of_day     $tm2 = $tm1->with_millisecond_of_day($millisecond); Returns a copy of this instance with the given millisecond of the day [0, 86_400_000] altered. A millisecond value of 86_400_000 (T24:00) is normalized to midnight of the following day, any lower-order time elements is truncated. with_microsecond     $tm2 = $tm1->with_microsecond($microsecond); Returns a copy of this instance with the given microsecond of the second [0, 999_999] altered. The nanosecond of the second is replaced with the given microsecond multiplied by 1,000. with_microsecond_of_day     $tm2 = $tm1->with_microsecond_of_day($microsecond); Returns a copy of this instance with the given microsecond of the day [0, 86_400_000_000] altered. A microsecond value of 86_400_000_000 (T24:00) is normalized to midnight of the following day, any lower-order time elements is truncated. with_nanosecond     $tm2 = $tm1->with_nanosecond($nanosecond); Returns a copy of this instance with the given nanosecond of the second [0, 999_999_999] altered. with_nanosecond_of_day     $tm2 = $tm1->with_nanosecond_of_day($nanosecond); Returns a copy of this instance with the given nanosecond of the day [0, 86_400_000_000_000] altered. A nanosecond value of 86_400_000_000_000 (T24:00) is normalized to midnight of the following day. with_offset_same_instant     $tm2 = $tm1->with_offset_same_instant($offset); Returns a copy of this instance with the given offset from UTC in minutes [-1080, 1080] (±18:00) altered. The resulting time is at the same instant.     $tm = Time::Moment->from_string('2012-12-24T15-05')                       ->with_offset_same_instant(0);     say $tm; # 2012-12-24T20Z with_offset_same_local     $tm2 = $tm1->with_offset_same_local($offset); Returns a copy of this instance with the given offset from UTC in minutes [-1080, 1080] (±18:00) altered. The resulting time has the same local time.     $tm = Time::Moment->from_string('2012-12-24T15-05')                       ->with_offset_same_local(0);     say $tm; # 2012-12-24T15Z plus_years     $tm2 = $tm1->plus_years($years); Returns a copy of this instance with the given number of years added. The day of the month of the date is unchanged unless the day does not exist in the resulting month. In that case, the day is set to the last day of the resulting month. For example, 2012-02-29 plus one year results in 2013-02-28. plus_months     $tm2 = $tm1->plus_months($months); Returns a copy of this instance with the given number of months added. The day of the month of the date is unchanged unless the day does not exist in the resulting month. In that case, the day is set to the last day of the resulting month. For example, 2013-01-31 plus one month results in 2013-02-28; 2013-02-28 plus one month results in 2013-03-28. plus_weeks     $tm2 = $tm1->plus_weeks($weeks); Returns a copy of this instance with the given number of weeks added. plus_days     $tm2 = $tm1->plus_days($days); Returns a copy of this instance with the given number of days added. plus_hours     $tm2 = $tm1->plus_hours($hours); Returns a copy of this instance with the given number of hours added. plus_minutes     $tm2 = $tm1->plus_minutes($minutes); Returns a copy of this instance with the given number of minutes added. plus_seconds     $tm2 = $tm1->plus_seconds($seconds); Returns a copy of this instance with the given number of seconds added. plus_milliseconds     $tm2 = $tm1->plus_milliseconds($milliseconds); Returns a copy of this instance with the given number of milliseconds added. plus_microseconds     $tm2 = $tm1->plus_microseconds($microseconds); Returns a copy of this instance with the given number of microseconds added. plus_nanoseconds     $tm2 = $tm1->plus_nanoseconds($nanoeconds); Returns a copy of this instance with the given number of nanoseconds added. minus_years     $tm2 = $tm1->minus_years($years); Returns a copy of this instance with the given number of years subtracted. The day of the month of the date is unchanged unless the day does not exist in the resulting month. In that case, the day is set to the last day of the resulting month. For example, 2012-02-29 minus one year results in 2011-02-28. minus_months     $tm2 = $tm1->minus_months($months); Returns a copy of this instance with the given number of months subtracted. The day of the month of the date is unchanged unless the day does not exist in the resulting month. In that case, the day is set to the last day of the resulting month. For example, 2013-03-31 minus one month results in 2013-02-28; 2013-02-28 minus one month results in 2013-01-28. minus_weeks     $tm2 = $tm1->minus_weeks($weeks); Returns a copy of this instance with the given number of weeks subtracted. minus_days     $tm2 = $tm1->minus_days($days); Returns a copy of this instance with the given number of days subtracted. minus_hours     $tm2 = $tm1->minus_hours($hours); Returns a copy of this instance with the given number of hours subtracted. minus_minutes     $tm2 = $tm1->minus_minutes($minutes); Returns a copy of this instance with the given number of minutes subtracted. minus_seconds     $tm2 = $tm1->minus_seconds($seconds); Returns a copy of this instance with the given number of seconds subtracted. minus_milliseconds     $tm2 = $tm1->minus_milliseconds($milliseconds); Returns a copy of this instance with the given number of milliseconds subtracted. minus_microseconds     $tm2 = $tm1->minus_microseconds($microseconds); Returns a copy of this instance with the given number of microseconds subtracted. minus_nanoseconds     $tm2 = $tm1->minus_nanoseconds($nanoseconds); Returns a copy of this instance with the given number of nanoseconds subtracted. delta_years     $years = $tm->delta_years($other); Returns the difference between the local date of this moment and the other in terms of complete years. The result will be negative if the local date of the other moment is before this. delta_months     $months = $tm->delta_months($other); Returns the difference between the local date of this moment and the other in terms of complete months. The result will be negative if the local date of the other moment is before this. delta_weeks     $weeks = $tm->delta_weeks($other); Returns the difference between the local date of this moment and the other in terms of complete weeks. The result will be negative if the local date of the other moment is before this. delta_days     $days = $tm->delta_days($other); Returns the difference between the local date of this moment and the other in terms of complete days. The result will be negative if the local date of the other moment is before this. delta_hours     $hours = $tm->delta_hours($other); Returns the difference between the instant of this moment and the other in terms of complete hours. The result will be negative if the instant of the other moment is before this. delta_minutes     $minutes = $tm->delta_minutes($other); Returns the difference between the instant of this moment and the other in terms of complete minutes. The result will be negative if the instant of the other moment is before this. delta_seconds     $seconds = $tm->delta_seconds($other); Returns the difference between the instant of this moment and the other in terms of complete seconds. The result will be negative if the instant of the other moment is before this. delta_milliseconds     $milliseconds = $tm->delta_milliseconds($other); Returns the difference between the instant of this moment and the other in terms of complete milliseconds. The result will be negative if the instant of the other moment is before this. delta_microseconds     $microseconds = $tm->delta_microseconds($other); Returns the difference between the instant of this moment and the other in terms of complete microseconds. The result will be negative if the instant of the other moment is before this. delta_nanoseconds     $nanoseconds = $tm->delta_nanoseconds($other); Returns the difference between the instant of this moment and the other in terms of complete nanoseconds. The result will be negative if the instant of the other moment is before this. at_utc     $tm2 = $tm1->at_utc; Returns a copy of this instance with the offset from UTC set to zero. This method is equivalent to:     $tm2 = $tm1->with_offset_same_instant(0); at_midnight     $tm2 = $tm1->at_midnight; Returns a copy of this instance with the time of day set to midnight, T00:00:00.0. This method is equivalent to:     $tm2 = $tm1->with_hour(0)                ->with_minute(0)                ->with_second(0)                ->with_nanosecond(0); at_noon     $tm2 = $tm1->at_noon; Returns a copy of this instance with the time of day set to noon, T12:00:00.0. This method is equivalent to:     $tm2 = $tm1->with_hour(12)                ->with_minute(0)                ->with_second(0)                ->with_nanosecond(0); at_last_day_of_year     $tm2 = $tm1->at_last_day_of_year; Returns a copy of this instance with the date adjusted to the last day of the year, the time of the day is unaltered. at_last_day_of_quarter     $tm2 = $tm1->at_last_day_of_quarter; Returns a copy of this instance with the date adjusted to the last day of the quarter, the time of the day is unaltered. at_last_day_of_month     $tm2 = $tm1->at_last_day_of_month; Returns a copy of this instance with the date adjusted to the last day of the month, the time of the day is unaltered. is_before     $boolean = $tm->is_before($other); Returns a boolean indicating whether or not the instant of this time is before the other time. is_after     $boolean = $tm->is_after($other); Returns a boolean indicating whether or not the instant of this time is after the other time. is_equal     $boolean = $tm->is_equal($other); Returns a boolean indicating whether or not the instant of this time is equal the other time. compare     $integer = $tm->compare($other); Returns an integer indicating whether the instant of this time is before, after or equal the other time. Returns a value less than zero if this time is before the other; zero if this date is equal the other time; a value greater than zero if this time is after the other time. is_leap_year     $boolean = $tm->is_leap_year; Returns a boolean indicating whether or not the year of the local date of this moment is a leap year. to_string     $string = $tm->to_string;     $string = $tm->to_string([reduced => false]); Returns a string representation of the instance. If the optional named boolean parameter reduced is true a shorter representation is attempted. The string will be in one of the following representations:     YYYY-MM-DDThh:mm                (only if reduced => true)     YYYY-MM-DDThh:mm:ss     YYYY-MM-DDThh:mm:ss.fff     YYYY-MM-DDThh:mm:ss.ffffff     YYYY-MM-DDThh:mm:ss.fffffffff Followed by a zone designator in one of the following representations:     Z     ±hh                             (only if reduced => true)     ±hh:mm The shortest representation will be used where the omitted parts are implied to be zero. strftime     $string = $tm->strftime($format); Formats time according to the conversion specifications in the given $format string. The format string consists of zero or more conversion specifications and ordinary characters. All ordinary characters are copied directly into the resulting string. A conversion specification consists of a percent sign % and one other character. The following conversion specifications are supported: %a Replaced by the C locale's abbreviated day of the week name. Example: Mon, Tue, ..., Sun. %A Replaced by the C locale's full day of the week name. Example: Monday, Tuesday, ..., Sunday. %b Replaced by the C locale's abbreviated month name. Example: Jan, Feb, ..., Dec. %B Replaced by the C locale's full month name. Example: January, February, ..., December. %c Replaced by the C locale's date and time representation. Equivalent to ""%a %b %e %H:%M:%S %Y"". %C Replaced by the year divided by 100 and truncated to an integer, as a decimal number [00, 99]. %d Replaced by the day of the month as a decimal number [01, 31]. %D Equivalent to ""%m/%d/%y"". %e Replaced by the day of the month as a decimal number [1, 31]; a single digit is preceded by a space. %f Replaced by the fractional second including the preceding decimal point or by an empty string if no fractional seconds are present. This conversion specification permits use of an optional maximum field width [0, 9] where the default field width of 0 will use the shortest of the following representations:     .fff        (millisecond)     .ffffff     (microsecond)     .fffffffff  (nanosecond) Example:     $tm = Time::Moment->from_string('2012-12-24T15:30:45.123456Z');     $tm->strftime('%f');    # '.123456'     $tm->strftime('%3f');   # '.123'     $tm->strftime('%9f');   # '.123456000'          $tm = Time::Moment->from_string('2012-12-24T15:30:45Z');     $tm->strftime('%f');    # ''     $tm->strftime('%3f');   # '' %3f is replaced by decimal point and exactly three fractional digits (zero-padded on the right or truncated if needed) if fractional seconds are present. This conversion specification is an extension to the ""IEEE Std 1003.1"". %F Equivalent to ""%Y-%m-%d"". %g Replaced by the last 2 digits of the year of the week as a decimal number [00, 99]. %G Replaced by the week-based year as a decimal number [0001, 9999]. %h Equivalent to %b. %H Replaced by the hour of day (24-hour clock) as a decimal number [00, 23]. %I Replaced by the hour of day (12-hour clock) as a decimal number [01, 12]. %j Replaced by the day of the year as a decimal number [001, 366]. %k Replaced by the hour of day (24-hour clock) as a decimal number [1, 23]; a single digit is preceded by a space. This conversion specification is an extension to the ""IEEE Std 1003.1"". %l Replaced by the hour of day (12-hour clock) as a decimal number [1, 12]; a single digit is preceded by a space. This conversion specification is an extension to the ""IEEE Std 1003.1"". %m Replaced by the month of the year as a decimal number [01, 12]. %M Replaced by the minute of hour as a decimal number [00, 59]. %n Replaced by a <newline> character. %N Replaced by the fractional second as a decimal number. This conversion specification permits use of an optional maximum field width [0, 9] where the default field width of 0 will use the shortest of the following representations:     fff        (millisecond)     ffffff     (microsecond)     fffffffff  (nanosecond) Example:     $tm = Time::Moment->from_string('2012-12-24T15:30:45.123456Z');     $tm->strftime('%N');    # '123456'     $tm->strftime('%3N');   # '123'     $tm->strftime('%9N');   # '123456000' %3N is replaced by exactly three fractional digits (zero-padded on the right or truncated if needed). This conversion specification is an extension to the ""IEEE Std 1003.1"". %p Replaced by the C locale's meridian notation. Example: AM, PM. %r Replaced by the C locale's time in a.m. and p.m. notation. Equivalent to ""%I:%M:%S %p"". %R Replaced by the time in 24-hour notation. Equivalent to ""%H:%M"". %s Replaced by the number of seconds from the epoch of 1970-01-01T00:00:00Z as a decimal number. This conversion specification is an extension to the ""IEEE Std 1003.1"". %S Replaced by the second of hour as a decimal number [00, 59]. %t Replaced by a <tab> character. %T Replaced by the time of day. Equivalent to ""%H:%M:%S"". %u Replaced by the day of the week as a decimal number [1, 7], with 1 representing Monday. %U Replaced by the week number of the year as a decimal number [00, 53]. The first Sunday of January is the first day of week 1; days in the new year before this are in week 0. %V Replaced by the week number of the year (Monday as the first day of the week) as a decimal number [01, 53]. If the week containing 1 January has four or more days in the new year, then it is considered week 1. Otherwise, it is the last week of the previous year, and the next week is week 1. Both January 4th and the first Thursday of January are always in week 1. %w Replaced by the day of the week as a decimal number [0, 6], with 0 representing Sunday. %W Replaced by the week number of the year as a decimal number [00, 53]. The first Monday of January is the first day of week 1; days in the new year before this are in week 0. %x Replaced by the C locale's date representation. Equivalent to ""%m/%d/%y"". %X Replaced by the C locale's time representation. Equivalent to ""%H:%M:%S"". %y Replaced by the last two digits of the year as a decimal number [00, 99]. %Y Replaced by the year as a decimal number [0001, 9999]. %z Replaced by the offset from UTC in the ISO 8601 basic format (±hhmm). %Z Replaced by the offset from UTC in the ISO 8601 extended format or by UTC designator (±hh:mm or Z). %% Replaced by %. length_of_year     $integer = $tm->length_of_year; Returns the length of the year in days [365, 366]. length_of_quarter     $integer = $tm->length_of_quarter; Returns the length of the quarter of the year in days [90, 92]. length_of_month     $integer = $tm->length_of_month; Returns the length of the month of the year in days [28, 31]. length_of_week_year     $integer = $tm->length_of_week_year; Returns the length of the week of the year in weeks [52, 53]. utc_rd_values     ($rdn, $sod, $nanosecond) = $tm->utc_rd_values; Returns a list of three elements: $rdn The number of integral days from the Rata Die epoch of 0000-12-31. $sod The second of the day [0, 86_399]. $nanosecond The nanosecond of the second [0, 999_999_999]. utc_rd_as_seconds     $seconds = $tm->utc_rd_as_seconds; Returns the number of integral seconds from the Rata Die epoch of 0000-12-31T00:00:00Z. local_rd_values     ($rdn, $sod, $nanosecond) = $tm->local_rd_values; Returns a list of three elements: $rdn The number of integral days from the Rata Die epoch of 0000-12-31. $sod The second of the day [0, 86_399]. $nanosecond The nanosecond of the second [0, 999_999_999]. local_rd_as_seconds     $seconds = $tm->local_rd_as_seconds; Returns the number of integral seconds from the Rata Die epoch of 0000-12-31T00:00:00. OVERLOADED OPERATORS stringification     $string = ""$tm""; The $string will be in one of the following representations:     YYYY-MM-DDThh:mm:ss     YYYY-MM-DDThh:mm:ss.fff     YYYY-MM-DDThh:mm:ss.ffffff     YYYY-MM-DDThh:mm:ss.fffffffff Followed by a zone designator in one of the following representations:     Z     ±hh:mm The shortest representation will be used where the omitted parts are implied to be zero. This representation is conformant with ISO 8601 profiles, such as: RFC 3339 Date and Time on the Internet: Timestamps RFC 4287 The Atom Syndication Format W3C Date and Time Formats HTML5 XML Schema The to_string method or the strftime format string ""%Y-%m-%dT%H:%M:%S%f%Z"" produces an equivalent string representation:     ""$tm"" eq $tm->to_string;     ""$tm"" eq $tm->strftime(""%Y-%m-%dT%H:%M:%S%f%Z""); The total length of the string representation will be between 20 and 35 characters (inclusive). comparison     $integer      = $tm1 <=> $tm2;          $boolean      = $tm1 == $tm2;     $boolean      = $tm1 != $tm2;     $boolean      = $tm1 <  $tm2;     $boolean      = $tm1 >  $tm2;     $boolean      = $tm1 <= $tm2;     $boolean      = $tm1 >= $tm2; SERIALIZATION Storable The serialized representation of a Time::Moment is a string of 16 bytes that contains MAGIC (2 bytes), time zone offset from UTC (2 bytes), the number of days from Rata Die (4 bytes), second of the day (4 bytes) and nanosecond of the second (4 bytes). The total size of the serialized Time::Moment instance using nfreeze is 34 bytes. JSON Time::Moment implements a TO_JSON method that returns the stringified representation of the instance. CBOR Time::Moment implements a TO_CBOR method that returns the stringified representation of the instance using tag 0 (standard date/time string). See CBOR::XS, RFC 7049 Section 2.4.1 and eg/cbor.pl for an example how to roundtrip instances of Time::Moment. Sereal Sereal version 2.030 or later implements support for the generic serialization protocol FREEZE/THAW. FREEZE/THAW Time::Moment implements a FREEZE method that returns the stringified representation of the instance and a THAW method according to the serialization protocol specified in Types::Serialiser. EXAMPLE FORMAT STRINGS ISO 8601 - Data elements and interchange formats Date Calendar date - 24 December 2012     Basic format:               Example:     %Y%m%d                      20121224     %y%m                        201212      (reduced accuracy)      Extended format:            Example:     %Y-%m-%d                    2012-12-24     %Y-%m                       2012-12     (reduced accuracy) Ordinal date - 24 December 2012     Basic format:               Example:     %Y%j                        2012359          Extended format:            Example:     %Y-%j                       2012-359 Week date - Monday, 24 December 2012     Basic format:               Example:     %GW%V%u                     2012W521     %GW%V                       2012W52     (reduced accuracy)      Extended format:            Example:     %G-W%V-%u                   2012-W52-1     %G-W%V                      2012-W52    (reduced accuracy) Time of day Local time - 30 minutes and 45 seconds past 15 hours     Basic format:               Example:     %H%M%S                      153045     %H%M                        1530        (reduced accuracy)      Extended format:            Example:     %H:%M:%S                    15:30:45     %H:%M                       15:30       (reduced accuracy) Local time with decimal fractions - 30 minutes and 45 and a half second past 15 hours     Basic format:               Example:     %H%M%S%f                    153045.500     %H%M%S.%1N                  153045.5      Extended format:            Example:     %H:%M:%S%f                  15:30:45.500     %H:%M:%S.%1N                15:30:45.5 Local time and the difference from UTC - 30 minutes and 45 seconds past 15 hours, one hour ahead of UTC     Basic format:               Example:     %H%M%S%z                    153045+0100      Extended format:            Example:     %H:%M:%S%Z                  15:30:45+01:00 Date and time of day Combinations of calendar date and time of day     Basic format:               Example:     %Y%m%dT%H%M%S%z             20121224T153045+0100     %Y%m%dT%H%M%S%f%z           20121224T153045.500+0100     %Y%m%dT%H%M%z               20121224T1530+0100      (reduced accuracy)      Extended format:            Example:     %Y-%m-%dT%H:%M:%S%Z         2012-12-24T15:30:45+01:00     %Y-%m-%dT%H:%M:%S%f%Z       2012-12-24T15:30:45.500+01:00     %Y-%m-%dT%H:%M%Z            2012-12-24T15:30+01:00  (reduced accuracy) Combinations of ordinal date and time of day     Basic format:               Example:     %Y%jT%H%M%S%z               2012359T153045+0100     %Y%jT%H%M%S%f%z             2012359T153045.500+0100     %Y%jT%H%M%z                 2012359T1530+0100       (reduced accuracy)      Extended format:            Example:     %Y-%jT%H:%M:%S%Z            2012-359T15:30:45+01:00     %Y-%jT%H:%M:%S%f%Z          2012-359T15:30:45.500+01:00     %Y-%jT%H:%M%Z               2012-359T15:30+01:00    (reduced accuracy) Combinations of week date and time of day     Basic format:               Example:     %GW%V%uT%H%M%S%z            2012W521T153045+0100     %GW%V%uT%H%M%S%f%z          2012W521T153045.500+0100     %GW%V%uT%H%M%f%z            2012W521T1530+0100      (reduced accuracy)      Extended format:            Example:     %G-W%V-%uT%H:%M:%S%Z        2012-W52-1T15:30:45+01:00     %G-W%V-%uT%H:%M:%S%f%Z      2012-W52-1T15:30:45.500+01:00     %G-W%V-%uT%H:%M%Z           2012-W52-1T15:30+01:00  (reduced accuracy) ISO 9075 - Information technology - Database languages - SQL Literal values from Part 2: Foundation (SQL/Foundation)     Date:                       Example:     %Y-%m-%d                    2012-12-24          Time:                       Example:     %H:%M:%S                    15:30:45     %H:%M:%S%f                  15:30:45.500          Timestamp:                  Example:     %Y-%m-%d %H:%M:%S           2012-12-24 15:30:45     %Y-%m-%d %H:%M:%S %:z       2012-12-24 15:30:45 +01:00     %Y-%m-%d %H:%M:%S%f         2012-12-24 15:30:45.500     %Y-%m-%d %H:%M:%S%f %:z     2012-12-24 15:30:45.500 +01:00 RFC 1123 - Requirements for Internet Hosts RFC 822 as updated by RFC 1123.     Format:                     Example:     %a, %d %b %Y %H:%M:%S %z    Mon, 24 Dec 2012 15:30:45 +0100 RFC 2616 - HTTP/1.1 RFC 2616 - 3.3.1 Full Date.     Format:                     Example:     %a, %d %b %Y %H:%M:%S GMT   Mon, 24 Dec 2012 14:30:45 GMT An HTTP date value represents time as an instance of UTC:     $string = $tm->at_utc->strftime(""%a, %d %b %Y %H:%M:%S GMT""); RFC 5322 - Internet Message Format RFC 5322 - 3.3. Date and Time Specification.     Format:                     Example:     %a, %d %b %Y %H:%M:%S %z    Mon, 24 Dec 2012 15:30:45 +0100     %a, %d %b %Y %H:%M %z       Mon, 24 Dec 2012 15:30 +0100     %d %b %Y %H:%M:%S %z        24 Dec 2012 15:30:45 +0100     %d %b %Y %H:%M %z           24 Dec 2012 15:30 +0100 TIME ZONES An instance of Time::Moment represents an unambiguous point in time, but it's not time zone aware. When performing arithmetic on the local date/time or altering the components of the local date/time it may be necessary to use a time zone to convert to the correct representation. Time::Moment is API compatible with DateTime::TimeZone and DateTime::TimeZone::Tzfile. Converting from instant time to designated time zone     $tm = Time::Moment->new(         year   => 2012,         month  => 12,         day    => 24,         hour   => 15     );     $zone   = DateTime::TimeZone->new(name => 'America/New_York');     $offset = $zone->offset_for_datetime($tm) / 60;          say $tm->with_offset_same_instant($offset); # 2012-12-24T10-05 Converting from local time to designated time zone     $tm = Time::Moment->new(         year   => 2012,         month  => 12,         day    => 24,         hour   => 15     );     $zone   = DateTime::TimeZone->new(name => 'America/New_York');     $offset = $zone->offset_for_local_datetime($tm) / 60;          say $tm->with_offset_same_local($offset); # 2012-12-24T15-05 The Effect of Daylight Saving Time The time zone Europe/Brussels has 01:00 UTC as standard time, and 02:00 UTC as daylight savings time, with transition dates according to the European Summer Time.     $zone = DateTime::TimeZone->new(name => 'Europe/Brussels');          sub convert_from_instant {         my ($tm, $zone) = @_;         my $offset = $zone->offset_for_datetime($tm) / 60;         return $tm->with_offset_same_instant($offset);     }          sub convert_from_local {         my ($tm, $zone) = @_;         my $offset = $zone->offset_for_local_datetime($tm) / 60;         return $tm->with_offset_same_local($offset);     } European Summer Time begins (clocks go forward) at 01:00 UTC on the last Sunday in March, in 2014 the transition date was March 30.     $tm1 = Time::Moment->from_string('2014-03-29T12+01');     $tm2 = $tm1->plus_hours(24);     say convert_from_instant($tm2, $zone); # 2014-03-30T13+02     say convert_from_local($tm2, $zone);   # 2014-03-30T12+02 During the transition from standard time to daylight savings time, the local time interval between 02:00:00 and 02:59:59 does not exist. Local time values in that interval are invalid. DateTime::TimeZone raises an exception when attempting to convert non-existing local time.     $tm1 = Time::Moment->from_string('2014-03-29T22+01');     $tm2 = $tm1->plus_hours(4);     say convert_from_instant($tm2, $zone); # 2014-03-30T03+02     say convert_from_local($tm2, $zone);   # raises an exception European Summer Time ends (clocks go backward) at 01:00 UTC on the last Sunday in October, in 2014 the transition date was October 26.     $tm1 = Time::Moment->from_string('2014-10-25T12+02');     $tm2 = $tm1->plus_hours(24);     say convert_from_instant($tm2, $zone); # 2014-10-26T11+01     say convert_from_local($tm2, $zone);   # 2014-10-26T12+01 During the transition from daylight savings time to standard time, the local time interval between 02:00:00 and 02:59:59 is repeated. Local time values in that interval are ambiguous because they occur twice. When DateTime::TimeZone converts an ambiguous local time it returns the numerically lowest offset (usually the standard one).     $tm1 = Time::Moment->from_string('2014-10-25T22+02');     $tm2 = $tm1->plus_hours(4);     say convert_from_instant($tm2, $zone); # 2014-10-26T02+02     say convert_from_local($tm2, $zone);   # 2014-10-26T02+01 DIAGNOSTICS (F) Usage: %s Method called with wrong number of arguments. (F) Parameter '%s' is out of range (F) Parameter '%s' is out of the range [%d, %d] (F) Cannot coerce object of type %s to Time::Moment (F) Could not parse the given string (F) %s is not an instance of Time::Moment (F) A %s object can only be compared to another %s object ('%s', '%s') THREAD SAFETY Time::Moment is thread safe. SEE ALSO DateTime Time::Piece SUPPORT Bugs / Feature Requests Please report any bugs or feature requests through the issue tracker at https://github.com/chansen/p5-time-moment/issues. You will be notified automatically of any progress on your issue. SOURCE CODE This is open source software. The code repository is available for public review and contribution under the terms of the license. https://github.com/chansen/p5-time-moment     git clone https://github.com/chansen/p5-time-moment AUTHOR Christian Hansen chansen@cpan.org COPYRIGHT Copyright 2013-2016 by Christian Hansen. This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself. × Module Install Instructions To install Time::Moment, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Time::Moment CPAN shell                      perl -MCPAN -e shell                     install Time::Moment For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Date & Time"	"Time::Piece"	"https://metacpan.org/pod/Time::Piece"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Time::Piece - Object Oriented time objects - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Samuel Smith  /  1.31 (ESAYM on 2015-10-20) 1.30_01 DEV (ESAYM on 2015-08-24) 1.30 (RJBS on 2015-05-16) 1.29_05 DEV (ESAYM on 2015-05-02) 1.29 (RJBS on 2014-09-01) 1.28 (RJBS on 2014-09-01) 1.20 (MSERGEANT on 2010-03-17) 1.19 (MSERGEANT on 2010-02-10) 1.18 (MSERGEANT on 2010-02-10) 1.17 (MSERGEANT on 2010-02-01) 1.16 (MSERGEANT on 2010-01-11) 1.15 (MSERGEANT on 2009-06-27) 1.14 (MSERGEANT on 2009-05-09) 1.13 (MSERGEANT on 2008-03-02) 1.12 (MSERGEANT on 2007-11-19) 1.11 (MSERGEANT on 2006-09-08) 1.10 (MSERGEANT on 2006-09-05) 1.09 (MSERGEANT on 2006-02-13) 1.08 (MSERGEANT on 2002-12-22) 1.29_04 DEV (ESAYM on 2015-04-10) 1.29_03 DEV (ESAYM on 2015-04-09) 1.29_02 DEV (ESAYM on 2015-04-04) 1.29_01 DEV (ESAYM on 2015-04-02) 1.27 (RJBS on 2014-01-04) 1.26 (RJBS on 2013-12-29) 1.25_01 DEV (RJBS on 2013-12-17) 1.24 (RJBS on 2013-12-04) 1.23 (RJBS on 2013-09-06) 1.22 (RJBS on 2013-08-12) 1.21 (RJBS on 2013-07-06) 2.000001 DEV (MSERGEANT on 2003-06-10) 2.000000 DEV (MSERGEANT on 2003-02-10) 1.07 (MSERGEANT on 2002-06-20) 1.06 (MSERGEANT on 2002-06-19) 1.05 (MSERGEANT on 2002-06-14) 1.04 (MSERGEANT on 2002-06-13) 1.03 (MSERGEANT on 2002-05-24) 1.01 (MSERGEANT on 2002-03-10) 1.00 (MSERGEANT on 2001-10-22) Time-Piece-1.31 36 ++ 36 ++  / Time::Piece 20 Oct 2015 17:16:14 GMT Module version: 1.31 Source (raw) Browse (raw) Changes Clone repository Issues (14) 5 (1 review) Testers (1594 / 7 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (28.29Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.30_01 DEV (ESAYM on 2015-08-24) 1.30 (RJBS on 2015-05-16) 1.29_05 DEV (ESAYM on 2015-05-02) 1.29 (RJBS on 2014-09-01) 1.28 (RJBS on 2014-09-01) 1.20 (MSERGEANT on 2010-03-17) 1.19 (MSERGEANT on 2010-02-10) 1.18 (MSERGEANT on 2010-02-10) 1.17 (MSERGEANT on 2010-02-01) 1.16 (MSERGEANT on 2010-01-11) 1.15 (MSERGEANT on 2009-06-27) 1.14 (MSERGEANT on 2009-05-09) 1.13 (MSERGEANT on 2008-03-02) 1.12 (MSERGEANT on 2007-11-19) 1.11 (MSERGEANT on 2006-09-08) 1.10 (MSERGEANT on 2006-09-05) 1.09 (MSERGEANT on 2006-02-13) 1.08 (MSERGEANT on 2002-12-22) 1.29_04 DEV (ESAYM on 2015-04-10) 1.29_03 DEV (ESAYM on 2015-04-09) 1.29_02 DEV (ESAYM on 2015-04-04) 1.29_01 DEV (ESAYM on 2015-04-02) 1.27 (RJBS on 2014-01-04) 1.26 (RJBS on 2013-12-29) 1.25_01 DEV (RJBS on 2013-12-17) 1.24 (RJBS on 2013-12-04) 1.23 (RJBS on 2013-09-06) 1.22 (RJBS on 2013-08-12) 1.21 (RJBS on 2013-07-06) 2.000001 DEV (MSERGEANT on 2003-06-10) 2.000000 DEV (MSERGEANT on 2003-02-10) 1.07 (MSERGEANT on 2002-06-20) 1.06 (MSERGEANT on 2002-06-19) 1.05 (MSERGEANT on 2002-06-14) 1.04 (MSERGEANT on 2002-06-13) 1.03 (MSERGEANT on 2002-05-24) 1.01 (MSERGEANT on 2002-03-10) 1.00 (MSERGEANT on 2001-10-22) Diff with version 1.30_01 DEV (ESAYM on 2015-08-24) 1.30 (RJBS on 2015-05-16) 1.29_05 DEV (ESAYM on 2015-05-02) 1.29 (RJBS on 2014-09-01) 1.28 (RJBS on 2014-09-01) 1.20 (MSERGEANT on 2010-03-17) 1.19 (MSERGEANT on 2010-02-10) 1.18 (MSERGEANT on 2010-02-10) 1.17 (MSERGEANT on 2010-02-01) 1.16 (MSERGEANT on 2010-01-11) 1.15 (MSERGEANT on 2009-06-27) 1.14 (MSERGEANT on 2009-05-09) 1.13 (MSERGEANT on 2008-03-02) 1.12 (MSERGEANT on 2007-11-19) 1.11 (MSERGEANT on 2006-09-08) 1.10 (MSERGEANT on 2006-09-05) 1.09 (MSERGEANT on 2006-02-13) 1.08 (MSERGEANT on 2002-12-22) 1.29_04 DEV (ESAYM on 2015-04-10) 1.29_03 DEV (ESAYM on 2015-04-09) 1.29_02 DEV (ESAYM on 2015-04-04) 1.29_01 DEV (ESAYM on 2015-04-02) 1.27 (RJBS on 2014-01-04) 1.26 (RJBS on 2013-12-29) 1.25_01 DEV (RJBS on 2013-12-17) 1.24 (RJBS on 2013-12-04) 1.23 (RJBS on 2013-09-06) 1.22 (RJBS on 2013-08-12) 1.21 (RJBS on 2013-07-06) 2.000001 DEV (MSERGEANT on 2003-06-10) 2.000000 DEV (MSERGEANT on 2003-02-10) 1.07 (MSERGEANT on 2002-06-20) 1.06 (MSERGEANT on 2002-06-19) 1.05 (MSERGEANT on 2002-06-14) 1.04 (MSERGEANT on 2002-06-13) 1.03 (MSERGEANT on 2002-05-24) 1.01 (MSERGEANT on 2002-03-10) 1.00 (MSERGEANT on 2001-10-22) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 21 PAUSE users 15 non-PAUSE users. ESAYM Samuel Smith and 1 contributors show them Matt Sergeant Dependencies Exporter and possibly others CPAN Testers List Reverse dependencies Dependency graph × Time-Piece-1.31 NAME SYNOPSIS DESCRIPTION USAGE Local Locales Date Calculations Date Comparisons Date Parsing YYYY-MM-DDThh:mm:ss Week Number Global Overriding CAVEATS Setting $ENV{TZ} in Threads on Win32 Use of epoch seconds AUTHOR COPYRIGHT AND LICENSE SEE ALSO BUGS NAME Time::Piece - Object Oriented time objects SYNOPSIS     use Time::Piece;          my $t = localtime;     print ""Time is $t\n"";     print ""Year is "", $t->year, ""\n""; DESCRIPTION This module replaces the standard localtime and gmtime functions with implementations that return objects. It does so in a backwards compatible manner, so that using localtime/gmtime in the way documented in perlfunc will still return what you expect. The module actually implements most of an interface described by Larry Wall on the perl5-porters mailing list here: http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2000-01/msg00241.html USAGE After importing this module, when you use localtime or gmtime in a scalar context, rather than getting an ordinary scalar string representing the date and time, you get a Time::Piece object, whose stringification happens to produce the same effect as the localtime and gmtime functions. There is also a new() constructor provided, which is the same as localtime(), except when passed a Time::Piece object, in which case it's a copy constructor. The following methods are available on the object:     $t->sec                 # also available as $t->second     $t->min                 # also available as $t->minute     $t->hour                # 24 hour     $t->mday                # also available as $t->day_of_month     $t->mon                 # 1 = January     $t->_mon                # 0 = January     $t->monname             # Feb     $t->month               # same as $t->monname     $t->fullmonth           # February     $t->year                # based at 0 (year 0 AD is, of course 1 BC)     $t->_year               # year minus 1900     $t->yy                  # 2 digit year     $t->wday                # 1 = Sunday     $t->_wday               # 0 = Sunday     $t->day_of_week         # 0 = Sunday     $t->wdayname            # Tue     $t->day                 # same as wdayname     $t->fullday             # Tuesday     $t->yday                # also available as $t->day_of_year, 0 = Jan 01     $t->isdst               # also available as $t->daylight_savings      $t->hms                 # 12:34:56     $t->hms(""."")            # 12.34.56     $t->time                # same as $t->hms      $t->ymd                 # 2000-02-29     $t->date                # same as $t->ymd     $t->mdy                 # 02-29-2000     $t->mdy(""/"")            # 02/29/2000     $t->dmy                 # 29-02-2000     $t->dmy(""."")            # 29.02.2000     $t->datetime            # 2000-02-29T12:34:56 (ISO 8601)     $t->cdate               # Tue Feb 29 12:34:56 2000     ""$t""                    # same as $t->cdate      $t->epoch               # seconds since the epoch     $t->tzoffset            # timezone offset in a Time::Seconds object      $t->julian_day          # number of days since Julian period began     $t->mjd                 # modified Julian date (JD-2400000.5 days)      $t->week                # week number (ISO 8601)      $t->is_leap_year        # true if it's a leap year     $t->month_last_day      # 28-31      $t->time_separator($s)  # set the default separator (default "":"")     $t->date_separator($s)  # set the default separator (default ""-"")     $t->day_list(@days)     # set the default weekdays     $t->mon_list(@days)     # set the default months      $t->strftime(FORMAT)    # same as POSIX::strftime (without the overhead                             # of the full POSIX extension)     $t->strftime()          # ""Tue, 29 Feb 2000 12:34:56 GMT""          Time::Piece->strptime(STRING, FORMAT)                             # see strptime man page. Creates a new                             # Time::Piece object Note that localtime and gmtime are not listed above. If called as methods on a Time::Piece object, they act as constructors, returning a new Time::Piece object for the current time. In other words: they're not useful as methods. Local Locales Both wdayname (day) and monname (month) allow passing in a list to use to index the name of the days against. This can be useful if you need to implement some form of localisation without actually installing or using locales.   my @days = qw( Dimanche Lundi Merdi Mercredi Jeudi Vendredi Samedi );    my $french_day = localtime->day(@days); These settings can be overridden globally too:   Time::Piece::day_list(@days); Or for months:   Time::Piece::mon_list(@months); And locally for months:   print localtime->month(@months); Date Calculations It's possible to use simple addition and subtraction of objects:     use Time::Seconds;          my $seconds = $t1 - $t2;     $t1 += ONE_DAY; # add 1 day (constant from Time::Seconds) The following are valid ($t1 and $t2 are Time::Piece objects):     $t1 - $t2; # returns Time::Seconds object     $t1 - 42; # returns Time::Piece object     $t1 + 533; # returns Time::Piece object However adding a Time::Piece object to another Time::Piece object will cause a runtime error. Note that the first of the above returns a Time::Seconds object, so while examining the object will print the number of seconds (because of the overloading), you can also get the number of minutes, hours, days, weeks and years in that delta, using the Time::Seconds API. In addition to adding seconds, there are two APIs for adding months and years:     $t->add_months(6);     $t->add_years(5); The months and years can be negative for subtractions. Note that there is some ""strange"" behaviour when adding and subtracting months at the ends of months. Generally when the resulting month is shorter than the starting month then the number of overlap days is added. For example subtracting a month from 2008-03-31 will not result in 2008-02-31 as this is an impossible date. Instead you will get 2008-03-02. This appears to be consistent with other date manipulation tools. Date Comparisons Date comparisons are also possible, using the full suite of ""<"", "">"", ""<="", "">="", ""<=>"", ""=="" and ""!="". Date Parsing Time::Piece has a built-in strptime() function (from FreeBSD), allowing you incredibly flexible date parsing routines. For example:   my $t = Time::Piece->strptime(""Sunday 3rd Nov, 1943"",                                 ""%A %drd %b, %Y"");      print $t->strftime(""%a, %d %b %Y""); Outputs:   Wed, 03 Nov 1943 (see, it's even smart enough to fix my obvious date bug) For more information see ""man strptime"", which should be on all unix systems. Alternatively look here: http://www.unix.com/man-page/FreeBSD/3/strftime/ YYYY-MM-DDThh:mm:ss The ISO 8601 standard defines the date format to be YYYY-MM-DD, and the time format to be hh:mm:ss (24 hour clock), and if combined, they should be concatenated with date first and with a capital 'T' in front of the time. Week Number The week number may be an unknown concept to some readers. The ISO 8601 standard defines that weeks begin on a Monday and week 1 of the year is the week that includes both January 4th and the first Thursday of the year. In other words, if the first Monday of January is the 2nd, 3rd, or 4th, the preceding days of the January are part of the last week of the preceding year. Week numbers range from 1 to 53. Global Overriding Finally, it's possible to override localtime and gmtime everywhere, by including the ':override' tag in the import list:     use Time::Piece ':override'; CAVEATS Setting $ENV{TZ} in Threads on Win32 Note that when using perl in the default build configuration on Win32 (specifically, when perl is built with PERL_IMPLICIT_SYS), each perl interpreter maintains its own copy of the environment and only the main interpreter will update the process environment seen by strftime. Therefore, if you make changes to $ENV{TZ} from inside a thread other than the main thread then those changes will not be seen by strftime if you subsequently call that with the %Z formatting code. You must change $ENV{TZ} in the main thread to have the desired effect in this case (and you must also call _tzset() in the main thread to register the environment change). Furthermore, remember that this caveat also applies to fork(), which is emulated by threads on Win32. Use of epoch seconds This module internally uses the epoch seconds system that is provided via the perl time() function and supported by gmtime() and localtime(). If your perl does not support times larger than 2^31 seconds then this module is likely to fail at processing dates beyond the year 2038. There are moves afoot to fix that in perl. Alternatively use 64 bit perl. Or if none of those are options, use the DateTime module which has support for years well into the future and past. AUTHOR Matt Sergeant, matt@sergeant.org Jarkko Hietaniemi, jhi@iki.fi (while creating Time::Piece for core perl) COPYRIGHT AND LICENSE Copyright 2001, Larry Wall. This module is free software, you may distribute it under the same terms as Perl. SEE ALSO The excellent Calendar FAQ at http://www.tondering.dk/claus/calendar.html BUGS The test harness leaves much to be desired. Patches welcome. × Module Install Instructions To install Time::Piece, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Time::Piece CPAN shell                      perl -MCPAN -e shell                     install Time::Piece For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"DevOps Tools"	"Rex"	"https://metacpan.org/pod/Rex"	"Remote Execution"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Rex - Remote Execution - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Ferenc Erki  /  1.4.0_04 DEV (JFRIED on 2016-07-15) 1.4.0_03 DEV (JFRIED on 2016-06-24) 1.4.0_02 DEV (JFRIED on 2016-06-17) 1.4.0 (FERKI on 2016-03-07) 1.3.3 (FERKI on 2015-09-04) 1.3.2 (FERKI on 2015-06-18) 1.3.1 (FERKI on 2015-06-08) 1.3.0 (JFRIED on 2015-06-07) 1.2.1 (JFRIED on 2015-05-04) 1.2.0 (JFRIED on 2015-05-02) 1.1.0 (JFRIED on 2015-03-29) 1.0.0 (JFRIED on 2015-03-08) 0.57.0 (JFRIED on 2015-01-11) 0.56.1 (JFRIED on 2015-01-06) 0.56.0 (JFRIED on 2014-12-29) 0.55.3 (FERKI on 2014-11-02) 0.55.2 (FERKI on 2014-11-01) 0.55.1 (JFRIED on 2014-10-26) 0.55.0 (FERKI on 2014-10-20) 0.54.3 (JFRIED on 2014-10-04) 0.53.1 (JFRIED on 2014-09-14) 0.52.1 (JFRIED on 2014-08-31) 0.51.2 (JFRIED on 2014-08-01) 0.50.0 (JFRIED on 2014-07-21) 0.50.0 (FERKI on 2014-07-21) 0.49.1 (JFRIED on 2014-07-13) 0.48.0 (JFRIED on 2014-07-10) 0.47.0 (JFRIED on 2014-07-06) 0.46.3 (JFRIED on 2014-05-30) 0.46.1 (JFRIED on 2014-05-19) 0.46.0 (JFRIED on 2014-05-02) 1.4.1_01 DEV (JFRIED on 2016-06-15) 1.3.3_06 DEV (FERKI on 2016-03-05) 1.3.3_05 DEV (FERKI on 2016-03-02) 1.3.3_04 DEV (FERKI on 2016-02-27) 1.3.3_03 DEV (FERKI on 2016-02-22) 1.3.3_02 DEV (FERKI on 2016-02-07) 1.3.3_01 DEV (FERKI on 2016-01-27) 1.3.1_2 DEV (FERKI on 2015-06-15) 1.3.1_1 DEV (FERKI on 2015-06-13) 0.45.3 (JFRIED on 2014-04-14) v0.45.2 (JFRIED on 2014-04-13) 0.45.1 (JFRIED on 2014-04-12) v0.44.6.1 (JFRIED on 2014-03-03) 0.44.6 (JFRIED on 2014-03-02) 0.44.5 (JFRIED on 2014-02-23) 0.44.4 (JFRIED on 2014-02-17) 0.44.3 (JFRIED on 2014-02-16) v0.44.2 (JFRIED on 2014-02-11) v0.44.1 (JFRIED on 2014-02-02) v0.44.0 (JFRIED on 2014-01-26) v0.43.7 (JFRIED on 2013-10-03) v0.43.6 (JFRIED on 2013-10-03) v0.43.5 (JFRIED on 2013-10-03) v0.43.4 (JFRIED on 2013-09-23) v0.43.3 (JFRIED on 2013-09-23) v0.43.2 (JFRIED on 2013-09-17) v0.43.0 (JFRIED on 2013-09-16) v0.42.4 (JFRIED on 2013-07-04) v0.42.3 (JFRIED on 2013-06-30) v0.42.2 (JFRIED on 2013-06-23) v0.42.1 (JFRIED on 2013-06-23) v0.42.0 (JFRIED on 2013-06-15) v0.41.3 (JFRIED on 2013-05-03) v0.41.2 (JFRIED on 2013-04-20) v0.41.1 (JFRIED on 2013-04-11) v0.41.0 (JFRIED on 2013-04-01) v0.40.4 (JFRIED on 2013-03-10) v0.40.3 (JFRIED on 2013-03-09) v0.40.2 (JFRIED on 2013-03-02) v0.40.1 (JFRIED on 2013-02-27) v0.40.0 (JFRIED on 2013-02-24) v0.39.0 (JFRIED on 2013-02-07) v0.38.0 (JFRIED on 2013-01-27) v0.37.2 (JFRIED on 2013-01-16) v0.37.1 (JFRIED on 2013-01-15) v0.37.0 (JFRIED on 2013-01-07) v0.36.0 (JFRIED on 2013-01-03) v0.35.1 (JFRIED on 2012-12-22) v0.34.2 (JFRIED on 2012-12-14) v0.34.1 (JFRIED on 2012-11-25) v0.34.0 (JFRIED on 2012-11-09) v0.33.3 (JFRIED on 2012-10-05) v0.33.2 (JFRIED on 2012-10-02) v0.33.1 (JFRIED on 2012-09-29) v0.32.1 (JFRIED on 2012-08-30) v0.32.0 (JFRIED on 2012-08-22) v0.31.5 (JFRIED on 2012-08-16) v0.31.4 (JFRIED on 2012-08-12) v0.31.3 (JFRIED on 2012-08-12) v0.30.2 (JFRIED on 2012-07-22) v0.30.1 (JFRIED on 2012-07-21) v0.30.0 (JFRIED on 2012-06-17) 0.29.0 (JFRIED on 2012-06-02) 0.28.0 (JFRIED on 2012-05-08) 0.27.0 (JFRIED on 2012-05-05) 0.26.3 (JFRIED on 2012-04-26) 0.26.2 (JFRIED on 2012-03-28) 0.26.1 (JFRIED on 2012-03-13) 0.26.0 (JFRIED on 2012-03-11) 0.25.3 (JFRIED on 2012-02-18) 0.25.2 (JFRIED on 2012-02-15) 0.24.1 (JFRIED on 2012-02-13) 0.24.0 (JFRIED on 2012-02-11) 0.23.0 (JFRIED on 2012-01-14) 0.22.0 (JFRIED on 2012-01-12) 0.21.1 (JFRIED on 2011-10-30) 0.21.0 (JFRIED on 2011-10-22) 0.20.0 (JFRIED on 2011-09-27) 0.19.0 (JFRIED on 2011-09-14) 0.18.1 (JFRIED on 2011-09-09) 0.18.0 (JFRIED on 2011-09-07) 0.17.0 (JFRIED on 2011-09-03) 0.16.0 (JFRIED on 2011-08-28) 0.15.0 (JFRIED on 2011-08-26) 0.14.0 (JFRIED on 2011-08-21) 0.13.0 (JFRIED on 2011-08-18) 0.12.2 (JFRIED on 2011-08-12) 0.12.1 (JFRIED on 2011-08-10) 0.12.0 (JFRIED on 2011-08-06) 0.11.1 (JFRIED on 2011-07-26) 0.11.0.1 (JFRIED on 2011-07-22) 0.11.0 (JFRIED on 2011-07-22) 0.10.0.2 (JFRIED on 2011-07-15) 0.10.0.1 (JFRIED on 2011-07-15) 0.10.0 (JFRIED on 2011-07-15) 0.9.0 (JFRIED on 2011-07-10) 0.8.1 (JFRIED on 2011-07-05) 0.8.0 (JFRIED on 2011-07-01) 0.7.1 (JFRIED on 2011-06-26) 0.7.0 (JFRIED on 2011-06-23) 0.6.1 (JFRIED on 2011-06-19) 0.6.0 (JFRIED on 2011-06-10) 0.5.1 (JFRIED on 2011-06-02) 0.5.0 (JFRIED on 2011-06-02) Rex-1.4.0 47 ++ 47 ++  / Rex 07 Mar 2016 12:51:39 GMT Module version: v1.4.0 Source (raw) Browse (raw) Changes Homepage Clone repository Issues Testers (227 / 3 / 14) Kwalitee License: apache_2_0 Questions? Chat with us! Activity 24 month Tools MOBI | EPUB Download (282.55Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.4.0_04 DEV (JFRIED on 2016-07-15) 1.4.0_03 DEV (JFRIED on 2016-06-24) 1.4.0_02 DEV (JFRIED on 2016-06-17) 1.3.3 (FERKI on 2015-09-04) 1.3.2 (FERKI on 2015-06-18) 1.3.1 (FERKI on 2015-06-08) 1.3.0 (JFRIED on 2015-06-07) 1.2.1 (JFRIED on 2015-05-04) 1.2.0 (JFRIED on 2015-05-02) 1.1.0 (JFRIED on 2015-03-29) 1.0.0 (JFRIED on 2015-03-08) 0.57.0 (JFRIED on 2015-01-11) 0.56.1 (JFRIED on 2015-01-06) 0.56.0 (JFRIED on 2014-12-29) 0.55.3 (FERKI on 2014-11-02) 0.55.2 (FERKI on 2014-11-01) 0.55.1 (JFRIED on 2014-10-26) 0.55.0 (FERKI on 2014-10-20) 0.54.3 (JFRIED on 2014-10-04) 0.53.1 (JFRIED on 2014-09-14) 0.52.1 (JFRIED on 2014-08-31) 0.51.2 (JFRIED on 2014-08-01) 0.50.0 (JFRIED on 2014-07-21) 0.50.0 (FERKI on 2014-07-21) 0.49.1 (JFRIED on 2014-07-13) 0.48.0 (JFRIED on 2014-07-10) 0.47.0 (JFRIED on 2014-07-06) 0.46.3 (JFRIED on 2014-05-30) 0.46.1 (JFRIED on 2014-05-19) 0.46.0 (JFRIED on 2014-05-02) 1.4.1_01 DEV (JFRIED on 2016-06-15) 1.3.3_06 DEV (FERKI on 2016-03-05) 1.3.3_05 DEV (FERKI on 2016-03-02) 1.3.3_04 DEV (FERKI on 2016-02-27) 1.3.3_03 DEV (FERKI on 2016-02-22) 1.3.3_02 DEV (FERKI on 2016-02-07) 1.3.3_01 DEV (FERKI on 2016-01-27) 1.3.1_2 DEV (FERKI on 2015-06-15) 1.3.1_1 DEV (FERKI on 2015-06-13) 0.45.3 (JFRIED on 2014-04-14) v0.45.2 (JFRIED on 2014-04-13) 0.45.1 (JFRIED on 2014-04-12) v0.44.6.1 (JFRIED on 2014-03-03) 0.44.6 (JFRIED on 2014-03-02) 0.44.5 (JFRIED on 2014-02-23) 0.44.4 (JFRIED on 2014-02-17) 0.44.3 (JFRIED on 2014-02-16) v0.44.2 (JFRIED on 2014-02-11) v0.44.1 (JFRIED on 2014-02-02) v0.44.0 (JFRIED on 2014-01-26) v0.43.7 (JFRIED on 2013-10-03) v0.43.6 (JFRIED on 2013-10-03) v0.43.5 (JFRIED on 2013-10-03) v0.43.4 (JFRIED on 2013-09-23) v0.43.3 (JFRIED on 2013-09-23) v0.43.2 (JFRIED on 2013-09-17) v0.43.0 (JFRIED on 2013-09-16) v0.42.4 (JFRIED on 2013-07-04) v0.42.3 (JFRIED on 2013-06-30) v0.42.2 (JFRIED on 2013-06-23) v0.42.1 (JFRIED on 2013-06-23) v0.42.0 (JFRIED on 2013-06-15) v0.41.3 (JFRIED on 2013-05-03) v0.41.2 (JFRIED on 2013-04-20) v0.41.1 (JFRIED on 2013-04-11) v0.41.0 (JFRIED on 2013-04-01) v0.40.4 (JFRIED on 2013-03-10) v0.40.3 (JFRIED on 2013-03-09) v0.40.2 (JFRIED on 2013-03-02) v0.40.1 (JFRIED on 2013-02-27) v0.40.0 (JFRIED on 2013-02-24) v0.39.0 (JFRIED on 2013-02-07) v0.38.0 (JFRIED on 2013-01-27) v0.37.2 (JFRIED on 2013-01-16) v0.37.1 (JFRIED on 2013-01-15) v0.37.0 (JFRIED on 2013-01-07) v0.36.0 (JFRIED on 2013-01-03) v0.35.1 (JFRIED on 2012-12-22) v0.34.2 (JFRIED on 2012-12-14) v0.34.1 (JFRIED on 2012-11-25) v0.34.0 (JFRIED on 2012-11-09) v0.33.3 (JFRIED on 2012-10-05) v0.33.2 (JFRIED on 2012-10-02) v0.33.1 (JFRIED on 2012-09-29) v0.32.1 (JFRIED on 2012-08-30) v0.32.0 (JFRIED on 2012-08-22) v0.31.5 (JFRIED on 2012-08-16) v0.31.4 (JFRIED on 2012-08-12) v0.31.3 (JFRIED on 2012-08-12) v0.30.2 (JFRIED on 2012-07-22) v0.30.1 (JFRIED on 2012-07-21) v0.30.0 (JFRIED on 2012-06-17) 0.29.0 (JFRIED on 2012-06-02) 0.28.0 (JFRIED on 2012-05-08) 0.27.0 (JFRIED on 2012-05-05) 0.26.3 (JFRIED on 2012-04-26) 0.26.2 (JFRIED on 2012-03-28) 0.26.1 (JFRIED on 2012-03-13) 0.26.0 (JFRIED on 2012-03-11) 0.25.3 (JFRIED on 2012-02-18) 0.25.2 (JFRIED on 2012-02-15) 0.24.1 (JFRIED on 2012-02-13) 0.24.0 (JFRIED on 2012-02-11) 0.23.0 (JFRIED on 2012-01-14) 0.22.0 (JFRIED on 2012-01-12) 0.21.1 (JFRIED on 2011-10-30) 0.21.0 (JFRIED on 2011-10-22) 0.20.0 (JFRIED on 2011-09-27) 0.19.0 (JFRIED on 2011-09-14) 0.18.1 (JFRIED on 2011-09-09) 0.18.0 (JFRIED on 2011-09-07) 0.17.0 (JFRIED on 2011-09-03) 0.16.0 (JFRIED on 2011-08-28) 0.15.0 (JFRIED on 2011-08-26) 0.14.0 (JFRIED on 2011-08-21) 0.13.0 (JFRIED on 2011-08-18) 0.12.2 (JFRIED on 2011-08-12) 0.12.1 (JFRIED on 2011-08-10) 0.12.0 (JFRIED on 2011-08-06) 0.11.1 (JFRIED on 2011-07-26) 0.11.0.1 (JFRIED on 2011-07-22) 0.11.0 (JFRIED on 2011-07-22) 0.10.0.2 (JFRIED on 2011-07-15) 0.10.0.1 (JFRIED on 2011-07-15) 0.10.0 (JFRIED on 2011-07-15) 0.9.0 (JFRIED on 2011-07-10) 0.8.1 (JFRIED on 2011-07-05) 0.8.0 (JFRIED on 2011-07-01) 0.7.1 (JFRIED on 2011-06-26) 0.7.0 (JFRIED on 2011-06-23) 0.6.1 (JFRIED on 2011-06-19) 0.6.0 (JFRIED on 2011-06-10) 0.5.1 (JFRIED on 2011-06-02) 0.5.0 (JFRIED on 2011-06-02) Diff with version 1.4.0_04 DEV (JFRIED on 2016-07-15) 1.4.0_03 DEV (JFRIED on 2016-06-24) 1.4.0_02 DEV (JFRIED on 2016-06-17) 1.3.3 (FERKI on 2015-09-04) 1.3.2 (FERKI on 2015-06-18) 1.3.1 (FERKI on 2015-06-08) 1.3.0 (JFRIED on 2015-06-07) 1.2.1 (JFRIED on 2015-05-04) 1.2.0 (JFRIED on 2015-05-02) 1.1.0 (JFRIED on 2015-03-29) 1.0.0 (JFRIED on 2015-03-08) 0.57.0 (JFRIED on 2015-01-11) 0.56.1 (JFRIED on 2015-01-06) 0.56.0 (JFRIED on 2014-12-29) 0.55.3 (FERKI on 2014-11-02) 0.55.2 (FERKI on 2014-11-01) 0.55.1 (JFRIED on 2014-10-26) 0.55.0 (FERKI on 2014-10-20) 0.54.3 (JFRIED on 2014-10-04) 0.53.1 (JFRIED on 2014-09-14) 0.52.1 (JFRIED on 2014-08-31) 0.51.2 (JFRIED on 2014-08-01) 0.50.0 (JFRIED on 2014-07-21) 0.50.0 (FERKI on 2014-07-21) 0.49.1 (JFRIED on 2014-07-13) 0.48.0 (JFRIED on 2014-07-10) 0.47.0 (JFRIED on 2014-07-06) 0.46.3 (JFRIED on 2014-05-30) 0.46.1 (JFRIED on 2014-05-19) 0.46.0 (JFRIED on 2014-05-02) 1.4.1_01 DEV (JFRIED on 2016-06-15) 1.3.3_06 DEV (FERKI on 2016-03-05) 1.3.3_05 DEV (FERKI on 2016-03-02) 1.3.3_04 DEV (FERKI on 2016-02-27) 1.3.3_03 DEV (FERKI on 2016-02-22) 1.3.3_02 DEV (FERKI on 2016-02-07) 1.3.3_01 DEV (FERKI on 2016-01-27) 1.3.1_2 DEV (FERKI on 2015-06-15) 1.3.1_1 DEV (FERKI on 2015-06-13) 0.45.3 (JFRIED on 2014-04-14) v0.45.2 (JFRIED on 2014-04-13) 0.45.1 (JFRIED on 2014-04-12) v0.44.6.1 (JFRIED on 2014-03-03) 0.44.6 (JFRIED on 2014-03-02) 0.44.5 (JFRIED on 2014-02-23) 0.44.4 (JFRIED on 2014-02-17) 0.44.3 (JFRIED on 2014-02-16) v0.44.2 (JFRIED on 2014-02-11) v0.44.1 (JFRIED on 2014-02-02) v0.44.0 (JFRIED on 2014-01-26) v0.43.7 (JFRIED on 2013-10-03) v0.43.6 (JFRIED on 2013-10-03) v0.43.5 (JFRIED on 2013-10-03) v0.43.4 (JFRIED on 2013-09-23) v0.43.3 (JFRIED on 2013-09-23) v0.43.2 (JFRIED on 2013-09-17) v0.43.0 (JFRIED on 2013-09-16) v0.42.4 (JFRIED on 2013-07-04) v0.42.3 (JFRIED on 2013-06-30) v0.42.2 (JFRIED on 2013-06-23) v0.42.1 (JFRIED on 2013-06-23) v0.42.0 (JFRIED on 2013-06-15) v0.41.3 (JFRIED on 2013-05-03) v0.41.2 (JFRIED on 2013-04-20) v0.41.1 (JFRIED on 2013-04-11) v0.41.0 (JFRIED on 2013-04-01) v0.40.4 (JFRIED on 2013-03-10) v0.40.3 (JFRIED on 2013-03-09) v0.40.2 (JFRIED on 2013-03-02) v0.40.1 (JFRIED on 2013-02-27) v0.40.0 (JFRIED on 2013-02-24) v0.39.0 (JFRIED on 2013-02-07) v0.38.0 (JFRIED on 2013-01-27) v0.37.2 (JFRIED on 2013-01-16) v0.37.1 (JFRIED on 2013-01-15) v0.37.0 (JFRIED on 2013-01-07) v0.36.0 (JFRIED on 2013-01-03) v0.35.1 (JFRIED on 2012-12-22) v0.34.2 (JFRIED on 2012-12-14) v0.34.1 (JFRIED on 2012-11-25) v0.34.0 (JFRIED on 2012-11-09) v0.33.3 (JFRIED on 2012-10-05) v0.33.2 (JFRIED on 2012-10-02) v0.33.1 (JFRIED on 2012-09-29) v0.32.1 (JFRIED on 2012-08-30) v0.32.0 (JFRIED on 2012-08-22) v0.31.5 (JFRIED on 2012-08-16) v0.31.4 (JFRIED on 2012-08-12) v0.31.3 (JFRIED on 2012-08-12) v0.30.2 (JFRIED on 2012-07-22) v0.30.1 (JFRIED on 2012-07-21) v0.30.0 (JFRIED on 2012-06-17) 0.29.0 (JFRIED on 2012-06-02) 0.28.0 (JFRIED on 2012-05-08) 0.27.0 (JFRIED on 2012-05-05) 0.26.3 (JFRIED on 2012-04-26) 0.26.2 (JFRIED on 2012-03-28) 0.26.1 (JFRIED on 2012-03-13) 0.26.0 (JFRIED on 2012-03-11) 0.25.3 (JFRIED on 2012-02-18) 0.25.2 (JFRIED on 2012-02-15) 0.24.1 (JFRIED on 2012-02-13) 0.24.0 (JFRIED on 2012-02-11) 0.23.0 (JFRIED on 2012-01-14) 0.22.0 (JFRIED on 2012-01-12) 0.21.1 (JFRIED on 2011-10-30) 0.21.0 (JFRIED on 2011-10-22) 0.20.0 (JFRIED on 2011-09-27) 0.19.0 (JFRIED on 2011-09-14) 0.18.1 (JFRIED on 2011-09-09) 0.18.0 (JFRIED on 2011-09-07) 0.17.0 (JFRIED on 2011-09-03) 0.16.0 (JFRIED on 2011-08-28) 0.15.0 (JFRIED on 2011-08-26) 0.14.0 (JFRIED on 2011-08-21) 0.13.0 (JFRIED on 2011-08-18) 0.12.2 (JFRIED on 2011-08-12) 0.12.1 (JFRIED on 2011-08-10) 0.12.0 (JFRIED on 2011-08-06) 0.11.1 (JFRIED on 2011-07-26) 0.11.0.1 (JFRIED on 2011-07-22) 0.11.0 (JFRIED on 2011-07-22) 0.10.0.2 (JFRIED on 2011-07-15) 0.10.0.1 (JFRIED on 2011-07-15) 0.10.0 (JFRIED on 2011-07-15) 0.9.0 (JFRIED on 2011-07-10) 0.8.1 (JFRIED on 2011-07-05) 0.8.0 (JFRIED on 2011-07-01) 0.7.1 (JFRIED on 2011-06-26) 0.7.0 (JFRIED on 2011-06-23) 0.6.1 (JFRIED on 2011-06-19) 0.6.0 (JFRIED on 2011-06-10) 0.5.1 (JFRIED on 2011-06-02) 0.5.0 (JFRIED on 2011-06-02) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 24 PAUSE users 23 non-PAUSE users. FERKI Ferenc Erki and 1 contributors show them Jan Gehring Dependencies attributes AWS::Signature4 base Carp constant Cwd Data::Dumper Devel::Caller Digest::MD5 Exporter Fcntl File::Basename File::Spec File::Spec::Unix File::Spec::Win32 FindBin Hash::Merge HTTP::Request HTTP::Request::Common IO::File IO::Select IO::Socket IO::String IPC::Open3 JSON::XS List::MoreUtils List::Util LWP::UserAgent MIME::Base64 overload POSIX Sort::Naturally Storable strict Symbol Term::ReadKey Test::Builder::Module Text::Glob Text::Wrap Time::HiRes UNIVERSAL URI URI::QueryParam vars version warnings XML::Simple YAML and possibly others CPAN Testers List Reverse dependencies Dependency graph × Rex-1.4.0 NAME DESCRIPTION GETTING HELP SYNOPSIS CLASS METHODS get_current_connection is_ssh is_local is_sudo get_sftp connect CONTRIBUTORS LICENSE NAME Rex - Remote Execution DESCRIPTION Rex is a command line tool which executes commands on remote servers. Define tasks in Perl and execute them on remote servers or groups of servers. Rex can be used to: Deploy web applications to servers sequentially or in parallel. Automate common tasks. Provision servers using Rex's builtin tools. You can find examples and howtos on http://rexify.org/ GETTING HELP Web Site: http://rexify.org/ IRC: irc.freenode.net #rex Bug Tracker: https://github.com/RexOps/Rex/issues Twitter: http://twitter.com/jfried83 SYNOPSIS     # In a Rexfile:     use Rex -feature => [qw/1.3/];         user ""root"";     password ""ch4ngem3"";         desc ""Show Unix version"";     task ""uname"", sub {        say run ""uname -a"";     };      1;         # On the command line:     bash# rex -H server[01..10] uname See rex for more information about how to use rex on the command line. See Rex::Commands for a list of all commands you can use. CLASS METHODS get_current_connection This function is deprecated since 0.28! See Rex::Commands::connection. Returns the current connection as a hashRef. server The server name ssh 1 if it is a ssh connection, 0 if not. is_ssh Returns 1 if the current connection is a ssh connection. 0 if not. is_local Returns 1 if the current connection is local. Otherwise 0. is_sudo Returns 1 if the current operation is executed within sudo. get_sftp Returns the sftp object for the current ssh connection. connect Use this function to create a connection if you use Rex as a library.  use Rex;  use Rex::Commands::Run;  use Rex::Commands::Fs;   Rex::connect(    server    => ""remotehost"",    user      => ""root"",    password   => ""f00b4r"",    private_key => ""/path/to/private/key/file"",    public_key  => ""/path/to/public/key/file"",  );   if(is_file(""/foo/bar"")) {    print ""Do something...\n"";  }   my $output = run(""uptime""); CONTRIBUTORS Many thanks to the contributors for their work. Please see CONTRIBUTORS file for a complete list. LICENSE Rex is a free software, licensed under: The Apache License, Version 2.0, January 2004 × Module Install Instructions To install Rex, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Rex CPAN shell                      perl -MCPAN -e shell                     install Rex For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Remote Execution"	"true"
"Email"	"Email::Sender"	"https://metacpan.org/pod/Email::Sender"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Email::Sender - a library for sending email - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Ricardo SIGNES 😄  /  1.300028 (RJBS on 2016-04-21) 1.300027 (RJBS on 2016-04-03) 1.300021 (RJBS on 2015-10-15) 1.300026 DEV (RJBS on 2016-03-21) 1.300025 DEV (RJBS on 2016-03-19) 1.300024 DEV (RJBS on 2016-03-19) 1.300023 DEV (RJBS on 2016-03-19) 1.300022 DEV (RJBS on 2016-03-17) 1.300020 (RJBS on 2015-09-03) 1.300019 DEV (RJBS on 2015-08-10) 1.300018 (RJBS on 2015-05-27) 1.300017 DEV (RJBS on 2015-05-14) 1.300016 (RJBS on 2014-10-11) 1.300015 DEV (RJBS on 2014-09-13) 1.300014 (RJBS on 2014-08-28) 1.300013 (RJBS on 2014-08-28) 1.300012 (RJBS on 2014-07-10) 1.300011 (RJBS on 2014-03-02) 1.300010 (RJBS on 2014-01-11) 1.300009 DEV (RJBS on 2013-09-01) 1.300008 DEV (RJBS on 2013-09-01) 1.300007 DEV (RJBS on 2013-03-19) 1.300006 (RJBS on 2013-03-17) 1.300005 (RJBS on 2013-02-14) 1.300004 (RJBS on 2013-02-09) 1.300003 (RJBS on 2013-02-06) 1.300002 (RJBS on 2013-02-06) 1.300001 DEV (RJBS on 2013-01-08) 1.300000 DEV (RJBS on 2013-01-03) 0.120002 (RJBS on 2012-09-11) 0.120001 (RJBS on 2012-07-19) 0.120000 DEV (RJBS on 2012-05-09) 0.110005 (RJBS on 2012-03-06) 0.110004 (RJBS on 2012-02-21) 0.110003 (RJBS on 2012-02-01) 0.110002 (RJBS on 2012-01-31) 0.110001 (RJBS on 2011-04-03) 0.110000 (RJBS on 2011-03-18) 0.102370 (RJBS on 2010-08-25) 0.102360 (RJBS on 2010-08-24) 0.101760 (RJBS on 2010-06-25) 0.100460 (RJBS on 2010-02-15) 0.100450 (RJBS on 2010-02-14) 0.100110 (RJBS on 2010-01-11) 0.093380 (RJBS on 2009-12-04) 0.093110 (RJBS on 2009-11-07) 0.092840 (RJBS on 2009-10-11) 0.092820 (RJBS on 2009-10-10) 0.091940 (RJBS on 2009-07-13) 0.091930 (RJBS on 2009-07-12) 0.091870 (RJBS on 2009-07-06) 0.091740 (RJBS on 2009-06-23) 0.091661 (RJBS on 2009-06-15) 0.091660 (RJBS on 2009-06-15) 0.091640_004 DEV (RJBS on 2009-06-13) 0.091610_003 DEV (RJBS on 2009-06-10) 0.091560_002 DEV (RJBS on 2009-06-05) 0.091560_001 DEV (RJBS on 2009-06-05) 0.004 (RJBS on 2009-03-24) 0.003 (RJBS on 2009-03-13) 0.002 (RJBS on 2009-02-01) 0.001 (RJBS on 2009-01-02) 0.000 (RJBS on 2008-12-10) Email-Sender-1.300028 34 ++ 34 ++  / Email::Sender 21 Apr 2016 16:50:25 GMT Module version: 1.300028 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues 4.5 (5 reviews) Testers (175 / 0 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (49.71Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.300027 (RJBS on 2016-04-03) 1.300021 (RJBS on 2015-10-15) 1.300026 DEV (RJBS on 2016-03-21) 1.300025 DEV (RJBS on 2016-03-19) 1.300024 DEV (RJBS on 2016-03-19) 1.300023 DEV (RJBS on 2016-03-19) 1.300022 DEV (RJBS on 2016-03-17) 1.300020 (RJBS on 2015-09-03) 1.300019 DEV (RJBS on 2015-08-10) 1.300018 (RJBS on 2015-05-27) 1.300017 DEV (RJBS on 2015-05-14) 1.300016 (RJBS on 2014-10-11) 1.300015 DEV (RJBS on 2014-09-13) 1.300014 (RJBS on 2014-08-28) 1.300013 (RJBS on 2014-08-28) 1.300012 (RJBS on 2014-07-10) 1.300011 (RJBS on 2014-03-02) 1.300010 (RJBS on 2014-01-11) 1.300009 DEV (RJBS on 2013-09-01) 1.300008 DEV (RJBS on 2013-09-01) 1.300007 DEV (RJBS on 2013-03-19) 1.300006 (RJBS on 2013-03-17) 1.300005 (RJBS on 2013-02-14) 1.300004 (RJBS on 2013-02-09) 1.300003 (RJBS on 2013-02-06) 1.300002 (RJBS on 2013-02-06) 1.300001 DEV (RJBS on 2013-01-08) 1.300000 DEV (RJBS on 2013-01-03) 0.120002 (RJBS on 2012-09-11) 0.120001 (RJBS on 2012-07-19) 0.120000 DEV (RJBS on 2012-05-09) 0.110005 (RJBS on 2012-03-06) 0.110004 (RJBS on 2012-02-21) 0.110003 (RJBS on 2012-02-01) 0.110002 (RJBS on 2012-01-31) 0.110001 (RJBS on 2011-04-03) 0.110000 (RJBS on 2011-03-18) 0.102370 (RJBS on 2010-08-25) 0.102360 (RJBS on 2010-08-24) 0.101760 (RJBS on 2010-06-25) 0.100460 (RJBS on 2010-02-15) 0.100450 (RJBS on 2010-02-14) 0.100110 (RJBS on 2010-01-11) 0.093380 (RJBS on 2009-12-04) 0.093110 (RJBS on 2009-11-07) 0.092840 (RJBS on 2009-10-11) 0.092820 (RJBS on 2009-10-10) 0.091940 (RJBS on 2009-07-13) 0.091930 (RJBS on 2009-07-12) 0.091870 (RJBS on 2009-07-06) 0.091740 (RJBS on 2009-06-23) 0.091661 (RJBS on 2009-06-15) 0.091660 (RJBS on 2009-06-15) 0.091640_004 DEV (RJBS on 2009-06-13) 0.091610_003 DEV (RJBS on 2009-06-10) 0.091560_002 DEV (RJBS on 2009-06-05) 0.091560_001 DEV (RJBS on 2009-06-05) 0.004 (RJBS on 2009-03-24) 0.003 (RJBS on 2009-03-13) 0.002 (RJBS on 2009-02-01) 0.001 (RJBS on 2009-01-02) 0.000 (RJBS on 2008-12-10) Diff with version 1.300027 (RJBS on 2016-04-03) 1.300021 (RJBS on 2015-10-15) 1.300026 DEV (RJBS on 2016-03-21) 1.300025 DEV (RJBS on 2016-03-19) 1.300024 DEV (RJBS on 2016-03-19) 1.300023 DEV (RJBS on 2016-03-19) 1.300022 DEV (RJBS on 2016-03-17) 1.300020 (RJBS on 2015-09-03) 1.300019 DEV (RJBS on 2015-08-10) 1.300018 (RJBS on 2015-05-27) 1.300017 DEV (RJBS on 2015-05-14) 1.300016 (RJBS on 2014-10-11) 1.300015 DEV (RJBS on 2014-09-13) 1.300014 (RJBS on 2014-08-28) 1.300013 (RJBS on 2014-08-28) 1.300012 (RJBS on 2014-07-10) 1.300011 (RJBS on 2014-03-02) 1.300010 (RJBS on 2014-01-11) 1.300009 DEV (RJBS on 2013-09-01) 1.300008 DEV (RJBS on 2013-09-01) 1.300007 DEV (RJBS on 2013-03-19) 1.300006 (RJBS on 2013-03-17) 1.300005 (RJBS on 2013-02-14) 1.300004 (RJBS on 2013-02-09) 1.300003 (RJBS on 2013-02-06) 1.300002 (RJBS on 2013-02-06) 1.300001 DEV (RJBS on 2013-01-08) 1.300000 DEV (RJBS on 2013-01-03) 0.120002 (RJBS on 2012-09-11) 0.120001 (RJBS on 2012-07-19) 0.120000 DEV (RJBS on 2012-05-09) 0.110005 (RJBS on 2012-03-06) 0.110004 (RJBS on 2012-02-21) 0.110003 (RJBS on 2012-02-01) 0.110002 (RJBS on 2012-01-31) 0.110001 (RJBS on 2011-04-03) 0.110000 (RJBS on 2011-03-18) 0.102370 (RJBS on 2010-08-25) 0.102360 (RJBS on 2010-08-24) 0.101760 (RJBS on 2010-06-25) 0.100460 (RJBS on 2010-02-15) 0.100450 (RJBS on 2010-02-14) 0.100110 (RJBS on 2010-01-11) 0.093380 (RJBS on 2009-12-04) 0.093110 (RJBS on 2009-11-07) 0.092840 (RJBS on 2009-10-11) 0.092820 (RJBS on 2009-10-10) 0.091940 (RJBS on 2009-07-13) 0.091930 (RJBS on 2009-07-12) 0.091870 (RJBS on 2009-07-06) 0.091740 (RJBS on 2009-06-23) 0.091661 (RJBS on 2009-06-15) 0.091660 (RJBS on 2009-06-15) 0.091640_004 DEV (RJBS on 2009-06-13) 0.091610_003 DEV (RJBS on 2009-06-10) 0.091560_002 DEV (RJBS on 2009-06-05) 0.091560_001 DEV (RJBS on 2009-06-05) 0.004 (RJBS on 2009-03-24) 0.003 (RJBS on 2009-03-13) 0.002 (RJBS on 2009-02-01) 0.001 (RJBS on 2009-01-02) 0.000 (RJBS on 2008-12-10) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 21 PAUSE users 13 non-PAUSE users. RJBS Ricardo SIGNES 😄 and 12 contributors show them Alex Efros Aristotle Pagaltzis Christian Walde David Golden David Steinbrunner Hans Dieter Pearcey HIROSE Masaaki Justin Hunter Kenichi Ishigaki kga Kris Matthews William Blunn Dependencies Carp Email::Abstract Email::Address Email::Simple Fcntl File::Basename File::Path File::Spec IO::File IO::Handle List::MoreUtils Module::Runtime Moo Moo::Role MooX::Types::MooseLike MooX::Types::MooseLike::Base Net::SMTP Scalar::Util strict Sub::Exporter Sub::Exporter::Util Sys::Hostname Throwable::Error Try::Tiny utf8 warnings CPAN Testers List Reverse dependencies Dependency graph × Email-Sender-1.300028 NAME VERSION SYNOPSIS OVERVIEW IMPLEMENTING AUTHOR CONTRIBUTORS COPYRIGHT AND LICENSE NAME Email::Sender - a library for sending email VERSION version 1.300028 SYNOPSIS   my $message = Email::MIME->create( ... );   # produce an Email::Abstract compatible message object,   # e.g. produced by Email::Simple, Email::MIME, Email::Stuff    use Email::Sender::Simple qw(sendmail);   use Email::Sender::Transport::SMTP qw();   use Try::Tiny;    try {     sendmail(       $message,       {         from => $SMTP_ENVELOPE_FROM_ADDRESS,         transport => Email::Sender::Transport::SMTP->new({             host => $SMTP_HOSTNAME,             port => $SMTP_PORT,         })       }     );   } catch {       warn ""sending failed: $_"";   }; OVERVIEW Email::Sender replaces the old and sometimes problematic Email::Send library, which did a decent job at handling very simple email sending tasks, but was not suitable for serious use, for a variety of reasons. Most users will be able to use Email::Sender::Simple to send mail. Users with more specific needs should look at the available Email::Sender::Transport classes. Documentation may be found in Email::Sender::Manual, and new users should start with Email::Sender::Manual::QuickStart. IMPLEMENTING Email::Sender itself is a Moo role. Any class that implements Email::Sender is required to provide a method called send. This method should accept any input that can be understood by Email::Abstract, followed by a hashref containing to and from arguments to be used as the envelope. The method should return an Email::Sender::Success object on success or throw an Email::Sender::Failure on failure. AUTHOR Ricardo Signes <rjbs@cpan.org> CONTRIBUTORS Alex Efros <powerman@powerman.name> Aristotle Pagaltzis <pagaltzis@gmx.de> Christian Walde <walde.christian@googlemail.com> David Golden <dagolden@cpan.org> David Steinbrunner <dsteinbrunner@pobox.com> Hans Dieter Pearcey <hdp@cpan.org> HIROSE Masaaki <hirose31@gmail.com> Justin Hunter <justin.d.hunter@gmail.com> Kenichi Ishigaki <ishigaki@cpan.org> kga <watrty@gmail.com> Kris Matthews <kris@tigerlms.com> William Blunn <zgpmax@cpan.org> COPYRIGHT AND LICENSE This software is copyright (c) 2016 by Ricardo Signes. This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself. × Module Install Instructions To install Email::Sender, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Email::Sender CPAN shell                      perl -MCPAN -e shell                     install Email::Sender For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Event Loops"	"AE"	"https://metacpan.org/pod/AE"	"Simpler, faster, newer AnyEvent API"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"AE - simpler/faster/newer/cooler AnyEvent API - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Marc A. Lehmann  /  7.12 (MLEHMANN on 2016-01-27) 7.11 (MLEHMANN on 2015-07-16) 6.14 (MLEHMANN on 2012-01-31) 7.09 (MLEHMANN on 2015-05-02) 7.08 (MLEHMANN on 2014-12-10) 7.07 (MLEHMANN on 2013-12-17) 7.05 (MLEHMANN on 2013-08-21) 7.04 (MLEHMANN on 2012-11-15) 7.03 (MLEHMANN on 2012-11-15) 7.02 (MLEHMANN on 2012-08-14) 7.01 (MLEHMANN on 2012-05-12) 7.0 (MLEHMANN on 2012-04-13) 6.13 (MLEHMANN on 2012-01-12) 6.12 (MLEHMANN on 2011-12-12) 6.11 (MLEHMANN on 2011-11-22) 6.1 (MLEHMANN on 2011-10-04) 6.02 (MLEHMANN on 2011-08-26) 6.01 (MLEHMANN on 2011-08-26) 6.0 (MLEHMANN on 2011-08-13) 5.34 (MLEHMANN on 2011-05-12) 5.31 (MLEHMANN on 2011-01-23) 5.3 (MLEHMANN on 2010-12-31) 5.29 (MLEHMANN on 2010-12-05) 5.28 (MLEHMANN on 2010-10-13) 5.271 (MLEHMANN on 2010-06-08) 5.27 (MLEHMANN on 2010-06-06) 5.261 (MLEHMANN on 2010-04-28) 5.26 (MLEHMANN on 2010-04-12) 5.251 (MLEHMANN on 2010-03-13) 5.25 (MLEHMANN on 2010-03-12) 5.24 (MLEHMANN on 2010-01-05) 5.23 (MLEHMANN on 2009-12-20) 5.22 (MLEHMANN on 2009-12-05) 5.21 (MLEHMANN on 2009-11-19) 5.202 (MLEHMANN on 2009-10-14) 5.201 (MLEHMANN on 2009-09-29) 5.2 (MLEHMANN on 2009-09-14) 5.12 (MLEHMANN on 2009-09-01) 5.112 (MLEHMANN on 2009-08-21) 5.111 (MLEHMANN on 2009-08-16) 5.11 (MLEHMANN on 2009-08-12) 5.1 (MLEHMANN on 2009-08-11) 5.01 (MLEHMANN on 2009-08-10) 5.0 (MLEHMANN on 2009-08-09) 4.91 (MLEHMANN on 2009-08-06) 4.9 (MLEHMANN on 2009-08-01) 4.881 (MLEHMANN on 2009-07-28) 4.88 (MLEHMANN on 2009-07-28) 4.87 (MLEHMANN on 2009-07-26) 4.86 (MLEHMANN on 2009-07-20) 4.85 (MLEHMANN on 2009-07-18) 4.83 (MLEHMANN on 2009-07-17) 4.82 (MLEHMANN on 2009-07-10) 4.81 (MLEHMANN on 2009-07-09) 4.8 (MLEHMANN on 2009-07-06) 4.451 (MLEHMANN on 2009-07-02) 4.45 (MLEHMANN on 2009-06-29) 4.42 (MLEHMANN on 2009-06-26) 4.412 (MLEHMANN on 2009-06-23) 4.411 (MLEHMANN on 2009-06-07) 4.41 (MLEHMANN on 2009-05-14) 4.4 (MLEHMANN on 2009-04-26) 4.352 (MLEHMANN on 2009-04-20) 4.351 (MLEHMANN on 2009-04-11) 4.35 (MLEHMANN on 2009-03-27) 4.34 (MLEHMANN on 2009-02-12) 4.331 (MLEHMANN on 2009-01-06) 4.33 (MLEHMANN on 2008-11-21) 4.32 (MLEHMANN on 2008-11-03) 4.31 (MLEHMANN on 2008-10-30) 4.3 (MLEHMANN on 2008-10-03) 4.234 (MLEHMANN on 2008-09-29) 4.233 (MLEHMANN on 2008-08-21) 4.232 (MLEHMANN on 2008-08-21) 4.231 (MLEHMANN on 2008-07-29) 4.23 (MLEHMANN on 2008-07-29) 4.22 (MLEHMANN on 2008-07-20) 4.21 (MLEHMANN on 2008-07-17) 4.2 (MLEHMANN on 2008-07-12) 4.161 (MLEHMANN on 2008-07-04) 4.160 (MLEHMANN on 2008-07-03) 4.152 (MLEHMANN on 2008-06-22) 4.151 (MLEHMANN on 2008-06-06) 4.15 (MLEHMANN on 2008-06-06) 4.14 (MLEHMANN on 2008-06-05) 4.13 (MLEHMANN on 2008-06-04) 4.12 (MLEHMANN on 2008-06-03) 4.11 (MLEHMANN on 2008-05-30) 4.1 (MLEHMANN on 2008-05-29) 4.05 (MLEHMANN on 2008-05-26) 4.04 (MLEHMANN on 2008-05-26) 4.03 (MLEHMANN on 2008-05-25) 4.0 (MLEHMANN on 2008-05-24) 3.5 (MLEHMANN on 2008-05-17) 3.41 (MLEHMANN on 2008-05-11) 3.4 (MLEHMANN on 2008-05-10) 3.3 (MLEHMANN on 2008-04-28) 3.2 (MLEHMANN on 2008-04-24) 3.12 (MLEHMANN on 2008-04-22) 3.11 (MLEHMANN on 2008-04-19) 3.1 (MLEHMANN on 2008-04-16) 3.0 (MLEHMANN on 2008-04-07) 2.9 (MLEHMANN on 2008-01-28) 2.8 (MLEHMANN on 2007-11-25) 2.7 (MLEHMANN on 2007-11-23) 2.6 (MLEHMANN on 2007-11-09) 2.55 (MLEHMANN on 2007-11-06) 2.54 (MLEHMANN on 2007-07-18) 2.53 (MLEHMANN on 2007-07-08) 2.52 (MLEHMANN on 2007-03-07) 2.51 (MLEHMANN on 2006-12-11) 2.5 (MLEHMANN on 2006-12-11) 2.1 (MLEHMANN on 2006-11-24) 2.0 (MLEHMANN on 2006-11-01) 1.02 (MLEHMANN on 2006-01-13) 1.01 (MLEHMANN on 2006-01-08) 1.0 (MLEHMANN on 2006-01-08) 0.4 (MLEHMANN on 2005-12-30) 0.3 (MLEHMANN on 2005-12-04) 0.2 (MLEHMANN on 2005-12-01) 0.1 (MLEHMANN on 2005-12-01) AnyEvent-7.12 111 ++ 111 ++  / AE 27 Jan 2016 18:15:38 GMT Source (raw) Browse (raw) Changes Issues (2) 5 (4 reviews) Testers (1159 / 57 / 0) Kwalitee License: unknown Activity 24 month Tools MOBI | EPUB Download (289.76Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 7.11 (MLEHMANN on 2015-07-16) 6.14 (MLEHMANN on 2012-01-31) 7.09 (MLEHMANN on 2015-05-02) 7.08 (MLEHMANN on 2014-12-10) 7.07 (MLEHMANN on 2013-12-17) 7.05 (MLEHMANN on 2013-08-21) 7.04 (MLEHMANN on 2012-11-15) 7.03 (MLEHMANN on 2012-11-15) 7.02 (MLEHMANN on 2012-08-14) 7.01 (MLEHMANN on 2012-05-12) 7.0 (MLEHMANN on 2012-04-13) 6.13 (MLEHMANN on 2012-01-12) 6.12 (MLEHMANN on 2011-12-12) 6.11 (MLEHMANN on 2011-11-22) 6.1 (MLEHMANN on 2011-10-04) 6.02 (MLEHMANN on 2011-08-26) 6.01 (MLEHMANN on 2011-08-26) 6.0 (MLEHMANN on 2011-08-13) 5.34 (MLEHMANN on 2011-05-12) 5.31 (MLEHMANN on 2011-01-23) 5.3 (MLEHMANN on 2010-12-31) 5.29 (MLEHMANN on 2010-12-05) 5.28 (MLEHMANN on 2010-10-13) 5.271 (MLEHMANN on 2010-06-08) 5.27 (MLEHMANN on 2010-06-06) 5.261 (MLEHMANN on 2010-04-28) 5.26 (MLEHMANN on 2010-04-12) 5.251 (MLEHMANN on 2010-03-13) 5.25 (MLEHMANN on 2010-03-12) 5.24 (MLEHMANN on 2010-01-05) 5.23 (MLEHMANN on 2009-12-20) 5.22 (MLEHMANN on 2009-12-05) 5.21 (MLEHMANN on 2009-11-19) 5.202 (MLEHMANN on 2009-10-14) 5.201 (MLEHMANN on 2009-09-29) 5.2 (MLEHMANN on 2009-09-14) 5.12 (MLEHMANN on 2009-09-01) 5.112 (MLEHMANN on 2009-08-21) 5.111 (MLEHMANN on 2009-08-16) 5.11 (MLEHMANN on 2009-08-12) 5.1 (MLEHMANN on 2009-08-11) 5.01 (MLEHMANN on 2009-08-10) 5.0 (MLEHMANN on 2009-08-09) 4.91 (MLEHMANN on 2009-08-06) 4.9 (MLEHMANN on 2009-08-01) 4.881 (MLEHMANN on 2009-07-28) 4.88 (MLEHMANN on 2009-07-28) 4.87 (MLEHMANN on 2009-07-26) 4.86 (MLEHMANN on 2009-07-20) 4.85 (MLEHMANN on 2009-07-18) 4.83 (MLEHMANN on 2009-07-17) 4.82 (MLEHMANN on 2009-07-10) 4.81 (MLEHMANN on 2009-07-09) 4.8 (MLEHMANN on 2009-07-06) 4.451 (MLEHMANN on 2009-07-02) 4.45 (MLEHMANN on 2009-06-29) 4.42 (MLEHMANN on 2009-06-26) 4.412 (MLEHMANN on 2009-06-23) 4.411 (MLEHMANN on 2009-06-07) 4.41 (MLEHMANN on 2009-05-14) 4.4 (MLEHMANN on 2009-04-26) 4.352 (MLEHMANN on 2009-04-20) 4.351 (MLEHMANN on 2009-04-11) 4.35 (MLEHMANN on 2009-03-27) 4.34 (MLEHMANN on 2009-02-12) 4.331 (MLEHMANN on 2009-01-06) 4.33 (MLEHMANN on 2008-11-21) 4.32 (MLEHMANN on 2008-11-03) 4.31 (MLEHMANN on 2008-10-30) 4.3 (MLEHMANN on 2008-10-03) 4.234 (MLEHMANN on 2008-09-29) 4.233 (MLEHMANN on 2008-08-21) 4.232 (MLEHMANN on 2008-08-21) 4.231 (MLEHMANN on 2008-07-29) 4.23 (MLEHMANN on 2008-07-29) 4.22 (MLEHMANN on 2008-07-20) 4.21 (MLEHMANN on 2008-07-17) 4.2 (MLEHMANN on 2008-07-12) 4.161 (MLEHMANN on 2008-07-04) 4.160 (MLEHMANN on 2008-07-03) 4.152 (MLEHMANN on 2008-06-22) 4.151 (MLEHMANN on 2008-06-06) 4.15 (MLEHMANN on 2008-06-06) 4.14 (MLEHMANN on 2008-06-05) 4.13 (MLEHMANN on 2008-06-04) 4.12 (MLEHMANN on 2008-06-03) 4.11 (MLEHMANN on 2008-05-30) 4.1 (MLEHMANN on 2008-05-29) 4.05 (MLEHMANN on 2008-05-26) 4.04 (MLEHMANN on 2008-05-26) 4.03 (MLEHMANN on 2008-05-25) 4.0 (MLEHMANN on 2008-05-24) 3.5 (MLEHMANN on 2008-05-17) 3.41 (MLEHMANN on 2008-05-11) 3.4 (MLEHMANN on 2008-05-10) 3.3 (MLEHMANN on 2008-04-28) 3.2 (MLEHMANN on 2008-04-24) 3.12 (MLEHMANN on 2008-04-22) 3.11 (MLEHMANN on 2008-04-19) 3.1 (MLEHMANN on 2008-04-16) 3.0 (MLEHMANN on 2008-04-07) 2.9 (MLEHMANN on 2008-01-28) 2.8 (MLEHMANN on 2007-11-25) 2.7 (MLEHMANN on 2007-11-23) 2.6 (MLEHMANN on 2007-11-09) 2.55 (MLEHMANN on 2007-11-06) 2.54 (MLEHMANN on 2007-07-18) 2.53 (MLEHMANN on 2007-07-08) 2.52 (MLEHMANN on 2007-03-07) 2.51 (MLEHMANN on 2006-12-11) 2.5 (MLEHMANN on 2006-12-11) 2.1 (MLEHMANN on 2006-11-24) 2.0 (MLEHMANN on 2006-11-01) 1.02 (MLEHMANN on 2006-01-13) 1.01 (MLEHMANN on 2006-01-08) 1.0 (MLEHMANN on 2006-01-08) 0.4 (MLEHMANN on 2005-12-30) 0.3 (MLEHMANN on 2005-12-04) 0.2 (MLEHMANN on 2005-12-01) 0.1 (MLEHMANN on 2005-12-01) Diff with version 7.11 (MLEHMANN on 2015-07-16) 6.14 (MLEHMANN on 2012-01-31) 7.09 (MLEHMANN on 2015-05-02) 7.08 (MLEHMANN on 2014-12-10) 7.07 (MLEHMANN on 2013-12-17) 7.05 (MLEHMANN on 2013-08-21) 7.04 (MLEHMANN on 2012-11-15) 7.03 (MLEHMANN on 2012-11-15) 7.02 (MLEHMANN on 2012-08-14) 7.01 (MLEHMANN on 2012-05-12) 7.0 (MLEHMANN on 2012-04-13) 6.13 (MLEHMANN on 2012-01-12) 6.12 (MLEHMANN on 2011-12-12) 6.11 (MLEHMANN on 2011-11-22) 6.1 (MLEHMANN on 2011-10-04) 6.02 (MLEHMANN on 2011-08-26) 6.01 (MLEHMANN on 2011-08-26) 6.0 (MLEHMANN on 2011-08-13) 5.34 (MLEHMANN on 2011-05-12) 5.31 (MLEHMANN on 2011-01-23) 5.3 (MLEHMANN on 2010-12-31) 5.29 (MLEHMANN on 2010-12-05) 5.28 (MLEHMANN on 2010-10-13) 5.271 (MLEHMANN on 2010-06-08) 5.27 (MLEHMANN on 2010-06-06) 5.261 (MLEHMANN on 2010-04-28) 5.26 (MLEHMANN on 2010-04-12) 5.251 (MLEHMANN on 2010-03-13) 5.25 (MLEHMANN on 2010-03-12) 5.24 (MLEHMANN on 2010-01-05) 5.23 (MLEHMANN on 2009-12-20) 5.22 (MLEHMANN on 2009-12-05) 5.21 (MLEHMANN on 2009-11-19) 5.202 (MLEHMANN on 2009-10-14) 5.201 (MLEHMANN on 2009-09-29) 5.2 (MLEHMANN on 2009-09-14) 5.12 (MLEHMANN on 2009-09-01) 5.112 (MLEHMANN on 2009-08-21) 5.111 (MLEHMANN on 2009-08-16) 5.11 (MLEHMANN on 2009-08-12) 5.1 (MLEHMANN on 2009-08-11) 5.01 (MLEHMANN on 2009-08-10) 5.0 (MLEHMANN on 2009-08-09) 4.91 (MLEHMANN on 2009-08-06) 4.9 (MLEHMANN on 2009-08-01) 4.881 (MLEHMANN on 2009-07-28) 4.88 (MLEHMANN on 2009-07-28) 4.87 (MLEHMANN on 2009-07-26) 4.86 (MLEHMANN on 2009-07-20) 4.85 (MLEHMANN on 2009-07-18) 4.83 (MLEHMANN on 2009-07-17) 4.82 (MLEHMANN on 2009-07-10) 4.81 (MLEHMANN on 2009-07-09) 4.8 (MLEHMANN on 2009-07-06) 4.451 (MLEHMANN on 2009-07-02) 4.45 (MLEHMANN on 2009-06-29) 4.42 (MLEHMANN on 2009-06-26) 4.412 (MLEHMANN on 2009-06-23) 4.411 (MLEHMANN on 2009-06-07) 4.41 (MLEHMANN on 2009-05-14) 4.4 (MLEHMANN on 2009-04-26) 4.352 (MLEHMANN on 2009-04-20) 4.351 (MLEHMANN on 2009-04-11) 4.35 (MLEHMANN on 2009-03-27) 4.34 (MLEHMANN on 2009-02-12) 4.331 (MLEHMANN on 2009-01-06) 4.33 (MLEHMANN on 2008-11-21) 4.32 (MLEHMANN on 2008-11-03) 4.31 (MLEHMANN on 2008-10-30) 4.3 (MLEHMANN on 2008-10-03) 4.234 (MLEHMANN on 2008-09-29) 4.233 (MLEHMANN on 2008-08-21) 4.232 (MLEHMANN on 2008-08-21) 4.231 (MLEHMANN on 2008-07-29) 4.23 (MLEHMANN on 2008-07-29) 4.22 (MLEHMANN on 2008-07-20) 4.21 (MLEHMANN on 2008-07-17) 4.2 (MLEHMANN on 2008-07-12) 4.161 (MLEHMANN on 2008-07-04) 4.160 (MLEHMANN on 2008-07-03) 4.152 (MLEHMANN on 2008-06-22) 4.151 (MLEHMANN on 2008-06-06) 4.15 (MLEHMANN on 2008-06-06) 4.14 (MLEHMANN on 2008-06-05) 4.13 (MLEHMANN on 2008-06-04) 4.12 (MLEHMANN on 2008-06-03) 4.11 (MLEHMANN on 2008-05-30) 4.1 (MLEHMANN on 2008-05-29) 4.05 (MLEHMANN on 2008-05-26) 4.04 (MLEHMANN on 2008-05-26) 4.03 (MLEHMANN on 2008-05-25) 4.0 (MLEHMANN on 2008-05-24) 3.5 (MLEHMANN on 2008-05-17) 3.41 (MLEHMANN on 2008-05-11) 3.4 (MLEHMANN on 2008-05-10) 3.3 (MLEHMANN on 2008-04-28) 3.2 (MLEHMANN on 2008-04-24) 3.12 (MLEHMANN on 2008-04-22) 3.11 (MLEHMANN on 2008-04-19) 3.1 (MLEHMANN on 2008-04-16) 3.0 (MLEHMANN on 2008-04-07) 2.9 (MLEHMANN on 2008-01-28) 2.8 (MLEHMANN on 2007-11-25) 2.7 (MLEHMANN on 2007-11-23) 2.6 (MLEHMANN on 2007-11-09) 2.55 (MLEHMANN on 2007-11-06) 2.54 (MLEHMANN on 2007-07-18) 2.53 (MLEHMANN on 2007-07-08) 2.52 (MLEHMANN on 2007-03-07) 2.51 (MLEHMANN on 2006-12-11) 2.5 (MLEHMANN on 2006-12-11) 2.1 (MLEHMANN on 2006-11-24) 2.0 (MLEHMANN on 2006-11-01) 1.02 (MLEHMANN on 2006-01-13) 1.01 (MLEHMANN on 2006-01-08) 1.0 (MLEHMANN on 2006-01-08) 0.4 (MLEHMANN on 2005-12-30) 0.3 (MLEHMANN on 2005-12-04) 0.2 (MLEHMANN on 2005-12-01) 0.1 (MLEHMANN on 2005-12-01) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 62 PAUSE users 49 non-PAUSE users. MLEHMANN Marc A. Lehmann Dependencies unknown CPAN Testers List Reverse dependencies NAME SYNOPSIS DESCRIPTION FUNCTIONS AUTHOR NAME AE - simpler/faster/newer/cooler AnyEvent API SYNOPSIS   use AnyEvent; # not AE    # file handle or descriptor readable   my $w = AE::io $fh, 0, sub { ...  };    # one-shot or repeating timers   my $w = AE::timer $seconds,         0, sub { ... }; # once   my $w = AE::timer $seconds, $interval, sub { ... }; # repeated    print AE::now;  # prints current event loop time   print AE::time; # think Time::HiRes::time or simply CORE::time.    # POSIX signal   my $w = AE::signal TERM => sub { ... };    # child process exit   my $w = AE::child $pid, sub {      my ($pid, $status) = @_;      ...   };    # called when event loop idle (if applicable)   my $w = AE::idle sub { ... };    my $cv = AE::cv; # stores whether a condition was flagged   $cv->send; # wake up current and all future recv's   $cv->recv; # enters ""main loop"" till $condvar gets ->send   # use a condvar in callback mode:   $cv->cb (sub { $_[0]->recv }); DESCRIPTION This module documents the new simpler AnyEvent API. The rationale for the new API is that experience with EV shows that this API actually ""works"", despite its lack of extensibility, leading to a shorter, easier and faster API. The main differences from AnyEvent is that function calls are used instead of method calls, and that no named arguments are used. This makes calls to watcher creation functions really short, which can make a program more readable despite the lack of named parameters. Function calls also allow more static type checking than method calls, so many mistakes are caught at compile-time with this API. Also, some backends (Perl and EV) are so fast that the method call overhead is very noticeable (with EV it increases the execution time five- to six-fold, with Perl the method call overhead is about a factor of two). Note that the AE API is an alternative to, not the future version of, the AnyEvent API. Both APIs can be used interchangeably and there are no plans to ""switch"", so if in doubt, feel free to use the AnyEvent API in new code. As the AE API is complementary, not everything in the AnyEvent API is available, and you still need to use AnyEvent for the finer stuff. Also, you should not use AE directly, use AnyEvent will provide the AE namespace. At the moment, these functions will become slower then their method-call counterparts when using AnyEvent::Strict or AnyEvent::Debug::wrap. FUNCTIONS This section briefly describes the alternative watcher constructors and other functions available inside the AE namespace. Semantics are not described here; please refer to the description of the function or method with the same name in the AnyEvent manpage for the details. $w = AE::io $fh_or_fd, $watch_write, $cb Creates an I/O watcher that listens for read events ($watch_write false) or write events ($watch_write is true) on the file handle or file descriptor $fh_or_fd. The callback $cb is invoked as soon and as long as I/O of the type specified by $watch_write) can be done on the file handle/descriptor. Example: wait until STDIN becomes readable.   $stdin_ready = AE::io *STDIN, 0, sub { scalar <STDIN> }; Example: wait until STDOUT becomes writable and print something.   $stdout_ready = AE::io *STDOUT, 1, sub { print STDOUT ""woaw\n"" }; $w = AE::timer $after, $interval, $cb Creates a timer watcher that invokes the callback $cb after at least $after second have passed ($after can be negative or 0). If $interval is 0, then the callback will only be invoked once, otherwise it must be a positive number of seconds that specifies the interval between successive invocations of the callback. Example: print ""too late"" after at least one second has passed.   $timer_once = AE::timer 1, 0, sub { print ""too late\n"" }; Example: print ""blubb"" once a second, starting as soon as possible.   $timer_repeated = AE::timer 0, 1, sub { print ""blubb\n"" }; $w = AE::signal $signame, $cb Invoke the callback $cb each time one or more occurrences of the named signal $signame are detected. $w = AE::child $pid, $cb Invokes the callback $cb when the child with the given $pid exits (or all children, when $pid is zero). The callback will get the actual pid and exit status as arguments. $w = AE::idle $cb Invoke the callback $cb each time the event loop is ""idle"" (has no events outstanding), but do not prevent the event loop from polling for more events. $cv = AE::cv $cv = AE::cv { BLOCK } Create a new condition variable. The first form is identical to AnyEvent->condvar, the second form additionally sets the callback (as if the cb method is called on the condition variable). AE::now Returns the current event loop time (may be cached by the event loop). AE::now_update Ensures that the current event loop time is up to date. AE::time Return the current time (not cached, always consults a hardware clock). AE::postpone { BLOCK } Exactly the same as AnyEvent:::postpone. AE::log $level, $msg[, @args] Exactly the same as AnyEvent::log (or AnyEvent::Log::log). AUTHOR  Marc Lehmann <schmorp@schmorp.de>  http://anyevent.schmorp.de × Module Install Instructions To install AE, simply copy and paste either of the commands in to your terminal cpanm                      cpanm AE CPAN shell                      perl -MCPAN -e shell                     install AE For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Simpler, faster, newer AnyEvent API"	"true"
"Event Loops"	"AnyEvent"	"https://metacpan.org/pod/AnyEvent"	"the DBI of event loop programming"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"AnyEvent - the DBI of event loop programming - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Marc A. Lehmann  /  7.12 (MLEHMANN on 2016-01-27) 7.11 (MLEHMANN on 2015-07-16) 6.14 (MLEHMANN on 2012-01-31) 7.09 (MLEHMANN on 2015-05-02) 7.08 (MLEHMANN on 2014-12-10) 7.07 (MLEHMANN on 2013-12-17) 7.05 (MLEHMANN on 2013-08-21) 7.04 (MLEHMANN on 2012-11-15) 7.03 (MLEHMANN on 2012-11-15) 7.02 (MLEHMANN on 2012-08-14) 7.01 (MLEHMANN on 2012-05-12) 7.0 (MLEHMANN on 2012-04-13) 6.13 (MLEHMANN on 2012-01-12) 6.12 (MLEHMANN on 2011-12-12) 6.11 (MLEHMANN on 2011-11-22) 6.1 (MLEHMANN on 2011-10-04) 6.02 (MLEHMANN on 2011-08-26) 6.01 (MLEHMANN on 2011-08-26) 6.0 (MLEHMANN on 2011-08-13) 5.34 (MLEHMANN on 2011-05-12) 5.31 (MLEHMANN on 2011-01-23) 5.3 (MLEHMANN on 2010-12-31) 5.29 (MLEHMANN on 2010-12-05) 5.28 (MLEHMANN on 2010-10-13) 5.271 (MLEHMANN on 2010-06-08) 5.27 (MLEHMANN on 2010-06-06) 5.261 (MLEHMANN on 2010-04-28) 5.26 (MLEHMANN on 2010-04-12) 5.251 (MLEHMANN on 2010-03-13) 5.25 (MLEHMANN on 2010-03-12) 5.24 (MLEHMANN on 2010-01-05) 5.23 (MLEHMANN on 2009-12-20) 5.22 (MLEHMANN on 2009-12-05) 5.21 (MLEHMANN on 2009-11-19) 5.202 (MLEHMANN on 2009-10-14) 5.201 (MLEHMANN on 2009-09-29) 5.2 (MLEHMANN on 2009-09-14) 5.12 (MLEHMANN on 2009-09-01) 5.112 (MLEHMANN on 2009-08-21) 5.111 (MLEHMANN on 2009-08-16) 5.11 (MLEHMANN on 2009-08-12) 5.1 (MLEHMANN on 2009-08-11) 5.01 (MLEHMANN on 2009-08-10) 5.0 (MLEHMANN on 2009-08-09) 4.91 (MLEHMANN on 2009-08-06) 4.9 (MLEHMANN on 2009-08-01) 4.881 (MLEHMANN on 2009-07-28) 4.88 (MLEHMANN on 2009-07-28) 4.87 (MLEHMANN on 2009-07-26) 4.86 (MLEHMANN on 2009-07-20) 4.85 (MLEHMANN on 2009-07-18) 4.83 (MLEHMANN on 2009-07-17) 4.82 (MLEHMANN on 2009-07-10) 4.81 (MLEHMANN on 2009-07-09) 4.8 (MLEHMANN on 2009-07-06) 4.451 (MLEHMANN on 2009-07-02) 4.45 (MLEHMANN on 2009-06-29) 4.42 (MLEHMANN on 2009-06-26) 4.412 (MLEHMANN on 2009-06-23) 4.411 (MLEHMANN on 2009-06-07) 4.41 (MLEHMANN on 2009-05-14) 4.4 (MLEHMANN on 2009-04-26) 4.352 (MLEHMANN on 2009-04-20) 4.351 (MLEHMANN on 2009-04-11) 4.35 (MLEHMANN on 2009-03-27) 4.34 (MLEHMANN on 2009-02-12) 4.331 (MLEHMANN on 2009-01-06) 4.33 (MLEHMANN on 2008-11-21) 4.32 (MLEHMANN on 2008-11-03) 4.31 (MLEHMANN on 2008-10-30) 4.3 (MLEHMANN on 2008-10-03) 4.234 (MLEHMANN on 2008-09-29) 4.233 (MLEHMANN on 2008-08-21) 4.232 (MLEHMANN on 2008-08-21) 4.231 (MLEHMANN on 2008-07-29) 4.23 (MLEHMANN on 2008-07-29) 4.22 (MLEHMANN on 2008-07-20) 4.21 (MLEHMANN on 2008-07-17) 4.2 (MLEHMANN on 2008-07-12) 4.161 (MLEHMANN on 2008-07-04) 4.160 (MLEHMANN on 2008-07-03) 4.152 (MLEHMANN on 2008-06-22) 4.151 (MLEHMANN on 2008-06-06) 4.15 (MLEHMANN on 2008-06-06) 4.14 (MLEHMANN on 2008-06-05) 4.13 (MLEHMANN on 2008-06-04) 4.12 (MLEHMANN on 2008-06-03) 4.11 (MLEHMANN on 2008-05-30) 4.1 (MLEHMANN on 2008-05-29) 4.05 (MLEHMANN on 2008-05-26) 4.04 (MLEHMANN on 2008-05-26) 4.03 (MLEHMANN on 2008-05-25) 4.0 (MLEHMANN on 2008-05-24) 3.5 (MLEHMANN on 2008-05-17) 3.41 (MLEHMANN on 2008-05-11) 3.4 (MLEHMANN on 2008-05-10) 3.3 (MLEHMANN on 2008-04-28) 3.2 (MLEHMANN on 2008-04-24) 3.12 (MLEHMANN on 2008-04-22) 3.11 (MLEHMANN on 2008-04-19) 3.1 (MLEHMANN on 2008-04-16) 3.0 (MLEHMANN on 2008-04-07) 2.9 (MLEHMANN on 2008-01-28) 2.8 (MLEHMANN on 2007-11-25) 2.7 (MLEHMANN on 2007-11-23) 2.6 (MLEHMANN on 2007-11-09) 2.55 (MLEHMANN on 2007-11-06) 2.54 (MLEHMANN on 2007-07-18) 2.53 (MLEHMANN on 2007-07-08) 2.52 (MLEHMANN on 2007-03-07) 2.51 (MLEHMANN on 2006-12-11) 2.5 (MLEHMANN on 2006-12-11) 2.1 (MLEHMANN on 2006-11-24) 2.0 (MLEHMANN on 2006-11-01) 1.02 (MLEHMANN on 2006-01-13) 1.01 (MLEHMANN on 2006-01-08) 1.0 (MLEHMANN on 2006-01-08) 0.4 (MLEHMANN on 2005-12-30) 0.3 (MLEHMANN on 2005-12-04) 0.2 (MLEHMANN on 2005-12-01) 0.1 (MLEHMANN on 2005-12-01) AnyEvent-7.12 111 ++ 111 ++  / AnyEvent 27 Jan 2016 18:15:38 GMT Module version: 7.12 Source (raw) Browse (raw) Changes Issues (2) 5 (4 reviews) Testers (1159 / 57 / 0) Kwalitee License: unknown Activity 24 month Tools MOBI | EPUB Download (289.76Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 7.11 (MLEHMANN on 2015-07-16) 6.14 (MLEHMANN on 2012-01-31) 7.09 (MLEHMANN on 2015-05-02) 7.08 (MLEHMANN on 2014-12-10) 7.07 (MLEHMANN on 2013-12-17) 7.05 (MLEHMANN on 2013-08-21) 7.04 (MLEHMANN on 2012-11-15) 7.03 (MLEHMANN on 2012-11-15) 7.02 (MLEHMANN on 2012-08-14) 7.01 (MLEHMANN on 2012-05-12) 7.0 (MLEHMANN on 2012-04-13) 6.13 (MLEHMANN on 2012-01-12) 6.12 (MLEHMANN on 2011-12-12) 6.11 (MLEHMANN on 2011-11-22) 6.1 (MLEHMANN on 2011-10-04) 6.02 (MLEHMANN on 2011-08-26) 6.01 (MLEHMANN on 2011-08-26) 6.0 (MLEHMANN on 2011-08-13) 5.34 (MLEHMANN on 2011-05-12) 5.31 (MLEHMANN on 2011-01-23) 5.3 (MLEHMANN on 2010-12-31) 5.29 (MLEHMANN on 2010-12-05) 5.28 (MLEHMANN on 2010-10-13) 5.271 (MLEHMANN on 2010-06-08) 5.27 (MLEHMANN on 2010-06-06) 5.261 (MLEHMANN on 2010-04-28) 5.26 (MLEHMANN on 2010-04-12) 5.251 (MLEHMANN on 2010-03-13) 5.25 (MLEHMANN on 2010-03-12) 5.24 (MLEHMANN on 2010-01-05) 5.23 (MLEHMANN on 2009-12-20) 5.22 (MLEHMANN on 2009-12-05) 5.21 (MLEHMANN on 2009-11-19) 5.202 (MLEHMANN on 2009-10-14) 5.201 (MLEHMANN on 2009-09-29) 5.2 (MLEHMANN on 2009-09-14) 5.12 (MLEHMANN on 2009-09-01) 5.112 (MLEHMANN on 2009-08-21) 5.111 (MLEHMANN on 2009-08-16) 5.11 (MLEHMANN on 2009-08-12) 5.1 (MLEHMANN on 2009-08-11) 5.01 (MLEHMANN on 2009-08-10) 5.0 (MLEHMANN on 2009-08-09) 4.91 (MLEHMANN on 2009-08-06) 4.9 (MLEHMANN on 2009-08-01) 4.881 (MLEHMANN on 2009-07-28) 4.88 (MLEHMANN on 2009-07-28) 4.87 (MLEHMANN on 2009-07-26) 4.86 (MLEHMANN on 2009-07-20) 4.85 (MLEHMANN on 2009-07-18) 4.83 (MLEHMANN on 2009-07-17) 4.82 (MLEHMANN on 2009-07-10) 4.81 (MLEHMANN on 2009-07-09) 4.8 (MLEHMANN on 2009-07-06) 4.451 (MLEHMANN on 2009-07-02) 4.45 (MLEHMANN on 2009-06-29) 4.42 (MLEHMANN on 2009-06-26) 4.412 (MLEHMANN on 2009-06-23) 4.411 (MLEHMANN on 2009-06-07) 4.41 (MLEHMANN on 2009-05-14) 4.4 (MLEHMANN on 2009-04-26) 4.352 (MLEHMANN on 2009-04-20) 4.351 (MLEHMANN on 2009-04-11) 4.35 (MLEHMANN on 2009-03-27) 4.34 (MLEHMANN on 2009-02-12) 4.331 (MLEHMANN on 2009-01-06) 4.33 (MLEHMANN on 2008-11-21) 4.32 (MLEHMANN on 2008-11-03) 4.31 (MLEHMANN on 2008-10-30) 4.3 (MLEHMANN on 2008-10-03) 4.234 (MLEHMANN on 2008-09-29) 4.233 (MLEHMANN on 2008-08-21) 4.232 (MLEHMANN on 2008-08-21) 4.231 (MLEHMANN on 2008-07-29) 4.23 (MLEHMANN on 2008-07-29) 4.22 (MLEHMANN on 2008-07-20) 4.21 (MLEHMANN on 2008-07-17) 4.2 (MLEHMANN on 2008-07-12) 4.161 (MLEHMANN on 2008-07-04) 4.160 (MLEHMANN on 2008-07-03) 4.152 (MLEHMANN on 2008-06-22) 4.151 (MLEHMANN on 2008-06-06) 4.15 (MLEHMANN on 2008-06-06) 4.14 (MLEHMANN on 2008-06-05) 4.13 (MLEHMANN on 2008-06-04) 4.12 (MLEHMANN on 2008-06-03) 4.11 (MLEHMANN on 2008-05-30) 4.1 (MLEHMANN on 2008-05-29) 4.05 (MLEHMANN on 2008-05-26) 4.04 (MLEHMANN on 2008-05-26) 4.03 (MLEHMANN on 2008-05-25) 4.0 (MLEHMANN on 2008-05-24) 3.5 (MLEHMANN on 2008-05-17) 3.41 (MLEHMANN on 2008-05-11) 3.4 (MLEHMANN on 2008-05-10) 3.3 (MLEHMANN on 2008-04-28) 3.2 (MLEHMANN on 2008-04-24) 3.12 (MLEHMANN on 2008-04-22) 3.11 (MLEHMANN on 2008-04-19) 3.1 (MLEHMANN on 2008-04-16) 3.0 (MLEHMANN on 2008-04-07) 2.9 (MLEHMANN on 2008-01-28) 2.8 (MLEHMANN on 2007-11-25) 2.7 (MLEHMANN on 2007-11-23) 2.6 (MLEHMANN on 2007-11-09) 2.55 (MLEHMANN on 2007-11-06) 2.54 (MLEHMANN on 2007-07-18) 2.53 (MLEHMANN on 2007-07-08) 2.52 (MLEHMANN on 2007-03-07) 2.51 (MLEHMANN on 2006-12-11) 2.5 (MLEHMANN on 2006-12-11) 2.1 (MLEHMANN on 2006-11-24) 2.0 (MLEHMANN on 2006-11-01) 1.02 (MLEHMANN on 2006-01-13) 1.01 (MLEHMANN on 2006-01-08) 1.0 (MLEHMANN on 2006-01-08) 0.4 (MLEHMANN on 2005-12-30) 0.3 (MLEHMANN on 2005-12-04) 0.2 (MLEHMANN on 2005-12-01) 0.1 (MLEHMANN on 2005-12-01) Diff with version 7.11 (MLEHMANN on 2015-07-16) 6.14 (MLEHMANN on 2012-01-31) 7.09 (MLEHMANN on 2015-05-02) 7.08 (MLEHMANN on 2014-12-10) 7.07 (MLEHMANN on 2013-12-17) 7.05 (MLEHMANN on 2013-08-21) 7.04 (MLEHMANN on 2012-11-15) 7.03 (MLEHMANN on 2012-11-15) 7.02 (MLEHMANN on 2012-08-14) 7.01 (MLEHMANN on 2012-05-12) 7.0 (MLEHMANN on 2012-04-13) 6.13 (MLEHMANN on 2012-01-12) 6.12 (MLEHMANN on 2011-12-12) 6.11 (MLEHMANN on 2011-11-22) 6.1 (MLEHMANN on 2011-10-04) 6.02 (MLEHMANN on 2011-08-26) 6.01 (MLEHMANN on 2011-08-26) 6.0 (MLEHMANN on 2011-08-13) 5.34 (MLEHMANN on 2011-05-12) 5.31 (MLEHMANN on 2011-01-23) 5.3 (MLEHMANN on 2010-12-31) 5.29 (MLEHMANN on 2010-12-05) 5.28 (MLEHMANN on 2010-10-13) 5.271 (MLEHMANN on 2010-06-08) 5.27 (MLEHMANN on 2010-06-06) 5.261 (MLEHMANN on 2010-04-28) 5.26 (MLEHMANN on 2010-04-12) 5.251 (MLEHMANN on 2010-03-13) 5.25 (MLEHMANN on 2010-03-12) 5.24 (MLEHMANN on 2010-01-05) 5.23 (MLEHMANN on 2009-12-20) 5.22 (MLEHMANN on 2009-12-05) 5.21 (MLEHMANN on 2009-11-19) 5.202 (MLEHMANN on 2009-10-14) 5.201 (MLEHMANN on 2009-09-29) 5.2 (MLEHMANN on 2009-09-14) 5.12 (MLEHMANN on 2009-09-01) 5.112 (MLEHMANN on 2009-08-21) 5.111 (MLEHMANN on 2009-08-16) 5.11 (MLEHMANN on 2009-08-12) 5.1 (MLEHMANN on 2009-08-11) 5.01 (MLEHMANN on 2009-08-10) 5.0 (MLEHMANN on 2009-08-09) 4.91 (MLEHMANN on 2009-08-06) 4.9 (MLEHMANN on 2009-08-01) 4.881 (MLEHMANN on 2009-07-28) 4.88 (MLEHMANN on 2009-07-28) 4.87 (MLEHMANN on 2009-07-26) 4.86 (MLEHMANN on 2009-07-20) 4.85 (MLEHMANN on 2009-07-18) 4.83 (MLEHMANN on 2009-07-17) 4.82 (MLEHMANN on 2009-07-10) 4.81 (MLEHMANN on 2009-07-09) 4.8 (MLEHMANN on 2009-07-06) 4.451 (MLEHMANN on 2009-07-02) 4.45 (MLEHMANN on 2009-06-29) 4.42 (MLEHMANN on 2009-06-26) 4.412 (MLEHMANN on 2009-06-23) 4.411 (MLEHMANN on 2009-06-07) 4.41 (MLEHMANN on 2009-05-14) 4.4 (MLEHMANN on 2009-04-26) 4.352 (MLEHMANN on 2009-04-20) 4.351 (MLEHMANN on 2009-04-11) 4.35 (MLEHMANN on 2009-03-27) 4.34 (MLEHMANN on 2009-02-12) 4.331 (MLEHMANN on 2009-01-06) 4.33 (MLEHMANN on 2008-11-21) 4.32 (MLEHMANN on 2008-11-03) 4.31 (MLEHMANN on 2008-10-30) 4.3 (MLEHMANN on 2008-10-03) 4.234 (MLEHMANN on 2008-09-29) 4.233 (MLEHMANN on 2008-08-21) 4.232 (MLEHMANN on 2008-08-21) 4.231 (MLEHMANN on 2008-07-29) 4.23 (MLEHMANN on 2008-07-29) 4.22 (MLEHMANN on 2008-07-20) 4.21 (MLEHMANN on 2008-07-17) 4.2 (MLEHMANN on 2008-07-12) 4.161 (MLEHMANN on 2008-07-04) 4.160 (MLEHMANN on 2008-07-03) 4.152 (MLEHMANN on 2008-06-22) 4.151 (MLEHMANN on 2008-06-06) 4.15 (MLEHMANN on 2008-06-06) 4.14 (MLEHMANN on 2008-06-05) 4.13 (MLEHMANN on 2008-06-04) 4.12 (MLEHMANN on 2008-06-03) 4.11 (MLEHMANN on 2008-05-30) 4.1 (MLEHMANN on 2008-05-29) 4.05 (MLEHMANN on 2008-05-26) 4.04 (MLEHMANN on 2008-05-26) 4.03 (MLEHMANN on 2008-05-25) 4.0 (MLEHMANN on 2008-05-24) 3.5 (MLEHMANN on 2008-05-17) 3.41 (MLEHMANN on 2008-05-11) 3.4 (MLEHMANN on 2008-05-10) 3.3 (MLEHMANN on 2008-04-28) 3.2 (MLEHMANN on 2008-04-24) 3.12 (MLEHMANN on 2008-04-22) 3.11 (MLEHMANN on 2008-04-19) 3.1 (MLEHMANN on 2008-04-16) 3.0 (MLEHMANN on 2008-04-07) 2.9 (MLEHMANN on 2008-01-28) 2.8 (MLEHMANN on 2007-11-25) 2.7 (MLEHMANN on 2007-11-23) 2.6 (MLEHMANN on 2007-11-09) 2.55 (MLEHMANN on 2007-11-06) 2.54 (MLEHMANN on 2007-07-18) 2.53 (MLEHMANN on 2007-07-08) 2.52 (MLEHMANN on 2007-03-07) 2.51 (MLEHMANN on 2006-12-11) 2.5 (MLEHMANN on 2006-12-11) 2.1 (MLEHMANN on 2006-11-24) 2.0 (MLEHMANN on 2006-11-01) 1.02 (MLEHMANN on 2006-01-13) 1.01 (MLEHMANN on 2006-01-08) 1.0 (MLEHMANN on 2006-01-08) 0.4 (MLEHMANN on 2005-12-30) 0.3 (MLEHMANN on 2005-12-04) 0.2 (MLEHMANN on 2005-12-01) 0.1 (MLEHMANN on 2005-12-01) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 62 PAUSE users 49 non-PAUSE users. MLEHMANN Marc A. Lehmann Dependencies unknown CPAN Testers List Reverse dependencies NAME SYNOPSIS INTRODUCTION/TUTORIAL SUPPORT WHY YOU SHOULD USE THIS MODULE (OR NOT) DESCRIPTION WATCHERS I/O WATCHERS TIME WATCHERS TIMING ISSUES SIGNAL WATCHERS Restart Behaviour Safe/Unsafe Signals Signal Races, Delays and Workarounds CHILD PROCESS WATCHERS IDLE WATCHERS CONDITION VARIABLES METHODS FOR PRODUCERS METHODS FOR CONSUMERS SUPPORTED EVENT LOOPS/BACKENDS GLOBAL VARIABLES AND FUNCTIONS WHAT TO DO IN A MODULE WHAT TO DO IN THE MAIN PROGRAM MAINLOOP EMULATION OTHER MODULES SIMPLIFIED AE API ERROR AND EXCEPTION HANDLING ENVIRONMENT VARIABLES SUPPLYING YOUR OWN EVENT MODEL INTERFACE EXAMPLE PROGRAM REAL-WORLD EXAMPLE BENCHMARKS BENCHMARKING ANYEVENT OVERHEAD Explanation of the columns Results Discussion Summary BENCHMARKING THE LARGE SERVER CASE Explanation of the columns Results Discussion Summary BENCHMARKING SMALL SERVERS Results Discussion Summary THE IO::Lambda BENCHMARK SIGNALS RECOMMENDED/OPTIONAL MODULES FORK SECURITY CONSIDERATIONS BUGS SEE ALSO AUTHOR NAME AnyEvent - the DBI of event loop programming EV, Event, Glib, Tk, UV, Perl, Event::Lib, Irssi, rxvt-unicode, IO::Async, Qt, FLTK and POE are various supported event loops/environments. SYNOPSIS    use AnyEvent;     # if you prefer function calls, look at the AE manpage for    # an alternative API.     # file handle or descriptor readable    my $w = AnyEvent->io (fh => $fh, poll => ""r"", cb => sub { ...  });     # one-shot or repeating timers    my $w = AnyEvent->timer (after => $seconds, cb => sub { ...  });    my $w = AnyEvent->timer (after => $seconds, interval => $seconds, cb => ...);     print AnyEvent->now;  # prints current event loop time    print AnyEvent->time; # think Time::HiRes::time or simply CORE::time.     # POSIX signal    my $w = AnyEvent->signal (signal => ""TERM"", cb => sub { ... });     # child process exit    my $w = AnyEvent->child (pid => $pid, cb => sub {       my ($pid, $status) = @_;       ...    });     # called when event loop idle (if applicable)    my $w = AnyEvent->idle (cb => sub { ... });     my $w = AnyEvent->condvar; # stores whether a condition was flagged    $w->send; # wake up current and all future recv's    $w->recv; # enters ""main loop"" till $condvar gets ->send    # use a condvar in callback mode:    $w->cb (sub { $_[0]->recv }); INTRODUCTION/TUTORIAL This manpage is mainly a reference manual. If you are interested in a tutorial or some gentle introduction, have a look at the AnyEvent::Intro manpage. SUPPORT An FAQ document is available as AnyEvent::FAQ. There also is a mailinglist for discussing all things AnyEvent, and an IRC channel, too. See the AnyEvent project page at the Schmorpforge Ta-Sa Software Repository, at http://anyevent.schmorp.de, for more info. WHY YOU SHOULD USE THIS MODULE (OR NOT) Glib, POE, IO::Async, Event... CPAN offers event models by the dozen nowadays. So what is different about AnyEvent? Executive Summary: AnyEvent is compatible, AnyEvent is free of policy and AnyEvent is small and efficient. First and foremost, AnyEvent is not an event model itself, it only interfaces to whatever event model the main program happens to use, in a pragmatic way. For event models and certain classes of immortals alike, the statement ""there can only be one"" is a bitter reality: In general, only one event loop can be active at the same time in a process. AnyEvent cannot change this, but it can hide the differences between those event loops. The goal of AnyEvent is to offer module authors the ability to do event programming (waiting for I/O or timer events) without subscribing to a religion, a way of living, and most importantly: without forcing your module users into the same thing by forcing them to use the same event model you use. For modules like POE or IO::Async (which is a total misnomer as it is actually doing all I/O synchronously...), using them in your module is like joining a cult: After you join, you are dependent on them and you cannot use anything else, as they are simply incompatible to everything that isn't them. What's worse, all the potential users of your module are also forced to use the same event loop you use. AnyEvent is different: AnyEvent + POE works fine. AnyEvent + Glib works fine. AnyEvent + Tk works fine etc. etc. but none of these work together with the rest: POE + EV? No go. Tk + Event? No go. Again: if your module uses one of those, every user of your module has to use it, too. But if your module uses AnyEvent, it works transparently with all event models it supports (including stuff like IO::Async, as long as those use one of the supported event loops. It is easy to add new event loops to AnyEvent, too, so it is future-proof). In addition to being free of having to use the one and only true event model, AnyEvent also is free of bloat and policy: with POE or similar modules, you get an enormous amount of code and strict rules you have to follow. AnyEvent, on the other hand, is lean and to the point, by only offering the functionality that is necessary, in as thin as a wrapper as technically possible. Of course, AnyEvent comes with a big (and fully optional!) toolbox of useful functionality, such as an asynchronous DNS resolver, 100% non-blocking connects (even with TLS/SSL, IPv6 and on broken platforms such as Windows) and lots of real-world knowledge and workarounds for platform bugs and differences. Now, if you do want lots of policy (this can arguably be somewhat useful) and you want to force your users to use the one and only event model, you should not use this module. DESCRIPTION AnyEvent provides a uniform interface to various event loops. This allows module authors to use event loop functionality without forcing module users to use a specific event loop implementation (since more than one event loop cannot coexist peacefully). The interface itself is vaguely similar, but not identical to the Event module. During the first call of any watcher-creation method, the module tries to detect the currently loaded event loop by probing whether one of the following modules is already loaded: EV, AnyEvent::Loop, Event, Glib, Tk, Event::Lib, Qt, POE. The first one found is used. If none are detected, the module tries to load the first four modules in the order given; but note that if EV is not available, the pure-perl AnyEvent::Loop should always work, so the other two are not normally tried. Because AnyEvent first checks for modules that are already loaded, loading an event model explicitly before first using AnyEvent will likely make that model the default. For example:    use Tk;    use AnyEvent;     # .. AnyEvent will likely default to Tk The likely means that, if any module loads another event model and starts using it, all bets are off - this case should be very rare though, as very few modules hardcode event loops without announcing this very loudly. The pure-perl implementation of AnyEvent is called AnyEvent::Loop. Like other event modules you can load it explicitly and enjoy the high availability of that event loop :) WATCHERS AnyEvent has the central concept of a watcher, which is an object that stores relevant data for each kind of event you are waiting for, such as the callback to call, the file handle to watch, etc. These watchers are normal Perl objects with normal Perl lifetime. After creating a watcher it will immediately ""watch"" for events and invoke the callback when the event occurs (of course, only when the event model is in control). Note that callbacks must not permanently change global variables potentially in use by the event loop (such as $_ or $[) and that callbacks must not die. The former is good programming practice in Perl and the latter stems from the fact that exception handling differs widely between event loops. To disable a watcher you have to destroy it (e.g. by setting the variable you store it in to undef or otherwise deleting all references to it). All watchers are created by calling a method on the AnyEvent class. Many watchers either are used with ""recursion"" (repeating timers for example), or need to refer to their watcher object in other ways. One way to achieve that is this pattern:    my $w; $w = AnyEvent->type (arg => value ..., cb => sub {       # you can use $w here, for example to undef it       undef $w;    }); Note that my $w; $w = combination. This is necessary because in Perl, my variables are only visible after the statement in which they are declared. I/O WATCHERS    $w = AnyEvent->io (       fh   => <filehandle_or_fileno>,       poll => <""r"" or ""w"">,       cb   => <callback>,    ); You can create an I/O watcher by calling the AnyEvent->io method with the following mandatory key-value pairs as arguments: fh is the Perl file handle (or a naked file descriptor) to watch for events (AnyEvent might or might not keep a reference to this file handle). Note that only file handles pointing to things for which non-blocking operation makes sense are allowed. This includes sockets, most character devices, pipes, fifos and so on, but not for example files or block devices. poll must be a string that is either r or w, which creates a watcher waiting for ""r""eadable or ""w""ritable events, respectively. cb is the callback to invoke each time the file handle becomes ready. Although the callback might get passed parameters, their value and presence is undefined and you cannot rely on them. Portable AnyEvent callbacks cannot use arguments passed to I/O watcher callbacks. The I/O watcher might use the underlying file descriptor or a copy of it. You must not close a file handle as long as any watcher is active on the underlying file descriptor. Some event loops issue spurious readiness notifications, so you should always use non-blocking calls when reading/writing from/to your file handles. Example: wait for readability of STDIN, then read a line and disable the watcher.    my $w; $w = AnyEvent->io (fh => \*STDIN, poll => 'r', cb => sub {       chomp (my $input = <STDIN>);       warn ""read: $input\n"";       undef $w;    }); TIME WATCHERS    $w = AnyEvent->timer (after => <seconds>, cb => <callback>);     $w = AnyEvent->timer (       after    => <fractional_seconds>,       interval => <fractional_seconds>,       cb       => <callback>,    ); You can create a time watcher by calling the AnyEvent->timer method with the following mandatory arguments: after specifies after how many seconds (fractional values are supported) the callback should be invoked. cb is the callback to invoke in that case. Although the callback might get passed parameters, their value and presence is undefined and you cannot rely on them. Portable AnyEvent callbacks cannot use arguments passed to time watcher callbacks. The callback will normally be invoked only once. If you specify another parameter, interval, as a strictly positive number (> 0), then the callback will be invoked regularly at that interval (in fractional seconds) after the first invocation. If interval is specified with a false value, then it is treated as if it were not specified at all. The callback will be rescheduled before invoking the callback, but no attempt is made to avoid timer drift in most backends, so the interval is only approximate. Example: fire an event after 7.7 seconds.    my $w = AnyEvent->timer (after => 7.7, cb => sub {       warn ""timeout\n"";    });     # to cancel the timer:    undef $w; Example 2: fire an event after 0.5 seconds, then roughly every second.    my $w = AnyEvent->timer (after => 0.5, interval => 1, cb => sub {       warn ""timeout\n"";    }); TIMING ISSUES There are two ways to handle timers: based on real time (relative, ""fire in 10 seconds"") and based on wallclock time (absolute, ""fire at 12 o'clock""). While most event loops expect timers to specified in a relative way, they use absolute time internally. This makes a difference when your clock ""jumps"", for example, when ntp decides to set your clock backwards from the wrong date of 2014-01-01 to 2008-01-01, a watcher that is supposed to fire ""after a second"" might actually take six years to finally fire. AnyEvent cannot compensate for this. The only event loop that is conscious of these issues is EV, which offers both relative (ev_timer, based on true relative time) and absolute (ev_periodic, based on wallclock time) timers. AnyEvent always prefers relative timers, if available, matching the AnyEvent API. AnyEvent has two additional methods that return the ""current time"": AnyEvent->time This returns the ""current wallclock time"" as a fractional number of seconds since the Epoch (the same thing as time or Time::HiRes::time return, and the result is guaranteed to be compatible with those). It progresses independently of any event loop processing, i.e. each call will check the system clock, which usually gets updated frequently. AnyEvent->now This also returns the ""current wallclock time"", but unlike time, above, this value might change only once per event loop iteration, depending on the event loop (most return the same time as time, above). This is the time that AnyEvent's timers get scheduled against. In almost all cases (in all cases if you don't care), this is the function to call when you want to know the current time. This function is also often faster then AnyEvent->time, and thus the preferred method if you want some timestamp (for example, AnyEvent::Handle uses this to update its activity timeouts). The rest of this section is only of relevance if you try to be very exact with your timing; you can skip it without a bad conscience. For a practical example of when these times differ, consider Event::Lib and EV and the following set-up: The event loop is running and has just invoked one of your callbacks at time=500 (assume no other callbacks delay processing). In your callback, you wait a second by executing sleep 1 (blocking the process for a second) and then (at time=501) you create a relative timer that fires after three seconds. With Event::Lib, AnyEvent->time and AnyEvent->now will both return 501, because that is the current time, and the timer will be scheduled to fire at time=504 (501 + 3). With EV, AnyEvent->time returns 501 (as that is the current time), but AnyEvent->now returns 500, as that is the time the last event processing phase started. With EV, your timer gets scheduled to run at time=503 (500 + 3). In one sense, Event::Lib is more exact, as it uses the current time regardless of any delays introduced by event processing. However, most callbacks do not expect large delays in processing, so this causes a higher drift (and a lot more system calls to get the current time). In another sense, EV is more exact, as your timer will be scheduled at the same time, regardless of how long event processing actually took. In either case, if you care (and in most cases, you don't), then you can get whatever behaviour you want with any event loop, by taking the difference between AnyEvent->time and AnyEvent->now into account. AnyEvent->now_update Some event loops (such as EV or AnyEvent::Loop) cache the current time for each loop iteration (see the discussion of AnyEvent->now, above). When a callback runs for a long time (or when the process sleeps), then this ""current"" time will differ substantially from the real time, which might affect timers and time-outs. When this is the case, you can call this method, which will update the event loop's idea of ""current time"". A typical example would be a script in a web server (e.g. mod_perl) - when mod_perl executes the script, then the event loop will have the wrong idea about the ""current time"" (being potentially far in the past, when the script ran the last time). In that case you should arrange a call to AnyEvent->now_update each time the web server process wakes up again (e.g. at the start of your script, or in a handler). Note that updating the time might cause some events to be handled. SIGNAL WATCHERS    $w = AnyEvent->signal (signal => <uppercase_signal_name>, cb => <callback>); You can watch for signals using a signal watcher, signal is the signal name in uppercase and without any SIG prefix, cb is the Perl callback to be invoked whenever a signal occurs. Although the callback might get passed parameters, their value and presence is undefined and you cannot rely on them. Portable AnyEvent callbacks cannot use arguments passed to signal watcher callbacks. Multiple signal occurrences can be clumped together into one callback invocation, and callback invocation will be synchronous. Synchronous means that it might take a while until the signal gets handled by the process, but it is guaranteed not to interrupt any other callbacks. The main advantage of using these watchers is that you can share a signal between multiple watchers, and AnyEvent will ensure that signals will not interrupt your program at bad times. This watcher might use %SIG (depending on the event loop used), so programs overwriting those signals directly will likely not work correctly. Example: exit on SIGINT    my $w = AnyEvent->signal (signal => ""INT"", cb => sub { exit 1 }); Restart Behaviour While restart behaviour is up to the event loop implementation, most will not restart syscalls (that includes Async::Interrupt and AnyEvent's pure perl implementation). Safe/Unsafe Signals Perl signals can be either ""safe"" (synchronous to opcode handling) or ""unsafe"" (asynchronous) - the former might delay signal delivery indefinitely, the latter might corrupt your memory. AnyEvent signal handlers are, in addition, synchronous to the event loop, i.e. they will not interrupt your running perl program but will only be called as part of the normal event handling (just like timer, I/O etc. callbacks, too). Signal Races, Delays and Workarounds Many event loops (e.g. Glib, Tk, Qt, IO::Async) do not support attaching callbacks to signals in a generic way, which is a pity, as you cannot do race-free signal handling in perl, requiring C libraries for this. AnyEvent will try to do its best, which means in some cases, signals will be delayed. The maximum time a signal might be delayed is 10 seconds by default, but can be overriden via $ENV{PERL_ANYEVENT_MAX_SIGNAL_LATENCY} or $AnyEvent::MAX_SIGNAL_LATENCY - see the ""ENVIRONMENT VARIABLES"" section for details. All these problems can be avoided by installing the optional Async::Interrupt module, which works with most event loops. It will not work with inherently broken event loops such as Event or Event::Lib (and not with POE currently). For those, you just have to suffer the delays. CHILD PROCESS WATCHERS    $w = AnyEvent->child (pid => <process id>, cb => <callback>); You can also watch for a child process exit and catch its exit status. The child process is specified by the pid argument (on some backends, using 0 watches for any child process exit, on others this will croak). The watcher will be triggered only when the child process has finished and an exit status is available, not on any trace events (stopped/continued). The callback will be called with the pid and exit status (as returned by waitpid), so unlike other watcher types, you can rely on child watcher callback arguments. This watcher type works by installing a signal handler for SIGCHLD, and since it cannot be shared, nothing else should use SIGCHLD or reap random child processes (waiting for specific child processes, e.g. inside system, is just fine). There is a slight catch to child watchers, however: you usually start them after the child process was created, and this means the process could have exited already (and no SIGCHLD will be sent anymore). Not all event models handle this correctly (neither POE nor IO::Async do, see their AnyEvent::Impl manpages for details), but even for event models that do handle this correctly, they usually need to be loaded before the process exits (i.e. before you fork in the first place). AnyEvent's pure perl event loop handles all cases correctly regardless of when you start the watcher. This means you cannot create a child watcher as the very first thing in an AnyEvent program, you have to create at least one watcher before you fork the child (alternatively, you can call AnyEvent::detect). As most event loops do not support waiting for child events, they will be emulated by AnyEvent in most cases, in which case the latency and race problems mentioned in the description of signal watchers apply. Example: fork a process and wait for it    my $done = AnyEvent->condvar;       # this forks and immediately calls exit in the child. this    # normally has all sorts of bad consequences for your parent,    # so take this as an example only. always fork and exec,    # or call POSIX::_exit, in real code.    my $pid = fork or exit 5;       my $w = AnyEvent->child (       pid => $pid,       cb  => sub {          my ($pid, $status) = @_;          warn ""pid $pid exited with status $status"";          $done->send;       },    );       # do something else, then wait for process exit    $done->recv; IDLE WATCHERS    $w = AnyEvent->idle (cb => <callback>); This will repeatedly invoke the callback after the process becomes idle, until either the watcher is destroyed or new events have been detected. Idle watchers are useful when there is a need to do something, but it is not so important (or wise) to do it instantly. The callback will be invoked only when there is ""nothing better to do"", which is usually defined as ""all outstanding events have been handled and no new events have been detected"". That means that idle watchers ideally get invoked when the event loop has just polled for new events but none have been detected. Instead of blocking to wait for more events, the idle watchers will be invoked. Unfortunately, most event loops do not really support idle watchers (only EV, Event and Glib do it in a usable fashion) - for the rest, AnyEvent will simply call the callback ""from time to time"". Example: read lines from STDIN, but only process them when the program is otherwise idle:    my @lines; # read data    my $idle_w;    my $io_w = AnyEvent->io (fh => \*STDIN, poll => 'r', cb => sub {       push @lines, scalar <STDIN>;        # start an idle watcher, if not already done       $idle_w ||= AnyEvent->idle (cb => sub {          # handle only one line, when there are lines left          if (my $line = shift @lines) {             print ""handled when idle: $line"";          } else {             # otherwise disable the idle watcher again             undef $idle_w;          }       });    }); CONDITION VARIABLES    $cv = AnyEvent->condvar;     $cv->send (<list>);    my @res = $cv->recv; If you are familiar with some event loops you will know that all of them require you to run some blocking ""loop"", ""run"" or similar function that will actively watch for new events and call your callbacks. AnyEvent is slightly different: it expects somebody else to run the event loop and will only block when necessary (usually when told by the user). The tool to do that is called a ""condition variable"", so called because they represent a condition that must become true. Now is probably a good time to look at the examples further below. Condition variables can be created by calling the AnyEvent->condvar method, usually without arguments. The only argument pair allowed is cb, which specifies a callback to be called when the condition variable becomes true, with the condition variable as the first argument (but not the results). After creation, the condition variable is ""false"" until it becomes ""true"" by calling the send method (or calling the condition variable as if it were a callback, read about the caveats in the description for the ->send method). Since condition variables are the most complex part of the AnyEvent API, here are some different mental models of what they are - pick the ones you can connect to: Condition variables are like callbacks - you can call them (and pass them instead of callbacks). Unlike callbacks however, you can also wait for them to be called. Condition variables are signals - one side can emit or send them, the other side can wait for them, or install a handler that is called when the signal fires. Condition variables are like ""Merge Points"" - points in your program where you merge multiple independent results/control flows into one. Condition variables represent a transaction - functions that start some kind of transaction can return them, leaving the caller the choice between waiting in a blocking fashion, or setting a callback. Condition variables represent future values, or promises to deliver some result, long before the result is available. Condition variables are very useful to signal that something has finished, for example, if you write a module that does asynchronous http requests, then a condition variable would be the ideal candidate to signal the availability of results. The user can either act when the callback is called or can synchronously ->recv for the results. You can also use them to simulate traditional event loops - for example, you can block your main program until an event occurs - for example, you could ->recv in your main program until the user clicks the Quit button of your app, which would ->send the ""quit"" event. Note that condition variables recurse into the event loop - if you have two pieces of code that call ->recv in a round-robin fashion, you lose. Therefore, condition variables are good to export to your caller, but you should avoid making a blocking wait yourself, at least in callbacks, as this asks for trouble. Condition variables are represented by hash refs in perl, and the keys used by AnyEvent itself are all named _ae_XXX to make subclassing easy (it is often useful to build your own transaction class on top of AnyEvent). To subclass, use AnyEvent::CondVar as base class and call its new method in your own new method. There are two ""sides"" to a condition variable - the ""producer side"" which eventually calls -> send, and the ""consumer side"", which waits for the send to occur. Example: wait for a timer.    # condition: ""wait till the timer is fired""    my $timer_fired = AnyEvent->condvar;     # create the timer - we could wait for, say    # a handle becomign ready, or even an    # AnyEvent::HTTP request to finish, but    # in this case, we simply use a timer:    my $w = AnyEvent->timer (       after => 1,       cb    => sub { $timer_fired->send },    );     # this ""blocks"" (while handling events) till the callback    # calls ->send    $timer_fired->recv; Example: wait for a timer, but take advantage of the fact that condition variables are also callable directly.    my $done = AnyEvent->condvar;    my $delay = AnyEvent->timer (after => 5, cb => $done);    $done->recv; Example: Imagine an API that returns a condvar and doesn't support callbacks. This is how you make a synchronous call, for example from the main program:    use AnyEvent::CouchDB;     ...     my @info = $couchdb->info->recv; And this is how you would just set a callback to be called whenever the results are available:    $couchdb->info->cb (sub {       my @info = $_[0]->recv;    }); METHODS FOR PRODUCERS These methods should only be used by the producing side, i.e. the code/module that eventually sends the signal. Note that it is also the producer side which creates the condvar in most cases, but it isn't uncommon for the consumer to create it as well. $cv->send (...) Flag the condition as ready - a running ->recv and all further calls to recv will (eventually) return after this method has been called. If nobody is waiting the send will be remembered. If a callback has been set on the condition variable, it is called immediately from within send. Any arguments passed to the send call will be returned by all future ->recv calls. Condition variables are overloaded so one can call them directly (as if they were a code reference). Calling them directly is the same as calling send. $cv->croak ($error) Similar to send, but causes all calls to ->recv to invoke Carp::croak with the given error message/object/scalar. This can be used to signal any errors to the condition variable user/consumer. Doing it this way instead of calling croak directly delays the error detection, but has the overwhelming advantage that it diagnoses the error at the place where the result is expected, and not deep in some event callback with no connection to the actual code causing the problem. $cv->begin ([group callback]) $cv->end These two methods can be used to combine many transactions/events into one. For example, a function that pings many hosts in parallel might want to use a condition variable for the whole process. Every call to ->begin will increment a counter, and every call to ->end will decrement it. If the counter reaches 0 in ->end, the (last) callback passed to begin will be executed, passing the condvar as first argument. That callback is supposed to call ->send, but that is not required. If no group callback was set, send will be called without any arguments. You can think of $cv->send giving you an OR condition (one call sends), while $cv->begin and $cv->end giving you an AND condition (all begin calls must be end'ed before the condvar sends). Let's start with a simple example: you have two I/O watchers (for example, STDOUT and STDERR for a program), and you want to wait for both streams to close before activating a condvar:    my $cv = AnyEvent->condvar;     $cv->begin; # first watcher    my $w1 = AnyEvent->io (fh => $fh1, cb => sub {       defined sysread $fh1, my $buf, 4096          or $cv->end;    });     $cv->begin; # second watcher    my $w2 = AnyEvent->io (fh => $fh2, cb => sub {       defined sysread $fh2, my $buf, 4096          or $cv->end;    });     $cv->recv; This works because for every event source (EOF on file handle), there is one call to begin, so the condvar waits for all calls to end before sending. The ping example mentioned above is slightly more complicated, as the there are results to be passed back, and the number of tasks that are begun can potentially be zero:    my $cv = AnyEvent->condvar;     my %result;    $cv->begin (sub { shift->send (\%result) });     for my $host (@list_of_hosts) {       $cv->begin;       ping_host_then_call_callback $host, sub {          $result{$host} = ...;          $cv->end;       };    }     $cv->end;     ...     my $results = $cv->recv; This code fragment supposedly pings a number of hosts and calls send after results for all then have have been gathered - in any order. To achieve this, the code issues a call to begin when it starts each ping request and calls end when it has received some result for it. Since begin and end only maintain a counter, the order in which results arrive is not relevant. There is an additional bracketing call to begin and end outside the loop, which serves two important purposes: first, it sets the callback to be called once the counter reaches 0, and second, it ensures that send is called even when no hosts are being pinged (the loop doesn't execute once). This is the general pattern when you ""fan out"" into multiple (but potentially zero) subrequests: use an outer begin/end pair to set the callback and ensure end is called at least once, and then, for each subrequest you start, call begin and for each subrequest you finish, call end. METHODS FOR CONSUMERS These methods should only be used by the consuming side, i.e. the code awaits the condition. $cv->recv Wait (blocking if necessary) until the ->send or ->croak methods have been called on $cv, while servicing other watchers normally. You can only wait once on a condition - additional calls are valid but will return immediately. If an error condition has been set by calling ->croak, then this function will call croak. In list context, all parameters passed to send will be returned, in scalar context only the first one will be returned. Note that doing a blocking wait in a callback is not supported by any event loop, that is, recursive invocation of a blocking ->recv is not allowed and the recv call will croak if such a condition is detected. This requirement can be dropped by relying on Coro::AnyEvent , which allows you to do a blocking ->recv from any thread that doesn't run the event loop itself. Coro::AnyEvent is loaded automatically when Coro is used with AnyEvent, so code does not need to do anything special to take advantage of that: any code that would normally block your program because it calls recv, be executed in an async thread instead without blocking other threads. Not all event models support a blocking wait - some die in that case (programs might want to do that to stay interactive), so if you are using this from a module, never require a blocking wait. Instead, let the caller decide whether the call will block or not (for example, by coupling condition variables with some kind of request results and supporting callbacks so the caller knows that getting the result will not block, while still supporting blocking waits if the caller so desires). You can ensure that ->recv never blocks by setting a callback and only calling ->recv from within that callback (or at a later time). This will work even when the event loop does not support blocking waits otherwise. $bool = $cv->ready Returns true when the condition is ""true"", i.e. whether send or croak have been called. $cb = $cv->cb ($cb->($cv)) This is a mutator function that returns the callback set and optionally replaces it before doing so. The callback will be called when the condition becomes ""true"", i.e. when send or croak are called, with the only argument being the condition variable itself. If the condition is already true, the callback is called immediately when it is set. Calling recv inside the callback or at any later time is guaranteed not to block. SUPPORTED EVENT LOOPS/BACKENDS The available backend classes are (every class has its own manpage): Backends that are autoprobed when no other event loop can be found. EV is the preferred backend when no other event loop seems to be in use. If EV is not installed, then AnyEvent will fall back to its own pure-perl implementation, which is available everywhere as it comes with AnyEvent itself.    AnyEvent::Impl::EV        based on EV (interface to libev, best choice).    AnyEvent::Impl::Perl      pure-perl AnyEvent::Loop, fast and portable. Backends that are transparently being picked up when they are used. These will be used if they are already loaded when the first watcher is created, in which case it is assumed that the application is using them. This means that AnyEvent will automatically pick the right backend when the main program loads an event module before anything starts to create watchers. Nothing special needs to be done by the main program.    AnyEvent::Impl::Event     based on Event, very stable, few glitches.    AnyEvent::Impl::Glib      based on Glib, slow but very stable.    AnyEvent::Impl::Tk        based on Tk, very broken.    AnyEvent::Impl::UV        based on UV, innovated square wheels.    AnyEvent::Impl::EventLib  based on Event::Lib, leaks memory and worse.    AnyEvent::Impl::POE       based on POE, very slow, some limitations.    AnyEvent::Impl::Irssi     used when running within irssi.    AnyEvent::Impl::IOAsync   based on IO::Async.    AnyEvent::Impl::Cocoa     based on Cocoa::EventLoop.    AnyEvent::Impl::FLTK      based on FLTK (fltk 2 binding). Backends with special needs. Qt requires the Qt::Application to be instantiated first, but will otherwise be picked up automatically. As long as the main program instantiates the application before any AnyEvent watchers are created, everything should just work.    AnyEvent::Impl::Qt        based on Qt. Event loops that are indirectly supported via other backends. Some event loops can be supported via other modules: There is no direct support for WxWidgets (Wx) or Prima. WxWidgets has no support for watching file handles. However, you can use WxWidgets through the POE adaptor, as POE has a Wx backend that simply polls 20 times per second, which was considered to be too horrible to even consider for AnyEvent. Prima is not supported as nobody seems to be using it, but it has a POE backend, so it can be supported through POE. AnyEvent knows about both Prima and Wx, however, and will try to load POE when detecting them, in the hope that POE will pick them up, in which case everything will be automatic. GLOBAL VARIABLES AND FUNCTIONS These are not normally required to use AnyEvent, but can be useful to write AnyEvent extension modules. $AnyEvent::MODEL Contains undef until the first watcher is being created, before the backend has been autodetected. Afterwards it contains the event model that is being used, which is the name of the Perl class implementing the model. This class is usually one of the AnyEvent::Impl::xxx modules, but can be any other class in the case AnyEvent has been extended at runtime (e.g. in rxvt-unicode it will be urxvt::anyevent). AnyEvent::detect Returns $AnyEvent::MODEL, forcing autodetection of the event model if necessary. You should only call this function right before you would have created an AnyEvent watcher anyway, that is, as late as possible at runtime, and not e.g. during initialisation of your module. The effect of calling this function is as if a watcher had been created (specifically, actions that happen ""when the first watcher is created"" happen when calling detetc as well). If you need to do some initialisation before AnyEvent watchers are created, use post_detect. $guard = AnyEvent::post_detect { BLOCK } Arranges for the code block to be executed as soon as the event model is autodetected (or immediately if that has already happened). The block will be executed after the actual backend has been detected ($AnyEvent::MODEL is set), but before any watchers have been created, so it is possible to e.g. patch @AnyEvent::ISA or do other initialisations - see the sources of AnyEvent::Strict or AnyEvent::AIO to see how this is used. The most common usage is to create some global watchers, without forcing event module detection too early, for example, AnyEvent::AIO creates and installs the global IO::AIO watcher in a post_detect block to avoid autodetecting the event module at load time. If called in scalar or list context, then it creates and returns an object that automatically removes the callback again when it is destroyed (or undef when the hook was immediately executed). See AnyEvent::AIO for a case where this is useful. Example: Create a watcher for the IO::AIO module and store it in $WATCHER, but do so only do so after the event loop is initialised.    our WATCHER;     my $guard = AnyEvent::post_detect {       $WATCHER = AnyEvent->io (fh => IO::AIO::poll_fileno, poll => 'r', cb => \&IO::AIO::poll_cb);    };     # the ||= is important in case post_detect immediately runs the block,    # as to not clobber the newly-created watcher. assigning both watcher and    # post_detect guard to the same variable has the advantage of users being    # able to just C<undef $WATCHER> if the watcher causes them grief.     $WATCHER ||= $guard; @AnyEvent::post_detect If there are any code references in this array (you can push to it before or after loading AnyEvent), then they will be called directly after the event loop has been chosen. You should check $AnyEvent::MODEL before adding to this array, though: if it is defined then the event loop has already been detected, and the array will be ignored. Best use AnyEvent::post_detect { BLOCK } when your application allows it, as it takes care of these details. This variable is mainly useful for modules that can do something useful when AnyEvent is used and thus want to know when it is initialised, but do not need to even load it by default. This array provides the means to hook into AnyEvent passively, without loading it. Example: To load Coro::AnyEvent whenever Coro and AnyEvent are used together, you could put this into Coro (this is the actual code used by Coro to accomplish this):    if (defined $AnyEvent::MODEL) {       # AnyEvent already initialised, so load Coro::AnyEvent       require Coro::AnyEvent;    } else {       # AnyEvent not yet initialised, so make sure to load Coro::AnyEvent       # as soon as it is       push @AnyEvent::post_detect, sub { require Coro::AnyEvent };    } AnyEvent::postpone { BLOCK } Arranges for the block to be executed as soon as possible, but not before the call itself returns. In practise, the block will be executed just before the event loop polls for new events, or shortly afterwards. This function never returns anything (to make the return postpone { ... } idiom more useful. To understand the usefulness of this function, consider a function that asynchronously does something for you and returns some transaction object or guard to let you cancel the operation. For example, AnyEvent::Socket::tcp_connect:    # start a connection attempt unless one is active    $self->{connect_guard} ||= AnyEvent::Socket::tcp_connect ""www.example.net"", 80, sub {       delete $self->{connect_guard};       ...    }; Imagine that this function could instantly call the callback, for example, because it detects an obvious error such as a negative port number. Invoking the callback before the function returns causes problems however: the callback will be called and will try to delete the guard object. But since the function hasn't returned yet, there is nothing to delete. When the function eventually returns it will assign the guard object to $self->{connect_guard}, where it will likely never be deleted, so the program thinks it is still trying to connect. This is where AnyEvent::postpone should be used. Instead of calling the callback directly on error:    $cb->(undef), return # signal error to callback, BAD!       if $some_error_condition; It should use postpone:    AnyEvent::postpone { $cb->(undef) }, return # signal error to callback, later       if $some_error_condition; AnyEvent::log $level, $msg[, @args] Log the given $msg at the given $level. If AnyEvent::Log is not loaded then this function makes a simple test to see whether the message will be logged. If the test succeeds it will load AnyEvent::Log and call AnyEvent::Log::log - consequently, look at the AnyEvent::Log documentation for details. If the test fails it will simply return. Right now this happens when a numerical loglevel is used and it is larger than the level specified via $ENV{PERL_ANYEVENT_VERBOSE}. If you want to sprinkle loads of logging calls around your code, consider creating a logger callback with the AnyEvent::Log::logger function, which can reduce typing, codesize and can reduce the logging overhead enourmously. AnyEvent::fh_block $filehandle AnyEvent::fh_unblock $filehandle Sets blocking or non-blocking behaviour for the given filehandle. WHAT TO DO IN A MODULE As a module author, you should use AnyEvent and call AnyEvent methods freely, but you should not load a specific event module or rely on it. Be careful when you create watchers in the module body - AnyEvent will decide which event module to use as soon as the first method is called, so by calling AnyEvent in your module body you force the user of your module to load the event module first. Never call ->recv on a condition variable unless you know that the ->send method has been called on it already. This is because it will stall the whole program, and the whole point of using events is to stay interactive. It is fine, however, to call ->recv when the user of your module requests it (i.e. if you create a http request object ad have a method called results that returns the results, it may call ->recv freely, as the user of your module knows what she is doing. Always). WHAT TO DO IN THE MAIN PROGRAM There will always be a single main program - the only place that should dictate which event model to use. If the program is not event-based, it need not do anything special, even when it depends on a module that uses an AnyEvent. If the program itself uses AnyEvent, but does not care which event loop is used, all it needs to do is use AnyEvent. In either case, AnyEvent will choose the best available loop implementation. If the main program relies on a specific event model - for example, in Gtk2 programs you have to rely on the Glib module - you should load the event module before loading AnyEvent or any module that uses it: generally speaking, you should load it as early as possible. The reason is that modules might create watchers when they are loaded, and AnyEvent will decide on the event model to use as soon as it creates watchers, and it might choose the wrong one unless you load the correct one yourself. You can chose to use a pure-perl implementation by loading the AnyEvent::Loop module, which gives you similar behaviour everywhere, but letting AnyEvent chose the model is generally better. MAINLOOP EMULATION Sometimes (often for short test scripts, or even standalone programs who only want to use AnyEvent), you do not want to run a specific event loop. In that case, you can use a condition variable like this:    AnyEvent->condvar->recv; This has the effect of entering the event loop and looping forever. Note that usually your program has some exit condition, in which case it is better to use the ""traditional"" approach of storing a condition variable somewhere, waiting for it, and sending it when the program should exit cleanly. OTHER MODULES The following is a non-exhaustive list of additional modules that use AnyEvent as a client and can therefore be mixed easily with other AnyEvent modules and other event loops in the same program. Some of the modules come as part of AnyEvent, the others are available via CPAN (see http://search.cpan.org/search?m=module&q=anyevent%3A%3A* for a longer non-exhaustive list), and the list is heavily biased towards modules of the AnyEvent author himself :) AnyEvent::Util (part of the AnyEvent distribution) Contains various utility functions that replace often-used blocking functions such as inet_aton with event/callback-based versions. AnyEvent::Socket (part of the AnyEvent distribution) Provides various utility functions for (internet protocol) sockets, addresses and name resolution. Also functions to create non-blocking tcp connections or tcp servers, with IPv6 and SRV record support and more. AnyEvent::Handle (part of the AnyEvent distribution) Provide read and write buffers, manages watchers for reads and writes, supports raw and formatted I/O, I/O queued and fully transparent and non-blocking SSL/TLS (via AnyEvent::TLS). AnyEvent::DNS (part of the AnyEvent distribution) Provides rich asynchronous DNS resolver capabilities. AnyEvent::HTTP, AnyEvent::IRC, AnyEvent::XMPP, AnyEvent::GPSD, AnyEvent::IGS, AnyEvent::FCP Implement event-based interfaces to the protocols of the same name (for the curious, IGS is the International Go Server and FCP is the Freenet Client Protocol). AnyEvent::AIO (part of the AnyEvent distribution) Truly asynchronous (as opposed to non-blocking) I/O, should be in the toolbox of every event programmer. AnyEvent::AIO transparently fuses IO::AIO and AnyEvent together, giving AnyEvent access to event-based file I/O, and much more. AnyEvent::Fork, AnyEvent::Fork::RPC, AnyEvent::Fork::Pool, AnyEvent::Fork::Remote These let you safely fork new subprocesses, either locally or remotely (e.g.v ia ssh), using some RPC protocol or not, without the limitations normally imposed by fork (AnyEvent works fine for example). Dynamically-resized worker pools are obviously included as well. And they are quite tiny and fast as well - ""abusing"" AnyEvent::Fork just to exec external programs can easily beat using fork and exec (or even system) in most programs. AnyEvent::Filesys::Notify AnyEvent is good for non-blocking stuff, but it can't detect file or path changes (e.g. ""watch this directory for new files"", ""watch this file for changes""). The AnyEvent::Filesys::Notify module promises to do just that in a portbale fashion, supporting inotify on GNU/Linux and some weird, without doubt broken, stuff on OS X to monitor files. It can fall back to blocking scans at regular intervals transparently on other platforms, so it's about as portable as it gets. (I haven't used it myself, but it seems the biggest problem with it is it quite bad performance). AnyEvent::DBI Executes DBI requests asynchronously in a proxy process for you, notifying you in an event-based way when the operation is finished. AnyEvent::FastPing The fastest ping in the west. Coro Has special support for AnyEvent via Coro::AnyEvent, which allows you to simply invert the flow control - don't call us, we will call you:    async {       Coro::AnyEvent::sleep 5; # creates a 5s timer and waits for it       print ""5 seconds later!\n"";        Coro::AnyEvent::readable *STDIN; # uses an I/O watcher       my $line = <STDIN>; # works for ttys        AnyEvent::HTTP::http_get ""url"", Coro::rouse_cb;       my ($body, $hdr) = Coro::rouse_wait;    }; SIMPLIFIED AE API Starting with version 5.0, AnyEvent officially supports a second, much simpler, API that is designed to reduce the calling, typing and memory overhead by using function call syntax and a fixed number of parameters. See the AE manpage for details. ERROR AND EXCEPTION HANDLING In general, AnyEvent does not do any error handling - it relies on the caller to do that if required. The AnyEvent::Strict module (see also the PERL_ANYEVENT_STRICT environment variable, below) provides strict checking of all AnyEvent methods, however, which is highly useful during development. As for exception handling (i.e. runtime errors and exceptions thrown while executing a callback), this is not only highly event-loop specific, but also not in any way wrapped by this module, as this is the job of the main program. The pure perl event loop simply re-throws the exception (usually within condvar->recv), the Event and EV modules call $Event/EV::DIED->(), Glib uses install_exception_handler and so on. ENVIRONMENT VARIABLES AnyEvent supports a number of environment variables that tune the runtime behaviour. They are usually evaluated when AnyEvent is loaded, initialised, or a submodule that uses them is loaded. Many of them also cause AnyEvent to load additional modules - for example, PERL_ANYEVENT_DEBUG_WRAP causes the AnyEvent::Debug module to be loaded. All the environment variables documented here start with PERL_ANYEVENT_, which is what AnyEvent considers its own namespace. Other modules are encouraged (but by no means required) to use PERL_ANYEVENT_SUBMODULE if they have registered the AnyEvent::Submodule namespace on CPAN, for any submodule. For example, AnyEvent::HTTP could be expected to use PERL_ANYEVENT_HTTP_PROXY (it should not access env variables starting with AE_, see below). All variables can also be set via the AE_ prefix, that is, instead of setting PERL_ANYEVENT_VERBOSE you can also set AE_VERBOSE. In case there is a clash btween anyevent and another program that uses AE_something you can set the corresponding PERL_ANYEVENT_something variable to the empty string, as those variables take precedence. When AnyEvent is first loaded, it copies all AE_xxx env variables to their PERL_ANYEVENT_xxx counterpart unless that variable already exists. If taint mode is on, then AnyEvent will remove all environment variables starting with PERL_ANYEVENT_ from %ENV (or replace them with undef or the empty string, if the corresaponding AE_ variable is set). The exact algorithm is currently:    1. if taint mode enabled, delete all PERL_ANYEVENT_xyz variables from %ENV    2. copy over AE_xyz to PERL_ANYEVENT_xyz unless the latter alraedy exists    3. if taint mode enabled, set all PERL_ANYEVENT_xyz variables to undef. This ensures that child processes will not see the AE_ variables. The following environment variables are currently known to AnyEvent: PERL_ANYEVENT_VERBOSE By default, AnyEvent will log messages with loglevel 4 (error) or higher (see AnyEvent::Log). You can set this environment variable to a numerical loglevel to make AnyEvent more (or less) talkative. If you want to do more than just set the global logging level you should have a look at PERL_ANYEVENT_LOG, which allows much more complex specifications. When set to 0 (off), then no messages whatsoever will be logged with everything else at defaults. When set to 5 or higher (warn), AnyEvent warns about unexpected conditions, such as not being able to load the event model specified by PERL_ANYEVENT_MODEL, or a guard callback throwing an exception - this is the minimum recommended level for use during development. When set to 7 or higher (info), AnyEvent reports which event model it chooses. When set to 8 or higher (debug), then AnyEvent will report extra information on which optional modules it loads and how it implements certain features. PERL_ANYEVENT_LOG Accepts rather complex logging specifications. For example, you could log all debug messages of some module to stderr, warnings and above to stderr, and errors and above to syslog, with:    PERL_ANYEVENT_LOG=Some::Module=debug,+log:filter=warn,+%syslog:%syslog=error,syslog For the rather extensive details, see AnyEvent::Log. This variable is evaluated when AnyEvent (or AnyEvent::Log) is loaded, so will take effect even before AnyEvent has initialised itself. Note that specifying this environment variable causes the AnyEvent::Log module to be loaded, while PERL_ANYEVENT_VERBOSE does not, so only using the latter saves a few hundred kB of memory unless a module explicitly needs the extra features of AnyEvent::Log. PERL_ANYEVENT_STRICT AnyEvent does not do much argument checking by default, as thorough argument checking is very costly. Setting this variable to a true value will cause AnyEvent to load AnyEvent::Strict and then to thoroughly check the arguments passed to most method calls. If it finds any problems, it will croak. In other words, enables ""strict"" mode. Unlike use strict (or its modern cousin, use common::sense, it is definitely recommended to keep it off in production. Keeping PERL_ANYEVENT_STRICT=1 in your environment while developing programs can be very useful, however. PERL_ANYEVENT_DEBUG_SHELL If this env variable is nonempty, then its contents will be interpreted by AnyEvent::Socket::parse_hostport and AnyEvent::Debug::shell (after replacing every occurance of $$ by the process pid). The shell object is saved in $AnyEvent::Debug::SHELL. This happens when the first watcher is created. For example, to bind a debug shell on a unix domain socket in /tmp/debug<pid>.sock, you could use this:    PERL_ANYEVENT_DEBUG_SHELL=/tmp/debug\$\$.sock perlprog    # connect with e.g.: socat readline /tmp/debug123.sock Or to bind to tcp port 4545 on localhost:    PERL_ANYEVENT_DEBUG_SHELL=127.0.0.1:4545 perlprog    # connect with e.g.: telnet localhost 4545 Note that creating sockets in /tmp or on localhost is very unsafe on multiuser systems. PERL_ANYEVENT_DEBUG_WRAP Can be set to 0, 1 or 2 and enables wrapping of all watchers for debugging purposes. See AnyEvent::Debug::wrap for details. PERL_ANYEVENT_MODEL This can be used to specify the event model to be used by AnyEvent, before auto detection and -probing kicks in. It normally is a string consisting entirely of ASCII letters (e.g. EV or IOAsync). The string AnyEvent::Impl:: gets prepended and the resulting module name is loaded and - if the load was successful - used as event model backend. If it fails to load then AnyEvent will proceed with auto detection and -probing. If the string ends with :: instead (e.g. AnyEvent::Impl::EV::) then nothing gets prepended and the module name is used as-is (hint: :: at the end of a string designates a module name and quotes it appropriately). For example, to force the pure perl model (AnyEvent::Loop::Perl) you could start your program like this:    PERL_ANYEVENT_MODEL=Perl perl ... PERL_ANYEVENT_IO_MODEL The current file I/O model - see AnyEvent::IO for more info. At the moment, only Perl (small, pure-perl, synchronous) and IOAIO (truly asynchronous) are supported. The default is IOAIO if AnyEvent::AIO can be loaded, otherwise it is Perl. PERL_ANYEVENT_PROTOCOLS Used by both AnyEvent::DNS and AnyEvent::Socket to determine preferences for IPv4 or IPv6. The default is unspecified (and might change, or be the result of auto probing). Must be set to a comma-separated list of protocols or address families, current supported: ipv4 and ipv6. Only protocols mentioned will be used, and preference will be given to protocols mentioned earlier in the list. This variable can effectively be used for denial-of-service attacks against local programs (e.g. when setuid), although the impact is likely small, as the program has to handle connection and other failures anyways. Examples: PERL_ANYEVENT_PROTOCOLS=ipv4,ipv6 - prefer IPv4 over IPv6, but support both and try to use both. PERL_ANYEVENT_PROTOCOLS=ipv4 - only support IPv4, never try to resolve or contact IPv6 addresses. PERL_ANYEVENT_PROTOCOLS=ipv6,ipv4 support either IPv4 or IPv6, but prefer IPv6 over IPv4. PERL_ANYEVENT_HOSTS This variable, if specified, overrides the /etc/hosts file used by AnyEvent::Socket::resolve_sockaddr, i.e. hosts aliases will be read from that file instead. PERL_ANYEVENT_EDNS0 Used by AnyEvent::DNS to decide whether to use the EDNS0 extension for DNS. This extension is generally useful to reduce DNS traffic, especially when DNSSEC is involved, but some (broken) firewalls drop such DNS packets, which is why it is off by default. Setting this variable to 1 will cause AnyEvent::DNS to announce EDNS0 in its DNS requests. PERL_ANYEVENT_MAX_FORKS The maximum number of child processes that AnyEvent::Util::fork_call will create in parallel. PERL_ANYEVENT_MAX_OUTSTANDING_DNS The default value for the max_outstanding parameter for the default DNS resolver - this is the maximum number of parallel DNS requests that are sent to the DNS server. PERL_ANYEVENT_MAX_SIGNAL_LATENCY Perl has inherently racy signal handling (you can basically choose between losing signals and memory corruption) - pure perl event loops (including AnyEvent::Loop, when Async::Interrupt isn't available) therefore have to poll regularly to avoid losing signals. Some event loops are racy, but don't poll regularly, and some event loops are written in C but are still racy. For those event loops, AnyEvent installs a timer that regularly wakes up the event loop. By default, the interval for this timer is 10 seconds, but you can override this delay with this environment variable (or by setting the $AnyEvent::MAX_SIGNAL_LATENCY variable before creating signal watchers). Lower values increase CPU (and energy) usage, higher values can introduce long delays when reaping children or waiting for signals. The AnyEvent::Async module, if available, will be used to avoid this polling (with most event loops). PERL_ANYEVENT_RESOLV_CONF The absolute path to a resolv.conf-style file to use instead of /etc/resolv.conf (or the OS-specific configuration) in the default resolver, or the empty string to select the default configuration. PERL_ANYEVENT_CA_FILE, PERL_ANYEVENT_CA_PATH. When neither ca_file nor ca_path was specified during AnyEvent::TLS context creation, and either of these environment variables are nonempty, they will be used to specify CA certificate locations instead of a system-dependent default. PERL_ANYEVENT_AVOID_GUARD and PERL_ANYEVENT_AVOID_ASYNC_INTERRUPT When these are set to 1, then the respective modules are not loaded. Mostly good for testing AnyEvent itself. SUPPLYING YOUR OWN EVENT MODEL INTERFACE This is an advanced topic that you do not normally need to use AnyEvent in a module. This section is only of use to event loop authors who want to provide AnyEvent compatibility. If you need to support another event library which isn't directly supported by AnyEvent, you can supply your own interface to it by pushing, before the first watcher gets created, the package name of the event module and the package name of the interface to use onto @AnyEvent::REGISTRY. You can do that before and even without loading AnyEvent, so it is reasonably cheap. Example:    push @AnyEvent::REGISTRY, [urxvt => urxvt::anyevent::]; This tells AnyEvent to (literally) use the urxvt::anyevent:: package/class when it finds the urxvt package/module is already loaded. When AnyEvent is loaded and asked to find a suitable event model, it will first check for the presence of urxvt by trying to use the urxvt::anyevent module. The class should provide implementations for all watcher types. See AnyEvent::Impl::EV (source code), AnyEvent::Impl::Glib (Source code) and so on for actual examples. Use perldoc -m AnyEvent::Impl::Glib to see the sources. If you don't provide signal and child watchers than AnyEvent will provide suitable (hopefully) replacements. The above example isn't fictitious, the rxvt-unicode (a.k.a. urxvt) terminal emulator uses the above line as-is. An interface isn't included in AnyEvent because it doesn't make sense outside the embedded interpreter inside rxvt-unicode, and it is updated and maintained as part of the rxvt-unicode distribution. rxvt-unicode also cheats a bit by not providing blocking access to condition variables: code blocking while waiting for a condition will die. This still works with most modules/usages, and blocking calls must not be done in an interactive application, so it makes sense. EXAMPLE PROGRAM The following program uses an I/O watcher to read data from STDIN, a timer to display a message once per second, and a condition variable to quit the program when the user enters quit:    use AnyEvent;     my $cv = AnyEvent->condvar;     my $io_watcher = AnyEvent->io (       fh   => \*STDIN,       poll => 'r',       cb   => sub {          warn ""io event <$_[0]>\n"";   # will always output <r>          chomp (my $input = <STDIN>); # read a line          warn ""read: $input\n"";       # output what has been read          $cv->send if $input =~ /^q/i; # quit program if /^q/i       },    );     my $time_watcher = AnyEvent->timer (after => 1, interval => 1, cb => sub {       warn ""timeout\n""; # print 'timeout' at most every second    });     $cv->recv; # wait until user enters /^q/i REAL-WORLD EXAMPLE Consider the Net::FCP module. It features (among others) the following API calls, which are to freenet what HTTP GET requests are to http:    my $data = $fcp->client_get ($url); # blocks     my $transaction = $fcp->txn_client_get ($url); # does not block    $transaction->cb ( sub { ... } ); # set optional result callback    my $data = $transaction->result; # possibly blocks The client_get method works like LWP::Simple::get: it requests the given URL and waits till the data has arrived. It is defined to be:    sub client_get { $_[0]->txn_client_get ($_[1])->result } And in fact is automatically generated. This is the blocking API of Net::FCP, and it works as simple as in any other, similar, module. More complicated is txn_client_get: It only creates a transaction (completion, result, ...) object and initiates the transaction.    my $txn = bless { }, Net::FCP::Txn::; It also creates a condition variable that is used to signal the completion of the request:    $txn->{finished} = AnyAvent->condvar; It then creates a socket in non-blocking mode.    socket $txn->{fh}, ...;    fcntl $txn->{fh}, F_SETFL, O_NONBLOCK;    connect $txn->{fh}, ...       and !$!{EWOULDBLOCK}       and !$!{EINPROGRESS}       and Carp::croak ""unable to connect: $!\n""; Then it creates a write-watcher which gets called whenever an error occurs or the connection succeeds:    $txn->{w} = AnyEvent->io (fh => $txn->{fh}, poll => 'w', cb => sub { $txn->fh_ready_w }); And returns this transaction object. The fh_ready_w callback gets called as soon as the event loop detects that the socket is ready for writing. The fh_ready_w method makes the socket blocking again, writes the request data and replaces the watcher by a read watcher (waiting for reply data). The actual code is more complicated, but that doesn't matter for this example:    fcntl $txn->{fh}, F_SETFL, 0;    syswrite $txn->{fh}, $txn->{request}       or die ""connection or write error"";    $txn->{w} = AnyEvent->io (fh => $txn->{fh}, poll => 'r', cb => sub { $txn->fh_ready_r }); Again, fh_ready_r waits till all data has arrived, and then stores the result and signals any possible waiters that the request has finished:    sysread $txn->{fh}, $txn->{buf}, length $txn->{$buf};     if (end-of-file or data complete) {      $txn->{result} = $txn->{buf};      $txn->{finished}->send;      $txb->{cb}->($txn) of $txn->{cb}; # also call callback    } The result method, finally, just waits for the finished signal (if the request was already finished, it doesn't wait, of course, and returns the data:    $txn->{finished}->recv;    return $txn->{result}; The actual code goes further and collects all errors (dies, exceptions) that occurred during request processing. The result method detects whether an exception as thrown (it is stored inside the $txn object) and just throws the exception, which means connection errors and other problems get reported to the code that tries to use the result, not in a random callback. All of this enables the following usage styles: 1. Blocking:    my $data = $fcp->client_get ($url); 2. Blocking, but running in parallel:    my @datas = map $_->result,                   map $fcp->txn_client_get ($_),                      @urls; Both blocking examples work without the module user having to know anything about events. 3a. Event-based in a main program, using any supported event module:    use EV;     $fcp->txn_client_get ($url)->cb (sub {       my $txn = shift;       my $data = $txn->result;       ...    });     EV::run; 3b. The module user could use AnyEvent, too:    use AnyEvent;     my $quit = AnyEvent->condvar;     $fcp->txn_client_get ($url)->cb (sub {       ...       $quit->send;    });     $quit->recv; BENCHMARKS To give you an idea of the performance and overheads that AnyEvent adds over the event loops themselves and to give you an impression of the speed of various event loops I prepared some benchmarks. BENCHMARKING ANYEVENT OVERHEAD Here is a benchmark of various supported event models used natively and through AnyEvent. The benchmark creates a lot of timers (with a zero timeout) and I/O watchers (watching STDOUT, a pty, to become writable, which it is), lets them fire exactly once and destroys them again. Source code for this benchmark is found as eg/bench in the AnyEvent distribution. It uses the AE interface, which makes a real difference for the EV and Perl backends only. Explanation of the columns watcher is the number of event watchers created/destroyed. Since different event models feature vastly different performances, each event loop was given a number of watchers so that overall runtime is acceptable and similar between tested event loop (and keep them from crashing): Glib would probably take thousands of years if asked to process the same number of watchers as EV in this benchmark. bytes is the number of bytes (as measured by the resident set size, RSS) consumed by each watcher. This method of measuring captures both C and Perl-based overheads. create is the time, in microseconds (millionths of seconds), that it takes to create a single watcher. The callback is a closure shared between all watchers, to avoid adding memory overhead. That means closure creation and memory usage is not included in the figures. invoke is the time, in microseconds, used to invoke a simple callback. The callback simply counts down a Perl variable and after it was invoked ""watcher"" times, it would ->send a condvar once to signal the end of this phase. destroy is the time, in microseconds, that it takes to destroy a single watcher. Results           name watchers bytes create invoke destroy comment          EV/EV   100000   223   0.47   0.43    0.27 EV native interface         EV/Any   100000   223   0.48   0.42    0.26 EV + AnyEvent watchers   Coro::EV/Any   100000   223   0.47   0.42    0.26 coroutines + Coro::Signal       Perl/Any   100000   431   2.70   0.74    0.92 pure perl implementation    Event/Event    16000   516  31.16  31.84    0.82 Event native interface      Event/Any    16000  1203  42.61  34.79    1.80 Event + AnyEvent watchers    IOAsync/Any    16000  1911  41.92  27.45   16.81 via IO::Async::Loop::IO_Poll    IOAsync/Any    16000  1726  40.69  26.37   15.25 via IO::Async::Loop::Epoll       Glib/Any    16000  1118  89.00  12.57   51.17 quadratic behaviour         Tk/Any     2000  1346  20.96  10.75    8.00 SEGV with >> 2000 watchers        POE/Any     2000  6951 108.97 795.32   14.24 via POE::Loop::Event        POE/Any     2000  6648  94.79 774.40  575.51 via POE::Loop::Select Discussion The benchmark does not measure scalability of the event loop very well. For example, a select-based event loop (such as the pure perl one) can never compete with an event loop that uses epoll when the number of file descriptors grows high. In this benchmark, all events become ready at the same time, so select/poll-based implementations get an unnatural speed boost. Also, note that the number of watchers usually has a nonlinear effect on overall speed, that is, creating twice as many watchers doesn't take twice the time - usually it takes longer. This puts event loops tested with a higher number of watchers at a disadvantage. To put the range of results into perspective, consider that on the benchmark machine, handling an event takes roughly 1600 CPU cycles with EV, 3100 CPU cycles with AnyEvent's pure perl loop and almost 3000000 CPU cycles with POE. EV is the sole leader regarding speed and memory use, which are both maximal/minimal, respectively. When using the AE API there is zero overhead (when going through the AnyEvent API create is about 5-6 times slower, with other times being equal, so still uses far less memory than any other event loop and is still faster than Event natively). The pure perl implementation is hit in a few sweet spots (both the constant timeout and the use of a single fd hit optimisations in the perl interpreter and the backend itself). Nevertheless this shows that it adds very little overhead in itself. Like any select-based backend its performance becomes really bad with lots of file descriptors (and few of them active), of course, but this was not subject of this benchmark. The Event module has a relatively high setup and callback invocation cost, but overall scores in on the third place. IO::Async performs admirably well, about on par with Event, even when using its pure perl backend. Glib's memory usage is quite a bit higher, but it features a faster callback invocation and overall ends up in the same class as Event. However, Glib scales extremely badly, doubling the number of watchers increases the processing time by more than a factor of four, making it completely unusable when using larger numbers of watchers (note that only a single file descriptor was used in the benchmark, so inefficiencies of poll do not account for this). The Tk adaptor works relatively well. The fact that it crashes with more than 2000 watchers is a big setback, however, as correctness takes precedence over speed. Nevertheless, its performance is surprising, as the file descriptor is dup()ed for each watcher. This shows that the dup() employed by some adaptors is not a big performance issue (it does incur a hidden memory cost inside the kernel which is not reflected in the figures above). POE, regardless of underlying event loop (whether using its pure perl select-based backend or the Event module, the POE-EV backend couldn't be tested because it wasn't working) shows abysmal performance and memory usage with AnyEvent: Watchers use almost 30 times as much memory as EV watchers, and 10 times as much memory as Event (the high memory requirements are caused by requiring a session for each watcher). Watcher invocation speed is almost 900 times slower than with AnyEvent's pure perl implementation. The design of the POE adaptor class in AnyEvent can not really account for the performance issues, though, as session creation overhead is small compared to execution of the state machine, which is coded pretty optimally within AnyEvent::Impl::POE (and while everybody agrees that using multiple sessions is not a good approach, especially regarding memory usage, even the author of POE could not come up with a faster design). Summary Using EV through AnyEvent is faster than any other event loop (even when used without AnyEvent), but most event loops have acceptable performance with or without AnyEvent. The overhead AnyEvent adds is usually much smaller than the overhead of the actual event loop, only with extremely fast event loops such as EV does AnyEvent add significant overhead. You should avoid POE like the plague if you want performance or reasonable memory usage. BENCHMARKING THE LARGE SERVER CASE This benchmark actually benchmarks the event loop itself. It works by creating a number of ""servers"": each server consists of a socket pair, a timeout watcher that gets reset on activity (but never fires), and an I/O watcher waiting for input on one side of the socket. Each time the socket watcher reads a byte it will write that byte to a random other ""server"". The effect is that there will be a lot of I/O watchers, only part of which are active at any one point (so there is a constant number of active fds for each loop iteration, but which fds these are is random). The timeout is reset each time something is read because that reflects how most timeouts work (and puts extra pressure on the event loops). In this benchmark, we use 10000 socket pairs (20000 sockets), of which 100 (1%) are active. This mirrors the activity of large servers with many connections, most of which are idle at any one point in time. Source code for this benchmark is found as eg/bench2 in the AnyEvent distribution. It uses the AE interface, which makes a real difference for the EV and Perl backends only. Explanation of the columns sockets is the number of sockets, and twice the number of ""servers"" (as each server has a read and write socket end). create is the time it takes to create a socket pair (which is nontrivial) and two watchers: an I/O watcher and a timeout watcher. request, the most important value, is the time it takes to handle a single ""request"", that is, reading the token from the pipe and forwarding it to another server. This includes deleting the old timeout and creating a new one that moves the timeout into the future. Results      name sockets create  request         EV   20000  62.66     7.99       Perl   20000  68.32    32.64    IOAsync   20000 174.06   101.15 epoll   IOAsync   20000 174.67   610.84 poll     Event   20000 202.69   242.91       Glib   20000 557.01  1689.52        POE   20000 341.54 12086.32 uses POE::Loop::Event Discussion This benchmark does measure scalability and overall performance of the particular event loop. EV is again fastest. Since it is using epoll on my system, the setup time is relatively high, though. Perl surprisingly comes second. It is much faster than the C-based event loops Event and Glib. IO::Async performs very well when using its epoll backend, and still quite good compared to Glib when using its pure perl backend. Event suffers from high setup time as well (look at its code and you will understand why). Callback invocation also has a high overhead compared to the $_->() for ..-style loop that the Perl event loop uses. Event uses select or poll in basically all documented configurations. Glib is hit hard by its quadratic behaviour w.r.t. many watchers. It clearly fails to perform with many filehandles or in busy servers. POE is still completely out of the picture, taking over 1000 times as long as EV, and over 100 times as long as the Perl implementation, even though it uses a C-based event loop in this case. Summary The pure perl implementation performs extremely well. Avoid Glib or POE in large projects where performance matters. BENCHMARKING SMALL SERVERS While event loops should scale (and select-based ones do not...) even to large servers, most programs we (or I :) actually write have only a few I/O watchers. In this benchmark, I use the same benchmark program as in the large server case, but it uses only eight ""servers"", of which three are active at any one time. This should reflect performance for a small server relatively well. The columns are identical to the previous table. Results     name sockets create request        EV      16  20.00    6.54      Perl      16  25.75   12.62     Event      16  81.27   35.86      Glib      16  32.63   15.48       POE      16 261.87  276.28 uses POE::Loop::Event Discussion The benchmark tries to test the performance of a typical small server. While knowing how various event loops perform is interesting, keep in mind that their overhead in this case is usually not as important, due to the small absolute number of watchers (that is, you need efficiency and speed most when you have lots of watchers, not when you only have a few of them). EV is again fastest. Perl again comes second. It is noticeably faster than the C-based event loops Event and Glib, although the difference is too small to really matter. POE also performs much better in this case, but is is still far behind the others. Summary C-based event loops perform very well with small number of watchers, as the management overhead dominates. THE IO::Lambda BENCHMARK Recently I was told about the benchmark in the IO::Lambda manpage, which could be misinterpreted to make AnyEvent look bad. In fact, the benchmark simply compares IO::Lambda with POE, and IO::Lambda looks better (which shouldn't come as a surprise to anybody). As such, the benchmark is fine, and mostly shows that the AnyEvent backend from IO::Lambda isn't very optimal. But how would AnyEvent compare when used without the extra baggage? To explore this, I wrote the equivalent benchmark for AnyEvent. The benchmark itself creates an echo-server, and then, for 500 times, connects to the echo server, sends a line, waits for the reply, and then creates the next connection. This is a rather bad benchmark, as it doesn't test the efficiency of the framework or much non-blocking I/O, but it is a benchmark nevertheless.    name                    runtime    Lambda/select           0.330 sec       + optimized          0.122 sec    Lambda/AnyEvent         0.327 sec       + optimized          0.138 sec    Raw sockets/select      0.077 sec    POE/select, components  0.662 sec    POE/select, raw sockets 0.226 sec    POE/select, optimized   0.404 sec     AnyEvent/select/nb      0.085 sec    AnyEvent/EV/nb          0.068 sec       +state machine       0.134 sec The benchmark is also a bit unfair (my fault): the IO::Lambda/POE benchmarks actually make blocking connects and use 100% blocking I/O, defeating the purpose of an event-based solution. All of the newly written AnyEvent benchmarks use 100% non-blocking connects (using AnyEvent::Socket::tcp_connect and the asynchronous pure perl DNS resolver), so AnyEvent is at a disadvantage here, as non-blocking connects generally require a lot more bookkeeping and event handling than blocking connects (which involve a single syscall only). The last AnyEvent benchmark additionally uses AnyEvent::Handle, which offers similar expressive power as POE and IO::Lambda, using conventional Perl syntax. This means that both the echo server and the client are 100% non-blocking, further placing it at a disadvantage. As you can see, the AnyEvent + EV combination even beats the hand-optimised ""raw sockets benchmark"", while AnyEvent + its pure perl backend easily beats IO::Lambda and POE. And even the 100% non-blocking version written using the high-level (and slow :) AnyEvent::Handle abstraction beats both POE and IO::Lambda higher level (""unoptimised"") abstractions by a large margin, even though it does all of DNS, tcp-connect and socket I/O in a non-blocking way. The two AnyEvent benchmarks programs can be found as eg/ae0.pl and eg/ae2.pl in the AnyEvent distribution, the remaining benchmarks are part of the IO::Lambda distribution and were used without any changes. SIGNALS AnyEvent currently installs handlers for these signals: SIGCHLD A handler for SIGCHLD is installed by AnyEvent's child watcher emulation for event loops that do not support them natively. Also, some event loops install a similar handler. Additionally, when AnyEvent is loaded and SIGCHLD is set to IGNORE, then AnyEvent will reset it to default, to avoid losing child exit statuses. SIGPIPE A no-op handler is installed for SIGPIPE when $SIG{PIPE} is undef when AnyEvent gets loaded. The rationale for this is that AnyEvent users usually do not really depend on SIGPIPE delivery (which is purely an optimisation for shell use, or badly-written programs), but SIGPIPE can cause spurious and rare program exits as a lot of people do not expect SIGPIPE when writing to some random socket. The rationale for installing a no-op handler as opposed to ignoring it is that this way, the handler will be restored to defaults on exec. Feel free to install your own handler, or reset it to defaults. RECOMMENDED/OPTIONAL MODULES One of AnyEvent's main goals is to be 100% Pure-Perl(tm): only perl (and its built-in modules) are required to use it. That does not mean that AnyEvent won't take advantage of some additional modules if they are installed. This section explains which additional modules will be used, and how they affect AnyEvent's operation. Async::Interrupt This slightly arcane module is used to implement fast signal handling: To my knowledge, there is no way to do completely race-free and quick signal handling in pure perl. To ensure that signals still get delivered, AnyEvent will start an interval timer to wake up perl (and catch the signals) with some delay (default is 10 seconds, look for $AnyEvent::MAX_SIGNAL_LATENCY). If this module is available, then it will be used to implement signal catching, which means that signals will not be delayed, and the event loop will not be interrupted regularly, which is more efficient (and good for battery life on laptops). This affects not just the pure-perl event loop, but also other event loops that have no signal handling on their own (e.g. Glib, Tk, Qt). Some event loops (POE, Event, Event::Lib) offer signal watchers natively, and either employ their own workarounds (POE) or use AnyEvent's workaround (using $AnyEvent::MAX_SIGNAL_LATENCY). Installing Async::Interrupt does nothing for those backends. EV This module isn't really ""optional"", as it is simply one of the backend event loops that AnyEvent can use. However, it is simply the best event loop available in terms of features, speed and stability: It supports the AnyEvent API optimally, implements all the watcher types in XS, does automatic timer adjustments even when no monotonic clock is available, can take avdantage of advanced kernel interfaces such as epoll and kqueue, and is the fastest backend by far. You can even embed Glib/Gtk2 in it (or vice versa, see EV::Glib and Glib::EV). If you only use backends that rely on another event loop (e.g. Tk), then this module will do nothing for you. Guard The guard module, when used, will be used to implement AnyEvent::Util::guard. This speeds up guards considerably (and uses a lot less memory), but otherwise doesn't affect guard operation much. It is purely used for performance. JSON and JSON::XS One of these modules is required when you want to read or write JSON data via AnyEvent::Handle. JSON is also written in pure-perl, but can take advantage of the ultra-high-speed JSON::XS module when it is installed. Net::SSLeay Implementing TLS/SSL in Perl is certainly interesting, but not very worthwhile: If this module is installed, then AnyEvent::Handle (with the help of AnyEvent::TLS), gains the ability to do TLS/SSL. Time::HiRes This module is part of perl since release 5.008. It will be used when the chosen event library does not come with a timing source of its own. The pure-perl event loop (AnyEvent::Loop) will additionally load it to try to use a monotonic clock for timing stability. AnyEvent::AIO (and IO::AIO) The default implementation of AnyEvent::IO is to do I/O synchronously, stopping programs while they access the disk, which is fine for a lot of programs. Installing AnyEvent::AIO (and its IO::AIO dependency) makes it switch to a true asynchronous implementation, so event processing can continue even while waiting for disk I/O. FORK Most event libraries are not fork-safe. The ones who are usually are because they rely on inefficient but fork-safe select or poll calls - higher performance APIs such as BSD's kqueue or the dreaded Linux epoll are usually badly thought-out hacks that are incompatible with fork in one way or another. Only EV is fully fork-aware and ensures that you continue event-processing in both parent and child (or both, if you know what you are doing). This means that, in general, you cannot fork and do event processing in the child if the event library was initialised before the fork (which usually happens when the first AnyEvent watcher is created, or the library is loaded). If you have to fork, you must either do so before creating your first watcher OR you must not use AnyEvent at all in the child OR you must do something completely out of the scope of AnyEvent (see below). The problem of doing event processing in the parent and the child is much more complicated: even for backends that are fork-aware or fork-safe, their behaviour is not usually what you want: fork clones all watchers, that means all timers, I/O watchers etc. are active in both parent and child, which is almost never what you want. Using exec to start worker children from some kind of manage prrocess is usually preferred, because it is much easier and cleaner, at the expense of having to have another binary. In addition to logical problems with fork, there are also implementation problems. For example, on POSIX systems, you cannot fork at all in Perl code if a thread (I am talking of pthreads here) was ever created in the process, and this is just the tip of the iceberg. In general, using fork from Perl is difficult, and attempting to use fork without an exec to implement some kind of parallel processing is almost certainly doomed. To safely fork and exec, you should use a module such as Proc::FastSpawn that let's you safely fork and exec new processes. If you want to do multiprocessing using processes, you can look at the AnyEvent::Fork module (and some related modules such as AnyEvent::Fork::RPC, AnyEvent::Fork::Pool and AnyEvent::Fork::Remote). This module allows you to safely create subprocesses without any limitations - you can use X11 toolkits or AnyEvent in the children created by AnyEvent::Fork safely and without any special precautions. SECURITY CONSIDERATIONS AnyEvent can be forced to load any event model via $ENV{PERL_ANYEVENT_MODEL}. While this cannot (to my knowledge) be used to execute arbitrary code or directly gain access, it can easily be used to make the program hang or malfunction in subtle ways, as AnyEvent watchers will not be active when the program uses a different event model than specified in the variable. You can make AnyEvent completely ignore this variable by deleting it before the first watcher gets created, e.g. with a BEGIN block:    BEGIN { delete $ENV{PERL_ANYEVENT_MODEL} }       use AnyEvent; Similar considerations apply to $ENV{PERL_ANYEVENT_VERBOSE}, as that can be used to probe what backend is used and gain other information (which is probably even less useful to an attacker than PERL_ANYEVENT_MODEL), and $ENV{PERL_ANYEVENT_STRICT}. Note that AnyEvent will remove all environment variables starting with PERL_ANYEVENT_ from %ENV when it is loaded while taint mode is enabled. BUGS Perl 5.8 has numerous memleaks that sometimes hit this module and are hard to work around. If you suffer from memleaks, first upgrade to Perl 5.10 and check wether the leaks still show up. (Perl 5.10.0 has other annoying memleaks, such as leaking on map and grep but it is usually not as pronounced). SEE ALSO Tutorial/Introduction: AnyEvent::Intro. FAQ: AnyEvent::FAQ. Utility functions: AnyEvent::Util (misc. grab-bag), AnyEvent::Log (simply logging). Development/Debugging: AnyEvent::Strict (stricter checking), AnyEvent::Debug (interactive shell, watcher tracing). Supported event modules: AnyEvent::Loop, EV, EV::Glib, Glib::EV, Event, Glib::Event, Glib, Tk, Event::Lib, Qt, POE, FLTK, Cocoa::EventLoop, UV. Implementations: AnyEvent::Impl::EV, AnyEvent::Impl::Event, AnyEvent::Impl::Glib, AnyEvent::Impl::Tk, AnyEvent::Impl::Perl, AnyEvent::Impl::EventLib, AnyEvent::Impl::Qt, AnyEvent::Impl::POE, AnyEvent::Impl::IOAsync, AnyEvent::Impl::Irssi, AnyEvent::Impl::FLTK, AnyEvent::Impl::Cocoa, AnyEvent::Impl::UV. Non-blocking handles, pipes, stream sockets, TCP clients and servers: AnyEvent::Handle, AnyEvent::Socket, AnyEvent::TLS. Asynchronous File I/O: AnyEvent::IO. Asynchronous DNS: AnyEvent::DNS. Thread support: Coro, Coro::AnyEvent, Coro::EV, Coro::Event. Nontrivial usage examples: AnyEvent::GPSD, AnyEvent::IRC, AnyEvent::HTTP. AUTHOR    Marc Lehmann <schmorp@schmorp.de>    http://anyevent.schmorp.de × Module Install Instructions To install AnyEvent, simply copy and paste either of the commands in to your terminal cpanm                      cpanm AnyEvent CPAN shell                      perl -MCPAN -e shell                     install AnyEvent For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"the DBI of event loop programming"	"true"
"Event Loops"	"EV"	"https://metacpan.org/pod/EV"	"Uses libev, very fast and popular. Default for AnyEvent if present"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"EV - perl interface to libev, a high performance full-featured event loop - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Marc A. Lehmann  /  4.22 (MLEHMANN on 2015-12-20) 4.21 (MLEHMANN on 2015-07-13) 4.20 (MLEHMANN on 2015-06-20) 4.18 (MLEHMANN on 2014-09-06) 4.17 (MLEHMANN on 2014-04-11) 4.16 (MLEHMANN on 2014-03-08) 4.15 (MLEHMANN on 2013-03-01) 4.11 (MLEHMANN on 2012-02-04) 4.10 (MLEHMANN on 2012-01-19) 4.03 (MLEHMANN on 2011-01-11) 4.02 (MLEHMANN on 2010-12-30) 4.01 (MLEHMANN on 2010-12-05) 4.00 (MLEHMANN on 2010-10-25) 3.9 (MLEHMANN on 2009-12-31) 3.8 (MLEHMANN on 2009-08-09) 3.7 (MLEHMANN on 2009-07-17) 3.6 (MLEHMANN on 2009-04-28) 3.53 (MLEHMANN on 2009-02-15) 3.52 (MLEHMANN on 2009-01-07) 3.51 (MLEHMANN on 2008-12-24) 3.49 (MLEHMANN on 2008-11-19) 3.48 (MLEHMANN on 2008-10-30) 3.45 (MLEHMANN on 2008-10-21) 3.44 (MLEHMANN on 2008-09-29) 3.431 (MLEHMANN on 2008-07-12) 3.43 (MLEHMANN on 2008-07-08) 3.42 (MLEHMANN on 2008-05-26) 3.41 (MLEHMANN on 2008-05-21) 3.4 (MLEHMANN on 2008-05-20) 3.33 (MLEHMANN on 2008-05-18) 3.31 (MLEHMANN on 2008-04-16) 3.3 (MLEHMANN on 2008-04-16) 3.2 (MLEHMANN on 2008-04-02) 3.1 (MLEHMANN on 2008-03-08) 3.0 (MLEHMANN on 2008-01-28) 2.01 (MLEHMANN on 2007-12-31) 2.0 (MLEHMANN on 2007-12-22) 1.86 (MLEHMANN on 2007-12-18) 1.85 (MLEHMANN on 2007-12-14) 1.72 (MLEHMANN on 2007-12-08) 1.71 (MLEHMANN on 2007-12-07) 1.7 (MLEHMANN on 2007-12-07) 1.6 (MLEHMANN on 2007-12-05) 1.5 (MLEHMANN on 2007-11-28) 1.4 (MLEHMANN on 2007-11-27) 1.3 (MLEHMANN on 2007-11-25) 1.2 (MLEHMANN on 2007-11-22) 1.1 (MLEHMANN on 2007-11-21) 1.0 (MLEHMANN on 2007-11-16) 0.9 (MLEHMANN on 2007-11-14) 0.8 (MLEHMANN on 2007-11-12) 0.7 (MLEHMANN on 2007-11-09) 0.6 (MLEHMANN on 2007-11-08) 0.51 (MLEHMANN on 2007-11-06) 0.5 (MLEHMANN on 2007-11-06) 0.1 (MLEHMANN on 2007-11-01) 0.03 (MLEHMANN on 2007-10-29) 0.02 (MLEHMANN on 2007-10-28) 0.01 (MLEHMANN on 2007-10-27) EV-4.22 23 ++ 23 ++  / EV 20 Dec 2015 01:35:40 GMT Module version: 4.22 Source (raw) Browse (raw) Changes Issues (3) 3 (5 reviews) Testers (1085 / 5 / 0) Kwalitee License: unknown Activity 24 month Tools MOBI | EPUB Download (188.88Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 4.21 (MLEHMANN on 2015-07-13) 4.20 (MLEHMANN on 2015-06-20) 4.18 (MLEHMANN on 2014-09-06) 4.17 (MLEHMANN on 2014-04-11) 4.16 (MLEHMANN on 2014-03-08) 4.15 (MLEHMANN on 2013-03-01) 4.11 (MLEHMANN on 2012-02-04) 4.10 (MLEHMANN on 2012-01-19) 4.03 (MLEHMANN on 2011-01-11) 4.02 (MLEHMANN on 2010-12-30) 4.01 (MLEHMANN on 2010-12-05) 4.00 (MLEHMANN on 2010-10-25) 3.9 (MLEHMANN on 2009-12-31) 3.8 (MLEHMANN on 2009-08-09) 3.7 (MLEHMANN on 2009-07-17) 3.6 (MLEHMANN on 2009-04-28) 3.53 (MLEHMANN on 2009-02-15) 3.52 (MLEHMANN on 2009-01-07) 3.51 (MLEHMANN on 2008-12-24) 3.49 (MLEHMANN on 2008-11-19) 3.48 (MLEHMANN on 2008-10-30) 3.45 (MLEHMANN on 2008-10-21) 3.44 (MLEHMANN on 2008-09-29) 3.431 (MLEHMANN on 2008-07-12) 3.43 (MLEHMANN on 2008-07-08) 3.42 (MLEHMANN on 2008-05-26) 3.41 (MLEHMANN on 2008-05-21) 3.4 (MLEHMANN on 2008-05-20) 3.33 (MLEHMANN on 2008-05-18) 3.31 (MLEHMANN on 2008-04-16) 3.3 (MLEHMANN on 2008-04-16) 3.2 (MLEHMANN on 2008-04-02) 3.1 (MLEHMANN on 2008-03-08) 3.0 (MLEHMANN on 2008-01-28) 2.01 (MLEHMANN on 2007-12-31) 2.0 (MLEHMANN on 2007-12-22) 1.86 (MLEHMANN on 2007-12-18) 1.85 (MLEHMANN on 2007-12-14) 1.72 (MLEHMANN on 2007-12-08) 1.71 (MLEHMANN on 2007-12-07) 1.7 (MLEHMANN on 2007-12-07) 1.6 (MLEHMANN on 2007-12-05) 1.5 (MLEHMANN on 2007-11-28) 1.4 (MLEHMANN on 2007-11-27) 1.3 (MLEHMANN on 2007-11-25) 1.2 (MLEHMANN on 2007-11-22) 1.1 (MLEHMANN on 2007-11-21) 1.0 (MLEHMANN on 2007-11-16) 0.9 (MLEHMANN on 2007-11-14) 0.8 (MLEHMANN on 2007-11-12) 0.7 (MLEHMANN on 2007-11-09) 0.6 (MLEHMANN on 2007-11-08) 0.51 (MLEHMANN on 2007-11-06) 0.5 (MLEHMANN on 2007-11-06) 0.1 (MLEHMANN on 2007-11-01) 0.03 (MLEHMANN on 2007-10-29) 0.02 (MLEHMANN on 2007-10-28) 0.01 (MLEHMANN on 2007-10-27) Diff with version 4.21 (MLEHMANN on 2015-07-13) 4.20 (MLEHMANN on 2015-06-20) 4.18 (MLEHMANN on 2014-09-06) 4.17 (MLEHMANN on 2014-04-11) 4.16 (MLEHMANN on 2014-03-08) 4.15 (MLEHMANN on 2013-03-01) 4.11 (MLEHMANN on 2012-02-04) 4.10 (MLEHMANN on 2012-01-19) 4.03 (MLEHMANN on 2011-01-11) 4.02 (MLEHMANN on 2010-12-30) 4.01 (MLEHMANN on 2010-12-05) 4.00 (MLEHMANN on 2010-10-25) 3.9 (MLEHMANN on 2009-12-31) 3.8 (MLEHMANN on 2009-08-09) 3.7 (MLEHMANN on 2009-07-17) 3.6 (MLEHMANN on 2009-04-28) 3.53 (MLEHMANN on 2009-02-15) 3.52 (MLEHMANN on 2009-01-07) 3.51 (MLEHMANN on 2008-12-24) 3.49 (MLEHMANN on 2008-11-19) 3.48 (MLEHMANN on 2008-10-30) 3.45 (MLEHMANN on 2008-10-21) 3.44 (MLEHMANN on 2008-09-29) 3.431 (MLEHMANN on 2008-07-12) 3.43 (MLEHMANN on 2008-07-08) 3.42 (MLEHMANN on 2008-05-26) 3.41 (MLEHMANN on 2008-05-21) 3.4 (MLEHMANN on 2008-05-20) 3.33 (MLEHMANN on 2008-05-18) 3.31 (MLEHMANN on 2008-04-16) 3.3 (MLEHMANN on 2008-04-16) 3.2 (MLEHMANN on 2008-04-02) 3.1 (MLEHMANN on 2008-03-08) 3.0 (MLEHMANN on 2008-01-28) 2.01 (MLEHMANN on 2007-12-31) 2.0 (MLEHMANN on 2007-12-22) 1.86 (MLEHMANN on 2007-12-18) 1.85 (MLEHMANN on 2007-12-14) 1.72 (MLEHMANN on 2007-12-08) 1.71 (MLEHMANN on 2007-12-07) 1.7 (MLEHMANN on 2007-12-07) 1.6 (MLEHMANN on 2007-12-05) 1.5 (MLEHMANN on 2007-11-28) 1.4 (MLEHMANN on 2007-11-27) 1.3 (MLEHMANN on 2007-11-25) 1.2 (MLEHMANN on 2007-11-22) 1.1 (MLEHMANN on 2007-11-21) 1.0 (MLEHMANN on 2007-11-16) 0.9 (MLEHMANN on 2007-11-14) 0.8 (MLEHMANN on 2007-11-12) 0.7 (MLEHMANN on 2007-11-09) 0.6 (MLEHMANN on 2007-11-08) 0.51 (MLEHMANN on 2007-11-06) 0.5 (MLEHMANN on 2007-11-06) 0.1 (MLEHMANN on 2007-11-01) 0.03 (MLEHMANN on 2007-10-29) 0.02 (MLEHMANN on 2007-10-28) 0.01 (MLEHMANN on 2007-10-27) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 15 PAUSE users 8 non-PAUSE users. MLEHMANN Marc A. Lehmann Dependencies common::sense and possibly others CPAN Testers List Reverse dependencies Dependency graph × EV-4.22 NAME SYNOPSIS BEFORE YOU START USING THIS MODULE DESCRIPTION PORTING FROM EV 3.X to 4.X MODULE EXPORTS EVENT LOOPS BASIC INTERFACE WATCHER OBJECTS COMMON WATCHER METHODS WATCHER TYPES I/O WATCHERS - is this file descriptor readable or writable? TIMER WATCHERS - relative and optionally repeating timeouts PERIODIC WATCHERS - to cron or not to cron? SIGNAL WATCHERS - signal me when a signal gets signalled! CHILD WATCHERS - watch out for process status changes STAT WATCHERS - did the file attributes just change? IDLE WATCHERS - when you've got nothing better to do... PREPARE WATCHERS - customise your event loop! CHECK WATCHERS - customise your event loop even more! FORK WATCHERS - the audacity to resume the event loop after a fork EMBED WATCHERS - when one backend isn't enough... ASYNC WATCHERS - how to wake up another event loop CLEANUP WATCHERS - how to clean up when the event loop goes away PERL SIGNALS ITHREADS FORK SEE ALSO AUTHOR NAME EV - perl interface to libev, a high performance full-featured event loop SYNOPSIS    use EV;        # TIMERS        my $w = EV::timer 2, 0, sub {       warn ""is called after 2s"";    };        my $w = EV::timer 2, 2, sub {       warn ""is called roughly every 2s (repeat = 2)"";    };        undef $w; # destroy event watcher again        my $w = EV::periodic 0, 60, 0, sub {       warn ""is called every minute, on the minute, exactly"";    };        # IO        my $w = EV::io *STDIN, EV::READ, sub {       my ($w, $revents) = @_; # all callbacks receive the watcher and event mask       warn ""stdin is readable, you entered: "", <STDIN>;    };        # SIGNALS        my $w = EV::signal 'QUIT', sub {       warn ""sigquit received\n"";    };        # CHILD/PID STATUS CHANGES       my $w = EV::child 666, 0, sub {       my ($w, $revents) = @_;       my $status = $w->rstatus;    };       # STAT CHANGES    my $w = EV::stat ""/etc/passwd"", 10, sub {       my ($w, $revents) = @_;       warn $w->path, "" has changed somehow.\n"";    };        # MAINLOOP    EV::run;                # loop until EV::break is called or all watchers stop    EV::run EV::RUN_ONCE;   # block until at least one event could be handled    EV::run EV::RUN_NOWAIT; # try to handle same events, but do not block BEFORE YOU START USING THIS MODULE If you only need timer, I/O, signal, child and idle watchers and not the advanced functionality of this module, consider using AnyEvent instead, specifically the simplified API described in AE. When used with EV as backend, the AE API is as fast as the native EV API, but your programs/modules will still run with many other event loops. DESCRIPTION This module provides an interface to libev (http://software.schmorp.de/pkg/libev.html). While the documentation below is comprehensive, one might also consult the documentation of libev itself (http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod or perldoc EV::libev) for more subtle details on watcher semantics or some discussion on the available backends, or how to force a specific backend with LIBEV_FLAGS, or just about in any case because it has much more detailed information. This module is very fast and scalable. It is actually so fast that you can use it through the AnyEvent module, stay portable to other event loops (if you don't rely on any watcher types not available through it) and still be faster than with any other event loop currently supported in Perl. PORTING FROM EV 3.X to 4.X EV version 4 introduces a number of incompatible changes summarised here. According to the depreciation strategy used by libev, there is a compatibility layer in place so programs should continue to run unchanged (the XS interface lacks this layer, so programs using that one need to be updated). This compatibility layer will be switched off in some future release. All changes relevant to Perl are renames of symbols, functions and methods:   EV::loop          => EV::run   EV::LOOP_NONBLOCK => EV::RUN_NOWAIT   EV::LOOP_ONESHOT  => EV::RUN_ONCE    EV::unloop        => EV::break   EV::UNLOOP_CANCEL => EV::BREAK_CANCEL   EV::UNLOOP_ONE    => EV::BREAK_ONE   EV::UNLOOP_ALL    => EV::BREAK_ALL    EV::TIMEOUT       => EV::TIMER    EV::loop_count    => EV::iteration   EV::loop_depth    => EV::depth   EV::loop_verify   => EV::verify The loop object methods corresponding to the functions above have been similarly renamed. MODULE EXPORTS This module does not export any symbols. EVENT LOOPS EV supports multiple event loops: There is a single ""default event loop"" that can handle everything including signals and child watchers, and any number of ""dynamic event loops"" that can use different backends (with various limitations), but no child and signal watchers. You do not have to do anything to create the default event loop: When the module is loaded a suitable backend is selected on the premise of selecting a working backend (which for example rules out kqueue on most BSDs). Modules should, unless they have ""special needs"" always use the default loop as this is fastest (perl-wise), best supported by other modules (e.g. AnyEvent or Coro) and most portable event loop. For specific programs you can create additional event loops dynamically. If you want to take advantage of kqueue (which often works properly for sockets only) even though the default loop doesn't enable it, you can embed a kqueue loop into the default loop: running the default loop will then also service the kqueue loop to some extent. See the example in the section about embed watchers for an example on how to achieve that. $loop = new EV::Loop [$flags] Create a new event loop as per the specified flags. Please refer to the ev_loop_new () function description in the libev documentation (http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#GLOBAL_FUNCTIONS, or locally-installed as EV::libev manpage) for more info. The loop will automatically be destroyed when it is no longer referenced by any watcher and the loop object goes out of scope. If you are not embedding the loop, then Using EV::FLAG_FORKCHECK is recommended, as only the default event loop is protected by this module. If you are embedding this loop in the default loop, this is not necessary, as EV::embed automatically does the right thing on fork. $loop->loop_fork Must be called after a fork in the child, before entering or continuing the event loop. An alternative is to use EV::FLAG_FORKCHECK which calls this function automatically, at some performance loss (refer to the libev documentation). $loop->verify Calls ev_verify to make internal consistency checks (for debugging libev) and abort the program if any data structures were found to be corrupted. $loop = EV::default_loop [$flags] Return the default loop (which is a singleton object). Since this module already creates the default loop with default flags, specifying flags here will not have any effect unless you destroy the default loop first, which isn't supported. So in short: don't do it, and if you break it, you get to keep the pieces. BASIC INTERFACE $EV::DIED Must contain a reference to a function that is called when a callback throws an exception (with $@ containing the error). The default prints an informative message and continues. If this callback throws an exception it will be silently ignored. $flags = EV::supported_backends $flags = EV::recommended_backends $flags = EV::embeddable_backends Returns the set (see EV::BACKEND_* flags) of backends supported by this instance of EV, the set of recommended backends (supposed to be good) for this platform and the set of embeddable backends (see EMBED WATCHERS). EV::sleep $seconds Block the process for the given number of (fractional) seconds. $time = EV::time Returns the current time in (fractional) seconds since the epoch. $time = EV::now $time = $loop->now Returns the time the last event loop iteration has been started. This is the time that (relative) timers are based on, and referring to it is usually faster then calling EV::time. EV::now_update $loop->now_update Establishes the current time by querying the kernel, updating the time returned by EV::now in the progress. This is a costly operation and is usually done automatically within EV::loop. This function is rarely useful, but when some event callback runs for a very long time without entering the event loop, updating libev's idea of the current time is a good idea. EV::suspend $loop->suspend EV::resume $loop->resume These two functions suspend and resume a loop, for use when the loop is not used for a while and timeouts should not be processed. A typical use case would be an interactive program such as a game: When the user presses ^Z to suspend the game and resumes it an hour later it would be best to handle timeouts as if no time had actually passed while the program was suspended. This can be achieved by calling suspend in your SIGTSTP handler, sending yourself a SIGSTOP and calling resume directly afterwards to resume timer processing. Effectively, all timer watchers will be delayed by the time spend between suspend and resume, and all periodic watchers will be rescheduled (that is, they will lose any events that would have occured while suspended). After calling suspend you must not call any function on the given loop other than resume, and you must not call resume without a previous call to suspend. Calling suspend/resume has the side effect of updating the event loop time (see now_update). $backend = EV::backend $backend = $loop->backend Returns an integer describing the backend used by libev (EV::BACKEND_SELECT or EV::BACKEND_EPOLL). $active = EV::run [$flags] $active = $loop->run ([$flags]) Begin checking for events and calling callbacks. It returns when a callback calls EV::break or the flasg are nonzero (in which case the return value is true) or when there are no active watchers which reference the loop (keepalive is true), in which case the return value will be false. The returnv alue can generally be interpreted as ""if true, there is more work left to do"". The $flags argument can be one of the following:    0               as above    EV::RUN_ONCE    block at most once (wait, but do not loop)    EV::RUN_NOWAIT  do not block at all (fetch/handle events but do not wait) EV::break [$how] $loop->break ([$how]) When called with no arguments or an argument of EV::BREAK_ONE, makes the innermost call to EV::loop return. When called with an argument of EV::BREAK_ALL, all calls to EV::loop will return as fast as possible. When called with an argument of EV::BREAK_CANCEL, any pending break will be cancelled. $count = EV::iteration $count = $loop->iteration Return the number of times the event loop has polled for new events. Sometimes useful as a generation counter. EV::once $fh_or_undef, $events, $timeout, $cb->($revents) $loop->once ($fh_or_undef, $events, $timeout, $cb->($revents)) This function rolls together an I/O and a timer watcher for a single one-shot event without the need for managing a watcher object. If $fh_or_undef is a filehandle or file descriptor, then $events must be a bitset containing either EV::READ, EV::WRITE or EV::READ | EV::WRITE, indicating the type of I/O event you want to wait for. If you do not want to wait for some I/O event, specify undef for $fh_or_undef and 0 for $events). If timeout is undef or negative, then there will be no timeout. Otherwise a EV::timer with this value will be started. When an error occurs or either the timeout or I/O watcher triggers, then the callback will be called with the received event set (in general you can expect it to be a combination of EV::ERROR, EV::READ, EV::WRITE and EV::TIMER). EV::once doesn't return anything: the watchers stay active till either of them triggers, then they will be stopped and freed, and the callback invoked. EV::feed_fd_event $fd, $revents $loop->feed_fd_event ($fd, $revents) Feed an event on a file descriptor into EV. EV will react to this call as if the readyness notifications specified by $revents (a combination of EV::READ and EV::WRITE) happened on the file descriptor $fd. EV::feed_signal_event $signal Feed a signal event into the default loop. EV will react to this call as if the signal specified by $signal had occured. EV::feed_signal $signal Feed a signal event into EV - unlike EV::feed_signal_event, this works regardless of which loop has registered the signal, and is mainly useful fro custom signal implementations. EV::set_io_collect_interval $time $loop->set_io_collect_interval ($time) EV::set_timeout_collect_interval $time $loop->set_timeout_collect_interval ($time) These advanced functions set the minimum block interval when polling for I/O events and the minimum wait interval for timer events. See the libev documentation at http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#FUNCTIONS_CONTROLLING_THE_EVENT_LOOP (locally installed as EV::libev) for a more detailed discussion. $count = EV::pending_count $count = $loop->pending_count Returns the number of currently pending watchers. EV::invoke_pending $loop->invoke_pending Invoke all currently pending watchers. WATCHER OBJECTS A watcher is an object that gets created to record your interest in some event. For instance, if you want to wait for STDIN to become readable, you would create an EV::io watcher for that:    my $watcher = EV::io *STDIN, EV::READ, sub {       my ($watcher, $revents) = @_;       warn ""yeah, STDIN should now be readable without blocking!\n""    }; All watchers can be active (waiting for events) or inactive (paused). Only active watchers will have their callbacks invoked. All callbacks will be called with at least two arguments: the watcher and a bitmask of received events. Each watcher type has its associated bit in revents, so you can use the same callback for multiple watchers. The event mask is named after the type, i.e. EV::child sets EV::CHILD, EV::prepare sets EV::PREPARE, EV::periodic sets EV::PERIODIC and so on, with the exception of I/O events (which can set both EV::READ and EV::WRITE bits). In the rare case where one wants to create a watcher but not start it at the same time, each constructor has a variant with a trailing _ns in its name, e.g. EV::io has a non-starting variant EV::io_ns and so on. Please note that a watcher will automatically be stopped when the watcher object is destroyed, so you need to keep the watcher objects returned by the constructors. Also, all methods changing some aspect of a watcher (->set, ->priority, ->fh and so on) automatically stop and start it again if it is active, which means pending events get lost. COMMON WATCHER METHODS This section lists methods common to all watchers. $w->start Starts a watcher if it isn't active already. Does nothing to an already active watcher. By default, all watchers start out in the active state (see the description of the _ns variants if you need stopped watchers). $w->stop Stop a watcher if it is active. Also clear any pending events (events that have been received but that didn't yet result in a callback invocation), regardless of whether the watcher was active or not. $bool = $w->is_active Returns true if the watcher is active, false otherwise. $current_data = $w->data $old_data = $w->data ($new_data) Queries a freely usable data scalar on the watcher and optionally changes it. This is a way to associate custom data with a watcher:    my $w = EV::timer 60, 0, sub {       warn $_[0]->data;    };    $w->data (""print me!""); $current_cb = $w->cb $old_cb = $w->cb ($new_cb) Queries the callback on the watcher and optionally changes it. You can do this at any time without the watcher restarting. $current_priority = $w->priority $old_priority = $w->priority ($new_priority) Queries the priority on the watcher and optionally changes it. Pending watchers with higher priority will be invoked first. The valid range of priorities lies between EV::MAXPRI (default 2) and EV::MINPRI (default -2). If the priority is outside this range it will automatically be normalised to the nearest valid priority. The default priority of any newly-created watcher is 0. Note that the priority semantics have not yet been fleshed out and are subject to almost certain change. $w->invoke ($revents) Call the callback *now* with the given event mask. $w->feed_event ($revents) Feed some events on this watcher into EV. EV will react to this call as if the watcher had received the given $revents mask. $revents = $w->clear_pending If the watcher is pending, this function clears its pending status and returns its $revents bitset (as if its callback was invoked). If the watcher isn't pending it does nothing and returns 0. $previous_state = $w->keepalive ($bool) Normally, EV::loop will return when there are no active watchers (which is a ""deadlock"" because no progress can be made anymore). This is convenient because it allows you to start your watchers (and your jobs), call EV::loop once and when it returns you know that all your jobs are finished (or they forgot to register some watchers for their task :). Sometimes, however, this gets in your way, for example when the module that calls EV::loop (usually the main program) is not the same module as a long-living watcher (for example a DNS client module written by somebody else even). Then you might want any outstanding requests to be handled, but you would not want to keep EV::loop from returning just because you happen to have this long-running UDP port watcher. In this case you can clear the keepalive status, which means that even though your watcher is active, it won't keep EV::loop from returning. The initial value for keepalive is true (enabled), and you can change it any time. Example: Register an I/O watcher for some UDP socket but do not keep the event loop from running just because of that watcher.    my $udp_socket = ...    my $udp_watcher = EV::io $udp_socket, EV::READ, sub { ... };    $udp_watcher->keepalive (0); $loop = $w->loop Return the loop that this watcher is attached to. WATCHER TYPES Each of the following subsections describes a single watcher type. I/O WATCHERS - is this file descriptor readable or writable? $w = EV::io $fileno_or_fh, $eventmask, $callback $w = EV::io_ns $fileno_or_fh, $eventmask, $callback $w = $loop->io ($fileno_or_fh, $eventmask, $callback) $w = $loop->io_ns ($fileno_or_fh, $eventmask, $callback) As long as the returned watcher object is alive, call the $callback when at least one of events specified in $eventmask occurs. The $eventmask can be one or more of these constants ORed together:   EV::READ     wait until read() wouldn't block anymore   EV::WRITE    wait until write() wouldn't block anymore The io_ns variant doesn't start (activate) the newly created watcher. $w->set ($fileno_or_fh, $eventmask) Reconfigures the watcher, see the constructor above for details. Can be called at any time. $current_fh = $w->fh $old_fh = $w->fh ($new_fh) Returns the previously set filehandle and optionally set a new one. $current_eventmask = $w->events $old_eventmask = $w->events ($new_eventmask) Returns the previously set event mask and optionally set a new one. TIMER WATCHERS - relative and optionally repeating timeouts $w = EV::timer $after, $repeat, $callback $w = EV::timer_ns $after, $repeat, $callback $w = $loop->timer ($after, $repeat, $callback) $w = $loop->timer_ns ($after, $repeat, $callback) Calls the callback after $after seconds (which may be fractional). If $repeat is non-zero, the timer will be restarted (with the $repeat value as $after) after the callback returns. This means that the callback would be called roughly after $after seconds, and then every $repeat seconds. The timer does his best not to drift, but it will not invoke the timer more often then once per event loop iteration, and might drift in other cases. If that isn't acceptable, look at EV::periodic, which can provide long-term stable timers. The timer is based on a monotonic clock, that is, if somebody is sitting in front of the machine while the timer is running and changes the system clock, the timer will nevertheless run (roughly) the same time. The timer_ns variant doesn't start (activate) the newly created watcher. $w->set ($after, $repeat = 0) Reconfigures the watcher, see the constructor above for details. Can be called at any time. $w->again $w->again ($repeat) Similar to the start method, but has special semantics for repeating timers: If the timer is active and non-repeating, it will be stopped. If the timer is active and repeating, reset the timeout to occur $repeat seconds after now. If the timer is inactive and repeating, start it using the repeat value. Otherwise do nothing. This behaviour is useful when you have a timeout for some IO operation. You create a timer object with the same value for $after and $repeat, and then, in the read/write watcher, run the again method on the timeout. If called with a $repeat argument, then it uses this a timer repeat value. $after = $w->remaining Calculates and returns the remaining time till the timer will fire. PERIODIC WATCHERS - to cron or not to cron? $w = EV::periodic $at, $interval, $reschedule_cb, $callback $w = EV::periodic_ns $at, $interval, $reschedule_cb, $callback $w = $loop->periodic ($at, $interval, $reschedule_cb, $callback) $w = $loop->periodic_ns ($at, $interval, $reschedule_cb, $callback) Similar to EV::timer, but is not based on relative timeouts but on absolute times. Apart from creating ""simple"" timers that trigger ""at"" the specified time, it can also be used for non-drifting absolute timers and more complex, cron-like, setups that are not adversely affected by time jumps (i.e. when the system clock is changed by explicit date -s or other means such as ntpd). It is also the most complex watcher type in EV. It has three distinct ""modes"": absolute timer ($interval = $reschedule_cb = 0) This time simply fires at the wallclock time $at and doesn't repeat. It will not adjust when a time jump occurs, that is, if it is to be run at January 1st 2011 then it will run when the system time reaches or surpasses this time. repeating interval timer ($interval > 0, $reschedule_cb = 0) In this mode the watcher will always be scheduled to time out at the next $at + N * $interval time (for some integer N) and then repeat, regardless of any time jumps. This can be used to create timers that do not drift with respect to system time:    my $hourly = EV::periodic 0, 3600, 0, sub { print ""once/hour\n"" }; That doesn't mean there will always be 3600 seconds in between triggers, but only that the the callback will be called when the system time shows a full hour (UTC). Another way to think about it (for the mathematically inclined) is that EV::periodic will try to run the callback in this mode at the next possible time where $time = $at (mod $interval), regardless of any time jumps. manual reschedule mode ($reschedule_cb = coderef) In this mode $interval and $at are both being ignored. Instead, each time the periodic watcher gets scheduled, the reschedule callback ($reschedule_cb) will be called with the watcher as first, and the current time as second argument. This callback MUST NOT stop or destroy this or any other periodic watcher, ever, and MUST NOT call any event loop functions or methods. If you need to stop it, return 1e30 and stop it afterwards. You may create and start a EV::prepare watcher for this task. It must return the next time to trigger, based on the passed time value (that is, the lowest time value larger than or equal to to the second argument). It will usually be called just before the callback will be triggered, but might be called at other times, too. This can be used to create very complex timers, such as a timer that triggers on each midnight, local time (actually 24 hours after the last midnight, to keep the example simple. If you know a way to do it correctly in about the same space (without requiring elaborate modules), drop me a note :):    my $daily = EV::periodic 0, 0, sub {       my ($w, $now) = @_;        use Time::Local ();       my (undef, undef, undef, $d, $m, $y) = localtime $now;       86400 + Time::Local::timelocal 0, 0, 0, $d, $m, $y    }, sub {       print ""it's midnight or likely shortly after, now\n"";    }; The periodic_ns variant doesn't start (activate) the newly created watcher. $w->set ($at, $interval, $reschedule_cb) Reconfigures the watcher, see the constructor above for details. Can be called at any time. $w->again Simply stops and starts the watcher again. $time = $w->at Return the time that the watcher is expected to trigger next. SIGNAL WATCHERS - signal me when a signal gets signalled! $w = EV::signal $signal, $callback $w = EV::signal_ns $signal, $callback $w = $loop->signal ($signal, $callback) $w = $loop->signal_ns ($signal, $callback) Call the callback when $signal is received (the signal can be specified by number or by name, just as with kill or %SIG). Only one event loop can grab a given signal - attempting to grab the same signal from two EV loops will crash the program immediately or cause data corruption. EV will grab the signal for the process (the kernel only allows one component to receive a signal at a time) when you start a signal watcher, and removes it again when you stop it. Perl does the same when you add/remove callbacks to %SIG, so watch out. You can have as many signal watchers per signal as you want. The signal_ns variant doesn't start (activate) the newly created watcher. $w->set ($signal) Reconfigures the watcher, see the constructor above for details. Can be called at any time. $current_signum = $w->signal $old_signum = $w->signal ($new_signal) Returns the previously set signal (always as a number not name) and optionally set a new one. CHILD WATCHERS - watch out for process status changes $w = EV::child $pid, $trace, $callback $w = EV::child_ns $pid, $trace, $callback $w = $loop->child ($pid, $trace, $callback) $w = $loop->child_ns ($pid, $trace, $callback) Call the callback when a status change for pid $pid (or any pid if $pid is 0) has been received (a status change happens when the process terminates or is killed, or, when trace is true, additionally when it is stopped or continued). More precisely: when the process receives a SIGCHLD, EV will fetch the outstanding exit/wait status for all changed/zombie children and call the callback. It is valid (and fully supported) to install a child watcher after a child has exited but before the event loop has started its next iteration (for example, first you fork, then the new child process might exit, and only then do you install a child watcher in the parent for the new pid). You can access both exit (or tracing) status and pid by using the rstatus and rpid methods on the watcher object. You can have as many pid watchers per pid as you want, they will all be called. The child_ns variant doesn't start (activate) the newly created watcher. $w->set ($pid, $trace) Reconfigures the watcher, see the constructor above for details. Can be called at any time. $current_pid = $w->pid Returns the previously set process id and optionally set a new one. $exit_status = $w->rstatus Return the exit/wait status (as returned by waitpid, see the waitpid entry in perlfunc). $pid = $w->rpid Return the pid of the awaited child (useful when you have installed a watcher for all pids). STAT WATCHERS - did the file attributes just change? $w = EV::stat $path, $interval, $callback $w = EV::stat_ns $path, $interval, $callback $w = $loop->stat ($path, $interval, $callback) $w = $loop->stat_ns ($path, $interval, $callback) Call the callback when a file status change has been detected on $path. The $path does not need to exist, changing from ""path exists"" to ""path does not exist"" is a status change like any other. The $interval is a recommended polling interval for systems where OS-supported change notifications don't exist or are not supported. If you use 0 then an unspecified default is used (which is highly recommended!), which is to be expected to be around five seconds usually. This watcher type is not meant for massive numbers of stat watchers, as even with OS-supported change notifications, this can be resource-intensive. The stat_ns variant doesn't start (activate) the newly created watcher. ... = $w->stat This call is very similar to the perl stat built-in: It stats (using lstat) the path specified in the watcher and sets perls stat cache (as well as EV's idea of the current stat values) to the values found. In scalar context, a boolean is return indicating success or failure of the stat. In list context, the same 13-value list as with stat is returned (except that the blksize and blocks fields are not reliable). In the case of an error, errno is set to ENOENT (regardless of the actual error value) and the nlink value is forced to zero (if the stat was successful then nlink is guaranteed to be non-zero). See also the next two entries for more info. ... = $w->attr Just like $w->stat, but without the initial stat'ing: this returns the values most recently detected by EV. See the next entry for more info. ... = $w->prev Just like $w->stat, but without the initial stat'ing: this returns the previous set of values, before the change. That is, when the watcher callback is invoked, $w->prev will be set to the values found before a change was detected, while $w->attr returns the values found leading to the change detection. The difference (if any) between prev and attr is what triggered the callback. If you did something to the filesystem object and do not want to trigger yet another change, you can call stat to update EV's idea of what the current attributes are. $w->set ($path, $interval) Reconfigures the watcher, see the constructor above for details. Can be called at any time. $current_path = $w->path $old_path = $w->path ($new_path) Returns the previously set path and optionally set a new one. $current_interval = $w->interval $old_interval = $w->interval ($new_interval) Returns the previously set interval and optionally set a new one. Can be used to query the actual interval used. IDLE WATCHERS - when you've got nothing better to do... $w = EV::idle $callback $w = EV::idle_ns $callback $w = $loop->idle ($callback) $w = $loop->idle_ns ($callback) Call the callback when there are no other pending watchers of the same or higher priority (excluding check, prepare and other idle watchers of the same or lower priority, of course). They are called idle watchers because when the watcher is the highest priority pending event in the process, the process is considered to be idle at that priority. If you want a watcher that is only ever called when no other events are outstanding you have to set the priority to EV::MINPRI. The process will not block as long as any idle watchers are active, and they will be called repeatedly until stopped. For example, if you have idle watchers at priority 0 and 1, and an I/O watcher at priority 0, then the idle watcher at priority 1 and the I/O watcher will always run when ready. Only when the idle watcher at priority 1 is stopped and the I/O watcher at priority 0 is not pending with the 0-priority idle watcher be invoked. The idle_ns variant doesn't start (activate) the newly created watcher. PREPARE WATCHERS - customise your event loop! $w = EV::prepare $callback $w = EV::prepare_ns $callback $w = $loop->prepare ($callback) $w = $loop->prepare_ns ($callback) Call the callback just before the process would block. You can still create/modify any watchers at this point. See the EV::check watcher, below, for explanations and an example. The prepare_ns variant doesn't start (activate) the newly created watcher. CHECK WATCHERS - customise your event loop even more! $w = EV::check $callback $w = EV::check_ns $callback $w = $loop->check ($callback) $w = $loop->check_ns ($callback) Call the callback just after the process wakes up again (after it has gathered events), but before any other callbacks have been invoked. This can be used to integrate other event-based software into the EV mainloop: You register a prepare callback and in there, you create io and timer watchers as required by the other software. Here is a real-world example of integrating Net::SNMP (with some details left out):    our @snmp_watcher;     our $snmp_prepare = EV::prepare sub {       # do nothing unless active       $dispatcher->{_event_queue_h}          or return;        # make the dispatcher handle any outstanding stuff       ... not shown        # create an I/O watcher for each and every socket       @snmp_watcher = (          (map { EV::io $_, EV::READ, sub { } }              keys %{ $dispatcher->{_descriptors} }),           EV::timer +($event->[Net::SNMP::Dispatcher::_ACTIVE]                      ? $event->[Net::SNMP::Dispatcher::_TIME] - EV::now : 0),                     0, sub { },       );    }; The callbacks are irrelevant (and are not even being called), the only purpose of those watchers is to wake up the process as soon as one of those events occurs (socket readable, or timer timed out). The corresponding EV::check watcher will then clean up:    our $snmp_check = EV::check sub {       # destroy all watchers       @snmp_watcher = ();        # make the dispatcher handle any new stuff       ... not shown    }; The callbacks of the created watchers will not be called as the watchers are destroyed before this can happen (remember EV::check gets called first). The check_ns variant doesn't start (activate) the newly created watcher. EV::CHECK constant issues Like all other watcher types, there is a bitmask constant for use in $revents and other places. The EV::CHECK is special as it has the same name as the CHECK sub called by Perl. This doesn't cause big issues on newer perls (beginning with 5.8.9), but it means thatthe constant must be inlined, i.e. runtime calls will not work. That means that as long as you always use EV and then EV::CHECK you are on the safe side. FORK WATCHERS - the audacity to resume the event loop after a fork Fork watchers are called when a fork () was detected. The invocation is done before the event loop blocks next and before check watchers are being called, and only in the child after the fork. $w = EV::fork $callback $w = EV::fork_ns $callback $w = $loop->fork ($callback) $w = $loop->fork_ns ($callback) Call the callback before the event loop is resumed in the child process after a fork. The fork_ns variant doesn't start (activate) the newly created watcher. EMBED WATCHERS - when one backend isn't enough... This is a rather advanced watcher type that lets you embed one event loop into another (currently only IO events are supported in the embedded loop, other types of watchers might be handled in a delayed or incorrect fashion and must not be used). See the libev documentation at http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_embed_code_when_one_backend_ (locally installed as EV::libev) for more details. In short, this watcher is most useful on BSD systems without working kqueue to still be able to handle a large number of sockets:    my $socket_loop;       # check wether we use SELECT or POLL _and_ KQUEUE is supported    if (      (EV::backend & (EV::BACKEND_POLL | EV::BACKEND_SELECT))      && (EV::supported_backends & EV::embeddable_backends & EV::BACKEND_KQUEUE)    ) {      # use kqueue for sockets      $socket_loop = new EV::Loop EV::BACKEND_KQUEUE | EV::FLAG_NOENV;    }       # use the default loop otherwise    $socket_loop ||= EV::default_loop; $w = EV::embed $otherloop[, $callback] $w = EV::embed_ns $otherloop[, $callback] $w = $loop->embed ($otherloop[, $callback]) $w = $loop->embed_ns ($otherloop[, $callback]) Call the callback when the embedded event loop ($otherloop) has any I/O activity. The $callback is optional: if it is missing, then the embedded event loop will be managed automatically (which is recommended), otherwise you have to invoke sweep yourself. The embed_ns variant doesn't start (activate) the newly created watcher. ASYNC WATCHERS - how to wake up another event loop Async watchers are provided by EV, but have little use in perl directly, as perl neither supports threads running in parallel nor direct access to signal handlers or other contexts where they could be of value. It is, however, possible to use them from the XS level. Please see the libev documentation for further details. $w = EV::async $callback $w = EV::async_ns $callback $w = $loop->async ($callback) $w = $loop->async_ns ($callback) $w->send $bool = $w->async_pending CLEANUP WATCHERS - how to clean up when the event loop goes away Cleanup watchers are not supported on the Perl level, they can only be used via XS currently. PERL SIGNALS While Perl signal handling (%SIG) is not affected by EV, the behaviour with EV is as the same as any other C library: Perl-signals will only be handled when Perl runs, which means your signal handler might be invoked only the next time an event callback is invoked. The solution is to use EV signal watchers (see EV::signal), which will ensure proper operations with regards to other event watchers. If you cannot do this for whatever reason, you can also force a watcher to be called on every event loop iteration by installing a EV::check watcher:    my $async_check = EV::check sub { }; This ensures that perl gets into control for a short time to handle any pending signals, and also ensures (slightly) slower overall operation. ITHREADS Ithreads are not supported by this module in any way. Perl pseudo-threads is evil stuff and must die. Real threads as provided by Coro are fully supported (and enhanced support is available via Coro::EV). FORK Most of the ""improved"" event delivering mechanisms of modern operating systems have quite a few problems with fork(2) (to put it bluntly: it is not supported and usually destructive). Libev makes it possible to work around this by having a function that recreates the kernel state after fork in the child. On non-win32 platforms, this module requires the pthread_atfork functionality to do this automatically for you. This function is quite buggy on most BSDs, though, so YMMV. The overhead for this is quite negligible, because everything the function currently does is set a flag that is checked only when the event loop gets used the next time, so when you do fork but not use EV, the overhead is minimal. On win32, there is no notion of fork so all this doesn't apply, of course. SEE ALSO EV::MakeMaker - MakeMaker interface to XS API, EV::ADNS (asynchronous DNS), Glib::EV (makes Glib/Gtk2 use EV as event loop), EV::Glib (embed Glib into EV), Coro::EV (efficient thread integration), Net::SNMP::EV (asynchronous SNMP), AnyEvent for event-loop agnostic and portable event driven programming. AUTHOR    Marc Lehmann <schmorp@schmorp.de>    http://home.schmorp.de/ × Module Install Instructions To install EV, simply copy and paste either of the commands in to your terminal cpanm                      cpanm EV CPAN shell                      perl -MCPAN -e shell                     install EV For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Uses libev, very fast and popular. Default for AnyEvent if present"	"true"
"Event Loops"	"Event"	"https://metacpan.org/pod/Event"	"Works well, but older"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Event - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Ed J  /  1.26 (ETJ on 2016-06-13) 1.21 (JPRIT on 2012-12-14) 1.20 (JPRIT on 2011-07-27) 1.18 (JPRIT on 2011-06-25) 1.17 (JPRIT on 2011-05-18) 1.25 (ETJ on 2016-06-06) 1.24 (ETJ on 2015-02-27) 1.23 (ETJ on 2014-07-09) 1.22 (ETJ on 2014-06-30) 1.19 (JPRIT on 2011-07-24) 1.15 (JPRIT on 2011-05-03) 1.14 (JPRIT on 2011-05-03) 1.13 (JPRIT on 2009-09-30) 1.12 (JPRIT on 2009-08-26) 1.11 (JPRIT on 2008-05-17) 1.10 (JPRIT on 2008-01-15) 1.09 (JPRIT on 2007-05-22) 1.08 (JPRIT on 2006-11-01) 1.07 (JPRIT on 2006-10-10) 1.06 (JPRIT on 2005-05-14) 1.05 (JPRIT on 2005-04-24) 1.04 (JPRIT on 2005-03-29) 1.03 (JPRIT on 2005-01-31) 1.02 (JPRIT on 2004-12-08) 1.01 (JPRIT on 2004-11-29) 1.00 (JPRIT on 2004-05-14) 0.88 (JPRIT on 2004-04-21) 0.87 (JPRIT on 2003-02-18) 0.86 (JPRIT on 2002-05-25) 0.85 (JPRIT on 2002-02-01) 0.84 (JPRIT on 2002-01-23) 0.83 (JPRIT on 2001-06-22) 0.82 (JPRIT on 2001-06-21) 0.81 (JPRIT on 2001-01-31) 0.80 (JPRIT on 2000-12-07) 0.79 (JPRIT on 2000-11-17) 0.78 (JPRIT on 2000-05-24) 0.77 (JPRIT on 2000-05-12) 0.76 (JPRIT on 2000-04-26) 0.75 (JPRIT on 2000-04-24) 0.74 (JPRIT on 2000-04-19) 0.73 (JPRIT on 2000-03-24) 0.72 (JPRIT on 2000-03-10) 0.71 (JPRIT on 2000-03-03) 0.70 (JPRIT on 2000-02-25) 0.69 (JPRIT on 2000-02-18) 0.68 (JPRIT on 2000-02-15) 0.67 (JPRIT on 2000-02-09) 0.66 (JPRIT on 2000-02-08) 0.65 (JPRIT on 2000-02-07) 0.64 (JPRIT on 2000-02-04) 0.63 (JPRIT on 2000-02-03) 0.62 (JPRIT on 2000-02-01) 0.61 (JPRIT on 2000-01-31) 0.60 (JPRIT on 2000-01-26) 0.59 (JPRIT on 2000-01-20) 0.58 (JPRIT on 1999-11-22) 0.57 (JPRIT on 1999-10-06) 0.56 (JPRIT on 1999-09-22) 0.55 (JPRIT on 1999-09-13) 0.54 (JPRIT on 1999-09-10) 0.53 (JPRIT on 1999-09-09) 0.52 (JPRIT on 1999-08-18) 0.51 (JPRIT on 1999-07-23) 0.50 (JPRIT on 1999-07-15) 0.44 (JPRIT on 1999-06-30) 0.43 (JPRIT on 1999-06-22) 0.42 (JPRIT on 1999-06-19) 0.41 (JPRIT on 1999-05-19) 0.33 (JPRIT on 1999-03-30) 0.32 (JPRIT on 1999-03-15) 0.31 (JPRIT on 1999-03-09) 0.30 (JPRIT on 1999-02-04) 0.25 (JPRIT on 1998-11-20) 0.24 (JPRIT on 1998-11-01) 0.23 (JPRIT on 1998-10-18) 0.22 (JPRIT on 1998-10-17) 0.21 (JPRIT on 1998-10-08) 0.20 (JPRIT on 1998-10-06) 0.19 (JPRIT on 1998-10-03) 0.18 (JPRIT on 1998-10-02) 0.17 (JPRIT on 1998-10-01) 0.15 (JPRIT on 1998-09-29) 0.14 (JPRIT on 1998-09-28) 0.13 (JPRIT on 1998-09-27) 0.12 (JPRIT on 1998-09-22) 0.11 (JPRIT on 1998-09-11) 0.10 (JPRIT on 1998-09-03) 0.08 (JPRIT on 1998-08-14) 0.07 (JPRIT on 1998-08-05) 0.06 (JPRIT on 1998-07-24) 0.05 (JPRIT on 1998-07-20) 0.04 (JPRIT on 1998-07-20) 0.03 (JPRIT on 1998-07-18) 0.01 (GBARR on 1998-01-26) Event-1.26 4 ++ 4 ++  / Event 13 Jun 2016 22:08:46 GMT Module version: 1.26 Source (raw) Browse (raw) Changes Repository (git clone) Issues (1) 5 (3 reviews) Testers Kwalitee License: unknown Activity 24 month Tools MOBI | EPUB Download (248.82Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.21 (JPRIT on 2012-12-14) 1.20 (JPRIT on 2011-07-27) 1.18 (JPRIT on 2011-06-25) 1.17 (JPRIT on 2011-05-18) 1.25 (ETJ on 2016-06-06) 1.24 (ETJ on 2015-02-27) 1.23 (ETJ on 2014-07-09) 1.22 (ETJ on 2014-06-30) 1.19 (JPRIT on 2011-07-24) 1.15 (JPRIT on 2011-05-03) 1.14 (JPRIT on 2011-05-03) 1.13 (JPRIT on 2009-09-30) 1.12 (JPRIT on 2009-08-26) 1.11 (JPRIT on 2008-05-17) 1.10 (JPRIT on 2008-01-15) 1.09 (JPRIT on 2007-05-22) 1.08 (JPRIT on 2006-11-01) 1.07 (JPRIT on 2006-10-10) 1.06 (JPRIT on 2005-05-14) 1.05 (JPRIT on 2005-04-24) 1.04 (JPRIT on 2005-03-29) 1.03 (JPRIT on 2005-01-31) 1.02 (JPRIT on 2004-12-08) 1.01 (JPRIT on 2004-11-29) 1.00 (JPRIT on 2004-05-14) 0.88 (JPRIT on 2004-04-21) 0.87 (JPRIT on 2003-02-18) 0.86 (JPRIT on 2002-05-25) 0.85 (JPRIT on 2002-02-01) 0.84 (JPRIT on 2002-01-23) 0.83 (JPRIT on 2001-06-22) 0.82 (JPRIT on 2001-06-21) 0.81 (JPRIT on 2001-01-31) 0.80 (JPRIT on 2000-12-07) 0.79 (JPRIT on 2000-11-17) 0.78 (JPRIT on 2000-05-24) 0.77 (JPRIT on 2000-05-12) 0.76 (JPRIT on 2000-04-26) 0.75 (JPRIT on 2000-04-24) 0.74 (JPRIT on 2000-04-19) 0.73 (JPRIT on 2000-03-24) 0.72 (JPRIT on 2000-03-10) 0.71 (JPRIT on 2000-03-03) 0.70 (JPRIT on 2000-02-25) 0.69 (JPRIT on 2000-02-18) 0.68 (JPRIT on 2000-02-15) 0.67 (JPRIT on 2000-02-09) 0.66 (JPRIT on 2000-02-08) 0.65 (JPRIT on 2000-02-07) 0.64 (JPRIT on 2000-02-04) 0.63 (JPRIT on 2000-02-03) 0.62 (JPRIT on 2000-02-01) 0.61 (JPRIT on 2000-01-31) 0.60 (JPRIT on 2000-01-26) 0.59 (JPRIT on 2000-01-20) 0.58 (JPRIT on 1999-11-22) 0.57 (JPRIT on 1999-10-06) 0.56 (JPRIT on 1999-09-22) 0.55 (JPRIT on 1999-09-13) 0.54 (JPRIT on 1999-09-10) 0.53 (JPRIT on 1999-09-09) 0.52 (JPRIT on 1999-08-18) 0.51 (JPRIT on 1999-07-23) 0.50 (JPRIT on 1999-07-15) 0.44 (JPRIT on 1999-06-30) 0.43 (JPRIT on 1999-06-22) 0.42 (JPRIT on 1999-06-19) 0.41 (JPRIT on 1999-05-19) 0.33 (JPRIT on 1999-03-30) 0.32 (JPRIT on 1999-03-15) 0.31 (JPRIT on 1999-03-09) 0.30 (JPRIT on 1999-02-04) 0.25 (JPRIT on 1998-11-20) 0.24 (JPRIT on 1998-11-01) 0.23 (JPRIT on 1998-10-18) 0.22 (JPRIT on 1998-10-17) 0.21 (JPRIT on 1998-10-08) 0.20 (JPRIT on 1998-10-06) 0.19 (JPRIT on 1998-10-03) 0.18 (JPRIT on 1998-10-02) 0.17 (JPRIT on 1998-10-01) 0.15 (JPRIT on 1998-09-29) 0.14 (JPRIT on 1998-09-28) 0.13 (JPRIT on 1998-09-27) 0.12 (JPRIT on 1998-09-22) 0.11 (JPRIT on 1998-09-11) 0.10 (JPRIT on 1998-09-03) 0.08 (JPRIT on 1998-08-14) 0.07 (JPRIT on 1998-08-05) 0.06 (JPRIT on 1998-07-24) 0.05 (JPRIT on 1998-07-20) 0.04 (JPRIT on 1998-07-20) 0.03 (JPRIT on 1998-07-18) 0.01 (GBARR on 1998-01-26) Diff with version 1.21 (JPRIT on 2012-12-14) 1.20 (JPRIT on 2011-07-27) 1.18 (JPRIT on 2011-06-25) 1.17 (JPRIT on 2011-05-18) 1.25 (ETJ on 2016-06-06) 1.24 (ETJ on 2015-02-27) 1.23 (ETJ on 2014-07-09) 1.22 (ETJ on 2014-06-30) 1.19 (JPRIT on 2011-07-24) 1.15 (JPRIT on 2011-05-03) 1.14 (JPRIT on 2011-05-03) 1.13 (JPRIT on 2009-09-30) 1.12 (JPRIT on 2009-08-26) 1.11 (JPRIT on 2008-05-17) 1.10 (JPRIT on 2008-01-15) 1.09 (JPRIT on 2007-05-22) 1.08 (JPRIT on 2006-11-01) 1.07 (JPRIT on 2006-10-10) 1.06 (JPRIT on 2005-05-14) 1.05 (JPRIT on 2005-04-24) 1.04 (JPRIT on 2005-03-29) 1.03 (JPRIT on 2005-01-31) 1.02 (JPRIT on 2004-12-08) 1.01 (JPRIT on 2004-11-29) 1.00 (JPRIT on 2004-05-14) 0.88 (JPRIT on 2004-04-21) 0.87 (JPRIT on 2003-02-18) 0.86 (JPRIT on 2002-05-25) 0.85 (JPRIT on 2002-02-01) 0.84 (JPRIT on 2002-01-23) 0.83 (JPRIT on 2001-06-22) 0.82 (JPRIT on 2001-06-21) 0.81 (JPRIT on 2001-01-31) 0.80 (JPRIT on 2000-12-07) 0.79 (JPRIT on 2000-11-17) 0.78 (JPRIT on 2000-05-24) 0.77 (JPRIT on 2000-05-12) 0.76 (JPRIT on 2000-04-26) 0.75 (JPRIT on 2000-04-24) 0.74 (JPRIT on 2000-04-19) 0.73 (JPRIT on 2000-03-24) 0.72 (JPRIT on 2000-03-10) 0.71 (JPRIT on 2000-03-03) 0.70 (JPRIT on 2000-02-25) 0.69 (JPRIT on 2000-02-18) 0.68 (JPRIT on 2000-02-15) 0.67 (JPRIT on 2000-02-09) 0.66 (JPRIT on 2000-02-08) 0.65 (JPRIT on 2000-02-07) 0.64 (JPRIT on 2000-02-04) 0.63 (JPRIT on 2000-02-03) 0.62 (JPRIT on 2000-02-01) 0.61 (JPRIT on 2000-01-31) 0.60 (JPRIT on 2000-01-26) 0.59 (JPRIT on 2000-01-20) 0.58 (JPRIT on 1999-11-22) 0.57 (JPRIT on 1999-10-06) 0.56 (JPRIT on 1999-09-22) 0.55 (JPRIT on 1999-09-13) 0.54 (JPRIT on 1999-09-10) 0.53 (JPRIT on 1999-09-09) 0.52 (JPRIT on 1999-08-18) 0.51 (JPRIT on 1999-07-23) 0.50 (JPRIT on 1999-07-15) 0.44 (JPRIT on 1999-06-30) 0.43 (JPRIT on 1999-06-22) 0.42 (JPRIT on 1999-06-19) 0.41 (JPRIT on 1999-05-19) 0.33 (JPRIT on 1999-03-30) 0.32 (JPRIT on 1999-03-15) 0.31 (JPRIT on 1999-03-09) 0.30 (JPRIT on 1999-02-04) 0.25 (JPRIT on 1998-11-20) 0.24 (JPRIT on 1998-11-01) 0.23 (JPRIT on 1998-10-18) 0.22 (JPRIT on 1998-10-17) 0.21 (JPRIT on 1998-10-08) 0.20 (JPRIT on 1998-10-06) 0.19 (JPRIT on 1998-10-03) 0.18 (JPRIT on 1998-10-02) 0.17 (JPRIT on 1998-10-01) 0.15 (JPRIT on 1998-09-29) 0.14 (JPRIT on 1998-09-28) 0.13 (JPRIT on 1998-09-27) 0.12 (JPRIT on 1998-09-22) 0.11 (JPRIT on 1998-09-11) 0.10 (JPRIT on 1998-09-03) 0.08 (JPRIT on 1998-08-14) 0.07 (JPRIT on 1998-08-05) 0.06 (JPRIT on 1998-07-24) 0.05 (JPRIT on 1998-07-20) 0.04 (JPRIT on 1998-07-20) 0.03 (JPRIT on 1998-07-18) 0.01 (GBARR on 1998-01-26) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 2 PAUSE users 2 non-PAUSE users. ETJ Ed J Dependencies Test and possibly others CPAN Testers List Reverse dependencies Dependency graph × Event-1.26 NAME SYNOPSIS DESCRIPTION PERL API Event Watcher Constructors Shared Watcher Attributes Shared Watcher Methods Watcher Types PRIORITY WATCHER CONSTRUCTOR ATTRIBUTES WATCHER ATTRIBUTES EVENT ATTRIBUTES Customization and Exceptions C API WHAT ABOUT THREADS? WHAT ABOUT NON-PREEMPTIVE THREADS? BUGS THE FUTURE ALSO SEE SUPPORT AUTHOR ACKNOWLEDGMENT COPYRIGHT NAME Event - Event loop processing SYNOPSIS  use Event qw(loop unloop);    # initialize application  Event->flavor(attribute => value, ...);       my $ret = loop();       # and some callback will call  unloop('ok'); DESCRIPTION ALERT: Marc Lehmann may have taken over the future of event loops in Perl. Check out his libev library and EV Perl module. 25 Aug 2009 The Event module provide a central facility to watch for various types of events and invoke a callback when these events occur. The idea is to delay the handling of events so that they may be dispatched in priority order when it is safe for callbacks to execute. Events (in the ordinary sense of the word) are detected by watchers, which reify them as events (in the special Event module sense). For clarity, the former type of events may be called ""source events"", and the latter ""target events"". Source events, such as signals arriving, happen whether or not they are being watched. If a source event occurs which a watcher is actively watching then the watcher generates a corresponding target event. Target events are only created by watchers. If several watchers are interested in the same source event then each will generate their own target event. Hence, any particular source event may result in zero, one, two, or any number of target events: the same as the number of watchers which were actively watching for it. Target events are queued to be processed in priority order (priority being determined by the creating watcher) and in FIFO order among events of the same priority. Queued (""pending"") events can, in some cases, be cancelled before being processed. A queued event is processed by being passed to the callback function (or method on a particular object or class) which was specified to the watcher. A watcher, once created, operates autonomously without the Event user having to retain any reference to it. However, keeping a reference makes it possible to modify most of the watcher's characteristics. A watcher can be switched between active and inactive states. When inactive, it does not generate target events. Some types of source event are not reified as target events immediately. Signals received, for example, are counted initially. The counted signals are reified at certain execution points. Hence, signal events may be processed out of order, and if handled carelessly, on the wrong side of a state change in event handling. A useful way to view this is that occurrence of the source event is not actually the arrival of the signal but is triggered by the counting of the signal. Reification can be forced when necessary. The schedule on which some other events are created is non-obvious. This is especially the case with watchers that watch for a condition rather than an event. In some cases, target events are generated on a schedule that depends on the operation of the event loop. PERL API Events (the occurrence of such) are noticed and queued by 'event watchers'. The creation and configuration of event watchers is the primary topic of the rest of this document. The following functions control or interrogate the event loop as a whole: $result = loop([$timeout]) Will enter a loop that calls one_event() until unloop() is called. The argument passed to unloop() is the return value of loop(). Loops can be nested. unloop($result) Make the inner-most loop() return with $result. unloop_all($result) Cause all pending loop()s to return immediately. This is not implemented with die. It is works as if unloop($result) were called for all nested loops. sweep([$max_prio]) Queue all pending events and dispatch any with priority strictly less than $max_prio (the highest priority is 0). The default is to process all events except idle events. (While idle events are ignored by sweep, idle watchers are not ignored. If you want to avoid triggering an idle watcher then set max to undef or stop() it.) one_event([$timeout]) If any events are outstanding then invoke the corresponding callback of the highest priority event. If there are no events available, block forever or until $timeout. Use of this API is not recommended because it is not efficient and does not trap exceptions. However, you might wish to understand how it works: Queue asyncronous events (signals, etc). That is, previously recorded events are reified. If there are any events with priority 5 or less (see StarvePrio) then service the next one and return. Calculate the maximum wait time (minimum time till the next timer expiration) and pass control to the poll/select system call. Upon return, queue all pending events. Queue asyncronous events again. If there are any events then service the next one and return. Service the next idle watcher. StarvePrio is the priority level for which events are dispatched during step 2. It cannot be changed without a recompile. In the rare case that an event is always pending at step 2 then I/O watchers will starve. However, this is highly unlikely since async watchers should never queue events so rapidly. all_watchers() Returns a list of all watchers (including stopped watchers). all_running() Returns a list of all watchers with actively running callbacks. Watchers are returned in order of most recent to least recent. all_idle() Returns a list of all the idle watchers. If the event queue is very busy, all the idle watchers will sit on the idle queue waiting to run. However, be aware that if an idle watcher has the max attribute set then it will queue a normal event when its max wait time is exceeded. queue_pending() Examines asynchronous source events (timers & signals) and reifies them as target events. queue_pending() is only called implicitly by sweep() and one_event(). Otherwise, queue_pending() is not called implicitly. NOTE: Signal watchers generate target events according to which watchers are active at the time that queue_pending() is called rather than according to the time the signal is received. This is best explained by example. See the file demo/queue_pending.t. Event Watcher Constructors All watchers are constructed in one of the following ways:   $w = Event->flavor( [attr1 => $value,]... );     $w = Event::flavor($Class, [attr1 => $value,]...);    $w = Event::flavor->new([attr1 => $value,]...); Where flavor is substituted with the kind of watcher. Built-in types include idle, io, signal, timer, and var. New watchers (hopefully) have reasonable defaults and can also be customized by passing extra attributes to the constructor. When created, watcher objects are ""started"" and are waiting for events (see $event->start below). NetServer::Portal can display watchers in real-time, formatted similarly to the popular top program. You may find this a useful aide for debugging. Shared Watcher Attributes Watchers are configured with attributes (also known as properties). For example:    $watcher->cb(\&some_code);   # set callback     warn $event->w->desc."": "".$event->hits."" events happened; Wow!""; All watchers support the following attributes: cb, cbtime, debug, desc, prio, max_cb_tm, reentrant, and repeat. Watcher constructors accept the preceding and additionally: async and nice. Moreover, watchers also offer extra attributes according to their specialty. Shared Watcher Methods The following methods are available for all watchers: $watcher->start Activate the watcher. Watchers refuse to start() without sufficient configuration information to generate events. Constructors always invoke start() unless the parked=>1 option is requested. You will need to set the parked option if you preallocate unconfigured watchers. Note: If there are any unreified asynchronous events that are of interest to the watcher, it will see these events even though they happened before it was started. This affects signal watchers, but there will only be existing unreified signal events if Event was already handling the signal, which it would only do if there were another active watcher for the same signal. If this situation might occur, and it would be a problem for the new watcher to see older events, call queue_pending() immediately before starting the new watcher in order to reify any outstanding events. This explanation may be more clear if read along with demo/queue_pending.t. $watcher->again This is the same as the start except if a watcher has special repeat behavior. For example, repeating timers recalculate their alarm time using the interval parameter. $watcher->now Cause the watcher to generate an event, even if it is stopped. The callback may or may not run immediately depending upon the event's priority. If you must unconditionally invoke the callback, consider something like   $w->cb->($w); $watcher->stop Don't look for events any more. Running events are allowed to complete but pending events are cancelled. Note that a stopped watcher can be reactivated by calling the start or again methods. Watchers are stopped implicitly if their new configuration deprives them of the ability to generate events. For instance:   my $io_watcher = Event->io(timeout => 1);  # started   $io_watcher->timeout(undef);               # stopped implicitly   $io_watcher->timeout(1);                   # still stopped   $io_watcher->start;                        # restarted $watcher->cancel Stop and destroy $watcher. Running events are allowed to complete but pending events are cancelled. Cancelled watchers are no longer valid except for read-only operations. For example, prio() can return the watcher's priority, but start() will fail. $watcher->is_cancelled Reports whether the $watcher has been cancelled. $watcher->is_active Reports whether the $watcher has been started. The return value is not affected by suspend. $watcher->is_running Zero if the callback is not running. Otherwise, the number of levels that the callback has been entered. This can be greater than one if a reentrant callback invokes loop (or sweep, with lesser probability). $watcher->is_suspended Reports whether the $watcher is suspended. Suspension is a debugging feature; see the discussion of the ""suspend"" attribute below. $watcher->pending In scalar context, returns a boolean indicating whether this watcher has any events pending in the event queue. In array context, returns a list of all the watcher's pending events. Note that this does not check for unreified asynchronous events. Call queue_pending() first if you want to see signals received since the last operation of the event loop. Watcher Types idle Extra attributes: min => $seconds, max => $seconds Watches for the Event system to be idle, i.e., to have no events pending. If the system is never idle, an event will be generated at least every max seconds. While Event is idle, events will be generated not more often than min seconds. If neither min nor max is specified, the watcher defaults to one-shot behaviour (repeat false), otherwise it defaults to repeating. In either case, the default can be overridden by specifying a repeat attribute. min defaults to 0.01, and max defaults to infinity. var Extra attributes: var => \$var, poll => 'rw' Var watchers generate events when the given variable is read from or written to, as specified by poll. poll defaults to ""w"". As perl is a concise language, it is often difficult to predict when a variable will be read. For this reason, variable watchers should poll only for writes unless you know what you are doing. timer Extra attributes: at => $time, after => $sec, interval => $sec, hard => $bool Generate events at particular times. The $time and $sec are in seconds. Fractional seconds may be used if Time::HiRes is available. at and after are mutually exclusive. at or after specify the initial time that the event will trigger. Subsequent timer events occur at intervals specified by interval or after (in that order of preference) if either was supplied. The timer defaults to one-shot behaviour if interval was not specified, or repeating behaviour if interval was specified; in either case this can be overridden by providing repeat explicitly. You need to know the time at the start of today if you are trying to set timers to trigger at day relative times. You can find it with:   use Time::Local;   my $TodaySeconds = int timelocal(0,0,0,(localtime)[3,4,5]); This calculation may seem a little heavy weight. If you want to use UTC rather than local time then you can use this instead:   my $TodaySeconds = time - time % 86400; Beware that, due to lags in the event loop, the interval timeout may already be in the past. If the hard flag is set, the event will be queued for execution relative to the last time the callback was invoked. However, if hard is false the new timeout will be calculated relative to the current time. hard defaults to false. io Extra attributes: fd => $fd, poll => 'rwe' [timeout => $seconds, hard => $bool, timeout_cb => \&code] The callback is invoked when the file descriptor, fd, has data to be read, written, or pending exceptions. fd can be a GLOB, an IO::Handle object, or a file number (file descriptor). poll defaults to ""r"". Note that it is your option whether to have multiple watchers per file handle or to use a single watcher for all event conditions. If timeout is set, events are also generated regularly if no actual I/O event occurs. If timeout_cb is set then timeouts use this alternate callback instead of the main callback. signal Extra attribute: signal => $str Generates events based on signal arrival. The events are not actually generated immediately when the signal arrives: signals received are counted and reified by queue_pending() or implicitly by one_event(). Several signals of the same type may be merged into a single event. In such cases, the number of signals represented by a single event is stored in the ""hits"" attribute. PRIORITY Priority is used to sort the event queue. Meaningful priorities range from -1 to 6 inclusive. Lower numbers mean higher priority (-1 is the highest priority and 6 is the lowest). If multiple events get queued, the ones with the highest priority are serviced first. Events with equal priority are serviced in first-in-first-out order.   use Event qw(PRIO_HIGH PRIO_NORMAL);   # some constants    LEVELS: -1      0      1      2      3      4      5      6           ----------------------+-------------+---------------                             PRIO_HIGH     PRIO_NORMAL A negative priority causes the callback to be invoked immediately upon event occurrence. Use this with caution. While it may seem advantageous to use negative priorities, they bypass the whole point of having an event queue. Each watcher has a default priority, assigned by its constructor:   io       PRIO_NORMAL   signal   PRIO_HIGH   timer    PRIO_NORMAL   var      PRIO_NORMAL Default priorities are stored in ${""Event::${type}::DefaultPriority""}. If the default priority is not satisfactory for your purposes, the constructor options nice, async, or prio can be used to adjust it. nice specifies an offset from the default priority; async forces the priority to -1; and prio assigns a given priority of your choice. If more than one of these options are given then prio overrides async overrides nice. WATCHER CONSTRUCTOR ATTRIBUTES These options are only supported as constructor arguments. after => $seconds See the discussion of the timer watcher. async => $bool If $bool then the watcher priority is set to -1. nice => $offset Offset from the default priority. parked => $yes By default, watcher constructors automatically invoke the start() method. If you don't want the watcher started then request parked=>1. WATCHER ATTRIBUTES at => $time The expiration time in the same units as the system clock. For a timer, at will usually be in the future. cb => \&code cb => [$class_or_object, $method_name] The function or method to call when an event is dispatched. The callback is invoked with $event as its only argument. Perhaps you are wondering what happens if something goes wrong and an untrapped die occurs within your callback? $Event::DIED is just for this purpose. See the full description of DIED below. cbtime => $time When the callback was invoked most recently. data => $anything The data() method associates arbitrary data with a watcher. This method is not intended for implementers of watchers. If you are subclassing or implementing a watcher, consider the private() method. debug => $bool Debugging can be activated globally or per watcher. When debugging is enabled for a particular watcher, $Event::DebugLevel is treated as two levels higher. Levels of 1, 2, 3, or 4 give progressively more diagnostics on STDERR. desc => $string An identifying name. If this is not passed explicitly to the constructor, it will be initialized with a string that attempts to identify the location in the source code where the watcher was constructed. fd => $filehandle This attribute can accept either a perl-esque filehandle or a system call derived file descriptor number. hard => $bool Determines how repeating timers (or timeouts) are recalculated. The timer is restarted either before or after the callback depending on whether it is true or false, respectively. In long-running callbacks this can make a significant difference. interval => $seconds How long between repeating timeouts. The at attribute is recalculated using interval upon callback return. max => $seconds The maximum number of seconds to wait before triggering the callback. Similar to a timeout. max_cb_tm => $seconds The maximum number of seconds to spend in a callback. If a callback uses more time then it is aborted. Defaults to 1 sec. This feature is normally disabled. See Event::Stats. min => $seconds Enforce a minimum number of seconds between triggering events. poll => $bits Determines which kinds of events are of interest. This attribute can be set with either strings or bit constants. The bit constants are available via 'use Event::Watcher qw(R W E T);'.   string constant description   ------ -------- ---------------    'r'     R      read    'w'     W      write    'e'     E      exception    't'     T      timeout Thus, both of these statements enable interest in read:   $w->poll($w->poll . 'r');   $w->poll($w->poll | R); A given type of watcher may support all or a subset of the available events. prio => $level Changes the watcher's priority to the given level. Events generated by a watcher usually inherit the priority of the watcher. private => $anything Use the private() method to associate arbitrary data with a watcher. This method is intended for implementers of watchers or watcher subclasses. Each caller's package accesses its own private attribute. reentrant => $bool By default, callbacks are allowed to invoke sweep or loop which in turn may invoke the same callback again recursively. This can be useful but can also be confusing. Moreover, if you keep reentering callbacks you will quickly run out of stack space. Disable this feature per watcher by setting reentrant to false. This will cause the watcher to be suspended during recursive calls to sweep or loop. repeat => $bool The repeat flag controls whether the callback should either be one-shot or continue waiting for new events. The default setting depends on the type of watcher. io, signal, and var default to true. signal => $str The callback is invoked after the specified signal is received. The $str string should be something like 'INT' or 'QUIT'. Also see the documentation for %SIG. A given signal can be handled by %SIG or Event, but not both at the same time. Event handles the signal as long as there is at least one active watcher. If all watchers for the signal are cancelled or stopped then Event sets the signal handler to SIG_DFL. suspend => $bool Stop looking for events. Running events are allowed to complete, but queued events are cancelled. Suspend is for debugging. If you suspend all watchers in an application then you can examine the complete state unchanged for as long as you like without worrying about timer expirations. If you actually wish to stop a watcher then use the stop() method. timeout => $seconds The number of seconds before a watcher times out. timeout_cb => \&code timeout_cb => [$class_or_object, $method_name] This is an optional attribute for use when it is desired that timeouts be serviced in a separate code path than normal events. When this attribute is unset, timeouts are serviced by cb. var => $ref A reference to the variable being watched. EVENT ATTRIBUTES got => $bits got is available in the callback of watchers with poll. got is in the same format as poll except that it gives what kind of event actually happened. In contrast, poll is just an indication of interest. hits => $int Signals in quick succession can be clumped into a single event. The number of signals clumped together is indicated by this attribute. This is always one for event types which don't clump. prio => $level Be aware that this priority can differ from the watcher's priority. For instance, the watcher's priority may have changed since the event was generated. Moreover, the C extension API offers the freedom to queue events of arbitrary priority. w => $watcher This method return the event's watcher. It is read-only. Customization and Exceptions $Event::DebugLevel Enables progressively more debugging output. Meaningful levels range from 1 (least output) to 5 (most output). Also see debug. $Event::DIED When loop or sweep is called, an exception context is established for the duration of event processing. If an exception is detected then $Event::DIED is invoked. The default hook uses warn to output the exception. After the DIED handler completes, event processing continues as if nothing happened. If you'd like more detailed output you can install the verbose handler:   $Event::DIED = \&Event::verbose_exception_handler; Or you can write your own. The handler is invoked like this:   $Event::DIED->($event, $@); If you do not want to continue looping after an error, you can do something like this:   $Event::DIED = sub {     Event::verbose_exception_handler(@_);     Event::unloop_all();   }; Event->add_hooks(key => sub { ... }, ...); The bulk of Event's implementation is in C for maximum performance. The add_hooks method allows insertion of perl code at key points in the optimized event processing core. While flexible, this can hurt performance *significantly*. If you want customization *and* performance, please see the C API. Currently support hooks are detailed as follows:   hook          purpose   ------------- ----------------------------------------------   prepare       returns minimum time to block (timeable)   check         assess state after normal return from select/poll   asynccheck    check for signals, etc   callback      invoked before each event callback C API Event also has a direct API for callbacks written exclusively in C. See Event::MakeMaker. WHAT ABOUT THREADS? Event loops and threads are two different solutions to the same problem: asynchronous processing. Event loops have been around since the beginning of computing. They are well understood and proven to be a good solution for many applications. While event loops make use of basic operating system services, the bulk of their implementation is usually outside the kernel. While an event loop may appear to do many things in parallel, it does not, even on multiprocessor hardware. Actions are always dispatched sequentially. This implies that long running callbacks must be avoided because otherwise event processing is halted. Event loops work well when actions are short and to the point. Long-running tasks must be broken into short steps and scheduled for execution. Some sort of a state machine is usually required. While a big, complex application server is usually simpler to implement in a multithreaded fashion, a web browser can easily get by without threads. Consider a JPEG file download and render. When some new bytes are available they are sorted to the right place on the screen. Only a little state must be kept to keep track of how much has been rendered and to process subsequent incoming bytes. Threads can either substitute for an event loop or complement it. Threads are similar to processes in that the operating system manages task switching for you. However, the difference is that all threads share the same address space. This is good and bad. Higher performance can be achieved but since data is shared between threads, extreme care must be taken to access or modify global data. The operating system can switch threads at any moment or can execute multiple threads simultaneously. I hope this sounds dangerous! It is! Threads can introduce maddeningly complicated and hard to debug synchronization problems. Threads are like rocket fuel. They are essential when you really need them but most applications would be better off with a simple event loop. Even if threads are genuinely needed, consider confining them to the parts of an application where truly scalable performance is really worth the difficulty of a multithreaded implementation. For example, most GUIs applications do not need threads and most scientific compute intensive problems can be isolated from event dispatching. On the other hand, high performance transaction servers generally do mandate a truly multithreaded approach. Another consideration is that threads are not quite as widely available as event loops. While a few forward-thinking operating systems have offered threads since the beginning, their addition to many popular operating systems is much more recent and some still offer no threads support. If portability is a requirement, one must check that threads support is available and also carefully test a particular threads implementation to see whether it supports the features you need. It is likely that all platforms will have a solid implementation soon but at this point in history it is best to double check. Many suggestions by Mark Mielke <Mark.Mielke.markm@nt.com> WHAT ABOUT NON-PREEMPTIVE THREADS? The Java language is oriented to use non-preemptive threads, yet even Java uses an event-loop for Swing (AFAIK). That is one of the reasons I don't use Java for network-centric applications. My belief is that the benefit of multi-threading is the gain in performance on SMP hardware. In my view, non-preemptive threads (java green-threads) are usually poor design. I find them harder to work with, harder to debug, and slower for a rather marginal gain in readability. I really like working with a state machine. I find it leads to more stable and better code. It also has the benefit of abstracting away how concurrency is achieved. Contributed by artur@vogon-solutions.com, 12 Jul 1999. BUGS No support for epoll, or better, libevent. The scope of events is pretty strange compared to most other perl objects. I'm not sure if this is a bug or a feature (OK, probably it was a mistake). We'll probably want to re-work things for Perl6. The meaning of $io->timeout(0) might change. Use undef to unset the timeout. There seems to be some sort of bug in the global destruction phase:   Attempt to free unreferenced scalar during global destruction.   Use of uninitialized value during global destruction.   Explicit blessing to '' (assuming package main) during global   destruction. THE FUTURE Even if this module does not end up being the One and True Event Loop, the author will insure that it is source compatible with its successor, or arrange for gradual migration. Back in the early days, the Event programming API was changing at every release. Care was taken to allow the old API to continue to work, and the transition was eased by printing out lots of warnings about the new usage. So you shouldn't sit on your hands in anticipation of the One and True Event Loop. Just start coding! ALSO SEE Useful and Fun Time::HiRes, NetServer::Portal, Time::Warp Message Passing COPE, IPC::LDT, Event-tcp GUI While Tk does not yet support Event, PerlQt does. C API Inline SUPPORT If you have insights or complaints then please subscribe to the mailing list! Send email to:   perl-loop-subscribe@perl.org AUTHOR Joshua N. Pritikin <jpritikin@pobox.com> ACKNOWLEDGMENT Initial 0.01 implementation by Graham Barr <gbarr@pobox.com>. Other contributors include at least those lists below and folks mentioned in the ChangeLog.  Gisle Aas <gisle@aas.no>  Uri Guttman <uri@sysarch.com>  Nick Ing-Simmons <nick@ni-s.u-net.com> (Tk)  Sarathy <gsar@engin.umich.edu>  Jochen Stenzel <perl@jochen-stenzel.de> COPYRIGHT Copyright © 1997 Joshua Nathaniel Pritikin & Graham Barr Copyright © 1998, 1999, 2000, 2001, 2002, 2003, 2004 Joshua Nathaniel Pritikin All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself. × Module Install Instructions To install Event, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Event CPAN shell                      perl -MCPAN -e shell                     install Event For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Works well, but older"	"true"
"Event Loops"	"IO::Async"	"https://metacpan.org/pod/IO::Async"	"Asynchronous event-driven programming"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Asynchronous event-driven programming"	"true"
"Event Loops"	"POE"	"https://metacpan.org/pod/POE"	"Common interface for several event loops"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Common interface for several event loops"	"true"
"Exception Handling"	"autodie"	"https://metacpan.org/pod/autodie"	"Replace functions with ones that succeed or die with lexical scope"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Replace functions with ones that succeed or die with lexical scope"	"true"
"Exception Handling"	"Exception::Class"	"https://metacpan.org/pod/Exception::Class"	"A module that allows you to declare real exception classes in Perl"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"A module that allows you to declare real exception classes in Perl"	"true"
"Exception Handling"	"Throwable"	"https://metacpan.org/pod/Throwable"	"a role for classes that can be thrown"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"a role for classes that can be thrown"	"true"
"Exception Handling"	"Try::Tiny"	"https://metacpan.org/pod/Try::Tiny"	"minimal try/catch with proper preservation of $@"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"minimal try/catch with proper preservation of $@"	"true"
"Exception Handling"	"TryCatch"	"https://metacpan.org/pod/TryCatch"	"first class try catch semantics for Perl, without source filters"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Join GitHub Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"first class try catch semantics for Perl, without source filters"	"true"
"File Manipulation"	"File::Util"	"https://metacpan.org/pod/File::Util"	"Easy, versatile, portable file handling."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Easy, versatile, portable file handling."	"true"
"File Manipulation"	"Path::Tiny"	"https://metacpan.org/pod/Path::Tiny"	"Simple object-oriented file manipulation."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Simple object-oriented file manipulation."	"true"
"Form Frameworks"	"Catalyst::Controller::HTML::FormFu"	"https://metacpan.org/pod/Catalyst::Controller::HTML::FormFu"	"Use HTML::FormFu in Catalyst."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Use HTML::FormFu in Catalyst."	"true"
"Form Frameworks"	"CGI::FormBuilder"	"https://metacpan.org/pod/CGI::FormBuilder"	"Easily generate and process stateful forms."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Easily generate and process stateful forms."	"true"
"Form Frameworks"	"Form::Sensible"	"https://metacpan.org/pod/Form::Sensible"	"A sensible way to handle form based user interface."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"A sensible way to handle form based user interface."	"true"
"Form Frameworks"	"Form::Toolkit"	"https://metacpan.org/pod/Form::Toolkit"	"A toolkit to build Data centric Forms."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"A toolkit to build Data centric Forms."	"true"
"Form Frameworks"	"HTML::FormFu"	"https://metacpan.org/pod/HTML::FormFu"	"HTML Form Creation, Rendering and Validation Framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"HTML Form Creation, Rendering and Validation Framework."	"true"
"Form Frameworks"	"HTML::FormFu::ExtJS"	"https://metacpan.org/pod/HTML::FormFu::ExtJS"	"ExtJS form generation from HTML::FormFu config files."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"ExtJS form generation from HTML::FormFu config files."	"true"
"Form Frameworks"	"HTML::FormHandler"	"https://metacpan.org/pod/HTML::FormHandler"	"HTML forms using Moose."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"HTML forms using Moose."	"true"
"Form Frameworks"	"Mojolicious::Plugin::FormFields"	"https://metacpan.org/pod/Mojolicious::Plugin::FormFields"	"Lightweight, flexible form builder with validation and filtering."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Lightweight, flexible form builder with validation and filtering."	"true"
"Form Frameworks"	"WWW::Form"	"https://metacpan.org/pod/WWW::Form"	"Simple and extendable module that allows developers to handle HTML form input validation and display flexibly and consistently."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Simple and extendable module that allows developers to handle HTML form input validation and display flexibly and consistently."	"true"
"Images"	"Image::Magick"	"https://metacpan.org/pod/Image::Magick"	"An object-oriented interface to ImageMagick's image composing libraries."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"An object-oriented interface to ImageMagick's image composing libraries."	"true"
"Images"	"Imager"	"https://metacpan.org/pod/Imager"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"List Manipulation"	"Array::Unique"	"https://metacpan.org/pod/Array::Unique"	"Tie-able array that allows only unique values"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Tie-able array that allows only unique values"	"true"
"List Manipulation"	"List::Compare"	"https://metacpan.org/pod/List::Compare"	"Compare elements of two or more lists"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Compare elements of two or more lists"	"true"
"List Manipulation"	"List::Gen"	"https://metacpan.org/pod/List::Gen"	"Provides functions for generating lists"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Provides functions for generating lists"	"true"
"List Manipulation"	"List::MoreUtils"	"https://metacpan.org/pod/List::MoreUtils"	"Provide the stuff missing in List::Util"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Provide the stuff missing in List::Util"	"true"
"List Manipulation"	"List::Util"	"https://metacpan.org/pod/List::Util"	"A selection of general-utility list subroutines"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"A selection of general-utility list subroutines"	"true"
"Logging"	"Log::Dispatch"	"https://metacpan.org/pod/Log::Dispatch"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Logging"	"Log::Log4perl"	"https://metacpan.org/pod/Log::Log4perl"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Logging"	"Log::Minimal"	"https://metacpan.org/pod/Log::Minimal"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Module Development"	"Dist::Zilla"	"https://metacpan.org/pod/Dist::Zilla"	""	"null"	"null"	"null"	"null"	"null"	"http://dzil.org/"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Module Development"	"Minilla"	"https://metacpan.org/pod/Minilla"	"CPAN module authoring tool"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"CPAN module authoring tool"	"true"
"Network"	"DOCSIS::ConfigFile"	"https://metacpan.org/pod/DOCSIS::ConfigFile"	"Decodes and encodes DOCSIS config files"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Decodes and encodes DOCSIS config files"	"true"
"Network"	"NetAddr::MAC"	"https://metacpan.org/pod/NetAddr::MAC"	"Handle MAC addresses"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Handle MAC addresses"	"true"
"Network"	"MIO::SSH"	"https://metacpan.org/pod/MIO::SSH"	"Run multiple SSH commands in parallel."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Run multiple SSH commands in parallel."	"true"
"Network"	"Net::SSH::Expect"	"https://metacpan.org/pod/Net::SSH::Expect"	"SSH wrapper to execute remote commands."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"SSH wrapper to execute remote commands."	"true"
"Network"	"SSH::Command"	"https://metacpan.org/pod/SSH::Command"	"interface to execute multiple commands on host by SSH protocol without certificates."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"interface to execute multiple commands on host by SSH protocol without certificates."	"true"
"ORM"	"DBIx::Class"	"https://metacpan.org/pod/DBIx::Class"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"ORM"	"Rose::DB"	"https://metacpan.org/pod/Rose::DB"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"ORM"	"Teng"	"https://metacpan.org/pod/Teng"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Package Management"	"App::cpanminus"	"https://metacpan.org/pod/App::cpanminus"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Package Management"	"Carton"	"https://metacpan.org/pod/Carton"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Package Management"	"Pinto"	"https://metacpan.org/pod/Pinto"	"Powerful local CPAN repos"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Pinto - Curate a repository of Perl modules - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Jeffrey Ryan Thalhammer  /  0.11 (THALJEF on 2015-08-12) 0.09999 (THALJEF on 2015-06-14) 0.09998 (THALJEF on 2015-06-10) 0.09997 (THALJEF on 2015-03-24) 0.09996 (THALJEF on 2014-11-04) 0.09995 (THALJEF on 2014-08-20) 0.09993 (THALJEF on 2014-05-03) 0.09992_02 DEV (THALJEF on 2014-04-29) 0.09992_01 DEV (THALJEF on 2014-04-28) 0.09992 (THALJEF on 2014-04-23) 0.09991 (THALJEF on 2014-04-05) 0.0999 (THALJEF on 2014-04-04) 0.0998 (THALJEF on 2014-03-31) 0.0997 (THALJEF on 2014-03-24) 0.0996 (THALJEF on 2014-03-23) 0.0995 (THALJEF on 2014-03-19) 0.0994_04 DEV (THALJEF on 2014-03-18) 0.0994_03 DEV (THALJEF on 2014-03-16) 0.0994_02 DEV (THALJEF on 2014-03-16) 0.0994_01 DEV (THALJEF on 2014-03-05) 0.0994 (THALJEF on 2014-03-02) 0.0993 (THALJEF on 2014-02-23) 0.0992 (THALJEF on 2014-02-10) 0.0991 (THALJEF on 2014-02-01) 0.099 (THALJEF on 2014-01-28) 0.098_01 DEV (THALJEF on 2014-01-28) 0.098 (THALJEF on 2014-01-28) 0.097_04 DEV (THALJEF on 2014-01-25) 0.097_03 DEV (THALJEF on 2014-01-23) 0.097_02 DEV (THALJEF on 2014-01-23) 0.097_01 DEV (THALJEF on 2014-01-17) 0.097 (THALJEF on 2014-01-08) 0.096 (THALJEF on 2014-01-07) 0.095 (THALJEF on 2013-12-23) 0.094 (THALJEF on 2013-12-22) 0.093 (THALJEF on 2013-12-22) 0.092 (THALJEF on 2013-11-20) 0.091 (THALJEF on 2013-10-25) 0.090 (THALJEF on 2013-08-23) 0.089 (THALJEF on 2013-08-19) 0.088 (THALJEF on 2013-08-15) 0.087 (THALJEF on 2013-06-20) 0.087_05 DEV (THALJEF on 2013-07-30) 0.087_04 DEV (THALJEF on 2013-07-27) 0.087_03 DEV (THALJEF on 2013-07-21) 0.087_01 DEV (THALJEF on 2013-07-09) 0.086 (THALJEF on 2013-06-18) 0.085 (THALJEF on 2013-06-17) 0.084_02 DEV (THALJEF on 2013-06-17) 0.084_01 DEV (THALJEF on 2013-06-16) 0.084 (THALJEF on 2013-05-15) 0.083 (THALJEF on 2013-05-13) 0.082 (THALJEF on 2013-04-29) 0.081 (THALJEF on 2013-04-26) 0.080 (THALJEF on 2013-04-26) 0.079_04 DEV (THALJEF on 2013-04-23) 0.079_01 DEV (THALJEF on 2013-04-21) 0.068 (THALJEF on 2013-04-05) 0.067 (THALJEF on 2013-03-30) 0.066 (THALJEF on 2013-03-26) 0.065_06 DEV (THALJEF on 2013-03-23) 0.065_05 DEV (THALJEF on 2013-03-20) 0.065_04 DEV (THALJEF on 2013-03-20) 0.065_03 DEV (THALJEF on 2013-03-19) 0.065_02 DEV (THALJEF on 2013-03-16) 0.065_01 DEV (THALJEF on 2013-03-15) 0.065 (THALJEF on 2012-11-14) 0.064 (THALJEF on 2012-11-12) 0.063 (THALJEF on 2012-11-12) 0.062 (THALJEF on 2012-11-08) 0.061 (THALJEF on 2012-10-31) 0.060 (THALJEF on 2012-10-23) 0.059 (THALJEF on 2012-10-20) 0.058 (THALJEF on 2012-10-12) 0.057 (THALJEF on 2012-10-07) 0.056 (THALJEF on 2012-09-27) 0.055 (THALJEF on 2012-09-20) 0.054 (THALJEF on 2012-09-20) 0.053 (THALJEF on 2012-09-20) 0.052 (THALJEF on 2012-09-18) 0.051 (THALJEF on 2012-08-16) 0.050 (THALJEF on 2012-08-15) 0.048 (THALJEF on 2012-08-15) 0.047 (THALJEF on 2012-08-14) 0.046 (THALJEF on 2012-08-13) 0.045 (THALJEF on 2012-07-24) 0.044 (THALJEF on 2012-07-15) 0.043 (THALJEF on 2012-06-19) 0.042 (THALJEF on 2012-05-18) 0.041 (THALJEF on 2012-05-15) 0.040_003 DEV (THALJEF on 2012-05-05) 0.040_002 DEV (THALJEF on 2012-05-04) 0.040_001 DEV (THALJEF on 2012-05-01) 0.038 (THALJEF on 2012-04-17) 0.037 (THALJEF on 2012-04-11) 0.036 (THALJEF on 2012-04-09) 0.035 (THALJEF on 2012-04-05) 0.033 (THALJEF on 2012-03-15) 0.032 (THALJEF on 2012-03-01) 0.031 (THALJEF on 2012-02-28) 0.030 (THALJEF on 2012-01-27) 0.029 (THALJEF on 2011-12-15) 0.028 (THALJEF on 2011-12-12) 0.027 (THALJEF on 2011-12-08) 0.026 (THALJEF on 2011-12-07) 0.025_004 DEV (THALJEF on 2011-12-07) 0.025_003 DEV (THALJEF on 2011-12-03) 0.025_002 DEV (THALJEF on 2011-12-02) 0.025_001 DEV (THALJEF on 2011-12-02) 0.024 (THALJEF on 2011-09-01) 0.023 (THALJEF on 2011-08-31) 0.022 (THALJEF on 2011-08-31) 0.021 (THALJEF on 2011-08-30) 0.020 (THALJEF on 2011-08-29) 0.019 (THALJEF on 2011-08-24) 0.018 (THALJEF on 2011-08-24) 0.017 (THALJEF on 2011-08-24) 0.016 (THALJEF on 2011-08-18) 0.015 (THALJEF on 2011-08-18) 0.014 (THALJEF on 2011-08-17) 0.012 (THALJEF on 2011-08-17) 0.011 (THALJEF on 2011-08-15) 0.010 (THALJEF on 2011-08-14) 0.009 (THALJEF on 2011-08-13) 0.008 (THALJEF on 2011-08-09) 0.007 (THALJEF on 2011-08-04) 0.006 (THALJEF on 2011-08-04) 0.005 (THALJEF on 2011-08-04) 0.004 (THALJEF on 2011-08-04) 0.003 (THALJEF on 2011-08-04) 0.002 (THALJEF on 2011-07-27) 0.001 (THALJEF on 2011-07-26) Pinto-0.11 51 ++ 51 ++  / Pinto 12 Aug 2015 08:48:47 GMT Module version: 0.11 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues 5 (2 reviews) Testers (101 / 8 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (287.38Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.09999 (THALJEF on 2015-06-14) 0.09998 (THALJEF on 2015-06-10) 0.09997 (THALJEF on 2015-03-24) 0.09996 (THALJEF on 2014-11-04) 0.09995 (THALJEF on 2014-08-20) 0.09993 (THALJEF on 2014-05-03) 0.09992_02 DEV (THALJEF on 2014-04-29) 0.09992_01 DEV (THALJEF on 2014-04-28) 0.09992 (THALJEF on 2014-04-23) 0.09991 (THALJEF on 2014-04-05) 0.0999 (THALJEF on 2014-04-04) 0.0998 (THALJEF on 2014-03-31) 0.0997 (THALJEF on 2014-03-24) 0.0996 (THALJEF on 2014-03-23) 0.0995 (THALJEF on 2014-03-19) 0.0994_04 DEV (THALJEF on 2014-03-18) 0.0994_03 DEV (THALJEF on 2014-03-16) 0.0994_02 DEV (THALJEF on 2014-03-16) 0.0994_01 DEV (THALJEF on 2014-03-05) 0.0994 (THALJEF on 2014-03-02) 0.0993 (THALJEF on 2014-02-23) 0.0992 (THALJEF on 2014-02-10) 0.0991 (THALJEF on 2014-02-01) 0.099 (THALJEF on 2014-01-28) 0.098_01 DEV (THALJEF on 2014-01-28) 0.098 (THALJEF on 2014-01-28) 0.097_04 DEV (THALJEF on 2014-01-25) 0.097_03 DEV (THALJEF on 2014-01-23) 0.097_02 DEV (THALJEF on 2014-01-23) 0.097_01 DEV (THALJEF on 2014-01-17) 0.097 (THALJEF on 2014-01-08) 0.096 (THALJEF on 2014-01-07) 0.095 (THALJEF on 2013-12-23) 0.094 (THALJEF on 2013-12-22) 0.093 (THALJEF on 2013-12-22) 0.092 (THALJEF on 2013-11-20) 0.091 (THALJEF on 2013-10-25) 0.090 (THALJEF on 2013-08-23) 0.089 (THALJEF on 2013-08-19) 0.088 (THALJEF on 2013-08-15) 0.087 (THALJEF on 2013-06-20) 0.087_05 DEV (THALJEF on 2013-07-30) 0.087_04 DEV (THALJEF on 2013-07-27) 0.087_03 DEV (THALJEF on 2013-07-21) 0.087_01 DEV (THALJEF on 2013-07-09) 0.086 (THALJEF on 2013-06-18) 0.085 (THALJEF on 2013-06-17) 0.084_02 DEV (THALJEF on 2013-06-17) 0.084_01 DEV (THALJEF on 2013-06-16) 0.084 (THALJEF on 2013-05-15) 0.083 (THALJEF on 2013-05-13) 0.082 (THALJEF on 2013-04-29) 0.081 (THALJEF on 2013-04-26) 0.080 (THALJEF on 2013-04-26) 0.079_04 DEV (THALJEF on 2013-04-23) 0.079_01 DEV (THALJEF on 2013-04-21) 0.068 (THALJEF on 2013-04-05) 0.067 (THALJEF on 2013-03-30) 0.066 (THALJEF on 2013-03-26) 0.065_06 DEV (THALJEF on 2013-03-23) 0.065_05 DEV (THALJEF on 2013-03-20) 0.065_04 DEV (THALJEF on 2013-03-20) 0.065_03 DEV (THALJEF on 2013-03-19) 0.065_02 DEV (THALJEF on 2013-03-16) 0.065_01 DEV (THALJEF on 2013-03-15) 0.065 (THALJEF on 2012-11-14) 0.064 (THALJEF on 2012-11-12) 0.063 (THALJEF on 2012-11-12) 0.062 (THALJEF on 2012-11-08) 0.061 (THALJEF on 2012-10-31) 0.060 (THALJEF on 2012-10-23) 0.059 (THALJEF on 2012-10-20) 0.058 (THALJEF on 2012-10-12) 0.057 (THALJEF on 2012-10-07) 0.056 (THALJEF on 2012-09-27) 0.055 (THALJEF on 2012-09-20) 0.054 (THALJEF on 2012-09-20) 0.053 (THALJEF on 2012-09-20) 0.052 (THALJEF on 2012-09-18) 0.051 (THALJEF on 2012-08-16) 0.050 (THALJEF on 2012-08-15) 0.048 (THALJEF on 2012-08-15) 0.047 (THALJEF on 2012-08-14) 0.046 (THALJEF on 2012-08-13) 0.045 (THALJEF on 2012-07-24) 0.044 (THALJEF on 2012-07-15) 0.043 (THALJEF on 2012-06-19) 0.042 (THALJEF on 2012-05-18) 0.041 (THALJEF on 2012-05-15) 0.040_003 DEV (THALJEF on 2012-05-05) 0.040_002 DEV (THALJEF on 2012-05-04) 0.040_001 DEV (THALJEF on 2012-05-01) 0.038 (THALJEF on 2012-04-17) 0.037 (THALJEF on 2012-04-11) 0.036 (THALJEF on 2012-04-09) 0.035 (THALJEF on 2012-04-05) 0.033 (THALJEF on 2012-03-15) 0.032 (THALJEF on 2012-03-01) 0.031 (THALJEF on 2012-02-28) 0.030 (THALJEF on 2012-01-27) 0.029 (THALJEF on 2011-12-15) 0.028 (THALJEF on 2011-12-12) 0.027 (THALJEF on 2011-12-08) 0.026 (THALJEF on 2011-12-07) 0.025_004 DEV (THALJEF on 2011-12-07) 0.025_003 DEV (THALJEF on 2011-12-03) 0.025_002 DEV (THALJEF on 2011-12-02) 0.025_001 DEV (THALJEF on 2011-12-02) 0.024 (THALJEF on 2011-09-01) 0.023 (THALJEF on 2011-08-31) 0.022 (THALJEF on 2011-08-31) 0.021 (THALJEF on 2011-08-30) 0.020 (THALJEF on 2011-08-29) 0.019 (THALJEF on 2011-08-24) 0.018 (THALJEF on 2011-08-24) 0.017 (THALJEF on 2011-08-24) 0.016 (THALJEF on 2011-08-18) 0.015 (THALJEF on 2011-08-18) 0.014 (THALJEF on 2011-08-17) 0.012 (THALJEF on 2011-08-17) 0.011 (THALJEF on 2011-08-15) 0.010 (THALJEF on 2011-08-14) 0.009 (THALJEF on 2011-08-13) 0.008 (THALJEF on 2011-08-09) 0.007 (THALJEF on 2011-08-04) 0.006 (THALJEF on 2011-08-04) 0.005 (THALJEF on 2011-08-04) 0.004 (THALJEF on 2011-08-04) 0.003 (THALJEF on 2011-08-04) 0.002 (THALJEF on 2011-07-27) 0.001 (THALJEF on 2011-07-26) Diff with version 0.09999 (THALJEF on 2015-06-14) 0.09998 (THALJEF on 2015-06-10) 0.09997 (THALJEF on 2015-03-24) 0.09996 (THALJEF on 2014-11-04) 0.09995 (THALJEF on 2014-08-20) 0.09993 (THALJEF on 2014-05-03) 0.09992_02 DEV (THALJEF on 2014-04-29) 0.09992_01 DEV (THALJEF on 2014-04-28) 0.09992 (THALJEF on 2014-04-23) 0.09991 (THALJEF on 2014-04-05) 0.0999 (THALJEF on 2014-04-04) 0.0998 (THALJEF on 2014-03-31) 0.0997 (THALJEF on 2014-03-24) 0.0996 (THALJEF on 2014-03-23) 0.0995 (THALJEF on 2014-03-19) 0.0994_04 DEV (THALJEF on 2014-03-18) 0.0994_03 DEV (THALJEF on 2014-03-16) 0.0994_02 DEV (THALJEF on 2014-03-16) 0.0994_01 DEV (THALJEF on 2014-03-05) 0.0994 (THALJEF on 2014-03-02) 0.0993 (THALJEF on 2014-02-23) 0.0992 (THALJEF on 2014-02-10) 0.0991 (THALJEF on 2014-02-01) 0.099 (THALJEF on 2014-01-28) 0.098_01 DEV (THALJEF on 2014-01-28) 0.098 (THALJEF on 2014-01-28) 0.097_04 DEV (THALJEF on 2014-01-25) 0.097_03 DEV (THALJEF on 2014-01-23) 0.097_02 DEV (THALJEF on 2014-01-23) 0.097_01 DEV (THALJEF on 2014-01-17) 0.097 (THALJEF on 2014-01-08) 0.096 (THALJEF on 2014-01-07) 0.095 (THALJEF on 2013-12-23) 0.094 (THALJEF on 2013-12-22) 0.093 (THALJEF on 2013-12-22) 0.092 (THALJEF on 2013-11-20) 0.091 (THALJEF on 2013-10-25) 0.090 (THALJEF on 2013-08-23) 0.089 (THALJEF on 2013-08-19) 0.088 (THALJEF on 2013-08-15) 0.087 (THALJEF on 2013-06-20) 0.087_05 DEV (THALJEF on 2013-07-30) 0.087_04 DEV (THALJEF on 2013-07-27) 0.087_03 DEV (THALJEF on 2013-07-21) 0.087_01 DEV (THALJEF on 2013-07-09) 0.086 (THALJEF on 2013-06-18) 0.085 (THALJEF on 2013-06-17) 0.084_02 DEV (THALJEF on 2013-06-17) 0.084_01 DEV (THALJEF on 2013-06-16) 0.084 (THALJEF on 2013-05-15) 0.083 (THALJEF on 2013-05-13) 0.082 (THALJEF on 2013-04-29) 0.081 (THALJEF on 2013-04-26) 0.080 (THALJEF on 2013-04-26) 0.079_04 DEV (THALJEF on 2013-04-23) 0.079_01 DEV (THALJEF on 2013-04-21) 0.068 (THALJEF on 2013-04-05) 0.067 (THALJEF on 2013-03-30) 0.066 (THALJEF on 2013-03-26) 0.065_06 DEV (THALJEF on 2013-03-23) 0.065_05 DEV (THALJEF on 2013-03-20) 0.065_04 DEV (THALJEF on 2013-03-20) 0.065_03 DEV (THALJEF on 2013-03-19) 0.065_02 DEV (THALJEF on 2013-03-16) 0.065_01 DEV (THALJEF on 2013-03-15) 0.065 (THALJEF on 2012-11-14) 0.064 (THALJEF on 2012-11-12) 0.063 (THALJEF on 2012-11-12) 0.062 (THALJEF on 2012-11-08) 0.061 (THALJEF on 2012-10-31) 0.060 (THALJEF on 2012-10-23) 0.059 (THALJEF on 2012-10-20) 0.058 (THALJEF on 2012-10-12) 0.057 (THALJEF on 2012-10-07) 0.056 (THALJEF on 2012-09-27) 0.055 (THALJEF on 2012-09-20) 0.054 (THALJEF on 2012-09-20) 0.053 (THALJEF on 2012-09-20) 0.052 (THALJEF on 2012-09-18) 0.051 (THALJEF on 2012-08-16) 0.050 (THALJEF on 2012-08-15) 0.048 (THALJEF on 2012-08-15) 0.047 (THALJEF on 2012-08-14) 0.046 (THALJEF on 2012-08-13) 0.045 (THALJEF on 2012-07-24) 0.044 (THALJEF on 2012-07-15) 0.043 (THALJEF on 2012-06-19) 0.042 (THALJEF on 2012-05-18) 0.041 (THALJEF on 2012-05-15) 0.040_003 DEV (THALJEF on 2012-05-05) 0.040_002 DEV (THALJEF on 2012-05-04) 0.040_001 DEV (THALJEF on 2012-05-01) 0.038 (THALJEF on 2012-04-17) 0.037 (THALJEF on 2012-04-11) 0.036 (THALJEF on 2012-04-09) 0.035 (THALJEF on 2012-04-05) 0.033 (THALJEF on 2012-03-15) 0.032 (THALJEF on 2012-03-01) 0.031 (THALJEF on 2012-02-28) 0.030 (THALJEF on 2012-01-27) 0.029 (THALJEF on 2011-12-15) 0.028 (THALJEF on 2011-12-12) 0.027 (THALJEF on 2011-12-08) 0.026 (THALJEF on 2011-12-07) 0.025_004 DEV (THALJEF on 2011-12-07) 0.025_003 DEV (THALJEF on 2011-12-03) 0.025_002 DEV (THALJEF on 2011-12-02) 0.025_001 DEV (THALJEF on 2011-12-02) 0.024 (THALJEF on 2011-09-01) 0.023 (THALJEF on 2011-08-31) 0.022 (THALJEF on 2011-08-31) 0.021 (THALJEF on 2011-08-30) 0.020 (THALJEF on 2011-08-29) 0.019 (THALJEF on 2011-08-24) 0.018 (THALJEF on 2011-08-24) 0.017 (THALJEF on 2011-08-24) 0.016 (THALJEF on 2011-08-18) 0.015 (THALJEF on 2011-08-18) 0.014 (THALJEF on 2011-08-17) 0.012 (THALJEF on 2011-08-17) 0.011 (THALJEF on 2011-08-15) 0.010 (THALJEF on 2011-08-14) 0.009 (THALJEF on 2011-08-13) 0.008 (THALJEF on 2011-08-09) 0.007 (THALJEF on 2011-08-04) 0.006 (THALJEF on 2011-08-04) 0.005 (THALJEF on 2011-08-04) 0.004 (THALJEF on 2011-08-04) 0.003 (THALJEF on 2011-08-04) 0.002 (THALJEF on 2011-07-27) 0.001 (THALJEF on 2011-07-26) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 26 PAUSE users 25 non-PAUSE users. THALJEF Jeffrey Ryan Thalhammer and 20 contributors show them BenRifkah Bergsten-Buret Boris Däppen Chris Kirke Cory G Watson David Steinbrunner Florian Ragwitz Glenn Fowler Jakob Voss Kahlil (Kal) Hodgson Karen Etheridge Michael G. Schwern Nikolay Martynov Oleg Gashev Steffen Schwigon Tommy Stanton Wolfgang Kinkeldei Yanick Champoux brian d foy hesco popl Dependencies App::Cmd App::Cmd::Command::help App::Cmd::Setup Archive::Extract Archive::Tar Authen::Simple::Passwd base Carp Class::Load CPAN::Checksums CPAN::DistnameInfo CPAN::Meta CPAN::Meta::Requirements Cwd Cwd::Guard DateTime DateTime::TimeZone DateTime::TimeZone::Local::Unix DateTime::TimeZone::OffsetOnly DBD::SQLite DBIx::Class DBIx::Class::Core DBIx::Class::ResultSet DBIx::Class::Schema Devel::StackTrace Digest::MD5 Digest::SHA Dist::Metadata Encode Exporter File::Copy File::Find File::HomeDir File::NFSLock File::Spec File::Temp File::Which Getopt::Long HTTP::Date HTTP::Request::Common HTTP::Status IO::File IO::Handle IO::Interactive IO::Pipe IO::Prompt IO::Select IO::String IO::Zlib JSON JSON::PP List::MoreUtils List::Util LWP::UserAgent Module::CoreList Moose Moose::Role MooseX::Aliases MooseX::ClassAttribute MooseX::Configuration MooseX::MarkAsMethods MooseX::NonMoose MooseX::SetOnce MooseX::StrictConstructor MooseX::Types MooseX::Types::Moose overload Path::Class Path::Class::Dir Path::Class::File Plack Plack::Middleware::Auth::Basic Plack::MIME Plack::Request Plack::Response Plack::Runner Pod::Usage Proc::Fork Proc::Terminator Readonly Router::Simple Scalar::Util Starman strict String::Format Term::ANSIColor Term::EditorEdit Throwable::Error Try::Tiny URI URI::Escape URI::file utf8 UUID::Tiny Variable::Magic version warnings CPAN Testers List Reverse dependencies Dependency graph × Pinto-0.11 NAME VERSION SYNOPSIS DESCRIPTION FEATURES Pinto vs PAUSE BUT WHERE IS THE API? SUPPORT Perldoc Websites Internet Relay Chat Bugs / Feature Requests Source Code CONTRIBUTORS AUTHOR COPYRIGHT AND LICENSE NAME Pinto - Curate a repository of Perl modules VERSION version 0.11 SYNOPSIS See pinto to create and manage a Pinto repository. See pintod to allow remote access to your Pinto repository. See Pinto::Manual for more information about the Pinto tools. Stratopan for hosting your Pinto repository in the cloud. DESCRIPTION Pinto is an application for creating and managing a custom CPAN-like repository of Perl modules. The purpose of such a repository is to provide a stable, curated stack of dependencies from which you can reliably build, test, and deploy your application using the standard Perl tool chain. Pinto supports various operations for gathering and managing distribution dependencies within the repository, so that you can control precisely which dependencies go into your application. FEATURES Pinto is inspired by Carton, CPAN::Mini::Inject, and MyCPAN::App::DPAN, but adds a few interesting features: Pinto supports multiple indexes A Pinto repository can have multiple indexes. Each index corresponds to a ""stack"" of dependencies that you can control. So you can have one stack for development, one for production, one for feature-xyz, and so on. You can also branch and merge stacks to experiment with new dependencies or upgrades. Pinto helps manage incompatibles between dependencies Sometimes, you discover that a new version of a dependency is incompatible with your application. Pinto allows you to ""pin"" a dependency to a stack, which prevents it from being accidentally upgraded (either directly or via some other dependency). Pinto has built-in version control When things go wrong, you can roll back any of the indexes in your Pinto repository to a prior revision. Also, you can view the complete history of index changes as you add or upgrade dependencies. Pinto can pull archives from multiple remote repositories Pinto can pull dependencies from multiple sources, so you can create private (or public) networks of repositories that enable separate teams or individuals to collaborate and share Perl modules. Pinto supports team development Pinto is suitable for small to medium-sized development teams and supports concurrent users. Pinto also has a web service interface (via pintod), so remote developers can use a centrally hosted repository. Pinto has a robust command line interface. The pinto utility has commands and options to control every aspect of your Pinto repository. They are well documented and behave in the customary UNIX fashion. Pinto can be extended. You can extend Pinto by creating Pinto::Action subclasses to perform new operations on your repository, such as extracting documentation from a distribution, or grepping the source code of several distributions. Pinto vs PAUSE In some ways, Pinto is similar to PAUSE. Both are capable of accepting distributions and constructing a directory structure and index that Perl installers understand. But there are some important differences: Pinto does not promise to index exactly like PAUSE does Over the years, PAUSE has evolved complicated heuristics for dealing with all the different ways that Perl code is written and packaged. Pinto is much less sophisticated, and only aspires to produce an index that is ""good enough"" for most situations. Pinto does not understand author permissions PAUSE has a system of assigning ownership and co-maintenance permission of modules to specific people. Pinto does not have any such permission system. All activity is logged so you can identify the culprit, but Pinto expects you to be accountable for your actions. Pinto does not enforce security PAUSE requires authors to authenticate themselves before they can upload or remove modules. Pinto does not require authentication, so any user with sufficient file permission can potentially change the repository. However pintod does support HTTP authentication, which gives you some control over access to a remote repository. BUT WHERE IS THE API? For now, the Pinto API is private and subject to radical change without notice. Any API documentation you see is purely for my own references. In the meantime, the command line utilities mentioned in the ""SYNOPSIS"" are your public user interface. SUPPORT Perldoc You can find documentation for this module with the perldoc command.   perldoc Pinto Websites The following websites have more information about this module, and may be of help to you. As always, in addition to those websites please use your favorite search engine to discover more resources. MetaCPAN A modern, open-source CPAN search engine, useful to view POD in HTML format. http://metacpan.org/release/Pinto CPAN Ratings The CPAN Ratings is a website that allows community ratings and reviews of Perl modules. http://cpanratings.perl.org/d/Pinto CPANTS The CPANTS is a website that analyzes the Kwalitee ( code metrics ) of a distribution. http://cpants.cpanauthors.org/dist/Pinto CPAN Testers The CPAN Testers is a network of smokers who run automated tests on uploaded CPAN distributions. http://www.cpantesters.org/distro/P/Pinto CPAN Testers Matrix The CPAN Testers Matrix is a website that provides a visual overview of the test results for a distribution on various Perls/platforms. http://matrix.cpantesters.org/?dist=Pinto CPAN Testers Dependencies The CPAN Testers Dependencies is a website that shows a chart of the test results of all dependencies for a distribution. http://deps.cpantesters.org/?module=Pinto Internet Relay Chat You can get live help by using IRC ( Internet Relay Chat ). If you don't know what IRC is, please read this excellent guide: http://en.wikipedia.org/wiki/Internet_Relay_Chat. Please be courteous and patient when talking to us, as we might be busy or sleeping! You can join those networks/channels and get help: irc.perl.org You can connect to the server at 'irc.perl.org' and join this channel: #pinto then talk to this person for help: thaljef. Bugs / Feature Requests https://github.com/thaljef/Pinto/issues Source Code The code is open to the world, and available for you to hack on. Please feel free to browse it and play with it, or whatever. If you want to contribute patches, please send me a diff or prod me to pull from your repository :) https://github.com/thaljef/Pinto   git clone git://github.com/thaljef/Pinto.git CONTRIBUTORS BenRifkah Bergsten-Buret <mail.spammagnet+github@gmail.com> Karen Etheridge <ether@cpan.org> Michael G. Schwern <schwern@pobox.com> Nikolay Martynov <mar.kolya@gmail.com> Oleg Gashev <oleg@gashev.net> Steffen Schwigon <ss5@renormalist.net> Tommy Stanton <tommystanton@gmail.com> Wolfgang Kinkeldei <wolfgang@kinkeldei.de> Yanick Champoux <yanick@babyl.dyndns.org> brian d foy <brian.d.foy@gmail.com> hesco <hesco@campaignfoundations.com> Boris Däppen <bdaeppen.perl@gmail.com> popl <popl_likes_to_code@yahoo.com> Chris Kirke <chris.kirke@gmail.com> Cory G Watson <gphat@onemogin.com> David Steinbrunner <dsteinbrunner@pobox.com> Florian Ragwitz <rafl@debian.org> Glenn Fowler <cebjyre@cpan.org> Jakob Voss <jakob@nichtich.de> Jeffrey Ryan Thalhammer <jeff@thaljef.org> Kahlil (Kal) Hodgson <kahlil.hodgson@dealmax.com.au> AUTHOR Jeffrey Ryan Thalhammer <jeff@stratopan.com> COPYRIGHT AND LICENSE This software is copyright (c) 2015 by Jeffrey Ryan Thalhammer. This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself. × Module Install Instructions To install Pinto, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Pinto CPAN shell                      perl -MCPAN -e shell                     install Pinto For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Powerful local CPAN repos"	"true"
"Processes and Threads"	"Parallel::ForkManager"	"https://metacpan.org/pod/Parallel::ForkManager"	"A simple parallel processing fork manager"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Parallel::ForkManager - A simple parallel processing fork manager - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Yanick Champoux  /  1.19 (YANICK on 2016-06-28) 1.18 (YANICK on 2016-03-29) 1.17 (YANICK on 2015-11-28) 1.16 (YANICK on 2015-10-08) 1.15 (YANICK on 2015-07-08) 1.14 (YANICK on 2015-05-17) 1.13 (YANICK on 2015-05-11) 1.12 (YANICK on 2015-02-23) 1.11 (YANICK on 2015-01-30) 1.10_2 DEV (YANICK on 2015-01-26) 1.10_1 DEV (YANICK on 2015-01-22) 1.10 (YANICK on 2015-01-15) 1.09 (YANICK on 2015-01-08) 1.08 (YANICK on 2015-01-07) 0.7.9 (DLUX on 2010-11-01) 0.7.7 (DLUX on 2010-09-27) 0.7.6 (DLUX on 2010-08-15) 0.7.5 (DLUX on 2002-12-25) 1.07 (SZABGAB on 2014-11-10) 1.06 (SZABGAB on 2013-12-24) 1.05 (SZABGAB on 2013-09-18) 1.04 (SZABGAB on 2013-09-03) 1.03 (SZABGAB on 2013-03-06) 1.02 (SZABGAB on 2012-12-24) 1.01 (SZABGAB on 2012-12-23) v1.0.0 (SZABGAB on 2012-12-23) 0.7.8 (DLUX on 2010-10-25) 0.7.4 (DLUX on 2002-07-04) 0.7.3 (DLUX on 2001-10-24) 0.7.2 (DLUX on 2001-05-14) 0.7 (DLUX on 2001-04-04) 0.6 (DLUX on 2000-11-30) 0.5 (DLUX on 2000-10-19) Parallel-ForkManager-1.19 55 ++ 55 ++  / Parallel::ForkManager 28 Jun 2016 23:04:26 GMT Module version: 1.19 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues (2) 5 (12 reviews) Testers Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (23.81Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.18 (YANICK on 2016-03-29) 1.17 (YANICK on 2015-11-28) 1.16 (YANICK on 2015-10-08) 1.15 (YANICK on 2015-07-08) 1.14 (YANICK on 2015-05-17) 1.13 (YANICK on 2015-05-11) 1.12 (YANICK on 2015-02-23) 1.11 (YANICK on 2015-01-30) 1.10_2 DEV (YANICK on 2015-01-26) 1.10_1 DEV (YANICK on 2015-01-22) 1.10 (YANICK on 2015-01-15) 1.09 (YANICK on 2015-01-08) 1.08 (YANICK on 2015-01-07) 0.7.9 (DLUX on 2010-11-01) 0.7.7 (DLUX on 2010-09-27) 0.7.6 (DLUX on 2010-08-15) 0.7.5 (DLUX on 2002-12-25) 1.07 (SZABGAB on 2014-11-10) 1.06 (SZABGAB on 2013-12-24) 1.05 (SZABGAB on 2013-09-18) 1.04 (SZABGAB on 2013-09-03) 1.03 (SZABGAB on 2013-03-06) 1.02 (SZABGAB on 2012-12-24) 1.01 (SZABGAB on 2012-12-23) v1.0.0 (SZABGAB on 2012-12-23) 0.7.8 (DLUX on 2010-10-25) 0.7.4 (DLUX on 2002-07-04) 0.7.3 (DLUX on 2001-10-24) 0.7.2 (DLUX on 2001-05-14) 0.7 (DLUX on 2001-04-04) 0.6 (DLUX on 2000-11-30) 0.5 (DLUX on 2000-10-19) Diff with version 1.18 (YANICK on 2016-03-29) 1.17 (YANICK on 2015-11-28) 1.16 (YANICK on 2015-10-08) 1.15 (YANICK on 2015-07-08) 1.14 (YANICK on 2015-05-17) 1.13 (YANICK on 2015-05-11) 1.12 (YANICK on 2015-02-23) 1.11 (YANICK on 2015-01-30) 1.10_2 DEV (YANICK on 2015-01-26) 1.10_1 DEV (YANICK on 2015-01-22) 1.10 (YANICK on 2015-01-15) 1.09 (YANICK on 2015-01-08) 1.08 (YANICK on 2015-01-07) 0.7.9 (DLUX on 2010-11-01) 0.7.7 (DLUX on 2010-09-27) 0.7.6 (DLUX on 2010-08-15) 0.7.5 (DLUX on 2002-12-25) 1.07 (SZABGAB on 2014-11-10) 1.06 (SZABGAB on 2013-12-24) 1.05 (SZABGAB on 2013-09-18) 1.04 (SZABGAB on 2013-09-03) 1.03 (SZABGAB on 2013-03-06) 1.02 (SZABGAB on 2012-12-24) 1.01 (SZABGAB on 2012-12-23) v1.0.0 (SZABGAB on 2012-12-23) 0.7.8 (DLUX on 2010-10-25) 0.7.4 (DLUX on 2002-07-04) 0.7.3 (DLUX on 2001-10-24) 0.7.2 (DLUX on 2001-05-14) 0.7 (DLUX on 2001-04-04) 0.6 (DLUX on 2000-11-30) 0.5 (DLUX on 2000-10-19) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 35 PAUSE users 20 non-PAUSE users. YANICK Yanick Champoux and 4 contributors show them dLux (Szabó, Balázs) Gabor Szabo Ninebit Shlomi Fish Dependencies Carp File::Path File::Spec File::Temp POSIX Storable strict CPAN Testers List Reverse dependencies Dependency graph × Parallel-ForkManager-1.19 NAME VERSION SYNOPSIS DESCRIPTION METHODS CALLBACKS BLOCKING CALLS RETRIEVING DATASTRUCTURES from child processes EXAMPLES Parallel get Callbacks Data structure retrieval SECURITY TROUBLESHOOTING PerlIO::gzip and Parallel::ForkManager do not play nice together BUGS AND LIMITATIONS CREDITS AUTHORS COPYRIGHT AND LICENSE NAME Parallel::ForkManager - A simple parallel processing fork manager VERSION version 1.19 SYNOPSIS   use Parallel::ForkManager;    my $pm = Parallel::ForkManager->new($MAX_PROCESSES);    DATA_LOOP:   foreach my $data (@all_data) {     # Forks and returns the pid for the child:     my $pid = $pm->start and next DATA_LOOP;      ... do some work with $data in the child process ...      $pm->finish; # Terminates the child process   } DESCRIPTION This module is intended for use in operations that can be done in parallel where the number of processes to be forked off should be limited. Typical use is a downloader which will be retrieving hundreds/thousands of files. The code for a downloader would look something like this:   use LWP::Simple;   use Parallel::ForkManager;    ...    my @links=(     [""http://www.foo.bar/rulez.data"",""rulez_data.txt""],     [""http://new.host/more_data.doc"",""more_data.doc""],     ...   );    ...    # Max 30 processes for parallel download   my $pm = Parallel::ForkManager->new(30);    LINKS:   foreach my $linkarray (@links) {     $pm->start and next LINKS; # do the fork      my ($link, $fn) = @$linkarray;     warn ""Cannot get $fn from $link""       if getstore($link, $fn) != RC_OK;      $pm->finish; # do the exit in the child process   }   $pm->wait_all_children; First you need to instantiate the ForkManager with the ""new"" constructor. You must specify the maximum number of processes to be created. If you specify 0, then NO fork will be done; this is good for debugging purposes. Next, use $pm->start to do the fork. $pm returns 0 for the child process, and child pid for the parent process (see also ""fork()"" in perlfunc(1p)). The ""and next"" skips the internal loop in the parent process. NOTE: $pm->start dies if the fork fails. $pm->finish terminates the child process (assuming a fork was done in the ""start""). NOTE: You cannot use $pm->start if you are already in the child process. If you want to manage another set of subprocesses in the child process, you must instantiate another Parallel::ForkManager object! METHODS The comment letter indicates where the method should be run. P for parent, C for child. new $processes Instantiate a new Parallel::ForkManager object. You must specify the maximum number of children to fork off. If you specify 0 (zero), then no children will be forked. This is intended for debugging purposes. The optional second parameter, $tempdir, is only used if you want the children to send back a reference to some data (see RETRIEVING DATASTRUCTURES below). If not provided, it is set via a call to File::Temp::tempdir(). The new method will die if the temporary directory does not exist or it is not a directory. start [ $process_identifier ] This method does the fork. It returns the pid of the child process for the parent, and 0 for the child process. If the $processes parameter for the constructor is 0 then, assuming you're in the child process, $pm->start simply returns 0. An optional $process_identifier can be provided to this method... It is used by the ""run_on_finish"" callback (see CALLBACKS) for identifying the finished process. start_child [ $process_identifier, ] \&callback Like start, but will run the &callback as the child. If the callback returns anything, it'll be passed as the data to transmit back to the parent process via finish(). finish [ $exit_code [, $data_structure_reference] ] Closes the child process by exiting and accepts an optional exit code (default exit code is 0) which can be retrieved in the parent via callback. If the second optional parameter is provided, the child attempts to send its contents back to the parent. If you use the program in debug mode ($processes == 0), this method just calls the callback. If the $data_structure_reference is provided, then it is serialized and passed to the parent process. See RETRIEVING DATASTRUCTURES for more info. set_max_procs $processes Allows you to set a new maximum number of children to maintain. wait_all_children You can call this method to wait for all the processes which have been forked. This is a blocking wait. reap_finished_children This is a non-blocking call to reap children and execute callbacks independent of calls to ""start"" or ""wait_all_children"". Use this in scenarios where ""start"" is called infrequently but you would like the callbacks executed quickly. is_parent Returns true if within the parent or false if within the child. is_child Returns true if within the child or false if within the parent. max_procs Returns the maximal number of processes the object will fork. running_procs Returns the pids of the forked processes currently monitored by the Parallel::ForkManager. Note that children are still reported as running until the fork manager harvest them, via the next call to start or wait_all_children.     my @pids = $pm->running_procs;      my $nbr_children =- $pm->running_procs; wait_for_available_procs( $n ) Wait until $n available process slots are available. If $n is not given, defaults to 1. waitpid_blocking_sleep Returns the sleep period, in seconds, of the pseudo-blocking calls. The sleep period can be a fraction of second. Returns 0 if disabled. Defaults to 1 second. See BLOCKING CALLS for more details. set_waitpid_blocking_sleep $seconds Sets the the sleep period, in seconds, of the pseudo-blocking calls. Set to 0 to disable. See BLOCKING CALLS for more details. CALLBACKS You can define callbacks in the code, which are called on events like starting a process or upon finish. Declare these before the first call to start(). The callbacks can be defined with the following methods: run_on_finish $code [, $pid ] You can define a subroutine which is called when a child is terminated. It is called in the parent process. The parameters of the $code are the following:   - pid of the process, which is terminated   - exit code of the program   - identification of the process (if provided in the ""start"" method)   - exit signal (0-127: signal name)   - core dump (1 if there was core dump at exit)   - datastructure reference or undef (see RETRIEVING DATASTRUCTURES) run_on_start $code You can define a subroutine which is called when a child is started. It called after the successful startup of a child in the parent process. The parameters of the $code are the following:   - pid of the process which has been started   - identification of the process (if provided in the ""start"" method) run_on_wait $code, [$period] You can define a subroutine which is called when the child process needs to wait for the startup. If $period is not defined, then one call is done per child. If $period is defined, then $code is called periodically and the module waits for $period seconds between the two calls. Note, $period can be fractional number also. The exact ""$period seconds"" is not guaranteed, signals can shorten and the process scheduler can make it longer (on busy systems). The $code called in the ""start"" and the ""wait_all_children"" method also. No parameters are passed to the $code on the call. BLOCKING CALLS When it comes to waiting for child processes to terminate, Parallel::ForkManager is between a fork and a hard place (if you excuse the terrible pun). The underlying Perl waitpid function that the module relies on can block until either one specific or any child process terminate, but not for a process part of a given group. This means that the module can do one of two things when it waits for one of its child processes to terminate: Only wait for its own child processes This is done via a loop using a waitpid non-blocking call and a sleep statement. The code does something along the lines of     while(1) {         if ( any of the P::FM child process terminated ) {             return its pid         }          sleep $sleep_period     } This is the default behavior that the module will use. This is not the most efficient way to wait for child processes, but it's the safest way to ensure that Parallel::ForkManager won't interfere with any other part of the codebase. The sleep period is set via the method set_waitpid_blocking_sleep. Block until any process terminate Alternatively, Parallel::ForkManager can call waitpid such that it will block until any child process terminate. If the child process was not one of the monitored subprocesses, the wait will resume. This is more efficient, but mean that P::FM can captures (and discards) the termination notification that a different part of the code might be waiting for. If this is a race condition that doesn't apply to your codebase, you can set the waitpid_blocking_sleep period to 0, which will enable waitpid call blocking.     my $pm = Parallel::ForkManager->new( 4 );      $pm->set_waitpid_blocking_sleep(0);  # true blocking calls enabled      for ( 1..100 ) {         $pm->start and next;          ...; # do work          $pm->finish;     } RETRIEVING DATASTRUCTURES from child processes The ability for the parent to retrieve data structures is new as of version 0.7.6. Each child process may optionally send 1 data structure back to the parent. By data structure, we mean a reference to a string, hash or array. The contents of the data structure are written out to temporary files on disc using the Storable modules' store() method. The reference is then retrieved from within the code you send to the run_on_finish callback. The data structure can be any scalar perl data structure which makes sense: string, numeric value or a reference to an array, hash or object. There are 2 steps involved in retrieving data structures: 1) A reference to the data structure the child wishes to send back to the parent is provided as the second argument to the finish() call. It is up to the child to decide whether or not to send anything back to the parent. 2) The data structure reference is retrieved using the callback provided in the run_on_finish() method. Keep in mind that data structure retrieval is not the same as returning a data structure from a method call. That is not what actually occurs. The data structure referenced in a given child process is serialized and written out to a file by Storable. The file is subsequently read back into memory and a new data structure belonging to the parent process is created. Please consider the performance penalty it can imply, so try to keep the returned structure small. EXAMPLES Parallel get This small example can be used to get URLs in parallel.   use Parallel::ForkManager;   use LWP::Simple;    my $pm = Parallel::ForkManager->new(10);    LINKS:   for my $link (@ARGV) {     $pm->start and next LINKS;     my ($fn) = $link =~ /^.*\/(.*?)$/;     if (!$fn) {       warn ""Cannot determine filename from $fn\n"";     } else {       $0 .= "" "" . $fn;       print ""Getting $fn from $link\n"";       my $rc = getstore($link, $fn);       print ""$link downloaded. response code: $rc\n"";     };     $pm->finish;   }; Callbacks Example of a program using callbacks to get child exit codes:   use strict;   use Parallel::ForkManager;    my $max_procs = 5;   my @names = qw( Fred Jim Lily Steve Jessica Bob Dave Christine Rico Sara );   # hash to resolve PID's back to child specific information    my $pm = Parallel::ForkManager->new($max_procs);    # Setup a callback for when a child finishes up so we can   # get it's exit code   $pm->run_on_finish( sub {       my ($pid, $exit_code, $ident) = @_;       print ""** $ident just got out of the pool "".         ""with PID $pid and exit code: $exit_code\n"";   });    $pm->run_on_start( sub {       my ($pid, $ident)=@_;       print ""** $ident started, pid: $pid\n"";   });    $pm->run_on_wait( sub {       print ""** Have to wait for one children ...\n""     },     0.5   );    NAMES:   foreach my $child ( 0 .. $#names ) {     my $pid = $pm->start($names[$child]) and next NAMES;      # This code is the child process     print ""This is $names[$child], Child number $child\n"";     sleep ( 2 * $child );     print ""$names[$child], Child $child is about to get out...\n"";     sleep 1;     $pm->finish($child); # pass an exit code to finish   }    print ""Waiting for Children...\n"";   $pm->wait_all_children;   print ""Everybody is out of the pool!\n""; Data structure retrieval In this simple example, each child sends back a string reference.   use Parallel::ForkManager 0.7.6;   use strict;    my $pm = Parallel::ForkManager->new(2, '/server/path/to/temp/dir/');    # data structure retrieval and handling   $pm -> run_on_finish ( # called BEFORE the first call to start()     sub {       my ($pid, $exit_code, $ident, $exit_signal, $core_dump, $data_structure_reference) = @_;        # retrieve data structure from child       if (defined($data_structure_reference)) {  # children are not forced to send anything         my $string = ${$data_structure_reference};  # child passed a string reference         print ""$string\n"";       }       else {  # problems occurring during storage or retrieval will throw a warning         print qq|No message received from child process $pid!\n|;       }     }   );    # prep random statement components   my @foods = ('chocolate', 'ice cream', 'peanut butter', 'pickles', 'pizza', 'bacon', 'pancakes', 'spaghetti', 'cookies');   my @preferences = ('loves', q|can't stand|, 'always wants more', 'will walk 100 miles for', 'only eats', 'would starve rather than eat');    # run the parallel processes   PERSONS:   foreach my $person (qw(Fred Wilma Ernie Bert Lucy Ethel Curly Moe Larry)) {     $pm->start() and next PERSONS;      # generate a random statement about food preferences     my $statement = $person . ' ' . $preferences[int(rand @preferences)] . ' ' . $foods[int(rand @foods)];      # send it back to the parent process     $pm->finish(0, \$statement);  # note that it's a scalar REFERENCE, not the scalar itself   }   $pm->wait_all_children; A second datastructure retrieval example demonstrates how children decide whether or not to send anything back, what to send and how the parent should process whatever is retrieved.   use Parallel::ForkManager 0.7.6;   use Data::Dumper;  # to display the data structures retrieved.   use strict;    my $pm = Parallel::ForkManager->new(20);  # using the system temp dir $L<File::Temp::tempdir()    # data structure retrieval and handling   my %retrieved_responses = ();  # for collecting responses   $pm -> run_on_finish (     sub {       my ($pid, $exit_code, $ident, $exit_signal, $core_dump, $data_structure_reference) = @_;        # see what the child sent us, if anything       if (defined($data_structure_reference)) {  # test rather than assume child sent anything         my $reftype = ref($data_structure_reference);         print qq|ident ""$ident"" returned a ""$reftype"" reference.\n\n|;         if (1) {  # simple on/off switch to display the contents           print &Dumper($data_structure_reference) . qq|end of ""$ident"" sent structure\n\n|;         }          # we can also collect retrieved data structures for processing after all children have exited         $retrieved_responses{$ident} = $data_structure_reference;       } else {         print qq|ident ""$ident"" did not send anything.\n\n|;       }     }   );    # generate a list of instructions   my @instructions = (  # a unique identifier and what the child process should send     {'name' => '%ENV keys as a string', 'send' => 'keys'},     {'name' => 'Send Nothing'},  # not instructing the child to send anything back to the parent     {'name' => 'Childs %ENV', 'send' => 'all'},     {'name' => 'Child chooses randomly', 'send' => 'random'},     {'name' => 'Invalid send instructions', 'send' => 'Na Na Nana Na'},     {'name' => 'ENV values in an array', 'send' => 'values'},   );    INSTRUCTS:   foreach my $instruction (@instructions) {     $pm->start($instruction->{'name'}) and next INSTRUCTS;  # this time we are using an explicit, unique child process identifier      # last step in child processing     $pm->finish(0) unless $instruction->{'send'};  # no data structure is sent unless this child is told what to send.      if ($instruction->{'send'} eq 'keys') {       $pm->finish(0, \join(', ', keys %ENV));      } elsif ($instruction->{'send'} eq 'values') {       $pm->finish(0, [values %ENV]);  # kinda useless without knowing which keys they belong to...      } elsif ($instruction->{'send'} eq 'all') {       $pm->finish(0, \%ENV);  # remember, we are not ""returning"" anything, just copying the hash to disc      # demonstrate clearly that the child determines what type of reference to send     } elsif ($instruction->{'send'} eq 'random') {       my $string = q|I'm just a string.|;       my @array = qw(I am an array);       my %hash = (type => 'associative array', synonym => 'hash', cool => 'very :)');       my $return_choice = ('string', 'array', 'hash')[int(rand 3)];  # randomly choose return data type       $pm->finish(0, \$string) if ($return_choice eq 'string');       $pm->finish(0, \@array) if ($return_choice eq 'array');       $pm->finish(0, \%hash) if ($return_choice eq 'hash');      # as a responsible child, inform parent that their instruction was invalid     } else {       $pm->finish(0, \qq|Invalid instructions: ""$instruction->{'send'}"".|);  # ordinarily I wouldn't include invalid input in a response...     }   }   $pm->wait_all_children;  # blocks until all forked processes have exited    # post fork processing of returned data structures   for (sort keys %retrieved_responses) {     print qq|Post processing ""$_""...\n|;   } SECURITY Parallel::ForkManager uses temporary files when a child process returns information to its parent process. The filenames are based on the process of the parent and child processes, so they are fairly easy to guess. So if security is a concern in your environment, make sure the directory used by Parallel::ForkManager is restricted to the current user only (the default behavior is to create a directory, via File::Temp's tempdir, which does that). TROUBLESHOOTING PerlIO::gzip and Parallel::ForkManager do not play nice together If you are using PerlIO::gzip in your child processes, you may end up with garbled files. This is not really P::FM's fault, but rather a problem between PerlIO::gzip and fork() (see https://rt.cpan.org/Public/Bug/Display.html?id=114557). Fortunately, it seems there is an easy way to fix the problem by adding the ""unix"" layer? I.e.,     open(IN, '<:unix:gzip', ... BUGS AND LIMITATIONS Do not use Parallel::ForkManager in an environment, where other child processes can affect the run of the main program, so using this module is not recommended in an environment where fork() / wait() is already used. If you want to use more than one copies of the Parallel::ForkManager, then you have to make sure that all children processes are terminated, before you use the second object in the main program. You are free to use a new copy of Parallel::ForkManager in the child processes, although I don't think it makes sense. CREDITS   Michael Gang (bug report)   Noah Robin <sitz@onastick.net> (documentation tweaks)   Chuck Hirstius <chirstius@megapathdsl.net> (callback exit status, example)   Grant Hopwood <hopwoodg@valero.com> (win32 port)   Mark Southern <mark_southern@merck.com> (bugfix)   Ken Clarke <www.perlprogrammer.net>  (datastructure retrieval) AUTHORS dLux (Szabó, Balázs) <dlux@dlux.hu> Yanick Champoux <yanick@cpan.org> Gabor Szabo <gabor@szabgab.com> COPYRIGHT AND LICENSE This software is copyright (c) 2000 by Balázs Szabó. This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself. × Module Install Instructions To install Parallel::ForkManager, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Parallel::ForkManager CPAN shell                      perl -MCPAN -e shell                     install Parallel::ForkManager For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"A simple parallel processing fork manager"	"true"
"Processes and Threads"	"Parallel::Prefork"	"https://metacpan.org/pod/Parallel::Prefork"	"A simple prefork server framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Parallel::Prefork - A simple prefork server framework - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Kazuho Oku  /  0.18 (KAZUHO on 2016-02-10) 0.17 (KAZUHO on 2014-07-11) 0.16 (KAZUHO on 2014-07-11) 0.15 (KAZUHO on 2014-04-09) 0.14 (KAZUHO on 2013-05-22) 0.13 (KAZUHO on 2011-10-27) 0.12 (KAZUHO on 2011-10-26) 0.11 (KAZUHO on 2010-12-29) 0.10 (KAZUHO on 2010-12-28) 0.09 (KAZUHO on 2010-12-17) 0.08 (KAZUHO on 2010-03-28) 0.07 (KAZUHO on 2010-01-13) 0.06 (KAZUHO on 2010-01-13) 0.05 (KAZUHO on 2009-09-23) 0.04 (KAZUHO on 2008-09-29) 0.03 (KAZUHO on 2008-04-11) 0.02 (KAZUHO on 2008-04-08) 0.01 (KAZUHO on 2008-04-04) Parallel-Prefork-0.18 16 ++ 16 ++  / Parallel::Prefork 10 Feb 2016 04:28:19 GMT Module version: 0.18 Source (raw) Browse (raw) Changes Issues (3) 5 (2 reviews) Testers (391 / 80 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (27.56Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.17 (KAZUHO on 2014-07-11) 0.16 (KAZUHO on 2014-07-11) 0.15 (KAZUHO on 2014-04-09) 0.14 (KAZUHO on 2013-05-22) 0.13 (KAZUHO on 2011-10-27) 0.12 (KAZUHO on 2011-10-26) 0.11 (KAZUHO on 2010-12-29) 0.10 (KAZUHO on 2010-12-28) 0.09 (KAZUHO on 2010-12-17) 0.08 (KAZUHO on 2010-03-28) 0.07 (KAZUHO on 2010-01-13) 0.06 (KAZUHO on 2010-01-13) 0.05 (KAZUHO on 2009-09-23) 0.04 (KAZUHO on 2008-09-29) 0.03 (KAZUHO on 2008-04-11) 0.02 (KAZUHO on 2008-04-08) 0.01 (KAZUHO on 2008-04-04) Diff with version 0.17 (KAZUHO on 2014-07-11) 0.16 (KAZUHO on 2014-07-11) 0.15 (KAZUHO on 2014-04-09) 0.14 (KAZUHO on 2013-05-22) 0.13 (KAZUHO on 2011-10-27) 0.12 (KAZUHO on 2011-10-26) 0.11 (KAZUHO on 2010-12-29) 0.10 (KAZUHO on 2010-12-28) 0.09 (KAZUHO on 2010-12-17) 0.08 (KAZUHO on 2010-03-28) 0.07 (KAZUHO on 2010-01-13) 0.06 (KAZUHO on 2010-01-13) 0.05 (KAZUHO on 2009-09-23) 0.04 (KAZUHO on 2008-09-29) 0.03 (KAZUHO on 2008-04-11) 0.02 (KAZUHO on 2008-04-08) 0.01 (KAZUHO on 2008-04-04) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 9 PAUSE users 7 non-PAUSE users. KAZUHO Kazuho Oku Dependencies Class::Accessor::Lite List::MoreUtils Proc::Wait3 Scope::Guard Signal::Mask and possibly others CPAN Testers List Reverse dependencies Dependency graph × Parallel-Prefork-0.18 NAME SYNOPSIS DESCRIPTION METHODS new max_workers spawn_interval err_respawn_interval trap_signals on_child_reap before_fork after_fork start finish signal_all_children wait_all_children() wait_all_children($timeout) AUTHOR LICENSE NAME Parallel::Prefork - A simple prefork server framework SYNOPSIS   use Parallel::Prefork;      my $pm = Parallel::Prefork->new({     max_workers  => 10,     trap_signals => {       TERM => 'TERM',       HUP  => 'TERM',       USR1 => undef,     }   });      while ($pm->signal_received ne 'TERM') {     load_config();     $pm->start(sub {         ... do some work within the child process ...     });   }      $pm->wait_all_children(); DESCRIPTION Parallel::Prefork is much like Parallel::ForkManager, but supports graceful shutdown and run-time reconfiguration. METHODS new instantiation. Takes a hashref as an argument. Recognized attributes are as follows. max_workers number of worker processes (default: 10) spawn_interval interval in seconds between spawning child processes unless a child process exits abnormally (default: 0) err_respawn_interval number of seconds to deter spawning of child processes after a worker exits abnormally (default: 1) trap_signals hashref of signals to be trapped. Manager process will trap the signals listed in the keys of the hash, and send the signal specified in the associated value (if any) to all worker processes. If the associated value is a scalar then it is treated as the name of the signal to be sent immediately to all the worker processes. If the value is an arrayref the first value is treated the name of the signal and the second value is treated as the interval (in seconds) between sending the signal to each worker process. on_child_reap coderef that is called when a child is reaped. Receives the instance to the current Parallel::Prefork, the child's pid, and its exit status. before_fork after_fork coderefs that are called in the manager process before and after fork, if being set start The main routine. There are two ways to use the function. If given a subref as an argument, forks child processes and executes that subref within the child processes. The processes will exit with 0 status when the subref returns. The other way is to not give any arguments to the function. The function returns undef in child processes. Caller should execute the application logic and then call finish to terminate the process. The start function returns true within manager process upon receiving a signal specified in the trap_signals hashref. finish Child processes (when executed by a zero-argument call to start) should call this function for termination. Takes exit code as an optional argument. Only usable from child processes. signal_all_children Sends signal to all worker processes. Only usable from manager process. wait_all_children() wait_all_children($timeout) Waits until all worker processes exit or timeout (given as an optional argument in seconds) exceeds. The method returns the number of the worker processes still running. AUTHOR Kazuho Oku LICENSE This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself. See http://www.perl.com/perl/misc/Artistic.html × Module Install Instructions To install Parallel::Prefork, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Parallel::Prefork CPAN shell                      perl -MCPAN -e shell                     install Parallel::Prefork For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"A simple prefork server framework"	"true"
"Processes and Threads"	"Proclet"	"https://metacpan.org/pod/Proclet"	"Minimalistic supervisor, a Perl port of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Proclet - minimalistic Supervisor - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Masahiro Nagano  /  0.35 (KAZEBURO on 2014-07-24) 0.34 (KAZEBURO on 2014-04-10) 0.33 (KAZEBURO on 2014-03-12) 0.32 (KAZEBURO on 2013-12-27) 0.31 (KAZEBURO on 2013-06-20) 0.30 (KAZEBURO on 2013-06-18) 0.25 (KAZEBURO on 2013-02-19) 0.24 (KAZEBURO on 2013-02-18) 0.23 (KAZEBURO on 2013-02-14) 0.22 (KAZEBURO on 2013-02-12) 0.21 (KAZEBURO on 2013-02-01) 0.20 (KAZEBURO on 2013-01-30) 0.19 (KAZEBURO on 2012-12-11) 0.18 (KAZEBURO on 2012-11-16) 0.17 (KAZEBURO on 2012-11-16) 0.16 (KAZEBURO on 2012-11-16) 0.15 (KAZEBURO on 2012-10-16) 0.14 (KAZEBURO on 2012-09-18) 0.13 (KAZEBURO on 2012-09-14) 0.12 (KAZEBURO on 2012-09-12) 0.11 (KAZEBURO on 2012-09-11) 0.10 (KAZEBURO on 2012-08-31) 0.09 (KAZEBURO on 2012-08-31) 0.08 (KAZEBURO on 2012-08-06) 0.07 (KAZEBURO on 2012-07-26) 0.06 (KAZEBURO on 2012-07-23) 0.05 (KAZEBURO on 2012-06-15) 0.04 (KAZEBURO on 2012-06-15) 0.03 (KAZEBURO on 2012-06-14) 0.02 (KAZEBURO on 2012-06-14) 0.01 (KAZEBURO on 2012-06-14) Proclet-0.35 21 ++ 21 ++  / Proclet 24 Jul 2014 05:32:01 GMT Module version: 0.35 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues (1) Testers (327 / 0 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (19.59Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.34 (KAZEBURO on 2014-04-10) 0.33 (KAZEBURO on 2014-03-12) 0.32 (KAZEBURO on 2013-12-27) 0.31 (KAZEBURO on 2013-06-20) 0.30 (KAZEBURO on 2013-06-18) 0.25 (KAZEBURO on 2013-02-19) 0.24 (KAZEBURO on 2013-02-18) 0.23 (KAZEBURO on 2013-02-14) 0.22 (KAZEBURO on 2013-02-12) 0.21 (KAZEBURO on 2013-02-01) 0.20 (KAZEBURO on 2013-01-30) 0.19 (KAZEBURO on 2012-12-11) 0.18 (KAZEBURO on 2012-11-16) 0.17 (KAZEBURO on 2012-11-16) 0.16 (KAZEBURO on 2012-11-16) 0.15 (KAZEBURO on 2012-10-16) 0.14 (KAZEBURO on 2012-09-18) 0.13 (KAZEBURO on 2012-09-14) 0.12 (KAZEBURO on 2012-09-12) 0.11 (KAZEBURO on 2012-09-11) 0.10 (KAZEBURO on 2012-08-31) 0.09 (KAZEBURO on 2012-08-31) 0.08 (KAZEBURO on 2012-08-06) 0.07 (KAZEBURO on 2012-07-26) 0.06 (KAZEBURO on 2012-07-23) 0.05 (KAZEBURO on 2012-06-15) 0.04 (KAZEBURO on 2012-06-15) 0.03 (KAZEBURO on 2012-06-14) 0.02 (KAZEBURO on 2012-06-14) 0.01 (KAZEBURO on 2012-06-14) Diff with version 0.34 (KAZEBURO on 2014-04-10) 0.33 (KAZEBURO on 2014-03-12) 0.32 (KAZEBURO on 2013-12-27) 0.31 (KAZEBURO on 2013-06-20) 0.30 (KAZEBURO on 2013-06-18) 0.25 (KAZEBURO on 2013-02-19) 0.24 (KAZEBURO on 2013-02-18) 0.23 (KAZEBURO on 2013-02-14) 0.22 (KAZEBURO on 2013-02-12) 0.21 (KAZEBURO on 2013-02-01) 0.20 (KAZEBURO on 2013-01-30) 0.19 (KAZEBURO on 2012-12-11) 0.18 (KAZEBURO on 2012-11-16) 0.17 (KAZEBURO on 2012-11-16) 0.16 (KAZEBURO on 2012-11-16) 0.15 (KAZEBURO on 2012-10-16) 0.14 (KAZEBURO on 2012-09-18) 0.13 (KAZEBURO on 2012-09-14) 0.12 (KAZEBURO on 2012-09-12) 0.11 (KAZEBURO on 2012-09-11) 0.10 (KAZEBURO on 2012-08-31) 0.09 (KAZEBURO on 2012-08-31) 0.08 (KAZEBURO on 2012-08-06) 0.07 (KAZEBURO on 2012-07-26) 0.06 (KAZEBURO on 2012-07-23) 0.05 (KAZEBURO on 2012-06-15) 0.04 (KAZEBURO on 2012-06-15) 0.03 (KAZEBURO on 2012-06-14) 0.02 (KAZEBURO on 2012-06-14) 0.01 (KAZEBURO on 2012-06-14) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 13 PAUSE users 8 non-PAUSE users. KAZEBURO Masahiro Nagano and 2 contributors show them Masahiro Nagano <kazeburo {at} gmail.com> soh335 Dependencies Data::Validator File::Which Getopt::Compact::WithCmd Log::Minimal Mouse Parallel::Prefork parent String::ShellQuote Term::ANSIColor Time::Crontab YAML::XS CPAN Testers List Reverse dependencies Dependency graph × Proclet-0.35 NAME SYNOPSIS DESCRIPTION LOG METHOD AUTHOR SEE ALSO LICENSE NAME Proclet - minimalistic Supervisor SYNOPSIS   use Proclet;    my $proclet = Proclet->new(       color => 1   );    # add service   $proclet->service(       code => sub {           my $job = $jobqueue->grab;           work($job);       },       worker => 2,       tag => 'worker'   );    $proclet->service(       code => sub {           my $loader = Plack::Loader->load(               'Starlet',               port => $port,               host => $host || 0,               max_workers => 4,           );           $loader->run($app);       },       tag => 'web'   );    $proclet->service(       code => sub {           exec('/usr/bin/memcached','-p','11211');       },   );    $proclet->service(       code => sub {           scheduled_work();       },       tag => 'cron',       every => '0 12 * * *', #everyday at 12:00am   );     $proclet->run; DESCRIPTION Proclet is minimalistic Supervisor, fork and manage many services from one perl script. LOG Logs from services are Displayed with timestamp and tag.   12:23:16 memcached.1 | <6 server listening (udp)   12:23:16 memcached.1 | <7 send buffer was 9216, now 3728270   12:23:16 memcached.1 | <7 server listening (udp)   12:23:16 web.1       | 2012/08/31-12:23:16 Starman::Server (type Net::Server::PreFork) starting! pid(51516)   12:23:16 web.1       | Resolved [*]:5432 to [0.0.0.0]:5432, IPv4   12:23:16 web.1       | Binding to TCP port 5432 on host 0.0.0.0 with IPv4    12:23:16 web.1       | Setting gid to ""20 20 20 401 204 100 98 81 80 79 61 12 402"" METHOD new Create instance of Proclet. Attributes are as follows: spawn_interval: Int interval in seconds between spawning services unless a service exits abnormally (default: 0) err_respawn_interval: Int number of seconds to deter spawning of services after a service exits abnormally (default: 1) color: Bool colored log (default: 0) logger: CodeRef   my $logger = File::RotateLogs->new(...)   my $proclet = Proclet->new(       logger => sub { $logger->print(@_) }   );   Sets a callback to print stdout/stderr. uses warn by default. enable_log_worker: Bool enable worker for format logs. (default: 1) If disabled this option, cannot use logger opt too. exec_notice: Bool enable start and exec notice message like   16:38:12 worker.1 | Start callback: worker (default: 1) service Add services to Proclet. Attributes are as follows: code: CodeRef|ArrayRef|Str Code reference or commands of services. CodeRef   $proclet->service(     code => sub {         MyWorker->run();     }   ); ArrayRef   $proclet->service(     code => ['plackup','-a','app.psgi'],   ); Str   $proclet->service(     code => '/usr/bin/memcached'   ); worker: Int Number of children to fork, default is ""1"" tag: Str Keyword for log. optional every: Str Crontab like format. optional If every option exists, Proclet execute the job as cron(8)   $proclet->service(       code => sub {           scheduled_work();       },       tag => 'cron',       every => '0 12 * * *', #everyday at 12:00am   ); run run services. Proclet does start services by defined order AUTHOR Masahiro Nagano <kazeburo {at} gmail.com> SEE ALSO Proc::Launcher::Manager, related module Parallel::Prefork, Proclet used internally LICENSE This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself. × Module Install Instructions To install Proclet, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Proclet CPAN shell                      perl -MCPAN -e shell                     install Proclet For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Minimalistic supervisor, a Perl port of"	"true"
"Processes and Threads"	"foreman"	"https://github.com/ddollar/foreman"	"Minimalistic supervisor, a Perl port of"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"3923"	"81"	"479"	"GitHub - ddollar/foreman: Manage Procfile-based applications Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 81 Star 3,923 Fork 479 ddollar/foreman Code Issues 10 Pull requests 1 Wiki Pulse Graphs Manage Procfile-based applications http://ddollar.github.com/foreman 1,022 commits 2 branches 122 releases 141 contributors Ruby 92.7% HTML 5.1% Shell 2.2% Ruby HTML Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.82.0 v0.81.0 v0.80.2 v0.80.1 v0.80.0 v0.78.0 v0.77.0 v0.76.0 v0.75.0 v0.74.0 v0.73.0 v0.72.0 v0.71.0 v0.70.0 v0.68.0 v0.67.0 v0.66.0 v0.65.0 v0.64.0 v0.63.1 v0.63.0 v0.62.0 v0.61.0 v0.60.2 v0.60.1 v0.60.0 v0.59.0 v0.58.0 v0.57.0 v0.56.0 v0.55.0 v0.54.0 v0.53.0 v0.52.0 v0.51.0 v0.50.0 v0.49.0 v0.48.0 v0.48.0.pre3 v0.48.0.pre2 v0.48.0.pre1 v0.47.0 v0.46.0 v0.45.0 v0.44.0 v0.43.0 v0.42.0 v0.41.0 v0.40.0 v0.39.0 v0.38.0 v0.37.2 v0.37.1 v0.37.0 v0.37.0.pre5 v0.37.0.pre4 v0.37.0.pre3 v0.37.0.pre2 v0.37.0.pre1 v0.36.1 v0.36.0 v0.35.0 v0.34.1 v0.34.0 v0.33.1 v0.33.0 v0.32.0 v0.31.0 v0.30.1 v0.30.0 v0.29.0 v0.28.0.pre2 v0.28.0.pre1 v0.27.0 v0.26.1 v0.26.0 v0.25.0 v0.24.0 v0.23.1 v0.23.0 v0.22.0 v0.21.0 v0.20.0 v0.19.0 v0.18.0 v0.17.0 v0.16.0 v0.15.0 v0.14.0 v0.13.1 v0.13.0 v0.12.0 v0.12.0.pre1 v0.11.1 v0.11.0 v0.10.1 v0.10.0 v0.9.2 v0.9.1 v0.9.0 Nothing to show New pull request Latest commit 5f5502e May 21, 2016 ddollar update docs Permalink Failed to load latest commit information. bin Remove taskman script Jun 10, 2013 data Add stop timeout to systemd services May 12, 2016 dist update docs Apr 23, 2016 lib 0.82.0 May 21, 2016 man update docs May 21, 2016 pkg add package dir Apr 23, 2016 spec Add stop timeout to systemd services May 12, 2016 tasks changelog Apr 26, 2016 .gitignore ignore gems Apr 23, 2016 .travis.yml use the latest bundler Apr 23, 2016 Changelog.md update docs May 21, 2016 Gemfile remove win32console dependency Apr 23, 2016 Gemfile.lock 0.82.0 May 21, 2016 LICENSE Add MIT license text Jan 22, 2013 README.md update docs Apr 23, 2016 Rakefile add bundler setup to rakefile Jan 29, 2012 foreman.gemspec remove win32console dependency Apr 23, 2016 README.md Foreman Manage Procfile-based applications Installation $ gem install foreman  Ruby users should take care not to install foreman in their project's Gemfile. Getting Started http://blog.daviddollar.org/2011/05/06/introducing-foreman.html Supported Ruby versions See .travis.yml for a list of Ruby versions against which Foreman is tested. Documentation man page wiki changelog Ports forego - Go node-foreman - Node.js gaffer - Java/JVM goreman - Go honcho - python proclet - Perl shoreman - shell crank - Crystal houseman - Haskell Authors Created and maintained by David Dollar Patches contributed by Contributor List License Foreman is licensed under the MIT license. See LICENSE for the full license text. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ddollar/foreman"	"Minimalistic supervisor, a Perl port of"	"true"
"Profiling"	"Devel::KYTProf"	"https://metacpan.org/pod/Devel::KYTProf"	"Very light profiler for I/Os such as HTTP request-responses and SQL queries."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Devel::KYTProf - Simple profiler - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Yasuhiro Onishi  /  0.05 (ONISHI on 2013-07-10) 0.04 (ONISHI on 2013-02-20) 0.03 (ONISHI on 2013-02-19) 0.02 (ONISHI on 2012-06-05) 0.01 (ONISHI on 2011-08-17) Devel-KYTProf-0.05 5 ++ 5 ++  / Devel::KYTProf 10 Jul 2013 10:21:53 GMT Module version: 0.05 Source (raw) Browse (raw) Changes Clone repository Issues Testers (555 / 1 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (28.95Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.04 (ONISHI on 2013-02-20) 0.03 (ONISHI on 2013-02-19) 0.02 (ONISHI on 2012-06-05) 0.01 (ONISHI on 2011-08-17) Diff with version 0.04 (ONISHI on 2013-02-20) 0.03 (ONISHI on 2013-02-19) 0.02 (ONISHI on 2012-06-05) 0.01 (ONISHI on 2011-08-17) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 3 PAUSE users 2 non-PAUSE users. ONISHI Yasuhiro Onishi Dependencies Class::Data::Inheritable Term::ANSIColor Time::HiRes UNIVERSAL::require and possibly others CPAN Testers List Reverse dependencies Dependency graph × Devel-KYTProf-0.05 NAME SYNOPSIS DESCRIPTION AUTHOR SEE ALSO LICENSE NAME Devel::KYTProf - Simple profiler SYNOPSIS   use Devel::KYTProf;    # your code ( including DBI, LWP ) DESCRIPTION Devel::KYTProf is a perl code profiler to explore IO blocking time.   use Devel::KYTProf;    # your code ( including DBI, LWP ) Output as follows.   315.837 ms [DBI::st] select * from table where name = ? (1 rows) | main:23   1464.204 ms [LWP::UserAgent] GET http://www.hatena.ne.jp/ | main:25 You can add profiler to any method.   Devel::KYTProf->add_prof($module, $method);   Devel::KYTProf->add_prof($module, $method, $callback);    Devel::KYTProf->add_profs($module, $methods);   Devel::KYTProf->add_profs($module, $methods, $callback);    Devel::KYTProf->add_profs($module, ':all');   Devel::KYTProf->add_profs($module, ':all', $callback); You can change settings.   Devel::KYTProf->namespace_regex();   Devel::KYTProf->ignore_class_regex();   Devel::KYTProf->context_classes_regex();   Devel::KYTProf->logger($logger);   Devel::KYTProf->threshold(100); # ms   Devel::KYTProf->mute($module, $method);   Devel::KYTProf->unmute($module, $method);   Devel::KYTProf->remove_linefeed(1);   Devel::KYTProf->remove_escape_sequences(1); AUTHOR Yasuhiro Onishi <yasuhiro.onishi@gmail.com> SEE ALSO DBI LWP::UserAgent Cache::Memcached::Fast LICENSE This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself. × Module Install Instructions To install Devel::KYTProf, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Devel::KYTProf CPAN shell                      perl -MCPAN -e shell                     install Devel::KYTProf For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Very light profiler for I/Os such as HTTP request-responses and SQL queries."	"true"
"Profiling"	"Devel::NYTProf"	"https://metacpan.org/pod/Devel::NYTProf"	"Code profiler."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Devel::NYTProf - Powerful fast feature-rich Perl source code profiler - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Tim Bunce  /  6.03 (TIMB on 2016-03-25) 1.15 (AKAPLAN on 2008-05-25) 6.02_91 DEV (TIMB on 2016-03-19) 6.02_90 DEV (TIMB on 2016-03-06) 6.02 (TIMB on 2015-08-03) 6.01 (TIMB on 2015-04-04) 5.07 (TIMB on 2015-02-21) 5.06 DEV (TIMB on 2015-02-21) 5.06 DEV (TIMB on 2014-06-23) 5.06 (TIMB on 2013-09-13) 5.05 (TIMB on 2013-07-03) 5.05 DEV (TIMB on 2013-07-02) 5.04 (TIMB on 2013-06-20) 5.03 (TIMB on 2013-05-20) 5.02 (TIMB on 2013-04-22) 5.01 DEV (TIMB on 2013-04-21) 5.01 (TIMB on 2013-04-19) 5.00 (TIMB on 2013-04-08) 5.00 DEV (TIMB on 2013-04-07) 5.00 DEV (TIMB on 2013-04-04) 4.25 (TIMB on 2013-02-08) 4.25 DEV (TIMB on 2013-02-06) 4.24 (TIMB on 2013-02-03) 4.23 (TIMB on 2013-01-02) 4.23 DEV (TIMB on 2012-12-29) 4.12 (TIMB on 2012-12-28) 4.11 (TIMB on 2012-12-26) 4.09 (TIMB on 2012-09-15) 4.08 (TIMB on 2012-08-11) 4.07 (TIMB on 2012-08-10) 4.06 (TIMB on 2010-12-01) 4.06 DEV (TIMB on 2010-11-30) 4.06 DEV (TIMB on 2010-11-19) 4.05 (TIMB on 2010-09-17) 4.05 DEV (TIMB on 2010-09-15) 4.05 DEV (TIMB on 2010-09-15) 4.05 DEV (TIMB on 2010-09-13) 4.05 DEV (TIMB on 2010-09-12) 4.04 (TIMB on 2010-07-09) 4.04 DEV (TIMB on 2010-07-08) 4.03 (TIMB on 2010-06-19) 4.02 (TIMB on 2010-06-17) 4.02 DEV (TIMB on 2010-06-17) 4.01 (TIMB on 2010-06-15) 4.00 (TIMB on 2010-06-09) 4.00 DEV (TIMB on 2010-06-08) 4.00 DEV (TIMB on 2010-06-07) 4.00 DEV (TIMB on 2010-05-30) 3.11 DEV (TIMB on 2010-05-27) 3.11 DEV (TIMB on 2010-05-07) 3.11 DEV (TIMB on 2010-05-06) 3.11 DEV (TIMB on 2010-05-03) 3.11 DEV (TIMB on 2010-04-22) 3.11 (TIMB on 2010-03-16) 3.11 DEV (TIMB on 2010-03-13) 3.11 DEV (TIMB on 2010-03-12) 3.11 DEV (TIMB on 2010-03-11) 3.11 DEV (TIMB on 2010-03-09) 3.02 (TIMB on 2010-03-05) 3.02 DEV (TIMB on 2010-02-27) 3.02 DEV (TIMB on 2010-02-24) 3.02 DEV (TIMB on 2010-02-24) 3.02 DEV (TIMB on 2010-02-23) 3.02 DEV (TIMB on 2010-02-22) 3.02 DEV (TIMB on 2010-02-20) 3.01 (TIMB on 2009-12-28) 3.00 (TIMB on 2009-12-24) 2.11 DEV (TIMB on 2009-12-22) 2.11 DEV (TIMB on 2009-12-11) 2.11 DEV (TIMB on 2009-12-10) 2.11 DEV (TIMB on 2009-12-10) 2.11 DEV (TIMB on 2009-12-09) 2.11 DEV (TIMB on 2009-12-07) 2.11 DEV (TIMB on 2009-12-07) 2.11 DEV (TIMB on 2009-12-06) 2.11 DEV (TIMB on 2009-11-21) 2.11 DEV (TIMB on 2009-11-16) 2.11 DEV (TIMB on 2009-11-15) 2.11 DEV (TIMB on 2009-10-29) 2.11 DEV (TIMB on 2009-10-28) 2.11 DEV (TIMB on 2009-10-28) 2.11 DEV (TIMB on 2009-10-26) 2.11 DEV (TIMB on 2009-10-25) 2.11 DEV (TIMB on 2009-10-24) 2.11 DEV (TIMB on 2009-10-23) 2.11 DEV (TIMB on 2009-10-23) 2.11 DEV (TIMB on 2009-10-23) 2.10 (TIMB on 2009-06-23) 2.10 DEV (TIMB on 2009-06-18) 2.09 (TIMB on 2009-03-29) 2.09 DEV (TIMB on 2009-03-26) 2.09 DEV (TIMB on 2009-03-24) 2.08 DEV (TIMB on 2009-03-10) 2.08 (TIMB on 2009-02-15) 2.07 DEV (TIMB on 2009-02-13) 2.07 DEV (TIMB on 2009-02-03) 2.07 DEV (TIMB on 2009-01-21) 2.07 DEV (TIMB on 2009-01-20) 2.07 DEV (TIMB on 2009-01-19) 2.07 DEV (TIMB on 2009-01-05) 2.07 DEV (TIMB on 2009-01-03) 2.07 (TIMB on 2008-11-01) 2.06 (TIMB on 2008-10-31) 2.05 (TIMB on 2008-10-08) 2.04 (TIMB on 2008-10-03) 2.04 (TIMB on 2008-10-01) 2.03 (TIMB on 2008-08-15) 2.03 DEV (TIMB on 2008-08-15) 2.02 (TIMB on 2008-07-24) 2.01 (TIMB on 2008-07-15) 2.00 (TIMB on 2008-07-15) 1.90 DEV (TIMB on 2008-07-13) 1.90 DEV (TIMB on 2008-07-12) 1.90 DEV (TIMB on 2008-07-11) 1.90 DEV (TIMB on 2008-07-10) 1.90 DEV (TIMB on 2008-07-10) 1.90 DEV (TIMB on 2008-07-09) 1.14 (AKAPLAN on 2008-05-23) 1.13 (AKAPLAN on 2008-05-23) 1.12 (AKAPLAN on 2008-03-25) 1.11 (AKAPLAN on 2008-03-24) 1.10 (AKAPLAN on 2008-03-20) 0.09 (AKAPLAN on 2008-03-19) 0.08 (AKAPLAN on 2008-03-10) 0.06 (AKAPLAN on 2008-03-10) 0.06 (AKAPLAN on 2008-03-10) 0.05 (AKAPLAN on 2008-03-07) 0.04 (AKAPLAN on 2008-03-07) 0.03 (AKAPLAN on 2008-03-06) 0.01 (AKAPLAN on 2008-03-05) 0.01 (AKAPLAN on 2008-03-04) Devel-NYTProf-6.03 132 ++ 132 ++  / Devel::NYTProf 25 Mar 2016 19:21:34 GMT Module version: 6.03 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues (40) 5 (18 reviews) Testers (395 / 5 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (427.4Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.15 (AKAPLAN on 2008-05-25) 6.02_91 DEV (TIMB on 2016-03-19) 6.02_90 DEV (TIMB on 2016-03-06) 6.02 (TIMB on 2015-08-03) 6.01 (TIMB on 2015-04-04) 5.07 (TIMB on 2015-02-21) 5.06 DEV (TIMB on 2015-02-21) 5.06 DEV (TIMB on 2014-06-23) 5.06 (TIMB on 2013-09-13) 5.05 (TIMB on 2013-07-03) 5.05 DEV (TIMB on 2013-07-02) 5.04 (TIMB on 2013-06-20) 5.03 (TIMB on 2013-05-20) 5.02 (TIMB on 2013-04-22) 5.01 DEV (TIMB on 2013-04-21) 5.01 (TIMB on 2013-04-19) 5.00 (TIMB on 2013-04-08) 5.00 DEV (TIMB on 2013-04-07) 5.00 DEV (TIMB on 2013-04-04) 4.25 (TIMB on 2013-02-08) 4.25 DEV (TIMB on 2013-02-06) 4.24 (TIMB on 2013-02-03) 4.23 (TIMB on 2013-01-02) 4.23 DEV (TIMB on 2012-12-29) 4.12 (TIMB on 2012-12-28) 4.11 (TIMB on 2012-12-26) 4.09 (TIMB on 2012-09-15) 4.08 (TIMB on 2012-08-11) 4.07 (TIMB on 2012-08-10) 4.06 (TIMB on 2010-12-01) 4.06 DEV (TIMB on 2010-11-30) 4.06 DEV (TIMB on 2010-11-19) 4.05 (TIMB on 2010-09-17) 4.05 DEV (TIMB on 2010-09-15) 4.05 DEV (TIMB on 2010-09-15) 4.05 DEV (TIMB on 2010-09-13) 4.05 DEV (TIMB on 2010-09-12) 4.04 (TIMB on 2010-07-09) 4.04 DEV (TIMB on 2010-07-08) 4.03 (TIMB on 2010-06-19) 4.02 (TIMB on 2010-06-17) 4.02 DEV (TIMB on 2010-06-17) 4.01 (TIMB on 2010-06-15) 4.00 (TIMB on 2010-06-09) 4.00 DEV (TIMB on 2010-06-08) 4.00 DEV (TIMB on 2010-06-07) 4.00 DEV (TIMB on 2010-05-30) 3.11 DEV (TIMB on 2010-05-27) 3.11 DEV (TIMB on 2010-05-07) 3.11 DEV (TIMB on 2010-05-06) 3.11 DEV (TIMB on 2010-05-03) 3.11 DEV (TIMB on 2010-04-22) 3.11 (TIMB on 2010-03-16) 3.11 DEV (TIMB on 2010-03-13) 3.11 DEV (TIMB on 2010-03-12) 3.11 DEV (TIMB on 2010-03-11) 3.11 DEV (TIMB on 2010-03-09) 3.02 (TIMB on 2010-03-05) 3.02 DEV (TIMB on 2010-02-27) 3.02 DEV (TIMB on 2010-02-24) 3.02 DEV (TIMB on 2010-02-24) 3.02 DEV (TIMB on 2010-02-23) 3.02 DEV (TIMB on 2010-02-22) 3.02 DEV (TIMB on 2010-02-20) 3.01 (TIMB on 2009-12-28) 3.00 (TIMB on 2009-12-24) 2.11 DEV (TIMB on 2009-12-22) 2.11 DEV (TIMB on 2009-12-11) 2.11 DEV (TIMB on 2009-12-10) 2.11 DEV (TIMB on 2009-12-10) 2.11 DEV (TIMB on 2009-12-09) 2.11 DEV (TIMB on 2009-12-07) 2.11 DEV (TIMB on 2009-12-07) 2.11 DEV (TIMB on 2009-12-06) 2.11 DEV (TIMB on 2009-11-21) 2.11 DEV (TIMB on 2009-11-16) 2.11 DEV (TIMB on 2009-11-15) 2.11 DEV (TIMB on 2009-10-29) 2.11 DEV (TIMB on 2009-10-28) 2.11 DEV (TIMB on 2009-10-28) 2.11 DEV (TIMB on 2009-10-26) 2.11 DEV (TIMB on 2009-10-25) 2.11 DEV (TIMB on 2009-10-24) 2.11 DEV (TIMB on 2009-10-23) 2.11 DEV (TIMB on 2009-10-23) 2.11 DEV (TIMB on 2009-10-23) 2.10 (TIMB on 2009-06-23) 2.10 DEV (TIMB on 2009-06-18) 2.09 (TIMB on 2009-03-29) 2.09 DEV (TIMB on 2009-03-26) 2.09 DEV (TIMB on 2009-03-24) 2.08 DEV (TIMB on 2009-03-10) 2.08 (TIMB on 2009-02-15) 2.07 DEV (TIMB on 2009-02-13) 2.07 DEV (TIMB on 2009-02-03) 2.07 DEV (TIMB on 2009-01-21) 2.07 DEV (TIMB on 2009-01-20) 2.07 DEV (TIMB on 2009-01-19) 2.07 DEV (TIMB on 2009-01-05) 2.07 DEV (TIMB on 2009-01-03) 2.07 (TIMB on 2008-11-01) 2.06 (TIMB on 2008-10-31) 2.05 (TIMB on 2008-10-08) 2.04 (TIMB on 2008-10-03) 2.04 (TIMB on 2008-10-01) 2.03 (TIMB on 2008-08-15) 2.03 DEV (TIMB on 2008-08-15) 2.02 (TIMB on 2008-07-24) 2.01 (TIMB on 2008-07-15) 2.00 (TIMB on 2008-07-15) 1.90 DEV (TIMB on 2008-07-13) 1.90 DEV (TIMB on 2008-07-12) 1.90 DEV (TIMB on 2008-07-11) 1.90 DEV (TIMB on 2008-07-10) 1.90 DEV (TIMB on 2008-07-10) 1.90 DEV (TIMB on 2008-07-09) 1.14 (AKAPLAN on 2008-05-23) 1.13 (AKAPLAN on 2008-05-23) 1.12 (AKAPLAN on 2008-03-25) 1.11 (AKAPLAN on 2008-03-24) 1.10 (AKAPLAN on 2008-03-20) 0.09 (AKAPLAN on 2008-03-19) 0.08 (AKAPLAN on 2008-03-10) 0.06 (AKAPLAN on 2008-03-10) 0.06 (AKAPLAN on 2008-03-10) 0.05 (AKAPLAN on 2008-03-07) 0.04 (AKAPLAN on 2008-03-07) 0.03 (AKAPLAN on 2008-03-06) 0.01 (AKAPLAN on 2008-03-05) 0.01 (AKAPLAN on 2008-03-04) Diff with version 1.15 (AKAPLAN on 2008-05-25) 6.02_91 DEV (TIMB on 2016-03-19) 6.02_90 DEV (TIMB on 2016-03-06) 6.02 (TIMB on 2015-08-03) 6.01 (TIMB on 2015-04-04) 5.07 (TIMB on 2015-02-21) 5.06 DEV (TIMB on 2015-02-21) 5.06 DEV (TIMB on 2014-06-23) 5.06 (TIMB on 2013-09-13) 5.05 (TIMB on 2013-07-03) 5.05 DEV (TIMB on 2013-07-02) 5.04 (TIMB on 2013-06-20) 5.03 (TIMB on 2013-05-20) 5.02 (TIMB on 2013-04-22) 5.01 DEV (TIMB on 2013-04-21) 5.01 (TIMB on 2013-04-19) 5.00 (TIMB on 2013-04-08) 5.00 DEV (TIMB on 2013-04-07) 5.00 DEV (TIMB on 2013-04-04) 4.25 (TIMB on 2013-02-08) 4.25 DEV (TIMB on 2013-02-06) 4.24 (TIMB on 2013-02-03) 4.23 (TIMB on 2013-01-02) 4.23 DEV (TIMB on 2012-12-29) 4.12 (TIMB on 2012-12-28) 4.11 (TIMB on 2012-12-26) 4.09 (TIMB on 2012-09-15) 4.08 (TIMB on 2012-08-11) 4.07 (TIMB on 2012-08-10) 4.06 (TIMB on 2010-12-01) 4.06 DEV (TIMB on 2010-11-30) 4.06 DEV (TIMB on 2010-11-19) 4.05 (TIMB on 2010-09-17) 4.05 DEV (TIMB on 2010-09-15) 4.05 DEV (TIMB on 2010-09-15) 4.05 DEV (TIMB on 2010-09-13) 4.05 DEV (TIMB on 2010-09-12) 4.04 (TIMB on 2010-07-09) 4.04 DEV (TIMB on 2010-07-08) 4.03 (TIMB on 2010-06-19) 4.02 (TIMB on 2010-06-17) 4.02 DEV (TIMB on 2010-06-17) 4.01 (TIMB on 2010-06-15) 4.00 (TIMB on 2010-06-09) 4.00 DEV (TIMB on 2010-06-08) 4.00 DEV (TIMB on 2010-06-07) 4.00 DEV (TIMB on 2010-05-30) 3.11 DEV (TIMB on 2010-05-27) 3.11 DEV (TIMB on 2010-05-07) 3.11 DEV (TIMB on 2010-05-06) 3.11 DEV (TIMB on 2010-05-03) 3.11 DEV (TIMB on 2010-04-22) 3.11 (TIMB on 2010-03-16) 3.11 DEV (TIMB on 2010-03-13) 3.11 DEV (TIMB on 2010-03-12) 3.11 DEV (TIMB on 2010-03-11) 3.11 DEV (TIMB on 2010-03-09) 3.02 (TIMB on 2010-03-05) 3.02 DEV (TIMB on 2010-02-27) 3.02 DEV (TIMB on 2010-02-24) 3.02 DEV (TIMB on 2010-02-24) 3.02 DEV (TIMB on 2010-02-23) 3.02 DEV (TIMB on 2010-02-22) 3.02 DEV (TIMB on 2010-02-20) 3.01 (TIMB on 2009-12-28) 3.00 (TIMB on 2009-12-24) 2.11 DEV (TIMB on 2009-12-22) 2.11 DEV (TIMB on 2009-12-11) 2.11 DEV (TIMB on 2009-12-10) 2.11 DEV (TIMB on 2009-12-10) 2.11 DEV (TIMB on 2009-12-09) 2.11 DEV (TIMB on 2009-12-07) 2.11 DEV (TIMB on 2009-12-07) 2.11 DEV (TIMB on 2009-12-06) 2.11 DEV (TIMB on 2009-11-21) 2.11 DEV (TIMB on 2009-11-16) 2.11 DEV (TIMB on 2009-11-15) 2.11 DEV (TIMB on 2009-10-29) 2.11 DEV (TIMB on 2009-10-28) 2.11 DEV (TIMB on 2009-10-28) 2.11 DEV (TIMB on 2009-10-26) 2.11 DEV (TIMB on 2009-10-25) 2.11 DEV (TIMB on 2009-10-24) 2.11 DEV (TIMB on 2009-10-23) 2.11 DEV (TIMB on 2009-10-23) 2.11 DEV (TIMB on 2009-10-23) 2.10 (TIMB on 2009-06-23) 2.10 DEV (TIMB on 2009-06-18) 2.09 (TIMB on 2009-03-29) 2.09 DEV (TIMB on 2009-03-26) 2.09 DEV (TIMB on 2009-03-24) 2.08 DEV (TIMB on 2009-03-10) 2.08 (TIMB on 2009-02-15) 2.07 DEV (TIMB on 2009-02-13) 2.07 DEV (TIMB on 2009-02-03) 2.07 DEV (TIMB on 2009-01-21) 2.07 DEV (TIMB on 2009-01-20) 2.07 DEV (TIMB on 2009-01-19) 2.07 DEV (TIMB on 2009-01-05) 2.07 DEV (TIMB on 2009-01-03) 2.07 (TIMB on 2008-11-01) 2.06 (TIMB on 2008-10-31) 2.05 (TIMB on 2008-10-08) 2.04 (TIMB on 2008-10-03) 2.04 (TIMB on 2008-10-01) 2.03 (TIMB on 2008-08-15) 2.03 DEV (TIMB on 2008-08-15) 2.02 (TIMB on 2008-07-24) 2.01 (TIMB on 2008-07-15) 2.00 (TIMB on 2008-07-15) 1.90 DEV (TIMB on 2008-07-13) 1.90 DEV (TIMB on 2008-07-12) 1.90 DEV (TIMB on 2008-07-11) 1.90 DEV (TIMB on 2008-07-10) 1.90 DEV (TIMB on 2008-07-10) 1.90 DEV (TIMB on 2008-07-09) 1.14 (AKAPLAN on 2008-05-23) 1.13 (AKAPLAN on 2008-05-23) 1.12 (AKAPLAN on 2008-03-25) 1.11 (AKAPLAN on 2008-03-24) 1.10 (AKAPLAN on 2008-03-20) 0.09 (AKAPLAN on 2008-03-19) 0.08 (AKAPLAN on 2008-03-10) 0.06 (AKAPLAN on 2008-03-10) 0.06 (AKAPLAN on 2008-03-10) 0.05 (AKAPLAN on 2008-03-07) 0.04 (AKAPLAN on 2008-03-07) 0.03 (AKAPLAN on 2008-03-06) 0.01 (AKAPLAN on 2008-03-05) 0.01 (AKAPLAN on 2008-03-04) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 85 PAUSE users 47 non-PAUSE users. TIMB Tim Bunce Dependencies File::Which Getopt::Long JSON::MaybeXS List::Util Test::Differences Test::More XSLoader and possibly others CPAN Testers List Reverse dependencies Dependency graph × Devel-NYTProf-6.03 NAME SYNOPSIS DESCRIPTION Statement Profiling Subroutine Profiling Subroutine Recursion Goto &Subroutine accept() Application Profiling Fast Profiling Apache Profiling PROFILING NYTPROF ENVIRONMENT VARIABLE addpid=1 addtimestamp=1 trace=N log=F start=... optimize=0 subs=0 blocks=1 stmts=0 calls=N leave=0 findcaller=1 use_db_sub=1 savesrc=0 slowops=N usecputime=1 file=... compress=... clock=N sigexit=1 posix_exit=1 libcexit=1 endatexit=1 forkdepth=N nameevals=0 nameanonsubs=0 RUN-TIME CONTROL OF PROFILING disable_profile enable_profile finish_profile DATA COLLECTION AND INTERPRETATION If Statement and Subroutine Timings Don't Match If Headline Subroutine Timings Don't Match the Called Subs Perl 5.10.1+ (or else 5.8.9+) is Recommended eval $string Merging Evals Merging Anonymous Subroutines Timing Calls from XSUBs and Opcodes MAKING NYTPROF FASTER REPORTS nytprofhtml nytprofcg nytprofcalls nytprofmerge LIMITATIONS Threads and Multiplicity Coro FCGI::Engine For perl < 5.8.8 it may change what caller() returns For perl < 5.10.1 it can't see some implicit calls and callbacks #line directives Freed values in @_ may be mutated Lvalue subroutines aren't profiled when using use_db_sub=1 CLOCKS POSIX Clocks CLOCK_MONOTONIC CLOCK_REALTIME CLOCK_VIRTUAL CLOCK_PROF CLOCK_PROCESS_CPUTIME_ID CLOCK_THREAD_CPUTIME_ID Finding Available POSIX Clocks Other Clocks gettimeofday mach_absolute_time Time::HiRes Clock References CAVEATS SMP Systems Processor Affinity Windows Virtual Machines BUGS SEE ALSO TROUBLESHOOTING ""Profile data incomplete, ..."" or ""Profile format error: ..."" Some source files don't have profile information Eval ... has unknown invoking fid Warning: %d subroutine calls had negative time panic: buffer overflow ... AUTHORS AND CONTRIBUTORS COPYRIGHT AND LICENSE Background NAME Devel::NYTProf - Powerful fast feature-rich Perl source code profiler SYNOPSIS   # profile code and write database to ./nytprof.out   perl -d:NYTProf some_perl.pl    # convert database into a set of html files, e.g., ./nytprof/index.html   # and open a web browser on the nytprof/index.html file   nytprofhtml --open    # or into comma separated files, e.g., ./nytprof/*.csv   nytprofcsv I give talks on profiling perl code, including a detailed look at how to use NYTProf and how to optimize your code, every year. A video of my YAPC::NA 2014 talk can be found at http://perltv.org/v/performance-profiling-with-develnytprof DESCRIPTION Devel::NYTProf is a powerful, fast, feature-rich perl source code profiler. Performs per-line statement profiling for fine detail Performs per-subroutine statement profiling for overview Performs per-opcode profiling for slow perl builtins Performs per-block statement profiling (the first profiler to do so) Accounts correctly for time spent after calls return Performs inclusive and exclusive timing of subroutines Subroutine times are per calling location (a powerful feature) Can profile compile-time activity, just run-time, or just END time Uses novel techniques for efficient profiling Sub-microsecond (100ns) resolution on supported systems Very fast - the fastest statement and subroutine profilers for perl Handles applications that fork, with no performance cost Immune from noise caused by profiling overheads and I/O Program being profiled can stop/start the profiler Generates richly annotated and cross-linked html reports Captures source code, including string evals, for stable results Trivial to use with mod_perl - add one line to httpd.conf Includes an extensive test suite Tested on very large codebases NYTProf is effectively two profilers in one: a statement profiler, and a subroutine profiler. Statement Profiling The statement profiler measures the time between entering one perl statement and entering the next. Whenever execution reaches a new statement, the time since entering the previous statement is calculated and added to the time associated with the line of the source file that the previous statement starts on. By default the statement profiler also determines the first line of the current block and the first line of the current statement, and accumulates times associated with those. Another innovation unique to NYTProf is automatic compensation for a problem inherent in simplistic statement-to-statement timing. Consider a statement that calls a subroutine and then performs some other work that doesn't execute new statements, for example:   foo(...) + mkdir(...); In all other statement profilers the time spent in remainder of the expression (mkdir in the example) will be recorded as having been spent on the last statement executed in foo()! Here's another example:   while (<>) {      ...      1;   } After the first time around the loop, any further time spent evaluating the condition (waiting for input in this example) would be recorded as having been spent on the last statement executed in the loop! (Until perl bug #60954 is fixed this problem still applies to some loops. For more information see http://rt.perl.org/rt3/Ticket/Display.html?id=60954) NYTProf avoids these problems by intercepting the opcodes which indicate that control is returning into some previous statement and adjusting the profile accordingly. The statement profiler naturally generates a lot of data which is streamed out to a file in a very compact format. NYTProf takes care to not include the measurement and writing overheads in the profile times (some profilers produce 'noisy' data due to periodic stdio flushing). Subroutine Profiling The subroutine profiler measures the time between entering a subroutine and leaving it. It then increments a call count and accumulates the duration. For each subroutine called, separate counts and durations are stored for each location that called the subroutine. Subroutine entry is detected by intercepting the entersub opcode. Subroutine exit is detected via perl's internal save stack. As a result the subroutine profiler is both fast and robust. Subroutine Recursion For subroutines that recurse directly or indirectly, such as Error::try, the inclusive time is only measured for the outer-most call. The inclusive times of recursive calls are still measured and are accumulated separately. Also the 'maximum recursion depth' per calling location is recorded. Goto &Subroutine Perl implements a goto &destination as a return followed by a call to &destination, so that's how it will appear in the report. The goto will be shown with a very short time because it's effectively just a return. The &destination sub will show a call not from the location of the goto but from the location of the call to the sub that performed the goto. accept() The perl built-in accept() function waits listening for a connection on a socket, and so is a key part of pure-perl network service applications. The time spent waiting for a remotely initiated connection can be relatively high but is not relevant to the performance of the application. So the accept() function is treated as a special case. The subroutine profiler discounts the time spent in the accept() function. It does this in a way that also discounts that time from all the callers up the call stack. The effect on the reports is that all accept() calls appear to be instant. The statement profiler still shows the time actually spent in the statement that executed the accept() call. Application Profiling NYTProf records extra information in the data file to capture details that may be useful when analyzing the performance. It also records the filename and line ranges of all the subroutines. NYTProf can profile applications that fork, and does so with no loss of performance. NYTProf detects the fork and starts writing a new profile file with the pid appended to the filename. Since nytprofhtml only works with a single profile file you may want to merge multiple files using nytprofmerge. Fast Profiling The NYTProf profiler is written almost entirely in C and great care has been taken to ensure it's very efficient. Apache Profiling Just add one line near the start of your httpd.conf file:   PerlModule Devel::NYTProf::Apache By default you'll get a /tmp/nytprof.$$.out file for the parent process and a /tmp/nytprof.$parent.out.$$ file for each worker process. NYTProf takes care to detect when control is returning back from perl to mod_perl so time spent in mod_perl (such as waiting for the next request) does not get allocated to the last statement executed. Works with mod_perl 1 and 2. See Devel::NYTProf::Apache for more information. PROFILING Usually you'd load Devel::NYTProf on the command line using the perl -d option:   perl -d:NYTProf some_perl.pl To save typing the ':NYTProf' you could set the PERL5DB env var   PERL5DB='use Devel::NYTProf' and then just perl -d would work:   perl -d some_perl.pl Or you can avoid the need to add the -d option at all by using the PERL5OPT env var:   PERL5OPT=-d:NYTProf That's also very handy when you can't alter the perl command line being used to run the script you want to profile. Usually you'll want to enable the ""addpid=1"" option to ensure any nested invocations of perl don't overwrite the profile. NYTPROF ENVIRONMENT VARIABLE The behavior of Devel::NYTProf may be modified by setting the environment variable NYTPROF. It is possible to use this environment variable to effect multiple setting by separating the values with a :. For example:   export NYTPROF=trace=2:start=init:file=/tmp/nytprof.out Any colon or equal characters in a value can be escaped by preceding them with a backslash. addpid=1 Append the current process id to the end of the filename. This avoids concurrent, or consecutive, processes from overwriting the same file. If a fork is detected during profiling then the child process will automatically add the process id to the filename. addtimestamp=1 Append the current time, as integer epoch seconds, to the end of the filename. trace=N Set trace level to N. 0 is off (the default). Higher values cause more detailed trace output. Trace output is written to STDERR or wherever the ""log=F"" option has specified. log=F Specify the name of the file that ""trace=N"" output should be written to. start=... Specify at which phase of program execution the profiler should be enabled:   start=begin - start immediately (the default)   start=init  - start at beginning of INIT phase (after compilation/use/BEGIN)   start=end   - start at beginning of END phase   start=no    - don't automatically start The start=no option is handy if you want to explicitly control profiling by calling DB::enable_profile() and DB::disable_profile() yourself. See ""RUN-TIME CONTROL OF PROFILING"". The start=init option is handy if you want to avoid profiling the loading and initialization of modules. optimize=0 Disable the perl optimizer. By default NYTProf leaves perl's optimizer enabled. That gives you more accurate profile timing overall, but can lead to odd statement counts for individual sets of lines. That's because the perl's peephole optimizer has effectively rewritten the statements but you can't see what the rewritten version looks like. For example:   1     if (...) {   2         return;   3     } may be rewritten as   1    return if (...) so the profile won't show a statement count for line 2 in your source code because the return was merged into the if statement on the preceding line. Also 'empty' statements like 1; are removed entirely. Such statements are empty because the optimizer has already removed the pointless constant in void context. It then goes on to remove the now empty statement (in perl >= 5.13.7). Using the optimize=0 option disables the optimizer so you'll get lower overall performance but more accurately assigned statement counts. If you find any other examples of the effect of optimizer on NYTProf output (other than performance, obviously) please let us know. subs=0 Set to 0 to disable the collection of subroutine caller and timing details. blocks=1 Set to 1 to enable the determination of block and subroutine location per statement. This makes the profiler about 50% slower (as of July 2008) and produces larger output files, but you gain some valuable insight in where time is spent in the blocks within large subroutines and scripts. stmts=0 Set to 0 to disable the statement profiler. (Implies blocks=0.) The reports won't contain any statement timing detail. This significantly reduces the overhead of the profiler and can also be useful for profiling large applications that would normally generate a very large profile data file. calls=N This option is new and experimental. With calls=1 (the default) subroutine call return events are emitted into the data stream as they happen. With calls=2 subroutine call entry events are also emitted. With calls=0 no subroutine call events are produced. This option depends on the subs option being enabled, which it is by default. The nytprofcalls utility can be used to process this data. It too is new and experimental and so likely to change. The subroutine profiler normally gathers data in memory and outputs a summary when the profile data is being finalized, usually when the program has finished. The summary contains aggregate information for all the calls from one location to another, but the details of individual calls have been lost. The calls option enables the recording of individual call events and thus more detailed analysis and reporting of that data. leave=0 Set to 0 to disable the extra work done by the statement profiler to allocate times accurately when returning into the middle of statement. For example leaving a subroutine and returning into the middle of statement, or re-evaluating a loop condition. This feature also ensures that in embedded environments, such as mod_perl, the last statement executed doesn't accumulate the time spent 'outside perl'. findcaller=1 Force NYTProf to recalculate the name of the caller of the each sub instead of 'inheriting' the name calculated when the caller was entered. (Rarely needed, but might be useful in some odd cases.) use_db_sub=1 Set to 1 to enable use of the traditional DB::DB() subroutine to perform profiling, instead of the faster 'opcode redirection' technique that's used by default. Also effectively sets leave=0 (see above). The default 'opcode redirection' technique can't profile subroutines that were compiled before NYTProf was loaded. So using use_db_sub=1 can be useful in cases where you can't load the profiler early in the life of the application. Another side effect of use_db_sub=1 is that it enables recording of the source code of the perl -e '...' and perl - input for old versions of perl. See also ""savesrc=0"". savesrc=0 Disable the saving of source code. By default NYTProf saves a copy of all source code into the profile data file. This makes the file self-contained, so the reporting tools no longer depend on having the unmodified source code files available. With savesrc=0 some source code is still saved: the arguments to the perl -e option, the script fed to perl via STDIN when using perl -, and the source code of string evals. Saving the source code of string evals requires perl version 5.8.9+, 5.10.1+, or 5.12 or later. Saving the source code of the perl -e '...' or perl - input requires either a recent perl version, as above, or setting the ""use_db_sub=1"" option. slowops=N Profile perl opcodes that can be slow. These include opcodes that make system calls, such as print, read, sysread, socket etc., plus regular expression opcodes like subst and match. If N is 0 then slowops profiling is disabled. If N is 1 then all the builtins are treated as being defined in the CORE package. So times for print calls from anywhere in your code are merged and accounted for as calls to an xsub called CORE::print. If N is 2 (the default) then builtins are treated as being defined in the package that calls them. So calls to print from package Foo are treated as calls to an xsub called Foo::CORE:print. Note the single colon after CORE. The opcodes are currently profiled using their internal names, so printf is prtf and the -x file test is fteexec. This may change in future. Opcodes that call subroutines, perhaps by triggering a FETCH from a tied variable, currently appear in the call tree as the caller of the sub. This is likely to change in future. usecputime=1 This option has been removed. Profiling won't be enabled if set. Use the ""clock=N"" option to select a high-resolution CPU time clock, if available on your system, instead. That will give you higher resolution and work for the subroutine profiler as well. file=... Specify the output file to write profile data to (default: './nytprof.out'). compress=... Specify the compression level to use, if NYTProf is compiled with compression support. Valid values are 0 to 9, with 0 disabling compression. The default is 6 as higher values yield little extra compression but the cpu cost starts to rise significantly. Using level 1 still gives you a significant reduction in file size. If NYTProf was not compiled with compression support, this option is silently ignored. clock=N Systems which support the clock_gettime() system call typically support several clocks. By default NYTProf uses CLOCK_MONOTONIC. This option enables you to select a different clock by specifying the integer id of the clock (which may vary between operating system types). If the clock you select isn't available then CLOCK_REALTIME is used. See ""CLOCKS"" for more information. sigexit=1 When perl exits normally it runs any code defined in END blocks. NYTProf defines an END block that finishes profiling and writes out the final profile data. If the process ends due to a signal then END blocks are not executed so the profile will be incomplete and unusable. The sigexit option tells NYTProf to catch some signals (e.g. INT, HUP, PIPE, SEGV, BUS) and ensure a usable profile by executing:     DB::finish_profile();     exit 1; You can also specify which signals to catch in this way by listing them, separated by commas, as the value of the option (case is not significant):     sigexit=int,hup posix_exit=1 The NYTProf subroutine profiler normally detects calls to POSIX::_exit() (which exits the process without running END blocks) and automatically calls DB::finish_profile() for you, so NYTProf 'just works'. When using the subs=0 option to disable the subroutine profiler the posix_exit option can be used to tell NYTProf to take other steps to arrange for DB::finish_profile() to be called before POSIX::_exit(). libcexit=1 Arranges for ""finish_profile"" to be called via the C library atexit() function. This may help some tricky cases where the process may exit without perl executing the END block that NYTProf uses to call /finish_profile(). endatexit=1 Sets the PERL_EXIT_DESTRUCT_END flag in the PL_exit_flags of the perl interpreter. This makes perl run END blocks in perl_destruct() instead of perl_run() which may help in cases, like Apache, where perl is embedded but perl_run() isn't called. forkdepth=N When a perl process that is being profiled executes a fork() the child process is also profiled. The forkdepth option can be used to control this. If forkdepth is zero then profiling will be disabled in the child process. If forkdepth is greater than zero then profiling will be enabled in the child process and the forkdepth value in that process is decremented by one. If forkdepth is -1 (the default) then there's no limit on the number of generations of children that are profiled. nameevals=0 The 'file name' of a string eval is normally a string like ""(eval N)"", where N is a sequence number. By default NYTProf asks perl to give evals more informative names like ""(eval N)[file:line]"", where file and line are the file and line number where the string eval was executed. The nameevals=0 option can be used to disable the more informative names and return to the default behaviour. This may be need in rare cases where the application code is sensitive to the name given to a eval. (The most common case in when running test suites undef NYTProf.) The downside is that the NYTProf reporting tools are less useful and may get confused if this option is used. nameanonsubs=0 The name of a anonymous subroutine is normally ""__ANON__"". By default NYTProf asks perl to give anonymous subroutines more informative names like ""__ANON__[file:line]"", where file and line are the file and line number where the anonymous subroutine was defined. The nameanonsubs=0 option can be used to disable the more informative names and return to the default behaviour. This may be need in rare cases where the application code is sensitive to the name given to a anonymous subroutines. (The most common case in when running test suites undef NYTProf.) The downside is that the NYTProf reporting tools are less useful and may get confused if this option is used. RUN-TIME CONTROL OF PROFILING You can profile only parts of an application by calling DB::disable_profile() to stop collecting profile data, and calling DB::enable_profile() to start collecting profile data. Using the start=no option lets you leave the profiler disabled initially until you call DB::enable_profile() at the right moment. You still need to load Devel::NYTProf as early as possible, even if you don't call DB::enable_profile() until much later. That's because any code that's compiled before Devel::NYTProf is loaded will not be profiled by default. See also ""use_db_sub=1"". The profile output file can't be used until it's been properly completed and closed. Calling DB::disable_profile() doesn't do that. To make a profile file usable before the profiled application has completed you can call DB::finish_profile(). Alternatively you could call DB::enable_profile($newfile). Always call the DB::enable_profile(), DB::disable_profile() or DB::finish_profile() function with the DB:: prefix as shown because you can't import them. They're provided automatically when NYTProf is in use. disable_profile   DB::disable_profile() Stops collection of profile data until DB:enable_profile() is called. Subroutine calls which were made while profiling was enabled and are still on the call stack (have not yet exited) will still have their profile data collected when they exit. Compare with ""finish_profile"" below. enable_profile   DB::enable_profile($newfile)   DB::enable_profile() Enables collection of profile data. If $newfile is specified the profile data will be written to $newfile (after completing and closing the previous file, if any). If $newfile already exists it will be deleted first. If DB::enable_profile() is called without a filename argument then profile data will continue to be written to the current file (nytprof.out by default). finish_profile   DB::finish_profile() Calls DB::disable_profile(), then completes the profile data file by writing subroutine profile data, and then closes the file. The in memory subroutine profile data is then discarded. Normally NYTProf arranges to call finish_profile() for you via an END block. DATA COLLECTION AND INTERPRETATION NYTProf tries very hard to gather accurate information. The nature of the internals of perl mean that, in some cases, the information that's gathered is accurate but surprising. In some cases it can appear to be misleading. (Of course, in some cases it may actually be plain wrong. Caveat lector.) If Statement and Subroutine Timings Don't Match NYTProf has two profilers: a statement profiler that's invoked when perl moves from one perl statement to another, and a subroutine profiler that's invoked when perl calls or returns from a subroutine. The individual statement timings for a subroutine usually add up to slightly less than the exclusive time for the subroutine. That's because the handling of the subroutine call and return overheads is included in the exclusive time for the subroutine. The difference may only be a few microseconds but that may become noticeable for subroutines that are called hundreds of thousands of times. The statement profiler keeps track how much time was spent on overheads, like writing statement profile data to disk. The subroutine profiler subtracts the overheads that have accumulated between entering and leaving the subroutine in order to give a more accurate profile. The statement profiler is generally very fast because most writes get buffered for zip compression so the profiler overhead per statement tends to be very small, often a single 'tick'. The result is that the accumulated overhead is quite noisy. This becomes more significant for subroutines that are called frequently and are also fast. This may be another, smaller, contribution to the discrepancy between statement time and exclusive times. If Headline Subroutine Timings Don't Match the Called Subs Overall subroutine times are reported with a headline like spent 10s (2+8) within .... In this example, 10 seconds were spent inside the subroutine (the ""inclusive time"") and, of that, 8 seconds were spent in subroutines called by this one. That leaves 2 seconds as the time spent in the subroutine code itself (the ""exclusive time"", sometimes also called the ""self time""). The report shows the source code of the subroutine. Lines that make calls to other subroutines are annotated with details of the time spent in those calls. Sometimes the sum of the times for calls made by the lines of code in the subroutine is less than the inclusive-exclusive time reported in the headline (10-2 = 8 seconds in the example above). What's happening here is that calls to other subroutines are being made but NYTProf isn't able to determine the calling location correctly so the calls don't appear in the report in the correct place. Using an old version of perl is one cause (see below). Another is calling subroutines that exit via goto &sub; - most frequently encountered in AUTOLOAD subs and code using the Memoize module. In general the overall subroutine timing is accurate and should be trusted more than the sum of statement or nested sub call timings. Perl 5.10.1+ (or else 5.8.9+) is Recommended These versions of perl yield much more detailed information about calls to BEGIN, CHECK, INIT, and END blocks, the code handling tied or overloaded variables, and callbacks from XS code. Perl 5.12 will hopefully also fix an inaccuracy in the timing of the last statement and the condition clause of some kinds of loops: http://rt.perl.org/rt3/Ticket/Display.html?id=60954 eval $string Perl treats each execution of a string eval (eval $string; not eval { ... }) as a distinct file, so NYTProf does as well. The 'files' are given names with this structure:         (eval $sequence)[$filename:$line] for example ""(eval 93)[/foo/bar.pm:42]"" would be the name given to the 93rd execution of a string eval by that process and, in this case, the 93rd eval happened to be one at line 42 of ""/foo/bar.pm"". Nested string evals can give rise to file names like         (eval 1047)[(eval 93)[/foo/bar.pm:42]:17] Merging Evals Some applications execute a great many string eval statements. If NYTProf generated a report page for each one it would not only slow report generation but also make the overall report less useful by scattering performance data too widely. On the other hand, being able to see the actual source code executed by an eval, along with the timing details, is often very useful. To try to balance these conflicting needs, NYTProf currently merges uninteresting string eval siblings. What does that mean? Well, for each source code line that executed any string evals, NYTProf first gathers the corresponding eval 'files' for that line (known as the 'siblings') into groups keyed by distinct source code. Then, for each of those groups of siblings, NYTProf will 'merge' a group that shares the same source code and doesn't execute any string evals itself. Merging means to pick one sibling as the survivor and merge and delete all the data from the others into it. If there are a large number of sibling groups then the data for all of them are merged into one regardless. The report annotations will indicate when evals have been merged together. Merging Anonymous Subroutines Anonymous subroutines defined within string evals have names like this:         main::__ANON__[(eval 75)[/foo/bar.pm:42]:12] That anonymous subroutine was defined on line 12 of the source code executed by the string eval on line 42 of /foo/bar.pm. That was the 75th string eval executed by the program. Anonymous subroutines defined on the same line of sibling evals that get merged are also merged. That is, the profile information is merged into one and the others are discarded. Timing Care should be taken when interpreting the report annotations associated with a string eval statement. Normally the report annotations embedded into the source code related to timings from the subroutine profiler. This isn't (currently) true of annotations for string eval statements. This makes a significant different if the eval defines any subroutines that get called after the eval has returned. Because the time shown for a string eval is based on the statement times it will include time spent executing statements within the subs defined by the eval. In future NYTProf may involve the subroutine profiler in timings evals and so be able to avoid this issue. Calls from XSUBs and Opcodes Calls record the current filename and line number of the perl code at the time the call was made. That's fine and accurate for calls from perl code. For calls that originate from C code however, such as an XSUB or an opcode, the filename and line number recorded are still those of the last perl statement executed. For example, a line that calls an xsub will appear in reports to also have also called any subroutines that that xsub called. This can be construed as a feature. As an extreme example, the first time a regular expression that uses character classes is executed on a unicode string you'll find profile data like this:       # spent 1ms within main::BEGIN@4 which was called       #    once (1ms+0s) by main::CORE:subst at line 0   4   s/ (?: [A-Z] | [\d] )+ (?= [\s] ) //x;       # spent  38.8ms making 1 call to main::CORE:subst       # spent  25.4ms making 2 calls to utf8::SWASHNEW, avg 12.7ms/call       # spent  12.4ms making 1 call to utf8::AUTOLOAD MAKING NYTPROF FASTER You can reduce the cost of profiling by adjusting some options. The trade-off is reduced detail and/or accuracy in reports. If you don't need statement-level profiling then you can disable it via ""stmts=0"". To further boost statement-level profiling performance try ""leave=0"" but note that will apportion timings for some kinds of statements less accurate). If you don't need call stacks or flamegraph then disable it via ""calls=0"". If you don't need subroutine profiling then you can disable it via ""subs=0"". If you do need it but don't need timings for perl opcodes then set ""slowops=0"". Generally speaking, setting calls=0 and slowops=0 will give you a useful boost with the least loss of detail. Another approach is to only enable NYTProf in the sections of code that interest you. See ""RUN-TIME CONTROL OF PROFILING"" for more details. To speed up nytprofhtml try using the --minimal (-m) or --no-flame options. REPORTS The Devel::NYTProf::Data module provides a low-level interface for loading the profile data. The Devel::NYTProf::Reader module provides an interface for generating arbitrary reports. This means that you can implement your own output format in perl. (Though the module is in a state of flux and may be deprecated soon.) Included in the bin directory of this distribution are some scripts which turn the raw profile data into more useful formats: nytprofhtml Creates attractive, richly annotated, and fully cross-linked html reports (including statistics, source code and color highlighting). This is the main report generation tool for NYTProf. nytprofcg Translates a profile into a format that can be loaded into KCachegrind http://kcachegrind.github.io/ nytprofcalls Reads a profile and processes the calls events it contains. nytprofmerge Reads multiple profile data files and writes out a new file containing the merged profile data. LIMITATIONS Threads and Multiplicity Devel::NYTProf is not currently thread safe or multiplicity safe. If you'd be interested in helping to fix that then please get in touch with us. Meanwhile, profiling is disabled when a thread is created, and NYTProf tries to ignore any activity from perl interpreters other than the first one that loaded it. Coro The Devel::NYTProf subroutine profiler gets confused by the stack gymnastics performed by the Coro module and aborts. When profiling applications that use Coro you should disable the subroutine profiler using the ""subs=0"" option. FCGI::Engine Using open('-|') in code running under FCGI::Engine causes a panic in nytprofcalls. See https://github.com/timbunce/devel-nytprof/issues/20 for more information. For perl < 5.8.8 it may change what caller() returns For example, the Readonly module croaks with ""Invalid tie"" when profiled with perl versions before 5.8.8. That's because Readonly explicitly checking for certain values from caller(). The NEXT module is also affected. For perl < 5.10.1 it can't see some implicit calls and callbacks For perl versions prior to 5.8.9 and 5.10.1, some implicit subroutine calls can't be seen by the subroutine profiler. Technically this affects calls made via the various perl call_*() internal APIs. For example, BEGIN/CHECK/INIT/END blocks, the TIEwhatever subroutine called by tie(), all calls made via operator overloading, and callbacks from XS code, are not seen. The effect is that time in those subroutines is accumulated by the subs that triggered the call to them. So time spent in calls invoked by perl to handle overloading are accumulated by the subroutines that trigger overloading (so it is measured, but the cost is dispersed across possibly many calling locations). Although the calls aren't seen by the subroutine profiler, the individual statements executed by the code in the called subs are profiled by the statement profiler. #line directives The reporting code currently doesn't handle #line directives, but at least it warns about them. Patches welcome. Freed values in @_ may be mutated Perl has a class of bugs related to the fact that values placed in the stack are not reference counted. Consider this example:   @a = (1..9);  sub s { undef @a; print $_ for @_ }  s(@a); The undef @a frees the values that @_ refers to. Perl can sometimes detect when a freed value is accessed and treats it as an undef. However, if the freed value is assigned some new value then @_ is effectively corrupted. NYTProf allocates new values while it's profiling, in order to record program activity, and so may appear to corrupt @_ in this (rare) situation. If this happens, NYTProf is simply exposing an existing problem in the code. Lvalue subroutines aren't profiled when using use_db_sub=1 Currently 'lvalue' subroutines (subs that can be assigned to, like foo() = 42) are not profiled when using use_db_sub=1. CLOCKS Here we discuss the way NYTProf gets high-resolution timing information from your system and related issues. POSIX Clocks These are the clocks that your system may support if it supports the POSIX clock_gettime() function. Other clock sources are listed in the ""Other Clocks"" section below. The clock_gettime() interface allows clocks to return times to nanosecond precision. Of course few offer nanosecond accuracy but the extra precision helps reduce the cumulative error that naturally occurs when adding together many timings. When using these clocks NYTProf outputs timings as a count of 100 nanosecond ticks. CLOCK_MONOTONIC CLOCK_MONOTONIC represents the amount of time since an unspecified point in the past (typically system start-up time). It increments uniformly independent of adjustments to 'wallclock time'. NYTProf will use this clock by default, if available. CLOCK_REALTIME CLOCK_REALTIME is typically the system's main high resolution 'wall clock time' source. The same source as used for the gettimeofday() call used by most kinds of perl benchmarking and profiling tools. The problem with real time is that it's far from simple. It tends to drift and then be reset to match 'reality', either sharply or by small adjustments (via the adjtime() system call). Surprisingly, it can also go backwards, for reasons explained in http://preview.tinyurl.com/5wawnn so CLOCK_MONOTONIC is preferred. CLOCK_VIRTUAL CLOCK_VIRTUAL increments only when the CPU is running in user mode on behalf of the calling process. CLOCK_PROF CLOCK_PROF increments when the CPU is running in user or kernel mode. CLOCK_PROCESS_CPUTIME_ID CLOCK_PROCESS_CPUTIME_ID represents the amount of execution time of the process associated with the clock. CLOCK_THREAD_CPUTIME_ID CLOCK_THREAD_CPUTIME_ID represents the amount of execution time of the thread associated with the clock. Finding Available POSIX Clocks On unix-like systems you can find the CLOCK_* clocks available on you system using a command like:   grep -r 'define *CLOCK_' /usr/include Look for a group that includes CLOCK_REALTIME. The integer values listed are the clock ids that you can use with the clock=N option. A future version of NYTProf should be able to list the supported clocks. Other Clocks This section lists other clock sources that NYTProf may use. If your system doesn't support clock_gettime() then NYTProf will use gettimeofday(), or the nearest equivalent, gettimeofday This is the traditional high resolution time of day interface for most unix-like systems. With this clock NYTProf outputs timings as a count of 1 microsecond ticks. mach_absolute_time On Mac OS X the mach_absolute_time() function is used. With this clock NYTProf outputs timings as a count of 100 nanosecond ticks. Time::HiRes On systems which don't support other clocks, NYTProf falls back to using the Time::HiRes module. With this clock NYTProf outputs timings as a count of 1 microsecond ticks. Clock References Relevant specifications and manual pages:   http://www.opengroup.org/onlinepubs/000095399/functions/clock_getres.html   http://linux.die.net/man/3/clock_gettime Why 'realtime' can appear to go backwards:   http://preview.tinyurl.com/5wawnn The PostgreSQL pg_test_timing utility documentation has a good summary of timing issues:   http://www.postgresql.org/docs/9.2/static/pgtesttiming.html CAVEATS SMP Systems On systems with multiple processors, which includes most modern machines, (from Linux docs though applicable to most SMP systems):   The CLOCK_PROCESS_CPUTIME_ID and CLOCK_THREAD_CPUTIME_ID clocks are realized on   many platforms using timers from the CPUs (TSC on i386, AR.ITC on Itanium).   These registers may differ between CPUs and as a consequence these clocks may   return bogus results if a process is migrated to another CPU.    If the CPUs in an SMP system have different clock sources then there is no way   to maintain a correlation between the timer registers since each CPU will run   at a slightly different frequency. If that is the case then   clock_getcpuclockid(0) will return ENOENT to signify this condition. The two   clocks will then only be useful if it can be ensured that a process stays on a   certain CPU.    The processors in an SMP system do not start all at exactly the same time and   therefore the timer registers are typically running at an offset. Some   architectures include code that attempts to limit these offsets on bootup.   However, the code cannot guarantee to accurately tune the offsets. Glibc   contains no provisions to deal with these offsets (unlike the Linux Kernel).   Typically these offsets are small and therefore the effects may be negligible   in most cases. In summary, SMP systems are likely to give 'noisy' profiles. Setting a ""Processor Affinity"" may help. Processor Affinity Processor affinity is an aspect of task scheduling on SMP systems. ""Processor affinity takes advantage of the fact that some remnants of a process may remain in one processor's state (in particular, in its cache) from the last time the process ran, and so scheduling it to run on the same processor the next time could result in the process running more efficiently than if it were to run on another processor."" (From http://en.wikipedia.org/wiki/Processor_affinity) Setting an explicit processor affinity can avoid the problems described in ""SMP Systems"". Processor affinity can be set using the taskset command on Linux. Note that processor affinity is inherited by child processes, so if the process you're profiling spawns cpu intensive sub processes then your process will be impacted by those more than it otherwise would. Windows THIS SECTION DOESN'T MATCH THE CODE On Windows NYTProf uses Time::HiRes which uses the windows QueryPerformanceCounter() API with some extra logic to adjust for the current clock speed and try to resync the raw counter to wallclock time every so often (every 30 seconds or if the timer drifts by more than 0.5 of a seconds). This extra logic may lead to occasional spurious results. (It would be great if someone could contribute a patch to NYTProf to use QueryPerformanceCounter() directly and avoid the overheads and resyncing behaviour of Time::HiRes.) Virtual Machines I recommend you don't do performance profiling while running in a virtual machine. If you do you're likely to find inexplicable spikes of real-time appearing at unreasonable places in your code. You should pay less attention to the statement timings and rely more on the subroutine timings. They will still be noisy but less so than the statement times. You could also try using the clock=N option to select a high-resolution cpu-time clock instead of a real-time one. That should be much less noisy, though you will lose visibility of wait-times due to network and disk I/O, for example. BUGS Possibly. All complex software has bugs. Let me know if you find one. SEE ALSO Screenshots of nytprofhtml v2.01 reports can be seen at http://timbunce.files.wordpress.com/2008/07/nytprof-perlcritic-index.png and http://timbunce.files.wordpress.com/2008/07/nytprof-perlcritic-all-perl-files.png. A writeup of the new features of NYTProf v2 can be found at http://blog.timbunce.org/2008/07/15/nytprof-v2-a-major-advance-in-perl-profilers/ and the background story, explaining the ""why"", can be found at http://blog.timbunce.org/2008/07/16/nytprof-v2-the-background-story/. Mailing list and discussion at http://groups.google.com/group/develnytprof-dev Blog posts http://blog.timbunce.org/tag/nytprof/ Public SVN Repository and hacking instructions at http://code.google.com/p/perl-devel-nytprof/ nytprofhtml is a script included that produces html reports. nytprofcsv is another script included that produces plain text CSV reports. Devel::NYTProf::Reader is the module that powers the report scripts. You might want to check this out if you plan to implement a custom report (though it's very likely to be deprecated in a future release). Devel::NYTProf::ReadStream is the module that lets you read a profile data file as a stream of chunks of data. Other tools: DTrace https://speakerdeck.com/mrallen1/perl-dtrace-and-you TROUBLESHOOTING ""Profile data incomplete, ..."" or ""Profile format error: ..."" This error message means the file doesn't contain all the expected data or the data has been corrupted in some way. That may be because it was truncated (perhaps the filesystem was full) or, more commonly, because the all the expected data hasn't been written. NYTProf writes some important data to the data file when finishing profiling. If you read the file before the profiling has finished you'll get this error. If the process being profiled is still running you'll need to wait until it exits cleanly (runs END blocks or ""finish_profile"" is called explicitly). If the process being profiled has exited then it's likely that it met with a sudden and unnatural death that didn't give NYTProf a chance to finish the profile. If the sudden death was due to a signal, like SIGTERM, or a SIGINT from pressing Ctrl-C, then the ""sigexit=1"" option may help. If the sudden death was due to calling POSIX::_exit($status) then you'll need to call ""finish_profile"" before calling POSIX::_exit. You'll also get this error if the code trying to read the profile is itself being profiled. That's most likely to happen if you enable profiling via the PERL5OPT environment variable and have forgotten to unset it. If you've encountered this error message, and you're sure you've understood the concerns described above, and you're sure they don't apply in your case, then please open an issue. Be sure to include sufficient information so I can see how you've addressed these likely causes. Some source files don't have profile information This is usually due to NYTProf being initialized after some perl files have already been compiled. If you can't alter the command line to add ""-d:NYTProf"" you could try using the PERL5OPT environment variable. See ""PROFILING"". You could also try using the ""use_db_sub=1"" option. Eval ... has unknown invoking fid When using the statement profiler you may see a warning message like this:   Eval '(eval 2)' (fid 9, flags:viastmt,savesrc) has unknown invoking fid 10  Notice that the eval file id (fid 9 in this case) is lower than the file id that invoked the eval (fid 10 in this case). This is a known problem caused by the way perl works and how the profiler assigns and outputs the file ids. The invoking fid is known but gets assigned a fid and output after the fid for the eval, and that causes the warning when the file is read. Warning: %d subroutine calls had negative time There are two likely causes for this: clock instability, or accumulated timing errors. Clock instability, if present on your system, is most likely to be noticeable on very small/fast subroutines that are called very few times. Accumulated timing errors can arise because the subroutine profiler uses floating point values (NVs) to store the times. They are most likely to be noticed on subroutines that are called a few times but which make a large number of calls to very fast subroutines (such as opcodes). In this case the accumulated time apparently spent making those calls can be greater than the time spent in the calling subroutine. If you rerun nytprofhtml (etc.) with the ""trace=N"" option set >0 you'll see trace messages like ""%s call has negative time: incl %fs, excl %fs"" for each affected subroutine. Try profiling with the ""slowops=N"" option set to 0 to disable the profiling of opcodes. Since opcodes often execute in a few microseconds they are a common cause of this warning. You could also try recompiling perl to use 'long doubles' for the NV floating point type (use Configure -Duselongdouble). If you try this please let me know. I'd also happily take a patch to use long doubles, if available, by default. panic: buffer overflow ... You have unusually long subroutine names in your code. You'll need to rebuild Devel::NYTProf with the NYTP_MAX_SUB_NAME_LEN environment variable set to a value longer than the longest subroutine names in your code. AUTHORS AND CONTRIBUTORS Tim Bunce (http://www.tim.bunce.name and http://blog.timbunce.org) leads the project and has done most of the development work thus far. Nicholas Clark contributed zip compression and nytprofmerge. Chia-liang Kao contributed nytprofcg. Peter (Stig) Edwards contributed the VMS port. Jan Dubois contributed the Windows port. Gisle Aas contributed the Devel::NYTProf::ReadStream module. Steve Peters contributed greater perl version portability and use of POSIX high-resolution clocks. Other contributors are noted in the Changes file. Many thanks to Adam Kaplan who created NYTProf initially by forking Devel::FastProf adding reporting from Devel::Cover and a test suite. For more details see ""HISTORY"" below. COPYRIGHT AND LICENSE   Copyright (C) 2008 by Adam Kaplan and The New York Times Company.   Copyright (C) 2008-2016 by Tim Bunce, Ireland. This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself, either Perl version 5.8.8 or, at your option, any later version of Perl 5 you may have available. Background Subroutine-level profilers:   Devel::DProf        | 1995-10-31 | ILYAZ   Devel::AutoProfiler | 2002-04-07 | GSLONDON   Devel::Profiler     | 2002-05-20 | SAMTREGAR   Devel::Profile      | 2003-04-13 | JAW   Devel::DProfLB      | 2006-05-11 | JAW   Devel::WxProf       | 2008-04-14 | MKUTTER Statement-level profilers:   Devel::SmallProf    | 1997-07-30 | ASHTED   Devel::FastProf     | 2005-09-20 | SALVA   Devel::NYTProf      | 2008-03-04 | AKAPLAN   Devel::Profit       | 2008-05-19 | LBROCARD Devel::NYTProf is a (now distant) fork of Devel::FastProf, which was itself an evolution of Devel::SmallProf. Adam Kaplan forked Devel::FastProf and added html report generation (based on Devel::Cover) and a test suite - a tricky thing to do for a profiler. Meanwhile Tim Bunce had been extending Devel::FastProf to add novel per-sub and per-block timing, plus subroutine caller tracking. When Devel::NYTProf was released Tim switched to working on Devel::NYTProf because the html report would be a good way to show the extra profile data, and the test suite made development much easier and safer. Then Tim went a little crazy and added a slew of new features, in addition to per-sub and per-block timing and subroutine caller tracking. These included the 'opcode interception' method of profiling, ultra-fast and robust inclusive subroutine timing, doubling performance, plus major changes to html reporting to display all the extra profile call and timing data in richly annotated and cross-linked reports. Steve Peters came on board along the way with patches for portability and to keep NYTProf working with the latest development perl versions. Nicholas Clark added zip compression, many optimizations, and nytprofmerge. Jan Dubois contributed Windows support. Adam's work was sponsored by The New York Times Co. http://open.nytimes.com. Tim's work was partly sponsored by Shopzilla http://www.shopzilla.com during 2008 but hasn't been sponsored since then. For the record, Tim has never worked for the New York Times nor has he received any kind of sponsorship or support from them in relation to NYTProf. The name of this module is simply result of the history outlined above, which can be summarised as: Adam forked an existing module when he added his enhancements and Tim didn't. × Module Install Instructions To install Devel::NYTProf, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Devel::NYTProf CPAN shell                      perl -MCPAN -e shell                     install Devel::NYTProf For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Code profiler."	"true"
"Protocol"	"Furl"	"https://metacpan.org/pod/Furl"	"Faster HTTP(S) Client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Furl - Lightning-fast URL fetcher - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors MATSUNO★Tokuhiro  /  3.08 (TOKUHIROM on 2015-08-06) 3.07 (TOKUHIROM on 2015-04-21) 3.06 (TOKUHIROM on 2015-02-09) 3.05 (TOKUHIROM on 2014-09-24) 3.04 (TOKUHIROM on 2014-09-22) 3.03 (TOKUHIROM on 2014-07-09) 3.02 (TOKUHIROM on 2014-03-18) 3.01 (TOKUHIROM on 2014-02-13) 3.00 (TOKUHIROM on 2013-11-13) 2.19 (TOKUHIROM on 2013-08-26) 2.18 (TOKUHIROM on 2013-08-08) 2.17 (TOKUHIROM on 2013-07-01) 2.16 (TOKUHIROM on 2013-05-22) 2.15 (TOKUHIROM on 2013-05-10) 2.14 (TOKUHIROM on 2013-04-19) 2.13 (TOKUHIROM on 2013-04-17) 2.12 (TOKUHIROM on 2013-04-15) 2.11 (TOKUHIROM on 2013-04-04) 2.10 (TOKUHIROM on 2013-03-18) 2.09 (TOKUHIROM on 2013-03-06) 2.08 (TOKUHIROM on 2013-03-06) 2.07 (TOKUHIROM on 2013-03-02) 2.06 (TOKUHIROM on 2013-02-14) 2.05 (TOKUHIROM on 2013-02-12) 2.04 (TOKUHIROM on 2013-02-12) 2.03 (TOKUHIROM on 2013-02-09) 2.02 (TOKUHIROM on 2013-02-06) 2.01 (TOKUHIROM on 2013-01-23) 2.00 (TOKUHIROM on 2013-01-23) 1.04 (TOKUHIROM on 2013-01-23) 1.03 (TOKUHIROM on 2013-01-13) 1.02 (TOKUHIROM on 2013-01-07) 1.01 (TOKUHIROM on 2013-01-04) 1.00 (TOKUHIROM on 2012-10-19) 0.42 (TOKUHIROM on 2012-10-16) 0.41 (TOKUHIROM on 2012-09-25) 0.40 (TOKUHIROM on 2012-06-04) 0.39 (TOKUHIROM on 2012-05-30) 0.38 (TOKUHIROM on 2011-09-06) 0.37 (TOKUHIROM on 2011-08-25) 0.36 (TOKUHIROM on 2011-08-24) 0.35 (TOKUHIROM on 2011-08-11) 0.34 (TOKUHIROM on 2011-07-15) 0.33 (TOKUHIROM on 2011-07-14) 0.32 (TOKUHIROM on 2011-05-30) 0.31 (TOKUHIROM on 2011-02-26) 0.30 (TOKUHIROM on 2011-02-25) 0.29 (TOKUHIROM on 2011-02-24) 0.28 (TOKUHIROM on 2011-02-23) 0.27 (TOKUHIROM on 2011-02-20) 0.26 (TOKUHIROM on 2011-02-17) 0.25 (TOKUHIROM on 2011-02-17) 0.24 (TOKUHIROM on 2011-02-08) 0.23 (TOKUHIROM on 2011-01-31) 0.22 (TOKUHIROM on 2011-01-26) 0.21 (TOKUHIROM on 2011-01-11) 0.20 (TOKUHIROM on 2010-12-21) 0.19 (TOKUHIROM on 2010-12-21) 0.18 (TOKUHIROM on 2010-12-06) 0.17 (TOKUHIROM on 2010-12-03) 0.16 (TOKUHIROM on 2010-12-02) 0.15 (TOKUHIROM on 2010-11-29) 0.14 (TOKUHIROM on 2010-11-22) 0.13 (TOKUHIROM on 2010-11-16) 0.12 (TOKUHIROM on 2010-11-11) 0.11 (TOKUHIROM on 2010-11-05) 0.10 (TOKUHIROM on 2010-11-03) 0.09 (TOKUHIROM on 2010-11-02) 0.08 (TOKUHIROM on 2010-11-02) 0.07 (TOKUHIROM on 2010-11-01) 0.06 (TOKUHIROM on 2010-11-01) 0.05 (TOKUHIROM on 2010-10-31) 0.04 (TOKUHIROM on 2010-10-26) 0.03 (TOKUHIROM on 2010-10-26) 0.01 (TOKUHIROM on 2010-10-24) Furl-3.08 32 ++ 32 ++  / Furl 06 Aug 2015 09:34:27 GMT Module version: 3.08 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues 4 (2 reviews) Testers (1604 / 35 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (64.74Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 3.07 (TOKUHIROM on 2015-04-21) 3.06 (TOKUHIROM on 2015-02-09) 3.05 (TOKUHIROM on 2014-09-24) 3.04 (TOKUHIROM on 2014-09-22) 3.03 (TOKUHIROM on 2014-07-09) 3.02 (TOKUHIROM on 2014-03-18) 3.01 (TOKUHIROM on 2014-02-13) 3.00 (TOKUHIROM on 2013-11-13) 2.19 (TOKUHIROM on 2013-08-26) 2.18 (TOKUHIROM on 2013-08-08) 2.17 (TOKUHIROM on 2013-07-01) 2.16 (TOKUHIROM on 2013-05-22) 2.15 (TOKUHIROM on 2013-05-10) 2.14 (TOKUHIROM on 2013-04-19) 2.13 (TOKUHIROM on 2013-04-17) 2.12 (TOKUHIROM on 2013-04-15) 2.11 (TOKUHIROM on 2013-04-04) 2.10 (TOKUHIROM on 2013-03-18) 2.09 (TOKUHIROM on 2013-03-06) 2.08 (TOKUHIROM on 2013-03-06) 2.07 (TOKUHIROM on 2013-03-02) 2.06 (TOKUHIROM on 2013-02-14) 2.05 (TOKUHIROM on 2013-02-12) 2.04 (TOKUHIROM on 2013-02-12) 2.03 (TOKUHIROM on 2013-02-09) 2.02 (TOKUHIROM on 2013-02-06) 2.01 (TOKUHIROM on 2013-01-23) 2.00 (TOKUHIROM on 2013-01-23) 1.04 (TOKUHIROM on 2013-01-23) 1.03 (TOKUHIROM on 2013-01-13) 1.02 (TOKUHIROM on 2013-01-07) 1.01 (TOKUHIROM on 2013-01-04) 1.00 (TOKUHIROM on 2012-10-19) 0.42 (TOKUHIROM on 2012-10-16) 0.41 (TOKUHIROM on 2012-09-25) 0.40 (TOKUHIROM on 2012-06-04) 0.39 (TOKUHIROM on 2012-05-30) 0.38 (TOKUHIROM on 2011-09-06) 0.37 (TOKUHIROM on 2011-08-25) 0.36 (TOKUHIROM on 2011-08-24) 0.35 (TOKUHIROM on 2011-08-11) 0.34 (TOKUHIROM on 2011-07-15) 0.33 (TOKUHIROM on 2011-07-14) 0.32 (TOKUHIROM on 2011-05-30) 0.31 (TOKUHIROM on 2011-02-26) 0.30 (TOKUHIROM on 2011-02-25) 0.29 (TOKUHIROM on 2011-02-24) 0.28 (TOKUHIROM on 2011-02-23) 0.27 (TOKUHIROM on 2011-02-20) 0.26 (TOKUHIROM on 2011-02-17) 0.25 (TOKUHIROM on 2011-02-17) 0.24 (TOKUHIROM on 2011-02-08) 0.23 (TOKUHIROM on 2011-01-31) 0.22 (TOKUHIROM on 2011-01-26) 0.21 (TOKUHIROM on 2011-01-11) 0.20 (TOKUHIROM on 2010-12-21) 0.19 (TOKUHIROM on 2010-12-21) 0.18 (TOKUHIROM on 2010-12-06) 0.17 (TOKUHIROM on 2010-12-03) 0.16 (TOKUHIROM on 2010-12-02) 0.15 (TOKUHIROM on 2010-11-29) 0.14 (TOKUHIROM on 2010-11-22) 0.13 (TOKUHIROM on 2010-11-16) 0.12 (TOKUHIROM on 2010-11-11) 0.11 (TOKUHIROM on 2010-11-05) 0.10 (TOKUHIROM on 2010-11-03) 0.09 (TOKUHIROM on 2010-11-02) 0.08 (TOKUHIROM on 2010-11-02) 0.07 (TOKUHIROM on 2010-11-01) 0.06 (TOKUHIROM on 2010-11-01) 0.05 (TOKUHIROM on 2010-10-31) 0.04 (TOKUHIROM on 2010-10-26) 0.03 (TOKUHIROM on 2010-10-26) 0.01 (TOKUHIROM on 2010-10-24) Diff with version 3.07 (TOKUHIROM on 2015-04-21) 3.06 (TOKUHIROM on 2015-02-09) 3.05 (TOKUHIROM on 2014-09-24) 3.04 (TOKUHIROM on 2014-09-22) 3.03 (TOKUHIROM on 2014-07-09) 3.02 (TOKUHIROM on 2014-03-18) 3.01 (TOKUHIROM on 2014-02-13) 3.00 (TOKUHIROM on 2013-11-13) 2.19 (TOKUHIROM on 2013-08-26) 2.18 (TOKUHIROM on 2013-08-08) 2.17 (TOKUHIROM on 2013-07-01) 2.16 (TOKUHIROM on 2013-05-22) 2.15 (TOKUHIROM on 2013-05-10) 2.14 (TOKUHIROM on 2013-04-19) 2.13 (TOKUHIROM on 2013-04-17) 2.12 (TOKUHIROM on 2013-04-15) 2.11 (TOKUHIROM on 2013-04-04) 2.10 (TOKUHIROM on 2013-03-18) 2.09 (TOKUHIROM on 2013-03-06) 2.08 (TOKUHIROM on 2013-03-06) 2.07 (TOKUHIROM on 2013-03-02) 2.06 (TOKUHIROM on 2013-02-14) 2.05 (TOKUHIROM on 2013-02-12) 2.04 (TOKUHIROM on 2013-02-12) 2.03 (TOKUHIROM on 2013-02-09) 2.02 (TOKUHIROM on 2013-02-06) 2.01 (TOKUHIROM on 2013-01-23) 2.00 (TOKUHIROM on 2013-01-23) 1.04 (TOKUHIROM on 2013-01-23) 1.03 (TOKUHIROM on 2013-01-13) 1.02 (TOKUHIROM on 2013-01-07) 1.01 (TOKUHIROM on 2013-01-04) 1.00 (TOKUHIROM on 2012-10-19) 0.42 (TOKUHIROM on 2012-10-16) 0.41 (TOKUHIROM on 2012-09-25) 0.40 (TOKUHIROM on 2012-06-04) 0.39 (TOKUHIROM on 2012-05-30) 0.38 (TOKUHIROM on 2011-09-06) 0.37 (TOKUHIROM on 2011-08-25) 0.36 (TOKUHIROM on 2011-08-24) 0.35 (TOKUHIROM on 2011-08-11) 0.34 (TOKUHIROM on 2011-07-15) 0.33 (TOKUHIROM on 2011-07-14) 0.32 (TOKUHIROM on 2011-05-30) 0.31 (TOKUHIROM on 2011-02-26) 0.30 (TOKUHIROM on 2011-02-25) 0.29 (TOKUHIROM on 2011-02-24) 0.28 (TOKUHIROM on 2011-02-23) 0.27 (TOKUHIROM on 2011-02-20) 0.26 (TOKUHIROM on 2011-02-17) 0.25 (TOKUHIROM on 2011-02-17) 0.24 (TOKUHIROM on 2011-02-08) 0.23 (TOKUHIROM on 2011-01-31) 0.22 (TOKUHIROM on 2011-01-26) 0.21 (TOKUHIROM on 2011-01-11) 0.20 (TOKUHIROM on 2010-12-21) 0.19 (TOKUHIROM on 2010-12-21) 0.18 (TOKUHIROM on 2010-12-06) 0.17 (TOKUHIROM on 2010-12-03) 0.16 (TOKUHIROM on 2010-12-02) 0.15 (TOKUHIROM on 2010-11-29) 0.14 (TOKUHIROM on 2010-11-22) 0.13 (TOKUHIROM on 2010-11-16) 0.12 (TOKUHIROM on 2010-11-11) 0.11 (TOKUHIROM on 2010-11-05) 0.10 (TOKUHIROM on 2010-11-03) 0.09 (TOKUHIROM on 2010-11-02) 0.08 (TOKUHIROM on 2010-11-02) 0.07 (TOKUHIROM on 2010-11-01) 0.06 (TOKUHIROM on 2010-11-01) 0.05 (TOKUHIROM on 2010-10-31) 0.04 (TOKUHIROM on 2010-10-26) 0.03 (TOKUHIROM on 2010-10-26) 0.01 (TOKUHIROM on 2010-10-24) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 15 PAUSE users 17 non-PAUSE users. TOKUHIROM MATSUNO★Tokuhiro and 20 contributors show them Tokuhiro Matsuno Keiji, Yoshimi Fuji, Goro lestrrat Audrey Tang mattn Fuji Goro s-aska ikasam_a xaicron Syohei YOSHIDA Neil Bowers Toshio Ito bayashi Masahiro Nagano HIROSE Masaaki Kazuho Oku Jari Salmela tarao kimoto Dependencies Class::Accessor::Lite Encode HTTP::Parser::XS MIME::Base64 Mozilla::CA Scalar::Util Socket Time::HiRes CPAN Testers List Reverse dependencies Dependency graph × Furl-3.08 NAME SYNOPSIS DESCRIPTION INTERFACE Class Methods Furl->new(%args | \%args) :Furl Instance Methods $furl->request([$request,] %args) :Furl::Response $furl->get($url :Str, $headers :ArrayRef[Str] ) $furl->head($url :Str, $headers :ArrayRef[Str] ) $furl->post($url :Str, $headers :ArrayRef[Str], $content :Any) $furl->put($url :Str, $headers :ArrayRef[Str], $content :Any) $furl->delete($url :Str, $headers :ArrayRef[Str] ) $furl->env_proxy() FAQ AUTHOR THANKS TO SEE ALSO LICENSE NAME Furl - Lightning-fast URL fetcher SYNOPSIS     use Furl;      my $furl = Furl->new(         agent   => 'MyGreatUA/2.0',         timeout => 10,     );      my $res = $furl->get('http://example.com/');     die $res->status_line unless $res->is_success;     print $res->content;      my $res = $furl->post(         'http://example.com/', # URL         [...],                 # headers         [ foo => 'bar' ],      # form data (HashRef/FileHandle are also okay)     );      # Accept-Encoding is supported but optional     $furl = Furl->new(         headers => [ 'Accept-Encoding' => 'gzip' ],     );     my $body = $furl->get('http://example.com/some/compressed'); DESCRIPTION Furl is yet another HTTP client library. LWP is the de facto standard HTTP client for Perl 5, but it is too slow for some critical jobs, and too complex for weekend hacking. Furl resolves these issues. Enjoy it! INTERFACE Class Methods Furl->new(%args | \%args) :Furl Creates and returns a new Furl client with %args. Dies on errors. %args might be: agent :Str = ""Furl/$VERSION"" timeout :Int = 10 max_redirects :Int = 7 capture_request :Bool = false If this parameter is true, Furl::HTTP captures raw request string. You can get it by $res->captured_req_headers and $res->captured_req_content. proxy :Str no_proxy :Str headers :ArrayRef cookie_jar :Object (EXPERIMENTAL) An instance of HTTP::CookieJar or equivalent class that supports the add and cookie_header methods Instance Methods $furl->request([$request,] %args) :Furl::Response Sends an HTTP request to a specified URL and returns a instance of Furl::Response. %args might be: scheme :Str = ""http"" Protocol scheme. May be http or https. host :Str Server host to connect. You must specify at least host or url. port :Int = 80 Server port to connect. The default is 80 on scheme => 'http', or 443 on scheme => 'https'. path_query :Str = ""/"" Path and query to request. url :Str URL to request. You can use url instead of scheme, host, port and path_query. headers :ArrayRef HTTP request headers. e.g. headers => [ 'Accept-Encoding' => 'gzip' ]. content : Str | ArrayRef[Str] | HashRef[Str] | FileHandle Content to request. If the number of arguments is an odd number, this method assumes that the first argument is an instance of HTTP::Request. Remaining arguments can be any of the previously describe values (but currently there's no way to really utilize them, so don't use it)     my $req = HTTP::Request->new(...);     my $res = $furl->request($req); You can also specify an object other than HTTP::Request (e.g. Furl::Request), but the object must implement the following methods: uri method content headers These must return the same type of values as their counterparts in HTTP::Request. You must encode all the queries or this method will die, saying Wide character in .... $furl->get($url :Str, $headers :ArrayRef[Str] ) This is an easy-to-use alias to request(), sending the GET method. $furl->head($url :Str, $headers :ArrayRef[Str] ) This is an easy-to-use alias to request(), sending the HEAD method. $furl->post($url :Str, $headers :ArrayRef[Str], $content :Any) This is an easy-to-use alias to request(), sending the POST method. $furl->put($url :Str, $headers :ArrayRef[Str], $content :Any) This is an easy-to-use alias to request(), sending the PUT method. $furl->delete($url :Str, $headers :ArrayRef[Str] ) This is an easy-to-use alias to request(), sending the DELETE method. $furl->env_proxy() Loads proxy settings from $ENV{HTTP_PROXY} and $ENV{NO_PROXY}. FAQ Does Furl depends on XS modules? No. Although some optional features require XS modules, basic features are available without XS modules. Note that Furl requires HTTP::Parser::XS, which seems an XS module but includes a pure Perl backend, HTTP::Parser::XS::PP. I need more speed. See Furl::HTTP, which provides the low level interface of Furl. It is faster than Furl.pm since Furl::HTTP does not create response objects. How do you use cookie_jar? Furl does not directly support the cookie_jar option available in LWP. You can use HTTP::Cookies, HTTP::Request, HTTP::Response like following.     my $f = Furl->new();     my $cookies = HTTP::Cookies->new();     my $req = HTTP::Request->new(...);     $cookies->add_cookie_header($req);     my $res = $f->request($req)->as_http_response;     $res->request($req);     $cookies->extract_cookies($res);     # and use $res. How do you limit the response content length? You can limit the content length by callback function.     my $f = Furl->new();     my $content = '';     my $limit = 1_000_000;     my %special_headers = ('content-length' => undef);     my $res = $f->request(         method          => 'GET',         url             => $url,         special_headers => \%special_headers,         write_code      => sub {             my ( $status, $msg, $headers, $buf ) = @_;             if (($special_headers{'content-length'}||0) > $limit || length($content) > $limit) {                 die ""over limit: $limit"";             }             $content .= $buf;         }     ); How do you display the progress bar?     my $bar = Term::ProgressBar->new({count => 1024, ETA => 'linear'});     $bar->minor(0);     $bar->max_update_rate(1);      my $f = Furl->new();     my $content = '';     my %special_headers = ('content-length' => undef);;     my $did_set_target = 0;     my $received_size = 0;     my $next_update  = 0;     $f->request(         method          => 'GET',         url             => $url,         special_headers => \%special_headers,         write_code      => sub {             my ( $status, $msg, $headers, $buf ) = @_;             unless ($did_set_target) {                 if ( my $cl = $special_headers{'content-length'} ) {                     $bar->target($cl);                     $did_set_target++;                 }                 else {                     $bar->target( $received_size + 2 * length($buf) );                 }             }             $received_size += length($buf);             $content .= $buf;             $next_update = $bar->update($received_size)             if $received_size >= $next_update;         }     ); HTTPS requests claims warnings! When you make https requests, IO::Socket::SSL may complain about it like:     *******************************************************************      Using the default of SSL_verify_mode of SSL_VERIFY_NONE for client      is depreciated! Please set SSL_verify_mode to SSL_VERIFY_PEER      together with SSL_ca_file|SSL_ca_path for verification.      If you really don't want to verify the certificate and keep the      connection open to Man-In-The-Middle attacks please set      SSL_verify_mode explicitly to SSL_VERIFY_NONE in your application.     ******************************************************************* You should set SSL_verify_mode explicitly with Furl's ssl_opts.     use IO::Socket::SSL;      my $ua = Furl->new(         ssl_opts => {             SSL_verify_mode => SSL_VERIFY_PEER(),         },     ); See IO::Socket::SSL for details. AUTHOR Tokuhiro Matsuno <tokuhirom@gmail.com> Fuji, Goro (gfx) THANKS TO Kazuho Oku mala mattn lestrrat walf443 lestrrat audreyt SEE ALSO LWP IO::Socket::SSL Furl::HTTP Furl::Response LICENSE Copyright (C) Tokuhiro Matsuno. This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself. × Module Install Instructions To install Furl, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Furl CPAN shell                      perl -MCPAN -e shell                     install Furl For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Faster HTTP(S) Client"	"true"
"Protocol"	"HTTP::Tiny"	"https://metacpan.org/pod/HTTP::Tiny"	"Minimal and fast client. Included in the standard packages."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"HTTP::Tiny - A small, simple, correct HTTP/1.1 client - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors David Golden  /  0.058 (DAGOLDEN on 2016-05-03) 0.056 (DAGOLDEN on 2015-05-19) 0.054 (DAGOLDEN on 2015-01-27) 0.057 DEV (DAGOLDEN on 2016-04-18) 0.055 DEV (DAGOLDEN on 2015-05-07) 0.053 (DAGOLDEN on 2014-12-12) 0.052 (DAGOLDEN on 2014-12-11) 0.051 (DAGOLDEN on 2014-11-18) 0.050 (DAGOLDEN on 2014-09-23) 0.049 (DAGOLDEN on 2014-09-02) 0.048 (DAGOLDEN on 2014-08-21) 0.047 (DAGOLDEN on 2014-07-29) 0.046 (DAGOLDEN on 2014-07-21) 0.045 DEV (DAGOLDEN on 2014-07-20) 0.044 (DAGOLDEN on 2014-07-17) 0.043 (DAGOLDEN on 2014-02-21) 0.042 (DAGOLDEN on 2014-02-18) 0.041 (DAGOLDEN on 2014-02-17) 0.040 (DAGOLDEN on 2014-02-17) 0.039 (DAGOLDEN on 2013-11-28) 0.038 (DAGOLDEN on 2013-11-18) 0.037 (DAGOLDEN on 2013-10-28) 0.036 (DAGOLDEN on 2013-09-25) 0.035 (DAGOLDEN on 2013-09-10) 0.034 (DAGOLDEN on 2013-06-26) 0.033 (DAGOLDEN on 2013-06-21) 0.032 (DAGOLDEN on 2013-06-20) 0.031 (DAGOLDEN on 2013-06-17) 0.030 (DAGOLDEN on 2013-06-13) 0.029 (DAGOLDEN on 2013-04-17) 0.028 (DAGOLDEN on 2013-03-05) 0.027 (DAGOLDEN on 2013-03-05) 0.026 (DAGOLDEN on 2013-03-05) 0.025 (DAGOLDEN on 2012-12-26) 0.024 (DAGOLDEN on 2012-10-10) 0.023 DEV (DAGOLDEN on 2012-09-19) 0.022 (DAGOLDEN on 2012-06-02) 0.021 (DAGOLDEN on 2012-05-16) 0.020 (DAGOLDEN on 2012-05-14) 0.019 (DAGOLDEN on 2012-05-14) 0.018 (DAGOLDEN on 2012-04-18) 0.017 (DAGOLDEN on 2012-02-23) 0.016 (DAGOLDEN on 2011-10-27) 0.015 (DAGOLDEN on 2011-10-26) 0.014 (DAGOLDEN on 2011-10-20) 0.013 (DAGOLDEN on 2011-07-18) 0.012 (DAGOLDEN on 2011-03-31) 0.011 (DAGOLDEN on 2011-03-20) 0.010 (DAGOLDEN on 2011-02-04) 0.009 (DAGOLDEN on 2011-01-17) 0.008 (DAGOLDEN on 2011-01-14) 0.007 (DAGOLDEN on 2011-01-12) 0.006 (DAGOLDEN on 2011-01-10) 0.005 (DAGOLDEN on 2011-01-08) 0.004 (DAGOLDEN on 2010-12-16) 0.003 (DAGOLDEN on 2010-12-15) 0.002 (DAGOLDEN on 2010-12-14) 0.001 (DAGOLDEN on 2010-12-11) HTTP-Tiny-0.058 77 ++ 77 ++  / HTTP::Tiny 03 May 2016 17:49:33 GMT Module version: 0.058 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues 5 (7 reviews) Testers Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (65.38Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.056 (DAGOLDEN on 2015-05-19) 0.054 (DAGOLDEN on 2015-01-27) 0.057 DEV (DAGOLDEN on 2016-04-18) 0.055 DEV (DAGOLDEN on 2015-05-07) 0.053 (DAGOLDEN on 2014-12-12) 0.052 (DAGOLDEN on 2014-12-11) 0.051 (DAGOLDEN on 2014-11-18) 0.050 (DAGOLDEN on 2014-09-23) 0.049 (DAGOLDEN on 2014-09-02) 0.048 (DAGOLDEN on 2014-08-21) 0.047 (DAGOLDEN on 2014-07-29) 0.046 (DAGOLDEN on 2014-07-21) 0.045 DEV (DAGOLDEN on 2014-07-20) 0.044 (DAGOLDEN on 2014-07-17) 0.043 (DAGOLDEN on 2014-02-21) 0.042 (DAGOLDEN on 2014-02-18) 0.041 (DAGOLDEN on 2014-02-17) 0.040 (DAGOLDEN on 2014-02-17) 0.039 (DAGOLDEN on 2013-11-28) 0.038 (DAGOLDEN on 2013-11-18) 0.037 (DAGOLDEN on 2013-10-28) 0.036 (DAGOLDEN on 2013-09-25) 0.035 (DAGOLDEN on 2013-09-10) 0.034 (DAGOLDEN on 2013-06-26) 0.033 (DAGOLDEN on 2013-06-21) 0.032 (DAGOLDEN on 2013-06-20) 0.031 (DAGOLDEN on 2013-06-17) 0.030 (DAGOLDEN on 2013-06-13) 0.029 (DAGOLDEN on 2013-04-17) 0.028 (DAGOLDEN on 2013-03-05) 0.027 (DAGOLDEN on 2013-03-05) 0.026 (DAGOLDEN on 2013-03-05) 0.025 (DAGOLDEN on 2012-12-26) 0.024 (DAGOLDEN on 2012-10-10) 0.023 DEV (DAGOLDEN on 2012-09-19) 0.022 (DAGOLDEN on 2012-06-02) 0.021 (DAGOLDEN on 2012-05-16) 0.020 (DAGOLDEN on 2012-05-14) 0.019 (DAGOLDEN on 2012-05-14) 0.018 (DAGOLDEN on 2012-04-18) 0.017 (DAGOLDEN on 2012-02-23) 0.016 (DAGOLDEN on 2011-10-27) 0.015 (DAGOLDEN on 2011-10-26) 0.014 (DAGOLDEN on 2011-10-20) 0.013 (DAGOLDEN on 2011-07-18) 0.012 (DAGOLDEN on 2011-03-31) 0.011 (DAGOLDEN on 2011-03-20) 0.010 (DAGOLDEN on 2011-02-04) 0.009 (DAGOLDEN on 2011-01-17) 0.008 (DAGOLDEN on 2011-01-14) 0.007 (DAGOLDEN on 2011-01-12) 0.006 (DAGOLDEN on 2011-01-10) 0.005 (DAGOLDEN on 2011-01-08) 0.004 (DAGOLDEN on 2010-12-16) 0.003 (DAGOLDEN on 2010-12-15) 0.002 (DAGOLDEN on 2010-12-14) 0.001 (DAGOLDEN on 2010-12-11) Diff with version 0.056 (DAGOLDEN on 2015-05-19) 0.054 (DAGOLDEN on 2015-01-27) 0.057 DEV (DAGOLDEN on 2016-04-18) 0.055 DEV (DAGOLDEN on 2015-05-07) 0.053 (DAGOLDEN on 2014-12-12) 0.052 (DAGOLDEN on 2014-12-11) 0.051 (DAGOLDEN on 2014-11-18) 0.050 (DAGOLDEN on 2014-09-23) 0.049 (DAGOLDEN on 2014-09-02) 0.048 (DAGOLDEN on 2014-08-21) 0.047 (DAGOLDEN on 2014-07-29) 0.046 (DAGOLDEN on 2014-07-21) 0.045 DEV (DAGOLDEN on 2014-07-20) 0.044 (DAGOLDEN on 2014-07-17) 0.043 (DAGOLDEN on 2014-02-21) 0.042 (DAGOLDEN on 2014-02-18) 0.041 (DAGOLDEN on 2014-02-17) 0.040 (DAGOLDEN on 2014-02-17) 0.039 (DAGOLDEN on 2013-11-28) 0.038 (DAGOLDEN on 2013-11-18) 0.037 (DAGOLDEN on 2013-10-28) 0.036 (DAGOLDEN on 2013-09-25) 0.035 (DAGOLDEN on 2013-09-10) 0.034 (DAGOLDEN on 2013-06-26) 0.033 (DAGOLDEN on 2013-06-21) 0.032 (DAGOLDEN on 2013-06-20) 0.031 (DAGOLDEN on 2013-06-17) 0.030 (DAGOLDEN on 2013-06-13) 0.029 (DAGOLDEN on 2013-04-17) 0.028 (DAGOLDEN on 2013-03-05) 0.027 (DAGOLDEN on 2013-03-05) 0.026 (DAGOLDEN on 2013-03-05) 0.025 (DAGOLDEN on 2012-12-26) 0.024 (DAGOLDEN on 2012-10-10) 0.023 DEV (DAGOLDEN on 2012-09-19) 0.022 (DAGOLDEN on 2012-06-02) 0.021 (DAGOLDEN on 2012-05-16) 0.020 (DAGOLDEN on 2012-05-14) 0.019 (DAGOLDEN on 2012-05-14) 0.018 (DAGOLDEN on 2012-04-18) 0.017 (DAGOLDEN on 2012-02-23) 0.016 (DAGOLDEN on 2011-10-27) 0.015 (DAGOLDEN on 2011-10-26) 0.014 (DAGOLDEN on 2011-10-20) 0.013 (DAGOLDEN on 2011-07-18) 0.012 (DAGOLDEN on 2011-03-31) 0.011 (DAGOLDEN on 2011-03-20) 0.010 (DAGOLDEN on 2011-02-04) 0.009 (DAGOLDEN on 2011-01-17) 0.008 (DAGOLDEN on 2011-01-14) 0.007 (DAGOLDEN on 2011-01-12) 0.006 (DAGOLDEN on 2011-01-10) 0.005 (DAGOLDEN on 2011-01-08) 0.004 (DAGOLDEN on 2010-12-16) 0.003 (DAGOLDEN on 2010-12-15) 0.002 (DAGOLDEN on 2010-12-14) 0.001 (DAGOLDEN on 2010-12-11) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 48 PAUSE users 29 non-PAUSE users. DAGOLDEN David Golden and 28 contributors show them Christian Hansen Alan Gardner Alessandro Ghedini A. Sinan Unur Brad Gilbert brian m. carlson Chris Nehren Chris Weyl Claes Jakobsson Clinton Gormley Dean Pearce Edward Zborowski James Raspass Jeremy Mates Jess Robinson Lukas Eklund Martin J. Evans Martin-Louis Bright Mike Doherty Olaf Alders Olivier Mengué Petr Písař SkyMarshal Sören Kornetzki Syohei YOSHIDA Tatsuhiko Miyagawa Tom Hukins Tony Cook Dependencies bytes Carp Fcntl IO::Socket MIME::Base64 Socket strict Time::Local warnings CPAN Testers List Reverse dependencies Dependency graph × HTTP-Tiny-0.058 NAME VERSION SYNOPSIS DESCRIPTION METHODS new get|head|put|post|delete post_form mirror request www_form_urlencode can_ssl connected SSL SUPPORT PROXY SUPPORT LIMITATIONS SEE ALSO SUPPORT Bugs / Feature Requests Source Code AUTHORS CONTRIBUTORS COPYRIGHT AND LICENSE NAME HTTP::Tiny - A small, simple, correct HTTP/1.1 client VERSION version 0.058 SYNOPSIS     use HTTP::Tiny;      my $response = HTTP::Tiny->new->get('http://example.com/');      die ""Failed!\n"" unless $response->{success};      print ""$response->{status} $response->{reason}\n"";      while (my ($k, $v) = each %{$response->{headers}}) {         for (ref $v eq 'ARRAY' ? @$v : $v) {             print ""$k: $_\n"";         }     }      print $response->{content} if length $response->{content}; DESCRIPTION This is a very simple HTTP/1.1 client, designed for doing simple requests without the overhead of a large framework like LWP::UserAgent. It is more correct and more complete than HTTP::Lite. It supports proxies and redirection. It also correctly resumes after EINTR. If IO::Socket::IP 0.25 or later is installed, HTTP::Tiny will use it instead of IO::Socket::INET for transparent support for both IPv4 and IPv6. Cookie support requires HTTP::CookieJar or an equivalent class. METHODS new     $http = HTTP::Tiny->new( %attributes ); This constructor returns a new HTTP::Tiny object. Valid attributes include: agent — A user-agent string (defaults to 'HTTP-Tiny/$VERSION'). If agent — ends in a space character, the default user-agent string is appended. cookie_jar — An instance of HTTP::CookieJar — or equivalent class that supports the add and cookie_header methods default_headers — A hashref of default headers to apply to requests local_address — The local IP address to bind to keep_alive — Whether to reuse the last connection (if for the same scheme, host and port) (defaults to 1) max_redirect — Maximum number of redirects allowed (defaults to 5) max_size — Maximum response size in bytes (only when not using a data callback). If defined, responses larger than this will return an exception. http_proxy — URL of a proxy server to use for HTTP connections (default is $ENV{http_proxy} — if set) https_proxy — URL of a proxy server to use for HTTPS connections (default is $ENV{https_proxy} — if set) proxy — URL of a generic proxy server for both HTTP and HTTPS connections (default is $ENV{all_proxy} — if set) no_proxy — List of domain suffixes that should not be proxied. Must be a comma-separated string or an array reference. (default is $ENV{no_proxy} —) timeout — Request timeout in seconds (default is 60) If a socket open, read or write takes longer than the timeout, an exception is thrown. verify_SSL — A boolean that indicates whether to validate the SSL certificate of an https — connection (default is false) SSL_options — A hashref of SSL_* — options to pass through to IO::Socket::SSL Passing an explicit undef for proxy, http_proxy or https_proxy will prevent getting the corresponding proxies from the environment. Exceptions from max_size, timeout or other errors will result in a pseudo-HTTP status code of 599 and a reason of ""Internal Exception"". The content field in the response will contain the text of the exception. The keep_alive parameter enables a persistent connection, but only to a single destination scheme, host and port. Also, if any connection-relevant attributes are modified, or if the process ID or thread ID change, the persistent connection will be dropped. If you want persistent connections across multiple destinations, use multiple HTTP::Tiny objects. See ""SSL SUPPORT"" for more on the verify_SSL and SSL_options attributes. get|head|put|post|delete     $response = $http->get($url);     $response = $http->get($url, \%options);     $response = $http->head($url); These methods are shorthand for calling request() for the given method. The URL must have unsafe characters escaped and international domain names encoded. See request() for valid options and a description of the response. The success field of the response will be true if the status code is 2XX. post_form     $response = $http->post_form($url, $form_data);     $response = $http->post_form($url, $form_data, \%options); This method executes a POST request and sends the key/value pairs from a form data hash or array reference to the given URL with a content-type of application/x-www-form-urlencoded. If data is provided as an array reference, the order is preserved; if provided as a hash reference, the terms are sorted on key and value for consistency. See documentation for the www_form_urlencode method for details on the encoding. The URL must have unsafe characters escaped and international domain names encoded. See request() for valid options and a description of the response. Any content-type header or content in the options hashref will be ignored. The success field of the response will be true if the status code is 2XX. mirror     $response = $http->mirror($url, $file, \%options)     if ( $response->{success} ) {         print ""$file is up to date\n"";     } Executes a GET request for the URL and saves the response body to the file name provided. The URL must have unsafe characters escaped and international domain names encoded. If the file already exists, the request will include an If-Modified-Since header with the modification timestamp of the file. You may specify a different If-Modified-Since header yourself in the $options->{headers} hash. The success field of the response will be true if the status code is 2XX or if the status code is 304 (unmodified). If the file was modified and the server response includes a properly formatted Last-Modified header, the file modification time will be updated accordingly. request     $response = $http->request($method, $url);     $response = $http->request($method, $url, \%options); Executes an HTTP request of the given method type ('GET', 'HEAD', 'POST', 'PUT', etc.) on the given URL. The URL must have unsafe characters escaped and international domain names encoded. If the URL includes a ""user:password"" stanza, they will be used for Basic-style authorization headers. (Authorization headers will not be included in a redirected request.) For example:     $http->request('GET', 'http://Aladdin:open sesame@example.com/'); If the ""user:password"" stanza contains reserved characters, they must be percent-escaped:     $http->request('GET', 'http://john%40example.com:password@example.com/'); A hashref of options may be appended to modify the request. Valid options are: headers — A hashref containing headers to include with the request. If the value for a header is an array reference, the header will be output multiple times with each value in the array. These headers over-write any default headers. content — A scalar to include as the body of the request OR a code reference that will be called iteratively to produce the body of the request trailer_callback — A code reference that will be called if it exists to provide a hashref of trailing headers (only used with chunked transfer-encoding) data_callback — A code reference that will be called for each chunks of the response body received. peer — Override host resolution and force all connections to go only to a specific peer address, regardless of the URL of the request. This will include any redirections! This options should be used with extreme caution (e.g. debugging or very special circumstances). The Host header is generated from the URL in accordance with RFC 2616. It is a fatal error to specify Host in the headers option. Other headers may be ignored or overwritten if necessary for transport compliance. If the content option is a code reference, it will be called iteratively to provide the content body of the request. It should return the empty string or undef when the iterator is exhausted. If the content option is the empty string, no content-type or content-length headers will be generated. If the data_callback option is provided, it will be called iteratively until the entire response body is received. The first argument will be a string containing a chunk of the response body, the second argument will be the in-progress response hash reference, as described below. (This allows customizing the action of the callback based on the status or headers received prior to the content body.) The request method returns a hashref containing the response. The hashref will have the following keys: success — Boolean indicating whether the operation returned a 2XX status code url — URL that provided the response. This is the URL of the request unless there were redirections, in which case it is the last URL queried in a redirection chain status — The HTTP status code of the response reason — The response phrase returned by the server content — The body of the response. If the response does not have any content or if a data callback is provided to consume the response body, this will be the empty string headers — A hashref of header fields. All header field names will be normalized to be lower case. If a header is repeated, the value will be an arrayref; it will otherwise be a scalar string containing the value redirects If this field exists, it is an arrayref of response hash references from redirects in the same order that redirections occurred. If it does not exist, then no redirections occurred. On an exception during the execution of the request, the status field will contain 599, and the content field will contain the text of the exception. www_form_urlencode     $params = $http->www_form_urlencode( $data );     $response = $http->get(""http://example.com/query?$params""); This method converts the key/value pairs from a data hash or array reference into a x-www-form-urlencoded string. The keys and values from the data reference will be UTF-8 encoded and escaped per RFC 3986. If a value is an array reference, the key will be repeated with each of the values of the array reference. If data is provided as a hash reference, the key/value pairs in the resulting string will be sorted by key and value for consistent ordering. can_ssl     $ok         = HTTP::Tiny->can_ssl;     ($ok, $why) = HTTP::Tiny->can_ssl;     ($ok, $why) = $http->can_ssl; Indicates if SSL support is available. When called as a class object, it checks for the correct version of Net::SSLeay and IO::Socket::SSL. When called as an object methods, if SSL_verify is true or if SSL_verify_mode is set in SSL_options, it checks that a CA file is available. In scalar context, returns a boolean indicating if SSL is available. In list context, returns the boolean and a (possibly multi-line) string of errors indicating why SSL isn't available. connected     $host = $http->connected;     ($host, $port) = $http->connected; Indicates if a connection to a peer is being kept alive, per the keep_alive option. In scalar context, returns the peer host and port, joined with a colon, or undef (if no peer is connected). In list context, returns the peer host and port or an empty list (if no peer is connected). Note: This method cannot reliably be used to discover whether the remote host has closed its end of the socket. SSL SUPPORT Direct https connections are supported only if IO::Socket::SSL 1.56 or greater and Net::SSLeay 1.49 or greater are installed. An exception will be thrown if new enough versions of these modules are not installed or if the SSL encryption fails. You can also use HTTP::Tiny::can_ssl() utility function that returns boolean to see if the required modules are installed. An https connection may be made via an http proxy that supports the CONNECT command (i.e. RFC 2817). You may not proxy https via a proxy that itself requires https to communicate. SSL provides two distinct capabilities: Encrypted communication channel Verification of server identity By default, HTTP::Tiny does not verify server identity. Server identity verification is controversial and potentially tricky because it depends on a (usually paid) third-party Certificate Authority (CA) trust model to validate a certificate as legitimate. This discriminates against servers with self-signed certificates or certificates signed by free, community-driven CA's such as CAcert.org. By default, HTTP::Tiny does not make any assumptions about your trust model, threat level or risk tolerance. It just aims to give you an encrypted channel when you need one. Setting the verify_SSL attribute to a true value will make HTTP::Tiny verify that an SSL connection has a valid SSL certificate corresponding to the host name of the connection and that the SSL certificate has been verified by a CA. Assuming you trust the CA, this will protect against a man-in-the-middle attack. If you are concerned about security, you should enable this option. Certificate verification requires a file containing trusted CA certificates. If the environment variable SSL_CERT_FILE is present, HTTP::Tiny will try to find a CA certificate file in that location. If the Mozilla::CA module is installed, HTTP::Tiny will use the CA file included with it as a source of trusted CA's. (This means you trust Mozilla, the author of Mozilla::CA, the CPAN mirror where you got Mozilla::CA, the toolchain used to install it, and your operating system security, right?) If that module is not available, then HTTP::Tiny will search several system-specific default locations for a CA certificate file: /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt /etc/ssl/ca-bundle.pem An exception will be raised if verify_SSL is true and no CA certificate file is available. If you desire complete control over SSL connections, the SSL_options attribute lets you provide a hash reference that will be passed through to IO::Socket::SSL::start_SSL(), overriding any options set by HTTP::Tiny. For example, to provide your own trusted CA file:     SSL_options => {         SSL_ca_file => $file_path,     } The SSL_options attribute could also be used for such things as providing a client certificate for authentication to a server or controlling the choice of cipher used for the SSL connection. See IO::Socket::SSL documentation for details. PROXY SUPPORT HTTP::Tiny can proxy both http and https requests. Only Basic proxy authorization is supported and it must be provided as part of the proxy URL: http://user:pass@proxy.example.com/. HTTP::Tiny supports the following proxy environment variables: http_proxy or HTTP_PROXY https_proxy or HTTPS_PROXY all_proxy or ALL_PROXY If the REQUEST_METHOD environment variable is set, then this might be a CGI process and HTTP_PROXY would be set from the Proxy: header, which is a security risk. If REQUEST_METHOD is set, HTTP_PROXY (the upper case variant only) is ignored. Tunnelling https over an http proxy using the CONNECT method is supported. If your proxy uses https itself, you can not tunnel https over it. Be warned that proxying an https connection opens you to the risk of a man-in-the-middle attack by the proxy server. The no_proxy environment variable is supported in the format of a comma-separated list of domain extensions proxy should not be used for. Proxy arguments passed to new will override their corresponding environment variables. LIMITATIONS HTTP::Tiny is conditionally compliant with the HTTP/1.1 specifications: ""Message Syntax and Routing"" [RFC7230] ""Semantics and Content"" [RFC7231] ""Conditional Requests"" [RFC7232] ""Range Requests"" [RFC7233] ""Caching"" [RFC7234] ""Authentication"" [RFC7235] It attempts to meet all ""MUST"" requirements of the specification, but does not implement all ""SHOULD"" requirements. (Note: it was developed against the earlier RFC 2616 specification and may not yet meet the revised RFC 7230-7235 spec.) Some particular limitations of note include: HTTP::Tiny focuses on correct transport. Users are responsible for ensuring that user-defined headers and content are compliant with the HTTP/1.1 specification. Users must ensure that URLs are properly escaped for unsafe characters and that international domain names are properly encoded to ASCII. See URI::Escape, URI::_punycode and Net::IDN::Encode. Redirection is very strict against the specification. Redirection is only automatic for response codes 301, 302, 307 and 308 if the request method is 'GET' or 'HEAD'. Response code 303 is always converted into a 'GET' redirection, as mandated by the specification. There is no automatic support for status 305 (""Use proxy"") redirections. There is no provision for delaying a request body using an Expect header. Unexpected 1XX responses are silently ignored as per the specification. Only 'chunked' Transfer-Encoding is supported. There is no support for a Request-URI of '*' for the 'OPTIONS' request. Headers mentioned in the RFCs and some other, well-known headers are generated with their canonical case. Other headers are sent in the case provided by the user. Except for control headers (which are sent first), headers are sent in arbitrary order. Despite the limitations listed above, HTTP::Tiny is considered feature-complete. New feature requests should be directed to HTTP::Tiny::UA. SEE ALSO HTTP::Tiny::UA - Higher level UA features for HTTP::Tiny HTTP::Thin - HTTP::Tiny wrapper with HTTP::Request/HTTP::Response compatibility HTTP::Tiny::Mech - Wrap WWW::Mechanize instance in HTTP::Tiny compatible interface IO::Socket::IP - Required for IPv6 support IO::Socket::SSL - Required for SSL support LWP::UserAgent - If HTTP::Tiny isn't enough for you, this is the ""standard"" way to do things Mozilla::CA - Required if you want to validate SSL certificates Net::SSLeay - Required for SSL support SUPPORT Bugs / Feature Requests Please report any bugs or feature requests through the issue tracker at https://github.com/chansen/p5-http-tiny/issues. You will be notified automatically of any progress on your issue. Source Code This is open source software. The code repository is available for public review and contribution under the terms of the license. https://github.com/chansen/p5-http-tiny   git clone https://github.com/chansen/p5-http-tiny.git AUTHORS Christian Hansen <chansen@cpan.org> David Golden <dagolden@cpan.org> CONTRIBUTORS Alan Gardner <gardner@pythian.com> Alessandro Ghedini <al3xbio@gmail.com> A. Sinan Unur <nanis@cpan.org> Brad Gilbert <bgills@cpan.org> brian m. carlson <sandals@crustytoothpaste.net> Chris Nehren <apeiron@cpan.org> Chris Weyl <cweyl@alumni.drew.edu> Claes Jakobsson <claes@surfar.nu> Clinton Gormley <clint@traveljury.com> David Golden <xdg@xdg.me> Dean Pearce <pearce@pythian.com> Edward Zborowski <ed@rubensteintech.com> James Raspass <jraspass@gmail.com> Jeremy Mates <jmates@cpan.org> Jess Robinson <castaway@desert-island.me.uk> Lukas Eklund <leklund@gmail.com> Martin J. Evans <mjegh@ntlworld.com> Martin-Louis Bright <mlbright@gmail.com> Mike Doherty <doherty@cpan.org> Olaf Alders <olaf@wundersolutions.com> Olivier Mengué <dolmen@cpan.org> Petr Písař <ppisar@redhat.com> SkyMarshal <skymarshal1729@gmail.com> Sören Kornetzki <soeren.kornetzki@delti.com> Syohei YOSHIDA <syohex@gmail.com> Tatsuhiko Miyagawa <miyagawa@bulknews.net> Tom Hukins <tom@eborcom.com> Tony Cook <tony@develop-help.com> COPYRIGHT AND LICENSE This software is copyright (c) 2016 by Christian Hansen. This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself. × Module Install Instructions To install HTTP::Tiny, simply copy and paste either of the commands in to your terminal cpanm                      cpanm HTTP::Tiny CPAN shell                      perl -MCPAN -e shell                     install HTTP::Tiny For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Minimal and fast client. Included in the standard packages."	"true"
"Protocol"	"LWP::UserAgent"	"https://metacpan.org/pod/LWP::UserAgent"	"Popular HTTP(S) Client"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"LWP::UserAgent - Web user agent class - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Karen Etheridge 🐾 🌋  /  6.15 (ETHER on 2015-12-05) 6.08 (MSCHILLI on 2014-07-25) 6.07 (MSCHILLI on 2014-07-02) 6.06 (MSCHILLI on 2014-04-16) 6.05 (GAAS on 2013-03-11) 5.837 (GAAS on 2010-09-20) 6.15_004 DEV (CAPOEIRAB on 2016-02-13) 6.15_003 DEV (CAPOEIRAB on 2016-01-14) 6.15_002 DEV (CAPOEIRAB on 2016-01-14) 6.15_001 DEV (CAPOEIRAB on 2016-01-05) 6.14_001 DEV (CAPOEIRAB on 2015-11-25) 6.13 (ETHER on 2015-02-14) 6.12 (ETHER on 2015-02-14) 6.11 (ETHER on 2015-02-13) 6.10 (ETHER on 2015-02-12) 6.09 (ETHER on 2015-02-10) 6.04 (GAAS on 2012-02-18) 6.03 (GAAS on 2011-10-15) 6.02 (GAAS on 2011-03-27) 6.01 (GAAS on 2011-03-09) 6.00 (GAAS on 2011-03-08) 5.837 (OLEG on 2010-11-04) 5.836 (GAAS on 2010-05-13) 5.835 (GAAS on 2010-05-05) 5.834 (GAAS on 2009-11-21) 5.833 (GAAS on 2009-10-06) 5.832 (GAAS on 2009-09-21) 5.831 (GAAS on 2009-08-13) 5.830 (GAAS on 2009-07-26) 5.829 (GAAS on 2009-07-08) 5.828 (GAAS on 2009-06-25) 5.827 (GAAS on 2009-06-15) 5.826 (GAAS on 2009-04-24) 5.825 (GAAS on 2009-02-16) 5.824 (GAAS on 2009-02-13) 5.823 (GAAS on 2009-01-12) 5.822 (GAAS on 2008-12-05) 5.821 (GAAS on 2008-11-25) 5.820 (GAAS on 2008-11-05) 5.819 (GAAS on 2008-10-20) 5.818 (GAAS on 2008-10-16) 5.817 (GAAS on 2008-10-10) 5.816 (GAAS on 2008-09-29) 5.815 (GAAS on 2008-09-24) 5.814 (GAAS on 2008-07-25) 5.813 (GAAS on 2008-06-17) 5.812 (GAAS on 2008-04-16) 5.811 (GAAS on 2008-04-14) 5.810 (GAAS on 2008-04-08) 5.808 (GAAS on 2007-08-05) 5.807 (GAAS on 2007-07-31) 5.806 (GAAS on 2007-07-19) 5.805 (GAAS on 2005-12-08) 5.804 (GAAS on 2005-12-06) 5.803 (GAAS on 2004-12-11) 5.802 (GAAS on 2004-11-30) 5.801 (GAAS on 2004-11-12) 5.800 (GAAS on 2004-06-16) 5.79 (GAAS on 2004-04-13) 5.78 (GAAS on 2004-04-07) 5.77 (GAAS on 2004-04-06) 5.76 (GAAS on 2003-11-21) 5.75 (GAAS on 2003-10-26) 5.74 (GAAS on 2003-10-23) 5.73 (GAAS on 2003-10-19) 5.72 (GAAS on 2003-10-15) 5.71 (GAAS on 2003-10-14) 5.70 (GAAS on 2003-10-13) 5.69 (GAAS on 2003-01-24) 5.68 (GAAS on 2003-01-03) 5.67 (GAAS on 2003-01-01) 5.66 (GAAS on 2002-12-20) 5.65 (GAAS on 2002-05-31) 5.64 (GAAS on 2002-02-09) 5.63 (GAAS on 2001-12-14) 5.62 (GAAS on 2001-11-21) 5.61 (GAAS on 2001-11-17) 5.60 (GAAS on 2001-10-26) 5.530097 DEV (GAAS on 2001-09-20) 5.530096 DEV (GAAS on 2001-08-28) 5.530095 DEV (GAAS on 2001-08-07) 5.530094 DEV (GAAS on 2001-05-05) 5.530093 DEV (GAAS on 2001-04-29) 5.530092 DEV (GAAS on 2001-04-25) 5.530091 DEV (GAAS on 2001-04-21) 5.530090 DEV (GAAS on 2001-04-19) 5.53 (GAAS on 2001-04-10) 5.52 (GAAS on 2001-03-29) 5.51 (GAAS on 2001-03-14) 5.50 (GAAS on 2001-01-12) 5.49 (GAAS on 2001-01-01) 5.48 (GAAS on 2000-04-09) 5.47 (GAAS on 1999-11-16) 5.46 (GAAS on 1999-10-28) 5.45 (GAAS on 1999-09-20) 5.44 (GAAS on 1999-06-25) 5.43 (GAAS on 1999-05-09) 5.42 (GAAS on 1999-03-20) 5.41 (GAAS on 1998-11-19) 5.400001 DEV (GAAS on 1998-10-12) 5.36 (GAAS on 1998-08-04) 5.35 (GAAS on 1998-07-09) 5.34 (GAAS on 1998-07-07) 5.33 (GAAS on 1998-05-07) 5.32 (GAAS on 1998-04-17) 5.31 (GAAS on 1998-04-10) 5.30 (GAAS on 1998-03-31) 5.22 (GAAS on 1998-03-24) 5.21 (GAAS on 1998-03-12) 5.20 (GAAS on 1998-02-12) 5.19 (GAAS on 1998-01-26) 5.180005 DEV (GAAS on 1998-01-20) 5.180004 DEV (GAAS on 1997-12-17) 5.180003 DEV (GAAS on 1997-12-16) 5.18 (GAAS on 1997-12-12) 5.15 (GAAS on 1997-11-06) 5.14 (GAAS on 1997-10-12) 5.13 (GAAS on 1997-09-20) 5.12 (GAAS on 1997-09-05) 5.11 (GAAS on 1997-08-06) 5.10 (GAAS on 1997-06-20) 5.09 (GAAS on 1997-06-10) 5.08 (GAAS on 1997-04-05) 5.07 (GAAS on 1997-02-11) 5.06 (GAAS on 1997-01-27) 5.05 (GAAS on 1996-12-04) 5.04 (GAAS on 1996-10-22) 5.03 (GAAS on 1996-09-30) 5.02 (GAAS on 1996-09-11) 5.01 (GAAS on 1996-08-02) 5.00 (GAAS on 1996-05-26) 513 (GAAS on 1996-05-09) 56 (GAAS on 1995-11-06) 55 (GAAS on 1995-09-16) libwww-perl-6.15 125 ++ 125 ++  / LWP::UserAgent 05 Dec 2015 06:01:09 GMT Module version: 6.15 Source (raw) Browse (raw) Changes Repository (git clone) Issues (187) 5 (8 reviews) Testers (1327 / 14 / 7) Kwalitee License: perl_5 Questions? Chat with us! Activity 24 month Tools MOBI | EPUB Download (138.61Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 6.08 (MSCHILLI on 2014-07-25) 6.07 (MSCHILLI on 2014-07-02) 6.06 (MSCHILLI on 2014-04-16) 6.05 (GAAS on 2013-03-11) 5.837 (GAAS on 2010-09-20) 6.15_004 DEV (CAPOEIRAB on 2016-02-13) 6.15_003 DEV (CAPOEIRAB on 2016-01-14) 6.15_002 DEV (CAPOEIRAB on 2016-01-14) 6.15_001 DEV (CAPOEIRAB on 2016-01-05) 6.14_001 DEV (CAPOEIRAB on 2015-11-25) 6.13 (ETHER on 2015-02-14) 6.12 (ETHER on 2015-02-14) 6.11 (ETHER on 2015-02-13) 6.10 (ETHER on 2015-02-12) 6.09 (ETHER on 2015-02-10) 6.04 (GAAS on 2012-02-18) 6.03 (GAAS on 2011-10-15) 6.02 (GAAS on 2011-03-27) 6.01 (GAAS on 2011-03-09) 6.00 (GAAS on 2011-03-08) 5.837 (OLEG on 2010-11-04) 5.836 (GAAS on 2010-05-13) 5.835 (GAAS on 2010-05-05) 5.834 (GAAS on 2009-11-21) 5.833 (GAAS on 2009-10-06) 5.832 (GAAS on 2009-09-21) 5.831 (GAAS on 2009-08-13) 5.830 (GAAS on 2009-07-26) 5.829 (GAAS on 2009-07-08) 5.828 (GAAS on 2009-06-25) 5.827 (GAAS on 2009-06-15) 5.826 (GAAS on 2009-04-24) 5.825 (GAAS on 2009-02-16) 5.824 (GAAS on 2009-02-13) 5.823 (GAAS on 2009-01-12) 5.822 (GAAS on 2008-12-05) 5.821 (GAAS on 2008-11-25) 5.820 (GAAS on 2008-11-05) 5.819 (GAAS on 2008-10-20) 5.818 (GAAS on 2008-10-16) 5.817 (GAAS on 2008-10-10) 5.816 (GAAS on 2008-09-29) 5.815 (GAAS on 2008-09-24) 5.814 (GAAS on 2008-07-25) 5.813 (GAAS on 2008-06-17) 5.812 (GAAS on 2008-04-16) 5.811 (GAAS on 2008-04-14) 5.810 (GAAS on 2008-04-08) 5.808 (GAAS on 2007-08-05) 5.807 (GAAS on 2007-07-31) 5.806 (GAAS on 2007-07-19) 5.805 (GAAS on 2005-12-08) 5.804 (GAAS on 2005-12-06) 5.803 (GAAS on 2004-12-11) 5.802 (GAAS on 2004-11-30) 5.801 (GAAS on 2004-11-12) 5.800 (GAAS on 2004-06-16) 5.79 (GAAS on 2004-04-13) 5.78 (GAAS on 2004-04-07) 5.77 (GAAS on 2004-04-06) 5.76 (GAAS on 2003-11-21) 5.75 (GAAS on 2003-10-26) 5.74 (GAAS on 2003-10-23) 5.73 (GAAS on 2003-10-19) 5.72 (GAAS on 2003-10-15) 5.71 (GAAS on 2003-10-14) 5.70 (GAAS on 2003-10-13) 5.69 (GAAS on 2003-01-24) 5.68 (GAAS on 2003-01-03) 5.67 (GAAS on 2003-01-01) 5.66 (GAAS on 2002-12-20) 5.65 (GAAS on 2002-05-31) 5.64 (GAAS on 2002-02-09) 5.63 (GAAS on 2001-12-14) 5.62 (GAAS on 2001-11-21) 5.61 (GAAS on 2001-11-17) 5.60 (GAAS on 2001-10-26) 5.530097 DEV (GAAS on 2001-09-20) 5.530096 DEV (GAAS on 2001-08-28) 5.530095 DEV (GAAS on 2001-08-07) 5.530094 DEV (GAAS on 2001-05-05) 5.530093 DEV (GAAS on 2001-04-29) 5.530092 DEV (GAAS on 2001-04-25) 5.530091 DEV (GAAS on 2001-04-21) 5.530090 DEV (GAAS on 2001-04-19) 5.53 (GAAS on 2001-04-10) 5.52 (GAAS on 2001-03-29) 5.51 (GAAS on 2001-03-14) 5.50 (GAAS on 2001-01-12) 5.49 (GAAS on 2001-01-01) 5.48 (GAAS on 2000-04-09) 5.47 (GAAS on 1999-11-16) 5.46 (GAAS on 1999-10-28) 5.45 (GAAS on 1999-09-20) 5.44 (GAAS on 1999-06-25) 5.43 (GAAS on 1999-05-09) 5.42 (GAAS on 1999-03-20) 5.41 (GAAS on 1998-11-19) 5.400001 DEV (GAAS on 1998-10-12) 5.36 (GAAS on 1998-08-04) 5.35 (GAAS on 1998-07-09) 5.34 (GAAS on 1998-07-07) 5.33 (GAAS on 1998-05-07) 5.32 (GAAS on 1998-04-17) 5.31 (GAAS on 1998-04-10) 5.30 (GAAS on 1998-03-31) 5.22 (GAAS on 1998-03-24) 5.21 (GAAS on 1998-03-12) 5.20 (GAAS on 1998-02-12) 5.19 (GAAS on 1998-01-26) 5.180005 DEV (GAAS on 1998-01-20) 5.180004 DEV (GAAS on 1997-12-17) 5.180003 DEV (GAAS on 1997-12-16) 5.18 (GAAS on 1997-12-12) 5.15 (GAAS on 1997-11-06) 5.14 (GAAS on 1997-10-12) 5.13 (GAAS on 1997-09-20) 5.12 (GAAS on 1997-09-05) 5.11 (GAAS on 1997-08-06) 5.10 (GAAS on 1997-06-20) 5.09 (GAAS on 1997-06-10) 5.08 (GAAS on 1997-04-05) 5.07 (GAAS on 1997-02-11) 5.06 (GAAS on 1997-01-27) 5.05 (GAAS on 1996-12-04) 5.04 (GAAS on 1996-10-22) 5.03 (GAAS on 1996-09-30) 5.02 (GAAS on 1996-09-11) 5.01 (GAAS on 1996-08-02) 5.00 (GAAS on 1996-05-26) 513 (GAAS on 1996-05-09) 56 (GAAS on 1995-11-06) 55 (GAAS on 1995-09-16) Diff with version 6.08 (MSCHILLI on 2014-07-25) 6.07 (MSCHILLI on 2014-07-02) 6.06 (MSCHILLI on 2014-04-16) 6.05 (GAAS on 2013-03-11) 5.837 (GAAS on 2010-09-20) 6.15_004 DEV (CAPOEIRAB on 2016-02-13) 6.15_003 DEV (CAPOEIRAB on 2016-01-14) 6.15_002 DEV (CAPOEIRAB on 2016-01-14) 6.15_001 DEV (CAPOEIRAB on 2016-01-05) 6.14_001 DEV (CAPOEIRAB on 2015-11-25) 6.13 (ETHER on 2015-02-14) 6.12 (ETHER on 2015-02-14) 6.11 (ETHER on 2015-02-13) 6.10 (ETHER on 2015-02-12) 6.09 (ETHER on 2015-02-10) 6.04 (GAAS on 2012-02-18) 6.03 (GAAS on 2011-10-15) 6.02 (GAAS on 2011-03-27) 6.01 (GAAS on 2011-03-09) 6.00 (GAAS on 2011-03-08) 5.837 (OLEG on 2010-11-04) 5.836 (GAAS on 2010-05-13) 5.835 (GAAS on 2010-05-05) 5.834 (GAAS on 2009-11-21) 5.833 (GAAS on 2009-10-06) 5.832 (GAAS on 2009-09-21) 5.831 (GAAS on 2009-08-13) 5.830 (GAAS on 2009-07-26) 5.829 (GAAS on 2009-07-08) 5.828 (GAAS on 2009-06-25) 5.827 (GAAS on 2009-06-15) 5.826 (GAAS on 2009-04-24) 5.825 (GAAS on 2009-02-16) 5.824 (GAAS on 2009-02-13) 5.823 (GAAS on 2009-01-12) 5.822 (GAAS on 2008-12-05) 5.821 (GAAS on 2008-11-25) 5.820 (GAAS on 2008-11-05) 5.819 (GAAS on 2008-10-20) 5.818 (GAAS on 2008-10-16) 5.817 (GAAS on 2008-10-10) 5.816 (GAAS on 2008-09-29) 5.815 (GAAS on 2008-09-24) 5.814 (GAAS on 2008-07-25) 5.813 (GAAS on 2008-06-17) 5.812 (GAAS on 2008-04-16) 5.811 (GAAS on 2008-04-14) 5.810 (GAAS on 2008-04-08) 5.808 (GAAS on 2007-08-05) 5.807 (GAAS on 2007-07-31) 5.806 (GAAS on 2007-07-19) 5.805 (GAAS on 2005-12-08) 5.804 (GAAS on 2005-12-06) 5.803 (GAAS on 2004-12-11) 5.802 (GAAS on 2004-11-30) 5.801 (GAAS on 2004-11-12) 5.800 (GAAS on 2004-06-16) 5.79 (GAAS on 2004-04-13) 5.78 (GAAS on 2004-04-07) 5.77 (GAAS on 2004-04-06) 5.76 (GAAS on 2003-11-21) 5.75 (GAAS on 2003-10-26) 5.74 (GAAS on 2003-10-23) 5.73 (GAAS on 2003-10-19) 5.72 (GAAS on 2003-10-15) 5.71 (GAAS on 2003-10-14) 5.70 (GAAS on 2003-10-13) 5.69 (GAAS on 2003-01-24) 5.68 (GAAS on 2003-01-03) 5.67 (GAAS on 2003-01-01) 5.66 (GAAS on 2002-12-20) 5.65 (GAAS on 2002-05-31) 5.64 (GAAS on 2002-02-09) 5.63 (GAAS on 2001-12-14) 5.62 (GAAS on 2001-11-21) 5.61 (GAAS on 2001-11-17) 5.60 (GAAS on 2001-10-26) 5.530097 DEV (GAAS on 2001-09-20) 5.530096 DEV (GAAS on 2001-08-28) 5.530095 DEV (GAAS on 2001-08-07) 5.530094 DEV (GAAS on 2001-05-05) 5.530093 DEV (GAAS on 2001-04-29) 5.530092 DEV (GAAS on 2001-04-25) 5.530091 DEV (GAAS on 2001-04-21) 5.530090 DEV (GAAS on 2001-04-19) 5.53 (GAAS on 2001-04-10) 5.52 (GAAS on 2001-03-29) 5.51 (GAAS on 2001-03-14) 5.50 (GAAS on 2001-01-12) 5.49 (GAAS on 2001-01-01) 5.48 (GAAS on 2000-04-09) 5.47 (GAAS on 1999-11-16) 5.46 (GAAS on 1999-10-28) 5.45 (GAAS on 1999-09-20) 5.44 (GAAS on 1999-06-25) 5.43 (GAAS on 1999-05-09) 5.42 (GAAS on 1999-03-20) 5.41 (GAAS on 1998-11-19) 5.400001 DEV (GAAS on 1998-10-12) 5.36 (GAAS on 1998-08-04) 5.35 (GAAS on 1998-07-09) 5.34 (GAAS on 1998-07-07) 5.33 (GAAS on 1998-05-07) 5.32 (GAAS on 1998-04-17) 5.31 (GAAS on 1998-04-10) 5.30 (GAAS on 1998-03-31) 5.22 (GAAS on 1998-03-24) 5.21 (GAAS on 1998-03-12) 5.20 (GAAS on 1998-02-12) 5.19 (GAAS on 1998-01-26) 5.180005 DEV (GAAS on 1998-01-20) 5.180004 DEV (GAAS on 1997-12-17) 5.180003 DEV (GAAS on 1997-12-16) 5.18 (GAAS on 1997-12-12) 5.15 (GAAS on 1997-11-06) 5.14 (GAAS on 1997-10-12) 5.13 (GAAS on 1997-09-20) 5.12 (GAAS on 1997-09-05) 5.11 (GAAS on 1997-08-06) 5.10 (GAAS on 1997-06-20) 5.09 (GAAS on 1997-06-10) 5.08 (GAAS on 1997-04-05) 5.07 (GAAS on 1997-02-11) 5.06 (GAAS on 1997-01-27) 5.05 (GAAS on 1996-12-04) 5.04 (GAAS on 1996-10-22) 5.03 (GAAS on 1996-09-30) 5.02 (GAAS on 1996-09-11) 5.01 (GAAS on 1996-08-02) 5.00 (GAAS on 1996-05-26) 513 (GAAS on 1996-05-09) 56 (GAAS on 1995-11-06) 55 (GAAS on 1995-09-16) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 75 PAUSE users 50 non-PAUSE users. ETHER Karen Etheridge 🐾 🌋 and 1 contributors show them Gisle Aas Dependencies Digest::MD5 Encode Encode::Locale File::Listing HTML::Entities HTML::HeadParser HTTP::Cookies HTTP::Daemon HTTP::Date HTTP::Negotiate HTTP::Request HTTP::Request::Common HTTP::Response HTTP::Status IO::Select IO::Socket LWP::MediaTypes MIME::Base64 Net::FTP Net::HTTP URI URI::Escape WWW::RobotRules CPAN Testers List Reverse dependencies Dependency graph × libwww-perl-6.15 NAME SYNOPSIS DESCRIPTION CONSTRUCTOR METHODS ATTRIBUTES Proxy attributes Handlers REQUEST METHODS Callback methods SEE ALSO COPYRIGHT NAME LWP::UserAgent - Web user agent class SYNOPSIS  require LWP::UserAgent;    my $ua = LWP::UserAgent->new;  $ua->timeout(10);  $ua->env_proxy;    my $response = $ua->get('http://search.cpan.org/');    if ($response->is_success) {      print $response->decoded_content;  # or whatever  }  else {      die $response->status_line;  } DESCRIPTION The LWP::UserAgent is a class implementing a web user agent. LWP::UserAgent objects can be used to dispatch web requests. In normal use the application creates an LWP::UserAgent object, and then configures it with values for timeouts, proxies, name, etc. It then creates an instance of HTTP::Request for the request that needs to be performed. This request is then passed to one of the request method the UserAgent, which dispatches it using the relevant protocol, and returns a HTTP::Response object. There are convenience methods for sending the most common request types: get(), head(), post(), put() and delete(). When using these methods then the creation of the request object is hidden as shown in the synopsis above. The basic approach of the library is to use HTTP style communication for all protocol schemes. This means that you will construct HTTP::Request objects and receive HTTP::Response objects even for non-HTTP resources like gopher and ftp. In order to achieve even more similarity to HTTP style communications, gopher menus and file directories are converted to HTML documents. CONSTRUCTOR METHODS The following constructor methods are available: $ua = LWP::UserAgent->new( %options ) This method constructs a new LWP::UserAgent object and returns it. Key/value pair arguments may be provided to set up the initial state. The following options correspond to attribute methods described below:    KEY                     DEFAULT    -----------             --------------------    agent                   ""libwww-perl/#.###""    from                    undef    conn_cache              undef    cookie_jar              undef    default_headers         HTTP::Headers->new    local_address           undef    ssl_opts                { verify_hostname => 1 }    max_size                undef    max_redirect            7    parse_head              1    protocols_allowed       undef    protocols_forbidden     undef    requests_redirectable   ['GET', 'HEAD']    timeout                 180 The following additional options are also accepted: If the env_proxy option is passed in with a TRUE value, then proxy settings are read from environment variables (see env_proxy() method below). If env_proxy isn't provided the PERL_LWP_ENV_PROXY environment variable controls if env_proxy() is called during initialization. If the keep_alive option is passed in, then a LWP::ConnCache is set up (see conn_cache() method below). The keep_alive value is passed on as the total_capacity for the connection cache. $ua->clone Returns a copy of the LWP::UserAgent object. ATTRIBUTES The settings of the configuration attributes modify the behaviour of the LWP::UserAgent when it dispatches requests. Most of these can also be initialized by options passed to the constructor method. The following attribute methods are provided. The attribute value is left unchanged if no argument is given. The return value from each method is the old attribute value. $ua->agent $ua->agent( $product_id ) Get/set the product token that is used to identify the user agent on the network. The agent value is sent as the ""User-Agent"" header in the requests. The default is the string returned by the _agent() method (see below). If the $product_id ends with space then the _agent() string is appended to it. The user agent string should be one or more simple product identifiers with an optional version number separated by the ""/"" character. Examples are:   $ua->agent('Checkbot/0.4 ' . $ua->_agent);   $ua->agent('Checkbot/0.4 ');    # same as above   $ua->agent('Mozilla/5.0');   $ua->agent("""");                 # don't identify $ua->_agent Returns the default agent identifier. This is a string of the form ""libwww-perl/#.###"", where ""#.###"" is substituted with the version number of this library. $ua->from $ua->from( $email_address ) Get/set the e-mail address for the human user who controls the requesting user agent. The address should be machine-usable, as defined in RFC 822. The from value is send as the ""From"" header in the requests. Example:   $ua->from('gaas@cpan.org'); The default is to not send a ""From"" header. See the default_headers() method for the more general interface that allow any header to be defaulted. $ua->cookie_jar $ua->cookie_jar( $cookie_jar_obj ) Get/set the cookie jar object to use. The only requirement is that the cookie jar object must implement the extract_cookies($response) and add_cookie_header($request) methods. These methods will then be invoked by the user agent as requests are sent and responses are received. Normally this will be a HTTP::Cookies object or some subclass. The default is to have no cookie_jar, i.e. never automatically add ""Cookie"" headers to the requests. Shortcut: If a reference to a plain hash is passed in as the $cookie_jar_object, then it is replaced with an instance of HTTP::Cookies that is initialized based on the hash. This form also automatically loads the HTTP::Cookies module. It means that:   $ua->cookie_jar({ file => ""$ENV{HOME}/.cookies.txt"" }); is really just a shortcut for:   require HTTP::Cookies;   $ua->cookie_jar(HTTP::Cookies->new(file => ""$ENV{HOME}/.cookies.txt"")); $ua->default_headers $ua->default_headers( $headers_obj ) Get/set the headers object that will provide default header values for any requests sent. By default this will be an empty HTTP::Headers object. $ua->default_header( $field ) $ua->default_header( $field => $value ) This is just a short-cut for $ua->default_headers->header( $field => $value ). Example:   $ua->default_header('Accept-Encoding' => scalar HTTP::Message::decodable());   $ua->default_header('Accept-Language' => ""no, en""); $ua->conn_cache $ua->conn_cache( $cache_obj ) Get/set the LWP::ConnCache object to use. See LWP::ConnCache for details. $ua->credentials( $netloc, $realm ) $ua->credentials( $netloc, $realm, $uname, $pass ) Get/set the user name and password to be used for a realm. The $netloc is a string of the form ""<host>:<port>"". The username and password will only be passed to this server. Example:   $ua->credentials(""www.example.com:80"", ""Some Realm"", ""foo"", ""secret""); $ua->local_address $ua->local_address( $address ) Get/set the local interface to bind to for network connections. The interface can be specified as a hostname or an IP address. This value is passed as the LocalAddr argument to IO::Socket::INET. $ua->max_size $ua->max_size( $bytes ) Get/set the size limit for response content. The default is undef, which means that there is no limit. If the returned response content is only partial, because the size limit was exceeded, then a ""Client-Aborted"" header will be added to the response. The content might end up longer than max_size as we abort once appending a chunk of data makes the length exceed the limit. The ""Content-Length"" header, if present, will indicate the length of the full content and will normally not be the same as length($res->content). $ua->max_redirect $ua->max_redirect( $n ) This reads or sets the object's limit of how many times it will obey redirection responses in a given request cycle. By default, the value is 7. This means that if you call request() method and the response is a redirect elsewhere which is in turn a redirect, and so on seven times, then LWP gives up after that seventh request. $ua->parse_head $ua->parse_head( $boolean ) Get/set a value indicating whether we should initialize response headers from the <head> section of HTML documents. The default is TRUE. Do not turn this off, unless you know what you are doing. $ua->protocols_allowed $ua->protocols_allowed( \@protocols ) This reads (or sets) this user agent's list of protocols that the request methods will exclusively allow. The protocol names are case insensitive. For example: $ua->protocols_allowed( [ 'http', 'https'] ); means that this user agent will allow only those protocols, and attempts to use this user agent to access URLs with any other schemes (like ""ftp://..."") will result in a 500 error. To delete the list, call: $ua->protocols_allowed(undef) By default, an object has neither a protocols_allowed list, nor a protocols_forbidden list. Note that having a protocols_allowed list causes any protocols_forbidden list to be ignored. $ua->protocols_forbidden $ua->protocols_forbidden( \@protocols ) This reads (or sets) this user agent's list of protocols that the request method will not allow. The protocol names are case insensitive. For example: $ua->protocols_forbidden( [ 'file', 'mailto'] ); means that this user agent will not allow those protocols, and attempts to use this user agent to access URLs with those schemes will result in a 500 error. To delete the list, call: $ua->protocols_forbidden(undef) $ua->requests_redirectable $ua->requests_redirectable( \@requests ) This reads or sets the object's list of request names that $ua->redirect_ok(...) will allow redirection for. By default, this is ['GET', 'HEAD'], as per RFC 2616. To change to include 'POST', consider:    push @{ $ua->requests_redirectable }, 'POST'; $ua->show_progress $ua->show_progress( $boolean ) Get/set a value indicating whether a progress bar should be displayed on the terminal as requests are processed. The default is FALSE. $ua->timeout $ua->timeout( $secs ) Get/set the timeout value in seconds. The default timeout() value is 180 seconds, i.e. 3 minutes. The requests is aborted if no activity on the connection to the server is observed for timeout seconds. This means that the time it takes for the complete transaction and the request() method to actually return might be longer. $ua->ssl_opts $ua->ssl_opts( $key ) $ua->ssl_opts( $key => $value ) Get/set the options for SSL connections. Without argument return the list of options keys currently set. With a single argument return the current value for the given option. With 2 arguments set the option value and return the old. Setting an option to the value undef removes this option. The options that LWP relates to are: verify_hostname => $bool When TRUE LWP will for secure protocol schemes ensure it connects to servers that have a valid certificate matching the expected hostname. If FALSE no checks are made and you can't be sure that you communicate with the expected peer. The no checks behaviour was the default for libwww-perl-5.837 and earlier releases. This option is initialized from the PERL_LWP_SSL_VERIFY_HOSTNAME environment variable. If this environment variable isn't set; then verify_hostname defaults to 1. SSL_ca_file => $path The path to a file containing Certificate Authority certificates. A default setting for this option is provided by checking the environment variables PERL_LWP_SSL_CA_FILE and HTTPS_CA_FILE in order. SSL_ca_path => $path The path to a directory containing files containing Certificate Authority certificates. A default setting for this option is provided by checking the environment variables PERL_LWP_SSL_CA_PATH and HTTPS_CA_DIR in order. Other options can be set and are processed directly by the SSL Socket implementation in use. See IO::Socket::SSL or Net::SSL for details. The libwww-perl core no longer bundles protocol plugins for SSL. You will need to install LWP::Protocol::https separately to enable support for processing https-URLs. Proxy attributes The following methods set up when requests should be passed via a proxy server. $ua->proxy(\@schemes, $proxy_url) $ua->proxy($scheme, $proxy_url) Set/retrieve proxy URL for a scheme:  $ua->proxy(['http', 'ftp'], 'http://proxy.sn.no:8001/');  $ua->proxy('gopher', 'http://proxy.sn.no:8001/'); The first form specifies that the URL is to be used for proxying of access methods listed in the list in the first method argument, i.e. 'http' and 'ftp'. The second form shows a shorthand form for specifying proxy URL for a single access scheme. $ua->no_proxy( $domain, ... ) Do not proxy requests to the given domains. Calling no_proxy without any domains clears the list of domains. Eg:  $ua->no_proxy('localhost', 'example.com'); $ua->env_proxy Load proxy settings from *_proxy environment variables. You might specify proxies like this (sh-syntax):   gopher_proxy=http://proxy.my.place/   wais_proxy=http://proxy.my.place/   no_proxy=""localhost,example.com""   export gopher_proxy wais_proxy no_proxy csh or tcsh users should use the setenv command to define these environment variables. On systems with case insensitive environment variables there exists a name clash between the CGI environment variables and the HTTP_PROXY environment variable normally picked up by env_proxy(). Because of this HTTP_PROXY is not honored for CGI scripts. The CGI_HTTP_PROXY environment variable can be used instead. Handlers Handlers are code that injected at various phases during the processing of requests. The following methods are provided to manage the active handlers: $ua->add_handler( $phase => \&cb, %matchspec ) Add handler to be invoked in the given processing phase. For how to specify %matchspec see ""Matching"" in HTTP::Config. The possible values $phase and the corresponding callback signatures are: request_preprepare => sub { my($request, $ua, $h) = @_; ... } The handler is called before the request_prepare and other standard initialization of the request. This can be used to set up headers and attributes that the request_prepare handler depends on. Proxy initialization should take place here; but in general don't register handlers for this phase. request_prepare => sub { my($request, $ua, $h) = @_; ... } The handler is called before the request is sent and can modify the request any way it see fit. This can for instance be used to add certain headers to specific requests. The method can assign a new request object to $_[0] to replace the request that is sent fully. The return value from the callback is ignored. If an exception is raised it will abort the request and make the request method return a ""400 Bad request"" response. request_send => sub { my($request, $ua, $h) = @_; ... } This handler gets a chance of handling requests before they're sent to the protocol handlers. It should return an HTTP::Response object if it wishes to terminate the processing; otherwise it should return nothing. The response_header and response_data handlers will not be invoked for this response, but the response_done will be. response_header => sub { my($response, $ua, $h) = @_; ... } This handler is called right after the response headers have been received, but before any content data. The handler might set up handlers for data and might croak to abort the request. The handler might set the $response->{default_add_content} value to control if any received data should be added to the response object directly. This will initially be false if the $ua->request() method was called with a $content_file or $content_cb argument; otherwise true. response_data => sub { my($response, $ua, $h, $data) = @_; ... } This handler is called for each chunk of data received for the response. The handler might croak to abort the request. This handler needs to return a TRUE value to be called again for subsequent chunks for the same request. response_done => sub { my($response, $ua, $h) = @_; ... } The handler is called after the response has been fully received, but before any redirect handling is attempted. The handler can be used to extract information or modify the response. response_redirect => sub { my($response, $ua, $h) = @_; ... } The handler is called in $ua->request after response_done. If the handler returns an HTTP::Request object we'll start over with processing this request instead. $ua->remove_handler( undef, %matchspec ) $ua->remove_handler( $phase, %matchspec ) Remove handlers that match the given %matchspec. If $phase is not provided remove handlers from all phases. Be careful as calling this function with %matchspec that is not specific enough can remove handlers not owned by you. It's probably better to use the set_my_handler() method instead. The removed handlers are returned. $ua->set_my_handler( $phase, $cb, %matchspec ) Set handlers private to the executing subroutine. Works by defaulting an owner field to the %matchspec that holds the name of the called subroutine. You might pass an explicit owner to override this. If $cb is passed as undef, remove the handler. $ua->get_my_handler( $phase, %matchspec ) $ua->get_my_handler( $phase, %matchspec, $init ) Will retrieve the matching handler as hash ref. If $init is passed as a TRUE value, create and add the handler if it's not found. If $init is a subroutine reference, then it's called with the created handler hash as argument. This sub might populate the hash with extra fields; especially the callback. If $init is a hash reference, merge the hashes. $ua->handlers( $phase, $request ) $ua->handlers( $phase, $response ) Returns the handlers that apply to the given request or response at the given processing phase. REQUEST METHODS The methods described in this section are used to dispatch requests via the user agent. The following request methods are provided: $ua->get( $url ) $ua->get( $url , $field_name => $value, ... ) This method will dispatch a GET request on the given $url. Further arguments can be given to initialize the headers of the request. These are given as separate name/value pairs. The return value is a response object. See HTTP::Response for a description of the interface it provides. There will still be a response object returned when LWP can't connect to the server specified in the URL or when other failures in protocol handlers occur. These internal responses use the standard HTTP status codes, so the responses can't be differentiated by testing the response status code alone. Error responses that LWP generates internally will have the ""Client-Warning"" header set to the value ""Internal response"". If you need to differentiate these internal responses from responses that a remote server actually generates, you need to test this header value. Fields names that start with "":"" are special. These will not initialize headers of the request but will determine how the response content is treated. The following special field names are recognized:     :content_file   => $filename     :content_cb     => \&callback     :read_size_hint => $bytes If a $filename is provided with the :content_file option, then the response content will be saved here instead of in the response object. If a callback is provided with the :content_cb option then this function will be called for each chunk of the response content as it is received from the server. If neither of these options are given, then the response content will accumulate in the response object itself. This might not be suitable for very large response bodies. Only one of :content_file or :content_cb can be specified. The content of unsuccessful responses will always accumulate in the response object itself, regardless of the :content_file or :content_cb options passed in. The :read_size_hint option is passed to the protocol module which will try to read data from the server in chunks of this size. A smaller value for the :read_size_hint will result in a higher number of callback invocations. The callback function is called with 3 arguments: a chunk of data, a reference to the response object, and a reference to the protocol object. The callback can abort the request by invoking die(). The exception message will show up as the ""X-Died"" header field in the response returned by the get() function. $ua->head( $url ) $ua->head( $url , $field_name => $value, ... ) This method will dispatch a HEAD request on the given $url. Otherwise it works like the get() method described above. $ua->post( $url, \%form ) $ua->post( $url, \@form ) $ua->post( $url, \%form, $field_name => $value, ... ) $ua->post( $url, $field_name => $value,... Content => \%form ) $ua->post( $url, $field_name => $value,... Content => \@form ) $ua->post( $url, $field_name => $value,... Content => $content ) This method will dispatch a POST request on the given $url, with %form or @form providing the key/value pairs for the fill-in form content. Additional headers and content options are the same as for the get() method. This method will use the POST() function from HTTP::Request::Common to build the request. See HTTP::Request::Common for a details on how to pass form content and other advanced features. $ua->put( $url, \%form ) $ua->put( $url, \@form ) $ua->put( $url, \%form, $field_name => $value, ... ) $ua->put( $url, $field_name => $value,... Content => \%form ) $ua->put( $url, $field_name => $value,... Content => \@form ) $ua->put( $url, $field_name => $value,... Content => $content ) This method will dispatch a PUT request on the given $url, with %form or @form providing the key/value pairs for the fill-in form content. Additional headers and content options are the same as for the get() method. This method will use the PUT() function from HTTP::Request::Common to build the request. See HTTP::Request::Common for a details on how to pass form content and other advanced features. $ua->delete( $url ) $ua->delete( $url, $field_name => $value, ... ) This method will dispatch a DELETE request on the given $url. Additional headers and content options are the same as for the get() method. This method will use the DELETE() function from HTTP::Request::Common to build the request. See HTTP::Request::Common for a details on how to pass form content and other advanced features. $ua->mirror( $url, $filename ) This method will get the document identified by $url and store it in file called $filename. If the file already exists, then the request will contain an ""If-Modified-Since"" header matching the modification time of the file. If the document on the server has not changed since this time, then nothing happens. If the document has been updated, it will be downloaded again. The modification time of the file will be forced to match that of the server. The return value is the response object. $ua->request( $request ) $ua->request( $request, $content_file ) $ua->request( $request, $content_cb ) $ua->request( $request, $content_cb, $read_size_hint ) This method will dispatch the given $request object. Normally this will be an instance of the HTTP::Request class, but any object with a similar interface will do. The return value is a response object. See HTTP::Request and HTTP::Response for a description of the interface provided by these classes. The request() method will process redirects and authentication responses transparently. This means that it may actually send several simple requests via the simple_request() method described below. The request methods described above; get(), head(), post() and mirror(), will all dispatch the request they build via this method. They are convenience methods that simply hides the creation of the request object for you. The $content_file, $content_cb and $read_size_hint all correspond to options described with the get() method above. You are allowed to use a CODE reference as content in the request object passed in. The content function should return the content when called. The content can be returned in chunks. The content function will be invoked repeatedly until it return an empty string to signal that there is no more content. $ua->simple_request( $request ) $ua->simple_request( $request, $content_file ) $ua->simple_request( $request, $content_cb ) $ua->simple_request( $request, $content_cb, $read_size_hint ) This method dispatches a single request and returns the response received. Arguments are the same as for request() described above. The difference from request() is that simple_request() will not try to handle redirects or authentication responses. The request() method will in fact invoke this method for each simple request it sends. $ua->is_online Tries to determine if you have access to the Internet. Returns TRUE if the built-in heuristics determine that the user agent is able to access the Internet (over HTTP). See also LWP::Online. $ua->is_protocol_supported( $scheme ) You can use this method to test whether this user agent object supports the specified scheme. (The scheme might be a string (like 'http' or 'ftp') or it might be an URI object reference.) Whether a scheme is supported, is determined by the user agent's protocols_allowed or protocols_forbidden lists (if any), and by the capabilities of LWP. I.e., this will return TRUE only if LWP supports this protocol and it's permitted for this particular object. Callback methods The following methods will be invoked as requests are processed. These methods are documented here because subclasses of LWP::UserAgent might want to override their behaviour. $ua->prepare_request( $request ) This method is invoked by simple_request(). Its task is to modify the given $request object by setting up various headers based on the attributes of the user agent. The return value should normally be the $request object passed in. If a different request object is returned it will be the one actually processed. The headers affected by the base implementation are; ""User-Agent"", ""From"", ""Range"" and ""Cookie"". $ua->redirect_ok( $prospective_request, $response ) This method is called by request() before it tries to follow a redirection to the request in $response. This should return a TRUE value if this redirection is permissible. The $prospective_request will be the request to be sent if this method returns TRUE. The base implementation will return FALSE unless the method is in the object's requests_redirectable list, FALSE if the proposed redirection is to a ""file://..."" URL, and TRUE otherwise. $ua->get_basic_credentials( $realm, $uri, $isproxy ) This is called by request() to retrieve credentials for documents protected by Basic or Digest Authentication. The arguments passed in is the $realm provided by the server, the $uri requested and a boolean flag to indicate if this is authentication against a proxy server. The method should return a username and password. It should return an empty list to abort the authentication resolution attempt. Subclasses can override this method to prompt the user for the information. An example of this can be found in lwp-request program distributed with this library. The base implementation simply checks a set of pre-stored member variables, set up with the credentials() method. $ua->progress( $status, $request_or_response ) This is called frequently as the response is received regardless of how the content is processed. The method is called with $status ""begin"" at the start of processing the request and with $state ""end"" before the request method returns. In between these $status will be the fraction of the response currently received or the string ""tick"" if the fraction can't be calculated. When $status is ""begin"" the second argument is the request object, otherwise it is the response object. SEE ALSO See LWP for a complete overview of libwww-perl5. See lwpcook and the scripts lwp-request and lwp-download for examples of usage. See HTTP::Request and HTTP::Response for a description of the message objects dispatched and received. See HTTP::Request::Common and HTML::Form for other ways to build request objects. See WWW::Mechanize and WWW::Search for examples of more specialized user agents based on LWP::UserAgent. COPYRIGHT Copyright 1995-2009 Gisle Aas. This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself. × Module Install Instructions To install LWP::UserAgent, simply copy and paste either of the commands in to your terminal cpanm                      cpanm LWP::UserAgent CPAN shell                      perl -MCPAN -e shell                     install LWP::UserAgent For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Popular HTTP(S) Client"	"true"
"Protocol"	"Net::DHCP"	"https://metacpan.org/pod/Net::DHCP"	"Send and recieve DHCP packets"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Send and recieve DHCP packets"	"false"
"Protocol"	"Net::DNS"	"https://metacpan.org/pod/Net::DNS"	"Resolve DNS host names"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Net::DNS - Perl Interface to the Domain Name System - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors NLnet Labs  /  1.06_01 DEV (NLNETLABS on 2016-06-22) 1.06 (NLNETLABS on 2016-05-27) 1.05_07 DEV (NLNETLABS on 2016-05-22) 1.05_06 DEV (NLNETLABS on 2016-05-11) 1.05_05 DEV (NLNETLABS on 2016-04-17) 1.05 (NLNETLABS on 2016-03-07) 1.04 (NLNETLABS on 2015-12-08) 1.03 (NLNETLABS on 2015-11-08) 1.02 (NLNETLABS on 2015-09-16) 1.01 (NLNETLABS on 2015-07-06) 0.83 (NLNETLABS on 2015-02-26) 0.82 (NLNETLABS on 2015-01-20) 0.81 (NLNETLABS on 2014-10-29) 0.80 (NLNETLABS on 2014-09-22) 0.79 (NLNETLABS on 2014-08-22) 0.78 (NLNETLABS on 2014-07-10) 0.77 (NLNETLABS on 2014-06-13) 0.76 (NLNETLABS on 2014-05-23) 0.75 (NLNETLABS on 2014-05-08) 0.74 (NLNETLABS on 2014-01-16) 0.73 (NLNETLABS on 2013-11-29) 0.72 (NLNETLABS on 2012-12-28) 0.71 (NLNETLABS on 2012-12-15) 0.70 (NLNETLABS on 2012-12-06) 0.69 (NLNETLABS on 2012-12-05) 0.68 (NLNETLABS on 2012-01-31) 1.05_04 DEV (NLNETLABS on 2016-04-15) 1.05_03 DEV (NLNETLABS on 2016-04-04) 1.05_02 DEV (NLNETLABS on 2016-03-24) 1.05_01 DEV (NLNETLABS on 2016-03-21) 1.04_04 DEV (NLNETLABS on 2016-02-29) 1.04_03 DEV (NLNETLABS on 2016-02-05) 1.04_02 DEV (NLNETLABS on 2016-02-02) 1.04_01 DEV (NLNETLABS on 2016-02-01) 1.03_03 DEV (NLNETLABS on 2015-12-02) 1.03_02 DEV (NLNETLABS on 2015-12-02) 1.03_01 DEV (NLNETLABS on 2015-12-01) 1.02_10 DEV (NLNETLABS on 2015-11-02) 1.02_09 DEV (NLNETLABS on 2015-10-27) 1.02_08 DEV (NLNETLABS on 2015-10-23) 1.02_07 DEV (NLNETLABS on 2015-10-20) 1.02_06 DEV (NLNETLABS on 2015-10-14) 1.02_05 DEV (NLNETLABS on 2015-10-13) 1.02_04 DEV (NLNETLABS on 2015-10-08) 1.02_03 DEV (NLNETLABS on 2015-10-06) 1.02_02 DEV (NLNETLABS on 2015-10-05) 1.02_01 DEV (NLNETLABS on 2015-09-22) 1.01_06 DEV (NLNETLABS on 2015-09-15) 1.01_05 DEV (NLNETLABS on 2015-09-11) 1.01_04 DEV (NLNETLABS on 2015-09-08) 1.01_03 DEV (NLNETLABS on 2015-09-04) 1.01_02 DEV (NLNETLABS on 2015-09-03) 1.01_01 DEV (NLNETLABS on 2015-08-26) 1.00_08 DEV (NLNETLABS on 2015-07-02) 1.00_07 DEV (NLNETLABS on 2015-07-01) 1.00_06 DEV (NLNETLABS on 2015-06-29) 1.00_05 DEV (NLNETLABS on 2015-06-26) 1.00_04 DEV (NLNETLABS on 2015-06-23) 1.00_03 DEV (NLNETLABS on 2015-06-15) 1.00_02 DEV (NLNETLABS on 2015-06-11) 1.00_01 DEV (NLNETLABS on 2015-05-27) 0.82_02 DEV (NLNETLABS on 2015-02-18) 0.82_01 DEV (NLNETLABS on 2015-02-11) 0.81_01 DEV (NLNETLABS on 2015-01-05) 0.80_2 DEV (NLNETLABS on 2014-10-24) 0.80_1 DEV (NLNETLABS on 2014-10-20) 0.79_2 DEV (NLNETLABS on 2014-09-15) 0.79_1 DEV (NLNETLABS on 2014-09-11) 0.78_5 DEV (NLNETLABS on 2014-08-19) 0.78_3 DEV (NLNETLABS on 2014-08-15) 0.78_2 DEV (NLNETLABS on 2014-08-12) 0.78_1 DEV (NLNETLABS on 2014-07-30) 0.77_2 DEV (NLNETLABS on 2014-07-09) 0.77_1 DEV (NLNETLABS on 2014-07-02) 0.76_3 DEV (NLNETLABS on 2014-06-13) 0.76_2 DEV (NLNETLABS on 2014-06-05) 0.76_1 DEV (NLNETLABS on 2014-05-29) 0.75_1 DEV (NLNETLABS on 2014-05-22) 0.74_6 DEV (NLNETLABS on 2014-05-06) 0.74_5 DEV (NLNETLABS on 2014-05-05) 0.74_4 DEV (NLNETLABS on 2014-04-30) 0.74_3 DEV (NLNETLABS on 2014-04-03) 0.74_2 DEV (NLNETLABS on 2014-03-10) 0.74_1 DEV (NLNETLABS on 2014-03-03) 0.73_5 DEV (NLNETLABS on 2014-01-13) 0.73_4 DEV (NLNETLABS on 2014-01-12) 0.73_3 DEV (NLNETLABS on 2014-01-05) 0.73_2 DEV (NLNETLABS on 2014-01-02) 0.73_1 DEV (NLNETLABS on 2013-12-24) 0.72_04 DEV (NLNETLABS on 2013-11-19) 0.72_03 DEV (NLNETLABS on 2013-11-18) 0.72_02 DEV (NLNETLABS on 2013-11-14) 0.72_01 DEV (NLNETLABS on 2013-11-13) 0.71_01 DEV (NLNETLABS on 2012-12-24) 0.70_1 DEV (NLNETLABS on 2012-12-12) 0.69_1 DEV (NLNETLABS on 2012-12-05) 0.68_09 DEV (NLNETLABS on 2012-12-04) 0.68_08 DEV (WILLEM on 2012-11-23) 0.68_07 DEV (NLNETLABS on 2012-11-21) 0.68_06 DEV (NLNETLABS on 2012-11-19) 0.68_05 DEV (NLNETLABS on 2012-11-12) 0.68_04 DEV (NLNETLABS on 2012-11-12) 0.68_03 DEV (NLNETLABS on 2012-10-31) 0.68_02 DEV (WILLEM on 2012-10-31) 0.68_01 DEV (WILLEM on 2012-10-29) 0.68 (OLAF on 2012-01-31) 0.67_04 DEV (WILLEM on 2012-01-27) 0.67_03 DEV (WILLEM on 2012-01-26) 0.67_01 DEV (WILLEM on 2012-01-23) 0.67 (OLAF on 2011-11-07) 0.66_08 DEV (WILLEM on 2011-11-02) 0.66_07 DEV (WILLEM on 2011-10-31) 0.66_06 DEV (WILLEM on 2011-10-31) 0.66_04 DEV (WILLEM on 2011-10-28) 0.66_03 DEV (WILLEM on 2011-10-28) 0.66_02 DEV (OLAF on 2011-10-27) 0.66_01 DEV (WILLEM on 2011-10-25) 0.66 (OLAF on 2009-12-30) 0.65 (OLAF on 2009-01-26) 0.64 (OLAF on 2008-12-30) 0.63 (OLAF on 2008-02-08) 0.62 (OLAF on 2007-12-28) 0.61 (OLAF on 2007-08-01) 0.60 (OLAF on 2007-06-22) 0.59 (OLAF on 2006-09-18) 0.58 (OLAF on 2006-07-04) 0.57 (OLAF on 2006-02-24) 0.56 (OLAF on 2006-02-20) 0.55 (OLAF on 2005-12-14) 0.54 (OLAF on 2005-12-07) 0.53_02 DEV (OLAF on 2005-10-18) 0.53_01 DEV (OLAF on 2005-07-31) 0.53 (OLAF on 2005-07-22) 0.52 (OLAF on 2005-07-01) 0.49_01 DEV (OLAF on 2005-06-22) 0.49_01 DEV (OLAF on 2005-06-14) 0.51 (OLAF on 2005-06-10) 0.50 (OLAF on 2005-06-08) 0.49_03 DEV (OLAF on 2005-06-01) 0.49_02 DEV (OLAF on 2005-05-28) 0.49_01 DEV (OLAF on 2005-05-24) 0.49 (OLAF on 2005-03-29) 0.48_03 DEV (OLAF on 2005-03-22) 0.48_02 DEV (OLAF on 2005-03-14) 0.48_01 DEV (OLAF on 2005-03-07) 0.48 (CREIN on 2004-08-13) 0.47_01 DEV (CREIN on 2004-05-06) 0.47 (CREIN on 2004-04-01) 0.46 (CREIN on 2004-02-21) 0.45_01 DEV (CREIN on 2004-02-10) 0.45 (CREIN on 2004-01-08) 0.44_02 DEV (CREIN on 2004-01-04) 0.44_01 DEV (CREIN on 2004-01-03) 0.44 (CREIN on 2003-12-13) 0.43 (CREIN on 2003-12-12) 0.42_02 DEV (CREIN on 2003-12-11) 0.42_01 DEV (CREIN on 2003-12-01) 0.42 (CREIN on 2003-10-26) 0.41 (CREIN on 2003-10-03) 0.40_01 DEV (CREIN on 2003-09-26) 0.40 (CREIN on 2003-09-01) 0.39_02 DEV (CREIN on 2003-08-28) 0.39_01 DEV (CREIN on 2003-08-12) 0.39 (CREIN on 2003-08-07) 0.380002 DEV (CREIN on 2003-07-29) 0.380001 DEV (CREIN on 2003-06-23) 0.38 (CREIN on 2003-06-05) 0.37 (CREIN on 2003-05-28) 0.36 (CREIN on 2003-05-28) 0.35 (CREIN on 2003-05-26) 0.340003 DEV (CREIN on 2003-05-23) 0.340002 DEV (CREIN on 2003-05-22) 0.34 (CREIN on 2003-03-06) 0.33 (CREIN on 2003-01-08) 0.32 (CREIN on 2003-01-05) 0.31 (CREIN on 2002-11-18) 0.30 (CREIN on 2002-11-07) 0.29 (CREIN on 2002-10-02) 0.28 (CREIN on 2002-08-21) 0.27 (CREIN on 2002-08-15) 0.26 (CREIN on 2002-08-05) 0.25 (CREIN on 2002-08-01) 0.24 (CREIN on 2002-07-06) 0.23 (CREIN on 2002-06-11) 0.22 (CREIN on 2002-06-06) 0.21 (CREIN on 2002-06-03) 0.20 (CREIN on 2002-05-15) 0.19 (BBB on 2002-04-11) 0.14 (CREIN on 2002-02-01) 0.12 (MFUHR on 1997-10-02) 0.11 (MFUHR on 1997-07-06) 0.10 (MFUHR on 1997-06-13) 0.09 (MFUHR on 1997-05-29) 0.08 (MFUHR on 1997-05-13) 0.07 (MFUHR on 1997-04-19) 0.06 (MFUHR on 1997-04-03) 0.05 (MFUHR on 1997-03-28) 0.04 (MFUHR on 1997-02-13) 0.03 (MFUHR on 1997-02-10) 0.02 (MFUHR on 1997-02-05) 0.02 (ANDK on 1997-02-04) Net-DNS-1.06 12 ++ 12 ++  / Net::DNS 27 May 2016 19:12:44 GMT Module version: 1.06 Source (raw) Browse (raw) Changes Issues (2) 4.5 (5 reviews) Testers Kwalitee License: mit Activity 24 month Tools MOBI | EPUB Download (248Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.06_01 DEV (NLNETLABS on 2016-06-22) 1.05_07 DEV (NLNETLABS on 2016-05-22) 1.05_06 DEV (NLNETLABS on 2016-05-11) 1.05_05 DEV (NLNETLABS on 2016-04-17) 1.05 (NLNETLABS on 2016-03-07) 1.04 (NLNETLABS on 2015-12-08) 1.03 (NLNETLABS on 2015-11-08) 1.02 (NLNETLABS on 2015-09-16) 1.01 (NLNETLABS on 2015-07-06) 0.83 (NLNETLABS on 2015-02-26) 0.82 (NLNETLABS on 2015-01-20) 0.81 (NLNETLABS on 2014-10-29) 0.80 (NLNETLABS on 2014-09-22) 0.79 (NLNETLABS on 2014-08-22) 0.78 (NLNETLABS on 2014-07-10) 0.77 (NLNETLABS on 2014-06-13) 0.76 (NLNETLABS on 2014-05-23) 0.75 (NLNETLABS on 2014-05-08) 0.74 (NLNETLABS on 2014-01-16) 0.73 (NLNETLABS on 2013-11-29) 0.72 (NLNETLABS on 2012-12-28) 0.71 (NLNETLABS on 2012-12-15) 0.70 (NLNETLABS on 2012-12-06) 0.69 (NLNETLABS on 2012-12-05) 0.68 (NLNETLABS on 2012-01-31) 1.05_04 DEV (NLNETLABS on 2016-04-15) 1.05_03 DEV (NLNETLABS on 2016-04-04) 1.05_02 DEV (NLNETLABS on 2016-03-24) 1.05_01 DEV (NLNETLABS on 2016-03-21) 1.04_04 DEV (NLNETLABS on 2016-02-29) 1.04_03 DEV (NLNETLABS on 2016-02-05) 1.04_02 DEV (NLNETLABS on 2016-02-02) 1.04_01 DEV (NLNETLABS on 2016-02-01) 1.03_03 DEV (NLNETLABS on 2015-12-02) 1.03_02 DEV (NLNETLABS on 2015-12-02) 1.03_01 DEV (NLNETLABS on 2015-12-01) 1.02_10 DEV (NLNETLABS on 2015-11-02) 1.02_09 DEV (NLNETLABS on 2015-10-27) 1.02_08 DEV (NLNETLABS on 2015-10-23) 1.02_07 DEV (NLNETLABS on 2015-10-20) 1.02_06 DEV (NLNETLABS on 2015-10-14) 1.02_05 DEV (NLNETLABS on 2015-10-13) 1.02_04 DEV (NLNETLABS on 2015-10-08) 1.02_03 DEV (NLNETLABS on 2015-10-06) 1.02_02 DEV (NLNETLABS on 2015-10-05) 1.02_01 DEV (NLNETLABS on 2015-09-22) 1.01_06 DEV (NLNETLABS on 2015-09-15) 1.01_05 DEV (NLNETLABS on 2015-09-11) 1.01_04 DEV (NLNETLABS on 2015-09-08) 1.01_03 DEV (NLNETLABS on 2015-09-04) 1.01_02 DEV (NLNETLABS on 2015-09-03) 1.01_01 DEV (NLNETLABS on 2015-08-26) 1.00_08 DEV (NLNETLABS on 2015-07-02) 1.00_07 DEV (NLNETLABS on 2015-07-01) 1.00_06 DEV (NLNETLABS on 2015-06-29) 1.00_05 DEV (NLNETLABS on 2015-06-26) 1.00_04 DEV (NLNETLABS on 2015-06-23) 1.00_03 DEV (NLNETLABS on 2015-06-15) 1.00_02 DEV (NLNETLABS on 2015-06-11) 1.00_01 DEV (NLNETLABS on 2015-05-27) 0.82_02 DEV (NLNETLABS on 2015-02-18) 0.82_01 DEV (NLNETLABS on 2015-02-11) 0.81_01 DEV (NLNETLABS on 2015-01-05) 0.80_2 DEV (NLNETLABS on 2014-10-24) 0.80_1 DEV (NLNETLABS on 2014-10-20) 0.79_2 DEV (NLNETLABS on 2014-09-15) 0.79_1 DEV (NLNETLABS on 2014-09-11) 0.78_5 DEV (NLNETLABS on 2014-08-19) 0.78_3 DEV (NLNETLABS on 2014-08-15) 0.78_2 DEV (NLNETLABS on 2014-08-12) 0.78_1 DEV (NLNETLABS on 2014-07-30) 0.77_2 DEV (NLNETLABS on 2014-07-09) 0.77_1 DEV (NLNETLABS on 2014-07-02) 0.76_3 DEV (NLNETLABS on 2014-06-13) 0.76_2 DEV (NLNETLABS on 2014-06-05) 0.76_1 DEV (NLNETLABS on 2014-05-29) 0.75_1 DEV (NLNETLABS on 2014-05-22) 0.74_6 DEV (NLNETLABS on 2014-05-06) 0.74_5 DEV (NLNETLABS on 2014-05-05) 0.74_4 DEV (NLNETLABS on 2014-04-30) 0.74_3 DEV (NLNETLABS on 2014-04-03) 0.74_2 DEV (NLNETLABS on 2014-03-10) 0.74_1 DEV (NLNETLABS on 2014-03-03) 0.73_5 DEV (NLNETLABS on 2014-01-13) 0.73_4 DEV (NLNETLABS on 2014-01-12) 0.73_3 DEV (NLNETLABS on 2014-01-05) 0.73_2 DEV (NLNETLABS on 2014-01-02) 0.73_1 DEV (NLNETLABS on 2013-12-24) 0.72_04 DEV (NLNETLABS on 2013-11-19) 0.72_03 DEV (NLNETLABS on 2013-11-18) 0.72_02 DEV (NLNETLABS on 2013-11-14) 0.72_01 DEV (NLNETLABS on 2013-11-13) 0.71_01 DEV (NLNETLABS on 2012-12-24) 0.70_1 DEV (NLNETLABS on 2012-12-12) 0.69_1 DEV (NLNETLABS on 2012-12-05) 0.68_09 DEV (NLNETLABS on 2012-12-04) 0.68_08 DEV (WILLEM on 2012-11-23) 0.68_07 DEV (NLNETLABS on 2012-11-21) 0.68_06 DEV (NLNETLABS on 2012-11-19) 0.68_05 DEV (NLNETLABS on 2012-11-12) 0.68_04 DEV (NLNETLABS on 2012-11-12) 0.68_03 DEV (NLNETLABS on 2012-10-31) 0.68_02 DEV (WILLEM on 2012-10-31) 0.68_01 DEV (WILLEM on 2012-10-29) 0.68 (OLAF on 2012-01-31) 0.67_04 DEV (WILLEM on 2012-01-27) 0.67_03 DEV (WILLEM on 2012-01-26) 0.67_01 DEV (WILLEM on 2012-01-23) 0.67 (OLAF on 2011-11-07) 0.66_08 DEV (WILLEM on 2011-11-02) 0.66_07 DEV (WILLEM on 2011-10-31) 0.66_06 DEV (WILLEM on 2011-10-31) 0.66_04 DEV (WILLEM on 2011-10-28) 0.66_03 DEV (WILLEM on 2011-10-28) 0.66_02 DEV (OLAF on 2011-10-27) 0.66_01 DEV (WILLEM on 2011-10-25) 0.66 (OLAF on 2009-12-30) 0.65 (OLAF on 2009-01-26) 0.64 (OLAF on 2008-12-30) 0.63 (OLAF on 2008-02-08) 0.62 (OLAF on 2007-12-28) 0.61 (OLAF on 2007-08-01) 0.60 (OLAF on 2007-06-22) 0.59 (OLAF on 2006-09-18) 0.58 (OLAF on 2006-07-04) 0.57 (OLAF on 2006-02-24) 0.56 (OLAF on 2006-02-20) 0.55 (OLAF on 2005-12-14) 0.54 (OLAF on 2005-12-07) 0.53_02 DEV (OLAF on 2005-10-18) 0.53_01 DEV (OLAF on 2005-07-31) 0.53 (OLAF on 2005-07-22) 0.52 (OLAF on 2005-07-01) 0.49_01 DEV (OLAF on 2005-06-22) 0.49_01 DEV (OLAF on 2005-06-14) 0.51 (OLAF on 2005-06-10) 0.50 (OLAF on 2005-06-08) 0.49_03 DEV (OLAF on 2005-06-01) 0.49_02 DEV (OLAF on 2005-05-28) 0.49_01 DEV (OLAF on 2005-05-24) 0.49 (OLAF on 2005-03-29) 0.48_03 DEV (OLAF on 2005-03-22) 0.48_02 DEV (OLAF on 2005-03-14) 0.48_01 DEV (OLAF on 2005-03-07) 0.48 (CREIN on 2004-08-13) 0.47_01 DEV (CREIN on 2004-05-06) 0.47 (CREIN on 2004-04-01) 0.46 (CREIN on 2004-02-21) 0.45_01 DEV (CREIN on 2004-02-10) 0.45 (CREIN on 2004-01-08) 0.44_02 DEV (CREIN on 2004-01-04) 0.44_01 DEV (CREIN on 2004-01-03) 0.44 (CREIN on 2003-12-13) 0.43 (CREIN on 2003-12-12) 0.42_02 DEV (CREIN on 2003-12-11) 0.42_01 DEV (CREIN on 2003-12-01) 0.42 (CREIN on 2003-10-26) 0.41 (CREIN on 2003-10-03) 0.40_01 DEV (CREIN on 2003-09-26) 0.40 (CREIN on 2003-09-01) 0.39_02 DEV (CREIN on 2003-08-28) 0.39_01 DEV (CREIN on 2003-08-12) 0.39 (CREIN on 2003-08-07) 0.380002 DEV (CREIN on 2003-07-29) 0.380001 DEV (CREIN on 2003-06-23) 0.38 (CREIN on 2003-06-05) 0.37 (CREIN on 2003-05-28) 0.36 (CREIN on 2003-05-28) 0.35 (CREIN on 2003-05-26) 0.340003 DEV (CREIN on 2003-05-23) 0.340002 DEV (CREIN on 2003-05-22) 0.34 (CREIN on 2003-03-06) 0.33 (CREIN on 2003-01-08) 0.32 (CREIN on 2003-01-05) 0.31 (CREIN on 2002-11-18) 0.30 (CREIN on 2002-11-07) 0.29 (CREIN on 2002-10-02) 0.28 (CREIN on 2002-08-21) 0.27 (CREIN on 2002-08-15) 0.26 (CREIN on 2002-08-05) 0.25 (CREIN on 2002-08-01) 0.24 (CREIN on 2002-07-06) 0.23 (CREIN on 2002-06-11) 0.22 (CREIN on 2002-06-06) 0.21 (CREIN on 2002-06-03) 0.20 (CREIN on 2002-05-15) 0.19 (BBB on 2002-04-11) 0.14 (CREIN on 2002-02-01) 0.12 (MFUHR on 1997-10-02) 0.11 (MFUHR on 1997-07-06) 0.10 (MFUHR on 1997-06-13) 0.09 (MFUHR on 1997-05-29) 0.08 (MFUHR on 1997-05-13) 0.07 (MFUHR on 1997-04-19) 0.06 (MFUHR on 1997-04-03) 0.05 (MFUHR on 1997-03-28) 0.04 (MFUHR on 1997-02-13) 0.03 (MFUHR on 1997-02-10) 0.02 (MFUHR on 1997-02-05) 0.02 (ANDK on 1997-02-04) Diff with version 1.06_01 DEV (NLNETLABS on 2016-06-22) 1.05_07 DEV (NLNETLABS on 2016-05-22) 1.05_06 DEV (NLNETLABS on 2016-05-11) 1.05_05 DEV (NLNETLABS on 2016-04-17) 1.05 (NLNETLABS on 2016-03-07) 1.04 (NLNETLABS on 2015-12-08) 1.03 (NLNETLABS on 2015-11-08) 1.02 (NLNETLABS on 2015-09-16) 1.01 (NLNETLABS on 2015-07-06) 0.83 (NLNETLABS on 2015-02-26) 0.82 (NLNETLABS on 2015-01-20) 0.81 (NLNETLABS on 2014-10-29) 0.80 (NLNETLABS on 2014-09-22) 0.79 (NLNETLABS on 2014-08-22) 0.78 (NLNETLABS on 2014-07-10) 0.77 (NLNETLABS on 2014-06-13) 0.76 (NLNETLABS on 2014-05-23) 0.75 (NLNETLABS on 2014-05-08) 0.74 (NLNETLABS on 2014-01-16) 0.73 (NLNETLABS on 2013-11-29) 0.72 (NLNETLABS on 2012-12-28) 0.71 (NLNETLABS on 2012-12-15) 0.70 (NLNETLABS on 2012-12-06) 0.69 (NLNETLABS on 2012-12-05) 0.68 (NLNETLABS on 2012-01-31) 1.05_04 DEV (NLNETLABS on 2016-04-15) 1.05_03 DEV (NLNETLABS on 2016-04-04) 1.05_02 DEV (NLNETLABS on 2016-03-24) 1.05_01 DEV (NLNETLABS on 2016-03-21) 1.04_04 DEV (NLNETLABS on 2016-02-29) 1.04_03 DEV (NLNETLABS on 2016-02-05) 1.04_02 DEV (NLNETLABS on 2016-02-02) 1.04_01 DEV (NLNETLABS on 2016-02-01) 1.03_03 DEV (NLNETLABS on 2015-12-02) 1.03_02 DEV (NLNETLABS on 2015-12-02) 1.03_01 DEV (NLNETLABS on 2015-12-01) 1.02_10 DEV (NLNETLABS on 2015-11-02) 1.02_09 DEV (NLNETLABS on 2015-10-27) 1.02_08 DEV (NLNETLABS on 2015-10-23) 1.02_07 DEV (NLNETLABS on 2015-10-20) 1.02_06 DEV (NLNETLABS on 2015-10-14) 1.02_05 DEV (NLNETLABS on 2015-10-13) 1.02_04 DEV (NLNETLABS on 2015-10-08) 1.02_03 DEV (NLNETLABS on 2015-10-06) 1.02_02 DEV (NLNETLABS on 2015-10-05) 1.02_01 DEV (NLNETLABS on 2015-09-22) 1.01_06 DEV (NLNETLABS on 2015-09-15) 1.01_05 DEV (NLNETLABS on 2015-09-11) 1.01_04 DEV (NLNETLABS on 2015-09-08) 1.01_03 DEV (NLNETLABS on 2015-09-04) 1.01_02 DEV (NLNETLABS on 2015-09-03) 1.01_01 DEV (NLNETLABS on 2015-08-26) 1.00_08 DEV (NLNETLABS on 2015-07-02) 1.00_07 DEV (NLNETLABS on 2015-07-01) 1.00_06 DEV (NLNETLABS on 2015-06-29) 1.00_05 DEV (NLNETLABS on 2015-06-26) 1.00_04 DEV (NLNETLABS on 2015-06-23) 1.00_03 DEV (NLNETLABS on 2015-06-15) 1.00_02 DEV (NLNETLABS on 2015-06-11) 1.00_01 DEV (NLNETLABS on 2015-05-27) 0.82_02 DEV (NLNETLABS on 2015-02-18) 0.82_01 DEV (NLNETLABS on 2015-02-11) 0.81_01 DEV (NLNETLABS on 2015-01-05) 0.80_2 DEV (NLNETLABS on 2014-10-24) 0.80_1 DEV (NLNETLABS on 2014-10-20) 0.79_2 DEV (NLNETLABS on 2014-09-15) 0.79_1 DEV (NLNETLABS on 2014-09-11) 0.78_5 DEV (NLNETLABS on 2014-08-19) 0.78_3 DEV (NLNETLABS on 2014-08-15) 0.78_2 DEV (NLNETLABS on 2014-08-12) 0.78_1 DEV (NLNETLABS on 2014-07-30) 0.77_2 DEV (NLNETLABS on 2014-07-09) 0.77_1 DEV (NLNETLABS on 2014-07-02) 0.76_3 DEV (NLNETLABS on 2014-06-13) 0.76_2 DEV (NLNETLABS on 2014-06-05) 0.76_1 DEV (NLNETLABS on 2014-05-29) 0.75_1 DEV (NLNETLABS on 2014-05-22) 0.74_6 DEV (NLNETLABS on 2014-05-06) 0.74_5 DEV (NLNETLABS on 2014-05-05) 0.74_4 DEV (NLNETLABS on 2014-04-30) 0.74_3 DEV (NLNETLABS on 2014-04-03) 0.74_2 DEV (NLNETLABS on 2014-03-10) 0.74_1 DEV (NLNETLABS on 2014-03-03) 0.73_5 DEV (NLNETLABS on 2014-01-13) 0.73_4 DEV (NLNETLABS on 2014-01-12) 0.73_3 DEV (NLNETLABS on 2014-01-05) 0.73_2 DEV (NLNETLABS on 2014-01-02) 0.73_1 DEV (NLNETLABS on 2013-12-24) 0.72_04 DEV (NLNETLABS on 2013-11-19) 0.72_03 DEV (NLNETLABS on 2013-11-18) 0.72_02 DEV (NLNETLABS on 2013-11-14) 0.72_01 DEV (NLNETLABS on 2013-11-13) 0.71_01 DEV (NLNETLABS on 2012-12-24) 0.70_1 DEV (NLNETLABS on 2012-12-12) 0.69_1 DEV (NLNETLABS on 2012-12-05) 0.68_09 DEV (NLNETLABS on 2012-12-04) 0.68_08 DEV (WILLEM on 2012-11-23) 0.68_07 DEV (NLNETLABS on 2012-11-21) 0.68_06 DEV (NLNETLABS on 2012-11-19) 0.68_05 DEV (NLNETLABS on 2012-11-12) 0.68_04 DEV (NLNETLABS on 2012-11-12) 0.68_03 DEV (NLNETLABS on 2012-10-31) 0.68_02 DEV (WILLEM on 2012-10-31) 0.68_01 DEV (WILLEM on 2012-10-29) 0.68 (OLAF on 2012-01-31) 0.67_04 DEV (WILLEM on 2012-01-27) 0.67_03 DEV (WILLEM on 2012-01-26) 0.67_01 DEV (WILLEM on 2012-01-23) 0.67 (OLAF on 2011-11-07) 0.66_08 DEV (WILLEM on 2011-11-02) 0.66_07 DEV (WILLEM on 2011-10-31) 0.66_06 DEV (WILLEM on 2011-10-31) 0.66_04 DEV (WILLEM on 2011-10-28) 0.66_03 DEV (WILLEM on 2011-10-28) 0.66_02 DEV (OLAF on 2011-10-27) 0.66_01 DEV (WILLEM on 2011-10-25) 0.66 (OLAF on 2009-12-30) 0.65 (OLAF on 2009-01-26) 0.64 (OLAF on 2008-12-30) 0.63 (OLAF on 2008-02-08) 0.62 (OLAF on 2007-12-28) 0.61 (OLAF on 2007-08-01) 0.60 (OLAF on 2007-06-22) 0.59 (OLAF on 2006-09-18) 0.58 (OLAF on 2006-07-04) 0.57 (OLAF on 2006-02-24) 0.56 (OLAF on 2006-02-20) 0.55 (OLAF on 2005-12-14) 0.54 (OLAF on 2005-12-07) 0.53_02 DEV (OLAF on 2005-10-18) 0.53_01 DEV (OLAF on 2005-07-31) 0.53 (OLAF on 2005-07-22) 0.52 (OLAF on 2005-07-01) 0.49_01 DEV (OLAF on 2005-06-22) 0.49_01 DEV (OLAF on 2005-06-14) 0.51 (OLAF on 2005-06-10) 0.50 (OLAF on 2005-06-08) 0.49_03 DEV (OLAF on 2005-06-01) 0.49_02 DEV (OLAF on 2005-05-28) 0.49_01 DEV (OLAF on 2005-05-24) 0.49 (OLAF on 2005-03-29) 0.48_03 DEV (OLAF on 2005-03-22) 0.48_02 DEV (OLAF on 2005-03-14) 0.48_01 DEV (OLAF on 2005-03-07) 0.48 (CREIN on 2004-08-13) 0.47_01 DEV (CREIN on 2004-05-06) 0.47 (CREIN on 2004-04-01) 0.46 (CREIN on 2004-02-21) 0.45_01 DEV (CREIN on 2004-02-10) 0.45 (CREIN on 2004-01-08) 0.44_02 DEV (CREIN on 2004-01-04) 0.44_01 DEV (CREIN on 2004-01-03) 0.44 (CREIN on 2003-12-13) 0.43 (CREIN on 2003-12-12) 0.42_02 DEV (CREIN on 2003-12-11) 0.42_01 DEV (CREIN on 2003-12-01) 0.42 (CREIN on 2003-10-26) 0.41 (CREIN on 2003-10-03) 0.40_01 DEV (CREIN on 2003-09-26) 0.40 (CREIN on 2003-09-01) 0.39_02 DEV (CREIN on 2003-08-28) 0.39_01 DEV (CREIN on 2003-08-12) 0.39 (CREIN on 2003-08-07) 0.380002 DEV (CREIN on 2003-07-29) 0.380001 DEV (CREIN on 2003-06-23) 0.38 (CREIN on 2003-06-05) 0.37 (CREIN on 2003-05-28) 0.36 (CREIN on 2003-05-28) 0.35 (CREIN on 2003-05-26) 0.340003 DEV (CREIN on 2003-05-23) 0.340002 DEV (CREIN on 2003-05-22) 0.34 (CREIN on 2003-03-06) 0.33 (CREIN on 2003-01-08) 0.32 (CREIN on 2003-01-05) 0.31 (CREIN on 2002-11-18) 0.30 (CREIN on 2002-11-07) 0.29 (CREIN on 2002-10-02) 0.28 (CREIN on 2002-08-21) 0.27 (CREIN on 2002-08-15) 0.26 (CREIN on 2002-08-05) 0.25 (CREIN on 2002-08-01) 0.24 (CREIN on 2002-07-06) 0.23 (CREIN on 2002-06-11) 0.22 (CREIN on 2002-06-06) 0.21 (CREIN on 2002-06-03) 0.20 (CREIN on 2002-05-15) 0.19 (BBB on 2002-04-11) 0.14 (CREIN on 2002-02-01) 0.12 (MFUHR on 1997-10-02) 0.11 (MFUHR on 1997-07-06) 0.10 (MFUHR on 1997-06-13) 0.09 (MFUHR on 1997-05-29) 0.08 (MFUHR on 1997-05-13) 0.07 (MFUHR on 1997-04-19) 0.06 (MFUHR on 1997-04-03) 0.05 (MFUHR on 1997-03-28) 0.04 (MFUHR on 1997-02-13) 0.03 (MFUHR on 1997-02-10) 0.02 (MFUHR on 1997-02-05) 0.02 (ANDK on 1997-02-04) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 7 PAUSE users 5 non-PAUSE users. NLNETLABS NLnet Labs and 1 contributors show them Olaf Kolkman Dependencies Digest::HMAC Digest::MD5 Digest::SHA File::Spec IO::Socket MIME::Base64 Test::More Time::Local and possibly others CPAN Testers List Reverse dependencies Dependency graph × Net-DNS-1.06 NAME SYNOPSIS DESCRIPTION Resolver Objects Packet Objects Update Objects Header Objects Question Objects RR Objects METHODS version rr mx Dynamic DNS Update Support yxrrset nxrrset yxdomain nxdomain rr_add rr_del Zone Serial Number Management SEQUENTIAL UNIXTIME YYYYMMDDxx Sorting of RR arrays rrsort() EXAMPLES Look up host addresses. Find the nameservers for a domain. Find the MX records for a domain. Print domain SOA record in zone file format. Perform a zone transfer and print all the records. Perform a background query for the answer. Send a background query using select to detect completion BUGS COPYRIGHT LICENSE AUTHOR INFORMATION SEE ALSO NAME Net::DNS - Perl Interface to the Domain Name System SYNOPSIS     use Net::DNS; DESCRIPTION Net::DNS is a collection of Perl modules that act as a Domain Name System (DNS) resolver. It allows the programmer to perform DNS queries that are beyond the capabilities of ""gethostbyname"" and ""gethostbyaddr"". The programmer should be somewhat familiar with the format of a DNS packet and its various sections. See RFC 1035 or DNS and BIND (Albitz & Liu) for details. Resolver Objects A resolver object is an instance of the Net::DNS::Resolver class. A program can have multiple resolver objects, each maintaining its own state information such as the nameservers to be queried, whether recursion is desired, etc. Packet Objects Net::DNS::Resolver queries return Net::DNS::Packet objects. Packet objects have five sections: The header section, a Net::DNS::Header object. The question section, a list of Net::DNS::Question objects. The answer section, a list of Net::DNS::RR objects. The authority section, a list of Net::DNS::RR objects. The additional section, a list of Net::DNS::RR objects. Update Objects Net::DNS::Update is a subclass of Net::DNS::Packet used to create dynamic update requests. Header Objects Net::DNS::Header objects represent the header section of a DNS packet. Question Objects Net::DNS::Question objects represent the content of the question section of a DNS packet. RR Objects Net::DNS::RR is the base class for DNS resource record (RR) objects in the answer, authority, and additional sections of a DNS packet. Do not assume that RR objects will be of the type requested. The type of an RR object must be checked before calling any methods. METHODS See the manual pages listed above for other class-specific methods. version     print Net::DNS->version, ""\n""; Returns the version of Net::DNS. rr     # Use a default resolver -- can not get an error string this way.     use Net::DNS;     my @rr = rr(""example.com"");     my @rr = rr(""example.com"", ""A"");     my @rr = rr(""example.com"", ""A"", ""IN"");      # Use your own resolver object.     my $res = Net::DNS::Resolver->new;     my @rr  = rr($res, ""example.com"" ... );      my ($ptr) = rr(""192.0.2.1""); The rr() method provides simple RR lookup for scenarios where the full flexibility of Net::DNS is not required. Returns a list of Net::DNS::RR objects for the specified name or an empty list if the query failed or no record was found. See ""EXAMPLES"" for more complete examples. mx     # Use a default resolver -- can not get an error string this way.     use Net::DNS;     my @mx = mx(""example.com"");      # Use your own resolver object.     my $res = Net::DNS::Resolver->new;     my @mx  = mx($res, ""example.com""); Returns a list of Net::DNS::RR::MX objects representing the MX records for the specified name. The list will be sorted by preference. Returns an empty list if the query failed or no MX record was found. This method does not look up A records; it only performs MX queries. Dynamic DNS Update Support The Net::DNS module provides auxiliary functions which support dynamic DNS update requests. yxrrset Use this method to add an ""RRset exists"" prerequisite to a dynamic update packet. There are two forms, value-independent and value-dependent:     # RRset exists (value-independent)     $update->push(pre => yxrrset(""host.example.com A"")); Meaning: At least one RR with the specified name and type must exist.     # RRset exists (value-dependent)     $packet->push(pre => yxrrset(""host.example.com A 10.1.2.3"")); Meaning: At least one RR with the specified name and type must exist and must have matching data. Returns a Net::DNS::RR object or undef if the object could not be created. nxrrset Use this method to add an ""RRset does not exist"" prerequisite to a dynamic update packet.     $packet->push(pre => nxrrset(""host.example.com A"")); Meaning: No RRs with the specified name and type can exist. Returns a Net::DNS::RR object or undef if the object could not be created. yxdomain Use this method to add a ""name is in use"" prerequisite to a dynamic update packet.     $packet->push(pre => yxdomain(""host.example.com"")); Meaning: At least one RR with the specified name must exist. Returns a Net::DNS::RR object or undef if the object could not be created. nxdomain Use this method to add a ""name is not in use"" prerequisite to a dynamic update packet.     $packet->push(pre => nxdomain(""host.example.com"")); Meaning: No RR with the specified name can exist. Returns a Net::DNS::RR object or undef if the object could not be created. rr_add Use this method to add RRs to a zone.     $packet->push(update => rr_add(""host.example.com A 10.1.2.3"")); Meaning: Add this RR to the zone. RR objects created by this method should be added to the ""update"" section of a dynamic update packet. The TTL defaults to 86400 seconds (24 hours) if not specified. Returns a Net::DNS::RR object or undef if the object could not be created. rr_del Use this method to delete RRs from a zone. There are three forms: delete all RRsets, delete an RRset, and delete a specific RR.     # Delete all RRsets.     $packet->push(update => rr_del(""host.example.com"")); Meaning: Delete all RRs having the specified name.     # Delete an RRset.     $packet->push(update => rr_del(""host.example.com A"")); Meaning: Delete all RRs having the specified name and type.     # Delete a specific RR.     $packet->push(update => rr_del(""host.example.com A 10.1.2.3"")); Meaning: Delete all RRs having the specified name, type, and data. RR objects created by this method should be added to the ""update"" section of a dynamic update packet. Returns a Net::DNS::RR object or undef if the object could not be created. Zone Serial Number Management The Net::DNS module provides auxiliary functions which support policy-driven zone serial numbering regimes. SEQUENTIAL     $successor = $soa->serial( SEQUENTIAL ); The existing serial number is incremented modulo 2**32. UNIXTIME     $successor = $soa->serial( UNIXTIME ); The Unix time scale will be used as the basis for zone serial numbering. The serial number will be incremented if the time elapsed since the previous update is less than one second. YYYYMMDDxx     $successor = $soa->serial( YYYYMMDDxx ); The 32 bit value returned by the auxiliary YYYYMMDDxx() function will be used as the base for the date-coded zone serial number. Serial number increments must be limited to 100 per day for the date information to remain useful. Sorting of RR arrays rrsort() provides functionality to help you sort RR arrays. In most cases rrsort() will give you the answer that you want, but you can specify your own sorting method by using the Net::DNS::RR::FOO->set_rrsort_func() class method. See Net::DNS::RR for details. rrsort()     use Net::DNS;      my @sorted = rrsort( $rrtype, $attribute, @rr_array ); rrsort() selects all RRs from the input array that are of the type defined by the first argument. Those RRs are sorted based on the attribute that is specified as second argument. There are a number of RRs for which the sorting function is defined in the code. For instance:     my @prioritysorted = rrsort( ""SRV"", ""priority"", @rr_array ); returns the SRV records sorted from lowest to highest priority and for equal priorities from highest to lowest weight. If the function does not exist then a numerical sort on the attribute value is performed.     my @portsorted = rrsort( ""SRV"", ""port"", @rr_array ); If the attribute is not defined then either the default_sort() function or ""canonical sorting"" (as defined by DNSSEC) will be used. rrsort() returns a sorted array containing only elements of the specified RR type. Any other RR types are silently discarded. rrsort() returns an empty list when arguments are incorrect. EXAMPLES The following examples show how to use the Net::DNS modules. See the other manual pages and the demo scripts included with the source code for additional examples. See the Net::DNS::Update manual page for an example of performing dynamic updates. Look up host addresses.     use Net::DNS;     my $res   = Net::DNS::Resolver->new;     my $reply = $res->search(""host.example.com"");      if ($reply) {         foreach my $rr ($reply->answer) {             next unless $rr->type eq ""A"";             print $rr->address, ""\n"";         }     } else {         warn ""query failed: "", $res->errorstring, ""\n"";     } Find the nameservers for a domain.     use Net::DNS;     my $res   = Net::DNS::Resolver->new;     my $reply = $res->query(""example.com"", ""NS"");      if ($reply) {         foreach $rr (grep { $_->type eq 'NS' } $reply->answer) {             print $rr->nsdname, ""\n"";         }     }     else {         warn ""query failed: "", $res->errorstring, ""\n"";     } Find the MX records for a domain.     use Net::DNS;     my $name = ""example.com"";     my $res  = Net::DNS::Resolver->new;     my @mx   = mx($res, $name);      if (@mx) {         foreach $rr (@mx) {             print $rr->preference, "" "", $rr->exchange, ""\n"";         }     } else {         warn ""Can not find MX records for $name: "", $res->errorstring, ""\n"";     } Print domain SOA record in zone file format.     use Net::DNS;     my $res   = Net::DNS::Resolver->new;     my $reply = $res->query(""example.com"", ""SOA"");      if ($reply) {         ($reply->answer)[0]->print;     } else {         print ""query failed: "", $res->errorstring, ""\n"";     } Perform a zone transfer and print all the records.     use Net::DNS;     my $res  = Net::DNS::Resolver->new;     $res->nameservers(""ns.example.com"");      my @zone = $res->axfr(""example.com"");      foreach $rr (@zone) {         $rr->print;     } Perform a background query for the answer.     use Net::DNS;     my $res    = Net::DNS::Resolver->new;     my $socket = $res->bgsend(""host.example.com"");      until ($res->bgisready($socket)) {         # do some work here while waiting for the answer         # ...and some more here     }      my $packet = $res->bgread($socket);     $packet->print; Send a background query using select to detect completion     use Net::DNS;     use IO::Select;      my $timeout = 5;     my $res     = Net::DNS::Resolver->new;     my $bgsock  = $res->bgsend(""host.example.com"");     my $sel     = IO::Select->new($bgsock);      # Add more sockets to $sel if desired.     my @ready = $sel->can_read($timeout);     if (@ready) {         foreach my $sock (@ready) {             if ($sock == $bgsock) {                 my $packet = $res->bgread($bgsock);                 $packet->print;                 $bgsock = undef;             }             # Check for the other sockets.             $sel->remove($sock);             $sock = undef;         }     } else {         warn ""timed out after $timeout seconds\n"";     } BUGS Net::DNS is slow. For other items to be fixed, or if you discover a bug in this distribution please use the CPAN bug reporting system. COPYRIGHT Copyright (c)1997-2000 Michael Fuhr. Portions Copyright (c)2002,2003 Chris Reinhardt. Portions Copyright (c)2005 Olaf Kolkman (RIPE NCC) Portions Copyright (c)2006 Olaf Kolkman (NLnet Labs) Portions Copyright (c)2014 Dick Franks All rights reserved. LICENSE Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of the author not be used in advertising or publicity pertaining to distribution of the software without specific prior written permission. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. AUTHOR INFORMATION Net::DNS is maintained at NLnet Labs (www.nlnetlabs.nl) by Willem Toorop. Between 2005 and 2012 Net::DNS was maintained by Olaf Kolkman. Between 2002 and 2004 Net::DNS was maintained by Chris Reinhardt. Net::DNS was created in 1997 by Michael Fuhr. SEE ALSO perl, Net::DNS::Resolver, Net::DNS::Question, Net::DNS::RR, Net::DNS::Packet, Net::DNS::Update, RFC1035, http://www.net-dns.org/, DNS and BIND by Paul Albitz & Cricket Liu × Module Install Instructions To install Net::DNS, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Net::DNS CPAN shell                      perl -MCPAN -e shell                     install Net::DNS For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Resolve DNS host names"	"true"
"Queueing"	"Gearman"	"https://metacpan.org/pod/Gearman"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	""	"false"
"Queueing"	"Net::RabbitMQ"	"https://metacpan.org/pod/Net::RabbitMQ"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Net::RabbitMQ - interact with RabbitMQ over AMQP using librabbitmq - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Theo Schlossnagle  /  0.2.8 (JESUS on 2015-01-16) 0.2.7 (JESUS on 2014-04-30) 0.2.6 (JESUS on 2012-07-13) 0.2.5 (JESUS on 2012-07-12) 0.2.2 (JESUS on 2012-07-12) 0.2.2 (JESUS on 2011-08-29) Net--RabbitMQ-0.2.8 7 ++ 7 ++  / Net::RabbitMQ 16 Jan 2015 16:33:52 GMT Module version: 0.2.8 Source (raw) Browse (raw) Changes Issues (21) Testers (34 / 154 / 0) Kwalitee License: unknown Activity 24 month Tools MOBI | EPUB Download (50.18Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.2.7 (JESUS on 2014-04-30) 0.2.6 (JESUS on 2012-07-13) 0.2.5 (JESUS on 2012-07-12) 0.2.2 (JESUS on 2012-07-12) 0.2.2 (JESUS on 2011-08-29) Diff with version 0.2.7 (JESUS on 2014-04-30) 0.2.6 (JESUS on 2012-07-13) 0.2.5 (JESUS on 2012-07-12) 0.2.2 (JESUS on 2012-07-12) 0.2.2 (JESUS on 2011-08-29) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 2 PAUSE users 5 non-PAUSE users. JESUS Theo Schlossnagle Dependencies ExtUtils::MakeMaker Scalar::Util Test::More and possibly others CPAN Testers List Reverse dependencies Dependency graph × Net--RabbitMQ-0.2.8 NAME SYNOPSIS DESCRIPTION Methods NAME Net::RabbitMQ - interact with RabbitMQ over AMQP using librabbitmq SYNOPSIS         use Net::RabbitMQ;         my $mq = Net::RabbitMQ->new();         $mq->connect(""localhost"", { user => ""guest"", password => ""guest"" });         $mq->channel_open(1);         $mq->publish(1, ""queuename"", ""Hi there!"");         $mq->disconnect();         DESCRIPTION Net::RabbitMQ provides a simple wrapper around the librabbitmq library that allows connecting, declaring exchanges and queues, binding and unbinding queues, publishing, consuming and receiving events. Error handling in this module is primarily achieve by Perl_croak (die). You should be making good use of eval around these methods to ensure that you appropriately catch the errors. Methods All methods, unless specifically stated, return nothing on success and die on failure. new() Creates a new Net::RabbitMQ object. connect( $hostname, $options ) $hostname is the host to which a connection will be attempted. $options is an optional hash respecting the following keys:      {        user => $user,           #default 'guest'        password => $password,   #default 'guest'        port => $port,           #default 5672        vhost => $vhost,         #default '/'        channel_max => $cmax,    #default 0        frame_max => $fmax,      #default 131072        heartbeat => $hearbeat,  #default 0        timeout => $seconds      #default undef (no timeout)      } disconnect() Causes the connection to RabbitMQ to be torn down. channel_open($channel) $channel is a positive integer describing the channel you which to open. channel_close($channel) $channel is a positive integer describing the channel you which to close. get_channel_max() Returns the maximum allowed channel number. exchange_declare($channel, $exchange, $options) $channel is a channel that has been opened with channel_open. $exchange is the name of the exchange to be instantiated. $options is an optional hash respecting the following keys:      {        exchange_type => $type,  #default 'direct'        passive => $boolean,     #default 0        durable => $boolean,     #default 0        auto_delete => $boolean, #default 1      } exchange_delete($channel, $exchange, $options) $channel is a channel that has been opened with channel_open. $exchange is the name of the exchange to be deleted. $options is an optional hash respecting the following keys:      {        if_unused => $boolean,   #default 1        nowait => $boolean,      #default 0      } queue_declare($channel, $queuename, $options, $arguments) $channel is a channel that has been opened with channel_open. $queuename is the name of the queuename to be instantiated. If $queuename is undef or an empty string, then an auto generated queuename will be used. $options is an optional hash respecting the following keys:      {        passive => $boolean,     #default 0        durable => $boolean,     #default 0        exclusive => $boolean,   #default 0        auto_delete => $boolean, #default 1      } $arguments is an optional hash which will be passed to the server when the queue is created. This can be used for creating mirrored queues by using the x-ha-policy header. In scalar context, this method returns the queuename delcared (important for retrieving the autogenerated queuename in the event that one was requested). In array context, this method returns three items: queuename, the number of message waiting on the queue, and the number of consumers bound to the queue. queue_bind($channel, $queuename, $exchange, $routing_key, $arguments) $channel is a channel that has been opened with channel_open. $queuename is a previously declared queue, $exchange is a previously declared exchange, and $routing_key is the routing key that will bind the specified queue to the specified exchange. $arguments is an optional hash which will be passed to the server. When binding to an exchange of type headers, this can be used to only receive messages with the supplied header values. queue_unbind($channel, $queuename, $exchange, $routing_key, $arguments) This is like the queue_bind with respect to arguments. This command unbinds the queue from the exchange. The $routing_key and $arguments must match the values supplied when the binding was created. publish($channel, $routing_key, $body, $options, $props) $channel is a channel that has been opened with channel_open. $routing_key is the name of the routing key for this message. $body is the payload to enqueue. $options is an optional hash respecting the following keys:      {        exchange => $exchange,   #default 'amq.direct'        mandatory => $boolean,   #default 0        immediate => $boolean,   #default 0      } $props is an optional hash (the AMQP 'props') respecting the following keys: { content_type => $string, content_encoding => $string, correlation_id => $string, reply_to => $string, expiration => $string, message_id => $string, type => $string, user_id => $string, app_id => $string, delivery_mode => $integer, priority => $integer, timestamp => $integer, } consume($channel, $queuename, $options) $channel is a channel that has been opened with channel_open. $queuename is the name of the queue from which we'd like to consume. $options is an optional hash respecting the following keys:      {        consumer_tag => $tag,    #absent by default        no_local => $boolean,    #default 0        no_ack => $boolean,      #default 1        exclusive => $boolean,   #default 0      } The consumer_tag is returned. This command does not return AMQP frames, it simply notifies RabbitMQ that messages for this queue should be delivered down the specified channel. recv() This command receives and reconstructs AMQP frames and returns a hash containing the following information:      {        body => 'Magic Transient Payload', # the reconstructed body        routing_key => 'nr_test_q',        # route the message took        exchange => 'nr_test_x',           # exchange used        delivery_tag => 1,                 # (used for acks)        consumer_tag => 'c_tag',           # tag from consume()        props => $props,                   # hashref sent in      } $props is the hash sent by publish() respecting the following keys: { content_type => $string, content_encoding => $string, correlation_id => $string, reply_to => $string, expiration => $string, message_id => $string, type => $string, user_id => $string, app_id => $string, delivery_mode => $integer, priority => $integer, timestamp => $integer, } get($channel, $queuename, $options) $channel is a channel that has been opened with channel_open. $queuename is the name of the queue from which we'd like to consume. $options is an optional hash respecting the following keys: This command runs an amqp_basic_get which returns undef immediately if no messages are available on the queue and returns a has as follows if a message is available.      {        body => 'Magic Transient Payload', # the reconstructed body        routing_key => 'nr_test_q',        # route the message took        exchange => 'nr_test_x',           # exchange used        content_type => 'foo',             # (only if specified)        delivery_tag => 1,                 # (used for acks)        redelivered => 0,                  # if message is redelivered        message_count => 0,                # message count      } ack($channel, $delivery_tag, $multiple = 0) $channel is a channel that has been opened with channel_open. $delivery_tag the delivery tag seen from a returned frame from the recv method. $multiple specifies if multiple are to be acknowledged at once. purge($channel, $queuename, $no_wait = 0) $channel is a channel that has been opened with channel_open. $queuename is the queue to be purged. $no_wait a boolean specifying if the call should not wait for the server to acknowledge the acknowledgement. reject($channel, $delivery_tag, $requeue = 0) $channel is a channel that has been opened with channel_open. $delivery_tag the delivery tag seen from a returned frame from the recv method. $requeue specifies if the message should be requeued. tx_select($channel) $channel is a channel that has been opened with channel_open. Start a server-side (tx) transaction over $channel. tx_commit($channel) $channel is a channel that has been opened with channel_open. Commit a server-side (tx) transaction over $channel. tx_rollback($channel) $channel is a channel that has been opened with channel_open. Rollback a server-side (tx) transaction over $channel. basic_qos($channel, $options) $channel is a channel that has been opened with channel_open. $options is an optional hash respecting the following keys:      {        prefetch_count => $cnt,  #default 0        prefetch_size  => $size, #default 0        global         => $bool, #default 0      } Set quality of service flags on the current $channel. hearbeat() Send a hearbeat frame. If you've connected with a heartbeat parameter, you must send a heartbeat periodically matching connection parameter or the server may snip the connection. basic_return($subroutine) $subroutine is a perl coderef that takes two arguments:      $channel is the channel on which the message is returned.       $m the message which is a hash ref containing reply_code,      reply_text, exchange, and routing_key. × Module Install Instructions To install Net::RabbitMQ, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Net::RabbitMQ CPAN shell                      perl -MCPAN -e shell                     install Net::RabbitMQ For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Queueing"	"Net::Stomp"	"https://metacpan.org/pod/Net::Stomp"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Net::Stomp - A Streaming Text Orientated Messaging Protocol Client - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Gianni Ceccarelli  /  0.57 (DAKKAR on 2016-04-17) 0.56 (DAKKAR on 2015-06-27) 0.46 (JTANG on 2014-01-14) 0.45 (JTANG on 2012-03-14) 0.44 (JTANG on 2011-11-23) 0.43 (JTANG on 2011-11-21) 0.42 (ASH on 2011-08-20) 0.41 (ASH on 2011-04-28) 0.34 (LBROCARD on 2008-06-27) 0.33 (LBROCARD on 2008-06-25) 0.32 (LBROCARD on 2006-10-30) 0.31 (LBROCARD on 2006-10-11) 0.30 (LBROCARD on 2006-10-07) 0.55 (DAKKAR on 2015-03-26) 0.54 (DAKKAR on 2015-03-25) 0.53 (DAKKAR on 2015-02-18) 0.52 (DAKKAR on 2015-02-16) 0.51 (DAKKAR on 2015-01-26) 0.50 (DAKKAR on 2015-01-26) 0.49 (DAKKAR on 2014-07-14) 0.48 (DAKKAR on 2014-07-12) 0.47 (DAKKAR on 2014-07-11) 0.40 (ASH on 2011-02-04) 0.39 (ASH on 2011-01-14) 0.38_99 DEV (ASH on 2010-08-27) 0.38 (ASH on 2010-08-03) 0.37 (ASH on 2010-07-09) 0.36 (ASH on 2010-05-31) 0.35 (ASH on 2010-05-25) Net-Stomp-0.57 4 ++ 4 ++  / Net::Stomp 17 Apr 2016 13:07:43 GMT Module version: 0.57 Source (raw) Browse (raw) Changes Issues (2) 5 (5 reviews) Testers (303 / 0 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (29.52Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.56 (DAKKAR on 2015-06-27) 0.46 (JTANG on 2014-01-14) 0.45 (JTANG on 2012-03-14) 0.44 (JTANG on 2011-11-23) 0.43 (JTANG on 2011-11-21) 0.42 (ASH on 2011-08-20) 0.41 (ASH on 2011-04-28) 0.34 (LBROCARD on 2008-06-27) 0.33 (LBROCARD on 2008-06-25) 0.32 (LBROCARD on 2006-10-30) 0.31 (LBROCARD on 2006-10-11) 0.30 (LBROCARD on 2006-10-07) 0.55 (DAKKAR on 2015-03-26) 0.54 (DAKKAR on 2015-03-25) 0.53 (DAKKAR on 2015-02-18) 0.52 (DAKKAR on 2015-02-16) 0.51 (DAKKAR on 2015-01-26) 0.50 (DAKKAR on 2015-01-26) 0.49 (DAKKAR on 2014-07-14) 0.48 (DAKKAR on 2014-07-12) 0.47 (DAKKAR on 2014-07-11) 0.40 (ASH on 2011-02-04) 0.39 (ASH on 2011-01-14) 0.38_99 DEV (ASH on 2010-08-27) 0.38 (ASH on 2010-08-03) 0.37 (ASH on 2010-07-09) 0.36 (ASH on 2010-05-31) 0.35 (ASH on 2010-05-25) Diff with version 0.56 (DAKKAR on 2015-06-27) 0.46 (JTANG on 2014-01-14) 0.45 (JTANG on 2012-03-14) 0.44 (JTANG on 2011-11-23) 0.43 (JTANG on 2011-11-21) 0.42 (ASH on 2011-08-20) 0.41 (ASH on 2011-04-28) 0.34 (LBROCARD on 2008-06-27) 0.33 (LBROCARD on 2008-06-25) 0.32 (LBROCARD on 2006-10-30) 0.31 (LBROCARD on 2006-10-11) 0.30 (LBROCARD on 2006-10-07) 0.55 (DAKKAR on 2015-03-26) 0.54 (DAKKAR on 2015-03-25) 0.53 (DAKKAR on 2015-02-18) 0.52 (DAKKAR on 2015-02-16) 0.51 (DAKKAR on 2015-01-26) 0.50 (DAKKAR on 2015-01-26) 0.49 (DAKKAR on 2014-07-14) 0.48 (DAKKAR on 2014-07-12) 0.47 (DAKKAR on 2014-07-11) 0.40 (ASH on 2011-02-04) 0.39 (ASH on 2011-01-14) 0.38_99 DEV (ASH on 2010-08-27) 0.38 (ASH on 2010-08-03) 0.37 (ASH on 2010-07-09) 0.36 (ASH on 2010-05-31) 0.35 (ASH on 2010-05-25) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 2 PAUSE users 2 non-PAUSE users. DAKKAR Gianni Ceccarelli and 4 contributors show them Leon Brocard, Thom May, Michael S. Fischer, Ash Berlin Dependencies Class::Accessor::Fast IO::Select IO::Socket::INET and possibly others CPAN Testers List Reverse dependencies Dependency graph × Net-Stomp-0.57 NAME SYNOPSIS DESCRIPTION ActiveMQ-specific suggestions CONSTRUCTOR new Failover Reconnect on fork ATTRIBUTES hostname port socket_options ssl ssl_options failover hosts current_host logger reconnect_on_fork initial_reconnect_attempts reconnect_attempts connect_delay timeout receipt_timeout METHODS connect send send_with_receipt send_transactional disconnect subscribe unsubscribe receive_frame can_read ack nack send_frame SEE ALSO SOURCE REPOSITORY AUTHORS CONTRIBUTORS COPYRIGHT NAME Net::Stomp - A Streaming Text Orientated Messaging Protocol Client SYNOPSIS   # send a message to the queue 'foo'   use Net::Stomp;   my $stomp = Net::Stomp->new( { hostname => 'localhost', port => '61613' } );   $stomp->connect( { login => 'hello', passcode => 'there' } );   $stomp->send(       { destination => '/queue/foo', body => 'test message' } );   $stomp->disconnect;    # subscribe to messages from the queue 'foo'   use Net::Stomp;   my $stomp = Net::Stomp->new( { hostname => 'localhost', port => '61613' } );   $stomp->connect( { login => 'hello', passcode => 'there' } );   $stomp->subscribe(       {   destination             => '/queue/foo',           'ack'                   => 'client',           'activemq.prefetchSize' => 1       }   );   while (1) {     my $frame = $stomp->receive_frame;     if (!defined $frame) {       # maybe log connection problems       next; # will reconnect automatically     }     warn $frame->body; # do something here     $stomp->ack( { frame => $frame } );   }   $stomp->disconnect;    # write your own frame   my $frame = Net::Stomp::Frame->new(        { command => $command, headers => $conf, body => $body } );   $self->send_frame($frame);    # connect with failover supporting similar URI to ActiveMQ   $stomp = Net::Stomp->new({ failover => ""failover://tcp://primary:61616"" })   # ""?randomize=..."" and other parameters are ignored currently   $stomp = Net::Stomp->new({ failover => ""failover:(tcp://primary:61616,tcp://secondary:61616)?randomize=false"" })    # Or in a more natural perl way   $stomp = Net::Stomp->new({ hosts => [     { hostname => 'primary', port => 61616 },     { hostname => 'secondary', port => 61616 },   ] }); DESCRIPTION This module allows you to write a Stomp client. Stomp is the Streaming Text Orientated Messaging Protocol (or the Protocol Briefly Known as TTMP and Represented by the symbol :ttmp). It's a simple and easy to implement protocol for working with Message Orientated Middleware from any language. Net::Stomp is useful for talking to Apache ActiveMQ, an open source (Apache 2.0 licensed) Java Message Service 1.1 (JMS) message broker packed with many enterprise features. A Stomp frame consists of a command, a series of headers and a body - see Net::Stomp::Frame for more details. For details on the protocol see https://stomp.github.io/. In long-lived processes, you can use a new Net::Stomp object to send each message, but it's more polite to the broker to keep a single object around and re-use it for multiple messages; this reduce the number of TCP connections that have to be established. Net::Stomp tries very hard to re-connect whenever something goes wrong. ActiveMQ-specific suggestions To enable the ActiveMQ Broker for Stomp add the following to the activemq.xml configuration inside the <transportConnectors> section:   <transportConnector name=""stomp"" uri=""stomp://localhost:61613""/> To enable the ActiveMQ Broker for Stomp and SSL add the following inside the <transportConnectors> section:   <transportConnector name=""stomp+ssl"" uri=""stomp+ssl://localhost:61612""/> For details on Stomp in ActiveMQ See http://activemq.apache.org/stomp.html. CONSTRUCTOR new The constructor creates a new object. You must pass in a hostname and a port or set a failover configuration:   my $stomp = Net::Stomp->new( { hostname => 'localhost', port => '61613' } ); If you want to use SSL, make sure you have IO::Socket::SSL and pass in the SSL flag:   my $stomp = Net::Stomp->new( {     hostname => 'localhost',     port     => '61612',     ssl      => 1,   } ); If you want to pass in IO::Socket::SSL options:   my $stomp = Net::Stomp->new( {     hostname    => 'localhost',     port        => '61612',     ssl         => 1,     ssl_options => { SSL_cipher_list => 'ALL:!EXPORT' },   } ); You can pass a logger object, for example a Log::Log4perl logger:   my $stomp = Net::Stomp->new({     hostname => 'localhost',     port     => '61613',     logger   => Log::Log4perl->get_logger('stomp'),   }); Warnings and errors will be logged instead of written to STDERR. Failover There is some failover support in Net::Stomp. You can specify ""failover"" in a similar manner to ActiveMQ (http://activemq.apache.org/failover-transport-reference.html) for similarity with Java configs or using a more natural method to Perl of passing in an array-of-hashrefs in the hosts parameter. When Net::Stomp connects the first time, upon construction, it will simply try each host in the list, stopping at the first one that accepts the connection, dying if no connection attempt is successful. You can set ""initial_reconnect_attempts"" to 0 to mean ""keep looping forever"", or to an integer value to mean ""only go through the list of hosts this many times"" (the default value is therefore 1). When Net::Stomp notices that the connection has been lost (inside ""send_frame"" or ""receive_frame""), it will try to re-connect. In this case, the number of connection attempts will be limited by ""reconnect_attempts"", which defaults to 0, meaning ""keep trying forever"". Reconnect on fork By default Net::Stomp will reconnect, using a different socket, if the process forks. This avoids problems when parent & child write to the socket at the same time. If, for whatever reason, you don't want this to happen, set ""reconnect_on_fork"" to 0 (either as a constructor parameter, or by calling the method). ATTRIBUTES These can be passed as constructor parameters, or used as read/write accessors. hostname If you want to connect to a single broker, you can specify its hostname here. If you modify this value during the lifetime of the object, the new value will be used for the subsequent reconnect attempts. port If you want to connect to a single broker, you can specify its port here. If you modify this value during the lifetime of the object, the new value will be used for the subsequent reconnect attempts. socket_options Optional hashref, it will be passed to the IO::Socket::IP, IO::Socket::SSL, or IO::Socket::INET constructor every time we need to get a socket. In addition to the various options supported by those classes, you can set keep_alive to a true value, which will enable TCP-level keep-alive on the socket (see the TCP Keepalive HOWTO for some information on that feature). ssl Boolean, defaults to false, whether we should use SSL to talk to the single broker. If you modify this value during the lifetime of the object, the new value will be used for the subsequent reconnect attempts. ssl_options Options to pass to IO::Socket::SSL when connecting via SSL to the single broker. If you modify this value during the lifetime of the object, the new value will be used for the subsequent reconnect attempts. failover Modifying this attribute after the object has been constructed has no effect. Pass this as a constructor parameter only. Its value must be a URL (as a string) in the form:    failover://(tcp://$hostname1:$port1,tcp://$hostname2:$port,...) This is equivalent to setting ""hosts"" to:   [ { hostname => $hostname1, port => $port1 },     { hostname => $hostname2, port => $port2 } ] hosts Arrayref of hashrefs, each having a hostname key and a port key, and optionall ssl and ssl_options. Connections will be attempted in order, looping around if necessary, depending on the values of ""initial_reconnect_attempts"" and ""reconnect_attempts"". current_host If using multiple hosts, this is the index (inside the ""hosts"" array) of the one we're currently connected to. logger Optional logger object, the default one just logs to STDERR (see Net::Stomp::StupidLogger). You can pass in any object that implements (at least) the warn and fatal methods. They will be passed a string to log. reconnect_on_fork Boolean, defaults to true. Reconnect if a method is being invoked from a different process than the one that created the object. Don't change this unless you really know what you're doing. initial_reconnect_attempts Integer, how many times to loop through the ""hosts"" trying to connect, before giving up and throwing an exception, during the construction of the object. Defaults to 1. 0 means ""keep trying forever"". Between each connection attempt there will be a sleep of ""connect_delay"" seconds. reconnect_attempts Integer, how many times to loop through the ""hosts"" trying to connect, before giving up and throwing an exception, during ""send_frame"" or ""receive_frame"". Defaults to 0, meaning ""keep trying forever"". Between each connection attempt there will be a sleep of ""connect_delay"" seconds. connect_delay Integer, defaults to 5. How many seconds to sleep between connection attempts to brokers. timeout Integer, in seconds, defaults to undef. The default timeout for read operations. undef means ""wait forever"". receipt_timeout Integer, in seconds, defaults to undef. The default timeout while waiting for a receipt (in ""send_with_receipt"" and ""send_transactional""). If undef, the global ""timeout"" is used. METHODS connect This starts the Stomp session with the Stomp server. You may pass in a login and passcode options, plus whatever other headers you may need (e.g. client-id, host).   $stomp->connect( { login => 'hello', passcode => 'there' } ); Returns the frame that the server responded with (or undef if the connection was lost). If that frame's command is not CONNECTED, something went wrong. send This sends a message to a queue or topic. You must pass in a destination and a body (which must be a string of bytes). You can also pass whatever other headers you may need (e.g. transaction).   $stomp->send( { destination => '/queue/foo', body => 'test message' } ); It's probably a good idea to pass a content-length corresponding to the byte length of the body; this is necessary if the body contains a byte 0. Always returns a true value. It automatically reconnects if writing to the socket fails. send_with_receipt This sends a message asking for a receipt, and returns false if the receipt of the message is not acknowledged by the server:   $stomp->send_with_receipt(       { destination => '/queue/foo', body => 'test message' }   ) or die ""Couldn't send the message!""; If using ActiveMQ, you might also want to make the message persistent:   $stomp->send_transactional(       { destination => '/queue/foo', body => 'test message', persistent => 'true' }   ) or die ""Couldn't send the message!""; The actual frame sequence for a successful sending is:   -> SEND   <- RECEIPT The actual frame sequence for a failed sending is:   -> SEND   <- anything but RECEIPT If you are using this connection only to send (i.e. you've never called ""subscribe""), the only thing that could be received instead of a RECEIPT is an ERROR frame, but if you subscribed, the broker may well send a MESSAGE before sending the RECEIPT. DO NOT use this method on a connection used for receiving. If you want to see the RECEIPT or ERROR frame, pass a scalar as a second parameter to the method, and it will be set to the received frame:   my $success = $stomp->send_transactional(       { destination => '/queue/foo', body => 'test message' },       $received_frame,   );   if (not $success) { warn $received_frame->as_string } You can specify a timeout in the parametrs, just like for ""received_frame"". This function will wait for that timeout, or for ""receipt_timeout"", or for ""timeout"", whichever is defined, or forever, if none is defined. send_transactional This sends a message in transactional mode and returns false if the receipt of the message is not acknowledged by the server:   $stomp->send_transactional(       { destination => '/queue/foo', body => 'test message' }   ) or die ""Couldn't send the message!""; If using ActiveMQ, you might also want to make the message persistent:   $stomp->send_transactional(       { destination => '/queue/foo', body => 'test message', persistent => 'true' }   ) or die ""Couldn't send the message!""; send_transactional just wraps send_with_receipt in a STOMP transaction. The actual frame sequence for a successful sending is:   -> BEGIN   -> SEND   <- RECEIPT   -> COMMIT The actual frame sequence for a failed sending is:   -> BEGIN   -> SEND   <- anything but RECEIPT   -> ABORT If you are using this connection only to send (i.e. you've never called ""subscribe""), the only thing that could be received instead of a RECEIPT is an ERROR frame, but if you subscribed, the broker may well send a MESSAGE before sending the RECEIPT. DO NOT use this method on a connection used for receiving. If you want to see the RECEIPT or ERROR frame, pass a scalar as a second parameter to the method, and it will be set to the received frame:   my $success = $stomp->send_transactional(       { destination => '/queue/foo', body => 'test message' },       $received_frame,   );   if (not $success) { warn $received_frame->as_string } You can specify a timeout in the parametrs, just like for ""received_frame"". This function will wait for that timeout, or for ""receipt_timeout"", or for ""timeout"", whichever is defined, or forever, if none is defined. disconnect This disconnects from the Stomp server:   $stomp->disconnect; If you call any other method after this, a new connection will be established automatically (to the next failover host, if there's more than one). Always returns a true value. subscribe This subscribes you to a queue or topic. You must pass in a destination. Always returns a true value. The acknowledge mode (header ack) defaults to auto, which means that frames will be considered delivered after they have been sent to a client. The other option is client, which means that messages will only be considered delivered after the client specifically acknowledges them with an ACK frame (see ""ack""). When Net::Stomp reconnects after a failure, all subscriptions will be re-instated, each with its own options. Other options: selector Specifies a JMS Selector using SQL 92 syntax as specified in the JMS 1.1 specification. This allows a filter to be applied to each message as part of the subscription. id A unique identifier for this subscription. Very useful if you subscribe to the same destination more than once (e.g. with different selectors), so that messages arriving will have a subscription header with this value if they arrived because of this subscription. activemq.dispatchAsync Should messages be dispatched synchronously or asynchronously from the producer thread for non-durable topics in the broker. For fast consumers set this to false. For slow consumers set it to true so that dispatching will not block fast consumers. activemq.exclusive Would I like to be an Exclusive Consumer on a queue. activemq.maximumPendingMessageLimit For Slow Consumer Handling on non-durable topics by dropping old messages - we can set a maximum pending limit which once a slow consumer backs up to this high water mark we begin to discard old messages. activemq.noLocal Specifies whether or not locally sent messages should be ignored for subscriptions. Set to true to filter out locally sent messages. activemq.prefetchSize Specifies the maximum number of pending messages that will be dispatched to the client. Once this maximum is reached no more messages are dispatched until the client acknowledges a message. Set to 1 for very fair distribution of messages across consumers where processing messages can be slow. activemq.priority Sets the priority of the consumer so that dispatching can be weighted in priority order. activemq.retroactive For non-durable topics do you wish this subscription to the retroactive. activemq.subscriptionName For durable topic subscriptions you must specify the same ""client-id"" on the connection and ""subscriptionName"" on the subscribe.   $stomp->subscribe(       {   destination             => '/queue/foo',           'ack'                   => 'client',           'activemq.prefetchSize' => 1       }   ); unsubscribe This unsubscribes you to a queue or topic. You must pass in a destination or an id:   $stomp->unsubcribe({ destination => '/queue/foo' }); Always returns a true value. receive_frame This blocks and returns you the next Stomp frame, or undef if there was a connection problem.   my $frame = $stomp->receive_frame;   warn $frame->body; # do something here By default this method will block until a frame can be returned, or for however long the ""timeout"" attribue says. If you wish to wait for a specified time pass a timeout argument:   # Wait half a second for a frame, else return undef   $stomp->receive_frame({ timeout => 0.5 }) can_read This returns whether there is new data waiting to be read from the STOMP server. Optionally takes a timeout in seconds:   my $can_read = $stomp->can_read;   my $can_read = $stomp->can_read({ timeout => '0.1' }); undef says block until something can be read, 0 says to poll and return immediately. This method ignores the value of the ""timeout"" attribute. ack This acknowledges that you have received and processed a frame and all frames before it (if you are using client acknowledgements):   $stomp->ack( { frame => $frame } ); Always returns a true value. nack This informs the remote end that you have been unable to process a received frame (if you are using client acknowledgements) (See individual stomp server documentation for information about additional fields that can be passed to alter NACK behavior):   $stomp->nack( { frame => $frame } ); Always returns a true value. send_frame If this module does not provide enough help for sending frames, you may construct your own frame and send it:   # write your own frame   my $frame = Net::Stomp::Frame->new(        { command => $command, headers => $conf, body => $body } );   $self->send_frame($frame); This is the method used by all the other methods that send frames. It will keep trying to send the frame as hard as it can, reconnecting if the connection breaks (limited by ""reconnect_attempts""). If no connection can be established, and ""reconnect_attempts"" is not 0, this method will die. Always returns an empty list. SEE ALSO Net::Stomp::Frame. SOURCE REPOSITORY https://github.com/dakkar/Net-Stomp AUTHORS Leon Brocard <acme@astray.com>, Thom May <thom.may@betfair.com>, Michael S. Fischer <michael@dynamine.net>, Ash Berlin <ash_github@firemirror.com> CONTRIBUTORS Paul Driver <frodwith@cpan.org>, Andreas Faafeng <aff@cpan.org>, Vigith Maurice <vigith@yahoo-inc.com>, Stephen Fralich <sjf4@uw.edu>, Squeeks <squeek@cpan.org>, Chisel Wright <chisel@chizography.net>, Gianni Ceccarelli <dakkar@thenautilus.net> COPYRIGHT Copyright (C) 2006-9, Leon Brocard Copyright (C) 2009, Thom May, Betfair.com Copyright (C) 2010, Ash Berlin, Net-a-Porter.com Copyright (C) 2010, Michael S. Fischer This module is free software; you can redistribute it or modify it under the same terms as Perl itself. × Module Install Instructions To install Net::Stomp, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Net::Stomp CPAN shell                      perl -MCPAN -e shell                     install Net::Stomp For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Queueing"	"Qudo"	"https://metacpan.org/pod/Qudo"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Qudo - simple and extensible job queue manager - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors karupanerura  /  0.0214 (KARUPA on 2016-02-27) 0.0213 (NEKOKAK on 2011-01-17) 0.0212 (NEKOKAK on 2010-10-05) 0.0211 (NEKOKAK on 2010-07-09) 0.0210 (NEKOKAK on 2010-07-06) 0.0209 (NEKOKAK on 2010-06-03) 0.0208 (NEKOKAK on 2010-06-03) 0.0207 (NEKOKAK on 2010-06-02) 0.0206 (NEKOKAK on 2010-06-02) 0.0205 (NEKOKAK on 2010-04-21) 0.0204 (NEKOKAK on 2010-04-21) 0.0203 (NEKOKAK on 2010-03-29) 0.0202 (NEKOKAK on 2010-03-16) 0.0201 (NEKOKAK on 2010-03-10) 0.02 (NEKOKAK on 2009-12-09) 0.01_03 DEV (NEKOKAK on 2009-11-21) 0.01_02 DEV (NEKOKAK on 2009-11-12) 0.01_01 DEV (NEKOKAK on 2009-09-11) Qudo-0.0214 2 ++ 2 ++  / Qudo 27 Feb 2016 15:05:29 GMT Module version: 0.0214 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues Testers (160 / 0 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (432.23Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.0213 (NEKOKAK on 2011-01-17) 0.0212 (NEKOKAK on 2010-10-05) 0.0211 (NEKOKAK on 2010-07-09) 0.0210 (NEKOKAK on 2010-07-06) 0.0209 (NEKOKAK on 2010-06-03) 0.0208 (NEKOKAK on 2010-06-03) 0.0207 (NEKOKAK on 2010-06-02) 0.0206 (NEKOKAK on 2010-06-02) 0.0205 (NEKOKAK on 2010-04-21) 0.0204 (NEKOKAK on 2010-04-21) 0.0203 (NEKOKAK on 2010-03-29) 0.0202 (NEKOKAK on 2010-03-16) 0.0201 (NEKOKAK on 2010-03-10) 0.02 (NEKOKAK on 2009-12-09) 0.01_03 DEV (NEKOKAK on 2009-11-21) 0.01_02 DEV (NEKOKAK on 2009-11-12) 0.01_01 DEV (NEKOKAK on 2009-09-11) Diff with version 0.0213 (NEKOKAK on 2011-01-17) 0.0212 (NEKOKAK on 2010-10-05) 0.0211 (NEKOKAK on 2010-07-09) 0.0210 (NEKOKAK on 2010-07-06) 0.0209 (NEKOKAK on 2010-06-03) 0.0208 (NEKOKAK on 2010-06-03) 0.0207 (NEKOKAK on 2010-06-02) 0.0206 (NEKOKAK on 2010-06-02) 0.0205 (NEKOKAK on 2010-04-21) 0.0204 (NEKOKAK on 2010-04-21) 0.0203 (NEKOKAK on 2010-03-29) 0.0202 (NEKOKAK on 2010-03-16) 0.0201 (NEKOKAK on 2010-03-10) 0.02 (NEKOKAK on 2009-12-09) 0.01_03 DEV (NEKOKAK on 2009-11-21) 0.01_02 DEV (NEKOKAK on 2009-11-12) 0.01_01 DEV (NEKOKAK on 2009-09-11) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 2 PAUSE users KARUPA karupanerura and 15 contributors show them Atsushi Kobayashi <nekokak _at_ gmail dot com> 小林 篤 Kobayashi User tokuhirom Masaru Hoshino makamaka Keiji, Yoshimi Atsushi Kobayashi memememomo ktat dokechin Tim Retout Daniel Green Jiro Nishiguchi Dependencies DBI DBIx::Skinny Getopt::Long List::Util Pod::Usage Scalar::Util UNIVERSAL::require YAML CPAN Testers List Reverse dependencies Dependency graph × Qudo-0.0214 NAME SYNOPSIS DESCRIPTION USEAGE Qudo->new( %args ) Qudo->manager Qudo->enqueue( %args ) Qudo->work( %args ) Qudo->job_count( $funcname, $dsn ) Qudo->exception_list( $args, $dsn ) Qudo->job_status_list( $args, $dsn ) REPOS AUTHOR COPYRIGHT NAME Qudo - simple and extensible job queue manager SYNOPSIS     # enqueue job:     use Qudo;     my $qudo = Qudo->new(         driver_class => 'Skinny', # optional.         databases => [+{             dsn      => 'dbi:SQLite:/tmp/qudo.db',             username => '',             password => '',         }],     );     $qudo->enqueue(""Worker::Test"", { arg => 'arg', uniqkey => 'uniqkey'});          # do work:     use Qudo;     my $qudo2 = Qudo->new(         driver_class => 'Skinny', # optional.         databases => [+{             dsn      => 'dbi:SQLite:/tmp/qudo.db',             username => '',             password => '',         }],         manager_abilities => [qw/Worker::Test/],     );     $qudo2->work(); # boot manager     # work work work! DESCRIPTION Qudo is simple and extensible job queue manager system. Your application can insert job into DB ,that is managed by Qudo. And Your application can get & execute job by Qudo worker. Qudo corresponds to deal with DB as MySQL and SQLite. If you add Hook Point around job's working method , you can add it easily and many point of work milestone. Qudo is consided about adding Hook Point Flexibility. USEAGE Qudo->new( %args ) Optional members of %args are: driver_class set Qudo::Driver::(Skinny|DBI). default driver_class is Skinny. databases An arrayref of database information. Qudo can use multiple databases, such that if any of them are unavailable, the worker will search for appropriate jobs in the other databases automatically. Each member of the databases value should be a hashref containing either: dsn The database DSN for this database. username The username to use when connecting to this database. password The password to use when connecting to this database. manager_abilities An arrayref of worker class name. please specify it when moving it by the usage of worker. it is not necessary to specify it for the usage of enqueue client. find_job_limit_size The maximum number in which it looks for job by one processing. Qudo default limit 30. please specify it when moving it by the usage of worker. it is not necessary to specify it for the usage of enqueue client. retry_seconds The number of seconds after which to try reconnecting to apparently dead databases. If not given, Qudo will retry connecting to databases after 30 seconds. default_hooks An arrayref of hook class name. default_plugins An arrayref of plugin class name. Qudo->manager get Qudo::Manager instance. see Qudo::Manager Qudo->enqueue( %args ) see Qudo::Manager enqueue method. Qudo->work( %args ) Find and perform any jobs $manager can do, forever. When no job is available, the working process will sleep for $delay seconds (or 5, if not specified) before looking again. Qudo->job_count( $funcname, $dsn ) Returns a job count infomations. The required arguments : funcname the name of the function or a reference to an array of functions. dsn The database DSN for job count target database. Qudo->exception_list( $args, $dsn ) Returns a job exception infomations. Optional members of $args are: args limit get exception log limit size. default by 10. offset get exception log offset size. default by 0. dsn The database DSN for job count target database. Qudo->job_status_list( $args, $dsn ) Returns a job exception infomations. Optional members of $args are: args limit get job_status log limit size. default by 10. offset get job_status log offset size. default by 0. dsn The database DSN for job count target database. REPOS http://github.com/nekokak/qudo/tree/master AUTHOR Atsushi Kobayashi <nekokak _at_ gmail dot com> Masaru Hoshino <masartz _at_ gmail dot com> COPYRIGHT This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself. The full text of the license can be found in the LICENSE file included with this module. × Module Install Instructions To install Qudo, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Qudo CPAN shell                      perl -MCPAN -e shell                     install Qudo For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Queueing"	"Resque"	"https://metacpan.org/pod/Resque"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	""	"false"
"Queueing"	"TheSchwartz"	"https://metacpan.org/pod/TheSchwartz"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"TheSchwartz - reliable job queue - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Jeff Fearn  /  1.12 (JFEARN on 2015-03-30) 1.11 (JFEARN on 2014-11-03) 1.10 (SIXAPART on 2010-03-15) 1.07 (BRADFITZ on 2008-08-01) 1.04 (BRADFITZ on 2007-05-22) 1.03 (BRADFITZ on 2007-04-26) TheSchwartz-1.12 10 ++ 10 ++  / TheSchwartz 30 Mar 2015 02:30:59 GMT Module version: 1.12 Source (raw) Browse (raw) Changes Issues (3) Testers (1152 / 43 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (53.76Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.11 (JFEARN on 2014-11-03) 1.10 (SIXAPART on 2010-03-15) 1.07 (BRADFITZ on 2008-08-01) 1.04 (BRADFITZ on 2007-05-22) 1.03 (BRADFITZ on 2007-04-26) Diff with version 1.11 (JFEARN on 2014-11-03) 1.10 (SIXAPART on 2010-03-15) 1.07 (BRADFITZ on 2008-08-01) 1.04 (BRADFITZ on 2007-05-22) 1.03 (BRADFITZ on 2007-04-26) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 5 PAUSE users 5 non-PAUSE users. JFEARN Jeff Fearn and 1 contributors show them Six Apart Dependencies Data::ObjectDriver Digest::MD5 Storable and possibly others CPAN Testers List Reverse dependencies Dependency graph × TheSchwartz-1.12 NAME SYNOPSIS DESCRIPTION USAGE TheSchwartz->new( %args ) $client->list_jobs( %args ) $client->lookup_job( $handle_id ) $client->set_verbose( $verbose ) POSTING JOBS $client->insert( $job ) $client->insert( $funcname, $arg ) $client->insert_jobs( @jobs ) $client->set_prioritize( $prioritize ) $client->set_floor( $floor ) $client->set_batch_size( $batch_size ) $client->set_strict_remove_ability( $strict_remove_ability ) WORKING $client->can_do( $ability ) $client->work_once() $client->work_until_done() $client->work( [$delay] ) $client->work_on($handle) $client->grab_and_work_on($handle) $client->find_job_for_workers( [$abilities] ) $client->find_job_with_coalescing_value( $ability, $coval ) $client->find_job_with_coalescing_prefix( $ability, $coval ) $client->get_server_time( $driver ) THE SCOREBOARD $client->set_scoreboard( $dir ) $client->scoreboard() $client->start_scoreboard() $client->end_scoreboard() $client->clean_scoreboard() PASSING IN AN EXISTING DRIVER COPYRIGHT, LICENSE & WARRANTY NAME TheSchwartz - reliable job queue SYNOPSIS     # MyApp.pm     package MyApp;      sub work_asynchronously {         my %args = @_;          my $client = TheSchwartz->new( databases => $DATABASE_INFO );         $client->insert('MyWorker', \%args);     }       # myworker.pl     package MyWorker;     use base qw( TheSchwartz::Worker );      sub work {         my $class = shift;         my TheSchwartz::Job $job = shift;          print ""Workin' hard or hardly workin'? Hyuk!!\n"";          $job->completed();     }      package main;      my $client = TheSchwartz->new( databases => $DATABASE_INFO );     $client->can_do('MyWorker');     $client->work(); DESCRIPTION TheSchwartz is a reliable job queue system. Your application can put jobs into the system, and your worker processes can pull jobs from the queue atomically to perform. Failed jobs can be left in the queue to retry later. Abilities specify what jobs a worker process can perform. Abilities are the names of TheSchwartz::Worker sub-classes, as in the synopsis: the MyWorker class name is used to specify that the worker script can perform the job. When using the TheSchwartz client's work functions, the class-ability duality is used to automatically dispatch to the proper class to do the actual work. TheSchwartz clients will also prefer to do jobs for unused abilities before reusing a particular ability, to avoid exhausting the supply of one kind of job while jobs of other types stack up. Some jobs with high setup times can be performed more efficiently if a group of related jobs are performed together. TheSchwartz offers a facility to coalesce jobs into groups, which a properly constructed worker can find and perform at once. For example, if your worker were delivering email, you might store the domain name from the recipient's address as the coalescing value. The worker that grabs that job could then batch deliver all the mail for that domain once it connects to that domain's mail server. USAGE TheSchwartz->new( %args ) Optional members of %args are: databases An arrayref of database information. TheSchwartz workers can use multiple databases, such that if any of them are unavailable, the worker will search for appropriate jobs in the other databases automatically. Each member of the databases value should be a hashref containing either: dsn The database DSN for this database. user The user name to use when connecting to this database. pass The password to use when connecting to this database. or driver A Data::ObjectDriver::Driver::DBI object. See note below. verbose A value indicating whether to log debug messages. If verbose is a coderef, it is called to log debug messages. If verbose is not a coderef but is some other true value, debug messages will be sent to STDERR. Otherwise, debug messages will not be logged. prioritize A value indicating whether to utilize the job 'priority' field when selecting jobs to be processed. If unspecified, jobs will always be executed in a randomized order. floor A value indicating the minimum priority a job needs to be for this worker to perform. If unspecified all jobs are considered. batch_size A value indicating how many jobs should be fetched from the DB for consideration. driver_cache_expiration Optional value to control how long database connections are cached for in seconds. By default, connections are not cached. To re-use the same database connection for five minutes, pass driver_cache_expiration => 300 to the constructor. Improves job throughput in cases where the work to process a job is small compared to the database connection set-up and tear-down time. retry_seconds The number of seconds after which to try reconnecting to apparently dead databases. If not given, TheSchwartz will retry connecting to databases after 30 seconds. strict_remove_ability By default when work_once does not find a job it will reset current_abilities to all_abilities and look for a job. Setting this option will prevent work_once from resetting abilities if it can't find a job for the current capabilities. $client->list_jobs( %args ) Returns a list of TheSchwartz::Job objects matching the given arguments. The required members of %args are: funcname the name of the function or a reference to an array of functions run_after the value you want to check <= against on the run_after column grabbed_until the value you want to check <= against on the grabbed_until column coalesce_op defaults to '=', set it to whatever you want to compare the coalesce field too if you want to search, you can use 'LIKE' coalesce coalesce value to search for, if you set op to 'LIKE' you can use '%' here, do remember that '%' searches anchored at the beginning of the string are much faster since it is can do a btree index lookup want_handle if you want all your jobs to be set up using a handle. defaults to true. this option might be removed, as you should always have this on a Job object. jobid if you want a specific job you can pass in it's ID and if it's available it will be listed. It is important to remember that this function does not lock anything, it just returns as many jobs as there is up to amount of databases * $client->{batch_size} $client->lookup_job( $handle_id ) Returns a TheSchwartz::Job corresponding to the given handle ID. $client->set_verbose( $verbose ) Sets the current logging function to $verbose if it's a coderef. If not a coderef, enables debug logging to STDERR if $verbose is true; otherwise, disables logging. POSTING JOBS The methods of TheSchwartz clients used by applications posting jobs to the queue are: $client->insert( $job ) Adds the given TheSchwartz::Job to one of the client's job databases. $client->insert( $funcname, $arg ) Adds a new job with function name $funcname and arguments $arg to the queue. $client->insert_jobs( @jobs ) Adds the given TheSchwartz::Job objects to one of the client's job databases. All the given jobs are recorded in one job database. $client->set_prioritize( $prioritize ) Set the prioritize value as described in the constructor. $client->set_floor( $floor ) Set the floor<gt value as described in the constructor. $client->set_batch_size( $batch_size ) Set the batch_size<gt value as described in the constructor. $client->set_strict_remove_ability( $strict_remove_ability ) Set the strict_remove_ability<gt value as described in the constructor. WORKING The methods of TheSchwartz clients for use in worker processes are: $client->can_do( $ability ) Adds $ability to the list of abilities $client is capable of performing. Subsequent calls to that client's work methods will find jobs requiring the given ability. $client->work_once() Find and perform one job $client can do. $client->work_until_done() Find and perform jobs $client can do until no more such jobs are found in any of the client's job databases. $client->work( [$delay] ) Find and perform any jobs $client can do, forever. When no job is available, the working process will sleep for $delay seconds (or 5, if not specified) before looking again. $client->work_on($handle) Given a job handle (a scalar string) $handle, runs the job, then returns. $client->grab_and_work_on($handle) Similar to $client->work_on($handle), except that the job will be grabbed before being run. It guarantees that only one worker will work on it (at least in the grab_for interval). Returns false if the worker could not grab the job, and true if the worker worked on it. $client->find_job_for_workers( [$abilities] ) Returns a TheSchwartz::Job for a random job that the client can do. If specified, the job returned matches one of the abilities in the arrayref $abilities, rather than $client's abilities. $client->find_job_with_coalescing_value( $ability, $coval ) Returns a TheSchwartz::Job for a random job for a worker capable of $ability and with a coalescing value of $coval. $client->find_job_with_coalescing_prefix( $ability, $coval ) Returns a TheSchwartz::Job for a random job for a worker capable of $ability and with a coalescing value beginning with $coval. Note the TheSchwartz implementation of this function uses a LIKE query to find matching jobs, with all the attendant performance implications for your job databases. $client->get_server_time( $driver ) Given an open driver $driver to a database, gets the current server time from the database. THE SCOREBOARD The scoreboards can be used to monitor what the TheSchwartz::Worker sub-classes are currently working on. Once the scoreboard has been enabled in the workers with set_scoreboard method the thetop utility (shipped with TheSchwartz distribution in the extras directory) can be used to list all current jobs being worked on. $client->set_scoreboard( $dir ) Enables the scoreboard. Setting this to 1 or on will cause TheSchwartz to create a scoreboard file in a location it determines is optimal. Passing in any other option sets the directory the TheSchwartz scoreboard directory should be created in. For example, if you set this to /tmp then this would create a directory called /tmp/theschwartz and a scoreboard file /tmp/theschwartz/scoreboard.pid in it (where pid is the current process pid.) $client->scoreboard() Returns the path to the current scoreboard file. $client->start_scoreboard() Writes the current job information to the scoreboard file (called by the worker in work_safely before it actually starts working) $client->end_scoreboard() Appends the current job duration to the end of the scoreboard file (called by the worker in work_safely once work has been completed) $client->clean_scoreboard() Removes the scoreboard file (but not the scoreboard directory.) Automatically called by TheSchwartz during object destruction (i.e. when the instance goes out of scope) PASSING IN AN EXISTING DRIVER You can pass in a existing Data::Object::Driver::DBI object which also allows you to reuse exist Database handles like so:         my $dbh = DBI->connect( $dsn, ""root"", """", {                 RaiseError => 1,                 PrintError => 0,                 AutoCommit => 1,             } ) or die $DBI::errstr;         my $driver = Data::ObjectDriver::Driver::DBI->new( dbh => $dbh);         return TheSchwartz->new(databases => [{ driver => $driver }]); Note: it's important that the RaiseError and AutoCommit flags are set on the handle for various bits of functionality to work. COPYRIGHT, LICENSE & WARRANTY This software is Copyright 2007, Six Apart Ltd, cpan@sixapart.com. All rights reserved. TheSchwartz is free software; you may redistribute it and/or modify it under the same terms as Perl itself. TheSchwartz comes with no warranty of any kind. × Module Install Instructions To install TheSchwartz, simply copy and paste either of the commands in to your terminal cpanm                      cpanm TheSchwartz CPAN shell                      perl -MCPAN -e shell                     install TheSchwartz For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Science/Numerics"	"BioPerl"	"https://metacpan.org/pod/BioPerl"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"BioPerl - Perl Modules for Biology - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Christopher Fields  /  1.007000_004 DEV (CJFIELDS on 2016-07-07) 1.007000_003 DEV (CJFIELDS on 2016-07-07) 1.006924 (CJFIELDS on 2014-07-10) 1.007000_002 (CJFIELDS on 2016-07-06) 1.007000_001 (CJFIELDS on 2016-07-06) 1.006923 (CJFIELDS on 2013-12-18) 1.006922 (CJFIELDS on 2013-09-14) 1.006921 (CJFIELDS on 2013-09-11) 1.006920 (CJFIELDS on 2013-09-08) 1.006910 (CJFIELDS on 2013-09-08) 1.006901 (CJFIELDS on 2011-05-19) 1.006900 (CJFIELDS on 2011-04-14) 1.6.1 (CJFIELDS on 2009-09-29) 1.6.0006 DEV (CJFIELDS on 2009-09-28) 1.6.0005 DEV (CJFIELDS on 2009-09-28) 1.6.0004 DEV (CJFIELDS on 2009-09-25) 1.6.0003 DEV (CJFIELDS on 2009-09-22) 1.6.0002 DEV (CJFIELDS on 2009-09-22) 1.006000_001 DEV (CJFIELDS on 2009-09-17) 1.006000 (CJFIELDS on 2009-01-25) 1.005009_004 DEV (CJFIELDS on 2009-01-21) 1.005009_003 DEV (CJFIELDS on 2009-01-16) 1.005009_002 DEV (CJFIELDS on 2009-01-06) 1.005009_001 DEV (CJFIELDS on 2008-12-24) 1.005009_001 DEV (CJFIELDS on 2008-12-24) BioPerl-1.6.924 16 ++ 16 ++  / BioPerl 10 Jul 2014 20:22:23 GMT Source (raw) Browse (raw) Changes Issues Testers (1088 / 2077 / 1) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (12.04Mb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.007000_004 DEV (CJFIELDS on 2016-07-07) 1.007000_003 DEV (CJFIELDS on 2016-07-07) 1.007000_002 (CJFIELDS on 2016-07-06) 1.007000_001 (CJFIELDS on 2016-07-06) 1.006923 (CJFIELDS on 2013-12-18) 1.006922 (CJFIELDS on 2013-09-14) 1.006921 (CJFIELDS on 2013-09-11) 1.006920 (CJFIELDS on 2013-09-08) 1.006910 (CJFIELDS on 2013-09-08) 1.006901 (CJFIELDS on 2011-05-19) 1.006900 (CJFIELDS on 2011-04-14) 1.6.1 (CJFIELDS on 2009-09-29) 1.6.0006 DEV (CJFIELDS on 2009-09-28) 1.6.0005 DEV (CJFIELDS on 2009-09-28) 1.6.0004 DEV (CJFIELDS on 2009-09-25) 1.6.0003 DEV (CJFIELDS on 2009-09-22) 1.6.0002 DEV (CJFIELDS on 2009-09-22) 1.006000_001 DEV (CJFIELDS on 2009-09-17) 1.006000 (CJFIELDS on 2009-01-25) 1.005009_004 DEV (CJFIELDS on 2009-01-21) 1.005009_003 DEV (CJFIELDS on 2009-01-16) 1.005009_002 DEV (CJFIELDS on 2009-01-06) 1.005009_001 DEV (CJFIELDS on 2008-12-24) 1.005009_001 DEV (CJFIELDS on 2008-12-24) Diff with version 1.007000_004 DEV (CJFIELDS on 2016-07-07) 1.007000_003 DEV (CJFIELDS on 2016-07-07) 1.007000_002 (CJFIELDS on 2016-07-06) 1.007000_001 (CJFIELDS on 2016-07-06) 1.006923 (CJFIELDS on 2013-12-18) 1.006922 (CJFIELDS on 2013-09-14) 1.006921 (CJFIELDS on 2013-09-11) 1.006920 (CJFIELDS on 2013-09-08) 1.006910 (CJFIELDS on 2013-09-08) 1.006901 (CJFIELDS on 2011-05-19) 1.006900 (CJFIELDS on 2011-04-14) 1.6.1 (CJFIELDS on 2009-09-29) 1.6.0006 DEV (CJFIELDS on 2009-09-28) 1.6.0005 DEV (CJFIELDS on 2009-09-28) 1.6.0004 DEV (CJFIELDS on 2009-09-25) 1.6.0003 DEV (CJFIELDS on 2009-09-22) 1.6.0002 DEV (CJFIELDS on 2009-09-22) 1.006000_001 DEV (CJFIELDS on 2009-09-17) 1.006000 (CJFIELDS on 2009-01-25) 1.005009_004 DEV (CJFIELDS on 2009-01-21) 1.005009_003 DEV (CJFIELDS on 2009-01-16) 1.005009_002 DEV (CJFIELDS on 2009-01-06) 1.005009_001 DEV (CJFIELDS on 2008-12-24) 1.005009_001 DEV (CJFIELDS on 2008-12-24) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 7 PAUSE users 9 non-PAUSE users. CJFIELDS Christopher Fields and 1 contributors show them BioPerl Team Dependencies Data::Stag ExtUtils::Manifest IO::String Scalar::Util and possibly others CPAN Testers List Reverse dependencies Dependency graph × BioPerl-1.6.924 NAME SYNOPSIS Current Overview Tutorials References for Individual Modules DESCRIPTION DOCUMENTATION INSTALLATION GETTING STARTED GETTING INVOLVED Asking questions and telling us you used it Writing a script that uses it Find bugs! Suggest new functionality Make your own objects Writing documentation ACKNOWLEDGEMENTS COPYRIGHT NAME BioPerl - Perl Modules for Biology SYNOPSIS If you're new to BioPerl, you should start reading the BioPerl tutorial, an overview of the BioPerl toolkit: http://www.bioperl.org/wiki/BioPerl_Tutorial Current Overview Core Bioperl documentation has been split up into the following sections: bioperl BioPerl overview (this document) We may add more documents in the future, including: biodatabases How to use databases with BioPerl biodesign A guide for authoring a BioPerl module bioscripts Description and overview of BioPerl scripts (in the /scripts directory) Tutorials BioPerl tutorial for beginners http://www.bioperl.org/wiki/BioPerl_Tutorial Institut Pasteur BioPerl tutorial (note: for older versions of BioPerl) http://www.pasteur.fr/recherche/unites/sis/formation/bioperl References for Individual Modules For ease of maintenance and coordination amongst contributors, BioPerl code is maintained in a modular form, as is the documentation. Refer to the documentation for individual modules by using perldoc, i.e. perldoc Bio::Seq to get documentation for the Bio::Seq object. DESCRIPTION BioPerl is the product of a community effort to produce Perl code which is useful in biology. Examples include Sequence objects, Alignment objects and database searching objects. These objects not only do what they are advertised to do in the documentation, but they also interact - Alignment objects are made from the Sequence objects, Sequence objects have access to Annotation and SeqFeature objects and databases, Blast objects can be converted to Alignment objects, and so on. This means that the objects provide a coordinated and extensible framework to do computational biology. BioPerl development focuses on Perl classes, or code that is used to create objects representing biological entities. There are scripts provided in the scripts/ and examples/ directories but scripts are not the main focus of the BioPerl developers. Of course, as the objects do most of the hard work for you, all you have to do is combine a number of objects together sensibly to make useful scripts. The intent of the BioPerl development effort is to make reusable tools that aid people in creating their own sites or job-specific applications. The BioPerl website at http://bioperl.org also attempts to maintain links and archives of standalone bio-related Perl tools that are not affiliated or related to the core BioPerl effort. Check the site for useful code ideas and contribute your own if possible. DOCUMENTATION The Bio::Perl module (not this document) is designed to flatten the learning curve for newcomers to Perl/Bioperl. This is a good place to start if you want some simple functionality. We have a cookbook tutorial on-line: http://bioperl.org/wiki/BioPerl_Tutorial which has embedded documentation. Start there if learning-by-example suits you most, or examine the BioPerl online course at: http://www.pasteur.fr/recherche/unites/sis/formation/bioperl Make sure to check the documentation in the modules as well - there are over 900 modules in BioPerl, and counting, and there's detail in the modules' documentation that will not appear in the general documentation. INSTALLATION The BioPerl modules are distributed as a tar file that expands into a standard perl CPAN distribution. Detailed installation directions can be found in the distribution INSTALL file. Installing on windows using ActiveState Perl is covered in the INSTALL.WIN file. We highly suggest reading the installation instructions on the BioPerl website: http://www.bioperl.org/wiki/Installing_BioPerl Some BioPerl-related distributions such as Bio::Graphics, BioPerl-db, BioPerl-run, BioPerl-gui, corba-server, BioPerl-ext, BioPerl-pipeline, BioPerl-microarray and corba-client packages are installed separately from BioPerl. Please refer to their respective documentation for more information. Note that only the following are supported at this time with the current API: BioPerl-db BioPerl-network BioPerl-run BioPerl-pedigree Bio::Graphics GETTING STARTED A good place to start is by reading the tutorial : http://bioperl.org/wiki/BioPerl_Tutorial The distribution scripts/ directory has working scripts for use with BioPerl, check the self-described examples/ directory as well. You are more than welcome to contribute your script! If you have installed BioPerl in the standard way, as detailed in the INSTALL in the distribution, these scripts should work by just running them. If you have not installed it in a standard way you will have to change the 'use lib' to point to your installation (see INSTALL for details). GETTING INVOLVED BioPerl is a completely open community of developers. We are not funded and we don't have a mission statement. We encourage collaborative code, in particular in Perl. You can help us in many different ways, from just a simple statement about how you have used BioPerl to doing something interesting to contributing a whole new object hierarchy. See http://bioperl.org for more information. Here are some ways of helping us: Asking questions and telling us you used it We are very interested to hear how you experienced using BioPerl. Did it install cleanly? Did you understand the documentation? Could you get the objects to do what you wanted them to do? If BioPerl was useless we want to know why, and if it was great - that too. Post a message to bioperl-l@bioperl.org, the BioPerl mailing list, where all the developers are. Only by getting people's feedback do we know whether we are providing anything useful. Writing a script that uses it By writing a good script that uses BioPerl you both show that BioPerl is useful and probably save someone elsewhere writing it. If you contribute it to the 'script central' at http://bioperl.org then other people can view and use it. Don't be nervous if you've never done this sort of work, advice is freely given and all are welcome! Find bugs! We know that there are bugs in this code. If you find something which you are pretty sure is a problem, post a bug report using our Bugzilla tracking system: https://github.com/bioperl/bioperl-live/issues Please read the main bug tracking (http://www.bioperl.org/wiki/Bugs) for an overview of what we expect in a bug report. Specifically, having a code and data example where appropriate helps tremendously. We gladly accept all patches after a quick code review. Suggest new functionality You can suggest areas where the objects are not ideally written and could be done better. The best way is to find the main developer of the module (each module was written principally by one person, except for Seq.pm). Talk to him or her and suggest changes. Make your own objects If you can make a useful object we will happily include it into the core. Probably you will want to read a lot of the documentation in Bio::Root::Root and talk to people on the BioPerl mailing list, bioperl-l@bioperl.org. Writing documentation We appreciate good documentation. It's what tells the world what's in BioPerl, it's what instructs the user, it's what describes the rationale and inner workings of the package. Feel free to contribute. ACKNOWLEDGEMENTS For a more detailed history of the BioPerl project, we recommend the History of BioPerl: http://www.bioperl.org/wiki/History_of_BioPerl COPYRIGHT Copyright (c) 1996-2009 Georg Fuellen, Richard Resnick, Steven E. Brenner, Chris Dagdigian, Steve Chervitz, Ewan Birney, James Gilbert, Elia Stupka, and others. All Rights Reserved. This module is free software; you can redistribute it and/or modify it under the same terms as Perl itself. × Module Install Instructions To install BioPerl, simply copy and paste either of the commands in to your terminal cpanm                      cpanm BioPerl CPAN shell                      perl -MCPAN -e shell                     install BioPerl For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Science/Numerics"	"Chart::Clicker"	"https://metacpan.org/pod/Chart::Clicker"	"Powerful, extensible charting"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Chart::Clicker - Powerful, extensible charting. - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Cory G Watson  /  2.88 (GPHAT on 2014-04-01) 2.87 (GPHAT on 2014-01-25) 2.86 (GPHAT on 2013-06-05) 2.85 (GPHAT on 2013-03-23) 2.84 (GPHAT on 2013-01-23) 2.83 (GPHAT on 2012-06-22) 2.82 (GPHAT on 2012-06-19) 2.81 (GPHAT on 2012-03-19) 2.80 (GPHAT on 2012-03-05) 2.79 (GPHAT on 2012-02-18) 2.78 (GPHAT on 2012-02-16) 2.77 (GPHAT on 2012-02-13) 2.76 (GPHAT on 2011-12-14) 2.75 (GPHAT on 2011-12-05) 2.74 (GPHAT on 2011-11-13) 2.73 (GPHAT on 2011-11-04) 2.72 (GPHAT on 2011-09-05) 2.71 (GPHAT on 2011-08-26) 2.70 (GPHAT on 2011-08-07) 2.69 (GPHAT on 2011-06-02) 2.68 (GPHAT on 2011-05-13) 2.67 (GPHAT on 2011-02-19) 2.66 (GPHAT on 2011-02-17) 2.65 (GPHAT on 2010-07-21) 2.64 (GPHAT on 2010-05-09) 2.63 (GPHAT on 2010-05-09) 2.62 (GPHAT on 2010-04-11) 2.61 (GPHAT on 2010-04-10) 2.60 (GPHAT on 2010-03-20) 2.59 (GPHAT on 2010-03-08) 2.58 (GPHAT on 2010-01-25) 2.57 (GPHAT on 2010-01-24) 2.56 (GPHAT on 2010-01-13) 2.54 (GPHAT on 2010-01-01) 2.53 (GPHAT on 2009-12-17) 2.52 (GPHAT on 2009-12-09) 2.51 (GPHAT on 2009-12-02) 2.50 (GPHAT on 2009-11-29) 2.49 (GPHAT on 2009-11-27) 2.48 (GPHAT on 2009-11-26) 2.47 (GPHAT on 2009-11-26) 2.46 (GPHAT on 2009-11-26) 2.45 (GPHAT on 2009-11-26) 2.44 (GPHAT on 2009-09-27) 2.42 (GPHAT on 2009-08-23) 2.41 (GPHAT on 2009-07-30) 2.40 (GPHAT on 2009-07-13) 2.39 (GPHAT on 2009-07-12) 2.38 (GPHAT on 2009-07-12) 2.37 (GPHAT on 2009-07-06) 2.36 (GPHAT on 2009-07-01) 2.35 (GPHAT on 2009-06-28) 2.34 (GPHAT on 2009-06-13) 2.33 (GPHAT on 2009-05-27) 2.32 (GPHAT on 2009-05-23) 2.31 (GPHAT on 2009-05-14) 2.30 (GPHAT on 2009-05-11) 2.29 (GPHAT on 2009-05-11) 2.28 (GPHAT on 2009-05-10) 2.27 (GPHAT on 2009-05-09) 2.26 (GPHAT on 2009-05-09) 2.24 (GPHAT on 2009-05-02) 2.23 (GPHAT on 2009-04-28) 2.22 (GPHAT on 2009-04-05) 2.21 (GPHAT on 2009-03-31) 2.20 (GPHAT on 2009-03-28) 2.19 (GPHAT on 2009-03-24) 2.18 (GPHAT on 2009-02-14) 2.17 (GPHAT on 2008-12-21) 2.16 (GPHAT on 2008-12-16) 2.15 (GPHAT on 2008-12-14) 1.1.8 (GPHAT on 2008-12-01) 1.1.8 (GPHAT on 2008-10-05) 1.1.8 (GPHAT on 2008-10-01) 1.1.8 (GPHAT on 2008-09-24) 1.1.8 (GPHAT on 2008-09-23) 1.1.8 (GPHAT on 2008-09-09) 1.1.8 (GPHAT on 2008-09-08) 1.1.8 (GPHAT on 2008-09-03) 1.1.8 (GPHAT on 2008-08-31) 1.1.8 (GPHAT on 2008-08-29) 1.1.8 (GPHAT on 2008-08-28) 1.1.8 (GPHAT on 2008-08-27) 1.1.8 (GPHAT on 2008-08-27) 1.1.8 (GPHAT on 2008-08-27) 1.1.8 (GPHAT on 2008-08-20) 1.1.8 DEV (GPHAT on 2008-08-20) 1.1.8 DEV (GPHAT on 2008-08-19) 1.1.8 DEV (GPHAT on 2008-08-19) 1.1.8 DEV (GPHAT on 2008-08-18) 1.1.8 DEV (GPHAT on 2008-08-14) 1.1.8 DEV (GPHAT on 2008-08-14) 1.1.8 DEV (GPHAT on 2008-08-12) 1.1.8 DEV (GPHAT on 2008-08-06) 1.1.8 DEV (GPHAT on 2008-08-05) 1.1.8 DEV (GPHAT on 2008-07-21) 1.1.8 DEV (GPHAT on 2008-07-17) 1.1.8 (GPHAT on 2007-12-19) 1.1.8 (GPHAT on 2007-11-26) 1.1.8 (GPHAT on 2007-10-20) 1.1.8 (GPHAT on 2007-10-15) 1.1.8 (GPHAT on 2007-10-12) 1.1.8 (GPHAT on 2007-10-06) 1.1.8 (GPHAT on 2007-10-04) 1.1.8 (GPHAT on 2007-10-04) 1.1.8 (GPHAT on 2007-09-01) 1.1.7 (GPHAT on 2007-08-31) 1.1.6 (GPHAT on 2007-03-10) 1.1.5 (GPHAT on 2007-02-24) 1.1.4 (GPHAT on 2007-01-04) 1.1.3 (GPHAT on 2006-10-22) 1.1.2 (GPHAT on 2006-10-21) 1.1.1 (GPHAT on 2006-09-18) 1.1.0 (GPHAT on 2006-09-15) 1.0.7 (GPHAT on 2006-09-13) 1.0.6 (GPHAT on 2006-09-10) 1.0.4 (GPHAT on 2006-09-01) 1.0.3 (GPHAT on 2006-08-16) 1.0.2 (GPHAT on 2006-08-11) 1.0.1 (GPHAT on 2006-08-10) 1.0.0 (GPHAT on 2006-08-05) 0.9.7 (GPHAT on 2006-06-12) 0.9.6 (GPHAT on 2006-06-09) 0.9.5 (GPHAT on 2006-05-23) 0.9.2 (GPHAT on 2006-05-11) 0.9.0 (GPHAT on 2006-05-10) Chart-Clicker-2.88 24 ++ 24 ++  / Chart::Clicker 01 Apr 2014 05:28:13 GMT Module version: 2.88 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues (15) 5 (3 reviews) Testers (597 / 10 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (71.06Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 2.87 (GPHAT on 2014-01-25) 2.86 (GPHAT on 2013-06-05) 2.85 (GPHAT on 2013-03-23) 2.84 (GPHAT on 2013-01-23) 2.83 (GPHAT on 2012-06-22) 2.82 (GPHAT on 2012-06-19) 2.81 (GPHAT on 2012-03-19) 2.80 (GPHAT on 2012-03-05) 2.79 (GPHAT on 2012-02-18) 2.78 (GPHAT on 2012-02-16) 2.77 (GPHAT on 2012-02-13) 2.76 (GPHAT on 2011-12-14) 2.75 (GPHAT on 2011-12-05) 2.74 (GPHAT on 2011-11-13) 2.73 (GPHAT on 2011-11-04) 2.72 (GPHAT on 2011-09-05) 2.71 (GPHAT on 2011-08-26) 2.70 (GPHAT on 2011-08-07) 2.69 (GPHAT on 2011-06-02) 2.68 (GPHAT on 2011-05-13) 2.67 (GPHAT on 2011-02-19) 2.66 (GPHAT on 2011-02-17) 2.65 (GPHAT on 2010-07-21) 2.64 (GPHAT on 2010-05-09) 2.63 (GPHAT on 2010-05-09) 2.62 (GPHAT on 2010-04-11) 2.61 (GPHAT on 2010-04-10) 2.60 (GPHAT on 2010-03-20) 2.59 (GPHAT on 2010-03-08) 2.58 (GPHAT on 2010-01-25) 2.57 (GPHAT on 2010-01-24) 2.56 (GPHAT on 2010-01-13) 2.54 (GPHAT on 2010-01-01) 2.53 (GPHAT on 2009-12-17) 2.52 (GPHAT on 2009-12-09) 2.51 (GPHAT on 2009-12-02) 2.50 (GPHAT on 2009-11-29) 2.49 (GPHAT on 2009-11-27) 2.48 (GPHAT on 2009-11-26) 2.47 (GPHAT on 2009-11-26) 2.46 (GPHAT on 2009-11-26) 2.45 (GPHAT on 2009-11-26) 2.44 (GPHAT on 2009-09-27) 2.42 (GPHAT on 2009-08-23) 2.41 (GPHAT on 2009-07-30) 2.40 (GPHAT on 2009-07-13) 2.39 (GPHAT on 2009-07-12) 2.38 (GPHAT on 2009-07-12) 2.37 (GPHAT on 2009-07-06) 2.36 (GPHAT on 2009-07-01) 2.35 (GPHAT on 2009-06-28) 2.34 (GPHAT on 2009-06-13) 2.33 (GPHAT on 2009-05-27) 2.32 (GPHAT on 2009-05-23) 2.31 (GPHAT on 2009-05-14) 2.30 (GPHAT on 2009-05-11) 2.29 (GPHAT on 2009-05-11) 2.28 (GPHAT on 2009-05-10) 2.27 (GPHAT on 2009-05-09) 2.26 (GPHAT on 2009-05-09) 2.24 (GPHAT on 2009-05-02) 2.23 (GPHAT on 2009-04-28) 2.22 (GPHAT on 2009-04-05) 2.21 (GPHAT on 2009-03-31) 2.20 (GPHAT on 2009-03-28) 2.19 (GPHAT on 2009-03-24) 2.18 (GPHAT on 2009-02-14) 2.17 (GPHAT on 2008-12-21) 2.16 (GPHAT on 2008-12-16) 2.15 (GPHAT on 2008-12-14) 1.1.8 (GPHAT on 2008-12-01) 1.1.8 (GPHAT on 2008-10-05) 1.1.8 (GPHAT on 2008-10-01) 1.1.8 (GPHAT on 2008-09-24) 1.1.8 (GPHAT on 2008-09-23) 1.1.8 (GPHAT on 2008-09-09) 1.1.8 (GPHAT on 2008-09-08) 1.1.8 (GPHAT on 2008-09-03) 1.1.8 (GPHAT on 2008-08-31) 1.1.8 (GPHAT on 2008-08-29) 1.1.8 (GPHAT on 2008-08-28) 1.1.8 (GPHAT on 2008-08-27) 1.1.8 (GPHAT on 2008-08-27) 1.1.8 (GPHAT on 2008-08-27) 1.1.8 (GPHAT on 2008-08-20) 1.1.8 DEV (GPHAT on 2008-08-20) 1.1.8 DEV (GPHAT on 2008-08-19) 1.1.8 DEV (GPHAT on 2008-08-19) 1.1.8 DEV (GPHAT on 2008-08-18) 1.1.8 DEV (GPHAT on 2008-08-14) 1.1.8 DEV (GPHAT on 2008-08-14) 1.1.8 DEV (GPHAT on 2008-08-12) 1.1.8 DEV (GPHAT on 2008-08-06) 1.1.8 DEV (GPHAT on 2008-08-05) 1.1.8 DEV (GPHAT on 2008-07-21) 1.1.8 DEV (GPHAT on 2008-07-17) 1.1.8 (GPHAT on 2007-12-19) 1.1.8 (GPHAT on 2007-11-26) 1.1.8 (GPHAT on 2007-10-20) 1.1.8 (GPHAT on 2007-10-15) 1.1.8 (GPHAT on 2007-10-12) 1.1.8 (GPHAT on 2007-10-06) 1.1.8 (GPHAT on 2007-10-04) 1.1.8 (GPHAT on 2007-10-04) 1.1.8 (GPHAT on 2007-09-01) 1.1.7 (GPHAT on 2007-08-31) 1.1.6 (GPHAT on 2007-03-10) 1.1.5 (GPHAT on 2007-02-24) 1.1.4 (GPHAT on 2007-01-04) 1.1.3 (GPHAT on 2006-10-22) 1.1.2 (GPHAT on 2006-10-21) 1.1.1 (GPHAT on 2006-09-18) 1.1.0 (GPHAT on 2006-09-15) 1.0.7 (GPHAT on 2006-09-13) 1.0.6 (GPHAT on 2006-09-10) 1.0.4 (GPHAT on 2006-09-01) 1.0.3 (GPHAT on 2006-08-16) 1.0.2 (GPHAT on 2006-08-11) 1.0.1 (GPHAT on 2006-08-10) 1.0.0 (GPHAT on 2006-08-05) 0.9.7 (GPHAT on 2006-06-12) 0.9.6 (GPHAT on 2006-06-09) 0.9.5 (GPHAT on 2006-05-23) 0.9.2 (GPHAT on 2006-05-11) 0.9.0 (GPHAT on 2006-05-10) Diff with version 2.87 (GPHAT on 2014-01-25) 2.86 (GPHAT on 2013-06-05) 2.85 (GPHAT on 2013-03-23) 2.84 (GPHAT on 2013-01-23) 2.83 (GPHAT on 2012-06-22) 2.82 (GPHAT on 2012-06-19) 2.81 (GPHAT on 2012-03-19) 2.80 (GPHAT on 2012-03-05) 2.79 (GPHAT on 2012-02-18) 2.78 (GPHAT on 2012-02-16) 2.77 (GPHAT on 2012-02-13) 2.76 (GPHAT on 2011-12-14) 2.75 (GPHAT on 2011-12-05) 2.74 (GPHAT on 2011-11-13) 2.73 (GPHAT on 2011-11-04) 2.72 (GPHAT on 2011-09-05) 2.71 (GPHAT on 2011-08-26) 2.70 (GPHAT on 2011-08-07) 2.69 (GPHAT on 2011-06-02) 2.68 (GPHAT on 2011-05-13) 2.67 (GPHAT on 2011-02-19) 2.66 (GPHAT on 2011-02-17) 2.65 (GPHAT on 2010-07-21) 2.64 (GPHAT on 2010-05-09) 2.63 (GPHAT on 2010-05-09) 2.62 (GPHAT on 2010-04-11) 2.61 (GPHAT on 2010-04-10) 2.60 (GPHAT on 2010-03-20) 2.59 (GPHAT on 2010-03-08) 2.58 (GPHAT on 2010-01-25) 2.57 (GPHAT on 2010-01-24) 2.56 (GPHAT on 2010-01-13) 2.54 (GPHAT on 2010-01-01) 2.53 (GPHAT on 2009-12-17) 2.52 (GPHAT on 2009-12-09) 2.51 (GPHAT on 2009-12-02) 2.50 (GPHAT on 2009-11-29) 2.49 (GPHAT on 2009-11-27) 2.48 (GPHAT on 2009-11-26) 2.47 (GPHAT on 2009-11-26) 2.46 (GPHAT on 2009-11-26) 2.45 (GPHAT on 2009-11-26) 2.44 (GPHAT on 2009-09-27) 2.42 (GPHAT on 2009-08-23) 2.41 (GPHAT on 2009-07-30) 2.40 (GPHAT on 2009-07-13) 2.39 (GPHAT on 2009-07-12) 2.38 (GPHAT on 2009-07-12) 2.37 (GPHAT on 2009-07-06) 2.36 (GPHAT on 2009-07-01) 2.35 (GPHAT on 2009-06-28) 2.34 (GPHAT on 2009-06-13) 2.33 (GPHAT on 2009-05-27) 2.32 (GPHAT on 2009-05-23) 2.31 (GPHAT on 2009-05-14) 2.30 (GPHAT on 2009-05-11) 2.29 (GPHAT on 2009-05-11) 2.28 (GPHAT on 2009-05-10) 2.27 (GPHAT on 2009-05-09) 2.26 (GPHAT on 2009-05-09) 2.24 (GPHAT on 2009-05-02) 2.23 (GPHAT on 2009-04-28) 2.22 (GPHAT on 2009-04-05) 2.21 (GPHAT on 2009-03-31) 2.20 (GPHAT on 2009-03-28) 2.19 (GPHAT on 2009-03-24) 2.18 (GPHAT on 2009-02-14) 2.17 (GPHAT on 2008-12-21) 2.16 (GPHAT on 2008-12-16) 2.15 (GPHAT on 2008-12-14) 1.1.8 (GPHAT on 2008-12-01) 1.1.8 (GPHAT on 2008-10-05) 1.1.8 (GPHAT on 2008-10-01) 1.1.8 (GPHAT on 2008-09-24) 1.1.8 (GPHAT on 2008-09-23) 1.1.8 (GPHAT on 2008-09-09) 1.1.8 (GPHAT on 2008-09-08) 1.1.8 (GPHAT on 2008-09-03) 1.1.8 (GPHAT on 2008-08-31) 1.1.8 (GPHAT on 2008-08-29) 1.1.8 (GPHAT on 2008-08-28) 1.1.8 (GPHAT on 2008-08-27) 1.1.8 (GPHAT on 2008-08-27) 1.1.8 (GPHAT on 2008-08-27) 1.1.8 (GPHAT on 2008-08-20) 1.1.8 DEV (GPHAT on 2008-08-20) 1.1.8 DEV (GPHAT on 2008-08-19) 1.1.8 DEV (GPHAT on 2008-08-19) 1.1.8 DEV (GPHAT on 2008-08-18) 1.1.8 DEV (GPHAT on 2008-08-14) 1.1.8 DEV (GPHAT on 2008-08-14) 1.1.8 DEV (GPHAT on 2008-08-12) 1.1.8 DEV (GPHAT on 2008-08-06) 1.1.8 DEV (GPHAT on 2008-08-05) 1.1.8 DEV (GPHAT on 2008-07-21) 1.1.8 DEV (GPHAT on 2008-07-17) 1.1.8 (GPHAT on 2007-12-19) 1.1.8 (GPHAT on 2007-11-26) 1.1.8 (GPHAT on 2007-10-20) 1.1.8 (GPHAT on 2007-10-15) 1.1.8 (GPHAT on 2007-10-12) 1.1.8 (GPHAT on 2007-10-06) 1.1.8 (GPHAT on 2007-10-04) 1.1.8 (GPHAT on 2007-10-04) 1.1.8 (GPHAT on 2007-09-01) 1.1.7 (GPHAT on 2007-08-31) 1.1.6 (GPHAT on 2007-03-10) 1.1.5 (GPHAT on 2007-02-24) 1.1.4 (GPHAT on 2007-01-04) 1.1.3 (GPHAT on 2006-10-22) 1.1.2 (GPHAT on 2006-10-21) 1.1.1 (GPHAT on 2006-09-18) 1.1.0 (GPHAT on 2006-09-15) 1.0.7 (GPHAT on 2006-09-13) 1.0.6 (GPHAT on 2006-09-10) 1.0.4 (GPHAT on 2006-09-01) 1.0.3 (GPHAT on 2006-08-16) 1.0.2 (GPHAT on 2006-08-11) 1.0.1 (GPHAT on 2006-08-10) 1.0.0 (GPHAT on 2006-08-05) 0.9.7 (GPHAT on 2006-06-12) 0.9.6 (GPHAT on 2006-06-09) 0.9.5 (GPHAT on 2006-05-23) 0.9.2 (GPHAT on 2006-05-11) 0.9.0 (GPHAT on 2006-05-10) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 16 PAUSE users 8 non-PAUSE users. GPHAT Cory G Watson Dependencies Carp Class::Load Color::Scheme constant DateTime DateTime::Set English Geometry::Primitive::Arc Geometry::Primitive::Circle Geometry::Primitive::Point Graphics::Color::RGB Graphics::Primitive::Border Graphics::Primitive::Brush Graphics::Primitive::Canvas Graphics::Primitive::Component Graphics::Primitive::Container Graphics::Primitive::Driver::Cairo Graphics::Primitive::Font Graphics::Primitive::Insets Graphics::Primitive::Operation::Fill Graphics::Primitive::Operation::Stroke Graphics::Primitive::Oriented Graphics::Primitive::Paint::Gradient::Linear Graphics::Primitive::Paint::Gradient::Radial Graphics::Primitive::Paint::Solid Graphics::Primitive::Path Graphics::Primitive::TextBox Layout::Manager::Absolute Layout::Manager::Axis Layout::Manager::Compass Layout::Manager::Flow Layout::Manager::Grid Layout::Manager::Single List::Util Math::Trig Moose Moose::Role Moose::Util Moose::Util::TypeConstraints POSIX Scalar::Util CPAN Testers List Reverse dependencies Dependency graph × Chart-Clicker-2.88 NAME VERSION SYNOPSIS DESCRIPTION EXAMPLES FEATURES Renderers ADDING DATA CONTEXTS FORMATS & OUTPUT ATTRIBUTES background_color border color_allocator contexts datasets driver format plot_mode grid_over height layout_manager legend legend_position marker_overlay over_decorations padding plot subgraphs title title_position width METHODS context_count context_names delete_context ($name) get_context ($name) set_context ($name, $context) add_to_datasets dataset_count get_dataset ($index) rendered_data add_to_over_decorations get_over_decoration ($index) over_decoration_count add_to_contexts add_subgraph draw get_datasets_for_context add_data ($name, $data) set_renderer ($renderer_object, [ $context ]); write write_output ($path) inside_width inside_height ISSUES WITH CENTOS CONTRIBUTORS SOURCE AUTHOR COPYRIGHT AND LICENSE NAME Chart::Clicker - Powerful, extensible charting. VERSION version 2.88 SYNOPSIS   use Chart::Clicker;    my $cc = Chart::Clicker->new;    my @values = (42, 25, 86, 23, 2, 19, 103, 12, 54, 9);   $cc->add_data('Sales', \@values);    # alternately, you can add data one bit at a time...   foreach my $v (@values) {     $cc->add_data('Sales', $v);   }    # Or, if you want to specify the keys you can use a hashref   my $data = { 12 => 123, 13 => 341, 14 => 1241 };   $cc->add_data('Sales', $data);    $cc->write_output('foo.png'); DESCRIPTION Chart::Clicker aims to be a powerful, extensible charting package that creates really pretty output. Charts can be saved in png, svg, pdf and postscript format. Clicker leverages the power of Graphics::Primitive to create snazzy graphics without being tied to specific backend. You may want to begin with Chart::Clicker::Tutorial. EXAMPLES For code examples see the examples repository on GitHub: http://github.com/gphat/chart-clicker-examples/ FEATURES Renderers Clicker supports the following renderers: Line StackedLine Bar StackedBar Area StackedArea Bubble CandleStick Point Pie PolarArea ADDING DATA The synopsis shows the simple way to add data.   my @values = (42, 25, 86, 23, 2, 19, 103, 12, 54, 9);   foreach my $v (@values) {     $cc->add_data('Sales', $v);   } This is a convenience method provided to make simple cases much simpler. Adding multiple Series to a chart is as easy as changing the name argument of add_data. Each unique first argument will result in a separate series. See the docs for add_data to learn more. If you'd like to use the more advanced features of Clicker you'll need to shake off this simple method and build Series & DataSets explicitly.   use Chart::Clicker::Data::Series;   use Chart::Clicker::Data::DataSet;    ...    my $series = Chart::Clicker::Data::Series->new(     keys    => [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],     values  => [ 42, 25, 86, 23, 2, 19, 103, 12, 54, 9 ],   );    my $ds = Chart::Clicker::Data::DataSet->new(series => [ $series ]);    $cc->add_to_datasets($ds); This used to be the only way to add data, but repeated requests to make the common case easier resulted in the inclusion of add_data. CONTEXTS The normal use case for a chart is a couple of datasets on the same axes. Sometimes you want to chart one or more datasets on different axes. A common need for this is when you are comparing two datasets of vastly different scale such as the number of employees in an office (1-10) to monthly revenues (10s of thousands). On a normal chart the number of employees would show up as a flat line at the bottom of the chart. To correct this, Clicker has contexts. A context is a pair of axes, a renderer and a name. The name is the 'key' by which you will refer to the context.   my $context = Chart::Clicker::Context->new( name => 'sales' );   $clicker->add_to_contexts($context);    $dataset->context('sales');    $clicker->add_to_datasets($dataset); New contexts provide a fresh domain and range axis and default to a Line renderer. Caveat: Clicker expects that the default context (identified by the string ""default"") will always be present. It is from this context that some of Clicker's internals draw their values. You should use the default context unless you need more than one, in which case you should use ""default"" as the base context. FORMATS & OUTPUT Clicker supports PNG, SVG, PDF and PostScript output. To change your output type, specificy it when you create your Clicker object:   my $cc = Chart::Clicker->new(format => 'pdf', ...);   # ...   $cc->write_output('chart.pdf'); If you are looking to get a scalar of the output for use with HTTP or similar things, you can use:   # ... make your chart   $cc->draw;   my $image_data = $cc->rendered_data; If you happen to be using Catalyst then take a look at Catalyst::View::Graphics::Primitive. ATTRIBUTES background_color Set/Get the background color. Defaults to white. border Set/Get the border. color_allocator Set/Get the color_allocator for this chart. contexts Set/Get the contexts for this chart. datasets Get/Set the datasets for this chart. driver Set/Get the driver used to render this Chart. Defaults to Graphics::Primitive::Driver::Cairo. format Get the format for this Chart. Required in the constructor. Must be on of Png, Pdf, Ps or Svg. plot_mode Fast or slow plot mode. When in fast mode, data elements that are deemed to be superfluous or invisible will not be drawn. Default is 'slow' grid_over Flag controlling if the grid is rendered over the data. Defaults to 0. You probably want to set the grid's background color to an alpha of 0 if you enable this flag. height Set/Get the height. Defaults to 300. layout_manager Set/Get the layout manager. Defaults to Layout::Manager::Compass. legend Set/Get the legend that will be used with this chart. legend_position The position the legend will be added. Should be one of north, south, east, west or center as required by Layout::Manager::Compass. marker_overlay Set/Get the marker overlay object that will be used if this chart has markers. This is lazily constructed to save time. over_decorations Set/Get an arrayref of ""over decorations"", or things that are drawn OVER the chart. This is an advanced feature. See overaxis-bar.pl in the examples. padding Set/Get the padding. Defaults to 3px on all sides. plot Set/Get the plot on which things are drawn. subgraphs You can add ""child"" graphs to this one via add_subgraph. These must be Chart::Clicker objects and they will be added to the bottom of the existing chart. This is a rather esoteric feature. title Set/Get the title component for this chart. This is a Graphics::Primitive::TextBox, not a string. To set the title of a chart you should access the TextBox's text method.   $cc->title->text('A Title!');   $cc->title->font->size(20);   # etc, etc If the title has text then it is added to the chart in the position specified by title_position. You should consult the documentation for Graphics::Primitive::TextBox for things like padding and text rotation. If you are adding it to the top and want some padding between it and the plot, you can:   $cc->title->padding->bottom(5); title_position The position the title will be added. Should be one of north, south, east, west or center as required by Layout::Manager::Compass. Note that if no angle is set for the title then it will be changed to -1.5707 if the title position is east or west. width Set/Get the width. Defaults to 500. METHODS context_count Get a count of contexts. context_names Get a list of context names. delete_context ($name) Remove the context with the specified name. get_context ($name) Get the context with the specified name set_context ($name, $context) Set a context of the specified name. add_to_datasets Add the specified dataset (or arrayref of datasets) to the chart. dataset_count Get a count of datasets. get_dataset ($index) Get the dataset at the specified index. rendered_data Returns the data for this chart as a scalar. Suitable for 'streaming' to a client. add_to_over_decorations Add an over decoration to the list. get_over_decoration ($index) Get the over decoration at the specified index. over_decoration_count Get a count of over decorations. add_to_contexts Add the specified context to the chart. add_subgraph Add a subgraph to this chart. draw Draw this chart. get_datasets_for_context Returns an arrayref containing all datasets for the given context. Used by renderers to get a list of datasets to chart. add_data ($name, $data) Convenience method for adding data to the chart. Can be called one of three ways. scalar Passing a name and a scalar will append the scalar data to that series' data.   $cc->add_data('Sales', 1234);   $cc->add_data('Sales', 1235); This will result in a Series named 'Sales' with two values. arrayref Passing a name and an arrayref works much the same as the scalar method discussed above, but appends the supplied arrayref to the existing one. It may be mixed with the scalar method.   $cc->add_data('Sales', \@some_sales);   $cc->add_data('Sales', \@some_more_sales);   # This works still!   $cc->add_data('Sales', 1234); hashref This allows you to pass both keys and values in all at once.   $cc->add_data('Sales', { 2009 => 1234, 2010 => 1235 });   # appends to last call   $cc->add_data('Sales', { 2011 => 1234, 2012 => 1235 }); You may call the hashref version after the scalar or arrayref versions, but you may not add a scalar or arrayref after adding a hashref (as it's not clear what indices should be used for the new data). set_renderer ($renderer_object, [ $context ]); Sets the renderer on the specified context. If no context is provided then 'default' is assumed. write This method is passed through to the underlying driver. It is only necessary that you call this if you manually called draw beforehand. You likely want to use write_output. write_output ($path) Write the chart output to the specified location. Output is written in the format provided to the constructor (which defaults to Png). Internally calls draw for you. If you use this method, do not call draw first!   $c->write_output('/path/to/the.png'); inside_width Get the width available in this container after taking away space for insets and borders. inside_height Get the height available in this container after taking away space for insets and borders. ISSUES WITH CENTOS I've had numerous reports of problems with Chart::Clicker when using CentOS. This problem has usually be solved by updating the version of cairo. I've had reports that upgrading to at least cairo-1.8.8-3 makes thinks work properly. I hesitate to provide any other data with this because it may get out of date fast. If you have trouble feel free to drop me an email and I'll tell you what I know. CONTRIBUTORS Many thanks to the individuals who have contributed various bits: Ash Berlin Brian Cassidy Guillermo Roditi Torsten Schoenfeld Yuval Kogman SOURCE Chart::Clicker is on github:   http://github.com/gphat/chart-clicker/tree/master AUTHOR Cory G Watson <gphat@cpan.org> COPYRIGHT AND LICENSE This software is copyright (c) 2014 by Cold Hard Code, LLC. This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself. × Module Install Instructions To install Chart::Clicker, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Chart::Clicker CPAN shell                      perl -MCPAN -e shell                     install Chart::Clicker For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Powerful, extensible charting"	"true"
"Science/Numerics"	"PDL"	"http://pdl.perl.org/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Perl Data Language Loading About PDL Home Get PDL Screenshots PDL Users Mailing Lists Documentation PDL Book FAQ Tutorials Modules Course Index Resources Demos Presentations PDL Wiki External Libs Development Get Started Browse Git Bugs Patches Credits Perl Data Language Scientific computing with Perl Recent News 2016-05-30 PDL 2.016 has been released to CPAN. As always, please report problems or bring questions to the PDL Mailing Lists. 2016-05-28 ExtUtils::F77 version 1.20 has been released to CPAN. 2016-05-08 A new version of SciPDL, an easy drag-and-drop install for Mac OS X users is available. SciPDL now comes with its own pre-packaged Perl, making it independent of OS X version. 2015-12-23 Perl OpenGL 2 development kicks off with the announcment of new Mailing Lists for users and developers. If you are interested in Modern OpenGL and high performance graphics and computation, please sign up. Further information will be available on the new lists and their archives. 2015-06-15 PDL::FFTW is now fully deprecated and is replaced by a POD-only stub PDL::FFTW&nbsp2.024 2015-06-08 PDL::LinearAlgebra&nbsp0.12 has been released to CPAN. 2015-06-08 PDL::IO::HDF5&nbsp0.73 has been released to CPAN. 2014-12-24 Statistics::NiceR and Data::Frame have been been released to CPAN providing powerful tools to work with R from perl 2014-12-22 OpenGL-0.6704 released to CPAN. 2014-08-04 Gimp-Perl v2.31 has been released to CPAN 2014-01-21 DKOGAN/PDL-FFTW3-0.02.2_01.tar.gz has been released to CPAN with improved support for unaligned data. Feedback is welcome, especially for the case of threaded computations of float data. PDL (""Perl Data Language"") gives standard Perl the ability to compactly store and speedily manipulate the large N-dimensional data arrays which are the bread and butter of scientific computing. PDL turns Perl into a free, array-oriented, numerical language similar to (but, we believe, better than) such commercial packages as IDL and MatLab. One can write simple perl expressions to manipulate entire numerical arrays all at once. Simple interactive shells, pdl2 and perldl, are provided for use from the command line along with the PDL module for use in Perl scripts."	"null"	"null"	""	"true"
"Science/Numerics"	"PDL (CPAN)"	"https://metacpan.org/pod/PDL"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PDL - the Perl Data Language - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Chris Marshall  /  2.016_01 DEV (CHM on 2016-06-01) 2.016 (CHM on 2016-05-30) 2.015 (CHM on 2015-11-22) 2.015_001 DEV (CHM on 2016-05-27) 2.014_03 DEV (CHM on 2015-11-19) 2.014_02 DEV (CHM on 2015-11-17) 2.014_01 DEV (CHM on 2015-11-14) 2.014 (CHM on 2015-10-12) 2.013_06 DEV (CHM on 2015-10-10) 2.013_05 DEV (CHM on 2015-10-08) 2.013_04 DEV (CHM on 2015-10-07) 2.013_03 DEV (CHM on 2015-10-04) 2.013_02 DEV (CHM on 2015-10-03) 2.013_01 DEV (CHM on 2015-09-29) 2.013 (CHM on 2015-08-14) 2.012_01 DEV (CHM on 2015-08-01) 2.012 (CHM on 2015-06-14) 2.011 (CHM on 2015-06-02) 2.010 (CHM on 2015-06-02) 2.009_01 DEV (CHM on 2015-05-31) 2.009 (CHM on 2015-05-29) 2.008 (CHM on 2015-05-24) 2.007_17 DEV (CHM on 2015-05-06) 2.007_16 DEV (CHM on 2015-04-22) 2.007_15 DEV (CHM on 2015-04-19) 2.007_14 DEV (CHM on 2015-04-11) 2.007_13 DEV (CHM on 2015-03-22) 2.007_12 DEV (CHM on 2015-03-06) 2.007_11 DEV (CHM on 2015-02-24) 2.007_10 DEV (CHM on 2015-02-02) 2.007_09 DEV (CHM on 2015-01-29) 2.007_08 DEV (CHM on 2015-01-20) 2.007_07 DEV (CHM on 2015-01-06) 2.007_06 DEV (CHM on 2015-01-05) 2.007_05 DEV (CHM on 2014-12-24) 2.007_04 DEV (CHM on 2014-08-23) 2.007_03 DEV (CHM on 2014-07-01) 2.007_02 DEV (CHM on 2013-11-25) 2.007_01 DEV (CHM on 2013-11-17) 2.007 (CHM on 2013-10-12) 2.006_92 DEV (CHM on 2013-10-10) 2.006_91 DEV (CHM on 2013-09-29) 2.006_90 DEV (CHM on 2013-09-22) 2.006_07 DEV (CHM on 2013-09-14) 2.006_06 DEV (CHM on 2013-09-05) 2.006_05 DEV (CHM on 2013-08-28) 2.006_04 DEV (CHM on 2013-08-10) 2.006_03 DEV (CHM on 2013-05-19) 2.006_02 DEV (CHM on 2013-05-16) 2.006_01 DEV (CHM on 2013-05-12) 2.006 (CHM on 2013-03-23) 2.004_996 DEV (CHM on 2013-03-11) 2.004_995 DEV (CHM on 2013-03-02) 2.004_012 DEV (CHM on 2013-02-27) 2.004011_011 DEV (CHM on 2013-02-22) v2.4.11_010 DEV (CHM on 2013-02-20) v2.4.11_009 DEV (CHM on 2013-02-06) v2.4.11_008 DEV (CHM on 2013-02-05) v2.4.11_007 DEV (CHM on 2013-01-31) v2.4.11_006 DEV (CHM on 2013-01-30) v2.4.11_005 DEV (CHM on 2013-01-29) v2.4.11_004 DEV (CHM on 2013-01-22) v2.4.11_003 DEV (CHM on 2013-01-20) v2.4.11_002 DEV (CHM on 2013-01-13) v2.4.11_001 DEV (CHM on 2013-01-11) v2.4.11 (CHM on 2012-05-20) 2.4.10_005 DEV (CHM on 2012-05-15) v2.4.10_004 DEV (CHM on 2012-05-12) v2.4.10_003 DEV (CHM on 2012-04-07) 2.4.10_002 DEV (CHM on 2012-04-06) 2.4.10_001 DEV (CHM on 2012-04-06) v2.4.10 (CHM on 2012-02-05) v2.4.9_995 DEV (CHM on 2012-01-21) v2.4.9_994 DEV (CHM on 2012-01-16) 2.4.9_993 DEV (CHM on 2012-01-10) v2.4.9_992 DEV (CHM on 2011-12-28) v2.4.9_991 DEV (CHM on 2011-12-24) v2.4.9_016 DEV (CHM on 2011-12-21) v2.4.9_015 DEV (CHM on 2011-12-19) v2.4.9_014 DEV (CHM on 2011-12-15) v2.4.9_013 DEV (CHM on 2011-12-10) v2.4.9_012 DEV (CHM on 2011-12-04) v2.4.9_011 DEV (CHM on 2011-12-04) v2.4.9_010 DEV (CHM on 2011-11-14) 2.4.9_009 DEV (CHM on 2011-10-11) v2.4.9_008 DEV (CHM on 2011-08-28) v2.4.9_007 DEV (CHM on 2011-08-21) v2.4.9_006 DEV (CHM on 2011-08-21) v2.4.9_005 DEV (CHM on 2011-08-17) v2.4.9_004 DEV (CHM on 2011-08-13) 2.4.9_003 DEV (CHM on 2011-07-11) 2.4.9_002 DEV (CHM on 2011-05-21) 2.4.9_001 DEV (CHM on 2011-05-01) 2.4.9 (CHM on 2011-04-11) 2.4.8_004 DEV (CHM on 2011-04-07) 2.4.8_003 DEV (CHM on 2011-04-05) 2.4.8_002 DEV (CHM on 2011-04-03) 2.4.8_001 DEV (CHM on 2011-04-02) 2.4.8 (CHM on 2011-03-31) 2.4.7_991 DEV (CHM on 2011-03-27) 2.4.7_015 DEV (CHM on 2011-03-25) 2.4.7_014 DEV (CHM on 2011-03-24) 2.4.7_013 DEV (CHM on 2011-03-22) 2.4.7_012 DEV (CHM on 2011-03-13) 2.4.7_011 DEV (CHM on 2011-03-07) 2.4.7_010 DEV (CHM on 2011-02-15) 2.4.7_009 DEV (CHM on 2011-02-13) 2.4.7_008 DEV (CHM on 2010-12-24) 2.4.7_007 DEV (CHM on 2010-12-03) 2.4.7_006 DEV (CHM on 2010-11-12) 2.4.7_005 DEV (CHM on 2010-11-11) 2.4.7_004 DEV (CHM on 2010-11-09) 2.4.7_003 DEV (CHM on 2010-11-06) 2.4.7_002 DEV (CHM on 2010-10-03) 2.4.7_001 DEV (CHM on 2010-10-03) 2.4.7 (CHM on 2010-08-19) 2.4.6_993 DEV (CHM on 2010-08-18) 2.4.6_992 DEV (CHM on 2010-08-16) 2.4.6_991 DEV (CHM on 2010-08-14) 2.4.6_018 DEV (CHM on 2010-08-08) 2.4.6_017 DEV (CHM on 2010-08-08) 2.4.6_016 DEV (CHM on 2010-08-06) 2.4.6_015 DEV (CHM on 2010-07-31) 2.4.6_014 DEV (CHM on 2010-07-11) 2.4.6_013 DEV (CHM on 2010-07-07) 2.4.6_012 DEV (CHM on 2010-07-06) 2.4.6_011 DEV (CHM on 2010-06-28) 2.4.6_010 DEV (CHM on 2010-06-22) 2.4.6_009 DEV (CHM on 2010-06-09) 2.4.6_008 DEV (CHM on 2010-05-31) 2.4.6_007 DEV (CHM on 2010-05-22) 2.4.6_006 DEV (CHM on 2010-05-07) 2.4.6_001 DEV (CHM on 2010-02-10) 2.4.6 (CHM on 2010-01-01) 2.4.5_008 DEV (CHM on 2009-12-27) 2.4.5_007 DEV (CHM on 2009-12-27) 2.4.5_006 DEV (CHM on 2009-12-21) 2.4.5_005 DEV (CHM on 2009-12-20) 2.4.5_004 DEV (CHM on 2009-12-09) 2.4.5_003 DEV (CHM on 2009-11-01) 2.4.5_002 DEV (CHM on 2009-10-30) 2.4.5_001 DEV (CHM on 2009-10-30) 2.4.5 (CHM on 2009-10-24) 2.4.4_900 DEV (CHM on 2009-10-20) 2.4.4_136 DEV (CHM on 2009-10-15) 2.4.4_13 DEV (CHM on 2009-10-03) 2.4.4_11 DEV (CHM on 2009-09-25) 2.4.4_10 DEV (CHM on 2009-09-25) 2.4.4_09 DEV (CHM on 2009-09-24) 2.4.4_08 DEV (CHM on 2009-08-21) 2.4.4_07 DEV (CHM on 2009-08-15) 2.4.4_06 DEV (CHM on 2009-07-27) 2.4.4_05 DEV (CHM on 2009-07-11) 2.4.4_04 DEV (CHM on 2009-07-10) 2.4.4_03 DEV (CHM on 2009-05-19) 2.4.4_02 DEV (CHM on 2009-05-15) 2.4.4_01 DEV (CHM on 2009-05-13) 2.4.4 (CHM on 2008-11-13) 2.4.3_06 DEV (CHM on 2008-11-06) 2.4.3_05 DEV (CHM on 2008-11-05) 2.4.3_04 DEV (CHM on 2008-11-02) 2.4.3_03 DEV (CHM on 2008-10-26) 2.4.3_02 DEV (CHM on 2008-10-23) 2.4.3_01 DEV (CHM on 2008-10-20) 2.4.3 (CSOE on 2006-08-20) 2.4.2 (CSOE on 2005-01-11) 2.4.1 (CSOE on 2004-01-20) 2.4.0 (CSOE on 2003-06-04) 2.3.4 (CSOE on 2002-09-30) 2.3.3 (CSOE on 2002-06-08) 2.3.2 (KGB on 2002-03-05) 2.3.2 (CSOE on 2001-12-21) 2.3.1 (CSOE on 2001-11-28) 2.2.1 (KGB on 2001-04-27) 2.2 (KGB on 2000-12-28) 2.1.1 (KGB on 2000-06-22) 2.005 (KGB on 2000-04-06) 2.004 (KGB on 2000-03-21) 2.003 (KGB on 1999-10-29) 2.002 (KGB on 1999-06-26) 2.0 (KGB on 1999-01-11) 1.99989 (LUKKA on 1998-11-13) 1.99988 (KGB on 1998-10-02) 1.99987 (KGB on 1998-09-20) 1.9906 (LUKKA on 1998-05-03) 1.9905 (LUKKA on 1998-04-24) 1.9904 (LUKKA on 1998-04-21) 1.9903 (LUKKA on 1998-04-21) 1.9902 (LUKKA on 1998-03-17) 1.9901 (LUKKA on 1998-03-09) 1.9900 (LUKKA on 1998-02-28) 1.11 (KGB on 1997-07-11) 1.920003 DEV (LUKKA on 1997-03-30) 1.920002 DEV (LUKKA on 1997-03-15) 1.11 (KGB on 1997-02-24) 1.10 (KGB on 1997-02-19) 1.031 (KGB on 1997-01-11) 1.03 (KGB on 1997-01-03) 1.01 (KGB on 1996-12-03) 1.04 (LUKKA on 1996-11-30) 1.032 (KGB on 1996-11-28) 1.0200 (LUKKA on 1996-11-19) 1.010000 (KGB on 1996-11-06) 1.000000 (KGB on 1996-10-20) 1.0000 (KGB on 1996-10-16) PDL-2.016 26 ++ 26 ++  / PDL 30 May 2016 14:37:54 GMT Module version: 2.016 Source (raw) Browse (raw) Changes Homepage Issues 5 (2 reviews) Testers Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (2.75Mb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 2.016_01 DEV (CHM on 2016-06-01) 2.015 (CHM on 2015-11-22) 2.015_001 DEV (CHM on 2016-05-27) 2.014_03 DEV (CHM on 2015-11-19) 2.014_02 DEV (CHM on 2015-11-17) 2.014_01 DEV (CHM on 2015-11-14) 2.014 (CHM on 2015-10-12) 2.013_06 DEV (CHM on 2015-10-10) 2.013_05 DEV (CHM on 2015-10-08) 2.013_04 DEV (CHM on 2015-10-07) 2.013_03 DEV (CHM on 2015-10-04) 2.013_02 DEV (CHM on 2015-10-03) 2.013_01 DEV (CHM on 2015-09-29) 2.013 (CHM on 2015-08-14) 2.012_01 DEV (CHM on 2015-08-01) 2.012 (CHM on 2015-06-14) 2.011 (CHM on 2015-06-02) 2.010 (CHM on 2015-06-02) 2.009_01 DEV (CHM on 2015-05-31) 2.009 (CHM on 2015-05-29) 2.008 (CHM on 2015-05-24) 2.007_17 DEV (CHM on 2015-05-06) 2.007_16 DEV (CHM on 2015-04-22) 2.007_15 DEV (CHM on 2015-04-19) 2.007_14 DEV (CHM on 2015-04-11) 2.007_13 DEV (CHM on 2015-03-22) 2.007_12 DEV (CHM on 2015-03-06) 2.007_11 DEV (CHM on 2015-02-24) 2.007_10 DEV (CHM on 2015-02-02) 2.007_09 DEV (CHM on 2015-01-29) 2.007_08 DEV (CHM on 2015-01-20) 2.007_07 DEV (CHM on 2015-01-06) 2.007_06 DEV (CHM on 2015-01-05) 2.007_05 DEV (CHM on 2014-12-24) 2.007_04 DEV (CHM on 2014-08-23) 2.007_03 DEV (CHM on 2014-07-01) 2.007_02 DEV (CHM on 2013-11-25) 2.007_01 DEV (CHM on 2013-11-17) 2.007 (CHM on 2013-10-12) 2.006_92 DEV (CHM on 2013-10-10) 2.006_91 DEV (CHM on 2013-09-29) 2.006_90 DEV (CHM on 2013-09-22) 2.006_07 DEV (CHM on 2013-09-14) 2.006_06 DEV (CHM on 2013-09-05) 2.006_05 DEV (CHM on 2013-08-28) 2.006_04 DEV (CHM on 2013-08-10) 2.006_03 DEV (CHM on 2013-05-19) 2.006_02 DEV (CHM on 2013-05-16) 2.006_01 DEV (CHM on 2013-05-12) 2.006 (CHM on 2013-03-23) 2.004_996 DEV (CHM on 2013-03-11) 2.004_995 DEV (CHM on 2013-03-02) 2.004_012 DEV (CHM on 2013-02-27) 2.004011_011 DEV (CHM on 2013-02-22) v2.4.11_010 DEV (CHM on 2013-02-20) v2.4.11_009 DEV (CHM on 2013-02-06) v2.4.11_008 DEV (CHM on 2013-02-05) v2.4.11_007 DEV (CHM on 2013-01-31) v2.4.11_006 DEV (CHM on 2013-01-30) v2.4.11_005 DEV (CHM on 2013-01-29) v2.4.11_004 DEV (CHM on 2013-01-22) v2.4.11_003 DEV (CHM on 2013-01-20) v2.4.11_002 DEV (CHM on 2013-01-13) v2.4.11_001 DEV (CHM on 2013-01-11) v2.4.11 (CHM on 2012-05-20) 2.4.10_005 DEV (CHM on 2012-05-15) v2.4.10_004 DEV (CHM on 2012-05-12) v2.4.10_003 DEV (CHM on 2012-04-07) 2.4.10_002 DEV (CHM on 2012-04-06) 2.4.10_001 DEV (CHM on 2012-04-06) v2.4.10 (CHM on 2012-02-05) v2.4.9_995 DEV (CHM on 2012-01-21) v2.4.9_994 DEV (CHM on 2012-01-16) 2.4.9_993 DEV (CHM on 2012-01-10) v2.4.9_992 DEV (CHM on 2011-12-28) v2.4.9_991 DEV (CHM on 2011-12-24) v2.4.9_016 DEV (CHM on 2011-12-21) v2.4.9_015 DEV (CHM on 2011-12-19) v2.4.9_014 DEV (CHM on 2011-12-15) v2.4.9_013 DEV (CHM on 2011-12-10) v2.4.9_012 DEV (CHM on 2011-12-04) v2.4.9_011 DEV (CHM on 2011-12-04) v2.4.9_010 DEV (CHM on 2011-11-14) 2.4.9_009 DEV (CHM on 2011-10-11) v2.4.9_008 DEV (CHM on 2011-08-28) v2.4.9_007 DEV (CHM on 2011-08-21) v2.4.9_006 DEV (CHM on 2011-08-21) v2.4.9_005 DEV (CHM on 2011-08-17) v2.4.9_004 DEV (CHM on 2011-08-13) 2.4.9_003 DEV (CHM on 2011-07-11) 2.4.9_002 DEV (CHM on 2011-05-21) 2.4.9_001 DEV (CHM on 2011-05-01) 2.4.9 (CHM on 2011-04-11) 2.4.8_004 DEV (CHM on 2011-04-07) 2.4.8_003 DEV (CHM on 2011-04-05) 2.4.8_002 DEV (CHM on 2011-04-03) 2.4.8_001 DEV (CHM on 2011-04-02) 2.4.8 (CHM on 2011-03-31) 2.4.7_991 DEV (CHM on 2011-03-27) 2.4.7_015 DEV (CHM on 2011-03-25) 2.4.7_014 DEV (CHM on 2011-03-24) 2.4.7_013 DEV (CHM on 2011-03-22) 2.4.7_012 DEV (CHM on 2011-03-13) 2.4.7_011 DEV (CHM on 2011-03-07) 2.4.7_010 DEV (CHM on 2011-02-15) 2.4.7_009 DEV (CHM on 2011-02-13) 2.4.7_008 DEV (CHM on 2010-12-24) 2.4.7_007 DEV (CHM on 2010-12-03) 2.4.7_006 DEV (CHM on 2010-11-12) 2.4.7_005 DEV (CHM on 2010-11-11) 2.4.7_004 DEV (CHM on 2010-11-09) 2.4.7_003 DEV (CHM on 2010-11-06) 2.4.7_002 DEV (CHM on 2010-10-03) 2.4.7_001 DEV (CHM on 2010-10-03) 2.4.7 (CHM on 2010-08-19) 2.4.6_993 DEV (CHM on 2010-08-18) 2.4.6_992 DEV (CHM on 2010-08-16) 2.4.6_991 DEV (CHM on 2010-08-14) 2.4.6_018 DEV (CHM on 2010-08-08) 2.4.6_017 DEV (CHM on 2010-08-08) 2.4.6_016 DEV (CHM on 2010-08-06) 2.4.6_015 DEV (CHM on 2010-07-31) 2.4.6_014 DEV (CHM on 2010-07-11) 2.4.6_013 DEV (CHM on 2010-07-07) 2.4.6_012 DEV (CHM on 2010-07-06) 2.4.6_011 DEV (CHM on 2010-06-28) 2.4.6_010 DEV (CHM on 2010-06-22) 2.4.6_009 DEV (CHM on 2010-06-09) 2.4.6_008 DEV (CHM on 2010-05-31) 2.4.6_007 DEV (CHM on 2010-05-22) 2.4.6_006 DEV (CHM on 2010-05-07) 2.4.6_001 DEV (CHM on 2010-02-10) 2.4.6 (CHM on 2010-01-01) 2.4.5_008 DEV (CHM on 2009-12-27) 2.4.5_007 DEV (CHM on 2009-12-27) 2.4.5_006 DEV (CHM on 2009-12-21) 2.4.5_005 DEV (CHM on 2009-12-20) 2.4.5_004 DEV (CHM on 2009-12-09) 2.4.5_003 DEV (CHM on 2009-11-01) 2.4.5_002 DEV (CHM on 2009-10-30) 2.4.5_001 DEV (CHM on 2009-10-30) 2.4.5 (CHM on 2009-10-24) 2.4.4_900 DEV (CHM on 2009-10-20) 2.4.4_136 DEV (CHM on 2009-10-15) 2.4.4_13 DEV (CHM on 2009-10-03) 2.4.4_11 DEV (CHM on 2009-09-25) 2.4.4_10 DEV (CHM on 2009-09-25) 2.4.4_09 DEV (CHM on 2009-09-24) 2.4.4_08 DEV (CHM on 2009-08-21) 2.4.4_07 DEV (CHM on 2009-08-15) 2.4.4_06 DEV (CHM on 2009-07-27) 2.4.4_05 DEV (CHM on 2009-07-11) 2.4.4_04 DEV (CHM on 2009-07-10) 2.4.4_03 DEV (CHM on 2009-05-19) 2.4.4_02 DEV (CHM on 2009-05-15) 2.4.4_01 DEV (CHM on 2009-05-13) 2.4.4 (CHM on 2008-11-13) 2.4.3_06 DEV (CHM on 2008-11-06) 2.4.3_05 DEV (CHM on 2008-11-05) 2.4.3_04 DEV (CHM on 2008-11-02) 2.4.3_03 DEV (CHM on 2008-10-26) 2.4.3_02 DEV (CHM on 2008-10-23) 2.4.3_01 DEV (CHM on 2008-10-20) 2.4.3 (CSOE on 2006-08-20) 2.4.2 (CSOE on 2005-01-11) 2.4.1 (CSOE on 2004-01-20) 2.4.0 (CSOE on 2003-06-04) 2.3.4 (CSOE on 2002-09-30) 2.3.3 (CSOE on 2002-06-08) 2.3.2 (KGB on 2002-03-05) 2.3.2 (CSOE on 2001-12-21) 2.3.1 (CSOE on 2001-11-28) 2.2.1 (KGB on 2001-04-27) 2.2 (KGB on 2000-12-28) 2.1.1 (KGB on 2000-06-22) 2.005 (KGB on 2000-04-06) 2.004 (KGB on 2000-03-21) 2.003 (KGB on 1999-10-29) 2.002 (KGB on 1999-06-26) 2.0 (KGB on 1999-01-11) 1.99989 (LUKKA on 1998-11-13) 1.99988 (KGB on 1998-10-02) 1.99987 (KGB on 1998-09-20) 1.9906 (LUKKA on 1998-05-03) 1.9905 (LUKKA on 1998-04-24) 1.9904 (LUKKA on 1998-04-21) 1.9903 (LUKKA on 1998-04-21) 1.9902 (LUKKA on 1998-03-17) 1.9901 (LUKKA on 1998-03-09) 1.9900 (LUKKA on 1998-02-28) 1.11 (KGB on 1997-07-11) 1.920003 DEV (LUKKA on 1997-03-30) 1.920002 DEV (LUKKA on 1997-03-15) 1.11 (KGB on 1997-02-24) 1.10 (KGB on 1997-02-19) 1.031 (KGB on 1997-01-11) 1.03 (KGB on 1997-01-03) 1.01 (KGB on 1996-12-03) 1.04 (LUKKA on 1996-11-30) 1.032 (KGB on 1996-11-28) 1.0200 (LUKKA on 1996-11-19) 1.010000 (KGB on 1996-11-06) 1.000000 (KGB on 1996-10-20) 1.0000 (KGB on 1996-10-16) Diff with version 2.016_01 DEV (CHM on 2016-06-01) 2.015 (CHM on 2015-11-22) 2.015_001 DEV (CHM on 2016-05-27) 2.014_03 DEV (CHM on 2015-11-19) 2.014_02 DEV (CHM on 2015-11-17) 2.014_01 DEV (CHM on 2015-11-14) 2.014 (CHM on 2015-10-12) 2.013_06 DEV (CHM on 2015-10-10) 2.013_05 DEV (CHM on 2015-10-08) 2.013_04 DEV (CHM on 2015-10-07) 2.013_03 DEV (CHM on 2015-10-04) 2.013_02 DEV (CHM on 2015-10-03) 2.013_01 DEV (CHM on 2015-09-29) 2.013 (CHM on 2015-08-14) 2.012_01 DEV (CHM on 2015-08-01) 2.012 (CHM on 2015-06-14) 2.011 (CHM on 2015-06-02) 2.010 (CHM on 2015-06-02) 2.009_01 DEV (CHM on 2015-05-31) 2.009 (CHM on 2015-05-29) 2.008 (CHM on 2015-05-24) 2.007_17 DEV (CHM on 2015-05-06) 2.007_16 DEV (CHM on 2015-04-22) 2.007_15 DEV (CHM on 2015-04-19) 2.007_14 DEV (CHM on 2015-04-11) 2.007_13 DEV (CHM on 2015-03-22) 2.007_12 DEV (CHM on 2015-03-06) 2.007_11 DEV (CHM on 2015-02-24) 2.007_10 DEV (CHM on 2015-02-02) 2.007_09 DEV (CHM on 2015-01-29) 2.007_08 DEV (CHM on 2015-01-20) 2.007_07 DEV (CHM on 2015-01-06) 2.007_06 DEV (CHM on 2015-01-05) 2.007_05 DEV (CHM on 2014-12-24) 2.007_04 DEV (CHM on 2014-08-23) 2.007_03 DEV (CHM on 2014-07-01) 2.007_02 DEV (CHM on 2013-11-25) 2.007_01 DEV (CHM on 2013-11-17) 2.007 (CHM on 2013-10-12) 2.006_92 DEV (CHM on 2013-10-10) 2.006_91 DEV (CHM on 2013-09-29) 2.006_90 DEV (CHM on 2013-09-22) 2.006_07 DEV (CHM on 2013-09-14) 2.006_06 DEV (CHM on 2013-09-05) 2.006_05 DEV (CHM on 2013-08-28) 2.006_04 DEV (CHM on 2013-08-10) 2.006_03 DEV (CHM on 2013-05-19) 2.006_02 DEV (CHM on 2013-05-16) 2.006_01 DEV (CHM on 2013-05-12) 2.006 (CHM on 2013-03-23) 2.004_996 DEV (CHM on 2013-03-11) 2.004_995 DEV (CHM on 2013-03-02) 2.004_012 DEV (CHM on 2013-02-27) 2.004011_011 DEV (CHM on 2013-02-22) v2.4.11_010 DEV (CHM on 2013-02-20) v2.4.11_009 DEV (CHM on 2013-02-06) v2.4.11_008 DEV (CHM on 2013-02-05) v2.4.11_007 DEV (CHM on 2013-01-31) v2.4.11_006 DEV (CHM on 2013-01-30) v2.4.11_005 DEV (CHM on 2013-01-29) v2.4.11_004 DEV (CHM on 2013-01-22) v2.4.11_003 DEV (CHM on 2013-01-20) v2.4.11_002 DEV (CHM on 2013-01-13) v2.4.11_001 DEV (CHM on 2013-01-11) v2.4.11 (CHM on 2012-05-20) 2.4.10_005 DEV (CHM on 2012-05-15) v2.4.10_004 DEV (CHM on 2012-05-12) v2.4.10_003 DEV (CHM on 2012-04-07) 2.4.10_002 DEV (CHM on 2012-04-06) 2.4.10_001 DEV (CHM on 2012-04-06) v2.4.10 (CHM on 2012-02-05) v2.4.9_995 DEV (CHM on 2012-01-21) v2.4.9_994 DEV (CHM on 2012-01-16) 2.4.9_993 DEV (CHM on 2012-01-10) v2.4.9_992 DEV (CHM on 2011-12-28) v2.4.9_991 DEV (CHM on 2011-12-24) v2.4.9_016 DEV (CHM on 2011-12-21) v2.4.9_015 DEV (CHM on 2011-12-19) v2.4.9_014 DEV (CHM on 2011-12-15) v2.4.9_013 DEV (CHM on 2011-12-10) v2.4.9_012 DEV (CHM on 2011-12-04) v2.4.9_011 DEV (CHM on 2011-12-04) v2.4.9_010 DEV (CHM on 2011-11-14) 2.4.9_009 DEV (CHM on 2011-10-11) v2.4.9_008 DEV (CHM on 2011-08-28) v2.4.9_007 DEV (CHM on 2011-08-21) v2.4.9_006 DEV (CHM on 2011-08-21) v2.4.9_005 DEV (CHM on 2011-08-17) v2.4.9_004 DEV (CHM on 2011-08-13) 2.4.9_003 DEV (CHM on 2011-07-11) 2.4.9_002 DEV (CHM on 2011-05-21) 2.4.9_001 DEV (CHM on 2011-05-01) 2.4.9 (CHM on 2011-04-11) 2.4.8_004 DEV (CHM on 2011-04-07) 2.4.8_003 DEV (CHM on 2011-04-05) 2.4.8_002 DEV (CHM on 2011-04-03) 2.4.8_001 DEV (CHM on 2011-04-02) 2.4.8 (CHM on 2011-03-31) 2.4.7_991 DEV (CHM on 2011-03-27) 2.4.7_015 DEV (CHM on 2011-03-25) 2.4.7_014 DEV (CHM on 2011-03-24) 2.4.7_013 DEV (CHM on 2011-03-22) 2.4.7_012 DEV (CHM on 2011-03-13) 2.4.7_011 DEV (CHM on 2011-03-07) 2.4.7_010 DEV (CHM on 2011-02-15) 2.4.7_009 DEV (CHM on 2011-02-13) 2.4.7_008 DEV (CHM on 2010-12-24) 2.4.7_007 DEV (CHM on 2010-12-03) 2.4.7_006 DEV (CHM on 2010-11-12) 2.4.7_005 DEV (CHM on 2010-11-11) 2.4.7_004 DEV (CHM on 2010-11-09) 2.4.7_003 DEV (CHM on 2010-11-06) 2.4.7_002 DEV (CHM on 2010-10-03) 2.4.7_001 DEV (CHM on 2010-10-03) 2.4.7 (CHM on 2010-08-19) 2.4.6_993 DEV (CHM on 2010-08-18) 2.4.6_992 DEV (CHM on 2010-08-16) 2.4.6_991 DEV (CHM on 2010-08-14) 2.4.6_018 DEV (CHM on 2010-08-08) 2.4.6_017 DEV (CHM on 2010-08-08) 2.4.6_016 DEV (CHM on 2010-08-06) 2.4.6_015 DEV (CHM on 2010-07-31) 2.4.6_014 DEV (CHM on 2010-07-11) 2.4.6_013 DEV (CHM on 2010-07-07) 2.4.6_012 DEV (CHM on 2010-07-06) 2.4.6_011 DEV (CHM on 2010-06-28) 2.4.6_010 DEV (CHM on 2010-06-22) 2.4.6_009 DEV (CHM on 2010-06-09) 2.4.6_008 DEV (CHM on 2010-05-31) 2.4.6_007 DEV (CHM on 2010-05-22) 2.4.6_006 DEV (CHM on 2010-05-07) 2.4.6_001 DEV (CHM on 2010-02-10) 2.4.6 (CHM on 2010-01-01) 2.4.5_008 DEV (CHM on 2009-12-27) 2.4.5_007 DEV (CHM on 2009-12-27) 2.4.5_006 DEV (CHM on 2009-12-21) 2.4.5_005 DEV (CHM on 2009-12-20) 2.4.5_004 DEV (CHM on 2009-12-09) 2.4.5_003 DEV (CHM on 2009-11-01) 2.4.5_002 DEV (CHM on 2009-10-30) 2.4.5_001 DEV (CHM on 2009-10-30) 2.4.5 (CHM on 2009-10-24) 2.4.4_900 DEV (CHM on 2009-10-20) 2.4.4_136 DEV (CHM on 2009-10-15) 2.4.4_13 DEV (CHM on 2009-10-03) 2.4.4_11 DEV (CHM on 2009-09-25) 2.4.4_10 DEV (CHM on 2009-09-25) 2.4.4_09 DEV (CHM on 2009-09-24) 2.4.4_08 DEV (CHM on 2009-08-21) 2.4.4_07 DEV (CHM on 2009-08-15) 2.4.4_06 DEV (CHM on 2009-07-27) 2.4.4_05 DEV (CHM on 2009-07-11) 2.4.4_04 DEV (CHM on 2009-07-10) 2.4.4_03 DEV (CHM on 2009-05-19) 2.4.4_02 DEV (CHM on 2009-05-15) 2.4.4_01 DEV (CHM on 2009-05-13) 2.4.4 (CHM on 2008-11-13) 2.4.3_06 DEV (CHM on 2008-11-06) 2.4.3_05 DEV (CHM on 2008-11-05) 2.4.3_04 DEV (CHM on 2008-11-02) 2.4.3_03 DEV (CHM on 2008-10-26) 2.4.3_02 DEV (CHM on 2008-10-23) 2.4.3_01 DEV (CHM on 2008-10-20) 2.4.3 (CSOE on 2006-08-20) 2.4.2 (CSOE on 2005-01-11) 2.4.1 (CSOE on 2004-01-20) 2.4.0 (CSOE on 2003-06-04) 2.3.4 (CSOE on 2002-09-30) 2.3.3 (CSOE on 2002-06-08) 2.3.2 (KGB on 2002-03-05) 2.3.2 (CSOE on 2001-12-21) 2.3.1 (CSOE on 2001-11-28) 2.2.1 (KGB on 2001-04-27) 2.2 (KGB on 2000-12-28) 2.1.1 (KGB on 2000-06-22) 2.005 (KGB on 2000-04-06) 2.004 (KGB on 2000-03-21) 2.003 (KGB on 1999-10-29) 2.002 (KGB on 1999-06-26) 2.0 (KGB on 1999-01-11) 1.99989 (LUKKA on 1998-11-13) 1.99988 (KGB on 1998-10-02) 1.99987 (KGB on 1998-09-20) 1.9906 (LUKKA on 1998-05-03) 1.9905 (LUKKA on 1998-04-24) 1.9904 (LUKKA on 1998-04-21) 1.9903 (LUKKA on 1998-04-21) 1.9902 (LUKKA on 1998-03-17) 1.9901 (LUKKA on 1998-03-09) 1.9900 (LUKKA on 1998-02-28) 1.11 (KGB on 1997-07-11) 1.920003 DEV (LUKKA on 1997-03-30) 1.920002 DEV (LUKKA on 1997-03-15) 1.11 (KGB on 1997-02-24) 1.10 (KGB on 1997-02-19) 1.031 (KGB on 1997-01-11) 1.03 (KGB on 1997-01-03) 1.01 (KGB on 1996-12-03) 1.04 (LUKKA on 1996-11-30) 1.032 (KGB on 1996-11-28) 1.0200 (LUKKA on 1996-11-19) 1.010000 (KGB on 1996-11-06) 1.000000 (KGB on 1996-10-20) 1.0000 (KGB on 1996-10-16) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 16 PAUSE users 10 non-PAUSE users. CHM Chris Marshall and 1 contributors show them PerlDL Developers (pdl-general@lists.sourceforge.net) Dependencies Astro::FITS::Header Carp Config Convert::UU Data::Dumper English ExtUtils::MakeMaker ExtUtils::Manifest Fcntl File::Basename File::Find File::Map File::Path File::Spec File::Temp Filter::Simple Filter::Util::Call Inline Inline::C Module::Compile OpenGL Pod::Parser Pod::Select Scalar::Util Storable Text::Balanced and possibly others CPAN Testers List Reverse dependencies Dependency graph × PDL-2.016 NAME DESCRIPTION VECTORIZATION INTERACTIVE SHELL LOOKING FOR A FUNCTION? LANGUAGE DOCUMENTATION MODULES SYNOPSIS NAME PDL - the Perl Data Language DESCRIPTION (For the exported PDL constructor, pdl(), see PDL::Core) PDL is the Perl Data Language, a perl extension that is designed for scientific and bulk numeric data processing and display. It extends perl's syntax and includes fully vectorized, multidimensional array handling, plus several paths for device-independent graphics output. PDL is fast, comparable and often outperforming IDL and MATLAB in real world applications. PDL allows large N-dimensional data sets such as large images, spectra, etc to be stored efficiently and manipulated quickly. VECTORIZATION For a description of the vectorization (also called ""threading""), see PDL::Core. INTERACTIVE SHELL The PDL package includes an interactive shell. You can learn about it, run perldoc perldl, or run the shell perldl or pdl2 and type help. LOOKING FOR A FUNCTION? If you want to search for a function name, you should use the PDL shell along with the ""help"" or ""apropos"" command (to do a fuzzy search). For example:  pdl> apropos xval  xlinvals        X axis values between endpoints (see xvals).  xlogvals        X axis values logarithmicly spaced...  xvals           Fills a piddle with X index values...  yvals           Fills a piddle with Y index values. See the CAVEAT for xvals.  zvals           Fills a piddle with Z index values. See the CAVEAT for xvals. To learn more about the PDL shell, see perldl or pdl2. LANGUAGE DOCUMENTATION Most PDL documentation describes the language features. The number of PDL pages is too great to list here. The following pages offer some guidance to help you find the documentation you need. PDL::FAQ Frequently asked questions about PDL. This page covers a lot of questions that do not fall neatly into any of the documentation categories. PDL::Tutorials A guide to PDL's tutorial-style documentation. With topics from beginner to advanced, these pages teach you various aspects of PDL step by step. PDL::Modules A guide to PDL's module reference. Modules are organized by level (foundation to advanced) and by category (graphics, numerical methods, etc) to help you find the module you need as quickly as possible. PDL::Course This page compiles PDL's tutorial and reference pages into a comprehensive course that takes you from a complete beginner level to expert. PDL::Index List of all available documentation, sorted alphabetically. If you cannot find what you are looking for, try here. MODULES PDL includes about a dozen perl modules that form the core of the language, plus additional modules that add further functionality. The perl module ""PDL"" loads all of the core modules automatically, making their functions available in the current perl namespace. Some notes: Modules loaded by default See the SYNOPSIS section at the end of this document for a list of modules loaded by default. PDL::Lite and PDL::LiteF These are lighter-weight alternatives to the standard PDL module. Consider using these modules if startup time becomes an issue. Exports use PDL; exports a large number of routines into the calling namespace. If you want to avoid namespace pollution, you must instead use PDL::Lite, and include any additional modules explicitly. PDL::NiceSlice Note that the PDL::NiceSlice syntax is NOT automatically loaded by use PDL;. If you want to use the extended slicing syntax in a standalone script, you must also say use PDL::NiceSlice;. PDL::Math The PDL::Math module has been added to the list of modules for versions later than 2.3.1. Note that PDL::Math is still not included in the PDL::Lite and PDL::LiteF start-up modules. SYNOPSIS  use PDL; # Is equivalent to the following:     use PDL::Core;    use PDL::Ops;    use PDL::Primitive;    use PDL::Ufunc;    use PDL::Basic;    use PDL::Slices;    use PDL::Bad;    use PDL::MatrixOps;    use PDL::Math;    use PDL::Version;    use PDL::IO::Misc;    use PDL::IO::FITS;    use PDL::IO::Pic;    use PDL::IO::Storable;    use PDL::Lvalue; × Module Install Instructions To install PDL, simply copy and paste either of the commands in to your terminal cpanm                      cpanm PDL CPAN shell                      perl -MCPAN -e shell                     install PDL For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Science/Numerics"	"PDL::Graphics::Gnuplot"	"https://metacpan.org/pod/PDL::Graphics::Gnuplot"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PDL::Graphics::Gnuplot - Gnuplot-based plotting for PDL - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Craig DeForest  /  2.005 (ZOWIE on 2015-05-06) 2.004 (ZOWIE on 2014-12-21) 2.003 (ZOWIE on 2014-09-17) 0.06 (DKOGAN on 2012-08-06) 0.06 (DKOGAN on 2012-08-03) 0.06 (DKOGAN on 2012-08-02) 0.06 (DKOGAN on 2012-07-24) 0.05 (DKOGAN on 2012-07-20) 0.04 (DKOGAN on 2012-07-16) 0.02 (DKOGAN on 2011-08-05) 0.01 (DKOGAN on 2011-08-01) 2.000 (ZOWIE on 2013-10-16) 1.5 (ZOWIE on 2013-03-25) 1.4 (ZOWIE on 2013-02-26) 1.3 (ZOWIE on 2012-10-22) 1.2 (ZOWIE on 2012-10-18) 1.2 (ZOWIE on 2012-10-18) 1.1 (ZOWIE on 2012-10-12) 1.0 (ZOWIE on 2012-09-24) 1.0b (ZOWIE on 2012-09-24) 0.04 (DKOGAN on 2012-07-13) PDL-Graphics-Gnuplot-2.005 3 ++ 3 ++  / PDL::Graphics::Gnuplot 06 May 2015 03:46:39 GMT Module version: 2.005 Source (raw) Browse (raw) Changes Homepage Clone git repository Issues (4) Testers (12 / 67 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (131.53Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 2.004 (ZOWIE on 2014-12-21) 2.003 (ZOWIE on 2014-09-17) 0.06 (DKOGAN on 2012-08-06) 0.06 (DKOGAN on 2012-08-03) 0.06 (DKOGAN on 2012-08-02) 0.06 (DKOGAN on 2012-07-24) 0.05 (DKOGAN on 2012-07-20) 0.04 (DKOGAN on 2012-07-16) 0.02 (DKOGAN on 2011-08-05) 0.01 (DKOGAN on 2011-08-01) 2.000 (ZOWIE on 2013-10-16) 1.5 (ZOWIE on 2013-03-25) 1.4 (ZOWIE on 2013-02-26) 1.3 (ZOWIE on 2012-10-22) 1.2 (ZOWIE on 2012-10-18) 1.2 (ZOWIE on 2012-10-18) 1.1 (ZOWIE on 2012-10-12) 1.0 (ZOWIE on 2012-09-24) 1.0b (ZOWIE on 2012-09-24) 0.04 (DKOGAN on 2012-07-13) Diff with version 2.004 (ZOWIE on 2014-12-21) 2.003 (ZOWIE on 2014-09-17) 0.06 (DKOGAN on 2012-08-06) 0.06 (DKOGAN on 2012-08-03) 0.06 (DKOGAN on 2012-08-02) 0.06 (DKOGAN on 2012-07-24) 0.05 (DKOGAN on 2012-07-20) 0.04 (DKOGAN on 2012-07-16) 0.02 (DKOGAN on 2011-08-05) 0.01 (DKOGAN on 2011-08-01) 2.000 (ZOWIE on 2013-10-16) 1.5 (ZOWIE on 2013-03-25) 1.4 (ZOWIE on 2013-02-26) 1.3 (ZOWIE on 2012-10-22) 1.2 (ZOWIE on 2012-10-18) 1.2 (ZOWIE on 2012-10-18) 1.1 (ZOWIE on 2012-10-12) 1.0 (ZOWIE on 2012-09-24) 1.0b (ZOWIE on 2012-09-24) 0.04 (DKOGAN on 2012-07-13) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 2 PAUSE users 1 non-PAUSE user. ZOWIE Craig DeForest and 1 contributors show them Craig DeForest, Dima Kogan <dima@secretsauce.net> Dependencies Alien::Gnuplot IO::Select IPC::Open3 IPC::Run List::Util PDL Safe::Isa Storable Test::More Time::HiRes and possibly others CPAN Testers List Reverse dependencies Dependency graph × PDL-Graphics-Gnuplot-2.005 NAME SYNOPSIS DESCRIPTION Basic plotting Modifying plots Image plotting 3-D plotting Enhanced text Color specification Plot styles supported Options arguments Data arguments PDLs vs list refs Implicit domains Images Interactivity PLOT OPTIONS POs for Output: terminal, termoption, output, device, hardcopy POs for Titles POs for axes, grids, & borders POs for axis range and mode POs for Axis tick marks POs for time data values POs for location/size POs for Color: colorbox, palette, clut POs for 3D: trid, view, pm3d, hidden3d, dgrid3d, surface, xyplane, mapping POs for Contour plots - contour, cntrparam POs for Polar plots - polar, angles, mapping POs for Markup - label, arrow, object label - add a text label to the plot. arrow - place an arrow or callout line on the plot object - place a shape on the graph POs for appearance tweaks - bars, boxwidth, isosamples, pointsize, style POs for locale/internationalization - locale, decimalsign POs for advanced Gnuplot tweaks: topcmds, extracmds, bottomcmds, binary, dump, tee CURVE OPTIONS RECIPES 2D plotting Simple style control Errorbars More multi-value styles 3D plotting Hardcopies Plotting examples A simple example A not-so-simple example A complicated example: FUNCTIONS gpwin new output close restart reset options gplot plot replot markup plot3d splot lines points image imag fits multiplot end_multi read_mouse read_polygon terminfo COMPATIBILITY REPOSITORY AUTHOR STILL TO DO LICENSE AND COPYRIGHT NAME PDL::Graphics::Gnuplot - Gnuplot-based plotting for PDL SYNOPSIS  pdl> use PDL::Graphics::Gnuplot;   pdl> $x = sequence(101) - 50;  pdl> gplot($x**2);  pdl> gplot($x**2,{xr=>[0,50]});   pdl> gplot( {title => 'Parabola with error bars'},        with => 'xyerrorbars', legend => 'Parabola',        $x**2 * 10, abs($x)/10, abs($x)*5 );   pdl> $xy = zeroes(21,21)->ndcoords - pdl(10,10);  pdl> $z = inner($xy, $xy);  pdl> gplot({title  => 'Heat map',               trid   => 1,               view   => [0,0]             },             with => 'image', xvals($z),yvals($z),zeroes($z),$z*2            );   pdl> $w = gpwin();                             # constructor  pdl> $pi    = 3.14159;  pdl> $theta = zeroes(200)->xlinvals(0, 6*$pi);  pdl> $z     = zeroes(200)->xlinvals(0, 5);  pdl> $w->plot3d(cos($theta), sin($theta), $z);  pdl> $w->terminfo();                           # get information DESCRIPTION This module allows PDL data to be plotted using Gnuplot as a backend for 2D and 3D plotting and image display. Gnuplot (not affiliated with the Gnu project) is a venerable, open-source program that produces both interactive and publication-quality plots on many different output devices. It is available through most Linux repositories, on MacOS, and from its website http://www.gnuplot.info. It is not necessary to understand the gnuplot syntax to generate basic, or even complex, plots - though the full syntax is available for advanced users who want the full flexibility of the Gnuplot backend. Gnuplot recognizes both hard-copy and interactive plotting devices, and on interactive devices (like X11) it is possible to pan, scale, and rotate both 2-D and 3-D plots interactively. You can also enter graphical data through mouse clicks on the device window. On some hardcopy devices (e.g. ""PDF"") that support multipage output, it is necessary to close the device after plotting to ensure a valid file is written out. PDL::Graphics::Gnuplot exports two routines by default: a constructor, gpwin() and a general purpose plot routine, gplot(). Depending on options, gplot() can produce line plots, scatterplots, error boxes, ""candlesticks"", images, or any overlain combination of these elements; or perspective views of 3-D renderings such as surface plots. A call to gplot() looks like:  gplot({temp_plot_options}, # optional hash ref       curve_options, data, data, ... ,       curve_options, data, data, ... ); The data entries are columns to be plotted. They are normally an optional ordinate and a required abscissa, but some plot modes can use more columns than that. The collection of columns is called a ""tuple"". Each column must be a separate PDL or an ARRAY ref. If all the columns are PDLs, you can add extra dimensions to make threaded collections of curves. PDL::Graphics::Gnuplot also implements an object oriented interface. Plot objects track individual gnuplot subprocesses. Direct calls to gplot() are tracked through a global object that stores globally set configuration variables. The gplot() sub (or the plot() method) collects two kinds of options hash: plot options, which describe the overall structure of the plot being produced (e.g. axis specifications, window size, and title), and curve options, which describe the behavior of individual traces or collections of points being plotted. In addition, the module itself supports options that allow direct pass-through of plotting commands to the underlying gnuplot process. Basic plotting Gnuplot generates many kinds of plot, from basic line plots and histograms to scaled labels. Individual plots can be 2-D or 3-D, and different sets of plot styles are supported in each mode. Plots can be sent to a variety of devices; see the description of plot options, below. You select a plot style with the ""with"" curve option, and feed in columns of data (usually ordinate followed by abscissa). The collection of columns is called a ""tuple"". These plots have two columns in their tuples:  $x = xvals(51)-25; $y = $x**2;  gplot(with=>'points', $x, $y);  # Draw points on a parabola  gplot(with=>'lines', $x, $y);   # Draw a parabola  gplot({title=>""Parabolic fit""},        with=>""yerrorbars"", legend=>""data"", $x, $y+(random($y)-0.5)*2*$y/20, pdl($y/20),        with=>""lines"",      legend=>""fit"",  $x, $y); Normal threading rules apply across the arguments to a given plot. All data are required to be supplied as either PDLs or list refs. If you use a list ref as a data column, then normal threading is disabled. For example:  $x = xvals(5);  $y = xvals(5)**2;  $labels = ['one','two','three','four','five'];  gplot(with=>'labels',$x,$y,$labels); See below for supported curve styles. Modifying plots Gnuplot is built around a monolithic plot model - it is not possible to add new data directly to a plot without redrawing the entire plot. To support replotting, PDL::Graphics::Gnuplot stores the data you plot in the plot object, so that you can add new data with the ""replot"" command:  $w=gpwin(x11);  $x=xvals(101)/100;  $y=$x;  $w->plot($x,$y);  $w->replot($x,$y*$y); For speed, the data are *not* disconnected from their original variables - so this will plot X vs. sqrt(X):  $x = xvals(101)/100;  $y = xvals(101)/100;  $w->plot($x,$y);  $y->inplace->sqrt;  $w->replot(); Image plotting Several of the plot styles accept image data. The tuple parameters work the same way as for basic plots, but each ""column"" is a 2-D PDL rather than a 1-D PDL. As a special case, the ""with image"" plot style accepts either a 2-D or a 3-D PDL. If you pass in 3-D PDL, the extra dimension can have size 1, 3, or 4. It is interpreted as running across (R,G,B,A) color planes. 3-D plotting You can plot in 3-D by setting the plot option trid to a true value. Three dimensional plots accept either 1-D or 2-D PDLs as data columns. If you feed in 2-D ""columns"", many of the common plot styles will generalize appropriately to 3-D. For example, to plot a 2-D surface as a line grid, you can use the ""lines"" style and feed in 2-D columns instead of 1-D columns. Enhanced text Most gnuplot output devices include the option to markup ""enhanced text"". That means text is interpreted so that you can change its font and size, and insert superscripts and subscripts into labels. Codes are: {} Text grouping - enclose text in braces to group characters, as in LaTeX. ^ Superscript the next character or group (shrinks it slightly too where that is supported). _ Subscript the next character or group (shrinks it slightly too where that is supported). @ Phantom box (occupies no width; controls height for super- and subscripting) & Controllable-width space, e.g. &amp;{template-string} ~ overstrike -- e.g. ~a{0.8-} overprints '-' on 'a', raised by 0.8xfontsize. {/[fontname][=fontsize | *fontscale] text} Change font to (optional) fontname, and optional absolute font size or relative font scale (""fontsize"" and ""fontscale"" are numbers). The space after the size parameter is not rendered. \ Backslash escapes control characters to render them as themselves. Color specification There are several contexts where you can specify color of plot elements. In those places, you can specify colors exactly as in the Gnuplot manual, or more tersely. In general, a color spec can be any one of the following: - an integer This specifies a recognizable unique color in the same order as used by the plotting engine. - the name of a color (e.g. ""blue""). Supported color names are listed in the variable @Alien::Gnuplot::colors. - an RGB value string Strings have the form #RRGGBB, where the # is literal and the RR, GG, and BB are hexadecimal bytes. - the word ""palette"" ""palette"" indicates that color is to be drawn from the scaled colorbar palette (which you can set with the ""clut"" plot option), by lookup using an additional column in the associated data tuple. - the word ""variable"" ""variable"" indicates that color is to be drawn from the integer plotting colors used by the plotting engine, indexed by an additional column in the associated data tuple. - the phrase ""rgb variable"" ""rgb variable"" indicates that color is to be directly specified by a 24 bit integer specifying 8-bit values for (from most significant byte to least significant byte) R, G, and B in the output color. The integer is drawn from an additional column in the associated data tuple. Plot styles supported Gnuplot itself supports a wide range of plot styles, and all are supported by PDL::Graphics::Gnuplot. Most of the basic plot styles collect tuples of 1-D columns in 2-D mode (for ordinary plots), or either 1-D or 2-D ""columns"" in 3-D mode (for grid surface plots and such). Image modes always collect tuples made of 2-D ""columns"". You can pass in 1-D columns as either PDLs or ARRAY refs. That is important for plot types (such as ""labels"") that require a collection of strings rather than numeric data. Each plot style can by modified to support particular colors or line style options. These modifications get passed in as curve options (see below). For example, to plot a blue line you can use with=>'lines',lc=>'blue'. To match the autogenerated style of a particular line you can use the ls curve option. The GNuplot plot styles supported are: boxerrorbars - combo of boxes and yerrorbars, below (2D) boxes - simple boxes around regions on the plot (2D) boxxyerrorbars - Render X and Y error bars as boxes (2D) candlesticks - Y error bars with inner and outer limits (2D) circles - circles with variable radius at each point: X/Y/radius (2D) dots - tiny points (""dots"") at each point, e.g. for scatterplots (2D/3D) ellipses - ellipses. Accepts X/Y/major/minor/angle (2D) filledcurves - closed polygons or axis-to-line filled shapes (2D) financebars - financial style plot. Accepts date/open/low/high/close (2D) fsteps - square bin plot; delta-Y, then delta-X (see steps, histeps) (2D) histeps - square bin plot; plateaus centered on X coords (see fsteps, steps) (2D) histogram - binned histogram of dataset (not direct plot; see newhistogram) (2D) fits - (PDL-specific) renders FITS image files in scientific coordinates image - Takes (i), (x,y,i), or (x,y,z,i). See rgbimage, rgbalpha, fits. (2D/3D) impulses - vertical line from axis to the plotted point (2D/3D) labels - Text labels at specified locations all over the plot (2D/3D) lines - regular line plot (2D/3D) linespoints - line plot with symbols at plotted points (2D/3D) newhistogram - multiple-histogram-friendly histogram style (see histogram) (2D) points - symbols at plotted points (2D/3D) rgbalpha - R/G/B color image with variable transparency (2D/3D) rgbimage - R/G/B color image (2D/3D) steps - square bin plot; delta-X, then delta-Y (see fsteps, histeps) (2D) vectors - Small arrows: (x,y,[z]) -> (x+dx,y+dy,[z+dz]) (2D/3D) xerrorbars - points with X error bars (""T"" form) (2D) xyerrorbars - points with both X and Y error bars (""T"" form) (2D) yerrorbars - points with Y error bars (""T"" form) (2D) xerrorlines - line plot with X errorbars at each point. (2D) xyerrorlines - line plot with XY errorbars at each point. (2D) yerrorlines - line plot with Y error limits at each point. (2D) pm3d - three-dimensional variable-position surface plot Options arguments The plot options are parameters that affect the whole plot, like the title of the plot, the axis labels, the extents, 2d/3d selection, etc. All the plot options are described below in ""Plot options"". Plot options can be set in the plot object, or passed to the plotting methods directly. Plot options can be passed in as a leading interpolated hash, as a leading hash ref, or as a trailing hash ref in the argument list to any of the main plotting routines (gplot, plot, image, etc.). The curve options are parameters that affect only one curve in particular. Each call to plot() can contain many curves, and options for a particular curve precede the data for that curve in the argument list. The actual type of curve (the ""with"" option) is persistent, but all other curve options and modifiers are not. An example:  gplot( with => 'points',  $x, $a,         {axes=> x1y2},     $x, $b,         with => 'lines',   $x, $c ); This plots 3 curves: $a vs. $x plotted with points on the main y-axis (this is the default), $b vs. $x plotted with points on the secondary y axis, and $c vs. $x plotted with lines on the main y-axis (the default). Note that the curve options can be supplied as either an inline hash or a hash ref. All the curve options are described below in ""Curve options"". If you want to plot multiple curves of the same type without setting any curve options explicitly, you must include an empty hash ref between the tuples for subsequent lines, as in:  gplot( $x, $a, {}, $x, $b, {}, $x, $c ); Data arguments Following the curve options in the plot() argument list is the actual data being plotted. Each output data point is a ""tuple"" whose size varies depending on what is being plotted. For example if we're making a simple 2D x-y plot, each tuple has 2 values; if we're making a 3d plot with each point having variable size and color, each tuple has 5 values (x,y,z,size,color). Each tuple element must be passed separately. For ordinary 2-D plots, the 0 dim of the tuple elements runs across plotted point. PDL threading is active, so you can plot multiple curves with similar curve options on a normal 2-D plot, just by stacking data inside the passed-in PDLs. (An exception is that threading is disabled if one or more of the data elements is a list ref). PDLs vs list refs The usual way to pass in data is as a PDL -- one PDL per column of data in the tuple. But strings, in particular, cannot easily be hammered into PDLs. Therefore any column in each tuple can be a list ref containing values (either numeric or string). The column is interpreted using the usual polymorphous cast-behind-your-back behavior of Perl. For the sake of sanity, if even one list ref is present in a tuple, then threading is disabled in that tuple: everything has to have a nice 1-D shape. Implicit domains When making a simple 2D plot, if exactly 1 dimension is missing, PDL::Graphics::Gnuplot will use sequence(N) as the domain. This is why code like plot(pdl(1,5,3,4,4) ) works. Only one PDL is given here, but the plot type (""lines"" by default) requires 2 elements per tuple. We are thus exactly 1 piddle short; sequence(5) is used as the missing domain PDL. This is thus equivalent to plot(sequence(5), pdl(1,5,3,4,4) ). If plotting in 3d or displaying an image, an implicit domain will be used if we are exactly 2 piddles short. In this case, PDL::Graphics::Gnuplot will use a 2D grid as a domain. Example:  my $xy = zeros(21,21)->ndcoords - pdl(10,10);  gplot({'3d' => 1},         with => 'points', inner($xy, $xy));  gplot( with => 'image',  sin(rvals(51,51)) ); Here the only given piddle has dimensions (21,21). This is a 3D plot, so we are exactly 2 piddles short. Thus, PDL::Graphics::Gnuplot generates an implicit domain, corresponding to a 21-by-21 grid. PDL::Graphics::Gnuplot requires explicit separators between tuples for different plots, so it is always clear from the arguments you pass in just how many columns you are supplying. For example, plot($a,$b) will plot $b vs. $a. If you actually want to plot an overlay of both $a and $b against array index, you want plot($a,{},$b) instead. The {} is a hash ref containing a collection of all the curve options that you are changing between the two curves -- in this case, zero of them. Images PDL::Graphics::Gnuplot supports four styles of image plot, via the ""with"" curve option. The ""image"" style accepts a single image plane and displays it using the palette (pseudocolor map) that is specified in the plot options for that plot. As a special case, if you supply as data a (WxHx3) PDL it is treated as an RGB image and displayed with the ""rgbimage"" style (below). For quick image display there is also an ""image"" method:  use PDL::Graphics::Gnuplot qw/image/;  $im = sin(rvals(51,51)/2);  image( $im );                # display the image  gplot( with=>'image', $im );  # display the image (longer form) The colors are autoscaled in both cases. To set a particular color range, use the 'cbrange' plot option:  image( {cbrange=>[0,1]}, $im ); You can plot rgb images directly with the image style, just by including a 3rd dimension of size 3 on your image:  $rgbim = pdl( xvals($im), yvals($im),rvals($im)/sqrt(2));  image( $rgbim );                # display an RGB image  gplot( with=>'image', $rgbim ); # display an RGB image (longer form) Some additional plot styles exist to specify RGB and RGB transparent forms directly. These are the ""with"" styles ""rgbimage"" and ""rgbalpha"". For each of them you must specify the channels as separate PDLs:  gplot( with=>'rgbimage', $rgbim->dog );           # RGB  the long way  gplot( with=>'rgbalpha', $rgbim->dog, ($im>0) );  # RGBA the long way According to the gnuplot specification you can also give X and Y values for each pixel, as in  gplot( with=>'image', xvals($im), yvals($im), $im ) but this appears not to work properly for anything more complicated than a trivial matrix of X and Y values. PDL::Graphics::Gnuplot provides a ""fits"" plot style that interprets World Coordinate System (WCS) information supplied in the header of the scientific image format FITS. The image is displayed in rectified scientific coordinates, rather than in pixel coordinates. You can plot FITS images in scientific coordinates with  gplot( with=>'fits', $fitsdata ); The fits plot style accepts a modifier ""resample"" (which may be abbreviated), that allows you to downsample and/or rectify the image before it is passed to the Gnuplot back-end. This is useful either to cut down on the burden of transferring large blocks of image data or to rectify images with nonlinear WCS transformations in their headers. (gnuplot itself has a bug that prevents direct rendering of images in nonlinear coordinates).  gplot( with=>'fits res 200', $fitsdata );  gplot( with=>'fits res 100,400',$fitsdata ); to specify that the output are to be resampled onto a square 200x200 grid or a 100x400 grid, respectively. The resample sizes must be positive integers. Interactivity Several of the graphical backends of Gnuplot are interactive, allowing you to pan, zoom, rotate and measure the data interactively in the plot window. See the Gnuplot documentation for details about how to do this. Some terminals (such as wxt) are persistently interactive. Other terminals (such as x11) maintain their interactivity only while the underlying gnuplot process is active -- i.e. until another plot is created with the same PDL::Graphics::Gnuplot object, or until the perl process exits (whichever comes first). Still others (the hardcopy devices) aren't interactive at all. Some interactive devices (notably wxt and x11) also support mouse input: you can write PDL scripts that accept and manipulate graphical input from the plotted window. PLOT OPTIONS Gnuplot controls plot style with ""plot options"" that configure and specify virtually all aspects of the plot to be produced. Plot options are tracked as stored state in the PDL::Graphics::Gnuplot object. You can set them by passing them in to the constructor, to an options method, or to the plot method itself. Nearly all the underlying Gnuplot plot options are supported, as well as some additional options that are parsed by the module itself for convenience. There are many, many plot options. For convenience, we've grouped them by general category below. Each group has a heading ""POs for <foo>"", describing the category. You can skip below them all if you want to read about curve options or other aspects of PDL::Graphics::Gnuplot. POs for Output: terminal, termoption, output, device, hardcopy You can send plots to a variety of different devices; Gnuplot calls devices ""terminals"". With the object-oriented interface, you must set the output device with the constructor PDL::Graphics::Gnuplot::new (or the exported constructor gpwin) or the output method. If you use the simple non-object interface, you can set the output with the terminal, termoption, and output plot options. terminal sets the output device type for Gnuplot, and output sets the actual output file or window number. device and hardcopy are for convenience. device offers a PGPLOT-style device specifier in ""filename/device"" format (the ""filename"" gets sent to the ""output"" option, the ""device"" gets sent to the ""terminal"" option). hardcopy takes an output file name, attempts to parse out a file suffix and infer a device type. hardcopy also uses a common set of terminal options needed to fill an entire letter page with a plot. For finer grained control of the plotting environment, you can send ""terminal options"" to Gnuplot. If you set the terminal directly with plot options, you can include terminal options by interpolating them into a string, as in terminal jpeg interlace butt crop, or you can use the constructor new (also exported as gpwin), which parses terminal options as an argument list. The routine PDL::Graphics::Gnuplot::terminfo prints a list of all available terminals or, if you pass in a terminal name, options accepted by that terminal. POs for Titles The options described here are title xlabel x2label ylabel y2label zlabel cblabel key Gnuplot supports ""enhanced"" text escapes on most terminals; see ""text"", below. The title option lets you set a title for the whole plot. Individual plot components are labeled with the label options. xlabel, x2label, ylabel, and y2label specify axis titles for 2-D plots. The zlabel works for 3-D plots. The cblabel option sets the label for the color box, in plot types that have one (e.g. image display). (Don't be confused by clabel, which doesnt' set a label at all, rather specifies the printf format used by contour labels in contour plots.) key controls where the plot key (that relates line/symbol style to label) is placed on the plot. It takes a scalar boolean indicating whether to turn the key on (with default values) or off, or a list ref containing any of the following arguments (all are optional) in the order listed: ( on | off ) - turn the key on or off ( inside | outside | lmargin | rmargin | tmargin | bmargin | at <pos> ) These keywords set the location of the key -- ""inside/outside"" is relative to the plot border; the margin keywords indicate location in the margins of the plot; and at <pos> (where <pos> is a 2-list containing (x,y): key=>[at=>[0.5,0.5]]) is an exact location to place the key. ( left | right | center ) ( top | bottom | center ) - horiz./vert. alignment ( vertical | horizontal ) - stacking direction within the key ( Left | Right ) - justification of plot labels within the key (note case) [no]reverse - switch order of label and sample line [no]invert - invert the stack order of the labels samplen <length> - set the length of the sample lines spacing <dist> - set the spacing between adjacent labels in the list [no]autotitle - control whether labels are generated when not specified title ""<text>"" - set a title for the key [no]enhanced - override terminal settings for enhanced text interpretation font ""<face>,<size>"" - set font for the labels textcolor <colorspec> [no]box linestyle <ls> linetype <lt> linewidth <lw> - control box around the key POs for axes, grids, & borders The options described here are grid xzeroaxis x2zeroaxis yzeroaxis y2zeroaxis zzeroaxis border Normally, tick marks and their labels are applied to the border of a plot, and no extra axes (e.g. the y=0 line) nor coordinate grids are shown. You can specify which (if any) zero axes should be drawn, and which (if any) borders should be drawn. The border option controls whether the plot itself has a border drawn around it. You can feed it a scalar boolean value to indicate whether borders should be drawn around the plot -- or you can feed in a list ref containing options. The options are all optional but must be supplied in the order given. <integer> - packed bit flags for which border lines to draw The default if you set a true value for border is to draw all border lines. You can feed in a single integer value containing a bit mask, to draw only some border lines. From LSB to MSB, the coded lines are bottom, left, top, right for 2D plots -- e.g. 5 will draw bottom and top borders but neither left nor right. In three dimensions, 12 bits are used to describe the twelve edges of a cube surrounding the plot. In groups of three, the first four control the bottom (xy) plane edges in the same order as in the 2-D plots; the middle four control the vertical edges that rise from the clockwise end of the bottom plane edges; and the last four control the top plane edges. ( back | front ) - draw borders first or last (controls hidden line appearance) linewidth <lw>, linestyle <ls>, linetype <lt> These are Gnuplot's usual three options for line control. The grid option indicates whether gridlines should be drawn on each axis. It takes a list ref of arguments, each of which is either ""no"" or ""m"" or """", followed by an axis name and ""tics"" -- e.g. grid=>[""noxtics"",""ymtics""] draws no X gridlines and draws (horizontal) Y gridlines on Y axis major and minor tics, while grid=>[""xtics"",""ytics""] or grid=>[""xtics ytics""] will draw both vertical (X) and horizontal (Y) grid lines on major tics. To draw a coordinate grid with default values, set grid=>1. For more control, feed in a list ref with zero or more of the following parameters, in order: The zeroaxis keyword indicates whether to actually draw each axis line at the corresponding zero along its indicated dimension. For example, to draw the X axis (y=0), use xzeroaxis=>1. If you just want the axis turned on with default values, you can feed in a Boolean scalar; if you want to set its parameters, you can feed in a list ref containing linewidth, linestyle, and linetype (with appropriate parameters for each), e.g. xzeroaxis=>[linewidth=>2]. POs for axis range and mode The options described here are xrange x2range yrange y2range zrange rrange cbrange trange urange vrange autoscale logscale Gnuplot accepts explicit ranges as plot options for all axes. Each option accepts a list ref with (min, max). If either min or max is missing, then the opposite limit is autoscaled. The x and y ranges refer to the usual ordinate and abscissa of the plot; x2 and y2 refer to alternate ordinate and abscissa; z if for 3-D plots; r is for polar plots; t, u, and v are for parametric plots. cb is for the color box on plots that include it (see ""color"", below). rrange is used for radial coordinates (which are accessible using the mapping plot option, below). cbrange (for 'color box range') sets the range of values over which palette colors (either gray or pseudocolor) are matched. It is valid in any color-mapped plot (including images or palette-mapped lines or points), even if no color box is being displayed for this plot. trange, urange, and vrange set ranges for the parametric coordinates if you are plotting a parametric curve. By default all axes are autoscaled unless you specify a range on that axis, and partially (min or max) autoscaled if you specify a partial range on that axis. autoscale allows more explicit control of how autoscaling is performed, on an axis-by-axis basis. It accepts a hash ref, each element of which specifies how a single axis should be autoscaled. Each keyword contains an axis name followed by one of ""fix"", ""min"", ""max"", ""fixmin"", or ""fixmax"". You can set all the axes at once by setting the keyword name to ' '. Examples:  autoscale=>{x=>'max',y=>'fix'}; There is an older list ref syntax which is deprecated but still accepted. To not autoscale an axis at all, specify a range for it. The fix style of autoscaling forces the autoscaler to use the actual min/max of the data as the limit for the corresponding axis -- by default the axis gets extended to the next minor tic (as set by the autoticker or by a tic specification, see below). logscale allows you to turn on logarithmic scaling for any or all axes, and to set the base of the logarithm. It takes a list ref, the first element of which is a string mushing together the names of all the axes to scale logarithmically, and the second of which is the base of the logarithm: logscale=>[xy=>10]. You can also leave off the base if you want base-10 logs: logscale=>['xy']. POs for Axis tick marks The options described here are xtics x2tics ytics y2tics ztics cbtics mxtics mx2tics mytics my2tics mztics mcbtics Axis tick marks are called ""tics"" within Gnuplot, and they are extensively controllable via the ""{axis}tics"" options. In particular, major and minor ticks are supported, as are arbitrarily variable length ticks, non-equally spaced ticks, and arbitrarily labelled ticks. Support exists for time formatted ticks (see POs for time data values below). By default, gnuplot will automatically place major and minor ticks. You can turn off ticks on an axis by setting the appropriate {foo}tics option to a defined, false scalar value (e.g. xtics=>0). If you want to set major tics to happen at a regular specified intervals, you can set the appropriate tics option to a nonzero scalar value (e.g. xtics=>2 to specify a tic every 2 units on the X axis). To use default values for the tick positioning, specify an empty hash or array ref (e.g. xtics=>{}), or a string containing only whitespace (e.g. <xtics=' '>>). If you prepend an 'm' to any tics option, it affects minor tics instead of major tics (major tics typically show units; minor tics typically show fractions of a unit). Each tics option can accept a hash ref containing options to pass to Gnuplot. You can also pass in a snippet of gnuplot command, as either a string or an array ref -- but those techniques are deprecated and may disappear in a future version of PDL:Graphics::Gnuplot. The keywords are case-insensitive and may be abbreviated, just as with other option types. They are: axis - set to 1 to place tics on the axis (the default) border - set to 1 to place tics on the border (not the default) mirror - set to 1 to place mirrored tics on the opposite axis/border (the default, unless an alternate axis interferes -- e.g. y2) in - set to 1 to draw tics inward from the axis/border out - set to 1 to draw tics outward from the axis/border scale - multiplier on tic length compared to the default If you pass in undef, tics get the default length. If you pass in a scalar, major tics get scaled. You can pass in an array ref to scale minor tics too. rotate - turn label text by the given angle (in degrees) on the drawing plane offset - offset label text from default position, (units: characters; requires array ref containing x,y) locations - sets tic locations. Gets an array ref: [incr], [start, incr], or [start, incr, stop]. labels - sets tic locations explicitly, with text labels for each. If you specify both locations and labels, you get both sets of tics on the same axis. The labels should be a nested list ref that is a collection of duals or triplets. Each dual or triplet should contain [label, position, minorflag], as in <labels=[[""one"",1,0],[""three-halves"",1.5,1],[""two"",2,0]]>>. format - printf-style format string for tic labels. There are some extensions to the gnuplot format tags -- see the gnuplot manual. Gnuplot 4.8 and higher have %h, which works like %g but uses extended text formatting if it is available. font - set font name and size (system font name) rangelimited - set to 1 to limit tics to the range of values actually present in the plot textcolor - set the color of the ticks (see ""color specs"" below) For example, to turn on inward mirrored X axis ticks with diagonal Arial 9 text, use:  xtics => {axis=>1,mirror=>1,in=>1,rotate=>45,font=>'Arial,9'} or  xtics => ['axis','mirror','in','rotate by 45','font ""Arial,9""'] POs for time data values The options described here are xmtics x2mtics ymtics y2mtics zmtics cbmtics xdtics x2dtics ydtics y2dtics zdtics cbdtics xdata x2data ydata y2data zdata cbdata Gnuplot contains support for plotting absolute time and date on any of its axes, with conventional formatting. There are three main methods, which are mutually exclusive (i.e. you should not attempt to use two at once on the same axis). Plotting timestamps using UNIX times You can set any axis to plot timestamps rather than numeric values by setting the corresponding ""data"" plot option to ""time"", e.g. <xdata=""time"">>. If you do so, then numeric values in the corresponding data are interpreted as UNIX time (seconds since the UNIX epoch, neglecting leap seconds). No provision is made for UT-TAI conversion. You can format how the times are plotted with the ""format"" option in the various ""tics"" options(above). Output specifiers should be in UNIX strftime(3) format -- for example, <xdata=""time"",xtics=>{format=>""%Y-%b-%dT%H:%M:%S""}>> will plot UNIX times as ISO timestamps in the ordinate. Due to limitations within gnuplot, the time resolution in this mode is limited to 1 second - if you want fractional seconds, you must use numerically formatted times (and/or create your own tick labels using the labels suboption to the ?tics option. Timestamp format specifiers Time format specifiers use the following printf-like codes: Year A.D.: %Y is 4-digit year; %y is 2-digit year (1969-2068) Month of year: %m: 01-12; %b or %h: abrev. name; %B: full name Week of year: %W (week starting Monday); %U (week starting Sunday) Day of year: %j (1-366; boundary is midnight) Day of month: %d (01-31) Day of week: %w (0-6, Sunday=0), %a (abrev. name), %A (full name) Hour of day: %k (0-23); %H (00-23); %l (1-12); %I (01-12) Am/pm: %p (""am"" or ""pm"") Minute of hour: %M (00-60) Second of minute: %S (0-60) Total seconds since start of 2000 A.D.: %s Timestamps: %T (same as %H:%M:%S); %R (same as %H:%M); %r (same as %I:%M:%S %p) Datestamps: %D (same as %m/%d/%y); %F (same as %Y-%m-%d) ISO timestamps: use %DT%T. day-of-week plotting If you just want to plot named days of the week, you can instead use the dtics options set plotting to day of week, where 0 is Sunday and 6 is Saturday; values are interpreted modulo 7. For example, xmtics=>1,xrange=>[-4,9] will plot two weeks from Wednesday to Wednesday. As far as output format goes, this is exactly equivalent to using the %w option with full formatting - but you can treat the numeric range in terms of weeks rather than seconds. month-of-year plotting The mtics options set plotting to months of the year, where 1 is January and 12 is December, so xdtics=>1, xrange=>[0,4] will include Christmas through Easter. This is exactly equivalent to using the %d option with full formatting - but you can treat the numeric range in terms of months rather than seconds. POs for location/size The options described here are tmargin bmargin lmargin rmargin offsets origin size justify clip Adjusting the size, location, and margins of the plot on the plotting surface is something of a null operation for most single plots -- but you can tweak the placement and size of the plot with these options. That is particularly useful for multiplots, where you might like to make an inset plot or to lay out a set of plots in a custom way. The margin options accept scalar values -- either a positive number of character heights or widths of margin around the plot compared to the edge of the device window, or a string that starts with ""at screen "" and interpolates a number containing the fraction of the plot window offset. The ""at screen"" technique allows exact plot placement and is an alternative to the origin and size options below. The offsets option allows you to put an empty boundary around the data, inside the plot borders, in an autosacaled graph. The offsets only affect the x1 and y1 axes, and only in 2D plot commands. offsets accepts a list ref with four values for the offsets, which are given in scientific (plotted) axis units. The origin option lets you specify the origin (lower left corner) of an individual plot on the plotting window. The coordinates are screen coordinates -- i.e. fraction of the total plotting window. The size option lets you adjust the size and aspect ratio of the plot, as an absolute fraction of the plot window size. You feed in fractional ratios, as in size=>[$xfrac, $yfrac]. You can also feed in some keywords to adjust the aspect ratio of the plot. The size option overrides any autoscaling that is done by the auto-layout in multiplot mode, so use with caution -- particularly if you are multiplotting. You can use ""size"" to adjust the aspect ratio of a plot, but this is deprecated in favor of the pseudo-option justify. justify sets the scientific aspect ratio of a 2-D plot. Unity yields a plot with a square scientific aspect ratio. Larger numbers yield taller plots. clip controls the border between the plotted data and the border of the plot. There are three clip types supported: points, one, and two. You can set them independently by passing in booleans with their names: clip=>[points=>1,two=>0]. POs for Color: colorbox, palette, clut Color plots are supported via RGB and pseudocolor. Plots that use pseudcolor or grayscale can have a ""color box"" that shows the photometric meaning of the color. The colorbox generally appears when necessary but can be controlled manually with the colorbox option. colorbox accepts a scalar boolean value indicating whether or no to draw a color box, or a list ref containing additional options. The options are all, well, optional but must appear in the order given: ( vertical | horizontal ) - indicates direction of the gradient in the box ( default | user ) - indicates user origin and size If you specify default the colorbox will be placed on the right-hand side of the plot; if you specify user, you give the location and size in subsequent arguments:  colorbox => [ 'user', 'origin'=>""$x,$y"", 'size' => ""$x,$y"" ] ( front | back ) - draws the colorbox before or after the plot ( noborder | bdefault | border <line style> ) - specify border The line style is a numeric type as described in the gnuplot manual. The palette option offers many arguments that are not fully documented in this version but are explained in the gnuplot manual. It offers complete control over the pseudocolor mapping function. For simple color maps, clut gives access to a set of named color maps. (from ""Color Look Up Table""). A few existing color maps are: ""default"", ""gray"", ""sepia"", ""ocean"", ""rainbow"", ""heat1"", ""heat2"", and ""wheel"". To see a complete list, specify an invalid table, e.g. clut=>'xxx'. (This should be improved in a future version). POs for 3D: trid, view, pm3d, hidden3d, dgrid3d, surface, xyplane, mapping If trid or its synonym 3d is true, Gnuplot renders a 3-D plot. This changes the default tuple size from 2 to 3. This option is used to switch between the Gnuplot ""plot"" and ""splot"" command, but it is tracked with persistent state just as any other option. The view option controls the viewpoint of the 3-D plot. It takes a list of numbers: view=>[$rot_x, $rot_z, $scale, $scale_z]. After each number, you can omit the subsequent ones. Alternatively, view=>['map'] represents the drawing as a map (e.g. for contour plots) and view=>[equal=>'xy'] forces equal length scales on the X and Y axes regardless of perspective, while view=>[equal=>'xyz'] sets equal length scales on all three axes. The pm3d option accepts several parameters to control the pm3d plot style, which is a palette-mapped 3d surface. They are not documented here in this version of the module but are explained in the gnuplot manual. hidden3d accepts a list of parameters to control how hidden surfaces are plotted (or not) in 3D. It accepts a boolean argument indicating whether to hide ""hidden"" surfaces and lines; or a list ref containing parameters that control how hidden surfaces and lines are handled. For details see the gnuplot manual. xyplane sets the location of that plane (which is drawn) relative to the rest of the plot in 3-space. It takes a single string: ""at"" or ""relative"", and a number. xyplane=>[at=>$z] places the XY plane at the stated Z value (in scientific units) on the plot. xyplane=>[relative=>$frac] places the XY plane $frac times the length of the scaled Z axis *below* the Z axis (i.e. 0 places it at the bottom of the plotted Z axis; and -1 places it at the top of the plotted Z axis). mapping takes a single string: ""cartesian"", ""spherical"", or ""cylindrical"". It determines the interpretation of data coordinates in 3-space. (Compare to the polar option in 2-D). POs for Contour plots - contour, cntrparam Contour plots are only implemented in 3D. To make a normal 2D contour plot, use 3-D mode, but set the view to ""map"" - which projects the 3-D plot onto its 2-D XY plane. (This is convoluted, for sure -- future versions of this module may have a cleaner way to do it). contour enables contour drawing on surfaces in 3D. It takes a single string, which should be ""base"", ""surface"", or ""both"". cntrparam manages how contours are generated and smoothed. It accepts a list ref with a collection of Gnuplot parameters that are issued one per line; refer to the Gnuplot manual for how to operate it. POs for Polar plots - polar, angles, mapping You can make 2-D polar plots by setting polar to a true value. The ordinate is then plotted as angle, and the abscissa is radius on the plot. The ordinate can be in either radians or degrees, depending on the angles parameter angles takes either ""degrees"" or ""radians"" (default is radians). mapping is used to set 3-D polar plots, either cylindrical or spherical (see the section on 3-D plotting, above). POs for Markup - label, arrow, object You specify plot markup in advance of the plot command, with plot options (or add it later with the replot method). The options give you access to a collection of (separately) numbered descriptions that are accumulated into the plot object. To add a markup object to the next plot, supply the appropriate options as a list ref or as a single string. To specify all markup objects at once, supply the appropriate options for all of them as a nested list-of-lists. To modify an object, you can specify it by number, either by appending the number to the plot option name (e.g. arrow3) or by supplying it as the first element of the option list for that object. To remove all objects of a given type, supply undef (e.g. arrow=>undef). For example, to place two labels, use the plot option:  label => [[""Upper left"",at=>""10,10""],[""lower right"",at=>""20,5""]]; To add a label to an existing plot object, if you don't care about what index number it gets, do this:  $w->options( label=>[""my new label"",at=>[10,20]] ); If you do care what index number it gets (or want to replace an existing label), do this:  $w->options( label=>[$n, ""my replacement label"", at=>""10,20""] ); where $w is a Gnuplot object and $n contains the label number you care about. label - add a text label to the plot. The label option allows adding small bits of text at arbitrary locations on the plot. Each label specifier list ref accepts the following suboptions, in order. All of them are optional -- if no options other than the index tag are given, then any existing label with that index is deleted. For examples, please refer to the Gnuplot 4.4 manual, p. 117. <tag> - optional index number (integer) <label text> - text to place on the plot. You may supply double-quotes inside the string, but it is not necessary in most cases (only if the string contains just an integer and you are not specifying a <tag>. at <position> - where to place the text (sci. coordinates) The <position> should be a string containing a gnuplot position specifier. At its simplest, the position is just two numbers separated by a comma, as in label2=>[""foo"",at=>""5,3"", to specify (X,Y) location on the plot in scientific coordinates. Each number can be preceded by a coordinate system specifier; see the Gnuplot 4.4 manual (page 20) for details. ( left | center | right ) - text placement rel. to position rotate [ by <degrees> ] - text rotation If ""rotate"" appears in the list alone, then the label is rotated 90 degrees CCW (bottom-to-top instead of left-to-right). The following ""by"" clause is optional. font ""<name>,<size>"" - font specifier The <name>,<size> must be double quoted in the string (this may be fixed in a future version), as in  C<< label3=>[""foo"",at=>""3,4"",font=>'""Helvetica,18""'] >>. noenhanced - turn off gnuplot enhanced text processing (if enabled) ( front | back ) - rendering order (last or first) textcolor <colorspec> (point <pointstyle> | nopoint ) - control whether the exact position is marked offset <offset> - offfset from position (in points). arrow - place an arrow or callout line on the plot Works similarly to the label option, but with an arrow instead of text. The arguments, all of which are optional but which must be given in the order listed, are: from <position> - start of arrow line The <position> should be a string containing a gnuplot position specifier. At its simplest, the position is just two numbers separated by a comma, as in label2=>[""foo"",at=>""5,3"", to specify (X,Y) location on the plot in scientific coordinates. Each number can be preceded by a coordinate system specifier; see the Gnuplot 4.4 manual (page 20) for details. ( to | rto ) <position> - end of arrow line These work like from. For absolute placement, use ""to"". For placement relative to the from position, use ""rto"". (arrowstyle | as) <arrow_style> This specifies that the arrow be drawn in a particular predeclared numerical style. If you give this parameter, you shoudl omit all the following ones. ( nohead | head | backhead | heads ) - specify arrowhead placement size <length>,<angle>,<backangle> - specify arrowhead geometry ( filled | empty | nofilled ) - specify arrowhead fill ( front | back ) - specify drawing order ( last | first ) linestyle <line_style> - specify a numeric linestyle linetype <line_type> - specify numeric line type linewidth <line_width> - multiplier on the width of the line object - place a shape on the graph objects are rectangles, ellipses, circles, or polygons that can be placed arbitrarily on the plotting plane. The arguments, all of which are optional but which must be given in the order listed, are: <object-type> <object-properties> - type name of the shape and its type-specific properties The <object-type> is one of four words: ""rectangle"", ""ellipse"", ""circle"", or ""polygon"". You can specify a rectangle with from=>$pos1, [r]to=>$pos2, with center=>$pos1, size=>""$w,$h"", or with at=>$pos1,size=>""$w,$h"". You can specify an ellipse with at=>$pos, size=>""$w,$h"" or center=>$pos size=>""$w,$h"", followed by angle=>$a. You can specify a circle with at=>$pos, size=>""$w,$h"" or center=>$pos size=>""$w,$h"", followed by size=>$radius >> and (optionally) arc=>""[$begin:$end]"". You can specify a polygon with from=>$pos1,to=>$pos2,to=>$pos3,...to=>$posn or with from=>$pos1,rto=>$diff1,rto=>$diff2,...rto=>$diffn. ( front | back | behind ) - draw the object last | first | really-first. fc <colorspec> - specify fill color fs <fillstyle> - specify fill style lw <width> - multiplier on line width POs for appearance tweaks - bars, boxwidth, isosamples, pointsize, style bars sets the width and behavior of the tick marks at the ends of error bars. It takes a list containing at most two elements, both of which are optional: A width specifier, which should be a numeric size multiplier times the usual width (which is about one character width in the default font size), or the word fullwidth to make the ticks the same width as their associated boxes in boxplots and histograms. the word ""front"" or ""back"" to indicate drawing order in plots that might contain filled rectangles (e.g. boxes, candlesticks, or histograms). If you pass in the undefined value you get no ticks on errorbars; if you pass in the empty list ref you get default ticks. boxwidth sets the width of drawn boxes in boxplots, candlesticks, and histograms. It takes a list containing at most two elements: a numeric width one of the words absolute or relative. Unless you set relative, the numeric width sets the width of boxes in X-axis scientific units (on log scales, this is measured at x=1 and the same width is used throughout the plot plane). If relative is included, the numeric width is taken to be a multiplier on the default width. isosamples sets isoline density for plotting functions as surfaces. You supply one or two numbers. The first is the number of iso-u lines and the second is the number of iso-v lines. If you only specify one, then the two are taken to be the same. From the gnuplot manual: ""An isoline is a curve parameterized by one of the surface parameters while the other surface parameter is fixed. Isolines provide a simple means to display a surface. By fixing the u parameter of surface s(u,v), the iso-u lines of the form c(v) = s(u0,v) are produced, and by fixing the v parameter, the iso-v lines of the form c(u)=s(u,v0) are produced"". pointsize accepts a single number and scales the size of points used in plots. style provides a great deal of customization for individual plot styles. It is not (yet) fully parsed by PDL::Graphics::Gnuplot; please refer to the Gnuplot manual for details (it is pp. 145ff in the Gnuplot 4.6.1 maual). style accepts a hash ref whose keys are plot styles (such as you would feed to the with curve option), and whose values are list refs containing keywords and other parameters to modify how each plot style should be displayed. POs for locale/internationalization - locale, decimalsign locale is used to control date stamp creation. See the gnuplot manual. decimalsign accepts a character to use in lieu of a ""."" for the decimalsign. (e.g. in European countries use decimalsign=>','). globalwith is used as a default plot style if no valid 'with' curve option is present for a given curve. If set to a nonzero value, timestamp causes a time stamp to be placed on the side of the plot, e.g. for keeping track of drafts. zero sets the approximation threshold for zero values within gnuplot. Its default is 1e-8. fontpath sets a font search path for gnuplot. It accepts a collection of file names as a list ref. POs for advanced Gnuplot tweaks: topcmds, extracmds, bottomcmds, binary, dump, tee Plotting is carried out by sending a collection of commands to an underlying gnuplot process. In general, the plot options cause ""set"" commands to be sent, configuring gnuplot to make the plot; these are followed by a ""plot"" or ""splot"" command and by any cleanup that is necessary to keep gnuplot in a known state. Provisions exist for sending commands directly to Gnuplot as part of a plot. You can send commands at the top of the configuration but just under the initial ""set terminal"" and ""set output"" commands (with the topcmds option), at the bottom of the configuration and just before the ""plot"" command (with the extracmds option), or after the plot command (with the bottomcmds option). Each of these plot options takes a list ref, each element of which should be one command line for gnuplot. Most plotting is done with binary data transfer to Gnuplot; however, due to some bugs in Gnuplot binary handling, certain types of plot data are sent in ASCII. In particular, time series and label data require transmission in ASCII (as of Gnuplot 4.4). You can force ASCII transmission of all but image data by explicitly setting the binary=>0 option. dump is used for debugging. If true, it writes out the gnuplot commands to STDOUT instead of writing to a gnuplot process. Useful to see what commands would be sent to gnuplot. This is a dry run. Note that if the 'binary' option is given (see below), then this dump will contain binary data. If this binary data should be suppressed from the dump, set dump = 'nobinary'>. tee is used for debugging. If true, writes out the gnuplot commands to STDERR in addition to writing to a gnuplot process. This is not a dry run: data is sent to gnuplot and to the log. Useful for debugging I/O issues. Note that if the 'binary' option is given (see below), then this log will contain binary data. If this binary data should be suppressed from the log, set tee = 'nobinary'>. CURVE OPTIONS The curve options describe details of specific curves within a plot. They are in a hash, whose keys are as follows: legend Specifies the legend label for this curve axes Lets you specify which X and/or Y axes to plot on. Gnuplot supports a main and alternate X and Y axis. You specify them as a packed string with the x and y axes indicated: for example, x1y1 to plot on the main axes, or x1y2 to plot using an alternate Y axis (normally gridded on the right side of the plot). with Specifies the plot style for this curve. The value is passed to gnuplot using its 'with' keyword, so valid values are whatever gnuplot supports. See above (""Plot styles supported"") for a list of supported curve styles. The following curve options in this list modify the plot style further. Not all of them are applicable to all plot styles -- for example, it makes no sense to specify a fill style for with=>lines. For historical reasons, you can supply the with modifier curve options as a single string in the ""with"" curve option. That usage is deprecated and will disappear in a future version of PDL::Graphics::Gnuplot. linetype (abbrev 'lt') This is a numeric selector from the default collection of line styles. It includes automagic selection of dash style, color, and width from the default set of linetypes for your current output terminal. linestyle (abbrev 'ls') This works exactly like linetype above, except that you can modify individual line styles by setting the style line <num> plot option. That is handy for a custom style you might use across several curves either a single plot or several plots. linewidth (abbrev 'lw') This is a numeric multiplier on the usual default line width in your current terminal. linecolor (abbrev 'lc') This is a color specifier for the color of the line. You can feed in a standard color name (they're listed in the package-global variable @PDL::Graphics::Gnuplot::colornames), a small integer to index the standard linetype colors, the word ""variable"" to indicate that the line color is a standard linetype color to be drawn from an additional column of data, [rgbcolor=><num>] to specify an RGB color as a 24-bit packed integer, [rgbcolor=>'variable'] to specify an additional column of data containing 24-bit packed integers with RGB color values, [palette=>'frac',<val>] to specify a single fractional position (scaled 0-1) in the current palette, or [palette=>'cb',<val>] to specify a single value in the scaled cbrange. There is no linecolor=>[palette=>variable] due to Gnuplot's non-orthogonal syntax. To draw line color from the palette, via an additional data column, see the separate ""palette"" curve option (below). textcolor (abbrev 'tc') For plot styles like labels that specify text, this sets the color of the text. It has the same format as linecolor (above). pointtype (abbrev 'pt') Selects a point glyph shape from the built-in list for your terminal, for plots that render points as small glyphs (like points and linespoints). pointsize (abbrev 'ps') Selects a fractional size for point glyphs, relative to the default size on your terminal, for plots that render points as small glyphs. fillstyle (abbrev 'fs') Specify the way that filled regions should be colored, in plots that have fillable areas (like boxes). Unlike linestyle above, fillstyle accepts a full specification rather than an index into a set of predefined styles. You can feed in: empty for no fill; solid for a solid fill; ['transparent','solid', <density>] for a transparent solid fill on terminals that support it; pattern for a cycling-per-curve pattern fill; ['pattern',<n>] to specify a particular fill pattern. Any of those fill style specifications can have a border specification appended to it. To specify a border, append 'border', lt=><type>, lc=><colorspec> to the list. (You can omit the lt or the lc). To specify no border, append <'noborder'>. nohidden3d If you are making a 3D plot and have used the plot option hidden3d to get hidden line removal, you can override that for a particular curve by setting the nohidden3d option to a true value. Only the single curve with nohidden3d set will have its hidden points rendered. nocontours If you are making a contour 3D plot, you can inhibit rendering of contours for a particular curve by setting nocontours to a true value. nosurface If you are making a surface 3D plot, you can inhibit rendering of the surface associated with a particular curve, by setting nosurface to a true value. palette Setting palette => 1 causes line color to be drawn from an additional column in the data tuple. This column is always the very last column in the tuple, in case of conflict (e.g. if you set both pointsize=>variable and palette=>1, then the palette column is the last column and the pointsize column is second-to-last). tuplesize Specifies how many values represent each data point. Normally you don't need to set this as individual with styles implicitly set a tuple size (which is automatically extended if you specify additional modifiers such as palette that require more data); this option lets you override PDL::Graphics::Gnuplot's parsing in case of irregularity. cdims Specifies the dimensions of of each column in this curve's tuple. It must be 0, 1, or 2. Normally you don't need to set this for most plots; the main use is to specify that a 2-D data PDL is to be interpreted as a collection of 1-D columns rather than a single 2-D grid (which would be the default in a 3-D plot). For example:     $w=gpwin();     $r2 = rvals(21,21)**2;     $w->plot3d( wi=>'lines', xvals($r2), yvals($r2), $r2 ); will produce a grid of values on a paraboloid. To instead plot a collection of lines using the threaded syntax, try     $w->plot3d( wi=>'lines', cd=>1, xvals($r2), yvals($r2), $r2 ); which will plot 21 separate curves in a threaded manner. RECIPES Most of these come directly from Gnuplot commands. See the Gnuplot docs for details. 2D plotting If we're plotting a piddle $y of y-values to be plotted sequentially (implicit domain), all you need is   gplot($y); If we also have a corresponding $x domain, we can plot $y vs. $x with   gplot($x, $y); Simple style control To change line thickness:   gplot(with => 'lines',linewidth=>4, $x, $y);   gplot(with => 'lines', lw=>4, $x, $y); To change point size and point type:   gplot(with => 'points',pointtype=>8, $x, $y);   gplot(with => 'points',pt=>8, $x, $y); Errorbars To plot errorbars that show $y +- 1, plotted with an implicit domain   gplot(with => 'yerrorbars', $y, $y->ones); Same with an explicit $x domain:   gplot(with => 'yerrorbars', $x, $y, $y->ones); Symmetric errorbars on both x and y. $x +- 1, $y +- 2:   gplot(with => 'xyerrorbars', $x, $y, $x->ones, 2*$y->ones); To plot asymmetric errorbars that show the range $y-1 to $y+2 (note that here you must specify the actual errorbar-end positions, NOT just their deviations from the center; this is how Gnuplot does it)   gplot(with => 'yerrorbars', $y, $y - $y->ones, $y + 2*$y->ones); More multi-value styles Plotting with variable-size circles (size given in plot units, requires Gnuplot >= 4.4)   gplot(with => 'circles', $x, $y, $radii); Plotting with an variably-sized arbitrary point type (size given in multiples of the ""default"" point size)   gplot(with => 'points', pointtype=>7, pointsize=>'variable',         $x, $y, $sizes); Color-coded points   gplot(with => 'points', palette=>1,         $x, $y, $colors); Variable-size AND color-coded circles. A Gnuplot (4.4.0) bug make it necessary to specify the color range here   gplot(cbmin => $mincolor, cbmax => $maxcolor,         with => 'circles', palette=>1,          $x, $y, $radii, $colors); 3D plotting General style control works identically for 3D plots as in 2D plots. To plot a set of 3d points, with a square aspect ratio (squareness requires Gnuplot >= 4.4):   splot(square => 1, $x, $y, $z); If $xy is a 2D piddle, we can plot it as a height map on an implicit domain   splot($xy); Complicated 3D plot with fancy styling:   my $pi    = 3.14159;   my $theta = zeros(200)->xlinvals(0, 6*$pi);   my $z     = zeros(200)->xlinvals(0, 5);    splot(title => 'double helix',          { with => 'linespoints',           pointsize=>'variable',            pointtype=>7,           palette=>1,           legend => 'spiral 1' },         { legend => 'spiral 2' },          # 2 sets of x, 2 sets of y, single z         PDL::cat( cos($theta), -cos($theta)),         PDL::cat( sin($theta), -sin($theta)),         $z,          # pointsize, color         0.5 + abs(cos($theta)), sin(2*$theta) ); 3D plots can be plotted as a heat map.   splot( extracmds => 'set view 0,0',          with => 'image',          $xy ); Hardcopies To send any plot to a file, instead of to the screen, one can simply do   gplot(hardcopy => 'output.pdf',         $x, $y); The hardcopy option is a shorthand for the terminal and output options. The output device is chosen from the file name suffix. If you want more (any) control over the output options (e.g. page size, font, etc.) then you can specify the output device using the output method or the constructor itself -- or the corresponding plot options in the non-object mode. For example, to generate a PDF of a particular size with a particular font size for the text, one can do   gplot(terminal => 'pdfcairo solid color font "",10"" size 11in,8.5in',         output   => 'output.pdf',         $x, $y); This command is equivalent to the hardcopy shorthand used previously, but the fonts and sizes can be changed. Using the object oriented mode, you could instead say:   $w = gpwin();   $w->plot( $x, $y );   $w->output( pdfcairo, solid=>1, color=>1,font=>',10',size=>[11,8.5,'in'] );   $w->replot();   $w->close(); Many hardcopy output terminals (such as pdf and svg) will not dump their plot to the file unless the file is explicitly closed with a change of output device or a call to reset, restart, or close. This is because those devices support multipage output and also require and end-of-file marker to close the file. Plotting examples A simple example    my $win = gpwin('x11');    $win->plot( sin(xvals(45)) * 3.14159/10 ); Here we just plot a simple function. The default plot style is a line. Line plots take a 2-tuple (X and Y values). Since we have supplied only one element, plot() understands it to be the Y value (abscissa) of the plot, and supplies value indices as X values -- so we get a plot of just over 2 cycles of the sine wave over an X range across X values from 0 to 44. A not-so-simple example    $win = gpwin('x11');    $pi = 3.14159     $win->plot( {with => line}, xvals(10)**2, xvals(10),                {with => circles}, 2 * xvals(50), 2 * sin(xvals(50) * $pi / 10), xvals(50)/20     ); This plots sqrt(x) in an interesting way, and overplots some circles of varying size. The line plot accepts a 2-tuple, and we supply both X and Y. The circles plot accepts a 3-tuple: X, Y, and R. A complicated example:    $pi    = 3.14159;    $theta = xvals(201) * 6 * $pi / 200;    $z     = xvals(201) * 5 / 200;     gplot( {trid => 1, title => 'double helix',cbr=>[0,1]},          {with => 'linespoints',           pointsize=>'variable',           pointtype=>2,           palette=>1,           legend => ['spiral 1','spiral 2'],           cdim=>1},          pdl( cos($theta), -cos($theta) ),       # x          pdl( sin($theta), -sin($theta) ),       # y          $z,                                     # z          (0.5 + abs(cos($theta))),               # pointsize          sin($theta/3),                          # color          { with=>'points',            pointsize=>'variable',            pointtype=>5,             palette=>0          },          zeroes(6),                         # x          zeroes(6),                         # y          xvals(6),                          # z          xvals(6)+1                         # point size    ); This is a 3d plot with variable size and color. There are 5 values in the tuple. The first 2 piddles have dimensions (N,2); all the other piddles have a single dimension. The ""cdim=>1"" specifies that each column of data should be one-dimensional. Thus the PDL threading generates 2 distinct curves, with varying values for x,y and identical values for everything else. To label the curves differently, 2 different sets of curve options are given. Omitting the ""cdim"" curve option would yield a 201x2 grid with the ""linespoints"" plotstyle, rather than two separate curves. In addition to the threaded pair of linespoints curves, there are six variable size points plotted as filled squares, as a secondary curve. Plot options are passed in in two places: as a leading hash ref, and as a trailing hash ref. Any other hash elements or hash refs must be curve options. Curves are delimited by non-data arguments. After the initial hash ref, curve options for the first curve (the threaded pair of spirals) are passed in as a second hash ref. The curve's data arguments are ended by the first non-data argument (the hash ref with the curve options for the second curve). FUNCTIONS gpwin  use PDL::Graphics::Gnuplot;  $w = gpwin( @options );  $w->plot( @plot_args ); gpwin is the PDL::Graphics::Gnuplot exported constructor. It is exported by default and is a synonym for ""new PDL::Graphics::Gnuplot(...)"". If given no arguments, it creates a plot object with the default terminal settings for your gnuplot. You can also give it the name of a Gnuplot terminal type (e.g. 'x11') and some terminal and output options (see ""output""). new     $w = new PDL::Graphics::Gnuplot;     $w->plot( @plot_args );     #     # Specify plot options alone     $w = new PDL::Graphics::Gnuplot( {%plot_options} );     #     # Specify device and device options (and optional default plot options)     $w = new PDL::Graphics::Gnuplot( device, %device_options, {%plot_options} );     $w->plot( @plot_args ); Creates a PDL::Graphics::Gnuplot persistent plot object, and connects it to gnuplot. For convenience, you can specify the output device and its options right here in the constructor. Because different gnuplot devices accept different options, you must specify a device if you want to specify any device configuration options (such as window size, output file, text mode, or default font). If you don't specify a device type, then the Gnuplot default device for your system gets used. You can set that with an environment variable (check the Gnuplot documentation). Gnuplot uses the word ""terminal"" for output devices; you can see a list of terminals supported by PDL::Graphics::Gnuplot by invoking PDL::Graphics::Gnuplot::terminfo() (for example in the perldl shell). For convenience, you can provide default plot options here. If the last argument to new() is a trailing hash ref, it is treated as plot options. After you have created an object, you can change its terminal/output device with the output method, which is useful for (e.g.) throwing up an interactive plot and then sending it to a hardcopy device. See output for a description of terminal options and how to format them. Normally, the object connects to the command ""gnuplot"" in your path, using the Alien::Gnuplot module. If you need to specify a binary other than this default, check the Alien::Gnuplot documentation.   my $plot = PDL::Graphics::Gnuplot->new({title => 'Object-oriented plot'});   $plot->plot( legend => 'curve', sequence(5) ); output     $window->output( $device );     $window->output( $device, %device_options );     $window->output( $device, %device_options, {plot_options} );     $window->output( %device_options, {plot_options} );     $window->output( %device_options ); Sets the output device and options for a Gnuplot object. If you omit the $device name, then you get the gnuplot default device (generally x11, wxt, or aqua, depending on platform). You can control the output device of a PDL::Graphics::Gnuplot object on the fly. That is useful, for example, to replot several versions of the same plot to different output devices (interactive and hardcopy). Gnuplot interprets terminal options differently per device. PDL::Graphics::Gnuplot attempts to interpret some of the more common ones in a common way. In particular: size Most drivers support a ""size"" option to specify the size of the output plotting surface. The format is [$width, $height, $unit]; the trailing unit string is optional but recommended, since the default unit of length changes from device to device. The unit string can be in, cm, mm, px, or pt. Pixels are taken to be 1 point in size (72 pixels per inch) and dimensions are computed accordingly. output This option actually sets the object's ""output"" option for most terminal devices; that changes the file to which the plot will be written. Some devices, notably X11 and Aqua, don't make proper use of ""output""; for those devices, specifying ""output"" in the object constructor actually sets the appropriate terminal option (e.g. ""window"" in the X11 terminal). This is described as a ""plot option"" in the Gnuplot manual, but it is treated as a setup variable and parsed with the setup/terminal options here in the constructor. enhanced This is a flag that indicates whether to enable Gnuplot's enhanced text processing (e.g. for superscripts and subscripts). Set it to a false value for plain text, to a true value for enhanced text (which includes LaTeX-like markup for super/sub scripts and fonts). For a brief description of the terminal options that any one device supports, you can run PDL::Graphics::Gnuplot::terminfo(). As with plot options, terminal options can be abbreviated to the shortest unique string -- so (e.g.) ""size"" can generally be abbreviated ""si"" and ""monochrome"" can be abbreviated ""mono"" or ""mo"". close   $w=gpwin();   $w->plot(xvals(5));   $w->close; Close gnuplot process (actually just a synonym for restart) Some of the gnuplot terminals (e.g. pdf) don't write out a file promptly. The close method closes the associated gnuplot subprocess, forcing the file to be written out. It is implemented as a simple restart operation. The object preserves the plot state, so replot and similar methods still work with the new subprocess. restart     $w->restart();     PDL::Graphics::Gnuplot::restart(); Restart the gnuplot backend for a plot object Occasionally the gnuplot backend can get into an unknown state. restart kills the gnuplot backend and starts a new one, preserving state in the object. (i.e. replot and similar functions work even with the new subprocess). Called with no arguments, restart applies to the global plot object. reset     $w->reset() Clear state from the gnuplot backend Clears all plot option state from the underlying object. All plot options except ""terminal"", ""termoptions"", ""output"", and ""multiplot"" are cleared. This is similar to the ""reset"" command supported by gnuplot itself, and in fact it also causes a ""reset"" to be sent to gnuplot. options   $w = new PDL::Graphics::Gnuplot();   $w->options( globalwith=>'lines' );   print %{$w->options()}; Set/get persistent plot options for a plot object The options method parses plot options into a gnuplot object on a cumulative basis, and returns the resultant options hash. If called as a sub rather than a method, options() changes the global gnuplot object. gplot Plot method exported by default (synonym for ""PDL::Graphics::Gnuplot::plot"") plot This is the main plotting routine in PDL::Graphics::Gnuplot. Each plot() call creates a new plot from whole cloth, either creating or overwriting the output for that device. If you want to add features to an existing plot, use replot. plot() understands the PDL bad value mechanism. Bad values are omitted from the plot.  $w=gpwin();  $w->plot({temp_plot_options},                 # optional       curve_options, data, data, ... ,      # curve_options are optional for the first plot       curve_options, data, data, ... ,        {temp_plot_options}); Most of the arguments are optional. All of the extensive array of gnuplot plot styles are supported, including images and 3-D plots.  use PDL::Graphics::Gnuplot qw(plot);  my $x = sequence(101) - 50;  plot($x**2); See main POD for PDL::Graphics::Gnuplot for details. You can pass plot options into plot as either a leading or trailing hash ref, or both. If you pass both, the trailing hash ref is parsed last and overrides the leading hash. For debugging and curiosity purposes, the last plot command issued to gnuplot is maintained in a package global: $PDL::Graphics::Gnuplot::last_plotcmd, and also in each object as the {last_plotcmd} field. replot Replot the last plot (possibly with new arguments). replot is similar to gnuplot's ""replot"" command - it allows you to regenerate the last plot made with this object. You can change the plot by adding new elements to it, modifying options, or even (with the ""device"" method) changing the output device. replot takes the same arguments as plot. If you give no arguments at all (or only a plot object) then the plot is simply redrawn. If you give plot arguments, they are added to the new plot exactly as if you'd included them in the original plot element list, and maintained for subsequent replots. (Compare to 'markup'). markup Add ephemeral markup to the last plot. markup works exactly the same as replot, except that any new arguments are not added to the replot list - so you can add temporary markup to a plot and regenerate the plot later without it. plot3d Generate 3D plots. Synonym for plot(trid => 1, ...) splot Generate 3D plots. Synonym for plot(trid => 1, ...) lines Generates plots with lines, by default. Shorthand for plot(globalwith => 'lines', ...) points Generates plots with points, by default. Shorthand for plot(globalwith => 'points', ...) image Displays an image (either greyscale or RGB). Shorthand for plot(globalwith => 'image', ...) imag Synonym for ""image"", for people who grew up with PDL::Graphics::PGPLOT and can't remember the closing 'e' fits Displays a FITS image. Synonym for plot(globalwith => 'fits', ...). multiplot  $a = (xvals(101)/100) * 6 * 3.14159/180;  $b = sin($a);   $w->multiplot(layout=>[2,2,""columnsfirst""]);  $w->plot({title=>""points""},with=>""points"",$a,$b);  $w->plot({title=>""lines""}, with=>""lines"", $a,$b);  $w->plot({title=>""image""}, with=>""image"", $a->(*1) * $b );  $w->end_multi(); Plot multiple plots into a single page of output. The multiplot method enables multiplot mode in gnuplot, which permits multiple plots on a single pane. Plots can be lain out in a grid, or can be lain out freeform using the size and origin plot options for each of the individual plots. It is not possible to change the terminal or output device when in multiplot mode; if you try to do that, by setting one of those plot options, PDL::Graphics::Gnuplot will throw an error. The options hash will accept: layout - define a regular grid of plots to multiplot layout should be followed by an ARRAY ref that contains at least number of columns (""NX"") followed by number of rows (""NY). After that, you may include any of the ""rowsfirst"", ""columnsfirst"", ""downwards"", or ""upwards"" keywords to specify traversal order through the grid. Only the first letter is examined, so (e.g.) ""down"" or even ""dog"" works the same as ""downwards"". title - define a title for the entire page title should be followed by a single scalar containing the title string. scale - make gridded plots larger or smaller than their allocated space scale takes either a scalar or a list ref containing one or two values. If only one value is supplied, it is a general scale factor of each plot in the grid. If two values are supplied, the first is an X stretch factor for each plot in the grid, and the second is a Y stretch factor for each plot in the grid. offset - offset each plot from its grid origin offset takes a list ref containing two values, that control placement of each plot within the grid. end_multi  $w=gpwin();  $w->multiplot(layout=>[2,1]);  $w->plot({title=>""points},with=>'points',$a,$b);  $w->plot({title=>""lines"",with=>""lines"",$a,$b);  $w->end_multi(); Ends a multiplot block (i.e. a block of plots that are meant to render to a single page). read_mouse   ($x,$y,$char,$modstring) = $w->read_mouse($message);   $hash = $w->read_mouse($message); Get a mouse click or keystroke from the active interactive plot window. For interactive devices (e.g. x11, xwt, aqua), get_click lets you accept a keystroke or mouse button input from the gnuplot window. In list context, it returns four arguments containing the reported X, Y, keystroke character, and modifiers packed in a string. In scalar context, it returns a hash ref containing those things. read_mouse blocks execution for input, but responds gracefully to interrupts. read_polygon   $points = $w->read_polygon(%opt) Read in a polygon by accepting mouse clicks. The polygon is returned as a 2xN PDL of ($x,$y) values in scientific units. Acceptable options are: message - what to print before collecting points There are some printf-style escapes for the prompt: * %c - expands to ""an open"" or ""a closed"" * %n - number of points currently in the polygon * %N - number of points expected for the polygon * %k - list of all keys accepted * %% - % prompt - what to print to prompt the user for the next point prompt uses the same escapes as message. n_points - number of points to accept (or 0 for indefinite) With 0 value, points are accepted until the user presses 'q' or 'ESC' on the keyboard with focus on the graph. With other value, points are accepted until that happens *or* until the number of points is at least n_points. actions - hash of callback code refs indexed by character for action You can optionally call a callback routine when any particular character is pressed. The actions table is a hash ref whose keys are characters and whose values are either code refs (to be called on the associated keypress) or array refs containing a short description string followed by a code ref. Non-printable characters (e.g. ESC, BS, DEL) are accessed via a hash followed by a three digit decimal ASCII code -- e.g. ""#127"" for DEL. Button events are indexed with the strings ""BUTTON1"", ""BUTTON2"", and ""BUTTON3"", and modifications must be entered as well for shift, control, and The code ref receives the arguments ($obj, $c, $poly,$x,$y,$mods), where: $obj is the plot object $c is the character (or ""BUTTONn"" string), $poly is a scalar ref; $$poly is the current polygon before the action, $x and $y are the current scientific coordinates, and $mods is the modifier string. You can't override the 'q' or '#027' (ESC) callbacks. You *can* override the BUTTON1 and DEL callbacks, potentially preventing the user from entering points at all! You should do that with caution. closed - (default false): generate a closed polygon This works by duplicating the initial point at the end of the point list. markup - (default 'linespoints'): style to use to render the polygon on the fly If this is set to a true value, it should be a valid 'with' specifier (curve option). The routine will call markup after each click. terminfo     use PDL::Graphics::Gnuplot qw/terminfo/     terminfo()     terminfo 'aqua'      $w = gpwin();     $w->terminfo(); Print out information about gnuplot terminals and their custom option syntax. The ""terminfo"" routine is a reference tool to describe the Gnuplot terminal types and the options they accept. It's mainly useful in interactive sessions. It outputs information directly to the terminal. COMPATIBILITY Everything should work on all platforms that support Gnuplot and Perl. Currently, MacOS, Fedora and Debian Linux, Cygwin, and Microsoft Windows (under both Active State Strawberry Perl) have been tested to work, although the interprocess control link is not as reliable under Microsoft Windows as under POSIX systems. Please report successes or failures on other platforms to the authors. A transcript of a failed run with {tee => 1} would be most helpful. REPOSITORY https://github.com/drzowie/PDL-Graphics-Gnuplot AUTHOR Craig DeForest, <craig@deforest.org> and Dima Kogan, <dima@secretsauce.net> STILL TO DO some plot and curve options need better parsing: - Hash values should be accepted (and parsed properly) for all plot options for which they work. Currently many of the more complicated plot options accept array refs only. Hash ref parsing is needed for regularity. - labels need attention (plot option labels) They need to be handled as hashes, not just as array refs. Also, they don't seem to be working with timestamps. Further, deeply nested options (e.g. ""at"" for labels) need attention. - new plot styles The ""boxplot"" plot style (new to gnuplot 4.6?) requires a different using syntax and will require some hacking to support. LICENSE AND COPYRIGHT Copyright 2011-2013 Craig DeForest and Dima Kogan This program is free software; you can redistribute it and/or modify it under the terms of either: the GNU General Public License as published by the Free Software Foundation; or the Perl Artistic License included with the Perl language. See http://dev.perl.org/licenses/ for more information. × Module Install Instructions To install PDL::Graphics::Gnuplot, simply copy and paste either of the commands in to your terminal cpanm                      cpanm PDL::Graphics::Gnuplot CPAN shell                      perl -MCPAN -e shell                     install PDL::Graphics::Gnuplot For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Science/Numerics"	"PDL::IO::*"	"https://metacpan.org/search?q=PDL%3A%3AIO&size=20"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Search for ""PDL::IO"" - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors 36 results (0.165 seconds) Something missing? Find out why PDL::IO - An overview of the modules in the PDL::IO namespace. 26 ++ 26 ++ PDL contains many modules for displaying, loading, and saving data. * Perlish or Text-Based A few IO modules provide Perl-inspired capabilities. These are PDL::IO::Dumper and PDL::IO::Storable. PDL::IO::Misc provides simpler routines for dealing with... CHM/PDL-2.016   5 (2 reviews) - 30 May 2016 14:37:54 GMT - Search in distribution PDL::IO::Pnm - pnm format I/O for PDL PDL::IO::GD - Interface to the GD image library. PDL::IO::Pic - image I/O for PDL 26 more results from PDL » PDL::IO::DBI - Create PDL from database (optimized for speed and large data) 3 ++ 3 ++ For creating a piddle from database data one can use the following simple approach: use PDL; use DBI; my $dbh = DBI->connect($dsn); my $pdl = pdl($dbh->selectall_arrayref($sql_query)); However this approach does not scale well for large data (e.g. SQ... KMX/PDL-IO-DBI-0.010 - 15 May 2016 09:39:01 GMT - Search in distribution PDL::IO::HDF5 - PDL Interface to the HDF5 Data Format. ++ ++ This package provides an object-oriented interface for PDLs to the HDF5 data-format. Information on the HDF5 Format can be found at the HDF Group's web site at http://www.hdfgroup.org . LIMITATIONS Currently this interface only provides a subset of t... CHM/PDL-IO-HDF5-0.73 - 08 Jun 2015 15:26:29 GMT - Search in distribution PDL::IO::HDF5::Group - PDL::IO::HDF5 Helper Object representing HDF5 groups. PDL::IO::HDF5::Dataset - PDL::IO::HDF5 Helper Object representing HDF5 datasets. PDL::IO::HDF5::tkview - View HDF5 files using perl/tk and PDL::IO::HDF5 modules 1 more result from PDL-IO-HDF5 » PDL::IO::Grib - Grib file utilities for perl ++ ++ Grib.pm allows the user to read files in the grib FORM FM 92-IX Ext. GRIB Edition 1 - it may not read all possible grib format combinations. The Grib format has 4 sections (PDS, GDS, BMS, BDS), two of which (GDS, BMS) are optional. Each field of a se... JEDWARDS/PDL-IO-Grib-2.0 - 30 Aug 2000 17:14:43 GMT - Search in distribution PDL::IO::Grib::Field - Field tools for Grib files Grib/Gribtables.pm GribView.pl - script to view Grib Record Headers PDL::IO::CSV - Load/save PDL from/to CSV file (optimized for speed and large data) 4 ++ 4 ++ The traditional way of creating PDL piddle from CSV data is via rcols function. my $pdl = rcols(""data.csv"", [1..4], { DEFTYPE=>double, COLSEP=>"","" }); This module provides alternative implementation based on Text::CSV_XS which should be significantly... KMX/PDL-IO-CSV-0.007 - 16 Oct 2015 11:38:30 GMT - Search in distribution PDL::IO::Nifti - Module to access imaging data using Nifti-1 standard 2 ++ 2 ++ Provides methods to read and write Nifti files, read, write and manipulate the header based on PDL. my $nii=PDL::IO::Nifti->new($pdl); $nii->write_nii($file); is all you need to do to save your data.... FANTASMA/PDL-IO-Nifti-0.73 - 02 Apr 2014 08:56:07 GMT - Search in distribution PDL::IO::Image - Load/save bitmap from/to PDL (via FreeImage library) 2 ++ 2 ++ PDL::IO::Image implements I/O for a number of popular image formats. It is based on ""FreeImage library"" <http://freeimage.sourceforge.net/> however there is no need to install FreeImage library on your system because PDL::IO::Image uses Alien::FreeIm... KMX/PDL-IO-Image-0.004 - 15 Dec 2014 13:56:04 GMT - Search in distribution PDL::IO::Sereal - Load/save complete PDL content serialized via Sereal ++ ++ Loading and saving PDL piddle serialized via Sereal (by default with ZLIB compression). Saved files should be portable across different architectures and PDL versions (there might be some troubles with piddles of 'indx' type which are not portable be... KMX/PDL-IO-Sereal-0.002 - 10 Sep 2015 21:47:22 GMT - Search in distribution PDL::CCS::IO::PETSc - PETSc-compatible I/O for PDL::CCS::Nd 2 ++ 2 ++ MOOCOW/PDL-CCS-1.23.3 - 06 Jun 2016 12:50:00 GMT - Search in distribution PDL::CCS::IO::FITS - PDL::IO::FITS wrappers for PDL::CCS::Nd PDL::CCS::IO::LDAC - LDA-C format text I/O for PDL::CCS::Nd PDL::CCS::IO::Common - Common pseudo-private routines for PDL::CCS::Nd I/O 3 more results from PDL-CCS » PDL::IO::BareStore - Simple PDL extension for reading 2 dimensional ""Big Data"" ++ ++ Written for the 2-Dimensional ""Big data"" set reading. As I got ""Out of Memory"" for loading a large data into piddle with PDL::IO::FastRaw, and still cannot figure out how to use PDL::IO::FlexRaw; This module provide a simple wrapper for reading large... ROOTKWOK/PDL-IO-BareStore-0.01 - 13 Mar 2015 08:19:17 GMT - Search in distribution PDLA::IO - An overview of the modules in the PDLA::IO namespace. ++ ++ PDLA contains many modules for displaying, loading, and saving data. * Perlish or Text-Based A few IO modules provide Perl-inspired capabilities. These are PDLA::IO::Dumper and PDLA::IO::Storable. PDLA::IO::Misc provides simpler routines for dealing ... ETJ/PDLA-2.013003 - 29 Aug 2015 21:31:45 GMT - Search in distribution PDLA - the Perl Data Language PDLA::API - making piddles from Perl and C/XS code PDLA::PP - Generate PDLA routines from concise descriptions 12 more results from PDLA » PDLA::IO::Misc - misc IO routines for PDLA ++ ++ Some basic I/O functionality: FITS, tables, byte-swapping... ETJ/PDLA-IO-Misc-2.013006 - 01 Sep 2015 01:41:03 GMT - Search in distribution MCE - Many-Core Engine for Perl providing parallel processing capabilities 44 ++ 44 ++ MCE spawns a pool of workers and therefore does not fork a new process per each element of data. Instead, MCE follows a bank queuing model. Imagine the line being the data and bank-tellers the parallel workers. MCE enhances that model by adding the a... MARIOROY/MCE-1.803   5 (3 reviews) - 11 Jul 2016 05:10:37 GMT - Search in distribution MCE::Core - Documentation describing the core MCE API Gimp - Write GIMP extensions/plug-ins/load- and save-handlers in Perl 3 ++ 3 ++ Gimp-Perl is a module for writing plug-ins, extensions, standalone scripts, and file-handlers for the GNU Image Manipulation Program (GIMP). It can be used to automate repetitive tasks, achieve a precision hard to get through manual use of GIMP, inte... ETJ/Gimp-2.32   5 (1 review) - 08 May 2016 14:43:08 GMT - Search in distribution PDLA::API - making piddles from Perl and C/XS code ++ ++ A simple cookbook how to create piddles manually. It covers both the Perl and the C/XS level. Additionally, it describes the PDLA core routines that can be accessed from other modules. These routines basically define the PDLA API. If you need to acce... ETJ/PDLA-Core-2.013006 - 30 Aug 2015 14:37:59 GMT - Search in distribution PDLA::PP - Generate PDLA routines from concise descriptions PDLA::FAQ - Frequently asked questions about PDLA PDLA::Core - fundamental PDLA functionality and vectorization/threading 6 more results from PDLA-Core » Imager - Perl extension for Generating 24 bit Images 53 ++ 53 ++ Imager is a module for creating and altering images. It can read and write various image formats, draw primitive shapes like lines,and polygons, blend multiple images together in various ways, scale, crop, render text and more. Overview of documentat... TONYC/Imager-1.005   5 (12 reviews) - 16 Apr 2016 00:01:33 GMT - Search in distribution PDLA::IO::GD - Interface to the GD image library. ++ ++ This is the ""General Interface"" for the PDLA::IO::GD library, and is actually several years old at this point (read: stable). If you're feeling frisky, try the new OO interface described below. The general version just provides several image IO utili... ETJ/PDLA-IO-GD-2.013006 - 01 Sep 2015 02:14:40 GMT - Search in distribution Chart::XMGR - object for displaying data via XMGR ++ ++ Provides a perl/PDL interface to the XMGR plotting package. Can be used to plot PDLs or Perl arrays. A simple function interface is provided that is based on the more complete object-oriented interface. The interface can be implemented using either a... TJENNESS/Chart-XMGR-0.95 - 20 Jan 1999 00:00:31 GMT - Search in distribution MCE::Shared - MCE extension for sharing data supporting threads and processes 5 ++ 5 ++ This module provides data sharing capabilities for MCE supporting threads and processes. MCE::Hobo provides threads-like parallelization for running code asynchronously. ""MCE::Shared"" enables extra functionality on systems with ""IO::FDPass"" installed... MARIOROY/MCE-Shared-1.803 - 11 Jul 2016 05:14:03 GMT - Search in distribution Test::Proto - OO test script golf sugar 1 ++ 1 ++ PERRETTDL/Test-Proto-0.027 - 25 Dec 2013 22:00:03 GMT - Search in distribution « 1 2 » Results per page: 10 20 50 100 200 500   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Science/Numerics"	"PDL::LinearAlgebra"	"https://metacpan.org/pod/PDL::LinearAlgebra"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PDL::LinearAlgebra - Linear Algebra utils for PDL - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Chris Marshall  /  0.12 (CHM on 2015-06-08) 0.06 (ELLIPSE on 2007-10-08) 0.11 (CHM on 2015-06-08) 0.10 (CHM on 2015-06-08) 0.09 (CHM on 2015-06-07) 0.08_03 DEV (CHM on 2014-12-16) 0.08_02 DEV (CHM on 2014-05-29) 0.08_01 DEV (CHM on 2014-03-02) 0.08 (CHM on 2013-12-03) 0.07_01 DEV (CHM on 2013-11-30) 0.07 (CHM on 2013-11-27) 0.06_02 DEV (CHM on 2013-11-27) 0.06_01 DEV (CHM on 2013-11-17) 0.05 (ELLIPSE on 2007-08-17) 0.04 (ELLIPSE on 2007-08-16) 0.03 (ELLIPSE on 2005-09-11) 0.02 (ELLIPSE on 2005-08-24) 0.01 (ELLIPSE on 2005-08-16) PDL-LinearAlgebra-0.12 3 ++ 3 ++  / PDL::LinearAlgebra 08 Jun 2015 14:47:37 GMT Module version: 0.12 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues (3) Testers (62 / 31 / 0) Kwalitee License: artistic_2 Activity 24 month Tools MOBI | EPUB Download (164.18Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.06 (ELLIPSE on 2007-10-08) 0.11 (CHM on 2015-06-08) 0.10 (CHM on 2015-06-08) 0.09 (CHM on 2015-06-07) 0.08_03 DEV (CHM on 2014-12-16) 0.08_02 DEV (CHM on 2014-05-29) 0.08_01 DEV (CHM on 2014-03-02) 0.08 (CHM on 2013-12-03) 0.07_01 DEV (CHM on 2013-11-30) 0.07 (CHM on 2013-11-27) 0.06_02 DEV (CHM on 2013-11-27) 0.06_01 DEV (CHM on 2013-11-17) 0.05 (ELLIPSE on 2007-08-17) 0.04 (ELLIPSE on 2007-08-16) 0.03 (ELLIPSE on 2005-09-11) 0.02 (ELLIPSE on 2005-08-24) 0.01 (ELLIPSE on 2005-08-16) Diff with version 0.06 (ELLIPSE on 2007-10-08) 0.11 (CHM on 2015-06-08) 0.10 (CHM on 2015-06-08) 0.09 (CHM on 2015-06-07) 0.08_03 DEV (CHM on 2014-12-16) 0.08_02 DEV (CHM on 2014-05-29) 0.08_01 DEV (CHM on 2014-03-02) 0.08 (CHM on 2013-12-03) 0.07_01 DEV (CHM on 2013-11-30) 0.07 (CHM on 2013-11-27) 0.06_02 DEV (CHM on 2013-11-27) 0.06_01 DEV (CHM on 2013-11-17) 0.05 (ELLIPSE on 2007-08-17) 0.04 (ELLIPSE on 2007-08-16) 0.03 (ELLIPSE on 2005-09-11) 0.02 (ELLIPSE on 2005-08-24) 0.01 (ELLIPSE on 2005-08-16) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 2 PAUSE users 1 non-PAUSE user. CHM Chris Marshall Dependencies constant PDL and possibly others CPAN Testers List Reverse dependencies Dependency graph × PDL-LinearAlgebra-0.12 NAME SYNOPSIS DESCRIPTION FUNCTIONS setlaerror getlaerror t issym diag tritosym positivise mcrossprod mrank mnorm mdet mposdet mcond mrcond morth mnull minv mtriinv msyminv mposinv mpinv mlu mchol mhessen mschur mschurx mgschur mgschurx mqr mrq mql mlq msolve msolvex mtrisolve msymsolve msymsolvex mpossolve mpossolvex mlls mllsy mllss mglm mlse meigen meigenx mgeigen mgeigenx msymeigen msymeigenx msymgeigen msymgeigenx mdsvd msvd mgsvd AUTHOR NAME PDL::LinearAlgebra - Linear Algebra utils for PDL SYNOPSIS  use PDL::LinearAlgebra;   $a = random (100,100);  ($U, $s, $V) = mdsvd($a); DESCRIPTION This module provides a convenient interface to PDL::LinearAlgebra::Real and PDL::LinearAlgebra::Complex. Its primary purpose is educational. You have to know that routines defined here are not optimized, particularly in term of memory. Since Blas and Lapack use a column major ordering scheme some routines here need to transpose matrices before calling fortran routines and transpose back (see the documentation of each routine). If you need optimized code use directly PDL::LinearAlgebra::Real and PDL::LinearAlgebra::Complex. It's planned to ""port"" this module to PDL::Matrix such that transpositions will not be necessary, the major problem is that two new modules need to be created PDL::Matrix::Real and PDL::Matrix::Complex. FUNCTIONS setlaerror Sets action type when an error is encountered, returns previous type. Available values are NO, WARN and BARF (predefined constants). If, for example, in computation of the inverse, singularity is detected, the routine can silently return values from computation (see manuals), warn about singularity or barf. BARF is the default value.  # h : x -> g(f(x))   $a = sequence(5,5);  $err = setlaerror(NO);  ($b, $info)= f($a);  setlaerror($err);  $info ? barf ""can't compute h"" : return g($b); getlaerror Gets action type when an error is encountered.         0 => NO,         1 => WARN,         2 => BARF t  PDL = t(PDL, SCALAR(conj))  conj : Conjugate Transpose = 1 | Transpose = 0, default = 1; Convenient function for transposing real or complex 2D array(s). For PDL::Complex, if conj is true returns conjugate transposed array(s) and doesn't support dataflow. Supports threading. issym  PDL = issym(PDL, SCALAR|PDL(tol),SCALAR(hermitian))  tol : tolerance value, default: 1e-8 for double else 1e-5   hermitian : Hermitian = 1 | Symmetric = 0, default = 1; Checks symmetricity/Hermitianicity of matrix. Supports threading. diag Returns i-th diagonal if matrix in entry or matrix with i-th diagonal with entry. I-th diagonal returned flows data back&forth. Can be used as lvalue subs if your perl supports it. Supports threading.  PDL = diag(PDL, SCALAR(i), SCALAR(vector)))  i      : i-th diagonal, default = 0  vector : create diagonal matrices by threading over row vectors, default = 0   my $a = random(5,5);  my $diag  = diag($a,2);  # If your perl support lvaluable subroutines.  $a->diag(-2) .= pdl(1,2,3);  # Construct a (5,5,5) PDL (5 matrices) with  # diagonals from row vectors of $a  $a->diag(0,1) tritosym Returns symmetric or Hermitian matrix from lower or upper triangular matrix. Supports inplace and threading. Uses tricpy or ctricpy from Lapack.  PDL = tritosym(PDL, SCALAR(uplo), SCALAR(conj))  uplo : UPPER = 0 | LOWER = 1, default = 0  conj : Hermitian = 1 | Symmetric = 0, default = 1;  # Assume $a is symmetric triangular  my $a = random(10,10);  my $b = tritosym($a); positivise Returns entry pdl with changed sign by row so that average of positive sign > 0. In other words threads among dimension 1 and row = -row if sum(sign(row)) < 0. Works inplace.  my $a = random(10,10);  $a -= 0.5;  $a->xchg(0,1)->inplace->positivise; mcrossprod Computes the cross-product of two matrix: A' x B. If only one matrix is given, takes B to be the same as A. Supports threading. Uses crossprod or ccrossprod.  PDL = mcrossprod(PDL(A), (PDL(B))  my $a = random(10,10);  my $crossproduct = mcrossprod($a); mrank Computes the rank of a matrix, using a singular value decomposition. from Lapack.  SCALAR = mrank(PDL, SCALAR(TOL))  TOL:   tolerance value, default : mnorm(dims(PDL),'inf') * mnorm(PDL) * EPS  my $a = random(10,10);  my $b = mrank($a, 1e-5); mnorm Computes norm of real or complex matrix Supports threading.  PDL(norm) = mnorm(PDL, SCALAR(ord));  ord :          0|'inf' : Infinity norm         1|'one' : One norm         2|'two' : norm 2 (default)         3|'fro' : frobenius norm  my $a = random(10,10);  my $norm = mnorm($a); mdet Computes determinant of a general square matrix using LU factorization. Supports threading. Uses getrf or cgetrf from Lapack.  PDL(determinant) = mdet(PDL);  my $a = random(10,10);  my $det = mdet($a); mposdet Compute determinant of a symmetric or Hermitian positive definite square matrix using Cholesky factorization. Supports threading. Uses potrf or cpotrf from Lapack.  (PDL, PDL) = mposdet(PDL, SCALAR)  SCALAR : UPPER = 0 | LOWER = 1, default = 0  my $a = random(10,10);  my $det = mposdet($a); mcond Computes the condition number (two-norm) of a general matrix. The condition number in two-n is defined:         norm (a) * norm (inv (a)). Uses a singular value decomposition. Supports threading.  PDL = mcond(PDL)  my $a = random(10,10);  my $cond = mcond($a); mrcond Estimates the reciprocal condition number of a general square matrix using LU factorization in either the 1-norm or the infinity-norm. The reciprocal condition number is defined:         1/(norm (a) * norm (inv (a))) Supports threading. Works on transposed array(s)  PDL = mrcond(PDL, SCALAR(ord))  ord :          0 : Infinity norm (default)         1 : One norm  my $a = random(10,10);  my $rcond = mrcond($a,1); morth Returns an orthonormal basis of the range space of matrix A.  PDL = morth(PDL(A), SCALAR(tol))  tol : tolerance for determining rank, default: 1e-8 for double else 1e-5  my $a = sequence(10,10);  my $ortho = morth($a, 1e-8); mnull Returns an orthonormal basis of the null space of matrix A. Works on transposed array.  PDL = mnull(PDL(A), SCALAR(tol))  tol : tolerance for determining rank, default: 1e-8 for double else 1e-5  my $a = sequence(10,10);  my $null = mnull($a, 1e-8); minv Computes inverse of a general square matrix using LU factorization. Supports inplace and threading. Uses getrf and getri or cgetrf and cgetri from Lapack and returns inverse, info in array context.  PDL(inv)  = minv(PDL)  my $a = random(10,10);  my $inv = minv($a); mtriinv Computes inverse of a triangular matrix. Supports inplace and threading. Uses trtri or ctrtri from Lapack. Returns inverse, info in array context.  (PDL, PDL(info))) = mtriinv(PDL, SCALAR(uplo), SCALAR|PDL(diag))  uplo : UPPER = 0 | LOWER = 1, default = 0  diag : UNITARY DIAGONAL = 1, default = 0  # Assume $a is upper triangular  my $a = random(10,10);  my $inv = mtriinv($a); msyminv Computes inverse of a symmetric square matrix using the Bunch-Kaufman diagonal pivoting method. Supports inplace and threading. Uses sytrf and sytri or csytrf and csytri from Lapack and returns inverse, info in array context.  (PDL, (PDL(info))) = msyminv(PDL, SCALAR|PDL(uplo))  uplo : UPPER = 0 | LOWER = 1, default = 0  # Assume $a is symmetric  my $a = random(10,10);  my $inv = msyminv($a); mposinv Computes inverse of a symmetric positive definite square matrix using Cholesky factorization. Supports inplace and threading. Uses potrf and potri or cpotrf and cpotri from Lapack and returns inverse, info in array context.  (PDL, (PDL(info))) = mposinv(PDL, SCALAR|PDL(uplo))  uplo : UPPER = 0 | LOWER = 1, default = 0  # Assume $a is symmetric positive definite  my $a = random(10,10);  $a = $a->crossprod($a);  my $inv = mposinv($a); mpinv Computes pseudo-inverse (Moore-Penrose) of a general matrix. Works on transposed array.  PDL(pseudo-inv)  = mpinv(PDL, SCALAR(tol))  TOL:   tolerance value, default : mnorm(dims(PDL),'inf') * mnorm(PDL) * EPS  my $a = random(5,10);  my $inv = mpinv($a); mlu Computes LU factorization. Uses getrf or cgetrf from Lapack and returns L, U, pivot and info. Works on transposed array.  (PDL(l), PDL(u), PDL(pivot), PDL(info)) = mlu(PDL)  my $a = random(10,10);  ($l, $u, $pivot, $info) = mlu($a); mchol Computes Cholesky decomposition of a symmetric matrix also knows as symmetric square root. If inplace flag is set, overwrite the leading upper or lower triangular part of A else returns triangular matrix. Returns cholesky, info in array context. Supports threading. Uses potrf or cpotrf from Lapack.  PDL(Cholesky) = mchol(PDL, SCALAR)  SCALAR : UPPER = 0 | LOWER = 1, default = 0  my $a = random(10,10);  $a = crossprod($a, $a);  my $u  = mchol($a); mhessen Reduces a square matrix to Hessenberg form H and orthogonal matrix Q. It reduces a general matrix A to upper Hessenberg form H by an orthogonal similarity transformation:         Q' x A x Q = H or         A = Q x H x Q' Uses gehrd and orghr or cgehrd and cunghr from Lapack and returns H in scalar context else H and Q. Works on transposed array.  (PDL(h), (PDL(q))) = mhessen(PDL)  my $a = random(10,10);  ($h, $q) = mhessen($a); mschur Computes Schur form, works inplace.         A = Z x T x Z' Supports threading for unordered eigenvalues. Uses gees or cgees from Lapack and returns schur(T) in scalar context. Works on tranposed array(s).  ( PDL(schur), (PDL(eigenvalues), (PDL(left schur vectors), PDL(right schur vectors), $sdim), $info) ) = mschur(PDL(A), SCALAR(schur vector),SCALAR(left eigenvector), SCALAR(right eigenvector),SCALAR(select_func), SCALAR(backtransform), SCALAR(norm))  schur vector        : Schur vectors returned, none = 0 | all = 1 | selected = 2, default = 0  left eigenvector    : Left eigenvectors returned, none = 0 | all = 1 | selected = 2, default = 0  right eigenvector   : Right eigenvectors returned, none = 0 | all = 1 | selected = 2, default = 0  select_func         : Select_func is used to select eigenvalues to sort                        to the top left of the Schur form.                        An eigenvalue is selected if PerlInt select_func(PDL::Complex(w)) is true;                        Note that a selected complex eigenvalue may no longer                        satisfy select_func(PDL::Complex(w)) = 1 after ordering, since                        ordering may change the value of complex eigenvalues                        (especially if the eigenvalue is ill-conditioned).                        All eigenvalues/vectors are selected if select_func is undefined.   backtransform       : Whether or not backtransforms eigenvectors to those of A.                        Only supported if schur vectors are computed, default = 1.  norm                : Whether or not computed eigenvectors are normalized to have Euclidean norm equal to                        1 and largest component real, default = 1   Returned values     :                        Schur form T (SCALAR CONTEXT),                        eigenvalues,                        Schur vectors (Z) if requested,                        left eigenvectors if requested                        right eigenvectors if requested                        sdim: Number of eigenvalues selected if select_func is defined.                        info: Info output from gees/cgees.                my $a = random(10,10);  my $schur  = mschur($a);  sub select{         my $m = shift;         # select ""discrete time"" eigenspace         return $m->Cabs < 1 ? 1 : 0;  }  my ($schur,$eigen, $svectors,$evectors)  = mschur($a,1,1,0,\&select); mschurx Computes Schur form, works inplace. Uses geesx or cgeesx from Lapack and returns schur(T) in scalar context. Works on transposed array.  ( PDL(schur) (,PDL(eigenvalues))  (, PDL(schur vectors), HASH(result)) ) = mschurx(PDL, SCALAR(schur vector), SCALAR(left eigenvector), SCALAR(right eigenvector),SCALAR(select_func), SCALAR(sense), SCALAR(backtransform), SCALAR(norm))  schur vector        : Schur vectors returned, none = 0 | all = 1 | selected = 2, default = 0  left eigenvector    : Left eigenvectors returned, none = 0 | all = 1 | selected = 2, default = 0  right eigenvector   : Right eigenvectors returned, none = 0 | all = 1 | selected = 2, default = 0  select_func         : Select_func is used to select eigenvalues to sort                        to the top left of the Schur form.                        An eigenvalue is selected if PerlInt select_func(PDL::Complex(w)) is true;                        Note that a selected complex eigenvalue may no longer                        satisfy select_func(PDL::Complex(w)) = 1 after ordering, since                        ordering may change the value of complex eigenvalues                        (especially if the eigenvalue is ill-conditioned).                        All  eigenvalues/vectors are selected if select_func is undefined.   sense               : Determines which reciprocal condition numbers will be computed.                         0: None are computed                         1: Computed for average of selected eigenvalues only                         2: Computed for selected right invariant subspace only                         3: Computed for both                         If select_func is undefined, sense is not used.  backtransform       : Whether or not backtransforms eigenvectors to those of A.                        Only supported if schur vector are computed, default = 1  norm                : Whether or not computed eigenvectors are normalized to have Euclidean norm equal to                        1 and largest component real, default = 1   Returned values     :                        Schur form T (SCALAR CONTEXT),                        eigenvalues,                        Schur vectors if requested,                        HASH{VL}: left eigenvectors if requested                        HASH{VR}: right eigenvectors if requested                        HASH{info}: info output from gees/cgees.                        if select_func is defined:                         HASH{n}: number of eigenvalues selected,                         HASH{rconde}: reciprocal condition numbers for the average of                          the selected eigenvalues if requested,                         HASH{rcondv}: reciprocal condition numbers for the selected                          right invariant subspace if requested.  my $a = random(10,10);  my $schur  = mschurx($a);  sub select{         my $m = shift;         # select ""discrete time"" eigenspace         return $m->Cabs < 1 ? 1 : 0;  }  my ($schur,$eigen, $vectors,%ret)  = mschurx($a,1,0,0,\&select); mgschur Computes generalized Schur decomposition of the pair (A,B).         A = Q x S x Z'         B = Q x T x Z' Uses gges or cgges from Lapack. Works on transposed array.  ( PDL(schur S), PDL(schur T), PDL(alpha), PDL(beta), HASH{result}) = mgschur(PDL(A), PDL(B), SCALAR(left schur vector),SCALAR(right schur vector),SCALAR(left eigenvector), SCALAR(right eigenvector), SCALAR(select_func), SCALAR(backtransform), SCALAR(scale))  left schur vector   : Left Schur vectors returned, none = 0 | all = 1 | selected = 2, default = 0  right schur vector  : Right Schur vectors returned, none = 0 | all = 1 | selected = 2, default = 0  left eigenvector    : Left eigenvectors returned, none = 0 | all = 1 | selected = 2, default = 0  right eigenvector   : Right eigenvectors returned, none = 0 | all = 1 | selected = 2, default = 0  select_func         : Select_func is used to select eigenvalues to sort.                        to the top left of the Schur form.                        An eigenvalue w = wr(j)+sqrt(-1)*wi(j) is selected if                        PerlInt select_func(PDL::Complex(alpha),PDL | PDL::Complex (beta)) is true;                        Note that a selected complex eigenvalue may no longer                        satisfy select_func = 1 after ordering, since                        ordering may change the value of complex eigenvalues                        (especially if the eigenvalue is ill-conditioned).                        All eigenvalues/vectors are selected if select_func is undefined.   backtransform       : Whether or not backtransforms eigenvectors to those of (A,B).                        Only supported if right and/or left schur vector are computed,   scale               : Whether or not computed eigenvectors are scaled so the largest component                        will have abs(real part) + abs(imag. part) = 1, default = 1   Returned values     :                        Schur form S,                        Schur form T,                        alpha,                        beta (eigenvalues = alpha/beta),                        HASH{info}: info output from gges/cgges.                        HASH{SL}: left Schur vectors if requested                        HASH{SR}: right Schur vectors if requested                        HASH{VL}: left eigenvectors if requested                        HASH{VR}: right eigenvectors if requested                        HASH{n} : Number of eigenvalues selected if select_func is defined.  my $a = random(10,10);  my $b = random(10,10);  my ($S,$T) = mgschur($a,$b);  sub select{         my ($alpha,$beta) = @_;         return $alpha->Cabs < abs($beta) ? 1 : 0;  }  my ($S, $T, $alpha, $beta, %res)  = mgschur( $a, $b, 1, 1, 1, 1,\&select); mgschurx Computes generalized Schur decomposition of the pair (A,B).         A = Q x S x Z'         B = Q x T x Z' Uses ggesx or cggesx from Lapack. Works on transposed array.  ( PDL(schur S), PDL(schur T), PDL(alpha), PDL(beta), HASH{result}) = mgschurx(PDL(A), PDL(B), SCALAR(left schur vector),SCALAR(right schur vector),SCALAR(left eigenvector), SCALAR(right eigenvector), SCALAR(select_func), SCALAR(sense), SCALAR(backtransform), SCALAR(scale))  left schur vector   : Left Schur vectors returned, none = 0 | all = 1 | selected = 2, default = 0  right schur vector  : Right Schur vectors returned, none = 0 | all = 1 | selected = 2, default = 0  left eigenvector    : Left eigenvectors returned, none = 0 | all = 1 | selected = 2, default = 0  right eigenvector   : Right eigenvectors returned, none = 0 | all = 1 | selected = 2, default = 0  select_func         : Select_func is used to select eigenvalues to sort.                        to the top left of the Schur form.                        An eigenvalue w = wr(j)+sqrt(-1)*wi(j) is selected if                        PerlInt select_func(PDL::Complex(alpha),PDL | PDL::Complex (beta)) is true;                        Note that a selected complex eigenvalue may no longer                        satisfy select_func = 1 after ordering, since                        ordering may change the value of complex eigenvalues                        (especially if the eigenvalue is ill-conditioned).                        All eigenvalues/vectors are selected if select_func is undefined.   sense               : Determines which reciprocal condition numbers will be computed.                         0: None are computed                         1: Computed for average of selected eigenvalues only                         2: Computed for selected deflating subspaces only                         3: Computed for both                         If select_func is undefined, sense is not used.   backtransform       : Whether or not backtransforms eigenvectors to those of (A,B).                        Only supported if right and/or left schur vector are computed, default = 1  scale               : Whether or not computed eigenvectors are scaled so the largest component                        will have abs(real part) + abs(imag. part) = 1, default = 1   Returned values     :                        Schur form S,                        Schur form T,                        alpha,                        beta (eigenvalues = alpha/beta),                        HASH{info}: info output from gges/cgges.                        HASH{SL}: left Schur vectors if requested                        HASH{SR}: right Schur vectors if requested                        HASH{VL}: left eigenvectors if requested                        HASH{VR}: right eigenvectors if requested                        HASH{rconde}: reciprocal condition numbers for average of selected eigenvalues if requested                        HASH{rcondv}: reciprocal condition numbers for selected deflating subspaces if requested                        HASH{n} : Number of eigenvalues selected if select_func is defined.  my $a = random(10,10);  my $b = random(10,10);  my ($S,$T) = mgschurx($a,$b);  sub select{         my ($alpha,$beta) = @_;         return $alpha->Cabs < abs($beta) ? 1 : 0;  }  my ($S, $T, $alpha, $beta, %res)  = mgschurx( $a, $b, 1, 1, 1, 1,\&select,3); mqr Computes QR decomposition. For complex number needs object of type PDL::Complex. Uses geqrf and orgqr or cgeqrf and cungqr from Lapack and returns Q in scalar context. Works on transposed array.  (PDL(Q), PDL(R), PDL(info)) = mqr(PDL, SCALAR)  SCALAR : ECONOMIC = 0 | FULL = 1, default = 0  my $a = random(10,10);  my ( $q, $r )  = mqr($a);  # Can compute full decomposition if nrow > ncol  $a = random(5,7);  ( $q, $r )  = $a->mqr(1); mrq Computes RQ decomposition. For complex number needs object of type PDL::Complex. Uses gerqf and orgrq or cgerqf and cungrq from Lapack and returns Q in scalar context. Works on transposed array.  (PDL(R), PDL(Q), PDL(info)) = mrq(PDL, SCALAR)  SCALAR : ECONOMIC = 0 | FULL = 1, default = 0  my $a = random(10,10);  my ( $r, $q )  = mrq($a);  # Can compute full decomposition if nrow < ncol  $a = random(5,7);  ( $r, $q )  = $a->mrq(1); mql Computes QL decomposition. For complex number needs object of type PDL::Complex. Uses geqlf and orgql or cgeqlf and cungql from Lapack and returns Q in scalar context. Works on transposed array.  (PDL(Q), PDL(L), PDL(info)) = mql(PDL, SCALAR)  SCALAR : ECONOMIC = 0 | FULL = 1, default = 0  my $a = random(10,10);  my ( $q, $l )  = mql($a);  # Can compute full decomposition if nrow > ncol  $a = random(5,7);  ( $q, $l )  = $a->mql(1); mlq Computes LQ decomposition. For complex number needs object of type PDL::Complex. Uses gelqf and orglq or cgelqf and cunglq from Lapack and returns Q in scalar context. Works on transposed array.  ( PDL(L), PDL(Q), PDL(info) ) = mlq(PDL, SCALAR)  SCALAR : ECONOMIC = 0 | FULL = 1, default = 0  my $a = random(10,10);  my ( $l, $q )  = mlq($a);  # Can compute full decomposition if nrow < ncol  $a = random(5,7);  ( $l, $q )  = $a->mlq(1); msolve Solves linear system of equations using LU decomposition.         A * X = B Returns X in scalar context else X, LU, pivot vector and info. B is overwritten by X if its inplace flag is set. Supports threading. Uses gesv or cgesv from Lapack. Works on transposed arrays.  (PDL(X), (PDL(LU), PDL(pivot), PDL(info))) = msolve(PDL(A), PDL(B) )  my $a = random(5,5);  my $b = random(10,5);  my $X = msolve($a, $b); msolvex Solves linear system of equations using LU decomposition.         A * X = B Can optionnally equilibrate the matrix. Uses gesvx or cgesvx from Lapack. Works on transposed arrays.  (PDL, (HASH(result))) = msolvex(PDL(A), PDL(B), HASH(options))  where options are:  transpose:     solves A' * X = B                 0: false                 1: true  equilibrate:   equilibrates A if necessary.                 form equilibration is returned in HASH{'equilibration'}:                         0: no equilibration                         1: row equilibration                         2: column equilibration                 row scale factors are returned in HASH{'row'}                  column scale factors are returned in HASH{'column'}                  0: false                 1: true  LU:            returns lu decomposition in HASH{LU}                 0: false                 1: true  A:             returns scaled A if equilibration was done in HASH{A}                   0: false                 1: true  B:             returns scaled B if equilibration was done in HASH{B}                  0: false                 1: true  Returned values:                 X (SCALAR CONTEXT),                 HASH{'pivot'}:                  Pivot indice from LU factorization                 HASH{'rcondition'}:                  Reciprocal condition of the matrix                 HASH{'ferror'}:                  Forward error bound                  HASH{'berror'}:                  Componentwise relative backward error                 HASH{'rpvgrw'}:                  Reciprocal pivot growth factor                 HASH{'info'}:                  Info: output from gesvx  my $a = random(10,10);  my $b = random(5,10);  my %options = (                 LU=>1,                 equilibrate => 1,                 );  my( $X, %result) = msolvex($a,$b,%options); mtrisolve Solves linear system of equations with triangular matrix A.         A * X = B  or A' * X = B B is overwritten by X if its inplace flag is set. Supports threading. Uses trtrs or ctrtrs from Lapack. Work on transposed array(s).  (PDL(X), (PDL(info)) = mtrisolve(PDL(A), SCALAR(uplo), PDL(B), SCALAR(trans), SCALAR(diag))  uplo   : UPPER  = 0 | LOWER = 1  trans  : NOTRANSPOSE  = 0 | TRANSPOSE = 1, default = 0  uplo   : UNITARY DIAGONAL = 1, default = 0  # Assume $a is upper triagonal  my $a = random(5,5);  my $b = random(5,10);  my $X = mtrisolve($a, 0, $b); msymsolve Solves linear system of equations using diagonal pivoting method with symmetric matrix A.         A * X = B Returns X in scalar context else X, block diagonal matrix D (and the multipliers), pivot vector an info. B is overwritten by X if its inplace flag is set. Supports threading. Uses sysv or csysv from Lapack. Works on transposed array(s).  (PDL(X), ( PDL(D), PDL(pivot), PDL(info) ) ) = msymsolve(PDL(A), SCALAR(uplo), PDL(B) )  uplo : UPPER  = 0 | LOWER = 1, default = 0  # Assume $a is symmetric  my $a = random(5,5);  my $b = random(5,10);  my $X = msymsolve($a, 0, $b); msymsolvex Solves linear system of equations using diagonal pivoting method with symmetric matrix A.         A * X = B Uses sysvx or csysvx from Lapack. Works on transposed array.  (PDL, (HASH(result))) = msymsolvex(PDL(A), SCALAR (uplo), PDL(B), SCALAR(d))  uplo : UPPER  = 0 | LOWER = 1, default = 0  d    : whether return diagonal matrix d and pivot vector         FALSE  = 0 | TRUE = 1, default = 0   Returned values:                 X (SCALAR CONTEXT),                 HASH{'D'}:                  Block diagonal matrix D (and the multipliers) (if requested)                 HASH{'pivot'}:                  Pivot indice from LU factorization (if requested)                 HASH{'rcondition'}:                  Reciprocal condition of the matrix                 HASH{'ferror'}:                  Forward error bound                  HASH{'berror'}:                  Componentwise relative backward error                 HASH{'info'}:                  Info: output from sysvx  # Assume $a is symmetric  my $a = random(10,10);  my $b = random(5,10);  my ($X, %result) = msolvex($a, 0, $b); mpossolve Solves linear system of equations using Cholesky decomposition with symmetric positive definite matrix A.         A * X = B Returns X in scalar context else X, U or L and info. B is overwritten by X if its inplace flag is set. Supports threading. Uses posv or cposv from Lapack. Works on transposed array(s).  (PDL, (PDL, PDL, PDL)) = mpossolve(PDL(A), SCALAR(uplo), PDL(B) )  uplo : UPPER  = 0 | LOWER = 1, default = 0  # asume $a is symmetric positive definite  my $a = random(5,5);  my $b = random(5,10);  my $X = mpossolve($a, 0, $b); mpossolvex Solves linear system of equations using Cholesky decomposition with symmetric positive definite matrix A         A * X = B Can optionnally equilibrate the matrix. Uses posvx or cposvx from Lapack. Works on transposed array(s).  (PDL, (HASH(result))) = mpossolvex(PDL(A), SCARA(uplo), PDL(B), HASH(options))  uplo : UPPER  = 0 | LOWER = 1, default = 0  where options are:  equilibrate:   equilibrates A if necessary.                 form equilibration is returned in HASH{'equilibration'}:                         0: no equilibration                         1: equilibration                 scale factors are returned in HASH{'scale'}                  0: false                 1: true  U|L:           returns Cholesky factorization in HASH{U} or HASH{L}                 0: false                 1: true  A:             returns scaled A if equilibration was done in HASH{A}                   0: false                 1: true  B:             returns scaled B if equilibration was done in HASH{B}                  0: false                 1: true  Returned values:                 X (SCALAR CONTEXT),                 HASH{'rcondition'}:                  Reciprocal condition of the matrix                 HASH{'ferror'}:                  Forward error bound                  HASH{'berror'}:                  Componentwise relative backward error                 HASH{'info'}:                  Info: output from gesvx  # Assume $a is symmetric positive definite  my $a = random(10,10);  my $b = random(5,10);  my %options = (U=>1,                 equilibrate => 1,                 );  my ($X, %result) = msolvex($a, 0, $b,%opt); mlls Solves overdetermined or underdetermined real linear systems using QR or LQ factorization. If M > N in the M-by-N matrix A, returns the residual sum of squares too. Uses gels or cgels from Lapack. Works on transposed arrays.  PDL(X) = mlls(PDL(A), PDL(B), SCALAR(trans))  trans : NOTRANSPOSE  = 0 | TRANSPOSE/CONJUGATE = 1, default = 0  $a = random(4,5);  $b = random(3,5);  ($x, $res) = mlls($a, $b); mllsy Computes the minimum-norm solution to a real linear least squares problem using a complete orthogonal factorization. Uses gelsy or cgelsy from Lapack. Works on tranposed arrays.  ( PDL(X), ( HASH(result) ) ) = mllsy(PDL(A), PDL(B))  Returned values:                 X (SCALAR CONTEXT),                 HASH{'A'}:                  complete orthogonal factorization of A                 HASH{'jpvt'}:                  details of columns interchanges                  HASH{'rank'}:                  effective rank of A  my $a = random(10,10);  my $b = random(10,10);  $X = mllsy($a, $b); mllss Computes the minimum-norm solution to a real linear least squares problem using a singular value decomposition. Uses gelss or gelsd from Lapack. Works on transposed arrays.  ( PDL(X), ( HASH(result) ) )= mllss(PDL(A), PDL(B), SCALAR(method))  method: specifie which method to use (see Lapack for further details)         '(c)gelss' or '(c)gelsd', default = '(c)gelsd'  Returned values:                 X (SCALAR CONTEXT),                 HASH{'V'}:                  if method = (c)gelss, the right singular vectors, stored columnwise                 HASH{'s'}:                  singular values from SVD                  HASH{'res'}:                  if A has full rank the residual sum-of-squares for the solution                  HASH{'rank'}:                  effective rank of A                 HASH{'info'}:                  info output from method  my $a = random(10,10);  my $b = random(10,10);  $X = mllss($a, $b); mglm Solves a general Gauss-Markov Linear Model (GLM) problem. Supports threading. Uses ggglm or cggglm from Lapack. Works on transposed arrays.  (PDL(x), PDL(y)) = mglm(PDL(a), PDL(b), PDL(d))  where d is the left hand side of the GLM equation  my $a = random(8,10);  my $b = random(7,10);  my $d = random(10);  my ($x, $y) = mglm($a, $b, $d); mlse Solves a linear equality-constrained least squares (LSE) problem. Uses gglse or cgglse from Lapack. Works on transposed arrays.  (PDL(x), PDL(res2)) = mlse(PDL(a), PDL(b), PDL(c), PDL(d))  where   c      : The right hand side vector for the           least squares part of the LSE problem.  d      : The right hand side vector for the           constrained equation.  x      : The solution of the LSE problem.  res2   : The residual sum of squares for the solution           (returned only in array context)  my $a = random(5,4);  my $b = random(5,3);  my $c = random(4);  my $d = random(3);  my ($x, $res2) = mlse($a, $b, $c, $d); meigen Computes eigenvalues and, optionally, the left and/or right eigenvectors of a general square matrix (spectral decomposition). Eigenvectors are normalized (Euclidean norm = 1) and largest component real. The eigenvalues and eigenvectors returned are object of type PDL::Complex. If only eigenvalues are requested, info is returned in array context. Supports threading. Uses geev or cgeev from Lapack. Works on transposed arrays.  (PDL(values), (PDL(LV),  (PDL(RV)), (PDL(info))) = meigen(PDL, SCALAR(left vector), SCALAR(right vector))  left vector  : FALSE = 0 | TRUE = 1, default = 0  right vector : FALSE = 0 | TRUE = 1, default = 0  my $a = random(10,10);  my ( $eigenvalues, $left_eigenvectors, $right_eigenvectors )  = meigen($a,1,1); meigenx Computes eigenvalues, one-norm and, optionally, the left and/or right eigenvectors of a general square matrix (spectral decomposition). Eigenvectors are normalized (Euclidean norm = 1) and largest component real. The eigenvalues and eigenvectors returned are object of type PDL::Complex. Uses geevx or cgeevx from Lapack. Works on transposed arrays.  (PDL(value), (PDL(lv),  (PDL(rv)), HASH(result)), HASH(result)) = meigenx(PDL, HASH(options))  where options are:  vector:     eigenvectors to compute                 'left':  computes left eigenvectors                 'right': computes right eigenvectors                 'all':   computes left and right eigenvectors                  0:     doesn't compute (default)  rcondition: reciprocal condition numbers to compute (returned in HASH{'rconde'} for eigenvalues and HASH{'rcondv'} for eigenvectors)                 'value':  computes reciprocal condition numbers for eigenvalues                 'vector': computes reciprocal condition numbers for eigenvectors                 'all':    computes reciprocal condition numbers for eigenvalues and eigenvectors                  0:      doesn't compute (default)  error:      specifie whether or not it computes the error bounds (returned in HASH{'eerror'} and HASH{'verror'})              error bound = EPS * One-norm / rcond(e|v)              (reciprocal condition numbers for eigenvalues or eigenvectors must be computed).                 1: returns error bounds                 0: not computed  scale:      specifie whether or not it diagonaly scales the entry matrix              (scale details returned in HASH : 'scale')                 1: scales                 0: Doesn't scale (default)  permute:    specifie whether or not it permutes row and columns              (permute details returned in HASH{'balance'})                 1: permutes                 0: Doesn't permute (default)  schur:      specifie whether or not it returns the Schur form (returned in HASH{'schur'})                 1: returns Schur form                 0: not returned  Returned values:             eigenvalues (SCALAR CONTEXT),             left eigenvectors if requested,             right eigenvectors if requested,             HASH{'norm'}:                 One-norm of the matrix             HASH{'info'}:                 Info: if > 0, the QR algorithm failed to compute all the eigenvalues                 (see syevx for further details)  my $a = random(10,10);  my %options = ( rcondition => 'all',              vector => 'all',              error => 1,              scale => 1,              permute=>1,              shur => 1              );  my ( $eigenvalues, $left_eigenvectors, $right_eigenvectors, %result)  = meigenx($a,%options);  print ""Error bounds for eigenvalues:\n $eigenvalues\n are:\n"". transpose($result{'eerror'}) unless $info; mgeigen Computes generalized eigenvalues and, optionally, the left and/or right generalized eigenvectors for a pair of N-by-N real nonsymmetric matrices (A,B) . The alpha from ratio alpha/beta is object of type PDL::Complex. Supports threading. Uses ggev or cggev from Lapack. Works on transposed arrays.  ( PDL(alpha), PDL(beta), ( PDL(LV),  (PDL(RV) ), PDL(info)) = mgeigen(PDL(A),PDL(B) SCALAR(left vector), SCALAR(right vector))  left vector  : FALSE = 0 | TRUE = 1, default = 0  right vector : FALSE = 0 | TRUE = 1, default = 0  my $a = random(10,10);  my $b = random(10,10);  my ( $alpha, $beta, $left_eigenvectors, $right_eigenvectors )  = mgeigen($a, $b,1, 1); mgeigenx Computes generalized eigenvalues, one-norms and, optionally, the left and/or right generalized eigenvectors for a pair of N-by-N real nonsymmetric matrices (A,B). The alpha from ratio alpha/beta is object of type PDL::Complex. Uses ggevx or cggevx from Lapack. Works on transposed arrays.  (PDL(alpha), PDL(beta), PDL(lv),  PDL(rv), HASH(result) ) = mgeigenx(PDL(a), PDL(b), HASH(options))  where options are:  vector:     eigenvectors to compute                 'left':  computes left eigenvectors                 'right': computes right eigenvectors                 'all':   computes left and right eigenvectors                  0:     doesn't compute (default)  rcondition: reciprocal condition numbers to compute (returned in HASH{'rconde'} for eigenvalues and HASH{'rcondv'} for eigenvectors)                 'value':  computes reciprocal condition numbers for eigenvalues                 'vector': computes reciprocal condition numbers for eigenvectors                 'all':    computes reciprocal condition numbers for eigenvalues and eigenvectors                  0:      doesn't compute (default)  error:      specifie whether or not it computes the error bounds (returned in HASH{'eerror'} and HASH{'verror'})              error bound = EPS * sqrt(one-norm(a)**2 + one-norm(b)**2) / rcond(e|v)              (reciprocal condition numbers for eigenvalues or eigenvectors must be computed).                 1: returns error bounds                 0: not computed  scale:      specifie whether or not it diagonaly scales the entry matrix              (scale details returned in HASH : 'lscale' and 'rscale')                 1: scales                 0: doesn't scale (default)  permute:    specifie whether or not it permutes row and columns              (permute details returned in HASH{'balance'})                 1: permutes                 0: Doesn't permute (default)  schur:      specifie whether or not it returns the Schur forms (returned in HASH{'aschur'} and HASH{'bschur'})              (right or left eigenvectors must be computed).                 1: returns Schur forms                 0: not returned  Returned values:             alpha,             beta,             left eigenvectors if requested,             right eigenvectors if requested,             HASH{'anorm'}, HASH{'bnorm'}:                 One-norm of the matrix A and B             HASH{'info'}:                 Info: if > 0, the QR algorithm failed to compute all the eigenvalues                 (see syevx for further details)  $a = random(10,10);  $b = random(10,10);  %options = (rcondition => 'all',              vector => 'all',              error => 1,              scale => 1,              permute=>1,              shur => 1              );  ($alpha, $beta, $left_eigenvectors, $right_eigenvectors, %result)  = mgeigenx($a, $b,%options);  print ""Error bounds for eigenvalues:\n $eigenvalues\n are:\n"". transpose($result{'eerror'}) unless $info; msymeigen Computes eigenvalues and, optionally eigenvectors of a real symmetric square or complex Hermitian matrix (spectral decomposition). The eigenvalues are computed from lower or upper triangular matrix. If only eigenvalues are requested, info is returned in array context. Supports threading and works inplace if eigenvectors are requested. From Lapack, uses syev or syevd for real and cheev or cheevd for complex. Works on transposed array(s).  (PDL(values), (PDL(VECTORS)), PDL(info)) = msymeigen(PDL, SCALAR(uplo), SCALAR(vector), SCALAR(method))  uplo : UPPER  = 0 | LOWER = 1, default = 0  vector : FALSE = 0 | TRUE = 1, default = 0  method : 'syev' | 'syevd' | 'cheev' | 'cheevd', default = 'syevd'|'cheevd'  # Assume $a is symmetric  my $a = random(10,10);  my ( $eigenvalues, $eigenvectors )  = msymeigen($a,0,1, 'syev'); msymeigenx Computes eigenvalues and, optionally eigenvectors of a symmetric square matrix (spectral decomposition). The eigenvalues are computed from lower or upper triangular matrix and can be selected by specifying a range. From Lapack, uses syevx or syevr for real and cheevx or cheevr for complex. Works on transposed arrays.  (PDL(value), (PDL(vector)), PDL(n), PDL(info), (PDL(support)) ) = msymeigenx(PDL, SCALAR(uplo), SCALAR(vector), HASH(options))  uplo : UPPER  = 0 | LOWER = 1, default = 0  vector : FALSE = 0 | TRUE = 1, default = 0  where options are:  range_type:    method for selecting eigenvalues                 indice:  range of indices                 interval: range of values                 0: find all eigenvalues and optionally all vectors  range:         PDL(2), lower and upper bounds interval or smallest and largest indices                 1<=range<=N for indice  abstol:        specifie error tolerance for eigenvalues  method:        specifie which method to use (see Lapack for further details)                 'syevx' (default)                 'syevr'                 'cheevx' (default)                 'cheevr'  Returned values:                 eigenvalues (SCALAR CONTEXT),                 eigenvectors if requested,                 total number of eigenvalues found (n),                 info                 issupz or ifail (support) according to method used and returned info,                 for (sy|che)evx returns support only if info != 0                  # Assume $a is symmetric  my $a = random(10,10);  my $overflow = lamch(9);  my $range = cat pdl(0),$overflow;  my $abstol = pdl(1.e-5);  my %options = (range_type=>'interval',                 range => $range,                 abstol => $abstol,                 method=>'syevd');  my ( $eigenvalues, $eigenvectors, $n, $isuppz )  = msymeigenx($a,0,1, %options); msymgeigen Computes eigenvalues and, optionally eigenvectors of a real generalized symmetric-definite or Hermitian-definite eigenproblem. The eigenvalues are computed from lower or upper triangular matrix If only eigenvalues are requested, info is returned in array context. Supports threading. From Lapack, uses sygv or sygvd for real or chegv or chegvd for complex. Works on transposed array(s).  (PDL(values), (PDL(vectors)), PDL(info)) = msymgeigen(PDL(a), PDL(b),SCALAR(uplo), SCALAR(vector), SCALAR(type), SCALAR(method))  uplo : UPPER  = 0 | LOWER = 1, default = 0  vector : FALSE = 0 | TRUE = 1, default = 0  type :          1: A * x = (lambda) * B * x         2: A * B * x = (lambda) * x         3: B * A * x = (lambda) * x         default = 1  method : 'sygv' | 'sygvd' for real or  ,'chegv' | 'chegvd' for complex,  default = 'sygvd' | 'chegvd'  # Assume $a is symmetric  my $a = random(10,10);  my $b = random(10,10);  $b = $b->crossprod($b);  my ( $eigenvalues, $eigenvectors )  = msymgeigen($a, $b, 0, 1, 1, 'sygv'); msymgeigenx Computes eigenvalues and, optionally eigenvectors of a real generalized symmetric-definite or Hermitian eigenproblem. The eigenvalues are computed from lower or upper triangular matrix and can be selected by specifying a range. Uses sygvx or cheevx from Lapack. Works on transposed arrays.  (PDL(value), (PDL(vector)), PDL(info), PDL(n), (PDL(support)) ) = msymeigenx(PDL(a), PDL(b), SCALAR(uplo), SCALAR(vector), HASH(options))  uplo : UPPER  = 0 | LOWER = 1, default = 0  vector : FALSE = 0 | TRUE = 1, default = 0  where options are:  type :         Specifies the problem type to be solved                 1: A * x = (lambda) * B * x                 2: A * B * x = (lambda) * x                 3: B * A * x = (lambda) * x                 default = 1  range_type:    method for selecting eigenvalues                 indice:  range of indices                 interval: range of values                 0: find all eigenvalues and optionally all vectors  range:         PDL(2), lower and upper bounds interval or smallest and largest indices                 1<=range<=N for indice  abstol:        specifie error tolerance for eigenvalues  Returned values:                 eigenvalues (SCALAR CONTEXT),                 eigenvectors if requested,                 total number of eigenvalues found (n),                 info                 ifail according to returned info (support).  # Assume $a is symmetric  my $a = random(10,10);  my $b = random(10,10);  $b = $b->crossprod($b);  my $overflow = lamch(9);  my $range = cat pdl(0),$overflow;  my $abstol = pdl(1.e-5);  my %options = (range_type=>'interval',                 range => $range,                 abstol => $abstol,                 type => 1);  my ( $eigenvalues, $eigenvectors, $n, $isuppz )  = msymgeigenx($a, $b, 0,1, %options); mdsvd Computes SVD using Coppen's divide and conquer algorithm. Return singular values in scalar context else left (U), singular values, right (V' (hermitian for complex)) singular vectors and info. Supports threading. If only singulars values are requested, info is only returned in array context. Uses gesdd or cgesdd from Lapack.  (PDL(U), (PDL(s), PDL(V)), PDL(info)) = mdsvd(PDL, SCALAR(job))  job :  0 = computes only singular values         1 = computes full SVD (square U and V)         2 = computes SVD (singular values, right and left singular vectors)          default = 1  my $a = random(5,10);  my ($u, $s, $v) = mdsvd($a); msvd Computes SVD. Can compute singular values, either U or V or neither. Return singulars values in scalar context else left (U), singular values, right (V' (hermitian for complex) singulars vector and info. Supports threading. If only singulars values are requested, info is returned in array context. Uses gesvd or cgesvd from Lapack.  ( (PDL(U)), PDL(s), (PDL(V), PDL(info)) = msvd(PDL, SCALAR(jobu), SCALAR(jobv))  jobu : 0 = Doesn't compute U         1 = computes full SVD (square U)         2 = computes right singular vectors         default = 1  jobv : 0 = Doesn't compute V         1 = computes full SVD (square V)         2 = computes left singular vectors         default = 1  my $a = random(10,10);  my ($u, $s, $v) = msvd($a); mgsvd Computes generalized (or quotient) singular value decomposition. If the effective rank of (A',B')' is 0 return only unitary V, U, Q. For complex number, needs object of type PDL::Complex. Uses ggsvd or cggsvd from Lapack. Works on transposed arrays.  (PDL(sa), PDL(sb), %ret) = mgsvd(PDL(a), PDL(b), %HASH(options))  where options are:  V:    whether or not computes V (boolean, returned in HASH{'V'})  U:    whether or not computes U (boolean, returned in HASH{'U'})  Q:    whether or not computes Q (boolean, returned in HASH{'Q'})  D1:   whether or not computes D1 (boolean, returned in HASH{'D1'})  D2:   whether or not computes D2 (boolean, returned in HASH{'D2'})  0R:   whether or not computes 0R (boolean, returned in HASH{'0R'})  R:    whether or not computes R (boolean, returned in HASH{'R'})  X:    whether or not computes X (boolean, returned in HASH{'X'})  all:  whether or not computes all the above.  Returned value:          sa,sb          : singular value pairs of A and B (generalized singular values = sa/sb)          $ret{'rank'}   : effective numerical rank of (A',B')'          $ret{'info'}   : info from (c)ggsvd  my $a = random(5,5);  my $b = random(5,7);  my ($c, $s, %ret) = mgsvd($a, $b, X => 1); AUTHOR Copyright (C) Grégory Vanuxem 2005-2007. This library is free software; you can redistribute it and/or modify it under the terms of the artistic license as specified in the Artistic file. × Module Install Instructions To install PDL::LinearAlgebra, simply copy and paste either of the commands in to your terminal cpanm                      cpanm PDL::LinearAlgebra CPAN shell                      perl -MCPAN -e shell                     install PDL::LinearAlgebra For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Science/Numerics"	"PDL::Stats"	"https://metacpan.org/pod/PDL::Stats"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"PDL::Stats - a collection of statistics modules in Perl Data Language, with a quick-start guide for non-PDL people. - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Ed J  /  0.75 (ETJ on 2016-05-30) 0.74 (MAGGIEXYZ on 2015-12-05) 0.73_1 DEV (MAGGIEXYZ on 2015-11-29) v0.6.5_2 DEV (MAGGIEXYZ on 2015-06-09) v0.6.5_1 DEV (MAGGIEXYZ on 2015-04-26) v0.6.5 (MAGGIEXYZ on 2013-11-03) v0.6.4_1 DEV (MAGGIEXYZ on 2013-09-21) v0.6.4 (MAGGIEXYZ on 2013-09-05) 0.5.5 (MAGGIEXYZ on 2011-04-23) 0.74_1 DEV (ETJ on 2016-05-28) 0.73 (ETJ on 2015-09-17) 0.72 (ETJ on 2015-08-31) 0.71 (ETJ on 2015-08-29) 0.70 (ETJ on 2015-08-17) v0.6.3_3 DEV (MAGGIEXYZ on 2013-08-28) v0.6.3_2 DEV (MAGGIEXYZ on 2013-08-27) v0.6.3_1 DEV (MAGGIEXYZ on 2013-08-26) v0.6.3 (MAGGIEXYZ on 2013-05-06) v0.6.2 (MAGGIEXYZ on 2012-04-29) v0.6.1 (MAGGIEXYZ on 2012-04-25) v0.6.0 (MAGGIEXYZ on 2012-04-22) 0.5.4 (MAGGIEXYZ on 2011-04-20) 0.5.3 (MAGGIEXYZ on 2011-04-18) 0.5.2 (MAGGIEXYZ on 2011-04-18) 0.5.1 (MAGGIEXYZ on 2011-04-17) 0.5.0 (MAGGIEXYZ on 2011-04-03) 0.4.3 (MAGGIEXYZ on 2010-04-08) 0.4.2 (MAGGIEXYZ on 2010-03-28) 0.4.1 (MAGGIEXYZ on 2010-02-02) 0.4.0 (MAGGIEXYZ on 2010-01-24) 0.3.2 (MAGGIEXYZ on 2010-01-08) 0.3.1 (MAGGIEXYZ on 2009-12-17) 0.3.0 (MAGGIEXYZ on 2009-12-04) 0.2.8 (MAGGIEXYZ on 2009-11-04) 0.2.7 (MAGGIEXYZ on 2009-11-04) 0.2.6 (MAGGIEXYZ on 2009-10-12) 0.2.5 (MAGGIEXYZ on 2009-09-17) 0.2.4 (MAGGIEXYZ on 2009-09-03) 0.2.3 (MAGGIEXYZ on 2009-08-25) 0.2.2 (MAGGIEXYZ on 2009-07-31) 0.2.1 (MAGGIEXYZ on 2009-07-22) 0.2.0 (MAGGIEXYZ on 2009-07-21) PDL-Stats-0.75 8 ++ 8 ++  / PDL::Stats 30 May 2016 19:41:35 GMT Module version: 0.75 Source (raw) Browse (raw) Changes Repository (git clone) Issues (3) Testers Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (118.93Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.74 (MAGGIEXYZ on 2015-12-05) 0.73_1 DEV (MAGGIEXYZ on 2015-11-29) v0.6.5_2 DEV (MAGGIEXYZ on 2015-06-09) v0.6.5_1 DEV (MAGGIEXYZ on 2015-04-26) v0.6.5 (MAGGIEXYZ on 2013-11-03) v0.6.4_1 DEV (MAGGIEXYZ on 2013-09-21) v0.6.4 (MAGGIEXYZ on 2013-09-05) 0.5.5 (MAGGIEXYZ on 2011-04-23) 0.74_1 DEV (ETJ on 2016-05-28) 0.73 (ETJ on 2015-09-17) 0.72 (ETJ on 2015-08-31) 0.71 (ETJ on 2015-08-29) 0.70 (ETJ on 2015-08-17) v0.6.3_3 DEV (MAGGIEXYZ on 2013-08-28) v0.6.3_2 DEV (MAGGIEXYZ on 2013-08-27) v0.6.3_1 DEV (MAGGIEXYZ on 2013-08-26) v0.6.3 (MAGGIEXYZ on 2013-05-06) v0.6.2 (MAGGIEXYZ on 2012-04-29) v0.6.1 (MAGGIEXYZ on 2012-04-25) v0.6.0 (MAGGIEXYZ on 2012-04-22) 0.5.4 (MAGGIEXYZ on 2011-04-20) 0.5.3 (MAGGIEXYZ on 2011-04-18) 0.5.2 (MAGGIEXYZ on 2011-04-18) 0.5.1 (MAGGIEXYZ on 2011-04-17) 0.5.0 (MAGGIEXYZ on 2011-04-03) 0.4.3 (MAGGIEXYZ on 2010-04-08) 0.4.2 (MAGGIEXYZ on 2010-03-28) 0.4.1 (MAGGIEXYZ on 2010-02-02) 0.4.0 (MAGGIEXYZ on 2010-01-24) 0.3.2 (MAGGIEXYZ on 2010-01-08) 0.3.1 (MAGGIEXYZ on 2009-12-17) 0.3.0 (MAGGIEXYZ on 2009-12-04) 0.2.8 (MAGGIEXYZ on 2009-11-04) 0.2.7 (MAGGIEXYZ on 2009-11-04) 0.2.6 (MAGGIEXYZ on 2009-10-12) 0.2.5 (MAGGIEXYZ on 2009-09-17) 0.2.4 (MAGGIEXYZ on 2009-09-03) 0.2.3 (MAGGIEXYZ on 2009-08-25) 0.2.2 (MAGGIEXYZ on 2009-07-31) 0.2.1 (MAGGIEXYZ on 2009-07-22) 0.2.0 (MAGGIEXYZ on 2009-07-21) Diff with version 0.74 (MAGGIEXYZ on 2015-12-05) 0.73_1 DEV (MAGGIEXYZ on 2015-11-29) v0.6.5_2 DEV (MAGGIEXYZ on 2015-06-09) v0.6.5_1 DEV (MAGGIEXYZ on 2015-04-26) v0.6.5 (MAGGIEXYZ on 2013-11-03) v0.6.4_1 DEV (MAGGIEXYZ on 2013-09-21) v0.6.4 (MAGGIEXYZ on 2013-09-05) 0.5.5 (MAGGIEXYZ on 2011-04-23) 0.74_1 DEV (ETJ on 2016-05-28) 0.73 (ETJ on 2015-09-17) 0.72 (ETJ on 2015-08-31) 0.71 (ETJ on 2015-08-29) 0.70 (ETJ on 2015-08-17) v0.6.3_3 DEV (MAGGIEXYZ on 2013-08-28) v0.6.3_2 DEV (MAGGIEXYZ on 2013-08-27) v0.6.3_1 DEV (MAGGIEXYZ on 2013-08-26) v0.6.3 (MAGGIEXYZ on 2013-05-06) v0.6.2 (MAGGIEXYZ on 2012-04-29) v0.6.1 (MAGGIEXYZ on 2012-04-25) v0.6.0 (MAGGIEXYZ on 2012-04-22) 0.5.4 (MAGGIEXYZ on 2011-04-20) 0.5.3 (MAGGIEXYZ on 2011-04-18) 0.5.2 (MAGGIEXYZ on 2011-04-18) 0.5.1 (MAGGIEXYZ on 2011-04-17) 0.5.0 (MAGGIEXYZ on 2011-04-03) 0.4.3 (MAGGIEXYZ on 2010-04-08) 0.4.2 (MAGGIEXYZ on 2010-03-28) 0.4.1 (MAGGIEXYZ on 2010-02-02) 0.4.0 (MAGGIEXYZ on 2010-01-24) 0.3.2 (MAGGIEXYZ on 2010-01-08) 0.3.1 (MAGGIEXYZ on 2009-12-17) 0.3.0 (MAGGIEXYZ on 2009-12-04) 0.2.8 (MAGGIEXYZ on 2009-11-04) 0.2.7 (MAGGIEXYZ on 2009-11-04) 0.2.6 (MAGGIEXYZ on 2009-10-12) 0.2.5 (MAGGIEXYZ on 2009-09-17) 0.2.4 (MAGGIEXYZ on 2009-09-03) 0.2.3 (MAGGIEXYZ on 2009-08-25) 0.2.2 (MAGGIEXYZ on 2009-07-31) 0.2.1 (MAGGIEXYZ on 2009-07-22) 0.2.0 (MAGGIEXYZ on 2009-07-21) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 6 PAUSE users 2 non-PAUSE users. ETJ Ed J and 1 contributors show them Maggie J. Xiong <maggiexyz users.sourceforge.net> Dependencies PDL::Core and possibly others CPAN Testers List Reverse dependencies Dependency graph × PDL-Stats-0.75 NAME DESCRIPTION SYNOPSIS QUICK-START FOR NON-PDL PEOPLE pdl info list Signature Threading perldl For more info AUTHOR NAME PDL::Stats - a collection of statistics modules in Perl Data Language, with a quick-start guide for non-PDL people. DESCRIPTION Loads modules named below, making the functions available in the current namespace. Properly formated documentations online at http://pdl-stats.sf.net SYNOPSIS     use PDL::LiteF;        # loads less modules     use PDL::NiceSlice;    # preprocessor for easier pdl indexing syntax       use PDL::Stats;       # Is equivalent to the following:      use PDL::Stats::Basic;     use PDL::Stats::GLM;     use PDL::Stats::Kmeans;     use PDL::Stats::TS;       # and the following if installed;      use PDL::Stats::Distr;     use PDL::GSL::CDF; QUICK-START FOR NON-PDL PEOPLE Enjoy PDL::Stats without having to dive into PDL, just wet your feet a little. Three key words two concepts and an icing on the cake, you should be well on your way there. pdl The magic word that puts PDL::Stats at your disposal. pdl creates a PDL numeric data object (a pdl, pronounced ""piddle"" :/ ) from perl array or array ref. All PDL::Stats methods, unless meant for regular perl array, can then be called from the data object.     my @y = 0..5;      my $y = pdl @y;      # a simple function      my $stdv = $y->stdv;      # you can skip the intermediate $y      my $stdv = stdv( pdl @y );      # a more complex method, skipping intermediate $y      my @x1 = qw( y y y n n n );     my @x2 = qw( 1 0 1 0 1 0 )      # do a two-way analysis of variance with y as DV and x1 x2 as IVs      my %result = pdl(@y)->anova( \@x1, \@x2 );     print ""$_\t$result{$_}\n"" for (sort keys %result); If you have a list of list, ie array of array refs, pdl will create a multi-dimensional data object.     my @a = ( [1,2,3,4], [0,1,2,3], [4,5,6,7] );      my $a = pdl @a;      print $a . $a->info;      # here's what you will get      [      [1 2 3 4]      [0 1 2 3]      [4 5 6 7]     ]     PDL: Double D [4,3] PDL::Stats puts observations in the first dimension and variables in the second dimension, ie pdl [obs, var]. In PDL::Stats the above example represents 4 observations on 3 variables.     # you can do all kinds of fancy stuff on such a 2D pdl.      my %result = $a->kmeans( {NCLUS=>2} );     print ""$_\t$result{$_}\n"" for (sort keys %result); Make sure the array of array refs is rectangular. If the array refs are of unequal sizes, pdl will pad it out with 0s to match the longest list. info Tells you the data type (yes pdls are typed, but you shouldn't have to worry about it here*) and dimensionality of the pdl, as seen in the above example. I find it a big help for my sanity to keep track of the dimensionality of a pdl. As mentioned above, PDL::Stats uses 2D pdl with observation x variable dimensionality. *pdl uses double precision by default. If you are working with things like epoch time, then you should probably use pdl(long, @epoch) to maintain the precision. list Come back to the perl reality from the PDL wonder land. list turns a pdl data object into a regular perl list. Caveat: list produces a flat list. The dimensionality of the data object is lost. Signature This is not a function, but a concept. You will see something like this frequently in the pod:     stdv            Signature: (a(n); float+ [o]b()) The signature tells you what the function expects as input and what kind of output it produces. a(n) means it expects a 1D pdl with n elements; [o] is for output, b() means its a scalar. So stdv will take your 1D list and give back a scalar. float+ you can ignore; but if you insist, it means the output is at float or double precision. The name a or b or c is not important. What's important is the thing in the parenthesis.     corr            Signature: (a(n); b(n); float+ [o]c()) Here the function corr takes two inputs, two 1D pdl with the same numbers of elements, and gives back a scalar.     t_test            Signature: (a(n); b(m); float+ [o]t(); [o]d()) Here the function t_test can take two 1D pdls of unequal size (n==m is certainly fine), and give back two scalars, t-value and degrees of freedom. Yes we accommodate t-tests with unequal sample sizes.     assign            Signature: (data(o,v); centroid(c,v); byte [o]cluster(o,c)) Here is one of the most complicated signatures in the package. This is a function from Kmeans. assign takes data of observasion x variable dimensions, and a centroid of cluster x variable dimensions, and returns an observation x cluster membership pdl (indicated by 1s and 0s). Got the idea? Then we can see how PDL does its magic :) Threading Another concept. The first thing to know is that, threading is optional. PDL threading means automatically repeating the operation on extra elements or dimensions fed to a function. For a function with a signature like this     gsl_cdf_tdist_P        Signature: (double x(); double nu();  [o]out()) the signatures says that it takes two scalars as input, and returns a scalar as output. If you need to look up the p-values for a list of t's, with the same degrees of freedom 19,     my @t = ( 1.65, 1.96, 2.56 );      my $p = gsl_cdf_tdist_P( pdl(@t), 19 );      print $p . ""\n"" . $p->info;      # here's what you will get      [0.94231136 0.96758551 0.99042586]     PDL: Double D [3] The same function is repeated on each element in the list you provided. If you had different degrees of freedoms for the t's,     my @df = (199, 39, 19);      my $p = gsl_cdf_tdist_P( pdl(@t), pdl(@df) );      print $p . ""\n"" . $p->info;      # here's what you will get           [0.94973979 0.97141553 0.99042586]     PDL: Double D [3] The df's are automatically matched with the t's to give you the results. An example of threading thru extra dimension(s):     stdv            Signature: (a(n); float+ [o]b()) if the input is of 2D, say you want to compute the stdv for each of the 3 variables,     my @a = ( [1,1,3,4], [0,1,2,3], [4,5,6,7] );      # pdl @a is pdl dim [4,3]      my $sd = stdv( pdl @a );      print $sd . ""\n"" . $sd->info;      # this is what you will get      [ 1.2990381   1.118034   1.118034]     PDL: Double D [3] Here the function was given an input with an extra dimension of size 3, so it repeates the stdv operation on the extra dimenion 3 times, and gives back a 1D pdl of size 3. Threading works for arbitrary number of dimensions, but it's best to refrain from higher dim pdls unless you have already decided to become a PDL wiz / witch. Not all PDL::Stats methods thread. As a rule of thumb, if a function has a signature attached to it, it threads. perldl Essentially a perl shell with ""use PDL;"" at start up. Comes with the PDL installation. Very handy to try out pdl operations, or just plain perl. print is shortened to p to avoid injury from exessive typing. my goes out of scope at the end of (multi)line input, so mostly you will have to drop the good practice of my here. For more info PDL::Impatient AUTHOR ~~~~~~~~~~~~ ~~~~~ ~~~~~~~~ ~~~~~ ~~~ `` ><(((""> Copyright (C) 2009-2015 Maggie J. Xiong <maggiexyz users.sourceforge.net> All rights reserved. There is no warranty. You are allowed to redistribute this software / documentation as described in the file COPYING in the PDL distribution. × Module Install Instructions To install PDL::Stats, simply copy and paste either of the commands in to your terminal cpanm                      cpanm PDL::Stats CPAN shell                      perl -MCPAN -e shell                     install PDL::Stats For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Science/Numerics"	"Physics::*"	"https://metacpan.org/search?q=physics%3A%3A&size=20"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Search for ""physics::"" - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors 77 results (0.171 seconds) Something missing? Find out why Physics::Unit - Manipulate physics units and dimensions. 2 ++ 2 ++ These modules provide classes for the representation of physical units and quantities, as well as a large library of predefined Physics::Unit objects. New units and quantities can be created with simple human-readable expressions (for example, ""cubic... JBERGER/Physics-Unit-0.54 - 01 Jul 2016 05:12:10 GMT - Search in distribution Physics::Unit::Scalar Physics::Unit::Implementation - This page discusses implementation issues of the Physics/Unit.pm module. lib/Physics/Unit/Script/GenPages.pm 3 more results from Physics-Unit » Physics::Particles - Simulate particle dynamics ++ ++ Physics::Particles is a facility to simulate movements of a small number of particles under a small number of forces that every particle excerts on the others. Complexity increases with particles X particles X forces, so that is why the number of par... SMUELLER/Physics-Particles-1.02 - 16 Mar 2007 18:34:23 GMT - Search in distribution Physics::Springs - Simulate Particle Dynamics with Springs ++ ++ This module is intended as an add-on to the Physics::Particles module (version 1.00 or higher required) and may be used to simulate particle dynamics including spring-like forces between any two particles you specify. Since version 1.00 of this modul... SMUELLER/Physics-Springs-1.01 - 23 Oct 2005 16:28:08 GMT - Search in distribution Physics::Udunits2 - Perl extension to Udunits2 unit system ++ ++ This is a perl interface to the udunits-2 package from unidata. The c-level api has been change to a perl OO-api, i.e. ut_unit ut_get_unit_by_name(ut_system, name) changes in perl to $unit = $system->getUnitByName(name) Lots of information can thus b... HEIKOK/Physics-Udunits2-0.03 - 06 Aug 2009 09:48:11 GMT - Search in distribution Physics::Udunits2::Converter - Perl extension to Udunits2 unit system Physics::Udunits2::Unit - Perl extension to Udunits2 unit system Physics::Udunits2::System - Perl extension to Udunits2 unit system Physics::Lorentz - Package for 4-vectors and transformations 1 ++ 1 ++ This package mainly just loads Physics::Lorentz::Transformation and Physics::Lorentz::Vector. The whole of the ""Physics::Lorentz"" distribution is intended to help with dealing with 4-vectors and (Poincare) transformations in the associated vector spa... SMUELLER/Physics-Lorentz-0.01 - 06 Dec 2006 15:15:55 GMT - Search in distribution Physics::Lorentz::Vector - Representation of 4-vectors Physics::Lorentz::Transformation - Representation of Poincare Transformations Physics::UEMColumn - An Implementation of the Analytic Gaussian (AG) Model for Ultrafast Electron Pulse Propagation ++ ++ Physics::UEMColumn is an implementation of the Analytic Gaussian (AG) electron pulse propagation model, presented by Michalik and Sipe (<http://dx.doi.org/10.1063/1.2178855>) and extended by Berger and Schroeder (<http://dx.doi.org/10.1063/1.3512847>... JBERGER/Physics-UEMColumn-0.901 - 12 Mar 2013 19:46:10 GMT - Search in distribution Physics::UEMColumn::Laser Physics::UEMColumn::Element - Base class for ""optical"" elements in a UEM system Physics::UEMColumn::RFCavity - A class representing an RF cavity in a UEM system 7 more results from Physics-UEMColumn » Physics::RayTransfer - Object-oriented ray transfer analysis ++ ++ This physics module is a helper for creating a system of ray transfer matrices (RTM) for analyzing optical systems. The most useful functionality is related to laser cavity stability analysis.... JBERGER/Physics-RayTransfer-0.003 - 05 Apr 2012 21:26:40 GMT - Search in distribution Physics::Psychrometry - Perl extension for calculating Psychrometric measures for moist air ++ ++ Calculates a variety of Psychrometric values for moist air Blah blah blah. EXPORT None by default.... MIKEM/Physics-Psychrometry-1.2 - 22 Mar 2013 07:31:55 GMT - Search in distribution Physics::Springs::Friction - Simulate Dynamics with Springs and Friction ++ ++ This module is intended as an add-on to the Physics::Springs (from version 1.00) and Physics::Particles (from version 1.00) modules and may be used to simulate particle dynamics including spring-like forces between any two particles you specify and f... SMUELLER/Physics-Springs-Friction-1.01 - 23 Oct 2005 16:28:26 GMT - Search in distribution Physics::Water::SoundSpeed - Perl module to calculate the speed of sound in pure water and sea water as a function of temperature (and pressure) ++ ++ This module Physics::Water::SoundSpeed calculates the speed of sound in pure water for a given temperature and pressure and Sea water for a given temperature, pressure and salinity. Defaults units are SI Meters, Seconds, MPa EXPORT None by default.... TROXEL/Physics-Water-SoundSpeed-0.92 - 02 Apr 2012 06:03:02 GMT - Search in distribution App::Physics::ParticleMotion - Simulations from Differential Equations ++ ++ tk-motion (and its implementation App::Physics::ParticleMotion) is a tool to create particle simulations from any number of correlated second order differential equations. From a more mathematical point of view, one could also say it helps visualize ... SMUELLER/App-Physics-ParticleMotion-1.01 - 11 Dec 2005 19:01:31 GMT - Search in distribution AI::Evolve::Befunge::Physics - Physics engine base class ++ ++ This module serves a double purpose. First, it serves as a plugin repository for Physics engines. It allows physics engines to register themselves, and it allows callers to fetch entries from the database (indexed by the name of the Physics engine). ... INFINOID/AI-Evolve-Befunge-0.03 - 06 Apr 2009 14:31:52 GMT - Search in distribution AI::Evolve::Befunge::Physics::ttt - a tic tac toe game AI::Evolve::Befunge::Physics::othello - an othello game AI::Evolve::Befunge - practical evolution of Befunge AI programs 6 more results from AI-Evolve-Befunge » Task::App::Physics::ParticleMotion - All modules required for the tk-motion application ++ ++ Config::Tiny Math::Project3D Math::RungeKutta Math::Symbolic Tk Tk::Cloth App::Physics::ParticleMotion... SMUELLER/Task-App-Physics-ParticleMotion-1.02 - 30 Aug 2006 11:29:15 GMT - Search in distribution lib/OpenGL/Earth/Physics.pm ++ ++ COSIMO/OpenGL-Earth-0.05 - 26 Jan 2014 10:57:50 GMT - Search in distribution lib/PhysicsPerl/Config.pm ++ ++ WBRASWELL/PhysicsPerl-0.100000 - 27 Mar 2016 13:35:22 GMT - Search in distribution lib/PhysicsPerl.pm lib/PhysicsPerl/Astro/System.pm lib/PhysicsPerl/Astro/BodyRenderer2D.pm 2 more results from PhysicsPerl » Box2D - 2D Physics Library 2 ++ 2 ++ Box2D is a package of Perl modules that provide an object oriented interface to the Box2D Physics Engine <http://www.box2d.org/> for Perl 5.... JTPALMER/Box2D-0.07 - 07 Apr 2012 01:07:16 GMT - Search in distribution Box2D::b2Manifold - Manifold for two touching convex shapes. Box2D::b2ContactListener - Implement this class to get contact information. Alien::Chipmunk - Alien package for the Chipmunk Physics library ++ ++ Alien::Chipmunk installs and downloads the Chipmunk Physics library.... JTPALMER/Alien-Chipmunk-0.001002 - 17 Apr 2016 18:08:54 GMT - Search in distribution HEP::Names::LaTeX - formats plain names of high energy physics (HEP) particles to LaTeX ++ ++ Converts plain HEP particle names to nice LaTeX format. For now only one raw particle name format is implemented, namely that of HEP::MCNS.... PHILHA/HEP-Names-LaTeX-0.01 - 28 May 2015 14:28:31 GMT - Search in distribution Treex - Natural Language Processing framework 4 ++ 4 ++ POPEL/Treex-Core-2.20160630 - 30 Jun 2016 12:01:33 GMT - Search in distribution stime - print current time information to standard out ++ ++ This program prints current local time, UTC, Julian date, modified Julian date, current equinox and year day to standard output. Additionally, local sidereal time for the specified telescope is also displayed.... TJENNESS/Astro-PAL-1.07 - 01 Aug 2014 02:51:08 GMT - Search in distribution « 1 2 3 4 » Results per page: 10 20 50 100 200 500   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"REST Frameworks"	"Catalyst::Action::REST"	"https://metacpan.org/pod/Catalyst::Action::REST"	"Automated REST Method Dispatching"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Catalyst::Action::REST - Automated REST Method Dispatching - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors John Napiorkowski  /  1.20 (JJNAPIORK on 2015-10-29) 1.19 (FREW on 2015-02-06) 1.13 (JJNAPIORK on 2013-11-08) 1.12 (JJNAPIORK on 2013-09-11) 1.11 (ILMARI on 2013-06-16) 1.10 (ILMARI on 2013-04-22) 1.09 (ILMARI on 2013-04-19) 1.08 (BOBTFISH on 2013-04-16) 1.07 (BOBTFISH on 2013-04-11) 1.06 (BOBTFISH on 2012-12-11) 1.05 (BOBTFISH on 2012-07-02) 1.04 (BOBTFISH on 2012-06-30) 1.03 (BOBTFISH on 2012-06-27) 1.02 (BOBTFISH on 2012-06-05) 1.01 (BOBTFISH on 2012-05-29) 1.00 (BOBTFISH on 2012-04-13) 0.99 (BOBTFISH on 2012-02-28) 0.98 (BOBTFISH on 2012-02-21) 0.97 (BOBTFISH on 2012-02-21) 0.96 (BOBTFISH on 2012-01-30) 0.95 (BOBTFISH on 2012-01-04) 0.94 (BOBTFISH on 2011-12-09) 0.93 (BPHILLIPS on 2011-10-12) 0.91 (BOBTFISH on 2011-10-01) 0.91 (FLORA on 2011-08-04) 0.90 (BOBTFISH on 2011-02-25) 0.89 (DROLSKY on 2011-01-24) 0.88 (BOBTFISH on 2011-01-11) 0.87 (BOBTFISH on 2010-11-03) 0.86 (BOBTFISH on 2010-09-01) 0.85 (BOBTFISH on 2010-05-13) 0.84 (BOBTFISH on 2010-05-06) 0.83 (BOBTFISH on 2010-02-08) 0.82 (BOBTFISH on 2010-02-04) 0.81 (BOBTFISH on 2010-01-14) 0.80 (BOBTFISH on 2009-12-19) 0.79 (BOBTFISH on 2009-12-11) 0.78 (BOBTFISH on 2009-09-28) 0.77 (BOBTFISH on 2009-08-27) 0.76 (BOBTFISH on 2009-08-21) 0.75 (BOBTFISH on 2009-08-17) 0.74 (BOBTFISH on 2009-07-22) 0.73 (HDP on 2009-06-28) 0.72 (HDP on 2009-06-25) 0.71 (HDP on 2009-03-28) 0.70 (HDP on 2009-03-28) 0.69 (HDP on 2009-03-26) 0.68 (HDP on 2009-03-26) 0.67 (HDP on 2009-03-26) 0.67_01 DEV (HDP on 2009-03-25) 0.66 (JSHIRLEY on 2008-08-22) 0.65 (JSHIRLEY on 2008-08-20) 0.64 (JSHIRLEY on 2008-08-14) 0.63 (JSHIRLEY on 2008-08-07) 0.62 (JSHIRLEY on 2008-07-02) 0.61 (JSHIRLEY on 2008-06-30) 0.60 (HOLOWAY on 2008-01-04) 0.50 (HOLOWAY on 2007-07-07) 0.41 (HOLOWAY on 2007-05-24) 1.18 (FREW on 2015-01-20) 1.17 (FREW on 2014-10-24) 1.16 (FREW on 2014-09-12) 1.15 (FREW on 2014-05-07) 1.14 (FREW on 2013-12-27) 0.40 (HOLOWAY on 2007-03-10) 0.31 (HOLOWAY on 2006-12-06) 0.30 (HOLOWAY on 2006-12-04) 0.2 (HOLOWAY on 2006-12-01) 0.1 (HOLOWAY on 2006-11-20) Catalyst-Action-REST-1.20 15 ++ 15 ++  / Catalyst::Action::REST 29 Oct 2015 20:34:02 GMT Module version: 1.20 Source (raw) Browse (raw) Changes Issues (26) Testers (1370 / 14 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (48.68Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.19 (FREW on 2015-02-06) 1.13 (JJNAPIORK on 2013-11-08) 1.12 (JJNAPIORK on 2013-09-11) 1.11 (ILMARI on 2013-06-16) 1.10 (ILMARI on 2013-04-22) 1.09 (ILMARI on 2013-04-19) 1.08 (BOBTFISH on 2013-04-16) 1.07 (BOBTFISH on 2013-04-11) 1.06 (BOBTFISH on 2012-12-11) 1.05 (BOBTFISH on 2012-07-02) 1.04 (BOBTFISH on 2012-06-30) 1.03 (BOBTFISH on 2012-06-27) 1.02 (BOBTFISH on 2012-06-05) 1.01 (BOBTFISH on 2012-05-29) 1.00 (BOBTFISH on 2012-04-13) 0.99 (BOBTFISH on 2012-02-28) 0.98 (BOBTFISH on 2012-02-21) 0.97 (BOBTFISH on 2012-02-21) 0.96 (BOBTFISH on 2012-01-30) 0.95 (BOBTFISH on 2012-01-04) 0.94 (BOBTFISH on 2011-12-09) 0.93 (BPHILLIPS on 2011-10-12) 0.91 (BOBTFISH on 2011-10-01) 0.91 (FLORA on 2011-08-04) 0.90 (BOBTFISH on 2011-02-25) 0.89 (DROLSKY on 2011-01-24) 0.88 (BOBTFISH on 2011-01-11) 0.87 (BOBTFISH on 2010-11-03) 0.86 (BOBTFISH on 2010-09-01) 0.85 (BOBTFISH on 2010-05-13) 0.84 (BOBTFISH on 2010-05-06) 0.83 (BOBTFISH on 2010-02-08) 0.82 (BOBTFISH on 2010-02-04) 0.81 (BOBTFISH on 2010-01-14) 0.80 (BOBTFISH on 2009-12-19) 0.79 (BOBTFISH on 2009-12-11) 0.78 (BOBTFISH on 2009-09-28) 0.77 (BOBTFISH on 2009-08-27) 0.76 (BOBTFISH on 2009-08-21) 0.75 (BOBTFISH on 2009-08-17) 0.74 (BOBTFISH on 2009-07-22) 0.73 (HDP on 2009-06-28) 0.72 (HDP on 2009-06-25) 0.71 (HDP on 2009-03-28) 0.70 (HDP on 2009-03-28) 0.69 (HDP on 2009-03-26) 0.68 (HDP on 2009-03-26) 0.67 (HDP on 2009-03-26) 0.67_01 DEV (HDP on 2009-03-25) 0.66 (JSHIRLEY on 2008-08-22) 0.65 (JSHIRLEY on 2008-08-20) 0.64 (JSHIRLEY on 2008-08-14) 0.63 (JSHIRLEY on 2008-08-07) 0.62 (JSHIRLEY on 2008-07-02) 0.61 (JSHIRLEY on 2008-06-30) 0.60 (HOLOWAY on 2008-01-04) 0.50 (HOLOWAY on 2007-07-07) 0.41 (HOLOWAY on 2007-05-24) 1.18 (FREW on 2015-01-20) 1.17 (FREW on 2014-10-24) 1.16 (FREW on 2014-09-12) 1.15 (FREW on 2014-05-07) 1.14 (FREW on 2013-12-27) 0.40 (HOLOWAY on 2007-03-10) 0.31 (HOLOWAY on 2006-12-06) 0.30 (HOLOWAY on 2006-12-04) 0.2 (HOLOWAY on 2006-12-01) 0.1 (HOLOWAY on 2006-11-20) Diff with version 1.19 (FREW on 2015-02-06) 1.13 (JJNAPIORK on 2013-11-08) 1.12 (JJNAPIORK on 2013-09-11) 1.11 (ILMARI on 2013-06-16) 1.10 (ILMARI on 2013-04-22) 1.09 (ILMARI on 2013-04-19) 1.08 (BOBTFISH on 2013-04-16) 1.07 (BOBTFISH on 2013-04-11) 1.06 (BOBTFISH on 2012-12-11) 1.05 (BOBTFISH on 2012-07-02) 1.04 (BOBTFISH on 2012-06-30) 1.03 (BOBTFISH on 2012-06-27) 1.02 (BOBTFISH on 2012-06-05) 1.01 (BOBTFISH on 2012-05-29) 1.00 (BOBTFISH on 2012-04-13) 0.99 (BOBTFISH on 2012-02-28) 0.98 (BOBTFISH on 2012-02-21) 0.97 (BOBTFISH on 2012-02-21) 0.96 (BOBTFISH on 2012-01-30) 0.95 (BOBTFISH on 2012-01-04) 0.94 (BOBTFISH on 2011-12-09) 0.93 (BPHILLIPS on 2011-10-12) 0.91 (BOBTFISH on 2011-10-01) 0.91 (FLORA on 2011-08-04) 0.90 (BOBTFISH on 2011-02-25) 0.89 (DROLSKY on 2011-01-24) 0.88 (BOBTFISH on 2011-01-11) 0.87 (BOBTFISH on 2010-11-03) 0.86 (BOBTFISH on 2010-09-01) 0.85 (BOBTFISH on 2010-05-13) 0.84 (BOBTFISH on 2010-05-06) 0.83 (BOBTFISH on 2010-02-08) 0.82 (BOBTFISH on 2010-02-04) 0.81 (BOBTFISH on 2010-01-14) 0.80 (BOBTFISH on 2009-12-19) 0.79 (BOBTFISH on 2009-12-11) 0.78 (BOBTFISH on 2009-09-28) 0.77 (BOBTFISH on 2009-08-27) 0.76 (BOBTFISH on 2009-08-21) 0.75 (BOBTFISH on 2009-08-17) 0.74 (BOBTFISH on 2009-07-22) 0.73 (HDP on 2009-06-28) 0.72 (HDP on 2009-06-25) 0.71 (HDP on 2009-03-28) 0.70 (HDP on 2009-03-28) 0.69 (HDP on 2009-03-26) 0.68 (HDP on 2009-03-26) 0.67 (HDP on 2009-03-26) 0.67_01 DEV (HDP on 2009-03-25) 0.66 (JSHIRLEY on 2008-08-22) 0.65 (JSHIRLEY on 2008-08-20) 0.64 (JSHIRLEY on 2008-08-14) 0.63 (JSHIRLEY on 2008-08-07) 0.62 (JSHIRLEY on 2008-07-02) 0.61 (JSHIRLEY on 2008-06-30) 0.60 (HOLOWAY on 2008-01-04) 0.50 (HOLOWAY on 2007-07-07) 0.41 (HOLOWAY on 2007-05-24) 1.18 (FREW on 2015-01-20) 1.17 (FREW on 2014-10-24) 1.16 (FREW on 2014-09-12) 1.15 (FREW on 2014-05-07) 1.14 (FREW on 2013-12-27) 0.40 (HOLOWAY on 2007-03-10) 0.31 (HOLOWAY on 2006-12-06) 0.30 (HOLOWAY on 2006-12-04) 0.2 (HOLOWAY on 2006-12-01) 0.1 (HOLOWAY on 2006-11-20) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 9 PAUSE users 6 non-PAUSE users. JJNAPIORK John Napiorkowski and 1 contributors show them Tomas Doran Dependencies Catalyst::Runtime Class::Inspector JSON::MaybeXS Module::Pluggable::Object Moose MRO::Compat namespace::autoclean Params::Validate URI::Find CPAN Testers List Reverse dependencies Dependency graph × Catalyst-Action-REST-1.20 NAME SYNOPSIS DESCRIPTION METHODS SEE ALSO TROUBLESHOOTING AUTHOR CONTRIBUTORS COPYRIGHT LICENSE NAME Catalyst::Action::REST - Automated REST Method Dispatching SYNOPSIS     sub foo :Local :ActionClass('REST') {       ... do setup for HTTP method specific handlers ...     }      sub foo_GET {       ... do something for GET requests ...     }      # alternatively use an Action     sub foo_PUT : Action {       ... do something for PUT requests ...     } DESCRIPTION This Action handles doing automatic method dispatching for REST requests. It takes a normal Catalyst action, and changes the dispatch to append an underscore and method name. First it will try dispatching to an action with the generated name, and failing that it will try to dispatch to a regular method. For example, in the synopsis above, calling GET on ""/foo"" would result in the foo_GET method being dispatched. If a method is requested that is not implemented, this action will return a status 405 (Method Not Found). It will populate the ""Allow"" header with the list of implemented request methods. You can override this behavior by implementing a custom 405 handler like so:    sub foo_not_implemented {       ... handle not implemented methods ...    } If you do not provide an _OPTIONS subroutine, we will automatically respond with a 200 OK. The ""Allow"" header will be populated with the list of implemented request methods. If you do not provide an _HEAD either, we will auto dispatch to the _GET one in case it exists. It is likely that you really want to look at Catalyst::Controller::REST, which brings this class together with automatic Serialization of requests and responses. When you use this module, it adds the Catalyst::TraitFor::Request::REST role to your request class. METHODS dispatch This method overrides the default dispatch mechanism to the re-dispatching mechanism described above. SEE ALSO You likely want to look at Catalyst::Controller::REST, which implements a sensible set of defaults for a controller doing REST. This class automatically adds the Catalyst::TraitFor::Request::REST role to your request class. If you're writing a web application which provides RESTful responses and still needs to accommodate web browsers, you may prefer to use Catalyst::TraitFor::Request::REST::ForBrowsers instead. Catalyst::Action::Serialize, Catalyst::Action::Deserialize TROUBLESHOOTING Q: I'm getting a ""415 Unsupported Media Type"" error. What gives?! A: Most likely, you haven't set Content-type equal to ""application/json"", or one of the accepted return formats. You can do this by setting it in your query accepted return formats. You can do this by setting it in your query string thusly: ?content-type=application%2Fjson (where %2F == / uri escaped). NOTE Apache will refuse %2F unless configured otherwise. Make sure AllowEncodedSlashes On is in your httpd.conf file in order for this to run smoothly. AUTHOR Adam Jacob <adam@stalecoffee.org>, with lots of help from mst and jrockway Marchex, Inc. paid me while I developed this module. (http://www.marchex.com) CONTRIBUTORS Tomas Doran (t0m) <bobtfish@bobtfish.net> John Goulah Christopher Laco Daisuke Maki <daisuke@endeworks.jp> Hans Dieter Pearcey Brian Phillips <bphillips@cpan.org> Dave Rolsky <autarch@urth.org> Luke Saunders Arthur Axel ""fREW"" Schmidt <frioux@gmail.com> J. Shirley <jshirley@gmail.com> Gavin Henry <ghenry@surevoip.co.uk> Gerv http://www.gerv.net/ Colin Newell <colin@opusvl.com> Wallace Reis <wreis@cpan.org> André Walker (andrewalker) <andre@cpan.org> COPYRIGHT Copyright (c) 2006-2015 the above named AUTHOR and CONTRIBUTORS LICENSE You may distribute this code under the same terms as Perl itself. × Module Install Instructions To install Catalyst::Action::REST, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Catalyst::Action::REST CPAN shell                      perl -MCPAN -e shell                     install Catalyst::Action::REST For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Automated REST Method Dispatching"	"true"
"REST Frameworks"	"Dancer2::Plugin::REST"	"https://metacpan.org/pod/Dancer2::Plugin::REST"	"A plugin for writing RESTful apps with Dancer2"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Dancer2::Plugin::REST - A plugin for writing RESTful apps with Dancer2 - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Yanick Champoux  /  0.27 (YANICK on 2015-12-29) 0.26 (YANICK on 2015-10-15) 0.25 (YANICK on 2014-11-01) 0.24 (YANICK on 2014-09-01) 0.23_00 DEV (YANICK on 2014-08-13) 0.22 (YANICK on 2014-06-05) 0.21 (YANICK on 2013-12-07) 0.20 (YANICK on 2013-10-04) 0.14 (YANICK on 2013-10-04) 0.13 (YANICK on 2013-10-04) 0.12 (YANICK on 2013-07-06) 0.11 (YANICK on 2013-07-05) 0.10 (YANICK on 2013-07-04) 0.09 (YANICK on 2013-02-26) 0.08 (YANICK on 2013-02-24) Dancer2-Plugin-REST-0.27 4 ++ 4 ++  / Dancer2::Plugin::REST 29 Dec 2015 18:04:29 GMT Module version: 0.27 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues Testers (459 / 3 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (21.36Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.26 (YANICK on 2015-10-15) 0.25 (YANICK on 2014-11-01) 0.24 (YANICK on 2014-09-01) 0.23_00 DEV (YANICK on 2014-08-13) 0.22 (YANICK on 2014-06-05) 0.21 (YANICK on 2013-12-07) 0.20 (YANICK on 2013-10-04) 0.14 (YANICK on 2013-10-04) 0.13 (YANICK on 2013-10-04) 0.12 (YANICK on 2013-07-06) 0.11 (YANICK on 2013-07-05) 0.10 (YANICK on 2013-07-04) 0.09 (YANICK on 2013-02-26) 0.08 (YANICK on 2013-02-24) Diff with version 0.26 (YANICK on 2015-10-15) 0.25 (YANICK on 2014-11-01) 0.24 (YANICK on 2014-09-01) 0.23_00 DEV (YANICK on 2014-08-13) 0.22 (YANICK on 2014-06-05) 0.21 (YANICK on 2013-12-07) 0.20 (YANICK on 2013-10-04) 0.14 (YANICK on 2013-10-04) 0.13 (YANICK on 2013-10-04) 0.12 (YANICK on 2013-07-06) 0.11 (YANICK on 2013-07-05) 0.10 (YANICK on 2013-07-04) 0.09 (YANICK on 2013-02-26) 0.08 (YANICK on 2013-02-24) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 1 PAUSE user 3 non-PAUSE users. YANICK Yanick Champoux and 10 contributors show them Dancer Core Developers Alexis Sukrieh Davs Franck Cuny James Aitken João Bolila Joshua Keroes Peter Mottram Russell Jenkins Sawyer X Dependencies Carp Class::Load Dancer2 Dancer2::Plugin strict warnings CPAN Testers List Reverse dependencies Dependency graph × Dancer2-Plugin-REST-0.27 NAME VERSION DESCRIPTION SYNOPSYS CONFIGURATION serializers KEYWORDS prepare_serializer_for_format resource helpers status_ok status_created status_accepted status_bad_request status_not_found LICENCE AUTHORS SEE ALSO AUTHOR COPYRIGHT AND LICENSE NAME Dancer2::Plugin::REST - A plugin for writing RESTful apps with Dancer2 VERSION version 0.27 DESCRIPTION This plugin helps you write a RESTful webservice with Dancer2. SYNOPSYS     package MyWebService;      use Dancer2;     use Dancer2::Plugin::REST;      prepare_serializer_for_format;      get '/user/:id.:format' => sub {         User->find(params->{id});     };      get qr{^/user/(?<id>\d+)\.(?<format>\w+)} => sub {         User->find(captures->{id});     };      # curl http://mywebservice/user/42.json     { ""id"": 42, ""name"": ""John Foo"", email: ""john.foo@example.com""}      # curl http://mywebservice/user/42.yml     --     id: 42     name: ""John Foo""     email: ""john.foo@example.com"" CONFIGURATION serializers The default format serializer hash which maps a given :format to a Dancer2::Serializer::* serializer. Unless overriden in the configuration, it defaults to:     serializers:       json: JSON       yml:  YAML       dump: Dumper KEYWORDS prepare_serializer_for_format When this pragma is used, a before filter is set by the plugin to automatically change the serializer when a format is detected in the URI. That means that each route you define with a :format param or captures token will trigger a serializer definition, if the format is known. This lets you define all the REST actions you like as regular Dancer2 route handlers, without explicitly handling the outgoing data format. Regexp routes will use the file-extension from captures->{'format'} to determine the serialization format. resource This keyword lets you declare a resource your application will handle.     resource user =>         get    => sub { # return user where id = params->{id}   },         create => sub { # create a new user with params->{user} },         delete => sub { # delete user where id = params->{id}   },         update => sub { # update user with params->{user}       };      # this defines the following routes:     # GET /user/:id     # GET /user/:id.:format     # POST /user     # POST /user.:format     # DELETE /user/:id     # DELETE /user/:id.:format     # PUT /user/:id     # PUT /user/:id.:format helpers Some helpers are available. This helper will set an appropriate HTTP status for you. status_ok     status_ok({users => {...}}); Set the HTTP status to 200 status_created     status_created({users => {...}}); Set the HTTP status to 201 status_accepted     status_accepted({users => {...}}); Set the HTTP status to 202 status_bad_request     status_bad_request(""user foo can't be found""); Set the HTTP status to 400. This function as for argument a scalar that will be used under the key error. status_not_found     status_not_found(""users doesn't exists""); Set the HTTP status to 404. This function as for argument a scalar that will be used under the key error. LICENCE This module is released under the same terms as Perl itself. AUTHORS This module has been written by Alexis Sukrieh <sukria@sukria.net> and Franck Cuny. SEE ALSO Dancer2 http://en.wikipedia.org/wiki/Representational_State_Transfer AUTHOR Dancer Core Developers COPYRIGHT AND LICENSE This software is copyright (c) 2010 by Alexis Sukrieh. This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself. × Module Install Instructions To install Dancer2::Plugin::REST, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Dancer2::Plugin::REST CPAN shell                      perl -MCPAN -e shell                     install Dancer2::Plugin::REST For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"A plugin for writing RESTful apps with Dancer2"	"true"
"REST Frameworks"	"Dancer::Plugin::REST"	"https://metacpan.org/pod/Dancer::Plugin::REST"	"A plugin for writing RESTful apps with Dancer"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Dancer::Plugin::REST - A plugin for writing RESTful apps with Dancer - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Yanick Champoux  /  0.11 (YANICK on 2014-03-25) 0.10 (YANICK on 2014-03-22) 0.09 (YANICK on 2014-03-12) 0.08 (YANICK on 2014-03-11) 0.07 (SUKRIA on 2011-11-01) 0.06 (SUKRIA on 2011-05-28) 0.05 (SUKRIA on 2011-03-04) 0.04 (SUKRIA on 2010-12-22) 0.03 (SUKRIA on 2010-10-18) 0.02 (SUKRIA on 2010-10-14) 0.0001_01 DEV (SUKRIA on 2010-05-06) Dancer-Plugin-REST-0.11 5 ++ 5 ++  / Dancer::Plugin::REST 25 Mar 2014 12:06:40 GMT Module version: 0.11 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues Testers (1357 / 0 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (18.69Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.10 (YANICK on 2014-03-22) 0.09 (YANICK on 2014-03-12) 0.08 (YANICK on 2014-03-11) 0.07 (SUKRIA on 2011-11-01) 0.06 (SUKRIA on 2011-05-28) 0.05 (SUKRIA on 2011-03-04) 0.04 (SUKRIA on 2010-12-22) 0.03 (SUKRIA on 2010-10-18) 0.02 (SUKRIA on 2010-10-14) 0.0001_01 DEV (SUKRIA on 2010-05-06) Diff with version 0.10 (YANICK on 2014-03-22) 0.09 (YANICK on 2014-03-12) 0.08 (YANICK on 2014-03-11) 0.07 (SUKRIA on 2011-11-01) 0.06 (SUKRIA on 2011-05-28) 0.05 (SUKRIA on 2011-03-04) 0.04 (SUKRIA on 2010-12-22) 0.03 (SUKRIA on 2010-10-18) 0.02 (SUKRIA on 2010-10-14) 0.0001_01 DEV (SUKRIA on 2010-05-06) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 3 PAUSE users 2 non-PAUSE users. YANICK Yanick Champoux and 4 contributors show them Alexis Sukrieh Franck Cuny Breno G. de Oliveira James Aitken Dependencies Carp Dancer Dancer::Plugin strict warnings CPAN Testers List Reverse dependencies Dependency graph × Dancer-Plugin-REST-0.11 NAME VERSION DESCRIPTION SYNOPSYS KEYWORDS prepare_serializer_for_format resource helpers status_ok status_created status_accepted status_bad_request status_not_found LICENCE AUTHORS SEE ALSO AUTHORS COPYRIGHT AND LICENSE NAME Dancer::Plugin::REST - A plugin for writing RESTful apps with Dancer VERSION version 0.11 DESCRIPTION This plugin helps you write a RESTful webservice with Dancer. SYNOPSYS     package MyWebService;      use Dancer;     use Dancer::Plugin::REST;      prepare_serializer_for_format;      get '/user/:id.:format' => sub {         User->find(params->{id});     };      # curl http://mywebservice/user/42.json     { ""id"": 42, ""name"": ""John Foo"", email: ""john.foo@example.com""}      # curl http://mywebservice/user/42.yml     --     id: 42     name: ""John Foo""     email: ""john.foo@example.com"" KEYWORDS prepare_serializer_for_format When this pragma is used, a before filter is set by the plugin to automatically change the serializer when a format is detected in the URI. That means that each route you define with a :format token will trigger a serializer definition, if the format is known. This lets you define all the REST actions you like as regular Dancer route handlers, without explicitly handling the outgoing data format. resource This keyword lets you declare a resource your application will handle.     resource user =>         get    => sub { # return user where id = params->{id}   },         create => sub { # create a new user with params->{user} },         delete => sub { # delete user where id = params->{id}   },         update => sub { # update user with params->{user}       };      # this defines the following routes:     # GET /user/:id     # GET /user/:id.:format     # POST /user     # POST /user.:format     # DELETE /user/:id     # DELETE /user/:id.:format     # PUT /user/:id     # PUT /user/:id.:format helpers Some helpers are available. This helper will set an appropriate HTTP status for you. status_ok     status_ok({users => {...}}); Set the HTTP status to 200 status_created     status_created({users => {...}}); Set the HTTP status to 201 status_accepted     status_accepted({users => {...}}); Set the HTTP status to 202 status_bad_request     status_bad_request(""user foo can't be found""); Set the HTTP status to 400. This function as for argument a scalar that will be used under the key error. status_not_found     status_not_found(""users doesn't exists""); Set the HTTP status to 404. This function as for argument a scalar that will be used under the key error. LICENCE This module is released under the same terms as Perl itself. AUTHORS This module has been written by Alexis Sukrieh <sukria@sukria.net> and Franck Cuny. SEE ALSO Dancer http://en.wikipedia.org/wiki/Representational_State_Transfer AUTHORS Alexis Sukrieh <sukria@sukria.net> Franck Cuny <franckc@cpan.org> COPYRIGHT AND LICENSE This software is copyright (c) 2010 by Alexis Sukrieh. This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself. × Module Install Instructions To install Dancer::Plugin::REST, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Dancer::Plugin::REST CPAN shell                      perl -MCPAN -e shell                     install Dancer::Plugin::REST For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"A plugin for writing RESTful apps with Dancer"	"true"
"REST Frameworks"	"Raisin"	"https://metacpan.org/pod/Raisin"	"a REST API micro framework for Perl"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Raisin - a REST API micro framework for Perl. - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Artur Khabibullin  /  0.63 (RTKH on 2016-02-18) 0.62 (RTKH on 2015-06-11) 0.61 (RTKH on 2015-05-16) 0.60 (RTKH on 2015-05-04) 0.59 (RTKH on 2015-03-31) 0.58 (RTKH on 2015-03-05) 0.57 (RTKH on 2015-02-05) 0.56 (RTKH on 2014-12-14) 0.55 (RTKH on 2014-12-12) 0.5200 (RTKH on 2014-11-14) 0.5101 (RTKH on 2014-11-06) 0.5100 (RTKH on 2014-11-05) 0.5000 (RTKH on 2014-09-09) 0.4003 (RTKH on 2014-07-28) 0.4002 (RTKH on 2014-07-21) 0.4001 (RTKH on 2014-07-18) 0.4000 (RTKH on 2014-07-17) 0.36 (RTKH on 2014-06-27) 0.35 (RTKH on 2014-06-16) 0.30 (RTKH on 2014-06-05) 0.29 (RTKH on 2014-05-21) 0.28 (RTKH on 2014-05-19) 0.27 (RTKH on 2014-05-15) 0.26 (RTKH on 2014-05-02) 0.25 (RTKH on 2014-03-30) 0.24 (RTKH on 2014-03-28) 0.23.0 (RTKH on 2014-03-28) 0.22.1 (RTKH on 2014-03-28) 0.22 (RTKH on 2014-03-27) 0.21 (RTKH on 2014-03-26) 0.2 (RTKH on 2014-03-24) 0.13 (RTKH on 2014-02-28) 0.12 (RTKH on 2014-02-27) 0.11 (RTKH on 2014-02-26) 0.1 (RTKH on 2014-02-26) Raisin-0.63 22 ++ 22 ++  / Raisin 18 Feb 2016 08:20:35 GMT Module version: 0.63 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues (0) Testers (273 / 0 / 6) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (45.5Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.62 (RTKH on 2015-06-11) 0.61 (RTKH on 2015-05-16) 0.60 (RTKH on 2015-05-04) 0.59 (RTKH on 2015-03-31) 0.58 (RTKH on 2015-03-05) 0.57 (RTKH on 2015-02-05) 0.56 (RTKH on 2014-12-14) 0.55 (RTKH on 2014-12-12) 0.5200 (RTKH on 2014-11-14) 0.5101 (RTKH on 2014-11-06) 0.5100 (RTKH on 2014-11-05) 0.5000 (RTKH on 2014-09-09) 0.4003 (RTKH on 2014-07-28) 0.4002 (RTKH on 2014-07-21) 0.4001 (RTKH on 2014-07-18) 0.4000 (RTKH on 2014-07-17) 0.36 (RTKH on 2014-06-27) 0.35 (RTKH on 2014-06-16) 0.30 (RTKH on 2014-06-05) 0.29 (RTKH on 2014-05-21) 0.28 (RTKH on 2014-05-19) 0.27 (RTKH on 2014-05-15) 0.26 (RTKH on 2014-05-02) 0.25 (RTKH on 2014-03-30) 0.24 (RTKH on 2014-03-28) 0.23.0 (RTKH on 2014-03-28) 0.22.1 (RTKH on 2014-03-28) 0.22 (RTKH on 2014-03-27) 0.21 (RTKH on 2014-03-26) 0.2 (RTKH on 2014-03-24) 0.13 (RTKH on 2014-02-28) 0.12 (RTKH on 2014-02-27) 0.11 (RTKH on 2014-02-26) 0.1 (RTKH on 2014-02-26) Diff with version 0.62 (RTKH on 2015-06-11) 0.61 (RTKH on 2015-05-16) 0.60 (RTKH on 2015-05-04) 0.59 (RTKH on 2015-03-31) 0.58 (RTKH on 2015-03-05) 0.57 (RTKH on 2015-02-05) 0.56 (RTKH on 2014-12-14) 0.55 (RTKH on 2014-12-12) 0.5200 (RTKH on 2014-11-14) 0.5101 (RTKH on 2014-11-06) 0.5100 (RTKH on 2014-11-05) 0.5000 (RTKH on 2014-09-09) 0.4003 (RTKH on 2014-07-28) 0.4002 (RTKH on 2014-07-21) 0.4001 (RTKH on 2014-07-18) 0.4000 (RTKH on 2014-07-17) 0.36 (RTKH on 2014-06-27) 0.35 (RTKH on 2014-06-16) 0.30 (RTKH on 2014-06-05) 0.29 (RTKH on 2014-05-21) 0.28 (RTKH on 2014-05-19) 0.27 (RTKH on 2014-05-15) 0.26 (RTKH on 2014-05-02) 0.25 (RTKH on 2014-03-30) 0.24 (RTKH on 2014-03-28) 0.23.0 (RTKH on 2014-03-28) 0.22.1 (RTKH on 2014-03-28) 0.22 (RTKH on 2014-03-27) 0.21 (RTKH on 2014-03-26) 0.2 (RTKH on 2014-03-24) 0.13 (RTKH on 2014-02-28) 0.12 (RTKH on 2014-02-27) 0.11 (RTKH on 2014-02-26) 0.1 (RTKH on 2014-02-26) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 9 PAUSE users 13 non-PAUSE users. RTKH Artur Khabibullin and 2 contributors show them Artur Khabibullin - rtkh@cpan.org Vladimir Lettiev Dependencies JSON Plack Plack::Middleware::CrossOrigin Scalar::Util Type::Tiny YAML CPAN Testers List Reverse dependencies Dependency graph × Raisin-0.63 NAME SYNOPSIS DESCRIPTION FUNCTIONS API DESCRIPTION resource route_param del, get, patch, post, put desc summary tags params api_default_format api_format api_version plugin middleware mount run INSIDE ROUTE req res param include_missing session present PARAMETERS Declared parameters Validation and coercion Types HOOKS API FORMATS LOGGING API DOCUMENTATION Raisin script Swagger MIDDLEWARE PLUGINS TESTING DEPLOYING Kelp Dancer Mojolicious::Lite EXAMPLES ROADMAP GITHUB ACKNOWLEDGEMENTS AUTHOR LICENSE NAME Raisin - a REST API micro framework for Perl. SYNOPSIS     use strict;     use warnings;      use utf8;      use Raisin::API;     use Types::Standard qw(Any Int Str);      my %USERS = (         1 => {             name => 'Darth Wader',             password => 'deathstar',             email => 'darth@deathstar.com',         },         2 => {             name => 'Luke Skywalker',             password => 'qwerty',             email => 'l.skywalker@jedi.com',         },     );      plugin 'Swagger', enable => 'CORS';     api_format 'json';      swagger_setup(         title => 'A POD synopsis API',         description => 'An example of API documentation.',         #terms_of_service => '',          contact => {             name => 'Artur Khabibullin',             url => 'http://github.com/khrt',             email => 'rtkh@cpan.org',         },          license => {             name => 'Perl license',             url => 'http://dev.perl.org/licenses/',         },     );      desc 'Users API';     resource users => sub {         summary 'List users';         params(             optional => { name => 'start', type => Int, default => 0, desc => 'Pager (start)' },             optional => { name => 'count', type => Int, default => 10, desc => 'Pager (count)' },         );         get sub {             my $params = shift;              my @users                 = map { { id => $_, %{ $USERS{$_} } } }                   sort { $a <=> $b } keys %USERS;              my $max_count = scalar(@users) - 1;             my $start = $params->{start} > $max_count ? $max_count : $params->{start};             my $count = $params->{count} > $max_count ? $max_count : $params->{count};              my @slice = @users[$start .. $count];             { data => \@slice }         };          summary 'List all users at once';         get 'all' => sub {             my @users                 = map { { id => $_, %{ $USERS{$_} } } }                   sort { $a <=> $b } keys %USERS;             { data => \@users }         };          summary 'Create new user';         params(             requires => { name => 'name', type => Str, desc => 'User name' },             requires => { name => 'password', type => Str, desc => 'User password' },             optional => { name => 'email', type => Str, default => undef, regex => qr/.+\@.+/, desc => 'User email' },         );         post sub {             my $params = shift;              my $id = max(keys %USERS) + 1;             $USERS{$id} = $params;              { success => 1 }         };          desc 'Actions on the user';         params requires => { name => 'id', type => Int, desc => 'User ID' };         route_param 'id' => sub {             summary 'Show user';             get sub {                 my $params = shift;                 $USERS{ $params->{id} };             };              summary 'Delete user';             del sub {                 my $params = shift;                 { success => delete $USERS{ $params->{id} } };             };         };          summary 'NOP';         get nop => sub { };     };      desc 'Echo API endpoint';     resource echo => sub {         params(optional => { name => 'data0', type => Any, default => ""ёй"" });         get sub { shift };     };      run; DESCRIPTION Raisin is a REST API micro framework for Perl. It's designed to run on Plack, providing a simple DSL to easily develop RESTful APIs. It was inspired by Grape. FUNCTIONS API DESCRIPTION resource Adds a route to an application.     resource user => sub { ... }; route_param Define a route parameter as a namespace route_param.     route_param id => sub { ... }; del, get, patch, post, put Shortcuts to add a route restricted to the corresponding HTTP method.     get sub { 'GET' };      del 'all' => sub { 'OK' };      params(         requires => { name => 'id', type => Int },         optional => { name => 'key', type => Str },     );     get sub { 'GET' };      desc 'Put data';     params(         required => { name => 'id', type => Int },         optional => { name => 'name', type => Str },     );     put 'all' => sub {         'PUT'     }; desc Can be applied to resource or any of the HTTP method to add a verbose explanation for an operation or for a resource.     desc 'Some long explanation about an action';     put sub { ... };      desc 'Some exaplanation about a group of actions',     resource => 'user' => sub { ... } summary Can be applied to any of the HTTP method to add a short summary of what the operation does.     summary 'Some summary';     put sub { ... }; tags A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.     tags 'delete', 'user';     delete sub { ... }; By default tags are added automatically based on it's namespace but you always can overwrite it using a tags function. params Here you can define validations and coercion options for your parameters. Can be applied to any HTTP method and/or route_param to describe parameters.     params(         requires => { name => 'name', type => Str },         optional => { name => 'start', type => Int, default => 0 },         optional => { name => 'count', type => Int, default => 10 },     );     get sub { ... };      params(         requires => { name => 'id', type => Int, desc => 'User ID' },     );     route_param 'id' => sub { ... }; For more see ""Validation-and-coercion"" in Raisin. api_default_format Specifies default API format mode when formatter doesn't specified by API user. E.g. URI is asked without an extension (json, yaml) or Accept header isn't specified. Default value: YAML.     api_default_format 'json'; See also ""API-FORMATS"" in Raisin. api_format Restricts API to use only specified formatter to serialize and deserialize data. Already exists Raisin::Plugin::Format::JSON and Raisin::Plugin::Format::YAML.     api_format 'json'; See also ""API-FORMATS"" in Raisin. api_version Sets up an API version header.     api_version 1.23; plugin Loads a Raisin module. A module options may be specified after the module name. Compatible with Kelp modules.     plugin 'Swagger', enable => 'CORS'; middleware Adds a middleware to your application.     middleware '+Plack::Middleware::Session' => { store => 'File' };     middleware '+Plack::Middleware::ContentLength';     middleware 'Runtime'; # will be loaded Plack::Middleware::Runtime mount Mounts multiple API implementations inside another one. These don't have to be different versions, but may be components of the same API. In RaisinApp.pm:     package RaisinApp;      use Raisin::API;      api_format 'json';      mount 'RaisinApp::User';     mount 'RaisinApp::Host';      1; run Returns the PSGI application. INSIDE ROUTE req Provides quick access to the Raisin::Request object for the current route. Use req to get access to request headers, params, etc.     use DDP;     p req->headers;     p req->params;      say req->header('X-Header'); See also Plack::Request. res Provides quick access to the Raisin::Response object for the current route. Use res to set up response parameters.     res->status(403);     res->headers(['X-Application' => 'Raisin Application']); See also Plack::Response. param Returns request parameters. Without an argument will return an array of all input parameters. Otherwise it will return the value of the requested parameter. Returns Hash::MultiValue object.     say param('key'); # -> value     say param(); # -> { key => 'value', foo => 'bar' } include_missing Returns all declared parameters even if there is no value for a param. See ""Declared-parameters"" in Raisin. session Returns psgix.session hash. When it exists, you can retrieve and store per-session data.     # store param     session->{hello} = 'World!';      # read param     say session->{name}; present Raisin hash a built-in present method, which accepts two arguments: an object to be presented and an options associated with it. The options hash may include with key, which is defined the entity to expose. See Raisin::Entity.     my $artists = $schema->resultset('Artist');      present data => $artists, with => 'MusicApp::Entity::Artist';     present count => $artists->count; Raisin::Entity supports DBIx::Class and Rose::DB::Object. For details see examples in examples/music-app and Raisin::Entity. PARAMETERS Request parameters are available through the params HASH. This includes GET, POST and PUT parameters, along with any named parameters you specify in your route strings. Parameters are automatically populated from the request body on POST and PUT for form input, JSON and YAML content-types. The request:     curl localhost:5000/data -H Content-Type:application/json -d '{""id"": ""14""}' The Raisin endpoint:     post data => sub { param('id') }; Multipart POSTs and PUTs are supported as well. In the case of conflict between either of: route string parameters; GET, POST and PUT parameters; contents of request body on POST and PUT; route string parameters will have precedence. Query string and body parameters will be merged (see ""parameters"" in Plack::Request) Declared parameters Raisin allows you to access only the parameters that have been declared by your ""params"" in Raisin block. By default you can get all declared parameter as a first argument passed to your route subroutine. Application:     api_format 'json';      post data => sub {         my $params = shift;         { data => $params };     }; Request:     curl -X POST -H ""Content-Type: application/json"" localhost:5000/signup -d '{""id"": 42}' Response:     { ""data"": nil } Once we add parameters requirements, Raisin will start returning only the declared params. Application:     api_format 'json';      params         required => { name => 'id', type => Int };         optional => { name => 'email', type => Str };     post data => sub {         my $params = shift;         { data => $params };     }; Request:     curl -X POST -H ""Content-Type: application/json"" localhost:5000/signup -d '{""id"": 42, ""key"": ""value""}' Response:     { ""data"": { ""id"": 42 } } By default declared parameters doesn't contain parameters that has undef value. If you want to return all parameters you can use the include_missing function. Application:     api_format 'json';      params         required => { name => 'id', type => Int },         optional => { name => 'email', type => Str };     post data => sub {         my $params = shift;         { data => include_missing($params) };     }; Request:     curl -X POST -H ""Content-Type: application/json"" localhost:5000/signup -d '{""id"": 42, ""key"": ""value""}' Response:     { ""data"": { ""id"": 42, ""email"": null } } Validation and coercion You can define validations and coercion options for your parameters using a ""params"" in Raisin block. Parameters can requires a value and can be an optional. optional parameters can have a default value.     params(         requires => { name => 'name', type => Str },         optional => { name => 'count', type => Int, default => 10 },     );     get sub {         my $params = shift;         ""$params->{count}: $params->{name}"";     }; Note that default values will NOT be passed through to any validation options specified. Available arguments: name type default desc regex Types Raisin supports Moo(se)-compatible type constraint so you can use any of the Moose, Moo or Type::Tiny type constraints. By default Raisin depends on Type::Tiny and it's Types::Standard type contraint library. You can create your own types as well. See Type::Tiny::Manual and Moose::Manual::Types. HOOKS This blocks can be executed before or/and after every API call, using before, after, before_validation and after_validation. Before and after callbacks execute in the following order: before before_validation after_validation after The block applies to every API call     before sub {         my $self = shift;         say $self->req->method . ""\t"" . $self->req->path;     };      after_validation sub {         my $self = shift;         say $self->res->body;     }; Steps 3 and 4 only happen if validation succeeds. API FORMATS By default, Raisin supports YAML, JSON, and TEXT content types. Default format is YAML. Response format can be determined by Accept header or route extension. Serialization takes place automatically. So, you do not have to call encode_json in each JSON API implementation. Your API can declare to support only one serializator by using ""api_format"" in Raisin. Custom formatters for existing and additional types can be defined with a Raisin::Plugin::Format. JSON Call JSON::encode_json and JSON::decode_json. YAML Call YAML::Dump and YAML::Load. TEXT Call Data::Dumper->Dump if output data is not a string. The order for choosing the format is the following. Use the route extension. Use the value of the Accept header. Fallback to default. LOGGING Raisin has a built-in logger and supports for Log::Dispatch. You can enable it by:     plugin 'Logger', outputs => [['Screen', min_level => 'debug']]; Or use Raisin::Logger with a fallback option:     plugin 'Logger', fallback => 1; Exports log subroutine.     log(debug => 'Debug!');     log(warn => 'Warn!');     log(error => 'Error!'); See Raisin::Plugin::Logger. API DOCUMENTATION Raisin script You can see application routes with the following command:     $ raisin examples/pod-synopsis-app/darth.pl     GET     /user     GET     /user/all     POST    /user     GET     /user/:id     DELETE  /user/:id     PUT     /user/:id     GET     /echo Including parameters:     $ raisin --params examples/pod-synopsis-app/darth.pl     GET     /user        start Int{0}        count Int{10}     GET     /user/all     POST    /user       *name     Str       *password Str     email    Str     GET     /user/:id       *id Int     DELETE  /user/:id       *id Int     PUT     /user/:id       *id Int     GET     /echo       *data Any{ёй} Swagger Swagger compatible API documentations.     plugin 'Swagger'; Documentation will be available on http://<url>/api-docs URL. So you can use this URL in Swagger UI. See Raisin::Plugin::Swagger. MIDDLEWARE You can easily add any Plack middleware to your application using middleware keyword. See ""middleware"" in Raisin. PLUGINS Raisin can be extended using custom modules. Each new module must be a subclass of the Raisin::Plugin namespace. Modules' job is to initialize and register new methods into the web application class. For more see ""plugin"" in Raisin and Raisin::Plugin. TESTING See Plack::Test, Test::More and etc.     my $app = Plack::Util::load_psgi(""$Bin/../script/raisinapp.pl"");      test_psgi $app, sub {         my $cb  = shift;         my $res = $cb->(GET '/user');          subtest 'GET /user' => sub {             if (!is $res->code, 200) {                 diag $res->content;                 BAIL_OUT 'FAILED!';             }             my $got = Load($res->content);             isdeeply $got, $expected, 'Data!';         };     }; DEPLOYING Deploying a Raisin application is done the same way any other Plack application is deployed:     $ plackup -E deployment -s Starman app.psgi Kelp     use Plack::Builder;     use RaisinApp;     use KelpApp;      builder {         mount '/' => KelpApp->new->run;         mount '/api/rest' => RaisinApp->new;     }; Dancer     use Plack::Builder;     use Dancer ':syntax';     use Dancer::Handler;     use RaisinApp;      my $dancer = sub {         setting appdir => '/home/dotcloud/current';         load_app 'My::App';         Dancer::App->set_running_app('My::App');         my $env = shift;         Dancer::Handler->init_request_headers($env);         my $req = Dancer::Request->new(env => $env);         Dancer->dance($req);     };      builder {         mount '/' => $dancer;         mount '/api/rest' => RaisinApp->new;     }; Mojolicious::Lite     use Plack::Builder;     use RaisinApp;      builder {         mount '/' => builder {             enable 'Deflater';             require 'my_mojolicious-lite_app.pl';         };          mount '/api/rest' => RaisinApp->new;     }; Also see Plack::Builder, Plack::App::URLMap. EXAMPLES Raisin comes with three instance in example directory: pod-synopsis-app Basic example. music-app Shows the possibility of using ""present"" in Raisin with DBIx::Class and Rose::DB::Object. sample-app Shows an example of complex application. ROADMAP Support for hypermedia (HAL, Link headers); Versioning support; Nested params declaration; Mount API's in any place of resource block; GITHUB https://github.com/khrt/Raisin ACKNOWLEDGEMENTS This module was inspired both by Grape and Kelp, which was inspired by Dancer, which in its turn was inspired by Sinatra. AUTHOR Artur Khabibullin - rtkh@cpan.org LICENSE This module and all the modules in this package are governed by the same license as Perl itself. × Module Install Instructions To install Raisin, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Raisin CPAN shell                      perl -MCPAN -e shell                     install Raisin For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"a REST API micro framework for Perl"	"true"
"REST Frameworks"	"Squatting"	"https://metacpan.org/pod/Squatting"	"A Camping-inspired Web Microframework for Perl"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Squatting - A Camping-inspired Web Microframework for Perl - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors John Beppu  /  0.83 (BEPPU on 2014-02-20) 0.82 (BEPPU on 2013-08-12) 0.81 (BEPPU on 2011-04-27) 0.80 (BEPPU on 2011-04-27) 0.70 (BEPPU on 2009-08-27) 0.60 (BEPPU on 2009-04-21) 0.52 (BEPPU on 2008-08-09) 0.51 (BEPPU on 2008-08-07) 0.50 (BEPPU on 2008-07-31) 0.42 (BEPPU on 2008-07-25) 0.41 (BEPPU on 2008-07-09) 0.40 (BEPPU on 2008-07-06) 0.31 (BEPPU on 2008-06-06) 0.30 (BEPPU on 2008-06-02) 0.21 (BEPPU on 2008-05-14) 0.20 (BEPPU on 2008-05-13) Squatting-0.83 2 ++ 2 ++  / Squatting 20 Feb 2014 03:16:20 GMT Module version: 0.83 Source (raw) Browse (raw) Changes Clone repository Issues (0) Testers (510 / 0 / 0) Kwalitee License: mit Activity 24 month Tools MOBI | EPUB Download (108.91Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.82 (BEPPU on 2013-08-12) 0.81 (BEPPU on 2011-04-27) 0.80 (BEPPU on 2011-04-27) 0.70 (BEPPU on 2009-08-27) 0.60 (BEPPU on 2009-04-21) 0.52 (BEPPU on 2008-08-09) 0.51 (BEPPU on 2008-08-07) 0.50 (BEPPU on 2008-07-31) 0.42 (BEPPU on 2008-07-25) 0.41 (BEPPU on 2008-07-09) 0.40 (BEPPU on 2008-07-06) 0.31 (BEPPU on 2008-06-06) 0.30 (BEPPU on 2008-06-02) 0.21 (BEPPU on 2008-05-14) 0.20 (BEPPU on 2008-05-13) Diff with version 0.82 (BEPPU on 2013-08-12) 0.81 (BEPPU on 2011-04-27) 0.80 (BEPPU on 2011-04-27) 0.70 (BEPPU on 2009-08-27) 0.60 (BEPPU on 2009-04-21) 0.52 (BEPPU on 2008-08-09) 0.51 (BEPPU on 2008-08-07) 0.50 (BEPPU on 2008-07-31) 0.42 (BEPPU on 2008-07-25) 0.41 (BEPPU on 2008-07-09) 0.40 (BEPPU on 2008-07-06) 0.31 (BEPPU on 2008-06-06) 0.30 (BEPPU on 2008-06-02) 0.21 (BEPPU on 2008-05-14) 0.20 (BEPPU on 2008-05-13) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 1 PAUSE user 1 non-PAUSE user. BEPPU John Beppu Dependencies Class::C3::Componentised Clone Continuity Data::Dump HTTP::Daemon HTTP::Response IO::All JSON::XS Shell::Perl Test::More and possibly others CPAN Testers List Reverse dependencies Dependency graph × Squatting-0.83 NAME SYNOPSIS DESCRIPTION What does this mean? API Use as a Base Class for Squatting Applications App->service($controller, @args) App->init App->mount($AnotherApp => $prefix) App->relocate($prefix) Use as a Helper for Controllers C($name => \@urls, %methods) R($name, @args, [ \%params ]) Use as a Helper for Views V($name, %methods) R($name, @args, [ \%params ]) SEE ALSO Google Group: squatting-framework Squatting Source Code Bavl Source Code Continuity and Coro Camping Prototype-based OO Prototypes == Grand Unified Theory of Objects AUTHOR COPYRIGHT The ""MIT"" License NAME Squatting - A Camping-inspired Web Microframework for Perl SYNOPSIS Running an App:   $ squatting App   Please contact me at: http://localhost:4234/ Check out our ASCII art logo:   $ squatting --logo What a basic App looks like:   # STEP 1 => Use Squatting for your App   {     package App;  # <-- I hope it's obvious that this name can whatever you want.     use Squatting;     our %CONFIG;  # <-- standard app config goes here   }    # STEP 2 => Define the App's Controllers   {     package App::Controllers;      # Setup a list of controller objects in @C using the C() function.     our @C = (       C(         Home => [ '/' ],         get  => sub {           my ($self) = @_;           my $v = $self->v;           $v->{title}   = 'A Simple Squatting Application';           $v->{message} = 'Hello, World!';           $self->render('home');         },         post => sub { }       ),     );   }    # STEP 3 => Define the App's Views   {     package App::Views;      # Setup a list of view objects in @V using the V() function.     our @V = (       V(         'html',         layout  => sub {           my ($self, $v, $content) = @_;           ""<html><head><title>$v->{title}</title></head>"".           ""<body>$content</body></html>"";         },         home    => sub {           my ($self, $v) = @_;           ""<h1>$v->{message}</h1>""         },       ),     );   }    # Models?     # - The whole world is your model.  ;-)   # - I have no interest in defining policy here.   # - Use whatever works for you. DESCRIPTION Squatting is a web microframework based on Camping. It originally used Continuity as its foundation, but it has since been generalized such that it can squat on top of any Perl-based web framework (in theory). What does this mean? Concise API _why did a really good job designing Camping's API so that you could get the MOST done with the LEAST amount of code possible. I loved Camping's API so much that I ported it to Perl. Tiny Codebase The core of Squatting (which includes Squatting, Squatting::Controller, and Squatting::View) can be squished into less than 4K of obfuscated perl. Also, the number of Perl module dependencies has been kept down to a minimum. RESTful Controllers By Default Controllers are objects (not classes) that are made to look like HTTP resources. Thus, they respond to methods like get(), post(), put(), and delete(). RESTless Controllers Are Possible Stateful continuation-based code can be surprisingly useful (especially for COMET), so we try to make RESTless controllers easy to express as well. (*) Squatting Apps Can Have Multiple Views Views are also objects (not classes) whose methods represent templates to be rendered. An app can also have more than one view. Changing a Squatting app's look and feel can be as simple as swapping out one view object for another. Squatting Apps Are Composable You can take multiple Squatting apps and compose them into a single app. For example, suppose you built a site and decided that you'd like to add a forum. You could take a hypothetical forum app written in Squatting and just mount it at an arbitrary path like /forum. Squatting Apps Are Embeddable Already using another framework? No problem. You should be able to embed Squatting apps into apps written in anything from CGI on up to Catalyst. Squatting aims to be compatible with EVERYONE. Minimal Policy You may use any templating system you want, and you may use any ORM you want. We only have a few rules on how the controller code and the view code should be organized, but beyond that, you are free as you want to be. * RESTless controllers currently only work when you're Squatting::On::Continuity. API Use as a Base Class for Squatting Applications   package App;   use Squatting;   our %CONFIG = ();   1; Just useing Squatting makes a lot of magic happen. In the example above: App becomes a subclass of Squatting. App::Controllers is given this app's R() and C() functions. App::Views is given this app's R() and V() functions. App->service($controller, @args) Every time an HTTP request comes in, this method is called with a controller object and a list of arguments. The controller will then be invoked with the HTTP method that was requested (like GET or POST), and it will return the content of the response as a string. NOTE: If you want to do anything before, after, or around an HTTP request, this is the method you should override in your subclass. App->init This method takes no parameters and initializes some internal variables. NOTE: You can override this method if you want to do more things when the App is initialized. App->mount($AnotherApp => $prefix) XXX - The mount() has been moved out of the core and into Squatting::With::Mount. Furthermore, Squatting::With::Mount has been implemented using Squatting::On::Squatting. This method will mount another Squatting app at the specified prefix.   App->mount('My::Blog'   => '/my/ridiculous/rantings');   App->mount('Forum'      => '/forum');   App->mount('ChatterBox' => '/chat'); NOTE: You can only mount an app once. Don't try to mount it again at some other prefix, because it won't work. This is a consequence of storing so much information in package variables and a strong argument for going all objects all the time. App->relocate($prefix) This method will relocate a Squatting app to the specified prefix. It's useful for embedding a Squatting app into apps written in other frameworks. This also has a side-effect of setting $CONFIG{relocated} to $prefix. Use as a Helper for Controllers In this package, you will define a list of Squatting::Controller objects in @C.   package App::Controllers;   use Squatting ':controllers';   our @C = (     C(...),     C(...),     C(...),   ); C($name => \@urls, %methods) This is a shortcut for:   Squatting::Controller->new(     $name => \@urls,      app   => $App,      %methods   ); R($name, @args, [ \%params ]) R() is a URL generation function that takes a controller name and a list of arguments. You may also pass in a hashref representing CGI variables as the very last parameter to this function. Example: Given the following controllers, R() would respond like this.   # Example Controllers   C(Home    => [ '/' ]);   C(Profile => [ '/~(\w+)', '/~(\w+)\.(\w+)' ]);    # Generated URLs   R('Home')                             # ""/""   R('Home', { foo => 1, bar => 2})      # ""/?foo=1&bar=2""   R('Profile', 'larry')                 # ""/~larry""   R('Profile', 'larry', 'json')         # ""/~larry.json""                                                              As you can see, @args represents the regexp captures, and \%params represents the CGI query parameters. Use as a Helper for Views In this package, you will define a list of Squatting::View objects in @V.   package App::Views;   use Squatting ':views';   our @V = (     V(       'html',       home => sub { ""<h1>Home</h1>"" },     ),   ); V($name, %methods) This is a shortcut for:   Squatting::View->new($name, %methods); R($name, @args, [ \%params ]) This is the same R() function that the controllers get access to. Please use it to generate URLs so that your apps may be composable and embeddable. SEE ALSO Other Squatting::* modules: Squatting::Controller, Squatting::View, Squatting::Mapper, Squatting::H, Squatting::On::Continuity, Squatting::On::Catalyst, Squatting::On::CGI, Squatting::On::MP13, Squatting::On::MP20, Squatting::With::AccessTrace, Squatting::With::Log, Squatting::With::Coro::Debug Squatting::On::PSGI, Squatting::On::Mojo, Squatting::On::HTTP::Engine Squatting's superclass: Class::C3::Componentised Squatting apps you can find on CPAN: Pod::Server - a nice way to browse through the POD for your locally installed perl modules. Stardust - a simple COMET server. (DEPRECATED. Use Web::Hippie or Plack::Middleware::SocketIO instead.) Rhetoric - a simple CPAN-friendly blogging system for Perl. Google Group: squatting-framework A Google Group has been setup so that people can discuss Squatting. If you have questions about the framework, this is the place to ask. http://groups.google.com/group/squatting-framework Squatting Source Code The source code is short and it has some useful comments in it, so this might be all you need to get going. There are also some examples in the eg/ directory. http://github.com/beppu/squatting/tree/master Bavl Source Code We're going to throw Squatting (and Continuity) into the metaphorical deep end by using it to implement the http://towr.of.bavl.org/. It's a site that will help people learn foreign languages by letting you hear the phrases you're interested in learning as actually spoken by fluent speakers. If you're looking for an example of how to use Squatting for an ambitious project, look at the Bavl code. http://github.com/beppu/bavl/tree/master Continuity and Coro When you want to start dabbling with RESTless controllers, it would serve you well to understand how Continuity, Coro and Event work. To learn more, I recommend reading the POD for the following Perl modules: Continuity, Coro, AnyEvent. Combining coroutines with an event loop is a surprisingly powerful technique. Camping Squatting is descended from Camping, so studying the Camping API will indirectly teach you much of the Squatting API. http://github.com/why/camping/tree/master Prototype-based OO There were a lot of obscure Ruby idioms in Camping that were damn near impossible to directly translate into Perl. I got around this by resorting to techniques that are reminiscent of prototype-based OO. (That's why controllers and views are objects instead of classes.) Prototypes == Grand Unified Theory of Objects I've been coding a lot of JavaScript these days, and it has definitely influenced my programming style. I've come to love the simplicity of prototype-based OO, and I think it's a damned shame that they're introducing concepts like 'class' in the next version of JavaScript. It's like they missed the point of prototype-based OO. If you're going to add anything to JavaScript, make the prototype side of it stronger. Look to languages like Io, and make it easier to clone objects and manipulate an object's prototype chain. The beauty of prototypes is that you can combine it with slot-based objects to unify the functionality of objects, classes, and namespaces into a surprisingly simple and coherent system. Look at Io if you don't believe me. http://iolanguage.com/ AUTHOR John BEPPU <beppu@cpan.org> Scott WALTERS (aka scrottie) gets credit for the name of this module. COPYRIGHT Copyright (c) 2008-9 John BEPPU <beppu@cpan.org>. The ""MIT"" License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. × Module Install Instructions To install Squatting, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Squatting CPAN shell                      perl -MCPAN -e shell                     install Squatting For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"A Camping-inspired Web Microframework for Perl"	"true"
"Template Engines"	"HTML::Template"	"https://metacpan.org/pod/HTML::Template"	"Templates for web pages"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"HTML::Template - Perl module to use HTML-like templating language - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Michael Peters  /  2.95 (WONKO on 2013-10-21) 2.94 (WONKO on 2013-01-17) 2.93 (WONKO on 2013-01-16) 2.91 (WONKO on 2012-03-30) 2.9 (SAMTREGAR on 2007-01-29) 2.8 (SAMTREGAR on 2005-12-22) 2.7 (SAMTREGAR on 2004-06-24) 2.6 (SAMTREGAR on 2002-08-29) 2.5 (SAMTREGAR on 2002-02-02) 2.4 (SAMTREGAR on 2001-08-27) 2.3 (SAMTREGAR on 2001-06-29) 2.2 (SAMTREGAR on 2000-12-23) 2.1 (SAMTREGAR on 2000-12-17) 2.0 (SAMTREGAR on 2000-09-17) 2.92 (WONKO on 2013-01-16) 2.10 (WONKO on 2011-07-13) 2.10_1 DEV (WONKO on 2011-06-28) 1.8 (SAMTREGAR on 2000-06-27) 1.7 (SAMTREGAR on 2000-03-25) 1.6 (SAMTREGAR on 2000-03-05) 1.5 (SAMTREGAR on 2000-02-18) 1.4 (SAMTREGAR on 2000-01-08) 1.3 (SAMTREGAR on 1999-12-18) 1.2.1 (SAMTREGAR on 1999-11-17) 1.2 (SAMTREGAR on 1999-11-17) 1.1 (SAMTREGAR on 1999-11-05) 1.0 (SAMTREGAR on 1999-10-28) 0.96 (SAMTREGAR on 1999-10-14) 0.95 (SAMTREGAR on 1999-10-08) 0.91 (SAMTREGAR on 1999-09-29) 0.9 (SAMTREGAR on 1999-09-27) 0.06 (SAMTREGAR on 1999-09-20) 0.051 (SAMTREGAR on 1999-09-10) 0.05 (SAMTREGAR on 1999-09-09) 0.04 (SAMTREGAR on 1999-06-18) HTML-Template-2.95 10 ++ 10 ++  / HTML::Template 21 Oct 2013 17:27:43 GMT Module version: 2.95 Source (raw) Browse (raw) Changes Clone repository Issues (6) 4 (21 reviews) Testers (4474 / 73 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (88.95Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 2.94 (WONKO on 2013-01-17) 2.93 (WONKO on 2013-01-16) 2.91 (WONKO on 2012-03-30) 2.9 (SAMTREGAR on 2007-01-29) 2.8 (SAMTREGAR on 2005-12-22) 2.7 (SAMTREGAR on 2004-06-24) 2.6 (SAMTREGAR on 2002-08-29) 2.5 (SAMTREGAR on 2002-02-02) 2.4 (SAMTREGAR on 2001-08-27) 2.3 (SAMTREGAR on 2001-06-29) 2.2 (SAMTREGAR on 2000-12-23) 2.1 (SAMTREGAR on 2000-12-17) 2.0 (SAMTREGAR on 2000-09-17) 2.92 (WONKO on 2013-01-16) 2.10 (WONKO on 2011-07-13) 2.10_1 DEV (WONKO on 2011-06-28) 1.8 (SAMTREGAR on 2000-06-27) 1.7 (SAMTREGAR on 2000-03-25) 1.6 (SAMTREGAR on 2000-03-05) 1.5 (SAMTREGAR on 2000-02-18) 1.4 (SAMTREGAR on 2000-01-08) 1.3 (SAMTREGAR on 1999-12-18) 1.2.1 (SAMTREGAR on 1999-11-17) 1.2 (SAMTREGAR on 1999-11-17) 1.1 (SAMTREGAR on 1999-11-05) 1.0 (SAMTREGAR on 1999-10-28) 0.96 (SAMTREGAR on 1999-10-14) 0.95 (SAMTREGAR on 1999-10-08) 0.91 (SAMTREGAR on 1999-09-29) 0.9 (SAMTREGAR on 1999-09-27) 0.06 (SAMTREGAR on 1999-09-20) 0.051 (SAMTREGAR on 1999-09-10) 0.05 (SAMTREGAR on 1999-09-09) 0.04 (SAMTREGAR on 1999-06-18) Diff with version 2.94 (WONKO on 2013-01-17) 2.93 (WONKO on 2013-01-16) 2.91 (WONKO on 2012-03-30) 2.9 (SAMTREGAR on 2007-01-29) 2.8 (SAMTREGAR on 2005-12-22) 2.7 (SAMTREGAR on 2004-06-24) 2.6 (SAMTREGAR on 2002-08-29) 2.5 (SAMTREGAR on 2002-02-02) 2.4 (SAMTREGAR on 2001-08-27) 2.3 (SAMTREGAR on 2001-06-29) 2.2 (SAMTREGAR on 2000-12-23) 2.1 (SAMTREGAR on 2000-12-17) 2.0 (SAMTREGAR on 2000-09-17) 2.92 (WONKO on 2013-01-16) 2.10 (WONKO on 2011-07-13) 2.10_1 DEV (WONKO on 2011-06-28) 1.8 (SAMTREGAR on 2000-06-27) 1.7 (SAMTREGAR on 2000-03-25) 1.6 (SAMTREGAR on 2000-03-05) 1.5 (SAMTREGAR on 2000-02-18) 1.4 (SAMTREGAR on 2000-01-08) 1.3 (SAMTREGAR on 1999-12-18) 1.2.1 (SAMTREGAR on 1999-11-17) 1.2 (SAMTREGAR on 1999-11-17) 1.1 (SAMTREGAR on 1999-11-05) 1.0 (SAMTREGAR on 1999-10-28) 0.96 (SAMTREGAR on 1999-10-14) 0.95 (SAMTREGAR on 1999-10-08) 0.91 (SAMTREGAR on 1999-09-29) 0.9 (SAMTREGAR on 1999-09-27) 0.06 (SAMTREGAR on 1999-09-20) 0.051 (SAMTREGAR on 1999-09-10) 0.05 (SAMTREGAR on 1999-09-09) 0.04 (SAMTREGAR on 1999-06-18) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 3 PAUSE users 7 non-PAUSE users. WONKO Michael Peters Dependencies Carp Digest::MD5 File::Spec Scalar::Util CPAN Testers List Reverse dependencies Dependency graph × HTML-Template-2.95 NAME SYNOPSIS DESCRIPTION TUTORIAL FAQ MOTIVATION THE TAGS TMPL_VAR Attributes TMPL_LOOP TMPL_INCLUDE TMPL_IF TMPL_ELSE TMPL_UNLESS NOTES METHODS new Error Detection Options Caching Options Filesystem Options Debugging Options Miscellaneous Options config param clear_params output query LAZY VALUES Multiple Calls BUGS CREDITS WEBSITE PUBLIC GIT REPOSITORY AUTHOR CO-MAINTAINER LICENSE NAME HTML::Template - Perl module to use HTML-like templating language SYNOPSIS First you make a template - this is just a normal HTML file with a few extra tags, the simplest being <TMPL_VAR> For example, test.tmpl:     <html>     <head><title>Test Template</title></head>     <body>     My Home Directory is <TMPL_VAR NAME=HOME>     <p>     My Path is set to <TMPL_VAR NAME=PATH>     </body>     </html> Now you can use it in a small CGI program:     #!/usr/bin/perl -w     use HTML::Template;      # open the html template     my $template = HTML::Template->new(filename => 'test.tmpl');      # fill in some parameters     $template->param(HOME => $ENV{HOME});     $template->param(PATH => $ENV{PATH});      # send the obligatory Content-Type and print the template output     print ""Content-Type: text/html\n\n"", $template->output; If all is well in the universe this should show something like this in your browser when visiting the CGI:     My Home Directory is /home/some/directory     My Path is set to /bin;/usr/bin DESCRIPTION This module attempts to make using HTML templates simple and natural. It extends standard HTML with a few new HTML-esque tags - <TMPL_VAR> <TMPL_LOOP>, <TMPL_INCLUDE>, <TMPL_IF>, <TMPL_ELSE> and <TMPL_UNLESS>. The file written with HTML and these new tags is called a template. It is usually saved separate from your script - possibly even created by someone else! Using this module you fill in the values for the variables, loops and branches declared in the template. This allows you to separate design - the HTML - from the data, which you generate in the Perl script. This module is licensed under the same terms as Perl. See the LICENSE section below for more details. TUTORIAL If you're new to HTML::Template, I suggest you start with the introductory article available on Perl Monks:     http://www.perlmonks.org/?node_id=65642 FAQ Please see HTML::Template::FAQ MOTIVATION It is true that there are a number of packages out there to do HTML templates. On the one hand you have things like HTML::Embperl which allows you freely mix Perl with HTML. On the other hand lie home-grown variable substitution solutions. Hopefully the module can find a place between the two. One advantage of this module over a full HTML::Embperl-esque solution is that it enforces an important divide - design and programming. By limiting the programmer to just using simple variables and loops in the HTML, the template remains accessible to designers and other non-perl people. The use of HTML-esque syntax goes further to make the format understandable to others. In the future this similarity could be used to extend existing HTML editors/analyzers to support HTML::Template. An advantage of this module over home-grown tag-replacement schemes is the support for loops. In my work I am often called on to produce tables of data in html. Producing them using simplistic HTML templates results in programs containing lots of HTML since the HTML itself cannot represent loops. The introduction of loop statements in the HTML simplifies this situation considerably. The designer can layout a single row and the programmer can fill it in as many times as necessary - all they must agree on is the parameter names. For all that, I think the best thing about this module is that it does just one thing and it does it quickly and carefully. It doesn't try to replace Perl and HTML, it just augments them to interact a little better. And it's pretty fast. THE TAGS TMPL_VAR     <TMPL_VAR NAME=""PARAMETER_NAME""> The <TMPL_VAR> tag is very simple. For each <TMPL_VAR> tag in the template you call:     $template->param(PARAMETER_NAME => ""VALUE"") When the template is output the <TMPL_VAR> is replaced with the VALUE text you specified. If you don't set a parameter it just gets skipped in the output. You can also specify the value of the parameter as a code reference in order to have ""lazy"" variables. These sub routines will only be referenced if the variables are used. See ""LAZY VALUES"" for more information. Attributes The following ""attributes"" can also be specified in template var tags: escape This allows you to escape the value before it's put into the output. Th This is useful when you want to use a TMPL_VAR in a context where those characters would cause trouble. For example:    <input name=param type=text value=""<TMPL_VAR PARAM>""> If you called param() with a value like sam""my you'll get in trouble with HTML's idea of a double-quote. On the other hand, if you use escape=html, like this:    <input name=param type=text value=""<TMPL_VAR PARAM ESCAPE=HTML>""> You'll get what you wanted no matter what value happens to be passed in for param. The following escape values are supported: html Replaces the following characters with their HTML entity equivalent: &, "", ', <, > js Escapes (with a backslash) the following characters: \, ', "", \n, \r url URL escapes any ASCII characters except for letters, numbers, _, . and -. none Performs no escaping. This is the default, but it's useful to be able to explicitly turn off escaping if you are using the default_escape option. default With this attribute you can assign a default value to a variable. For example, this will output ""the devil gave me a taco"" if the who variable is not set.     <TMPL_VAR WHO DEFAULT=""the devil""> gave me a taco. TMPL_LOOP     <TMPL_LOOP NAME=""LOOP_NAME""> ... </TMPL_LOOP> The <TMPL_LOOP> tag is a bit more complicated than <TMPL_VAR>. The <TMPL_LOOP> tag allows you to delimit a section of text and give it a name. Inside this named loop you place <TMPL_VAR>s. Now you pass to param() a list (an array ref) of parameter assignments (hash refs) for this loop. The loop iterates over the list and produces output from the text block for each pass. Unset parameters are skipped. Here's an example: In the template:    <TMPL_LOOP NAME=EMPLOYEE_INFO>       Name: <TMPL_VAR NAME=NAME> <br>       Job:  <TMPL_VAR NAME=JOB>  <p>    </TMPL_LOOP> In your Perl code:     $template->param(         EMPLOYEE_INFO => [{name => 'Sam', job => 'programmer'}, {name => 'Steve', job => 'soda jerk'}]     );     print $template->output();   The output is:     Name: Sam     Job: programmer      Name: Steve     Job: soda jerk As you can see above the <TMPL_LOOP> takes a list of variable assignments and then iterates over the loop body producing output. Often you'll want to generate a <TMPL_LOOP>'s contents programmatically. Here's an example of how this can be done (many other ways are possible!):     # a couple of arrays of data to put in a loop:     my @words     = qw(I Am Cool);     my @numbers   = qw(1 2 3);     my @loop_data = ();              # initialize an array to hold your loop      while (@words and @numbers) {         my %row_data;      # get a fresh hash for the row data          # fill in this row         $row_data{WORD}   = shift @words;         $row_data{NUMBER} = shift @numbers;          # the crucial step - push a reference to this row into the loop!         push(@loop_data, \%row_data);     }      # finally, assign the loop data to the loop param, again with a reference:     $template->param(THIS_LOOP => \@loop_data); The above example would work with a template like:     <TMPL_LOOP NAME=""THIS_LOOP"">       Word: <TMPL_VAR NAME=""WORD"">            Number: <TMPL_VAR NAME=""NUMBER"">       </TMPL_LOOP> It would produce output like:     Word: I     Number: 1      Word: Am     Number: 2      Word: Cool     Number: 3 <TMPL_LOOP>s within <TMPL_LOOP>s are fine and work as you would expect. If the syntax for the param() call has you stumped, here's an example of a param call with one nested loop:     $template->param(         LOOP => [             {                 name      => 'Bobby',                 nicknames => [{name => 'the big bad wolf'}, {name => 'He-Man'}],             },         ],     ); Basically, each <TMPL_LOOP> gets an array reference. Inside the array are any number of hash references. These hashes contain the name=>value pairs for a single pass over the loop template. Inside a <TMPL_LOOP>, the only variables that are usable are the ones from the <TMPL_LOOP>. The variables in the outer blocks are not visible within a template loop. For the computer-science geeks among you, a <TMPL_LOOP> introduces a new scope much like a perl subroutine call. If you want your variables to be global you can use global_vars option to new() described below. TMPL_INCLUDE     <TMPL_INCLUDE NAME=""filename.tmpl""> This tag includes a template directly into the current template at the point where the tag is found. The included template contents are used exactly as if its contents were physically included in the master template. The file specified can be an absolute path (beginning with a '/' under Unix, for example). If it isn't absolute, the path to the enclosing file is tried first. After that the path in the environment variable HTML_TEMPLATE_ROOT is tried, if it exists. Next, the ""path"" option is consulted, first as-is and then with HTML_TEMPLATE_ROOT prepended if available. As a final attempt, the filename is passed to open() directly. See below for more information on HTML_TEMPLATE_ROOT and the path option to new(). As a protection against infinitely recursive includes, an arbitrary limit of 10 levels deep is imposed. You can alter this limit with the max_includes option. See the entry for the max_includes option below for more details. TMPL_IF     <TMPL_IF NAME=""PARAMETER_NAME""> ... </TMPL_IF> The <TMPL_IF> tag allows you to include or not include a block of the template based on the value of a given parameter name. If the parameter is given a value that is true for Perl - like '1' - then the block is included in the output. If it is not defined, or given a false value - like '0' - then it is skipped. The parameters are specified the same way as with <TMPL_VAR>. Example Template:     <TMPL_IF NAME=""BOOL"">       Some text that only gets displayed if BOOL is true!     </TMPL_IF> Now if you call $template->param(BOOL => 1) then the above block will be included by output. <TMPL_IF> </TMPL_IF> blocks can include any valid HTML::Template construct - VARs and LOOPs and other IF/ELSE blocks. Note, however, that intersecting a <TMPL_IF> and a <TMPL_LOOP> is invalid.     Not going to work:     <TMPL_IF BOOL>       <TMPL_LOOP SOME_LOOP>     </TMPL_IF>       </TMPL_LOOP> If the name of a <TMPL_LOOP> is used in a <TMPL_IF>, the IF block will output if the loop has at least one row. Example:     <TMPL_IF LOOP_ONE>       This will output if the loop is not empty.     </TMPL_IF>      <TMPL_LOOP LOOP_ONE>       ....     </TMPL_LOOP> WARNING: Much of the benefit of HTML::Template is in decoupling your Perl and HTML. If you introduce numerous cases where you have TMPL_IFs and matching Perl ifs, you will create a maintenance problem in keeping the two synchronized. I suggest you adopt the practice of only using TMPL_IF if you can do so without requiring a matching if in your Perl code. TMPL_ELSE     <TMPL_IF NAME=""PARAMETER_NAME""> ... <TMPL_ELSE> ... </TMPL_IF> You can include an alternate block in your <TMPL_IF> block by using <TMPL_ELSE>. NOTE: You still end the block with </TMPL_IF>, not </TMPL_ELSE>!    Example:     <TMPL_IF BOOL>       Some text that is included only if BOOL is true     <TMPL_ELSE>       Some text that is included only if BOOL is false     </TMPL_IF> TMPL_UNLESS     <TMPL_UNLESS NAME=""PARAMETER_NAME""> ... </TMPL_UNLESS> This tag is the opposite of <TMPL_IF>. The block is output if the PARAMETER_NAME is set false or not defined. You can use <TMPL_ELSE> with <TMPL_UNLESS> just as you can with <TMPL_IF>.     Example:     <TMPL_UNLESS BOOL>       Some text that is output only if BOOL is FALSE.     <TMPL_ELSE>       Some text that is output only if BOOL is TRUE.     </TMPL_UNLESS> If the name of a <TMPL_LOOP> is used in a <TMPL_UNLESS>, the <UNLESS> block output if the loop has zero rows.     <TMPL_UNLESS LOOP_ONE>       This will output if the loop is empty.     </TMPL_UNLESS>      <TMPL_LOOP LOOP_ONE>       ....     </TMPL_LOOP> NOTES HTML::Template's tags are meant to mimic normal HTML tags. However, they are allowed to ""break the rules"". Something like:     <img src=""<TMPL_VAR IMAGE_SRC>""> is not really valid HTML, but it is a perfectly valid use and will work as planned. The NAME= in the tag is optional, although for extensibility's sake I recommend using it. Example - <TMPL_LOOP LOOP_NAME> is acceptable. If you're a fanatic about valid HTML and would like your templates to conform to valid HTML syntax, you may optionally type template tags in the form of HTML comments. This may be of use to HTML authors who would like to validate their templates' HTML syntax prior to HTML::Template processing, or who use DTD-savvy editing tools.   <!-- TMPL_VAR NAME=PARAM1 --> In order to realize a dramatic savings in bandwidth, the standard (non-comment) tags will be used throughout this documentation. METHODS new Call new() to create a new Template object:     my $template = HTML::Template->new(         filename => 'file.tmpl',         option   => 'value',     ); You must call new() with at least one name = value> pair specifying how to access the template text. You can use filename => 'file.tmpl' to specify a filename to be opened as the template. Alternately you can use:     my $t = HTML::Template->new(         scalarref => $ref_to_template_text,         option    => 'value',     ); and     my $t = HTML::Template->new(         arrayref => $ref_to_array_of_lines,         option   => 'value',     ); These initialize the template from in-memory resources. In almost every case you'll want to use the filename parameter. If you're worried about all the disk access from reading a template file just use mod_perl and the cache option detailed below. You can also read the template from an already opened filehandle, either traditionally as a glob or as a FileHandle:     my $t = HTML::Template->new(filehandle => *FH, option => 'value'); The four new() calling methods can also be accessed as below, if you prefer.     my $t = HTML::Template->new_file('file.tmpl', option => 'value');      my $t = HTML::Template->new_scalar_ref($ref_to_template_text, option => 'value');      my $t = HTML::Template->new_array_ref($ref_to_array_of_lines, option => 'value');      my $t = HTML::Template->new_filehandle($fh, option => 'value'); And as a final option, for those that might prefer it, you can call new as:     my $t = HTML::Template->new(         type   => 'filename',         source => 'file.tmpl',     ); Which works for all three of the source types. If the environment variable HTML_TEMPLATE_ROOT is set and your filename doesn't begin with ""/"", then the path will be relative to the value of c<HTML_TEMPLATE_ROOT>. Example - if the environment variable HTML_TEMPLATE_ROOT is set to /home/sam and I call HTML::Template->new() with filename set to ""sam.tmpl"", HTML::Template will try to open /home/sam/sam.tmpl to access the template file. You can also affect the search path for files with the path option to new() - see below for more information. You can modify the Template object's behavior with new(). The options are available: Error Detection Options die_on_bad_params If set to 0 the module will let you call:     $template->param(param_name => 'value') even if 'param_name' doesn't exist in the template body. Defaults to 1. force_untaint If set to 1 the module will not allow you to set unescaped parameters with tainted values. If set to 2 you will have to untaint all parameters, including ones with the escape attribute. This option makes sure you untaint everything so you don't accidentally introduce e.g. cross-site-scripting (XSS) vulnerabilities. Requires taint mode. Defaults to 0. strict - if set to 0 the module will allow things that look like they might be TMPL_* tags to get by without dieing. Example:     <TMPL_HUH NAME=ZUH> Would normally cause an error, but if you call new with strict => 0 HTML::Template will ignore it. Defaults to 1. vanguard_compatibility_mode If set to 1 the module will expect to see <TMPL_VAR>s that look like %NAME% in addition to the standard syntax. Also sets die_on_bad_params = 0>. If you're not at Vanguard Media trying to use an old format template don't worry about this one. Defaults to 0. Caching Options cache If set to 1 the module will cache in memory the parsed templates based on the filename parameter, the modification date of the file and the options passed to new(). This only applies to templates opened with the filename parameter specified, not scalarref or arrayref templates. Caching also looks at the modification times of any files included using <TMPL_INCLUDE> tags, but again, only if the template is opened with filename parameter. This is mainly of use in a persistent environment like Apache/mod_perl. It has absolutely no benefit in a normal CGI environment since the script is unloaded from memory after every request. For a cache that does work for a non-persistent environment see the shared_cache option below. My simplistic testing shows that using cache yields a 90% performance increase under mod_perl. Cache defaults to 0. shared_cache If set to 1 the module will store its cache in shared memory using the IPC::SharedCache module (available from CPAN). The effect of this will be to maintain a single shared copy of each parsed template for all instances of HTML::Template on the same machine to use. This can be a significant reduction in memory usage in an environment with a single machine but multiple servers. As an example, on one of our systems we use 4MB of template cache and maintain 25 httpd processes - shared_cache results in saving almost 100MB! Of course, some reduction in speed versus normal caching is to be expected. Another difference between normal caching and shared_cache is that shared_cache will work in a non-persistent environment (like normal CGI) - normal caching is only useful in a persistent environment like Apache/mod_perl. By default HTML::Template uses the IPC key 'TMPL' as a shared root segment (0x4c504d54 in hex), but this can be changed by setting the ipc_key new() parameter to another 4-character or integer key. Other options can be used to affect the shared memory cache correspond to IPC::SharedCache options - ipc_mode, ipc_segment_size and ipc_max_size. See IPC::SharedCache for a description of how these work - in most cases you shouldn't need to change them from the defaults. For more information about the shared memory cache system used by HTML::Template see IPC::SharedCache. double_cache If set to 1 the module will use a combination of shared_cache and normal cache mode for the best possible caching. Of course, it also uses the most memory of all the cache modes. All the same ipc_* options that work with shared_cache apply to double_cache as well. Defaults to 0. blind_cache If set to 1 the module behaves exactly as with normal caching but does not check to see if the file has changed on each request. This option should be used with caution, but could be of use on high-load servers. My tests show blind_cache performing only 1 to 2 percent faster than cache under mod_perl. NOTE: Combining this option with shared_cache can result in stale templates stuck permanently in shared memory! file_cache If set to 1 the module will store its cache in a file using the Storable module. It uses no additional memory, and my simplistic testing shows that it yields a 50% performance advantage. Like shared_cache, it will work in a non-persistent environments (like CGI). Default is 0. If you set this option you must set the file_cache_dir option. See below for details. NOTE: Storable uses flock() to ensure safe access to cache files. Using file_cache on a system or filesystem (like NFS) without flock() support is dangerous. file_cache_dir Sets the directory where the module will store the cache files if file_cache is enabled. Your script will need write permissions to this directory. You'll also need to make sure the sufficient space is available to store the cache files. file_cache_dir_mode Sets the file mode for newly created file_cache directories and subdirectories. Defaults to ""0700"" for security but this may be inconvenient if you do not have access to the account running the webserver. double_file_cache If set to 1 the module will use a combination of file_cache and normal cache mode for the best possible caching. The file_cache_* options that work with file_cache apply to double_file_cache as well. Defaults to 0. cache_lazy_vars The option tells HTML::Template to cache the values returned from code references used for TMPL_VARs. See ""LAZY VALUES"" for details. cache_lazy_loops The option tells HTML::Template to cache the values returned from code references used for TMPL_LOOPs. See ""LAZY VALUES"" for details. Filesystem Options path You can set this variable with a list of paths to search for files specified with the filename option to new() and for files included with the <TMPL_INCLUDE> tag. This list is only consulted when the filename is relative. The HTML_TEMPLATE_ROOT environment variable is always tried first if it exists. Also, if HTML_TEMPLATE_ROOT is set then an attempt will be made to prepend HTML_TEMPLATE_ROOT onto paths in the path array. In the case of a <TMPL_INCLUDE> file, the path to the including file is also tried before path is consulted. Example:     my $template = HTML::Template->new(         filename => 'file.tmpl',         path     => ['/path/to/templates', '/alternate/path'],     ); NOTE: the paths in the path list must be expressed as UNIX paths, separated by the forward-slash character ('/'). search_path_on_include If set to a true value the module will search from the top of the array of paths specified by the path option on every <TMPL_INCLUDE> and use the first matching template found. The normal behavior is to look only in the current directory for a template to include. Defaults to 0. utf8 Setting this to true tells HTML::Template to treat your template files as UTF-8 encoded. This will apply to any file's passed to new() or any included files. It won't do anything special to scalars templates passed to new() since you should be doing the encoding on those yourself.     my $template = HTML::Template->new(         filename => 'umlauts_are_awesome.tmpl',         utf8     => 1,     ); Most templates are either ASCII (the default) or UTF-8 encoded Unicode. But if you need some other encoding other than these 2, look at the open_mode option. NOTE: The utf8 and open_mode options cannot be used at the same time. open_mode You can set this option to an opening mode with which all template files will be opened. For example, if you want to use a template that is UTF-16 encoded unicode:     my $template = HTML::Template->new(         filename  => 'file.tmpl',         open_mode => '<:encoding(UTF-16)',     ); That way you can force a different encoding (than the default ASCII or UTF-8), CR/LF properties etc. on the template files. See PerlIO for details. NOTE: this only works in perl 5.7.1 and above. NOTE: you have to supply an opening mode that actually permits reading from the file handle. NOTE: The utf8 and open_mode options cannot be used at the same time. Debugging Options debug If set to 1 the module will write random debugging information to STDERR. Defaults to 0. stack_debug If set to 1 the module will use Data::Dumper to print out the contents of the parse_stack to STDERR. Defaults to 0. cache_debug If set to 1 the module will send information on cache loads, hits and misses to STDERR. Defaults to 0. shared_cache_debug If set to 1 the module will turn on the debug option in IPC::SharedCache. Defaults to 0. memory_debug If set to 1 the module will send information on cache memory usage to STDERR. Requires the GTop module. Defaults to 0. Miscellaneous Options associate This option allows you to inherit the parameter values from other objects. The only requirement for the other object is that it have a param() method that works like HTML::Template's param(). A good candidate would be a CGI query object. Example:     my $query    = CGI->new;     my $template = HTML::Template->new(         filename  => 'template.tmpl',         associate => $query,     ); Now, $template->output() will act as though     $template->param(form_field => $cgi->param('form_field')); had been specified for each key/value pair that would be provided by the $cgi->param() method. Parameters you set directly take precedence over associated parameters. You can specify multiple objects to associate by passing an anonymous array to the associate option. They are searched for parameters in the order they appear:     my $template = HTML::Template->new(         filename  => 'template.tmpl',         associate => [$query, $other_obj],     ); NOTE: The parameter names are matched in a case-insensitive manner. If you have two parameters in a CGI object like 'NAME' and 'Name' one will be chosen randomly by associate. This behavior can be changed by the case_sensitive option. case_sensitive Setting this option to true causes HTML::Template to treat template variable names case-sensitively. The following example would only set one parameter without the case_sensitive option:     my $template = HTML::Template->new(         filename       => 'template.tmpl',         case_sensitive => 1     );     $template->param(         FieldA => 'foo',         fIELDa => 'bar',     ); This option defaults to off. NOTE: with case_sensitive and loop_context_vars the special loop variables are available in lower-case only. loop_context_vars When this parameter is set to true (it is false by default) extra variables that depend on the loop's context are made available inside a loop. These are: __first__ Value that is true for the first iteration of the loop and false every other time. __last__ Value that is true for the last iteration of the loop and false every other time. __inner__ Value that is true for the every iteration of the loop except for the first and last. __outer__ Value that is true for the first and last iterations of the loop. __odd__ Value that is true for the every odd iteration of the loop. __even__ Value that is true for the every even iteration of the loop. __counter__ An integer (starting from 1) whose value increments for each iteration of the loop. __index__ An integer (starting from 0) whose value increments for each iteration of the loop. Just like any other TMPL_VARs these variables can be used in <TMPL_IF>, <TMPL_UNLESS> and <TMPL_ELSE> to control how a loop is output. Example:     <TMPL_LOOP NAME=""FOO"">       <TMPL_IF NAME=""__first__"">         This only outputs on the first pass.       </TMPL_IF>        <TMPL_IF NAME=""__odd__"">         This outputs every other pass, on the odd passes.       </TMPL_IF>        <TMPL_UNLESS NAME=""__odd__"">         This outputs every other pass, on the even passes.       </TMPL_UNLESS>        <TMPL_IF NAME=""__inner__"">         This outputs on passes that are neither first nor last.       </TMPL_IF>        This is pass number <TMPL_VAR NAME=""__counter__"">.        <TMPL_IF NAME=""__last__"">         This only outputs on the last pass.       </TMPL_IF>     </TMPL_LOOP> One use of this feature is to provide a ""separator"" similar in effect to the perl function join(). Example:     <TMPL_LOOP FRUIT>       <TMPL_IF __last__> and </TMPL_IF>       <TMPL_VAR KIND><TMPL_UNLESS __last__>, <TMPL_ELSE>.</TMPL_UNLESS>     </TMPL_LOOP> Would output something like:   Apples, Oranges, Brains, Toes, and Kiwi. Given an appropriate param() call, of course. NOTE: A loop with only a single pass will get both __first__ and __last__ set to true, but not __inner__. no_includes Set this option to 1 to disallow the <TMPL_INCLUDE> tag in the template file. This can be used to make opening untrusted templates slightly less dangerous. Defaults to 0. max_includes Set this variable to determine the maximum depth that includes can reach. Set to 10 by default. Including files to a depth greater than this value causes an error message to be displayed. Set to 0 to disable this protection. die_on_missing_include If true, then HTML::Template will die if it can't find a file for a <TMPL_INCLUDE>. This defaults to true. global_vars Normally variables declared outside a loop are not available inside a loop. This option makes <TMPL_VAR>s like global variables in Perl - they have unlimited scope. This option also affects <TMPL_IF> and <TMPL_UNLESS>. Example:     This is a normal variable: <TMPL_VAR NORMAL>.<P>      <TMPL_LOOP NAME=FROOT_LOOP>       Here it is inside the loop: <TMPL_VAR NORMAL><P>     </TMPL_LOOP> Normally this wouldn't work as expected, since <TMPL_VAR NORMAL>'s value outside the loop is not available inside the loop. The global_vars option also allows you to access the values of an enclosing loop within an inner loop. For example, in this loop the inner loop will have access to the value of OUTER_VAR in the correct iteration:     <TMPL_LOOP OUTER_LOOP>       OUTER: <TMPL_VAR OUTER_VAR>         <TMPL_LOOP INNER_LOOP>            INNER: <TMPL_VAR INNER_VAR>            INSIDE OUT: <TMPL_VAR OUTER_VAR>         </TMPL_LOOP>     </TMPL_LOOP> One side-effect of global_vars is that variables you set with param() that might otherwise be ignored when die_on_bad_params is off will stick around. This is necessary to allow inner loops to access values set for outer loops that don't directly use the value. NOTE: global_vars is not global_loops (which does not exist). That means that loops you declare at one scope are not available inside other loops even when global_vars is on. filter This option allows you to specify a filter for your template files. A filter is a subroutine that will be called after HTML::Template reads your template file but before it starts parsing template tags. In the most simple usage, you simply assign a code reference to the filter parameter. This subroutine will receive a single argument - a reference to a string containing the template file text. Here is an example that accepts templates with tags that look like !!!ZAP_VAR FOO!!! and transforms them into HTML::Template tags:     my $filter = sub {         my $text_ref = shift;         $$text_ref =~ s/!!!ZAP_(.*?)!!!/<TMPL_$1>/g;     };      # open zap.tmpl using the above filter     my $template = HTML::Template->new(         filename => 'zap.tmpl',         filter   => $filter,     ); More complicated usages are possible. You can request that your filter receives the template text as an array of lines rather than as a single scalar. To do that you need to specify your filter using a hash-ref. In this form you specify the filter using the sub key and the desired argument format using the format key. The available formats are scalar and array. Using the array format will incur a performance penalty but may be more convenient in some situations.     my $template = HTML::Template->new(         filename => 'zap.tmpl',         filter   => {             sub    => $filter,             format => 'array',         }     ); You may also have multiple filters. This allows simple filters to be combined for more elaborate functionality. To do this you specify an array of filters. The filters are applied in the order they are specified.     my $template = HTML::Template->new(         filename => 'zap.tmpl',         filter   => [             {                 sub    => \&decompress,                 format => 'scalar',             },             {                 sub    => \&remove_spaces,                 format => 'array',             },         ]     ); The specified filters will be called for any TMPL_INCLUDEed files just as they are for the main template file. default_escape Set this parameter to a valid escape type (see the escape option) and HTML::Template will apply the specified escaping to all variables unless they declare a different escape in the template. config A package method that is used to set/get the global default configuration options. For instance, if you want to set the utf8 flag to always be on for every template loaded by this process you would do:     HTML::Template->config(utf8 => 1); Or if you wanted to check if the utf8 flag was on or not, you could do:     my %config = HTML::Template->config;     if( $config{utf8} ) {         ...     } Any configuration options that are valid for new() are acceptable to be passed to this method. param param() can be called in a number of ways 1 - To return a list of parameters in the template :     my @parameter_names = $self->param(); 2 - To return the value set to a param :     my $value = $self->param('PARAM'); 3 - To set the value of a parameter :     # For simple TMPL_VARs:     $self->param(PARAM => 'value');      # with a subroutine reference that gets called to get the value     # of the scalar.  The sub will receive the template object as a     # parameter.     $self->param(PARAM => sub { return 'value' });      # And TMPL_LOOPs:     $self->param(LOOP_PARAM => [{PARAM => VALUE_FOR_FIRST_PASS}, {PARAM => VALUE_FOR_SECOND_PASS}]); 4 - To set the value of a number of parameters :     # For simple TMPL_VARs:     $self->param(         PARAM  => 'value',         PARAM2 => 'value'     );      # And with some TMPL_LOOPs:     $self->param(         PARAM              => 'value',         PARAM2             => 'value',         LOOP_PARAM         => [{PARAM => VALUE_FOR_FIRST_PASS}, {PARAM => VALUE_FOR_SECOND_PASS}],         ANOTHER_LOOP_PARAM => [{PARAM => VALUE_FOR_FIRST_PASS}, {PARAM => VALUE_FOR_SECOND_PASS}],     ); 5 - To set the value of a a number of parameters using a hash-ref :     $self->param(         {             PARAM              => 'value',             PARAM2             => 'value',             LOOP_PARAM         => [{PARAM => VALUE_FOR_FIRST_PASS}, {PARAM => VALUE_FOR_SECOND_PASS}],             ANOTHER_LOOP_PARAM => [{PARAM => VALUE_FOR_FIRST_PASS}, {PARAM => VALUE_FOR_SECOND_PASS}],         }     ); An error occurs if you try to set a value that is tainted if the force_untaint option is set. clear_params Sets all the parameters to undef. Useful internally, if nowhere else! output output() returns the final result of the template. In most situations you'll want to print this, like:     print $template->output(); When output is called each occurrence of <TMPL_VAR NAME=name> is replaced with the value assigned to ""name"" via param(). If a named parameter is unset it is simply replaced with ''. <TMPL_LOOP>s are evaluated once per parameter set, accumulating output on each pass. Calling output() is guaranteed not to change the state of the HTML::Template object, in case you were wondering. This property is mostly important for the internal implementation of loops. You may optionally supply a filehandle to print to automatically as the template is generated. This may improve performance and lower memory consumption. Example:     $template->output(print_to => *STDOUT); The return value is undefined when using the print_to option. query This method allow you to get information about the template structure. It can be called in a number of ways. The simplest usage of query is simply to check whether a parameter name exists in the template, using the name option:     if ($template->query(name => 'foo')) {         # do something if a variable of any type named FOO is in the template     } This same usage returns the type of the parameter. The type is the same as the tag minus the leading 'TMPL_'. So, for example, a TMPL_VAR parameter returns 'VAR' from query().     if ($template->query(name => 'foo') eq 'VAR') {         # do something if FOO exists and is a TMPL_VAR     } Note that the variables associated with TMPL_IFs and TMPL_UNLESSs will be identified as 'VAR' unless they are also used in a TMPL_LOOP, in which case they will return 'LOOP'. query() also allows you to get a list of parameters inside a loop (and inside loops inside loops). Example loop:     <TMPL_LOOP NAME=""EXAMPLE_LOOP"">       <TMPL_VAR NAME=""BEE"">       <TMPL_VAR NAME=""BOP"">       <TMPL_LOOP NAME=""EXAMPLE_INNER_LOOP"">         <TMPL_VAR NAME=""INNER_BEE"">         <TMPL_VAR NAME=""INNER_BOP"">       </TMPL_LOOP>     </TMPL_LOOP> And some query calls:     # returns 'LOOP'     $type = $template->query(name => 'EXAMPLE_LOOP');      # returns ('bop', 'bee', 'example_inner_loop')     @param_names = $template->query(loop => 'EXAMPLE_LOOP');      # both return 'VAR'     $type = $template->query(name => ['EXAMPLE_LOOP', 'BEE']);     $type = $template->query(name => ['EXAMPLE_LOOP', 'BOP']);      # and this one returns 'LOOP'     $type = $template->query(name => ['EXAMPLE_LOOP', 'EXAMPLE_INNER_LOOP']);      # and finally, this returns ('inner_bee', 'inner_bop')     @inner_param_names = $template->query(loop => ['EXAMPLE_LOOP', 'EXAMPLE_INNER_LOOP']);      # for non existent parameter names you get undef this returns undef.     $type = $template->query(name => 'DWEAZLE_ZAPPA');      # calling loop on a non-loop parameter name will cause an error. This dies:     $type = $template->query(loop => 'DWEAZLE_ZAPPA'); As you can see above the loop option returns a list of parameter names and both name and loop take array refs in order to refer to parameters inside loops. It is an error to use loop with a parameter that is not a loop. Note that all the names are returned in lowercase and the types are uppercase. Just like param(), query() with no arguments returns all the parameter names in the template at the top level. LAZY VALUES As mentioned above, both TMPL_VAR and TMPL_LOOP values can be code references. These code references are only executed if the variable or loop is used in the template. This is extremely useful if you want to make a variable available to template designers but it can be expensive to calculate, so you only want to do so if you have to. Maybe an example will help to illustrate. Let's say you have a template like this:     <tmpl_if we_care>       <tmpl_if life_universe_and_everything>     </tmpl_if> If life_universe_and_everything is expensive to calculate we can wrap it's calculation in a code reference and HTML::Template will only execute that code if we_care is also true.     $tmpl->param(life_universe_and_everything => sub { calculate_42() }); Your code reference will be given a single argument, the HTML::Template object in use. In the above example, if we wanted calculate_42() to have this object we'd do something like this:     $tmpl->param(life_universe_and_everything => sub { calculate_42(shift) }); This same approach can be used for TMPL_LOOPs too:     <tmpl_if we_care>       <tmpl_loop needles_in_haystack>         Found <tmpl_var __counter>!       </tmpl_loop>     </tmpl_if> And in your Perl code:     $tmpl->param(needles_in_haystack => sub { find_needles() }); The only difference in the TMPL_LOOP case is that the subroutine needs to return a reference to an ARRAY, not just a scalar value. Multiple Calls It's important to recognize that while this feature is designed to save processing time when things aren't needed, if you're not careful it can actually increase the number of times you perform your calculation. HTML::Template calls your code reference each time it seems your loop in the template, this includes the times that you might use the loop in a conditional (TMPL_IF or TMPL_UNLESS). For instance:     <tmpl_if we care>       <tmpl_if needles_in_haystack>           <tmpl_loop needles_in_haystack>             Found <tmpl_var __counter>!           </tmpl_loop>       <tmpl_else>         No needles found!       </tmpl_if>     </tmpl_if> This will actually call find_needles() twice which will be even worse than you had before. One way to work around this is to cache the return value yourself:     my $needles;     $tmpl->param(needles_in_haystack => sub { defined $needles ? $needles : $needles = find_needles() }); BUGS I am aware of no bugs - if you find one, join the mailing list and tell us about it. You can join the HTML::Template mailing-list by visiting:     http://lists.sourceforge.net/lists/listinfo/html-template-users Of course, you can still email me directly (sam@tregar.com) with bugs, but I reserve the right to forward bug reports to the mailing list. When submitting bug reports, be sure to include full details, including the VERSION of the module, a test script and a test template demonstrating the problem! If you're feeling really adventurous, HTML::Template has a publically available Git repository. See below for more information in the PUBLIC GIT REPOSITORY section. CREDITS This module was the brain child of my boss, Jesse Erlbaum (jesse@vm.com) at Vanguard Media (http://vm.com) . The most original idea in this module - the <TMPL_LOOP> - was entirely his. Fixes, Bug Reports, Optimizations and Ideas have been generously provided by: Richard Chen Mike Blazer Adriano Nagelschmidt Rodrigues Andrej Mikus Ilya Obshadko Kevin Puetz Steve Reppucci Richard Dice Tom Hukins Eric Zylberstejn David Glasser Peter Marelas James William Carlson Frank D. Cringle Winfried Koenig Matthew Wickline Doug Steinwand Drew Taylor Tobias Brox Michael Lloyd Simran Gambhir Chris Houser <chouser@bluweb.com> Larry Moore Todd Larason Jody Biggs T.J. Mather Martin Schroth Dave Wolfe uchum Kawai Takanori Peter Guelich Chris Nokleberg Ralph Corderoy William Ward Ade Olonoh Mark Stosberg Lance Thomas Roland Giersig Jere Julian Peter Leonard Kenny Smith Sean P. Scanlon Martin Pfeffer David Ferrance Gyepi Sam Darren Chamberlain Paul Baker Gabor Szabo Craig Manley Richard Fein The Phalanx Project Sven Neuhaus Michael Peters Jan Dubois Moritz Lenz Thanks! WEBSITE You can find information about HTML::Template and other related modules at:    http://html-template.sourceforge.net PUBLIC GIT REPOSITORY HTML::Template now has a publicly accessible Git repository provided by GitHub (github.com). You can access it by going to https://github.com/mpeters/html-template. Give it a try! AUTHOR Sam Tregar, sam@tregar.com CO-MAINTAINER Michael Peters, mpeters@plusthree.com LICENSE   HTML::Template : A module for using HTML Templates with Perl   Copyright (C) 2000-2011 Sam Tregar (sam@tregar.com)    This module is free software; you can redistribute it and/or modify it   under the same terms as Perl itself, which means using either:    a) the GNU General Public License as published by the Free Software   Foundation; either version 1, or (at your option) any later version,      or    b) the ""Artistic License"" which comes with this module.    This program is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See either   the GNU General Public License or the Artistic License for more details.    You should have received a copy of the Artistic License with this   module.  If not, I'll be glad to provide one.    You should have received a copy of the GNU General Public License   along with this program. If not, write to the Free Software   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307   USA × Module Install Instructions To install HTML::Template, simply copy and paste either of the commands in to your terminal cpanm                      cpanm HTML::Template CPAN shell                      perl -MCPAN -e shell                     install HTML::Template For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Templates for web pages"	"true"
"Template Engines"	"Template::Alloy"	"https://metacpan.org/pod/Template::Alloy"	"TT2/3, HT, HTE, Tmpl, and Velocity Engine"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Template::Alloy - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Paul Seamons  /  1.020 (RHANDOM on 2013-09-20) 1.019 (RHANDOM on 2013-08-23) 1.018 (RHANDOM on 2013-08-22) 1.016 (RHANDOM on 2011-01-26) 1.015 (RHANDOM on 2010-12-31) 1.013 (RHANDOM on 2008-09-18) 1.012 (RHANDOM on 2008-04-10) 1.011 (RHANDOM on 2007-12-10) 1.010 (RHANDOM on 2007-12-10) 1.009 (RHANDOM on 2007-11-07) 1.008 (RHANDOM on 2007-10-26) 1.007 (RHANDOM on 2007-10-05) 1.006 (RHANDOM on 2007-07-03) 1.005 (RHANDOM on 2007-06-28) 1.004 (RHANDOM on 2007-06-21) 1.003 (RHANDOM on 2007-06-20) 1.002 (RHANDOM on 2007-06-08) 1.001 (RHANDOM on 2007-06-07) Template-Alloy-1.020 11 ++ 11 ++  / Template::Alloy 20 Sep 2013 18:59:38 GMT Module version: 1.020 Source (raw) Browse (raw) Changes Issues (5) 5 (3 reviews) Testers (2722 / 89 / 0) Kwalitee License: unknown Activity 24 month Tools MOBI | EPUB Download (193.3Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.019 (RHANDOM on 2013-08-23) 1.018 (RHANDOM on 2013-08-22) 1.016 (RHANDOM on 2011-01-26) 1.015 (RHANDOM on 2010-12-31) 1.013 (RHANDOM on 2008-09-18) 1.012 (RHANDOM on 2008-04-10) 1.011 (RHANDOM on 2007-12-10) 1.010 (RHANDOM on 2007-12-10) 1.009 (RHANDOM on 2007-11-07) 1.008 (RHANDOM on 2007-10-26) 1.007 (RHANDOM on 2007-10-05) 1.006 (RHANDOM on 2007-07-03) 1.005 (RHANDOM on 2007-06-28) 1.004 (RHANDOM on 2007-06-21) 1.003 (RHANDOM on 2007-06-20) 1.002 (RHANDOM on 2007-06-08) 1.001 (RHANDOM on 2007-06-07) Diff with version 1.019 (RHANDOM on 2013-08-23) 1.018 (RHANDOM on 2013-08-22) 1.016 (RHANDOM on 2011-01-26) 1.015 (RHANDOM on 2010-12-31) 1.013 (RHANDOM on 2008-09-18) 1.012 (RHANDOM on 2008-04-10) 1.011 (RHANDOM on 2007-12-10) 1.010 (RHANDOM on 2007-12-10) 1.009 (RHANDOM on 2007-11-07) 1.008 (RHANDOM on 2007-10-26) 1.007 (RHANDOM on 2007-10-05) 1.006 (RHANDOM on 2007-07-03) 1.005 (RHANDOM on 2007-06-28) 1.004 (RHANDOM on 2007-06-21) 1.003 (RHANDOM on 2007-06-20) 1.002 (RHANDOM on 2007-06-08) 1.001 (RHANDOM on 2007-06-07) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 9 PAUSE users 2 non-PAUSE users. RHANDOM Paul Seamons Dependencies Digest::MD5 and possibly others CPAN Testers List Reverse dependencies Dependency graph × Template-Alloy-1.020 NAME SYNOPSIS Template::Toolkit style usage HTML::Template::Expr style usage Text::Tmpl style usage Velocity (VTL) style usage Javascript style usage (requires Template::Alloy::JS) DESCRIPTION BACKEND ROLES PUBLIC METHODS VARIABLES GETTING VARIABLES SETTING VARIABLES. LITERALS AND CONSTRUCTORS VIRTUAL METHODS EXPRESSIONS DIRECTIVES DIRECTIVES (HTML::Template Style) CHOMPING CONFIGURATION CONFIGURATION (HTML::Template STYLE) SEMI PUBLIC METHODS OTHER UTILITY METHODS THANKS AUTHOR LICENSE NAME Template::Alloy - TT2/3, HT, HTE, Tmpl, and Velocity Engine SYNOPSIS Template::Toolkit style usage     my $t = Template::Alloy->new(         INCLUDE_PATH => ['/path/to/templates'],     );      my $swap = {         key1 => 'val1',         key2 => 'val2',         code => sub { 42 },         hash => {a => 'b'},     };      # print to STDOUT     $t->process('my/template.tt', $swap)         || die $t->error;      # process into a variable     my $out = '';     $t->process('my/template.tt', $swap, \$out);      ### Alloy uses the same syntax and configuration as Template::Toolkit HTML::Template::Expr style usage     my $t = Template::Alloy->new(         filename => 'my/template.ht',         path     => ['/path/to/templates'],     );      my $swap = {         key1 => 'val1',         key2 => 'val2',         code => sub { 42 },         hash => {a => 'b'},     };      $t->param($swap);      # print to STDOUT (errors die)     $t->output(print_to => \*STDOUT);      # process into a variable     my $out = $t->output;      ### Alloy can also use the same syntax and configuration as HTML::Template Text::Tmpl style usage     my $t = Template::Alloy->new;      my $swap = {         key1 => 'val1',         key2 => 'val2',         code => sub { 42 },         hash => {a => 'b'},     };      $t->set_delimiters('#[', ']#');     $t->set_strip(0);     $t->set_values($swap);     $t->set_dir('/path/to/templates');      my $out = $t->parse_file('my/template.tmpl');      my $str = ""Foo #[echo $key1]# Bar"";     my $out = $t->parse_string($str);       ### Alloy uses the same syntax and configuration as Text::Tmpl Velocity (VTL) style usage     my $t = Template::Alloy->new;      my $swap = {         key1 => 'val1',         key2 => 'val2',         code => sub { 42 },         hash => {a => 'b'},     };      my $out = $t->merge('my/template.vtl', $swap);      my $str = ""#set($foo 1 + 3) ($foo) ($bar) ($!baz)"";     my $out = $t->merge(\$str, $swap); Javascript style usage (requires Template::Alloy::JS)     my $t = Template::Alloy->new;      my $swap = {         key1 => 'val1',         key2 => 'val2',         code => sub { 42 },         hash => {a => 'b'},     };      my $out = '';     $t->process_js('my/template.jstem', $swap, \$out);      my $str = ""[% var foo = 1 + 3; write('(' + foo + ') (' + get('key1') + ')'); %]"";     my $out = '';     $t->process_js(\$str, $swap, \$out); DESCRIPTION ""An alloy is a homogeneous mixture of two or more elements"" (http://en.wikipedia.org/wiki/Alloy). Template::Alloy represents the mixing of features and capabilities from all of the major mini-language based template systems (support for non-mini-language based systems will happen eventually). With Template::Alloy you can use your favorite template interface and syntax and get features from each of the other major template systems. And Template::Alloy is fast - whether your using mod_perl, CGI, or running from the commandline. There is even Template::Alloy::JS for getting a little more speed when that is necessary. Template::Alloy happened by accident (accidentally on purpose). The Template::Alloy (Alloy hereafter) was originally a part of the CGI::Ex suite that performed simple variable interpolation. It used TT2 style variables in TT2 style tags ""[% foo.bar %]"". That was all the original Template::Alloy did. This was fine and dandy for a couple of years. In winter of 2005-2006 Alloy was revamped to add a few features. One thing led to another and soon Alloy provided for most of the features of TT2 as well as some from TT3. Template::Alloy now provides a full-featured implementation of the Template::Toolkit language. After a move to a new company that was using HTML::Template::Expr and Text::Tmpl templates, support was investigated and interfaces for HTML::Template, HTML::Template::Expr, Text::Tmpl, and Velocity (VTL) were added. All of the various engines offer the same features - each using a different syntax and interface. More recently, the Template::Alloy::JS capabilities were introduced to bring Javascript templates to the server side (along with an increase in speed if ran in persistent environments). Template::Toolkit brought the most to the table. HTML::Template brought the LOOP directive. HTML::Template::Expr brought more vmethods and using vmethods as top level functions. Text::Tmpl brought the COMMENT directive and encouraged speed matching (Text::Tmpl is almost entirely C based and is very fast). The Velocity engine brought AUTO_EVAL and SHOW_UNDEFINED_INTERP. Most of the standard Template::Toolkit documentation covering directives, variables, configuration, plugins, filters, syntax, and vmethods should apply to Alloy just fine (This pod tries to explain everything - but there is too much). See Template::Alloy::TT for a listing of the differences between Alloy and TT. Most of the standard HTML::Template and HTML::Template::Expr documentation covering methods, variables, expressions, and syntax will apply to Alloy just fine as well. Most of the standard Text::Tmpl documentation applies, as does the documentation covering Velocity (VTL). So should you use Template::Alloy ? Well, try it out. It may give you no visible improvement. Or it could. BACKEND Template::Alloy uses a recursive regex based grammar (early versions during the CGI::Ex::Template phase did not). This allows for the embedding of opening and closing tags inside other tags (as in [% a = ""[% 1 + 2 %]"" ; a|eval %]). The individual methods such as parse_expr and play_expr may be used by external applications to add TT style variable parsing to other applications. The regex parser returns an AST (abstract syntax tree) of the text, directives, variables, and expressions. All of the different template syntax options compile to the same AST format. The AST is composed only of scalars and arrayrefs and is suitable for sending to JavaScript via JSON or sharing with other languages. The parse_tree method is used for returning this AST. Once at the AST stage, there are two modes of operation. Alloy can either operate directly on the AST using the Play role, or it can compile the AST to perl code via the Compile role, and then execute the code. To use the perl code route, you must set the COMPILE_PERL flag to 1. If you are running in a cached-in-memory environment such as mod_perl, this is the fastest option. If you are running in a non-cached-in-memory environment, then using the Play role to run the AST is generally faster. The AST method is also more secure as cached AST won't ever eval any ""perl"" (assuming PERL blocks are disabled - which is the default). ROLES Template::Alloy has split out its functionality into discrete roles. In Template::Toolkit, this functionality is split into separate classes. The roles in Template::Alloy simply add on more methods to the main class. When Perl 6 arrives, these roles will be translated into true Roles. The following is a list of roles used by Template::Alloy.     Template::Alloy::Compile  - Compile-to-perl role     Template::Alloy::HTE      - HTML::Template::Expr role     Template::Alloy::Operator - Operator role     Template::Alloy::Parse    - Parse-to-AST role     Template::Alloy::Play     - Play-AST role     Template::Alloy::Stream   - Stream output role     Template::Alloy::Tmpl     - Text::Tmpl role     Template::Alloy::TT       - Template::Toolkit role     Template::Alloy::Velocity - Velocity role     Template::Alloy::VMethod  - Virtual methods role      Template::Alloy::JS       - Javascript functionality - available separately Template::Alloy automatically loads the roles when they are needed or requested - but not sooner (with the exception of the Operator role and the VMethod role which are always needed and always loaded). This is good for a CGI environment. In mod_perl you may want to preload a role to make the most of shared memory. You may do this by passing either the role name or a method supplied by that role.     # import roles necessary for running TT     use Template::Alloy qw(Parse Play Compile TT);      # import roles based on methods     use Template::Alloy qw(parse_tree play_tree compile_tree process); Note: importing roles by method names does not import them into that namespace - it is autoloading the role and methods into the Template::Alloy namespace. To help make this more clear you may use the following syntax as well.     # import roles necessary for running TT     use Template::Alloy load => qw(Parse Play Compile TT);      # import roles based on methods     use Template::Alloy load => qw(process parse_tree play_tree compile_tree);      # import roles based on methods     use Template::Alloy         Parse => 1,         Play => 1,         Compile => 1,         TT => 1; Even with all roles loaded Template::Alloy is still relatively small. You can load all of the roles (except the JS role) by passing ""all"" to the use statement.     use Template::Alloy 'all';      # or     use Template::Alloy load => 'all';      # or     use Template::Alloy all => 1; As a final option, Template::Alloy also includes the ability to stand-in for other template modules. It is able to do this because it supports the majority of the interface of the other template systems. You can do this in the following way:     use Template::Alloy qw(Text::Tmpl HTML::Template);      # or     use Template::Alloy load => qw(Text::Tmpl HTML::Template);      # or     use Template::Alloy         'Text::Tmpl'     => 1,         'HTML::Template' => 1; Note that the use statement will die if any of the passed module names are already loaded and not subclasses of Template::Alloy. This will avoid thinking that you are using Template::Alloy when you really aren't. Using the 'all' option won't automatically do this - you must mention the ""stood-in"" modules by name. The following modules may be ""stood-in"" for:     Template     Text::Tmpl     HTML::Template     HTML::Template::Expr This feature is intended to make using Template::Alloy with existing code easier. Most cases should work just fine. Almost all syntax will just work (except Alloy may make some things work that were previously broken). However Template::Alloy doesn't support 100% of the interface of any of the template systems. If you are using ""features-on-the-edge"" then you may need to re-write portions of your code that interact with the template system. PUBLIC METHODS The following section lists most of the publicly available methods. Some less commonly used public methods are listed later in this document. new     my $obj = Template::Alloy->new({         INCLUDE_PATH => ['/my/path/to/content', '/my/path/to/content2'],     }); Arguments may be passed as a hash or as a hashref. Returns a Template::Alloy object. There are currently no errors during Template::Alloy object creation. If you are using the HTML::Template interface, this is different behavior. The document is not parsed until the output or process methods are called. process This is the TT interface for starting processing. Any errors that result in the template processing being stopped will be stored and available via the ->error method.     my $t = Template::Alloy->new;     $t->process($in, $swap, $out)         || die $t->error; Process takes three arguments. The $in argument can be any one of:     String containing the filename of the template to be processed.     The filename should be relative to INCLUDE_PATH.  (See     INCLUDE_PATH, ABSOLUTE, and RELATIVE configuration items).  In     memory caching and file side caching are available for this type.      A reference to a scalar containing the contents of the template to be processed.      A coderef that will be called to return the contents of the template.      An open filehandle that will return the contents of the template when read. The $swap argument should be hashref containing key value pairs that will be available to variables swapped into the template. Values can be hashrefs, hashrefs of hashrefs and so on, arrayrefs, arrayrefs of arrayrefs and so on, coderefs, objects, and simple scalar values such as numbers and strings. See the section on variables. The $out argument can be any one of:     undef - meaning to print the completed template to STDOUT.      String containing a filename.  The completed template will be placed in the file.      A reference to a string.  The contents will be appended to the scalar reference.      A coderef.  The coderef will be called with the contents as a single argument.      An object that can run the method ""print"".  The contents will be passed as     a single argument to print.      An arrayref.  The contents will be pushed onto the array.      An open filehandle.  The contents will be printed to the open handle. Additionally - the $out argument can be configured using the OUTPUT configuration item. The process method defaults to using the ""cet"" syntax which will parse TT3 and most TT2 documents. To parse HT or HTE documents, you must pass the SYNTAX configuration item to the ""new"" method. All calls to process would then default to HTE syntax.     my $obj = Template::Alloy->new(SYNTAX => 'hte'); process_simple Similar to the process method but with the following restrictions: The $in parameter is limited to a filename or a reference a string containing the contents. The $out parameter may only be a reference to a scalar string that output will be appended to. Additionally, the following configuration variables will be ignored: VARIABLES, PRE_DEFINE, BLOCKS, PRE_PROCESS, PROCESS, POST_PROCESS, AUTO_RESET, OUTPUT. error Should something go wrong during a ""process"" command, the error that occurred can be retrieved via the error method.     $obj->process('somefile.html', {a => 'b'}, \$string_ref)         || die $obj->error; output HTML::Template way to process a template. The output method requires that a filename, filehandle, scalarref, or arrayref argument was passed to the new method. All of the HT calling conventions for new are supported. The key difference is that Alloy will not actually process the template until the output method is called.     my $obj = Template::Alloy->new(filename => 'myfile.html');     $obj->param(\%swap);     print $obj->output; See the HTML::Template documentation for more information. The output method defaults to using the ""hte"" syntax which will parse HTE and HT documents. To parse TT3 or TT2 documents, you must pass the SYNTAX configuration item to the ""new"" method. All calls to process would then default to TT3 syntax.     my $obj = Template::Alloy->new(SYNTAX => 'tt3'); Any errors that occur during the output method will die with the error as the die value. param HTML::Template way to get or set variable values that will be used by the output method.     my $val = $obj->param('key'); # get one value      $obj->param(key => $val);     # set one value      $obj->param(key => $val, key2 => $val2);   # set multiple      $obj->param({key => $val, key2 => $val2}); # set multiple See the HTML::Template documentation for more information. Note: Alloy does not support the die_on_bad_params configuration. This is because Alloy does not resolve variable names until the output method is called. define_vmethod This method is available for defining extra Virtual methods or filters. This method is similar to Template::Stash::define_vmethod.     Template::Alloy->define_vmethod(         'text',         reverse => sub { my $item = shift; return scalar reverse $item },     ); register_function This is the HTML::Template way of defining text vmethods. It is the same as calling define_vmethod with ""text"" as the first argument.     Template::Alloy->register_function(         reverse => sub { my $item = shift; return scalar reverse $item },     ); define_directive This method can be used for adding new directives or overridding existing ones.    Template::Alloy->define_directive(        MYDIR => {            parse_sub => sub {}, # parse additional items in the tag            play_sub  => sub {                my ($self, $ref, $node, $out_ref) = @_;                $$out_ref .= ""I always say the same thing!"";                return;            },            is_block  => 1,  # is this block like            is_postop => 0,  # not a post operative directive            no_interp => 1,  # no interpolation in this block            continues => undef, # it doesn't ""continue"" any other directives        },    ); Now with a template like:    my $str = ""([% MYDIR %]This is something[% END %])"";    Template::Alloy->new->process(\$str); You will get:    (I always say the same thing!) We'll add more details in later revisions of this document. define_syntax This method can be used for adding another syntax to or overriding existing ones in the list of choices available in Alloy. The syntax can be chosen by the SYNTAX configuration item.     Template::Alloy->define_syntax(         my_uber_syntax => sub {             my $self = shift;             local $self->{'V2PIPE'}      = 0;             local $self->{'V2EQUALS'}    = 0;             local $self->{'PRE_CHOMP'}   = 0;             local $self->{'POST_CHOMP'}  = 0;             local $self->{'NO_INCLUDES'} = 0;             return $self->parse_tree_tt3(@_);         },     ); The subroutine that is used must return an opcode tree (AST) that can be played by the execute_tree method. define_operator This method allows for adding new operators or overriding existing ones.     Template::Alloy->define_operator({         type       => 'right', # can be one of prefix, postfix, right, left, none, ternary, assign         precedence => 84,      # relative precedence for resolving multiple operators without parens         symbols    => ['foo', 'FOO'], # any mix of chars can be used for the operators         play_sub   => sub {             my ($one, $two) = @_;             return ""You've been foo'ed ($one, $two)"";         },     }); You can then use it in a template as in the following:    my $str = ""[% 'ralph' foo 1 + 2 * 3 %]"";    Template::Alloy->new->process(\$str); You will get:    You've been foo'ed (ralph, 7) Future revisions of this document will include more samples. This is an experimental feature and the API will probably change. dump_parse_tree This method allows for returning a Data::Dumper dump of a parsed template. It is mainly used for testing. dump_parse_expr This method allows for returning a Data::Dumper dump of a parsed variable. It is mainly used for testing. import All of the arguments that can be passed to ""use"" that are listed above in the section dealing with ROLES, can be used with the import method.     # import by role     Template::Alloy->import(qw(Compile Play Parse TT));      # import by method     Template::Alloy->import(qw(compile_tree play_tree parse_tree process));      # import by ""stand-in"" class     Template::Alloy->import('Text::Tmpl', 'HTML::Template::Expr'); As mentioned in the ROLE section - arguments passed to import are not imported into current namespace. Roles and methods are only imported into the Template::Alloy namespace. VARIABLES This section discusses how to use variables and expressions in the TT mini-language. A variable is the most simple construct to insert into the TT mini language. A variable name will look for the matching value inside Template::Alloys internal stash of variables which is essentially a hash reference. This stash is initially populated by either passing a hashref as the second argument to the process method, or by setting the ""VARIABLES"" or ""PRE_DEFINE"" configuration variables. If you are using either the HT or the HTE syntax, the VAR, IF, UNLESS, LOOP, and INCLUDE directives will accept a NAME attribute which may only be a single level (non-chained) HTML::Template variable name, or they may accept an EXPR attribute which may be any valid TT3 variable or expression. The following are some sample ways to access variables.     ### some sample variables     my %vars = (         one       => '1.0',         foo       => 'bar',         vname     => 'one',         some_code => sub { ""You passed me ("".join(', ', @_)."")"" },         some_data => {             a     => 'A',             bar   => 3234,             c     => [3, 1, 4, 1, 5, 9],             vname => 'one',         },         my_list   => [20 .. 50],         cet       => Template::Alloy->new,     );      ### pass the variables into the Alloy process     $cet->process($template_name, \%vars)          || die $cet->error;      ### pass the variables during object creation (will be available to every process call)     my $cet = Template::Alloy->new(VARIABLES => \%vars); GETTING VARIABLES Once you have variables defined, they can be used directly in the template by using their name in the stash. Or by using the GET directive.     [% foo %]     [% one %]     [% GET foo %] Would print when processed:     bar     1.0     bar To access members of a hashref or an arrayref, you can chain together the names using a ""."".     [% some_data.a %]     [% my_list.0] [% my_list.1 %] [% my_list.-1 %]     [% some_data.c.2 %] Would print:     A     20 21 50     4 If the value of a variable is a code reference, it will be called. You can add a set of parenthesis and arguments to pass arguments. Arguments are variables and can be as complex as necessary.     [% some_code %]     [% some_code() %]     [% some_code(foo) %]     [% some_code(one, 2, 3) %] Would print:     You passed me ().     You passed me ().     You passed me (bar).     You passed me (1.0, 2, 3). If the value of a variable is an object, methods can be called using the ""."" operator.     [% cet %]      [% cet.dump_parse_expr('1 + 2').replace('\s+', ' ') %] Would print something like:     Template::Alloy=HASH(0x814dc28)      $VAR1 = [ [ undef, '+', '1', '2' ], 0 ]; Each type of data (string, array and hash) have virtual methods associated with them. Virtual methods allow for access to functions that are commonly used on those types of data. For the full list of built in virtual methods, please see the section titled VIRTUAL METHODS     [% foo.length %]     [% my_list.size %]     [% some_data.c.join("" | "") %] Would print:     3     31     3 | 1 | 4 | 5 | 9 It is also possible to ""interpolate"" variable names using a ""$"". This allows for storing the name of a variable inside another variable. If a variable name is a little more complex it can be embedded inside of ""${"" and ""}"".     [% $vname %]     [% ${vname} %]     [% ${some_data.vname} %]     [% some_data.$foo %]     [% some_data.${foo} %] Would print:     1.0     1.0     1.0     3234     3234 In Alloy it is also possible to embed any expression (non-directive) in ""${"" and ""}"" and it is possible to use non-integers for array access. (This is not available in TT2)     [% ['a'..'z'].${ 2.3 } %]     [% {ab => 'AB'}.${ 'a' ~ 'b' } %]     [% color = qw/Red Blue/; FOR [1..4] ; color.${ loop.index % color.size } ; END %] Would print:     c     AB     RedBlueRedBlue SETTING VARIABLES. To define variables during processing, you can use the = operator. In most cases this is the same as using the SET directive.     [% a = 234 %][% a %]     [% SET b = ""Hello"" %][% b %] Would print:     234     Hello It is also possible to create arrayrefs and hashrefs.     [% a = [1, 2, 3] %]     [% b = {key1 => 'val1', 'key2' => 'val2'} %]      [% a.1 %]     [% b.key1 %] [% b.key2 %] Would print:     2     val1 val2 It is possible to set multiple values in the same SET directive.     [% SET a = 'A'            b = 'B'            c = 'C' %]     [% a %]    [% b %]    [% c %] Would print:     A    B    C It is also possible to unset variables, or to set members of nested data structures.     [% a = 1 %]     [% SET a %]      [% b.0.c = 37 %]      ([% a %])     [% b.0.c %] Would print     ()     37 LITERALS AND CONSTRUCTORS The following are the types of literals (numbers and strings) and constructors (hash and array constructs) allowed in Alloy. They can be used as arguments to functions, in place of variables in directives, and in place of variables in expressions. In Alloy it is also possible to call virtual methods on literal values. Integers and Numbers.     [% 23423   %]        Prints an integer.     [% 3.14159 %]        Prints a number.     [% pi = 3.14159 %]   Sets the value of the variable.     [% 3.13159.length %] Prints 7 (the string length of the number) Scientific notation is supported.     [% 314159e-5 + 0 %]      Prints 3.14159.      [% .0000001.fmt('%.1e') %]  Prints 1.0e-07 Hexadecimal input is also supported.     [% 0xff + 0 %]    Prints 255      [% 48875.fmt('%x') %]  Prints beeb Single quoted strings. Returns the string. No variable interpolation happens.     [% 'foobar' %]          Prints ""foobar"".     [% '$foo\n' %]          Prints ""$foo\\n"".  # the \\n is a literal ""\"" and an ""n""     [% 'That\'s nice' %]    Prints ""That's nice"".     [% str = 'A string' %]  Sets the value of str.     [% 'A string'.split %]  Splits the string on ' ' and returns the list. Note: virtual methods can only be used on literal strings in Alloy, not in TT. You may also embed the current tags in strings (Alloy only).     [% '[% 1 + 2 %]' | eval %]  Prints ""3"" Double quoted strings. Returns the string. Variable interpolation happens.     [% ""foobar"" %]                   Prints ""foobar"".     [% ""$foo""   %]                   Prints ""bar"" (assuming the value of foo is bar).     [% ""${foo}"" %]                   Prints ""bar"" (assuming the value of foo is bar).     [% ""foobar\n"" %]                 Prints ""foobar\n"".  # the \n is a newline.     [% str = ""Hello"" %]              Sets the value of str.     [% ""foo"".replace('foo','bar') %] Prints ""bar"". Note: virtual methods can only be used on literal strings in Alloy, not in TT. You may also embed the current tags in strings (Alloy only).     [% ""[% 1 + 2 %]"" | eval %]  Prints ""3"" Array Constructs.     [% [1, 2, 3] %]               Prints something like ARRAY(0x8309e90).     [% array1 = [1 .. 3] %]       Sets the value of array1.     [% array2 = [foo, 'a', []] %] Sets the value of array2.     [% [4, 5, 6].size %]          Prints 3.     [% [7, 8, 9].reverse.0 %]     Prints 9. Note: virtual methods can only be used on array contructs in Alloy, not in TT. Quoted Array Constructs.     [% qw/1 2 3/ %]                Prints something like ARRAY(0x8309e90).     [% array1 = qw{Foo Bar Baz} %] Sets the value of array1.     [% qw[4 5 6].size %]           Prints 3.     [% qw(Red Blue).reverse.0 %]   Prints Blue. Note: this works in Alloy and is planned for TT3. Hash Constructs.     [% {foo => 'bar'} %]                 Prints something like HASH(0x8305880)     [% hash = {foo => 'bar', c => {}} %] Sets the value of hash.     [% {a => 'A', b => 'B'}.size %]      Prints 2.     [% {'a' => 'A', 'b' => 'B'}.size %]  Prints 2.     [% name = ""Tom"" %]     [% {Tom => 'You are Tom',         Kay => 'You are Kay'}.$name %]   Prints You are Tom Note: virtual methods can only be used on hash contructs in Alloy, not in TT. Regex Constructs.     [% /foo/ %]                              Prints (?-xism:foo)     [% a = /(foo)/i %][% ""FOO"".match(a).0 %] Prints FOO Note: this works in Alloy and is planned for TT3. VIRTUAL METHODS Virtual methods (vmethods) are a TT feature that allow for operating on the swapped template variables. This document shows some samples of using vmethods. For a full listing of available virtual methods, see Template::Alloy::VMethod. EXPRESSIONS Expressions are one or more variables or literals joined together with operators. An expression can be used anywhere a variable can be used with the exception of the variable name in the SET directive, and the filename of PROCESS, INCLUDE, WRAPPER, and INSERT. For a full listing of operators, see Template::Alloy::Operator. The following section shows some samples of expressions. For a full list of available operators, please see the section titled OPERATORS.     [% 1 + 2 %]           Prints 3     [% 1 + 2 * 3 %]       Prints 7     [% (1 + 2) * 3 %]     Prints 9      [% x = 2 %]                      # assignments don't return anything     [% (x = 2) %]         Prints 2   # unless they are in parens     [% y = 3 %]     [% x * (y - 1) %]     Prints 4 DIRECTIVES This section contains the alphabetical list of DIRECTIVES available in Alloy. DIRECTIVES are the ""functions"" and control structures that work in the various mini-languages. For further discussion and examples beyond what is listed below, please refer to the TT directives documentation or to the appropriate documentation for the particular directive. The examples given in this section are done using the Template::Toolkit syntax, but can be done in any of the various syntax options. See Template::Alloy::TT, Template::Alloy::HTE, Template::Alloy::Tmpl, and Template::Alloy::Velocity.     [% IF 1 %]One[% END %]     [% FOREACH a = [1 .. 3] %]         a = [% a %]     [% END %]      [% SET a = 1 %][% SET a = 2 %][% GET a %] In TT multiple directives can be inside the same set of '[%' and '%]' tags as long as they are separated by space or semi-colons (;) (The Alloy version of Tmpl allows multiple also - but none of the other syntax options do). Any block directive that can also be used as a post-operative directive (such as IF, WHILE, FOREACH, UNLESS, FILTER, and WRAPPER) must be separated from preceding directives with a semi-colon if it is being used as a block directive. It is more safe to always use a semi-colon. Note: separating by space is only available in Alloy but is a planned TT3 feature.     [% SET a = 1 ; SET a = 2 ; GET a %]     [% SET a = 1        SET a = 2        GET a      %]      [% GET 1          IF 0   # is a post-operative        GET 2 %] # prints 2      [% GET 1;        IF 0     # it is block based          GET 2        END      %]         # prints 1 The following is the list of directives. BLOCK Saves a block of text under a name for later use in PROCESS, INCLUDE, and WRAPPER directives. Blocks may be placed anywhere within the template being processed including after where they are used.     [% BLOCK foo %]Some text[% END %]     [% PROCESS foo %]      Would print      Some text      [% INCLUDE foo %]     [% BLOCK foo %]Some text[% END %]      Would print      Some text Anonymous BLOCKS can be used for capturing.     [% a = BLOCK %]Some text[% END %][% a %]      Would print      Some text Anonymous BLOCKS can be used with macros. BREAK Alias for LAST. Used for exiting FOREACH and WHILE loops. CALL Calls the variable (and any underlying coderefs) as in the GET method, but always returns an empty string. CASE Used with the SWITCH directive. See the ""SWITCH"" directive. CATCH Used with the TRY directive. See the ""TRY"" directive. CLEAR Clears any of the content currently generated in the innermost block or template. This can be useful when used in conjunction with the TRY statement to clear generated content if an error occurs later. COMMENT Will comment out any text found between open and close tags. Note, that the intermediate items are still parsed and END tags must align - but the parsed content will be discarded.     [% COMMENT %]        This text won't be shown.        [% IF 1 %]And this won't either.[% END %]     [% END %] CONFIG Allow for changing the value of some compile time and runtime configuration options.     [% CONFIG         ANYCASE   => 1         PRE_CHOMP => '-'     %] The following compile time configuration options may be set:     ANYCASE     AUTO_EVAL     AUTO_FILTER     CACHE_STR_REFS     ENCODING     INTERPOLATE     POST_CHOMP     PRE_CHOMP     SEMICOLONS     SHOW_UNDEFINED_INTERP     SYNTAX     V1DOLLAR     V2EQUALS     V2PIPE The following runtime configuration options may be set:     ADD_LOCAL_PATH     CALL_CONTEXT     DUMP     VMETHOD_FUNCTIONS     STRICT (can only be enabled, cannot be disabled) If non-named parameters as passed, they will show the current configuration:    [% CONFIG ANYCASE, PRE_CHOMP %]     CONFIG ANYCASE = undef    CONFIG PRE_CHOMP = undef DEBUG Used to reset the DEBUG_FORMAT configuration variable, or to turn DEBUG statements on or off. This only has effect if the DEBUG_DIRS or DEBUG_ALL flags were passed to the DEBUG configuration variable.     [% DEBUG format '($file) (line $line) ($text)' %]     [% DEBUG on %]     [% DEBUG off %] DEFAULT Similar to SET, but only sets the value if a previous value was not defined or was zero length.     [% DEFAULT foo = 'bar' %][% foo %] => 'bar'      [% foo = 'baz' %][% DEFAULT foo = 'bar' %][% foo %] => 'baz' DUMP DUMP inserts a Data::Dumper printout of the variable or expression. If no argument is passed it will dump the entire contents of the current variable stash (with private keys removed). The output also includes the current file and line number that the DUMP directive was called from. See the DUMP configuration item for ways to customize and control the output available to the DUMP directive.     [% DUMP %] # dumps everything      [% DUMP 1 + 2 %] ELSE Used with the IF directive. See the ""IF"" directive. ELSIF Used with the IF directive. See the ""IF"" directive. END Used to end a block directive. EVAL Same as the EVALUATE directive. EVALUATE Introduced by the Velocity templating language. Parses and processes the contents of the passed item. This is similar to the eval filter, but Velocity needs a directive. Named arguments may be used for re-configuring the parser. Any of the items that can be passed to the CONFIG directive may be passed here.     [% EVALUATE ""[% 1 + 3 %]"" %]      [% foo = ""bar"" %]     [% EVALUATE ""<TMPL_VAR foo>"" SYNTAX => 'ht' %] FILTER Used to apply different treatments to blocks of text. It may operate as a BLOCK directive or as a post operative directive. Alloy supports all of the filters in Template::Filters. The lines between scalar virtual methods and filters is blurred (or non-existent) in Alloy. Anything that is a scalar virtual method may be used as a FILTER. TODO - enumerate the at least 7 ways to pass and use filters. '|' Alias for the FILTER directive. Note that | is similar to the '.' in Template::Alloy. Therefore a pipe cannot be used directly after a variable name in some situations (the pipe will act only on that variable). This is the behavior employed by TT3. To get the TT2 behavior for a PIPE, use the V2PIPE configuration item. FINAL Used with the TRY directive. See the ""TRY"" directive. FOR Alias for FOREACH FOREACH Allows for iterating over the contents of any arrayref. If the variable is not an arrayref, it is automatically promoted to one.     [% FOREACH i IN [1 .. 3] %]         The variable i = [% i %]     [%~ END %]      [% a = [1 .. 3] %]     [% FOREACH j IN a %]         The variable j = [% j %]     [%~ END %] Would print:         The variable i = 1         The variable i = 2         The variable i = 3          The variable j = 1         The variable j = 2         The variable j = 3 You can also use the ""="" instead of ""IN"" or ""in"".     [% FOREACH i = [1 .. 3] %]         The variable i = [% i %]     [%~ END %]      Same as before. Setting into a variable is optional.     [% a = [1 .. 3] %]     [% FOREACH a %] Hi [% END %] Would print:      hi  hi  hi If the item being iterated is a hashref and the FOREACH does not set into a variable, then values of the hashref are copied into the variable stash.     [% FOREACH [{a => 1}, {a => 2}] %]         Key a = [% a %]     [%~ END %] Would print:         Key a = 1         Key a = 2 The FOREACH process uses the Template::Alloy::Iterator class to handle iterations (It is compatible with Template::Iterator). During the FOREACH loop an object blessed into the iterator class is stored in the variable ""loop"". The loop variable provides the following information during a FOREACH:     index  - the current index     max    - the max index of the list     size   - the number of items in the list     count  - index + 1     number - index + 1     first  - true if on the first item     last   - true if on the last item     next   - return the next item in the list     prev   - return the previous item in the list     odd    - return 1 if the current count is odd, 0 otherwise     even   - return 1 if the current count is even, 0 otherwise     parity - return ""odd"" if the current count is odd, ""even"" otherwise The following:     [% FOREACH [1 .. 3] %] [% loop.count %]/[% loop.size %] [% END %] Would print:      1/3  2/3  3/3 The iterator is also available using a plugin. This allows for access to multiple ""loop"" variables in a nested FOREACH directive.     [%~ USE outer_loop = Iterator([""a"", ""b""]) %]     [%~ FOREACH i = outer_loop %]         [%~ FOREACH j = [""X"", ""Y""] %]            [% outer_loop.count %]-[% loop.count %] = ([% i %] and [% j %])         [%~ END %]     [%~ END %] Would print:            1-1 = (a and X)            1-2 = (a and Y)            2-1 = (b and X)            2-2 = (b and Y) FOREACH may also be used as a post operative directive.     [% ""$i"" FOREACH i = [1 .. 5] %] => 12345 GET Return the value of a variable or expression.     [% GET a %] The GET keyword may be omitted.     [% a %]      [% 7 + 2 - 3 %] => 6 See the section on VARIABLES. IF (IF / ELSIF / ELSE) Allows for conditional testing. Expects an expression as its only argument. If the expression is true, the contents of its block are processed. If false, the processor looks for an ELSIF block. If an ELSIF's expression is true then it is processed. Finally it looks for an ELSE block which is processed if none of the IF or ELSIF's expressions were true.     [% IF a == b %]A equaled B[% END %]      [% IF a == b -%]         A equaled B     [%- ELSIF a == c -%]         A equaled C     [%- ELSE -%]         Couldn't determine that A equaled anything.     [%- END %] IF may also be used as a post operative directive.     [% 'A equaled B' IF a == b %] Note: If you are using HTML::Template style documents, the TMPL_IF tag parses using the limited HTML::Template parsing rules. However, you may use EXPR="""" to embed a TT3 style expression. INCLUDE Parse the contents of a file or block and insert them. Variables defined or modifications made to existing variables are discarded after a template is included.     [% INCLUDE path/to/template.html %]      [% INCLUDE ""path/to/template.html"" %]      [% file = ""path/to/template.html"" %]     [% INCLUDE $file %]      [% BLOCK foo %]This is foo[% END %]     [% INCLUDE foo %] Arguments may also be passed to the template:     [% INCLUDE ""path/to/template.html"" a = ""An arg"" b = ""Another arg"" %] Filenames must be relative to INCLUDE_PATH unless the ABSOLUTE or RELATIVE configuration items are set. Multiple filenames can be passed by separating them with a plus, a space, or commas (TT2 doesn't support the comma). Any supplied arguments will be used on all templates.     [% INCLUDE ""path/to/template.html"",                ""path/to/template2.html"" a = ""An arg"" b = ""Another arg"" %] On Perl 5.6 on some platforms there may be some issues with the variable localization. There is no problem on 5.8 and greater. INSERT Insert the contents of a file without template parsing. Filenames must be relative to INCLUDE_PATH unless the ABSOLUTE or RELATIVE configuration items are set. Multiple filenames can be passed by separating them with a plus, a space, or commas (TT2 doesn't support the comma).     [% INSERT ""path/to/template.html"",               ""path/to/template2.html"" %] JS Only available if the COMPILE_JS configuration item is true (default is false). This requires the Template::Alloy::JS module to be installed. Allow eval'ing the block of text as javascript. The block will be parsed and then eval'ed.     [% a = ""BimBam"" %]     [%~ JS %]         write('The variable a was ""' + get('a') + '""');         set('b', ""FooBar"");     [% END %]     [% b %] Would print:     The variable a was ""BimBam""     FooBar LAST Used to exit out of a WHILE or FOREACH loop. LOOP This directive operates similar to the HTML::Template loop directive. The LOOP directive expects a single variable name. This variable name should point to an arrayref of hashrefs. The keys of each hashref will be added to the variable stash when it is iterated.     [% var a = [{b => 1}, {b => 2}, {b => 3}] %]      [% LOOP a %] ([% b %]) [% END %] Would print:      (1)  (2)  (3) If Alloy is in HT mode and GLOBAL_VARS is false, the contents of the hashref will be the only items available during the loop iteration. If LOOP_CONTEXT_VARS is true, and $QR_PRIVATE is false (default when called through the output method), then the variables __first__, __last__, __inner__, __odd__, and __counter__ will be set. See the HTML::Template loop_context_vars configuration item for more information. MACRO Takes a directive and turns it into a variable that can take arguments.     [% MACRO foo(i, j) BLOCK %]You passed me [% i %] and [% j %].[% END %]      [%~ foo(""a"", ""b"") %]     [% foo(1, 2) %] Would print:     You passed me a and b.     You passed me 1 and 2. Another example:     [% MACRO bar(max) FOREACH i = [1 .. max] %]([% i %])[% END %]      [%~ bar(4) %] Would print:     (1)(2)(3)(4) Starting with version 1.012 of Template::Alloy there is also a macro operator.     [% foo = ->(i,j){ ""You passed me $i and $j"" } %]      [% bar = ->(max){ FOREACH i = [1 .. max]; i ; END } %] See the Template::Alloy::Operator documentation for more examples. META Used to define variables that will be available via either the template or component namespace. Once defined, they cannot be overwritten.     [% template.foobar %]     [%~ META foobar = 'baz' %]     [%~ META foobar = 'bing' %] Would print:     baz NEXT Used to go to the next iteration of a WHILE or FOREACH loop. PERL Only available if the EVAL_PERL configuration item is true (default is false). Allow eval'ing the block of text as perl. The block will be parsed and then eval'ed.     [% a = ""BimBam"" %]     [%~ PERL %]         my $a = ""[% a %]"";         print ""The variable \$a was \""$a\"""";         $stash->set('b', ""FooBar"");     [% END %]     [% b %] Would print:     The variable $a was ""BimBam""     FooBar During execution, anything printed to STDOUT will be inserted into the template. Also, the $stash and $context variables are set and are references to objects that mimic the interface provided by Template::Context and Template::Stash. These are provided for compatibility only. $self contains the current Template::Alloy object. PROCESS Parse the contents of a file or block and insert them. Unlike INCLUDE, no variable localization happens so variables defined or modifications made to existing variables remain after the template is processed.     [% PROCESS path/to/template.html %]      [% PROCESS ""path/to/template.html"" %]      [% file = ""path/to/template.html"" %]     [% PROCESS $file %]      [% BLOCK foo %]This is foo[% END %]     [% PROCESS foo %] Arguments may also be passed to the template:     [% PROCESS ""path/to/template.html"" a = ""An arg"" b = ""Another arg"" %] Filenames must be relative to INCLUDE_PATH unless the ABSOLUTE or RELATIVE configuration items are set. Multiple filenames can be passed by separating them with a plus, a space, or commas (TT2 doesn't support the comma). Any supplied arguments will be used on all templates.     [% PROCESS ""path/to/template.html"",                ""path/to/template2.html"" a = ""An arg"" b = ""Another arg"" %] RAWPERL Only available if the EVAL_PERL configuration item is true (default is false). Similar to the PERL directive, but you will need to append to the $output variable rather than just calling PRINT. RETURN Used to exit the innermost block or template and continue processing in the surrounding block or template. There are two changes from TT2 behavior. First, In Alloy, a RETURN during a MACRO call will only exit the MACRO. Second, the RETURN directive takes an optional variable name or expression, if passed, the MACRO will return this value instead of the normal text from the MACRO. The process_simple method will also return this value. You can also use the item, list, and hash return vmethods.     [% RETURN %]       # just exits     [% RETURN ""foo"" %] # return value is foo     [% ""foo"".return %] # same thing SET Used to set variables.    [% SET a = 1 %][% a %]             => ""1""    [% a = 1 %][% a %]                 => ""1""    [% b = 1 %][% SET a = b %][% a %]  => ""1""    [% a = 1 %][% SET a %][% a %]      => """"    [% SET a = [1, 2, 3] %][% a.1 %]   => ""2""    [% SET a = {b => 'c'} %][% a.b %]  => ""c"" STOP Used to exit the entire process method (out of all blocks and templates). No content will be processed beyond this point. SWITCH Allow for SWITCH and CASE functionality.    [% a = ""hi"" %]    [% b = ""bar"" %]    [% SWITCH a %]        [% CASE ""foo""           %]a was foo        [% CASE b               %]a was bar        [% CASE [""hi"", ""hello""] %]You said hi or hello        [% CASE DEFAULT         %]I don't know what you said    [% END %] Would print:    You said hi or hello TAGS Change the type of enclosing braces used to delineate template tags. This remains in effect until the end of the enclosing block or template or until the next TAGS directive. Either a named set of tags must be supplied, or two tags themselves must be supplied.     [% TAGS html %]      [% TAGS <!-- --> %] The named tags are (duplicated from TT):     asp       => ['<%',     '%>'    ], # ASP     default   => ['\[%',    '%\]'   ], # default     html      => ['<!--',   '-->'   ], # HTML comments     mason     => ['<%',     '>'     ], # HTML::Mason     metatext  => ['%%',     '%%'    ], # Text::MetaText     php       => ['<\?',    '\?>'   ], # PHP     star      => ['\[\*',   '\*\]'  ], # TT alternate     template  => ['\[%',    '%\]'   ], # Normal Template Toolkit     template1 => ['[\[%]%', '%[%\]]'], # allow TT1 style     tt2       => ['\[%',    '%\]'   ], # TT2 If custom tags are supplied, by default they are escaped using quotemeta. You may also pass explicitly quoted strings, or regular expressions as arguments as well (if your regex begins with a ', "", or / you must quote it.     [% TAGS [<] [>] %]          matches ""[<] tag [>]""      [% TAGS '[<]' '[>]' %]      matches ""[<] tag [>]""      [% TAGS ""[<]"" ""[>]"" %]      matches ""[<] tag [>]""      [% TAGS /[<]/ /[>]/ %]      matches ""< tag >""      [% TAGS ** ** %]            matches ""** tag **""      [% TAGS /**/ /**/ %]        Throws an exception. You should be sure that the start tag does not include grouping parens or INTERPOLATE will not function properly. THROW Allows for throwing an exception. If the exception is not caught via the TRY DIRECTIVE, the template will abort processing of the directive.     [% THROW mytypes.sometime 'Something happened' arg1 => val1 %] See the TRY directive for examples of usage. TRY The TRY block directive will catch exceptions that are thrown while processing its block (It cannot catch parse errors unless they are in included files or evaltt'ed strings. The TRY block will then look for a CATCH block that will be processed. While it is being processed, the ""error"" variable will be set with the thrown exception as the value. After the TRY block - the FINAL block will be ran whether or not an error was thrown (unless a CATCH block throws an error). Note: Parse errors cannot be caught unless they are in an eval FILTER, or are in a separate template being INCLUDEd or PROCESSed.     [% TRY %]     Nothing bad happened.     [% CATCH %]     Caught the error.     [% FINAL %]     This section runs no matter what happens.     [% END %] Would print:     Nothing bad happened.     This section runs no matter what happens. Another example:     [% TRY %]     [% THROW ""Something happened"" %]     [% CATCH %]       Error:               [% error %]       Error.type:          [% error.type %]       Error.info:          [% error.info %]     [% FINAL %]       This section runs no matter what happens.     [% END %] Would print:       Error:               undef error - Something happened       Error.type:          undef       Error.info:          Something happened       This section runs no matter what happens. You can give the error a type and more information including named arguments. This information replaces the ""info"" property of the exception.     [% TRY %]     [% THROW foo.bar ""Something happened"" ""grrrr"" foo => 'bar' %]     [% CATCH %]       Error:               [% error %]       Error.type:          [% error.type %]       Error.info:          [% error.info %]       Error.info.0:        [% error.info.0 %]       Error.info.1:        [% error.info.1 %]       Error.info.args.0:   [% error.info.args.0 %]       Error.info.foo:      [% error.info.foo %]     [% END %] Would print something like:       Error:               foo.bar error - HASH(0x82a395c)       Error.type:          foo.bar       Error.info:          HASH(0x82a395c)       Error.info.0:        Something happened       Error.info.1:        grrrr       Error.info.args.0:   Something happened       Error.info.foo:      bar You can also give the CATCH block a type to catch. And you can nest TRY blocks. If types are specified, Alloy will try and find the closest matching type. Also, an error object can be re-thrown using $error as the argument to THROW.     [% TRY %]       [% TRY %]         [% THROW foo.bar ""Something happened"" %]       [% CATCH bar %]         Caught bar.       [% CATCH DEFAULT %]         Caught default - but re-threw.         [% THROW $error %]       [% END %]     [% CATCH foo %]       Caught foo.     [% CATCH foo.bar %]       Caught foo.bar.     [% CATCH %]       Caught anything else.     [% END %] Would print:         Caught default - but re-threw.        Caught foo.bar. UNLESS Same as IF but condition is negated.     [% UNLESS 0 %]hi[% END %]  => hi Can also be a post operative directive. USE Allows for loading a Template::Toolkit style plugin.     [% USE iter = Iterator(['foo', 'bar']) %]     [%~ iter.get_first %]     [% iter.size %] Would print:     foo     2 Note that it is possible to send arguments to the new object constructor. It is also possible to omit the variable name being assigned. In that case the name of the plugin becomes the variable.     [% USE Iterator(['foo', 'bar', 'baz']) %]     [%~ Iterator.get_first %]     [% Iterator.size %] Would print:     foo     3 Plugins that are loaded are looked up for in the namespace listed in the PLUGIN_BASE directive which defaults to Template::Plugin. So in the previous example, if Template::Toolkit was installed, the iter object would loaded by the class Template::Plugin::Iterator. In Alloy, an effective way to disable plugins is to set the PLUGIN_BASE to a non-existent base such as ""_"" (In TT it will still fall back to look in Template::Plugin). Note: The iterator plugin will fall back and use Template::Alloy::Iterator if Template::Toolkit is not installed. No other plugins come installed with Template::Alloy. The names of the Plugin being loaded from PLUGIN_BASE are case insensitive. However, using case insensitive names is bad as it requires scanning the @INC directories for any module matching the PLUGIN_BASE and caching the result (OK - not that bad). If the plugin is not found and the LOAD_PERL directive is set, then Alloy will try and load a module by that name (note: this type of lookup is case sensitive and will not scan the @INC dirs for a matching file).     # The LOAD_PERL directive should be set to 1     [% USE ta = Template::Alloy %]     [%~ ta.dump_parse_expr('2 * 3') %] Would print:     [[undef, '*', 2, 3], 0]; See the PLUGIN_BASE, and PLUGINS configuration items. See the documentation for Template::Manual::Plugins. VIEW Implement a TT style view. For more information, please see the Template::View documentation. This DIRECTIVE will correctly parse the arguments and then pass them along to a newly created Template::View object. It will fail if Template::View can not be found. WHILE Will process a block of code while a condition is true.     [% WHILE i < 3 %]         [%~ i = i + 1 %]         i = [% i %]     [%~ END %] Would print:         i = 1         i = 2         i = 3 You could also do:     [% i = 4 %]     [% WHILE (i = i - 1) %]         i = [% i %]     [%~ END %] Would print:         i = 3         i = 2         i = 1 Note that (f = f - 1) is a valid expression that returns the value of the assignment. The parenthesis are not optional. WHILE has a built in limit of 1000 iterations. This is controlled by the global variable $WHILE_MAX in Template::Alloy. WHILE may also be used as a post operative directive.     [% ""$i"" WHILE (i = i + 1) < 7 %] => 123456 WRAPPER Block directive. Processes contents of its block and then passes them in the [% content %] variable to the block or filename listed in the WRAPPER tag.     [% WRAPPER foo b = 23 %]     My content to be processed ([% b %]).[% a = 2 %]     [% END %]      [% BLOCK foo %]     A header ([% a %]).     [% content %]     A footer ([% a %]).     [% END %] This would print.     A header (2).     My content to be processed (23).     A footer (2). The WRAPPER directive may also be used as a post operative directive.     [% BLOCK baz %]([% content %])[% END -%]     [% ""foobar"" WRAPPER baz %] Would print     (foobar)'); Multiple filenames can be passed by separating them with a plus, a space, or commas (TT2 doesn't support the comma). Any supplied arguments will be used on all templates. Wrappers are processed in reverse order, so that the first wrapper listed will surround each subsequent wrapper listed. Variables from inner wrappers are available to the next wrapper that surrounds it.     [% WRAPPER ""path/to/outer.html"",                ""path/to/inner.html"" a = ""An arg"" b = ""Another arg"" %] DIRECTIVES (HTML::Template Style) HTML::Template templates use directives that look similar to the following:     <TMPL_VAR NAME=""foo"">      <TMPL_IF NAME=""bar"">       BAR     </TMPL_IF> The normal set of HTML::Template directives are TMPL_VAR, TMPL_IF, TMPL_ELSE, TMPL_UNLESS, TMPL_INCLUDE, and TMPL_LOOP. These tags should have either a NAME attribute, an EXPR attribute, or a bare variable name that is used to specify the value to be operated. If a NAME is specified, it may only be a single level value (as opposed to a TT chained variable). In the case of the TMPL_INCLUDE directive, the NAME is the file to be included. In Alloy, the EXPR attribute can be used with any of these types to specify TT compatible variable or expression that will be used for the value.     <TMPL_VAR NAME=""foo"">          Prints the value contained in foo     <TMPL_VAR foo>                 Prints the value contained in foo     <TMPL_VAR EXPR=""foo"">          Prints the value contained in foo      <TMPL_VAR NAME=""foo.bar.baz"">  Prints the value contained in {'foo.bar.baz'}     <TMPL_VAR EXPR=""foo.bar.baz"">  Prints the value contained in {foo}->{bar}->{baz}      <TMPL_IF foo>                  Prints FOO if foo is true       FOO     </TMPL_IF      <TMPL_UNLESS foo>              Prints FOO unless foo is true       FOO     </TMPL_UNLESS      <TMPL_INCLUDE NAME=""foo.ht"">   Includes the template in ""foo.ht""      <TMPL_LOOP foo>                Iterates on the arrayref foo       <TMPL_VAR name>     </TMPL_LOOP> Template::Alloy makes all of the other TT3 directives available in addition to the normal set of HTML::Template directives. For example, the following is valid in Alloy.     <TMPL_MACRO bar(n) BLOCK>You said <TMPL_VAR n></TMPL_MACRO>     <TMPL_GET bar(""hello"")> The TMPL_VAR tag may also include an optional ESCAPE attribute. This specifies how the value of the tag should be escaped prior to substituting into the template.     Escape value |   Type of escape     ---------------------------------     HTML, 1      |   HTML encoding     URL          |   URL encoding     JS           |   basic javascript encoding (\n, \r, and \"")     NONE, 0      |   No encoding (default). The TMPL_VAR tag may also include an optional DEFAULT attribute that contains a string that will be used if the variable returns false.     <TMPL_VAR foo DEFAULT=""Foo was false""> CHOMPING Chomping refers to the handling of whitespace immediately before and immediately after template tags. By default, nothing happens to this whitespace. Modifiers can be placed just inside the opening and just before the closing tags to control this behavior. Additionally, the PRE_CHOMP and POST_CHOMP configuration variables can be set and will globally control all chomping behavior for tags that do not have their own chomp modifier. PRE_CHOMP and POST_CHOMP can be set to any of the following values:     none:      0   +   Template::Constants::CHOMP_NONE     one:       1   -   Template::Constants::CHOMP_ONE     collapse:  2   =   Template::Constants::CHOMP_COLLAPSE     greedy:    3   ~   Template::Constants::CHOMP_GREEDY CHOMP_NONE Don't do any chomping. The ""+"" sign is used to indicate CHOMP_NONE.     Hello.      [%+ ""Hi."" +%]      Howdy. Would print:     Hello.      Hi.      Howdy. CHOMP_ONE (formerly known as CHOMP_ALL) Delete any whitespace up to the adjacent newline. The ""-"" is used to indicate CHOMP_ONE.     Hello.      [%- ""Hi."" -%]      Howdy. Would print:     Hello.     Hi.     Howdy. CHOMP_COLLAPSE Collapse adjacent whitespace to a single space. The ""="" is used to indicate CHOMP_COLLAPSE.     Hello.      [%= ""Hi."" =%]      Howdy. Would print:     Hello. Hi. Howdy. CHOMP_GREEDY Remove all adjacent whitespace. The ""~"" is used to indicate CHOMP_GREEDY.     Hello.      [%~ ""Hi."" ~%]      Howdy. Would print:     Hello.Hi.Howdy. CONFIGURATION The following configuration variables are supported (in alphabetical order). Note: for further discussion you can refer to the TT config documentation. Items may be passed in upper or lower case. If lower case names are passed they will be resolved to uppercase during the ""new"" method. All of the variables in this section can be passed to the ""new"" constructor.     my $obj = Template::Alloy->new(         VARIABLES  => \%hash_of_variables,         AUTO_RESET => 0,         TRIM       => 1,         POST_CHOMP => ""="",         PRE_CHOMP  => ""-"",     ); ABSOLUTE Boolean. Default false. Are absolute paths allowed for included files. ADD_LOCAL_PATH If true, allows calls include_filename to temporarily add the directory of the current template being processed to the INCLUDE_PATHS arrayref. This allows templates to refer to files in the local template directory without specifying the local directory as part of the filename. Default is 0. If set to a negative value, the current directory will be added to the end of the current INCLUDE_PATHS. This property may also be set in the template using the CONFIG directive.     [% CONFIG ADD_LOCAL_PATH => 1 %] ANYCASE Allow directive matching to be case insensitive.     [% get 23 %] prints 23 with ANYCASE => 1 AUTO_RESET Boolean. Default 1. Clear blocks that were set during the process method. AUTO_EVAL Boolean. Default 0 (default 1 in Velocity syntax). If set to true, double quoted strings will automatically be passed to the eval filter. This configuration option may also be passed to the CONFIG directive. AUTO_FILTER Can be the name of any filter. Default undef. Any variable returned by a GET directive (including implicit GET) will be passed to the named filter. This configuration option may also be passed to the CONFIG directive.     # with AUTO_FILTER => 'html'      [% f = ""&""; GET f %] prints &amp;     [% f = ""&""; f %]     prints &amp; (implicit GET) If a variable already has another filter applied the AUTO_FILTER is not applied. The ""none"" scalar virtual method has been added to allow for using variables without reapplying filters.     # with AUTO_FILTER => 'html'      [% f = ""&"";  f | none %] prints &     [% f = ""&""; g = f; g %]  prints &amp;     [% f = ""&""; g = f; g | none %]  prints & (because g = f is a SET directive)     [% f = ""&""; g = GET f; g | none %]  prints &amp; (because the actual GET directive was called) BLOCKS Only available via when using the process interface. A hashref of blocks that can be used by the process method.     BLOCKS => {         block_1 => sub { ... }, # coderef that returns a block         block_2 => 'A String',  # simple string     }, Note that a Template::Document cannot be supplied as a value (TT supports this). However, it is possible to supply a value that is equal to the hashref returned by the load_template method. CACHE_SIZE Number of compiled templates to keep in memory. Default undef. Undefined means to allow all templates to cache. A value of 0 will force no caching. The cache mechanism will clear templates that have not been used recently. CACHE_STR_REFS Default 1. If set, any string refs will have an MD5 sum taken that will then be used for caching the document - both in memory and on the file system (if configured). This will give a significant speed boost. Note that this affects strings passed to the EVALUATE directive or eval filters as well. It may be set using the CONFIG directive. CALL_CONTEXT (Not in TT) Can be one of 'item', 'list', or 'smart'. The default type is 'smart'. The CALL_CONTEXT configuration specifies in what Perl context coderefs and methods used in the processed templates will be called. TT historically has avoided the distinction of item (scalar) vs list context. To avoid worrying about this, TT introduced 'smart' context. The @() and $() context specifiers make it easier to use CALL_CONTEXT in some situations. The following table shows the relationship between the various contexts:        return values      smart context   list context    item context        -------------      -------------   ------------    ------------     A   'foo'              'foo'           ['foo']         'foo'     B   undef              undef           [undef]         undef     C   (no return value)  undef           []              undef     D   (7)                7               [7]             7     E   (7,8,9)            [7,8,9]         [7,8,9]         9     F   @a = (7)           7               [7]             1     G   @a = (7,8,9)       [7,8,9]         [7,8,9]         3     H   ({b=>""c""})         {b=>""c""}        [{b=>""c""}]      {b=>""c""}     I   ([1])              [1]             [[1]]           [1]     J   ([1],[2])          [[1],[2]]       [[1],[2]]       [2]     K   [7,8,9]            [7,8,9]         [[7,8,9]]       [7,8,9]     L   (undef, ""foo"")     die ""foo""       [undef, ""foo""]  ""foo""     M   wantarray?1:0      1               [1]             0 Cases F, H, I and M are common sticking points of the smart context in TT2. Note that list context always returns an arrayref from a method or function call. Smart context can give confusing results sometimes, especially the I and J cases. Case L for smart match is very surprising. The list and item context provide another feature for method calls. In smart context, TT will look for a hash key in the object by the same name as the method, if a method by that name doesn't exist. In item and list context Alloy will die if a method by that name cannot be found. The CALL_CONTEXT configuration item can be passed to new or it may also be set during runtime using the CONFIG directive. The following method call would be in list context:     [% CONFIG CALL_CONTEXT => 'list';        results = my_obj.get_results;        CONFIG CALL_CONTEXT => 'smart'     %] Note that we needed to restore CALL_CONTEXT to the default 'smart' value. Template::Alloy has added the @() (list) and the $() (item) context specifiers. The previous example could be written as:     [% results = @( my_obj.get_results ) %] To call that same method in item (scalar) context you would do the following:     [% results = $( my_obj.get_results ) %] The @() and $() operators are based on the Perl 6 counterpart. COMPILE_DIR Base directory to store compiled templates. Default undef. Compiled templates will only be stored if one of COMPILE_DIR and COMPILE_EXT is set. If set, the AST of parsed documents will be cached. If COMPILE_PERL is set, the compiled perl code will also be stored. COMPILE_EXT Extension to add to stored compiled template filenames. Default undef. If set, the AST of parsed documents will be cached. If COMPILE_PERL is set, the compiled perl code will also be stored. COMPILE_JS Default false. Requires installation of Template::Alloy::JS. When enabled, the parsed templates will be translated into Javascript and executed using the V8 javascript engine. If compile_dir is also set, this compiled javascript will be cached to disk. If your templates are short, there is little benefit to using this other than you can then use the JS directive. If your templates are long or you are running in a cached environment, this will speed up your templates. Certain limitations exist when COMPILE_JS is set, most notably the USE and VIEW directives are not supported, and method calls on objects passed to the template do not work (code refs passed in do work however). These limitations are due to the nature of JavaScript::V8 bind and Perl/JavaScript OO differences. COMPILE_PERL Default false. If set to 1 or 2, will translate the normal AST into a perl 5 code document. This document can then be executed directly, cached in memory, or cached on the file system depending upon the configuration items set. If set to 1, a perl code document will always be generated. If set to 2, a perl code document will only be generated if an AST has already been cached for the document. This should give a speed benefit and avoid extra compilation unless the document has been used more than once. If Alloy is running in a cached environment such as mod_perl, then using compile_perl can offer some speed benefit and makes Alloy faster than Text::Tmpl and as fast as HTML::Template::Compiled (but Alloy has more features). If you are not running in a cached environment, such as from commandline, or from CGI, it is generally faster to only run from the AST (with COMPILE_PERL => 0). CONSTANTS Hashref. Used to define variables that will be ""folded"" into the compiled template. Variables defined here cannot be overridden.     CONSTANTS => {my_constant => 42},      A template containing:      [% constants.my_constant %]      Will have the value 42 compiled in. Constants defined in this way can be chained as in [% constant.foo.bar.baz %]. CONSTANT_NAMESPACE Allow for setting the top level of values passed in CONSTANTS. Default value is 'constants'. DEBUG Takes a list of constants |'ed together which enables different debugging modes. Alternately the lowercase names may be used (multiple values joined by a "","").     The only supported TT values are:     DEBUG_UNDEF (2)    - debug when an undefined value is used (now easier to use STRICT)     DEBUG_DIRS  (8)    - debug when a directive is used.     DEBUG_ALL   (2047) - turn on all debugging.      Either of the following would turn on undef and directive debugging:      DEBUG => 'undef, dirs',            # preferred     DEBUG => 2 | 8,     DEBUG => DEBUG_UNDEF | DEBUG_DIRS, # constants from Template::Constants DEBUG_FORMAT Change the format of messages inserted when DEBUG has DEBUG_DIRS set on. This essentially the same thing as setting the format using the DEBUG directive. DEFAULT The name of a default template file to use if the passed one is not found. DELIMITER String to use to split INCLUDE_PATH with. Default is :. It is more straight forward to just send INCLUDE_PATH an arrayref of paths. DUMP Configures the behavior of the DUMP tag. May be set to 0, a hashref, or another true value. Default is true. If set to 0, all DUMP directives will do nothing. This is useful if you would like to turn off the DUMP directives under some environments. IF set to a true value (or undefined) then DUMP directives will operate. If set to a hashref, the values of the hash can be used to configure the operation of the DUMP directives. The following are the values that can be set in this hash. EntireStash Default 1. If set to 0, then the DUMP directive will not print the entire contents of the stash when a DUMP directive is called without arguments. handler Defaults to an internal coderef. If set to a coderef, the DUMP directive will pass the arguments to be dumped and expects a string with the dumped data. This gives complete control over the dump process. Note 1: The default handler makes sure that values matching the private variable regex are not included. If you install your own handler, you will need to take care of these variables if you intend for them to not be shown. Note 2: If you would like the name of the variable to be dumped, include the string '$VAR1' and the DUMP directive will interpolate the value. For example, to dump all output as YAML - you could do the following:     DUMP => {        handler => sub {            require YAML;            return ""\$VAR1 =\n"".YAML::Dump(shift);        },     } header Default 1. Controls whether a header is printed for each DUMP directive. The header contains the file and line number the DUMP directive was called from. If set to 0 the headers are disabled. html Defaults to 1 if $ENV{'REQUEST_METHOD'} is set - 0 otherwise. If set to 1, then the output of the DUMP directive is passed to the html filter and encased in ""pre"" tags. If set to 0 no html encoding takes place. Sortkeys, Useqq, Ident, Pad, etc Any of the Data::Dumper configuration items may be passed. ENCODING Default undef. If set, and if Perl version is greater than or equal to 5.7.3 (when Encode.pm was first included), then Encode::decode will be called every time a template file is processed and will be passed the value of ENCODING and text from the template. This item can also be set using [% CONFIG ENCODING => encoding %] before calling INCLUDE or PROCESS directives to change encodings on the fly. END_TAG Set a string to use as the closing delimiter for TT. Default is ""%]"". ERROR Used as a fall back when the processing of a template fails. May either be a single filename that will be used in all cases, or may be a hashref of options where the keynames represent error types that will be handled by the filename in their value. A key named default will be used if no other matching keyname can be found. The selection process is similar to that of the TRY/CATCH/THROW directives (see those directives for more information).     my $t = Template::Alloy->new({         ERROR => 'general/catch_all_errors.html',     });      my $t = Template::Alloy->new({         ERROR => {             default   => 'general/catch_all_errors.html',             foo       => 'catch_all_general_foo_errors.html',             'foo.bar' => 'catch_foo_bar_errors.html',         },     }); Note that the ERROR handler will only be used for errors during the processing of the main document. It will not catch errors that occur in templates found in the PRE_PROCESS, POST_PROCESS, and WRAPPER configuration items. ERRORS Same as the ERROR configuration item. Both may be used interchangeably. EVAL_PERL Boolean. Default false. If set to a true value, PERL and RAWPERL blocks will be allowed to run. This is a potential security hole, as arbitrary perl can be included in the template. If Template::Toolkit is installed, a true EVAL_PERL value also allows the perl and evalperl filters to be used. FILTERS Allow for passing in TT style filters.     my $filters = {         filter1 =>  sub { my $str = shift; $s =~ s/./1/gs; $s },         filter2 => [sub { my $str = shift; $s =~ s/./2/gs; $s }, 0],         filter3 => [sub { my ($context, @args) = @_; return sub { my $s = shift; $s =~ s/./3/gs; $s } }, 1],     };      my $str = q{         [% a = ""Hello"" %]         1 ([% a | filter1 %])         2 ([% a | filter2 %])         3 ([% a | filter3 %])     };      my $obj = Template::Alloy->new(FILTERS => $filters);     $obj->process(\$str) || die $obj->error; Would print:         1 (11111)         2 (22222)         3 (33333) Filters passed in as an arrayref should contain a coderef and a value indicating if they are dynamic or static (true meaning dynamic). The dynamic filters are passed the pseudo context object and any arguments and should return a coderef that will be called as the filter. The filter coderef is then passed the string. GLOBAL_CACHE Default 0. If true, documents will be cached in $Template::Alloy::GLOBAL_CACHE. It may also be passed a hashref, in which case the documents will be cached in the passed hashref. The TT, Tmpl, and velocity will automatically cache documents in the object. The HTML::Template interface uses a new object each time. Setting the HTML::Template's CACHE configuration is the same as setting GLOBAL_CACHE. INCLUDE_PATH A string or an arrayref or coderef that returns an arrayref that contains directories to look for files included by processed templates. Defaults to ""."" (the current directory). INCLUDE_PATHS Non-TT item. Same as INCLUDE_PATH but only takes an arrayref. If not specified then INCLUDE_PATH is turned into an arrayref and stored in INCLUDE_PATHS. Overrides INCLUDE_PATH. INTERPOLATE Boolean. Specifies whether variables in text portions of the template will be interpolated. For example, the $variable and ${var.value} would be substituted with the appropriate values from the variable cache (if INTERPOLATE is on).     [% IF 1 %]The variable $variable had a value ${var.value}[% END %] LOAD_PERL Indicates if the USE directive can fall back and try and load a perl module if the indicated module was not found in the PLUGIN_BASE path. See the USE directive. This configuration has no bearing on the COMPILE_PERL directive used to indicate using compiled perl documents. MAX_EVAL_RECURSE (Alloy only) Will use $Template::Alloy::MAX_EVAL_RECURSE if not present. Default is 50. Prevents runaway on the following:     [% f = ""[% f|eval %]"" %][% f|eval %] MAX_MACRO_RECURSE (Alloy only) Will use $Template::Alloy::MAX_MACRO_RECURSE if not present. Default is 50. Prevents runaway on the following:     [% MACRO f BLOCK %][% f %][% END %][% f %] NAMESPACE No Template::Namespace::Constants support. Hashref of hashrefs representing constants that will be folded into the template at compile time.     Template::Alloy->new(NAMESPACE => {constants => {          foo => 'bar',     }}); Is the same as     Template::Alloy->new(CONSTANTS => {          foo => 'bar',     }); Any number of hashes can be added to the NAMESPACE hash. NEGATIVE_STAT_TTL (Not in TT) Defaults to STAT_TTL which defaults to $STAT_TTL which defaults to 1. Similar to STAT_TTL - but represents the time-to-live seconds until a document that was not found is checked again against the system for modifications. Setting this number higher will allow for fewer file system accesses. Setting it to a negative number will allow for the file system to be checked every hit. NO_INCLUDES Default false. If true, calls to INCLUDE, PROCESS, WRAPPER and INSERT will fail. This option is also available when using the process method. OUTPUT Alternate way of passing in the output location for processed templates. If process is not passed an output argument, it will look for this value. See the process method for a listing of possible values. OUTPUT_PATH Base path for files written out via the process method or via the redirect and file filters. See the redirect virtual method and the process method for more information. PLUGINS A hashref of mappings of plugin modules.    PLUGINS => {       Iterator => 'Template::Plugin::Iterator',       DBI      => 'MyDBI',    }, See the USE directive for more information. PLUGIN_BASE Default value is Template::Plugin. The base module namespace that template plugins will be looked for. See the USE directive for more information. May be either a single namespace, or an arrayref of namespaces. POST_CHOMP Set the type of chomping at the ending of a tag. See the section on chomping for more information. POST_PROCESS Only available via when using the process interface. A list of templates to be processed and appended to the content after the main template. During this processing the ""template"" namespace will contain the name of the main file being processed. This is useful for adding a global footer to all templates. PRE_CHOMP Set the type of chomping at the beginning of a tag. See the section on chomping for more information. PRE_DEFINE Same as the VARIABLES configuration item. PRE_PROCESS Only available via when using the process interface. A list of templates to be processed before and pre-pended to the content before the main template. During this processing the ""template"" namespace will contain the name of the main file being processed. This is useful for adding a global header to all templates. PROCESS Only available via when using the process interface. Specify a file to use as the template rather than the one passed in to the ->process method. RECURSION Boolean. Default false. Indicates that INCLUDED or PROCESSED files can refer to each other in a circular manner. Be careful about recursion. RELATIVE Boolean. Default false. If true, allows filenames to be specified that are relative to the currently running process. SEMICOLONS Boolean. Default false. If true, then the syntax will require that semi-colons separate multiple directives in the same tag. This is useful for keeping the syntax a little more clean as well as trouble shooting some errors. SHOW_UNDEFINED_INTERP (Not in TT) Default false (default true in Velocity). If INTERPOLATE is true, interpolated dollar variables that return undef will be removed. With SHOW_UNDEFINED_INTERP set, undef values will leave the variable there.     [% CONFIG INTERPOLATE => 1 %]     [% SET foo = 1 %][% SET bar %]     ($foo)($bar) ($!foo)($!bar) Would print:     (1)() (1)() But the following:     [% CONFIG INTERPOLATE => 1, SHOW_UNDEFINED_INTERP => 1 %]     [% SET foo = 1 %][% SET bar %]     ($foo)($bar) ($!foo)($!bar) Would print:     (1)($bar) (1)() Note that you can use an exclamation point directly after the dollar to make the variable silent. This is similar to how Velocity works. START_TAG Set a string or regular expression to use as the opening delimiter for TT. Default is ""[%"". You should be sure that the tag does not include grouping parens or INTERPOLATE will not function properly. STASH Template::Alloy manages its own stash of variables. You can pass a Template::Stash or Template::Stash::XS object, but Template::Alloy will copy all of values out of the object into its own stash. Template::Alloy won't use any of the methods of the passed STASH object. The STASH option is only available when using the process method. STAT_TTL Defaults to $STAT_TTL which defaults to 1. Represents time-to-live seconds until a cached in memory document is compared to the file system for modifications. Setting this number higher will allow for fewer file system accesses. Setting it to a negative number will allow for the file system to be checked every hit. STREAM Defaults to false. If set to true, generated template content will be printed to the currently selected filehandle (default is STDOUT) as soon as it is ready - there will be no buffering of the output. The Stream role uses the Play role's directives (non-compiled_perl). All directives and configuration work, except for the following exceptions: CLEAR directive Because the output is not buffered - the CLEAR directive would have no effect. The CLEAR directive will throw an error when STREAM is on. TRIM configuration Because the output is not buffered - trim operations cannot be played on the output buffers. WRAPPER configuration/directive The WRAPPER configuration and directive items effectively turn off STREAM since the WRAPPERS are generated in reverse order and because the content is inserted into the middle of the WRAPPERS. WRAPPERS will still work, they just won't stream. VARIOUS errors Because the template is streaming, items that cause errors my result in partially printed pages - since the error would occur part way through the print. All output is printed directly to the currently selected filehandle (defaults to STDOUT) via the CORE::print function. Any output parameter passed to process or process_simple will be ignored. If you would like the output to go to another handle, you will need to select that handle, process the template, and re-select STDOUT. STRICT Defaults to false. If set to true, any undefined variable that is encountered will cause the processing of the template to abort. This can be caught with a TRY block. This can be useful for making sure that the template only attempts to use variables that were correctly initialized similar in spirit to Perl's ""use strict."" When this occurs the strict_throw method is called. See the STRICT_THROW configuration for additional options. Similar functionality could be implemented using UNDEFINED_ANY. The STRICT configuration item can be passed to new or it may also be set during runtime using the CONFIG directive. Once set though it cannot be disabled for the duration of the current template and sub components. For example you could call [% CONFIG STRICT => 1 %] in header.tt and strict mode would be enabled for the header.tt and any sub templates processed by header.tt. STRICT_THROW (not in TT) Default undef. Can be set to a subroutine which will be called when STRICT is set and an undefined variable is processed. It will be passed the error type, error message, and a hashref of template information containing the current component being processed, the current outer template being processed, the identity reference for the variable, and the stringified name of the identity. This override can be used for filtering allowable elements.     my $ta = Template::Alloy->new({         STRICT => 1,         STRICT_THROW => sub {             my ($ta, $err_type, $msg, $args) = @_;              return if $args->{'component'} eq 'header.tt'                       && $args->{'template'} eq 'main.html'                       && $args->{'name'} eq 'foo.bar(1)'; # stringified identity name              $ta->throw($err_type, $msg); # all other undefined variables die         },     }); SYNTAX (not in TT) Defaults to ""cet"". Indicates the syntax that will be used for parsing included templates or eval'ed strings. You can use the CONFIG directive to change the SYNTAX on the fly (it will not affect the syntax of the document currently being parsed). The syntax may be passed in upper or lower case. The available choices are:     alloy - Template::Alloy style - the same as TT3     tt3   - Template::Toolkit ver3 - same as Alloy     tt2   - Template::Toolkit ver2 - almost the same as TT3     tt1   - Template::Toolkit ver1 - almost the same as TT2     ht    - HTML::Template - same as HTML::Template::Expr without EXPR     hte   - HTML::Template::Expr     js    - JavaScript style - requires compile_js to be set.     jsr   - JavaScript Raw style - requires compile_js to be set. Passing in a different syntax allows for the process method to use a non-TT syntax and for the output method to use a non-HT syntax. The following is a sample of HTML::Template interface usage parsing a Template::Toolkit style document.     my $obj = Template::Alloy->new(filename => 'my/template.tt'                                      syntax   => 'cet');     $obj->param(\%swap);     print $obj->output; The following is a sample of Template::Toolkit interface usage parsing a HTML::Template::Expr style document.     my $obj = Template::Alloy->new(SYNTAX => 'hte');     $obj->process('my/template.ht', \%swap); You can use the define_syntax method to add another custom syntax to the list of available options. TAG_STYLE Allow for setting the type of tag delimiters to use for parsing the TT. See the TAGS directive for a listing of the available types. TRIM Remove leading and trailing whitespace from blocks and templates. This operation is performed after all enclosed template tags have been executed. UNDEFINED_ANY This is not a TT configuration option. This option expects to be a code ref that will be called if a variable is undefined during a call to play_expr. It is passed the variable identity array as a single argument. This is most similar to the ""undefined"" method of Template::Stash. It allows for the ""auto-defining"" of a variable for use in the template. It is suggested that UNDEFINED_GET be used instead as UNDEFINED_ANY is a little to general in defining variables. You can also sub class the module and override the undefined_any method. UNDEFINED_GET This is not a TT configuration option. This option expects to be a code ref that will be called if a variable is undefined during a call to GET. It is passed the variable identity array as a single argument. This is more useful than UNDEFINED_ANY in that it is only called during a GET directive rather than in embedded expressions (such as [% a || b || c %]). You can also sub class the module and override the undefined_get method. V1DOLLAR This allows for some compatibility with TT1 templates. The only real behavior change is that [% $foo %] becomes the same as [% foo %]. The following is a basic table of changes invoked by using V1DOLLAR.    With V1DOLLAR        Equivalent Without V1DOLLAR (Normal default)    ""[% foo %]""          ""[% foo %]""    ""[% $foo %]""         ""[% foo %]""    ""[% ${foo} %]""       ""[% ${foo} %]""    ""[% foo.$bar %]""     ""[% foo.bar %]""    ""[% ${foo.bar} %]""   ""[% ${foo.bar} %]""    ""[% ${foo.$bar} %]""  ""[% ${foo.bar} %]""    ""Text: $foo""         ""Text: $foo""    ""Text: ${foo}""       ""Text: ${foo}""    ""Text: ${$foo}""      ""Text: ${foo}"" V2EQUALS Default 1 in the TT syntax, defaults to 0 in the HTML::Template syntax. If set to 1 then ""=="" is an alias for ""eq"" and ""!= is an alias for ""ne"".     [% CONFIG V2EQUALS => 1 %][% ('7' == '7.0') || 0 %]     [% CONFIG V2EQUALS => 0 %][% ('7' == '7.0') || 0 %]      Prints      0     1 V2PIPE Restores the behavior of the pipe operator to be compatible with TT2. With V2PIPE = 1     [%- BLOCK a %]b is [% b %]     [% END %]     [%- PROCESS a b => 237 | repeat(2) %]      # output of block ""a"" with b set to 237 is passed to the repeat(2) filter      b is 237     b is 237 With V2PIPE = 0 (default)     [%- BLOCK a %]b is [% b %]     [% END %]     [% PROCESS a b => 237 | repeat(2) %]      # b set to 237 repeated twice, and b passed to block ""a""      b is 237237 VARIABLES A hashref of variables to initialize the template stash with. These variables are available for use in any of the executed templates. See the section on VARIABLES for the types of information that can be passed in. VMETHOD_FUNCTIONS Defaults to 1. All scalar virtual methods are available as top level functions as well. This is not true of TT2. In Template::Alloy the following are equivalent:     [% ""abc"".length %]     [% length(""abc"") %] You may set VMETHOD_FUNCTIONS to 0 to disable this behavior. WRAPPER Only available via when using the process interface. Operates similar to the WRAPPER directive. The option can be given a single filename, or an arrayref of filenames that will be used to wrap the processed content. If an arrayref is passed the filenames are processed in reverse order, so that the first filename specified will end up being on the outside (surrounding all other wrappers).    my $t = Template::Alloy->new(        WRAPPER => ['my/wrappers/outer.html', 'my/wrappers/inner.html'],    ); Content generated by the PRE_PROCESS and POST_PROCESS will come before and after (respectively) the content generated by the WRAPPER configuration item. See the WRAPPER directive for more examples of how wrappers are constructed. CONFIGURATION (HTML::Template STYLE) The following HTML::Template and HTML::Template::Expr configuration variables are supported (in HTML::Template documentation order). Note: for further discussion you can refer to the HT documentation. Many of the variables mentioned in the TT CONFIGURATION section apply here as well. Unless noted, these items only apply when using the output method. Items may be passed in upper or lower case. All passed items are resolved to upper case. These variables should be passed to the ""new"" constructor.     my $obj = Template::Alloy->new(         type   => 'filename',         source => 'my/template.ht',         die_on_bad_params => 1,         loop_context_vars => 1,         global_vars       => 1         post_chomp => ""="",         pre_chomp  => ""-"",     ); TYPE Can be one of filename, filehandle, arrayref, or scalarref. Indicates what type of input is in the ""source"" configuration item. SOURCE Stores where to read the input file. The type is specified in the ""type"" configuration item. FILENAME Indicates a filename to read the template from. Same as putting the filename in the ""source"" item and setting ""type"" to ""filename"". Must be set to enable caching. FILEHANDLE Should contain an open filehandle to read the template from. Same as putting the filehandle in the ""source"" item and setting ""type"" to ""filehandle"". Will not be cached. ARRAYREF Should contain an arrayref whose values are the lines of the template. Same as putting the arrayref in the ""source"" item and setting ""type"" to ""arrayref"". Will not be cached. SCALARREF Should contain an reference to a scalar that contains the template. Same as putting the scalar ref in the ""source"" item and setting ""type"" to ""scalarref"". Will not be cached. CACHE If set to one, then Alloy will use a global, in-memory document cache to store compiled templates in between calls. This is generally only useful in a mod_perl environment. The document is checked for a different modification time at each request. BLIND_CACHE Same as with cache enabled, but will not check if the document has been modified. FILE_CACHE If set to 1, will cache the compiled document on the file system. If true, file_cache_dir must be set. FILE_CACHE_DIR The directory where to store cached documents when file_cache is true. This is similar to the TT compile_dir option. DOUBLE_FILE_CACHE Uses a combination of file_cache and cache. PATH Same as INCLUDE_PATH when using the process method. ASSOCIATE May be a single CGI object or an arrayref of objects. The params from these objects will be added to the params during the output call. CASE_SENSITIVE Allow passed variables set through the param method, or the associate configuration to be used case sensitively. Default is off. It is highly suggested that this be set to 1. LOOP_CONTEXT_VARS Default false. When true, calls to the loop directive will create the following variables that give information about the current iteration of the loop:    __first__   - True on first iteration only    __last__    - True on last iteration only    __inner__   - True on any iteration that isn't first or last    __odd__     - True on odd iterations    __counter__ - The iteration count These variables are also available to LOOPs run under TT syntax if loop_context_vars is set and if QR_PRIVATE is set to 0. GLOBAL_VARS. Default true in HTE mode. Default false in HT. Allows top level variables to be used in LOOPs. When false, only variables defined in the current LOOP iteration hashref will be available. DEFAULT_ESCAPE Controls the type of escape used on named variables in TMPL_VAR directives. Can be one of HTML, URL, or JS. The values of TMPL_VAR directives will be encoded with this type unless they specify their own type via an ESCAPE attribute. You may alternately use the AUTO_FILTER directive which can be any of the item vmethod filters (you must use lower case when specifying the AUTO_FILTER directive). The AUTO_FILTER directive will also be applied to TMPL_VAR EXPR and TMPL_GET items while DEFAULT_ESCAPE only applies to TMPL_VAR NAME items. NO_TT Default false in 'hte' syntax. Default true in 'ht' syntax. If true, no extended TT directives will be allowed. The output method uses 'hte' syntax by default. SEMI PUBLIC METHODS The following list of methods are other interesting methods of Alloy that may be re-implemented by subclasses of Alloy. exception Creates an exception object blessed into the package listed in Template::Alloy::Exception. execute_tree Executes a parsed tree (returned from parse_tree) play_expr Play the parsed expression. Turns a variable identity array into the parsed variable. This method is also responsible for playing operators and running virtual methods and filters. The variable identity array may also contain literal values, or operator identity arrays. include_filename Takes a file path, and resolves it into the full filename using paths from INCLUDE_PATH or INCLUDE_PATHS. _insert Resolves the file passed, and then returns its contents. list_filters Dynamically loads the filters list from Template::Filters when a filter is used that does not have a native implementation in Alloy. load_template Given a filename or a string reference will return a ""document"" hashref hash that contains the parsed tree.     my $doc = $self->load_template($file); # errors die This method handles the in-memory caching of the document. load_tree Given the ""document"" hashref, will either load the parsed AST from file (if configured to do so), or will load the content, parse the content using the Parse role, and will return the tree. File based caching of the parsed AST happens here. load_perl Only used if COMPILE_PERL is true (default is false). Given the ""document"" hashref, will either load the compiled perl from file (if configured to do so), or will load the AST using ""load_tree"", will compile a new perl code document using the Compile role, and will return the perl code. File based caching of the compiled perl happens here. parse_tree Parses the passed string ref with the appropriate template syntax. See Template::Alloy::Parse for more details. parse_expr Parses the passed string ref for a variable or expression. See Template::Alloy::Parse for more details. parse_args See Template::Alloy::Parse for more details. set_variable Used to set a variable. Expects a variable identity array and the value to set. It will autovifiy as necessary. strict_throw Called during processing of template when STRICT configuration is set and an uninitialized variable is met. Arguments are the variable identity reference. Will call STRICT_THROW configuration item if set, otherwise will call throw with a useful message. throw Creates an exception object from the arguments and dies. undefined_any Called during play_expr if a value is returned that is undefined. This could be used to magically create variables on the fly. This is similar to Template::Stash::undefined. It is suggested that undefined_get be used instead. Default behavior returns undef. You may also pass a coderef via the UNDEFINED_ANY configuration variable. Also, you can try using the DEBUG => 'undef', configuration option which will throw an error on undefined variables. undefined_get Called when a variable is undefined during a GET directive. This is useful to see if a value that is about to get inserted into the text is undefined. undefined_any is a little too general for most cases. Also, you may pass a coderef via the UNDEFINED_GET configuration variable. OTHER UTILITY METHODS The following is a brief list of other methods used by Alloy. Generally, these shouldn't be overwritten by subclasses. ast_string Returns perl code representation of a variable. context Used to create a ""pseudo"" context object that allows for portability of TT plugins, filters, and perl blocks that need a context object. Uses the Template::Alloy::Context class. debug_node Used to get debug info on a directive if DEBUG_DIRS is set. get_line_number_by_index Used to turn string index position into line number interpolate_node Used for parsing text nodes for dollar variables when interpolate is on. play_operator Provided by the Operator role. Allows for playing an operator AST. See Template::Alloy::Operator for more details. apply_precedence Provided by the Parse role. Allows for parsed operator array to be translated to a tree based upon operator precedence. _process Called by process and the PROCESS, INCLUDE and other directives. slurp Reads contents of passed filename - throws file exception on error. split_paths Used to split INCLUDE_PATH or other directives if an arrayref is not passed. tt_var_string Returns a template toolkit representation of a variable. _vars Return a reference to the current stash of variables. This is currently only used by the pseudo context object and may disappear at some point. THANKS Thanks to Andy Wardley for creating Template::Toolkit. Thanks to Sam Tregar for creating HTML::Template. Thanks to David Lowe for creating Text::Tmpl. Thanks to the Apache Velocity guys. Thanks to Ben Grimm for a patch to allow passing a parsed document to the ->process method. Thanks to David Warring for finding a parse error in HTE syntax. Thanks to Carl Franks for adding the base ENCODING support. AUTHOR Paul Seamons <paul@seamons.com> LICENSE This module may be distributed under the same terms as Perl itself. × Module Install Instructions To install Template::Alloy, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Template::Alloy CPAN shell                      perl -MCPAN -e shell                     install Template::Alloy For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"TT2/3, HT, HTE, Tmpl, and Velocity Engine"	"true"
"Template Engines"	"Template::Toolkit"	"https://metacpan.org/pod/Template::Toolkit"	"Very Popular Template Processing System"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Template::Toolkit - Template Processing System - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Andy Wardley  /  2.26 (ABW on 2014-09-17) 2.25 (ABW on 2013-07-24) 2.24 (ABW on 2012-02-08) 2.23 (ABW on 2012-01-21) 2.22 (ABW on 2009-07-21) 2.21_02 DEV (ABW on 2009-07-04) 2.21_01 DEV (ABW on 2009-07-04) 2.21 (ABW on 2009-06-30) 2.20_4 DEV (ABW on 2009-05-21) 2.20_3 DEV (ABW on 2009-05-20) 2.20_2 DEV (ABW on 2009-05-17) 2.20_1 DEV (ABW on 2009-04-07) 2.20 (ABW on 2008-08-13) 2.19_03 DEV (ABW on 2008-08-12) 2.19_02 DEV (ABW on 2008-08-08) 2.19_01 DEV (ABW on 2008-08-07) 2.19 (ABW on 2007-04-30) 2.18 (ABW on 2007-02-09) 2.15 (ABW on 2006-05-26) 2.14 (ABW on 2004-10-04) 2.13 (ABW on 2004-01-30) 2.12 (ABW on 2004-01-12) 2.11 (ABW on 2004-01-06) 2.10 (ABW on 2003-07-24) 2.09 (ABW on 2003-04-23) 2.08 (ABW on 2002-07-30) 2.07 (ABW on 2002-04-17) 2.06 (ABW on 2001-11-07) 2.04 (ABW on 2001-06-29) 2.03 (ABW on 2001-06-15) 2.01 (ABW on 2001-03-30) 2.00 (ABW on 2000-12-06) 1.07 (ABW on 2000-06-16) 2.17 (ADAMK on 2007-02-08) 2.16 (ADAMK on 2007-01-23) 2.06 (ABW on 2002-01-22) 2.005 (ABW on 2000-09-14) 2.004 (ABW on 2000-09-12) 1.06 (ABW on 2000-03-28) 1.05 (ABW on 2000-03-20) 1.04 (ABW on 2000-03-02) 1.03 (ABW on 2000-02-01) 1.02 (ABW on 1999-12-21) 1.00 (ABW on 1999-12-02) 0.28 (ABW on 1999-11-05) 0.27 (ABW on 1999-10-01) 0.26 (ABW on 1999-09-15) 0.25 (ABW on 1999-08-16) 0.24 (ABW on 1999-08-12) 0.23 (ABW on 1999-08-10) 0.22 (ABW on 1999-08-06) Template-Toolkit-2.26 100 ++ 100 ++  / Template::Toolkit 17 Sep 2014 13:58:13 GMT Source (raw) Browse (raw) Changes Clone repository Issues (84) 5 (19 reviews) Testers (6553 / 295 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (491.26Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 2.25 (ABW on 2013-07-24) 2.24 (ABW on 2012-02-08) 2.23 (ABW on 2012-01-21) 2.22 (ABW on 2009-07-21) 2.21_02 DEV (ABW on 2009-07-04) 2.21_01 DEV (ABW on 2009-07-04) 2.21 (ABW on 2009-06-30) 2.20_4 DEV (ABW on 2009-05-21) 2.20_3 DEV (ABW on 2009-05-20) 2.20_2 DEV (ABW on 2009-05-17) 2.20_1 DEV (ABW on 2009-04-07) 2.20 (ABW on 2008-08-13) 2.19_03 DEV (ABW on 2008-08-12) 2.19_02 DEV (ABW on 2008-08-08) 2.19_01 DEV (ABW on 2008-08-07) 2.19 (ABW on 2007-04-30) 2.18 (ABW on 2007-02-09) 2.15 (ABW on 2006-05-26) 2.14 (ABW on 2004-10-04) 2.13 (ABW on 2004-01-30) 2.12 (ABW on 2004-01-12) 2.11 (ABW on 2004-01-06) 2.10 (ABW on 2003-07-24) 2.09 (ABW on 2003-04-23) 2.08 (ABW on 2002-07-30) 2.07 (ABW on 2002-04-17) 2.06 (ABW on 2001-11-07) 2.04 (ABW on 2001-06-29) 2.03 (ABW on 2001-06-15) 2.01 (ABW on 2001-03-30) 2.00 (ABW on 2000-12-06) 1.07 (ABW on 2000-06-16) 2.17 (ADAMK on 2007-02-08) 2.16 (ADAMK on 2007-01-23) 2.06 (ABW on 2002-01-22) 2.005 (ABW on 2000-09-14) 2.004 (ABW on 2000-09-12) 1.06 (ABW on 2000-03-28) 1.05 (ABW on 2000-03-20) 1.04 (ABW on 2000-03-02) 1.03 (ABW on 2000-02-01) 1.02 (ABW on 1999-12-21) 1.00 (ABW on 1999-12-02) 0.28 (ABW on 1999-11-05) 0.27 (ABW on 1999-10-01) 0.26 (ABW on 1999-09-15) 0.25 (ABW on 1999-08-16) 0.24 (ABW on 1999-08-12) 0.23 (ABW on 1999-08-10) 0.22 (ABW on 1999-08-06) Diff with version 2.25 (ABW on 2013-07-24) 2.24 (ABW on 2012-02-08) 2.23 (ABW on 2012-01-21) 2.22 (ABW on 2009-07-21) 2.21_02 DEV (ABW on 2009-07-04) 2.21_01 DEV (ABW on 2009-07-04) 2.21 (ABW on 2009-06-30) 2.20_4 DEV (ABW on 2009-05-21) 2.20_3 DEV (ABW on 2009-05-20) 2.20_2 DEV (ABW on 2009-05-17) 2.20_1 DEV (ABW on 2009-04-07) 2.20 (ABW on 2008-08-13) 2.19_03 DEV (ABW on 2008-08-12) 2.19_02 DEV (ABW on 2008-08-08) 2.19_01 DEV (ABW on 2008-08-07) 2.19 (ABW on 2007-04-30) 2.18 (ABW on 2007-02-09) 2.15 (ABW on 2006-05-26) 2.14 (ABW on 2004-10-04) 2.13 (ABW on 2004-01-30) 2.12 (ABW on 2004-01-12) 2.11 (ABW on 2004-01-06) 2.10 (ABW on 2003-07-24) 2.09 (ABW on 2003-04-23) 2.08 (ABW on 2002-07-30) 2.07 (ABW on 2002-04-17) 2.06 (ABW on 2001-11-07) 2.04 (ABW on 2001-06-29) 2.03 (ABW on 2001-06-15) 2.01 (ABW on 2001-03-30) 2.00 (ABW on 2000-12-06) 1.07 (ABW on 2000-06-16) 2.17 (ADAMK on 2007-02-08) 2.16 (ADAMK on 2007-01-23) 2.06 (ABW on 2002-01-22) 2.005 (ABW on 2000-09-14) 2.004 (ABW on 2000-09-12) 1.06 (ABW on 2000-03-28) 1.05 (ABW on 2000-03-20) 1.04 (ABW on 2000-03-02) 1.03 (ABW on 2000-02-01) 1.02 (ABW on 1999-12-21) 1.00 (ABW on 1999-12-02) 0.28 (ABW on 1999-11-05) 0.27 (ABW on 1999-10-01) 0.26 (ABW on 1999-09-15) 0.25 (ABW on 1999-08-16) 0.24 (ABW on 1999-08-12) 0.23 (ABW on 1999-08-10) 0.22 (ABW on 1999-08-06) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 60 PAUSE users 40 non-PAUSE users. ABW Andy Wardley Dependencies AppConfig File::Spec File::Temp Scalar::Util Test::LeakTrace and possibly others CPAN Testers List Reverse dependencies Dependency graph × Template-Toolkit-2.26 NAME Introduction Documentation Author Copyright See Also NAME Template::Toolkit - Template Processing System Introduction The Template Toolkit is a collection of Perl modules which implement a fast, flexible, powerful and extensible template processing system. It is ""input-agnostic"" and can be used equally well for processing any kind of text documents: HTML, XML, CSS, Javascript, Perl code, plain text, and so on. However, it is most often used for generating static and dynamic web content, so that's what we'll focus on here. Although the Template Toolkit is written in Perl, you don't need to be a Perl programmer to use it. It was designed to allow non-programmers to easily create and maintain template-based web sites without having to mess around writing Perl code or going crazy with cut-n-paste. However, the Template Toolkit is also designed to be extremely flexible and extensible. If you are a Perl programmer, or know someone who is, then you can easily hook the Template Toolkit into your existing code, data, databases and web applications. Furthermore, you can easily extend the Template Toolkit through the use of its plugin mechanism and other developer APIs. Whatever context you use it in, the primary purpose of the Template Toolkit is to allow you to create a clear separation between the presentation elements of your web site and everything else. If you're generating static web pages, then you can use it to separate the commonly repeated user interface elements on each page (headers, menus, footers, etc.) from the core content. If you're generating dynamic web pages for the front end of a web application, then you'll also be using it to keep the back-end Perl code entirely separate from the front-end HTML templates. Either way, a clear separation of concerns is what allow you to concentrate on one thing at a time without the other things getting in your way. And that's what the Template Toolkit is all about. Documentation The documentation for the Template Toolkit is organised into five sections. The Template::Manual contains detailed information about using the Template Toolkit. It gives examples of its use and includes a full reference of the template language, configuration options, filters, plugins and other component parts. The Template::Modules page lists the Perl modules that comprise the Template Toolkit. It gives a brief explanation of what each of them does, and provides a link to the complete documentation for each module for further information. If you're a Perl programmer looking to use the Template Toolkit from your Perl programs then this section is likely to be of interest. Most, if not all of the information you need to call the Template Toolkit from Perl is in the documentation for the Template module. You only really need to start thinking about the other modules if you want to extend or modify the Template Toolkit in some way, or if you're interested in looking under the hood to see how it all works. The documentation for each module is embedded as POD in each module, so you can always use perldoc from the command line to read a module's documentation. e.g.     $ perldoc Template     $ perldoc Template::Context       ...etc... It's worth noting that all the other documentation, including the user manual is available as POD. e.g.     $ perldoc Template::Manual     $ perldoc Template::Manual::Config       ...etc... The Template::Tools section contains the documentation for Template::Tools::tpage and Template::Tools::ttree. These are two command line programs that are distributed with the Template Toolkit. tpage is used to process a single template file, ttree for processing entire directories of template files. The Template::Tutorial section contains two introductory tutorials on using the Template Toolkit. The first is Template::Tutorial::Web on generating web content. The second is Template::Tutorial::Datafile on using the Template Toolkit to generate other data formats including XML. The final section of the manual is Template::FAQ which contains answers to some of the Frequently Asked Questions about the Template Toolkit. You can read the documentation in HTML format either online at the Template Toolkit web site, http://template-toolkit.org/, or by downloading the HTML version of the documentation from http://template-toolkit.org/download/index.html#html_docs and unpacking it on your local machine. Author The Template Toolkit was written by Andy Wardley (http://wardley.org/ mailto:abw@wardley.org) with assistance and contributions from a great number of people. Please see Template::Manual::Credits for a full list. Copyright Copyright (C) 1996-2013 Andy Wardley. All Rights Reserved. This module is free software; you can redistribute it and/or modify it under the same terms as Perl itself. See Also Template, Template::Manual, Template::Modules, Template::Tools, Template::Tutorial × Module Install Instructions To install Template::Toolkit, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Template::Toolkit CPAN shell                      perl -MCPAN -e shell                     install Template::Toolkit For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Very Popular Template Processing System"	"true"
"Template Engines"	"Text::MicroTemplate"	"https://metacpan.org/pod/Text::MicroTemplate"	"Fast, simple and safe template engine written in pure-Perl and core modules."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Text::MicroTemplate - Micro template engine with Perl5 language - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Kazuho Oku  /  0.24 (KAZUHO on 2015-06-27) 0.23 (KAZUHO on 2015-04-28) 0.22 (KAZUHO on 2015-04-27) 0.21 (KAZUHO on 2015-04-23) 0.20 (KAZUHO on 2013-06-13) 0.19 (KAZUHO on 2012-11-11) 0.18 (KAZUHO on 2010-09-06) 0.17 (KAZUHO on 2010-08-30) 0.16 (KAZUHO on 2010-08-27) 0.15 (KAZUHO on 2010-08-05) 0.14 (KAZUHO on 2010-08-04) 0.13 (KAZUHO on 2010-06-02) 0.12 (KAZUHO on 2010-06-02) 0.11 (KAZUHO on 2010-01-01) 0.10 (KAZUHO on 2009-11-20) 0.09 (KAZUHO on 2009-10-21) 0.08 (KAZUHO on 2009-10-18) 0.07 (TYPESTER on 2009-08-03) 0.05 (KAZUHO on 2008-12-18) 0.04 (KAZUHO on 2008-12-16) 0.03 (KAZUHO on 2008-12-16) 0.02 (KAZUHO on 2008-12-15) 0.01 (KAZUHO on 2008-12-14) Text-MicroTemplate-0.24 9 ++ 9 ++  / Text::MicroTemplate 27 Jun 2015 00:20:17 GMT Module version: 0.24 Source (raw) Browse (raw) Changes Clone repository Issues (1) Testers (1728 / 1 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (29.75Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.23 (KAZUHO on 2015-04-28) 0.22 (KAZUHO on 2015-04-27) 0.21 (KAZUHO on 2015-04-23) 0.20 (KAZUHO on 2013-06-13) 0.19 (KAZUHO on 2012-11-11) 0.18 (KAZUHO on 2010-09-06) 0.17 (KAZUHO on 2010-08-30) 0.16 (KAZUHO on 2010-08-27) 0.15 (KAZUHO on 2010-08-05) 0.14 (KAZUHO on 2010-08-04) 0.13 (KAZUHO on 2010-06-02) 0.12 (KAZUHO on 2010-06-02) 0.11 (KAZUHO on 2010-01-01) 0.10 (KAZUHO on 2009-11-20) 0.09 (KAZUHO on 2009-10-21) 0.08 (KAZUHO on 2009-10-18) 0.07 (TYPESTER on 2009-08-03) 0.05 (KAZUHO on 2008-12-18) 0.04 (KAZUHO on 2008-12-16) 0.03 (KAZUHO on 2008-12-16) 0.02 (KAZUHO on 2008-12-15) 0.01 (KAZUHO on 2008-12-14) 0.06 (TOKUHIROM on 2009-07-28) Diff with version 0.23 (KAZUHO on 2015-04-28) 0.22 (KAZUHO on 2015-04-27) 0.21 (KAZUHO on 2015-04-23) 0.20 (KAZUHO on 2013-06-13) 0.19 (KAZUHO on 2012-11-11) 0.18 (KAZUHO on 2010-09-06) 0.17 (KAZUHO on 2010-08-30) 0.16 (KAZUHO on 2010-08-27) 0.15 (KAZUHO on 2010-08-05) 0.14 (KAZUHO on 2010-08-04) 0.13 (KAZUHO on 2010-06-02) 0.12 (KAZUHO on 2010-06-02) 0.11 (KAZUHO on 2010-01-01) 0.10 (KAZUHO on 2009-11-20) 0.09 (KAZUHO on 2009-10-21) 0.08 (KAZUHO on 2009-10-18) 0.07 (TYPESTER on 2009-08-03) 0.05 (KAZUHO on 2008-12-18) 0.04 (KAZUHO on 2008-12-16) 0.03 (KAZUHO on 2008-12-16) 0.02 (KAZUHO on 2008-12-15) 0.01 (KAZUHO on 2008-12-14) 0.06 (TOKUHIROM on 2009-07-28) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 5 PAUSE users 4 non-PAUSE users. KAZUHO Kazuho Oku and 1 contributors show them Kazuho Oku <kazuhooku gmail.com> Dependencies unknown CPAN Testers List Reverse dependencies NAME SYNOPSIS DESCRIPTION standalone fast intelligent extensible TEMPLATE SYNTAX EXPORTABLE FUNCTIONS build_mt($template) render_mt($template, @args) encoded_string($str) OO-STYLE INTERFACE new($template) new(%args) new(\%args) template escape_func package_name prepend code() filter(sub filter_func { ... })->(sub { template lines }) DEBUG SEE ALSO AUTHOR LICENSE NAME Text::MicroTemplate - Micro template engine with Perl5 language SYNOPSIS     use Text::MicroTemplate qw(:all);      # compile template, and render     $renderer = build_mt('hello, <?= $_[0] ?>');     $html = $renderer->('John')->as_string;      # or in one line     $html = render_mt('hello, <?= $_[0] ?>', 'John')->as_string;      # complex form     $mt = Text::MicroTemplate->new(         template => 'hello, <?= $query->param('user') ?>',     );     $code = $mt->code;     $renderer = eval << ""..."" or die $@;     sub {         my \$query = shift;         $code->();     }     ...     $html = $renderer->(CGI->new)->as_string; DESCRIPTION Text::MicroTemplate is a standalone, fast, intelligent, extensible template engine with following features. standalone Text::MicroTemplate does not rely on other CPAN modules. fast Based on Mojo::Template, expressions in the template is perl code. intelligent Text::MicroTemplate automatically escapes variables when and only when necessary. extensible Text::MicroTemplate does not provide features like template cache or including other files by itself. However, it is easy to add you own (that suites the most to your application), by wrapping the result of the module (which is a perl expression). The module only provides basic building blocks for a template engine. Refer to Text::MicroTemplate::File for higher-level interface. TEMPLATE SYNTAX The template language is Perl5 itself!     # output the result of expression with automatic escape     <?= $expr ?>             (tag style)     ?= $expr                 (per-line)      # execute perl code (tag style)     <? foo() ?>     ? foo()      # comment (tag style)     <?# comment ?>     ?# comment      # loops     <ul>     ? for my $item (@list) {     <li><?= $item ?></li>     ? }     </ul> EXPORTABLE FUNCTIONS build_mt($template) Returns a subref that renders given template. Parameters are equivalent to Text::MicroTemplate->new.     # build template renderer at startup time and use it multiple times     my $renderer = build_mt('hello, <?= $_[0] ?>!');      sub run {         ...         my $hello = $renderer->($query->param('user'));         ...     } render_mt($template, @args) Utility function that combines build_mt and call to the generated template builder.     # render     $hello = render_mt('hello, <?= $_[0] ?>!', 'John');      # print as HTML     print $hello->as_string;      # use the result in another template (no double-escapes)     $enc = render_mt('<h1><?= $_[0] ?></h1>', $hello); Internally, the function is equivalent to:     build_mt($template)->(@_); encoded_string($str) wraps given string to an object that will not be escaped by the template engine OO-STYLE INTERFACE Text::MicroTemplate provides OO-style interface to handle more complex cases. new($template) new(%args) new(\%args) Constructs template renderer. In the second or third form, parameters below are recognized. template template string (mandatory) escape_func escape function (defaults to Text::MicroTemplate::escape_html), no escape when set to undef package_name package under where the renderer is compiled (defaults to caller package) prepend Prepends Perl code to the template. code() returns perl code that renders the template when evaluated filter(sub filter_func { ... })->(sub { template lines }) filters given template lines     ? $_mt->filter(sub { s/Hello/Good bye/g })->(sub {     Hello, John!     ? }) DEBUG The MICRO_TEMPLATE_DEBUG environment variable helps debugging. The value 1 extends debugging messages, 2 reports compiled Perl code with warn(), 3 is like 2 but uses die(). SEE ALSO Text::MicroTemplate::File Text::MicroTemplate::Extended AUTHOR Kazuho Oku <kazuhooku gmail.com> Tokuhiro Matsuno <tokuhirom AAJKLFJEF GMAIL COM> The module is based on Mojo::Template by Sebastian Riedel. LICENSE This program is free software, you can redistribute it and/or modify it under the same terms as Perl itself. × Module Install Instructions To install Text::MicroTemplate, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Text::MicroTemplate CPAN shell                      perl -MCPAN -e shell                     install Text::MicroTemplate For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Fast, simple and safe template engine written in pure-Perl and core modules."	"true"
"Template Engines"	"Text::MicroTemplate::Extended"	"https://metacpan.org/pod/Text::MicroTemplate::Extended"	"Extended Text::MicroTemplate."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Text::MicroTemplate::Extended - Extended MicroTemplate - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Daisuke Murase  /  0.17 (TYPESTER on 2012-08-16) 0.16 (TYPESTER on 2012-06-30) 0.15 (TYPESTER on 2012-06-29) 0.14 (TYPESTER on 2012-06-28) 0.13 (TYPESTER on 2012-06-27) 0.12 (TYPESTER on 2010-09-27) 0.11 (TYPESTER on 2010-07-01) 0.10 (TYPESTER on 2010-06-02) 0.09 (TYPESTER on 2009-12-08) 0.08 (TYPESTER on 2009-12-06) 0.07 (TYPESTER on 2009-12-03) 0.06 (TYPESTER on 2009-11-06) 0.05 (TYPESTER on 2009-08-12) 0.04 (TYPESTER on 2009-08-03) 0.03002 (TYPESTER on 2009-07-25) 0.03001 (TYPESTER on 2009-07-24) 0.03 (TYPESTER on 2009-07-24) 0.02002 (TYPESTER on 2009-07-18) 0.02001 (TYPESTER on 2009-07-16) 0.02 (TYPESTER on 2009-07-13) 0.01003 (TYPESTER on 2009-07-10) 0.01002 (TYPESTER on 2009-07-09) 0.01001 (TYPESTER on 2009-06-29) 0.01 (TYPESTER on 2009-06-29) Text-MicroTemplate-Extended-0.17 4 ++ 4 ++  / Text::MicroTemplate::Extended 16 Aug 2012 09:33:31 GMT Module version: 0.17 Source (raw) Browse (raw) Changes Clone repository Issues (1) Testers (1725 / 2 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (63.33Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.16 (TYPESTER on 2012-06-30) 0.15 (TYPESTER on 2012-06-29) 0.14 (TYPESTER on 2012-06-28) 0.13 (TYPESTER on 2012-06-27) 0.12 (TYPESTER on 2010-09-27) 0.11 (TYPESTER on 2010-07-01) 0.10 (TYPESTER on 2010-06-02) 0.09 (TYPESTER on 2009-12-08) 0.08 (TYPESTER on 2009-12-06) 0.07 (TYPESTER on 2009-12-03) 0.06 (TYPESTER on 2009-11-06) 0.05 (TYPESTER on 2009-08-12) 0.04 (TYPESTER on 2009-08-03) 0.03002 (TYPESTER on 2009-07-25) 0.03001 (TYPESTER on 2009-07-24) 0.03 (TYPESTER on 2009-07-24) 0.02002 (TYPESTER on 2009-07-18) 0.02001 (TYPESTER on 2009-07-16) 0.02 (TYPESTER on 2009-07-13) 0.01003 (TYPESTER on 2009-07-10) 0.01002 (TYPESTER on 2009-07-09) 0.01001 (TYPESTER on 2009-06-29) 0.01 (TYPESTER on 2009-06-29) Diff with version 0.16 (TYPESTER on 2012-06-30) 0.15 (TYPESTER on 2012-06-29) 0.14 (TYPESTER on 2012-06-28) 0.13 (TYPESTER on 2012-06-27) 0.12 (TYPESTER on 2010-09-27) 0.11 (TYPESTER on 2010-07-01) 0.10 (TYPESTER on 2010-06-02) 0.09 (TYPESTER on 2009-12-08) 0.08 (TYPESTER on 2009-12-06) 0.07 (TYPESTER on 2009-12-03) 0.06 (TYPESTER on 2009-11-06) 0.05 (TYPESTER on 2009-08-12) 0.04 (TYPESTER on 2009-08-03) 0.03002 (TYPESTER on 2009-07-25) 0.03001 (TYPESTER on 2009-07-24) 0.03 (TYPESTER on 2009-07-24) 0.02002 (TYPESTER on 2009-07-18) 0.02001 (TYPESTER on 2009-07-16) 0.02 (TYPESTER on 2009-07-13) 0.01003 (TYPESTER on 2009-07-10) 0.01002 (TYPESTER on 2009-07-09) 0.01001 (TYPESTER on 2009-06-29) 0.01 (TYPESTER on 2009-06-29) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 1 PAUSE user 3 non-PAUSE users. TYPESTER Daisuke Murase Dependencies Filter::Util::Call Text::MicroTemplate and possibly others CPAN Testers List Reverse dependencies Dependency graph × Text-MicroTemplate-Extended-0.17 NAME SYNOPSIS DESCRIPTION EXTENDED FEATURES Template inheritance Named template arguments Macro extension option replace render method METHODS new (%options) render ($template_name, @args) render_file ($template_name, @args) include ($template_name, @args) include_file ($template_name, @args) INTERNAL METHODS build eval_builder template_args extension render_context AUTHOR COPYRIGHT AND LICENSE NAME Text::MicroTemplate::Extended - Extended MicroTemplate SYNOPSIS     use Text::MicroTemplate::Extended;          my $mt = Text::MicroTemplate::Extended->new(         include_path  => ['/path/to/document_root'],         template_args => { c => $c, stash => $c->stash, },     );          $mt->render('content'); # render file: /path/to/document_root/content.mt DESCRIPTION Text::MicroTemplate::Extended is an extended template engine based on Text::MicroTemplate::File. EXTENDED FEATURES Template inheritance Most notable point of this extended module is Template inheritance. This concept is used in Python's Django framework. Template inheritance allows you to build a base ""skeleton"" template that contains all the common elements of your site and defines blocks that child templates can override. It's easiest to understand template inheritance by starting with an example:     <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN""         ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">     <html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""en"" lang=""en"">     <head>         <link rel=""stylesheet"" href=""style.css"" />         <title><? block title => sub { ?>My amazing site<? } ?></title>     </head>          <body>         <div id=""sidebar"">             <? block sidebar => sub { ?>             <ul>                 <li><a href=""/"">Home</a></li>                 <li><a href=""/blog/"">Blog</a></li>             </ul>             <? } ?>         </div>              <div id=""content"">             <? block content => sub {} ?>         </div>     </body>     </html> This template, which we'll call base.mt, defines a simple HTML skeleton document that you might use for a simple two-column page. It's the job of ""child"" templates to fill the empty blocks with content. In this example, the <? block ?> tag defines three blocks that child templates can fill in. All the block tag does is to tell the template engine that a child template may override those portions of the template. A child template might look like this:     ? extends 'base'          <? block title => sub { ?>My amazing blog<? } ?>          ? block content => sub {     ? for my $entry (@$blog_entries) {         <h2><?= $entry->title ?></h2>         <p><?= $entry->body ?></p>     ? } # endfor     ? } # endblock The <? extends ?> tag is the key here. It tells the template engine that this template ""extends"" another template. When the template system evaluates this template, first it locates the parent -- in this case, ""base.mt"". At that point, the template engine will notice the three <? block ?> tags in base.mt and replace those blocks with the contents of the child template. Depending on the value of blog_entries, the output might look like:     <!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN""         ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"">     <html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""en"" lang=""en"">     <head>         <link rel=""stylesheet"" href=""style.css"" />         <title>My amazing blog</title>     </head>          <body>         <div id=""sidebar"">             <ul>                 <li><a href=""/"">Home</a></li>                 <li><a href=""/blog/"">Blog</a></li>             </ul>         </div>              <div id=""content"">             <h2>Entry one</h2>             <p>This is my first entry.</p>                  <h2>Entry two</h2>             <p>This is my second entry.</p>         </div>     </body>     </html> Note that since the child template didn't define the sidebar block, the value from the parent template is used instead. Content within a <? block ?> tag in a parent template is always used as a fallback. You can use as many levels of inheritance as needed. One common way of using inheritance is the following three-level approach: Create a base.mt template that holds the main look-and-feel of your site. Create a base_SECTIONNAME.mt template for each ""section"" of your site. For example, base_news.mt, base_sports.mt. These templates all extend base.mt and include section-specific styles/design. Create individual templates for each type of page, such as a news article or blog entry. These templates extend the appropriate section template. This approach maximizes code reuse and makes it easy to add items to shared content areas, such as section-wide navigation. Here are some tips for working with inheritance: If you use <? extends ?> in a template, it must be the first template tag in that template. Template inheritance won't work, otherwise. More <? block ?> tags in your base templates are better. Remember, child templates don't have to define all parent blocks, so you can fill in reasonable defaults in a number of blocks, then only define the ones you need later. It's better to have more hooks than fewer hooks. If you find yourself duplicating content in a number of templates, it probably means you should move that content to a <? block ?> in a parent template. If you need to get the content of the block from the parent template, the <?= super() ?> variable will do the trick. This is useful if you want to add to the contents of a parent block instead of completely overriding it. Data inserted using <?= super() ?> will not be automatically escaped, since it was already escaped, if necessary, in the parent template. For extra readability, you can optionally give a name to your <? } # endblock ?> tag. For example:     <? block content => sub { ?>     ...     <? } # endblock content ?> In larger templates, this technique helps you see which <? block ?> tags are being closed. Finally, note that you can't define multiple <? block ?> tags with the same name in the same template. This limitation exists because a block tag works in ""both"" directions. That is, a block tag doesn't just provide a hole to fill -- it also defines the content that fills the hole in the parent. If there were two similarly-named <? block ?> tags in a template, that template's parent wouldn't know which one of the blocks' content to use. Named template arguments Text::MicroTemplate::Extended has new template_args option. Using this option, You can pass named template arguments to your tamplate like:     my $mf = Text::MicroTemplate::Extended->new(         template_args => { foo => 'bar', },         ...     ); Then in template:     <?= $foo ?> This template display 'bar'. template_args also supports CodeRef as its value life below:     my $mf = Text::MicroTemplate::Extended->new(         template_args => { foo => sub { $self->get_foo() } },         ...     ); In template, you can <?= $foo ?> to show $foo value. this value is set by calling $self->get_foo in template process time. This feature is useful to set variable does not exists when template object is created. Macro Similar to named arguments, but this feature install your subroutine to template instead of variables.     my $mh = Text::MicroTemplate::Extended->new(         macro => {             hello => sub { return 'Hello World!' },         },         ...     ); And in template:     <?= hello() ?> # => 'Hello World' extension option There is another new option 'extension'. You can specify template file extension. If this option is set, you don't have to set extension with render method:     $mf->render_file('template'); # render template.mt Default value is '.mt'. replace render method For supporting template inheritance, it is no longer possible to implement original render method. Because extends function requires filename. So in this module, render method acts same as render_file.     $mf->render('template');     $mf->render_file('template'); METHODS new (%options)     my $mf = Text::MicroTemplate::Extended->new(         extension     => '.mt',         template_args => { c => $c, stash => $c->stash },     ); Create new Text::MicroTemplate::Extended object. Available options are: extension Template file extension. (Default: '.mt') template_args Hash Reference of template args. macro Hash Reference of macros See Text::MicroTemplate::File for more options. render ($template_name, @args) render_file ($template_name, @args) Render $template_name and return result. include ($template_name, @args) include_file ($template_name, @args) Render $template_name and return result. Difference between include and render is that render treats extends and block macros and supports template inheritance but include not. But render method does not work in template.     <?= $self->render('template') ?> # does not work! Instead of above, use:     <?= $self->include('template') ?>          # or just          <?= include('template') ?> INTERNAL METHODS build eval_builder template_args extension render_context AUTHOR Daisuke Murase <typester@cpan.org> COPYRIGHT AND LICENSE Copyright (c) 2009 by KAYAC Inc. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself. The full text of the license can be found in the LICENSE file included with this module. × Module Install Instructions To install Text::MicroTemplate::Extended, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Text::MicroTemplate::Extended CPAN shell                      perl -MCPAN -e shell                     install Text::MicroTemplate::Extended For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Extended Text::MicroTemplate."	"true"
"Template Engines"	"Text::Template"	"https://metacpan.org/pod/Text::Template"	"Templates with embedded perl"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Text::Template - Expand template text with embedded Perl - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Mark Jason Dominus (陶敏修)  /  1.46 (MJD on 2013-02-11) 1.45 (MJD on 2008-04-16) 1.44 (MJD on 2003-04-29) 0.1 (MJD on 1996-01-25) 0.1 (MJD on 1995-12-27) 1.43 (MJD on 2002-03-25) 1.42 (MJD on 2001-11-05) 1.41 (MJD on 2001-09-04) 1.40 (MJD on 2001-08-30) 1.31 (MJD on 2001-02-05) 1.23 (MJD on 1999-12-21) 1.20 (MJD on 1999-03-08) 1.12 (MJD on 1999-02-28) 1.11 (MJD on 1999-02-25) 1.10 (MJD on 1999-02-13) 1.03 (MJD on 1999-02-06) 1.0 (MJD on 1999-02-05) Text-Template-1.46 13 ++ 13 ++  / Text::Template 11 Feb 2013 02:54:38 GMT Module version: 1.46 Source (raw) Browse (raw) Changes Issues (14) 5 (3 reviews) Testers (7225 / 5 / 0) Kwalitee License: unknown Activity 24 month Tools MOBI | EPUB Download (42.92Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.45 (MJD on 2008-04-16) 1.44 (MJD on 2003-04-29) 0.1 (MJD on 1996-01-25) 0.1 (MJD on 1995-12-27) 1.43 (MJD on 2002-03-25) 1.42 (MJD on 2001-11-05) 1.41 (MJD on 2001-09-04) 1.40 (MJD on 2001-08-30) 1.31 (MJD on 2001-02-05) 1.23 (MJD on 1999-12-21) 1.20 (MJD on 1999-03-08) 1.12 (MJD on 1999-02-28) 1.11 (MJD on 1999-02-25) 1.10 (MJD on 1999-02-13) 1.03 (MJD on 1999-02-06) 1.0 (MJD on 1999-02-05) Diff with version 1.45 (MJD on 2008-04-16) 1.44 (MJD on 2003-04-29) 0.1 (MJD on 1996-01-25) 0.1 (MJD on 1995-12-27) 1.43 (MJD on 2002-03-25) 1.42 (MJD on 2001-11-05) 1.41 (MJD on 2001-09-04) 1.40 (MJD on 2001-08-30) 1.31 (MJD on 2001-02-05) 1.23 (MJD on 1999-12-21) 1.20 (MJD on 1999-03-08) 1.12 (MJD on 1999-02-28) 1.11 (MJD on 1999-02-25) 1.10 (MJD on 1999-02-13) 1.03 (MJD on 1999-02-06) 1.0 (MJD on 1999-02-05) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 8 PAUSE users 5 non-PAUSE users. MJD Mark Jason Dominus (陶敏修) Dependencies unknown CPAN Testers List Reverse dependencies NAME VERSION SYNOPSIS DESCRIPTION Example Philosophy Details Template Parsing The $OUT variable General Remarks new compile fill_in Convenience Functions fill_this_in fill_in_string fill_in_file Including files into templates Miscellaneous my variables Security Matters Alternative Delimiters PREPEND feature and using strict in templates Prepending in Derived Classes JavaScript Shut Up! Compatibility Backslash Processing A short note about $Text::Template::ERROR Sticky Widgets in Template Files Automatic preprocessing of program fragments Automatic postprocessing of template hunks Author Support? LICENSE THANKS Bugs and Caveats NAME Text::Template - Expand template text with embedded Perl VERSION This file documents Text::Template version 1.46 SYNOPSIS  use Text::Template;    $template = Text::Template->new(TYPE => 'FILE',  SOURCE => 'filename.tmpl');  $template = Text::Template->new(TYPE => 'ARRAY', SOURCE => [ ... ] );  $template = Text::Template->new(TYPE => 'FILEHANDLE', SOURCE => $fh );  $template = Text::Template->new(TYPE => 'STRING', SOURCE => '...' );  $template = Text::Template->new(PREPEND => q{use strict;}, ...);   # Use a different template file syntax:  $template = Text::Template->new(DELIMITERS => [$open, $close], ...);   $recipient = 'King';  $text = $template->fill_in();  # Replaces `{$recipient}' with `King'  print $text;   $T::recipient = 'Josh';  $text = $template->fill_in(PACKAGE => T);   # Pass many variables explicitly  $hash = { recipient => 'Abed-Nego',            friends => [ 'me', 'you' ],            enemies => { loathsome => 'Bill Gates',                         fearsome => 'Larry Ellison' },          };  $text = $template->fill_in(HASH => $hash, ...);  # $recipient is Abed-Nego,  # @friends is ( 'me', 'you' ),  # %enemies is ( loathsome => ..., fearsome => ... )    # Call &callback in case of programming errors in template  $text = $template->fill_in(BROKEN => \&callback, BROKEN_ARG => $ref, ...);   # Evaluate program fragments in Safe compartment with restricted permissions  $text = $template->fill_in(SAFE => $compartment, ...);   # Print result text instead of returning it  $success = $template->fill_in(OUTPUT => \*FILEHANDLE, ...);   # Parse template with different template file syntax:  $text = $template->fill_in(DELIMITERS => [$open, $close], ...);  # Note that this is *faster* than using the default delimiters   # Prepend specified perl code to each fragment before evaluating:  $text = $template->fill_in(PREPEND => q{use strict 'vars';}, ...);   use Text::Template 'fill_in_string';  $text = fill_in_string( <<EOM, PACKAGE => 'T', ...);  Dear {$recipient},  Pay me at once.         Love,           G.V.  EOM   use Text::Template 'fill_in_file';  $text = fill_in_file($filename, ...);   # All templates will always have `use strict vars' attached to all fragments  Text::Template->always_prepend(q{use strict 'vars';}); DESCRIPTION This is a library for generating form letters, building HTML pages, or filling in templates generally. A `template' is a piece of text that has little Perl programs embedded in it here and there. When you `fill in' a template, you evaluate the little programs and replace them with their values. You can store a template in a file outside your program. People can modify the template without modifying the program. You can separate the formatting details from the main code, and put the formatting parts of the program into the template. That prevents code bloat and encourages functional separation. Example Here's an example of a template, which we'll suppose is stored in the file formletter.tmpl:         Dear {$title} {$lastname},          It has come to our attention that you are delinquent in your         {$monthname[$last_paid_month]} payment.  Please remit         ${sprintf(""%.2f"", $amount)} immediately, or your patellae may         be needlessly endangered.                          Love,                          Mark ""Vizopteryx"" Dominus The result of filling in this template is a string, which might look something like this:         Dear Mr. Gates,          It has come to our attention that you are delinquent in your         February payment.  Please remit         $392.12 immediately, or your patellae may         be needlessly endangered.                           Love,                          Mark ""Vizopteryx"" Dominus Here is a complete program that transforms the example template into the example result, and prints it out:         use Text::Template;          my $template = Text::Template->new(SOURCE => 'formletter.tmpl')           or die ""Couldn't construct template: $Text::Template::ERROR"";          my @monthname = qw(January February March April May June                            July August September October November December);         my %vars = (title => 'Mr.',                     firstname => 'Bill',                     lastname => 'Gates',                     last_paid_month => 1,   # February                     amount => 392.12,                     monthname => \@monthname,                    );          my $result = $template->fill_in(HASH => \%vars);          if (defined $result) { print $result }         else { die ""Couldn't fill in template: $Text::Template::ERROR"" } Philosophy When people make a template module like this one, they almost always start by inventing a special syntax for substitutions. For example, they build it so that a string like %%VAR%% is replaced with the value of $VAR. Then they realize the need extra formatting, so they put in some special syntax for formatting. Then they need a loop, so they invent a loop syntax. Pretty soon they have a new little template language. This approach has two problems: First, their little language is crippled. If you need to do something the author hasn't thought of, you lose. Second: Who wants to learn another language? You already know Perl, so why not use it? Text::Template templates are programmed in Perl. You embed Perl code in your template, with { at the beginning and } at the end. If you want a variable interpolated, you write it the way you would in Perl. If you need to make a loop, you can use any of the Perl loop constructions. All the Perl built-in functions are available. Details Template Parsing The Text::Template module scans the template source. An open brace { begins a program fragment, which continues until the matching close brace }. When the template is filled in, the program fragments are evaluated, and each one is replaced with the resulting value to yield the text that is returned. A backslash \ in front of a brace (or another backslash that is in front of a brace) escapes its special meaning. The result of filling out this template:         \{ The sum of 1 and 2 is {1+2}  \} is         { The sum of 1 and 2 is 3  } If you have an unmatched brace, Text::Template will return a failure code and a warning about where the problem is. Backslashes that do not precede a brace are passed through unchanged. If you have a template like this:         { ""String that ends in a newline.\n"" } The backslash inside the string is passed through to Perl unchanged, so the \n really does turn into a newline. See the note at the end for details about the way backslashes work. Backslash processing is not done when you specify alternative delimiters with the DELIMITERS option. (See ""Alternative Delimiters"", below.) Each program fragment should be a sequence of Perl statements, which are evaluated the usual way. The result of the last statement executed will be evaluted in scalar context; the result of this statement is a string, which is interpolated into the template in place of the program fragment itself. The fragments are evaluated in order, and side effects from earlier fragments will persist into later fragments:         {$x = @things; ''}The Lord High Chamberlain has gotten {$x}         things for me this year.           { $diff = $x - 17;            $more = 'more'           if ($diff == 0) {             $diff = 'no';           } elsif ($diff < 0) {             $more = 'fewer';           }            '';         }          That is {$diff} {$more} than he gave me last year. The value of $x set in the first line will persist into the next fragment that begins on the third line, and the values of $diff and $more set in the second fragment will persist and be interpolated into the last line. The output will look something like this:         The Lord High Chamberlain has gotten 42         things for me this year.            That is 25 more than he gave me last year. That is all the syntax there is. The $OUT variable There is one special trick you can play in a template. Here is the motivation for it: Suppose you are going to pass an array, @items, into the template, and you want the template to generate a bulleted list with a header, like this:         Here is a list of the things I have got for you since 1907:           * Ivory           * Apes           * Peacocks           * ... One way to do it is with a template like this:         Here is a list of the things I have got for you since 1907:         { my $blist = '';           foreach $i (@items) {             $blist .= qq{  * $i\n};           }               $blist;         } Here we construct the list in a variable called $blist, which we return at the end. This is a little cumbersome. There is a shortcut. Inside of templates, there is a special variable called $OUT. Anything you append to this variable will appear in the output of the template. Also, if you use $OUT in a program fragment, the normal behavior, of replacing the fragment with its return value, is disabled; instead the fragment is replaced with the value of $OUT. This means that you can write the template above like this:         Here is a list of the things I have got for you since 1907:         { foreach $i (@items) {             $OUT .= ""  * $i\n"";           }             } $OUT is reinitialized to the empty string at the start of each program fragment. It is private to Text::Template, so you can't use a variable named $OUT in your template without invoking the special behavior. General Remarks All Text::Template functions return undef on failure, and set the variable $Text::Template::ERROR to contain an explanation of what went wrong. For example, if you try to create a template from a file that does not exist, $Text::Template::ERROR will contain something like:         Couldn't open file xyz.tmpl: No such file or directory new         $template = new Text::Template ( TYPE => ..., SOURCE => ... ); This creates and returns a new template object. new returns undef and sets $Text::Template::ERROR if it can't create the template object. SOURCE says where the template source code will come from. TYPE says what kind of object the source is. The most common type of source is a file:         new Text::Template ( TYPE => 'FILE', SOURCE => $filename ); This reads the template from the specified file. The filename is opened with the Perl open command, so it can be a pipe or anything else that makes sense with open. The TYPE can also be STRING, in which case the SOURCE should be a string:         new Text::Template ( TYPE => 'STRING',                               SOURCE => ""This is the actual template!"" ); The TYPE can be ARRAY, in which case the source should be a reference to an array of strings. The concatenation of these strings is the template:         new Text::Template ( TYPE => 'ARRAY',                               SOURCE => [ ""This is "", ""the actual"",                                           "" template!"",                                        ]                            ); The TYPE can be FILEHANDLE, in which case the source should be an open filehandle (such as you got from the FileHandle or IO::* packages, or a glob, or a reference to a glob). In this case Text::Template will read the text from the filehandle up to end-of-file, and that text is the template:         # Read template source code from STDIN:         new Text::Template ( TYPE => 'FILEHANDLE',                               SOURCE => \*STDIN  ); If you omit the TYPE attribute, it's taken to be FILE. SOURCE is required. If you omit it, the program will abort. The words TYPE and SOURCE can be spelled any of the following ways:         TYPE    SOURCE         Type    Source         type    source         -TYPE   -SOURCE         -Type   -Source         -type   -source Pick a style you like and stick with it. DELIMITERS You may also add a DELIMITERS option. If this option is present, its value should be a reference to an array of two strings. The first string is the string that signals the beginning of each program fragment, and the second string is the string that signals the end of each program fragment. See ""Alternative Delimiters"", below. UNTAINT If your program is running in taint mode, you may have problems if your templates are stored in files. Data read from files is considered 'untrustworthy', and taint mode will not allow you to evaluate the Perl code in the file. (It is afraid that a malicious person might have tampered with the file.) In some environments, however, local files are trustworthy. You can tell Text::Template that a certain file is trustworthy by supplying UNTAINT => 1 in the call to new. This will tell Text::Template to disable taint checks on template code that has come from a file, as long as the filename itself is considered trustworthy. It will also disable taint checks on template code that comes from a filehandle. When used with TYPE => 'string' or TYPE => 'array', it has no effect. See perlsec for more complete information about tainting. Thanks to Steve Palincsar, Gerard Vreeswijk, and Dr. Christoph Baehr for help with this feature. PREPEND This option is passed along to the fill_in call unless it is overridden in the arguments to fill_in. See ""PREPEND feature and using strict in templates"" below. BROKEN This option is passed along to the fill_in call unless it is overridden in the arguments to fill_in. See BROKEN below. compile         $template->compile() Loads all the template text from the template's source, parses and compiles it. If successful, returns true; otherwise returns false and sets $Text::Template::ERROR. If the template is already compiled, it returns true and does nothing. You don't usually need to invoke this function, because fill_in (see below) compiles the template if it isn't compiled already. If there is an argument to this function, it must be a reference to an array containing alternative delimiter strings. See ""Alternative Delimiters"", below. fill_in         $template->fill_in(OPTIONS); Fills in a template. Returns the resulting text if successful. Otherwise, returns undef and sets $Text::Template::ERROR. The OPTIONS are a hash, or a list of key-value pairs. You can write the key names in any of the six usual styles as above; this means that where this manual says PACKAGE (for example) you can actually use any of         PACKAGE Package package -PACKAGE -Package -package Pick a style you like and stick with it. The all-lowercase versions may yield spurious warnings about         Ambiguous use of package => resolved to ""package"" so you might like to avoid them and use the capitalized versions. At present, there are eight legal options: PACKAGE, BROKEN, BROKEN_ARG, SAFE, HASH, OUTPUT, and DELIMITERS. PACKAGE PACKAGE specifies the name of a package in which the program fragments should be evaluated. The default is to use the package from which fill_in was called. For example, consider this template:         The value of the variable x is {$x}. If you use $template->fill_in(PACKAGE => 'R') , then the $x in the template is actually replaced with the value of $R::x. If you omit the PACKAGE option, $x will be replaced with the value of the $x variable in the package that actually called fill_in. You should almost always use PACKAGE. If you don't, and your template makes changes to variables, those changes will be propagated back into the main program. Evaluating the template in a private package helps prevent this. The template can still modify variables in your program if it wants to, but it will have to do so explicitly. See the section at the end on `Security'. Here's an example of using PACKAGE:         Your Royal Highness,          Enclosed please find a list of things I have gotten         for you since 1907:          { foreach $item (@items) {             $item_no++;             $OUT .= "" $item_no. \u$item\n"";           }         }          Signed,         Lord High Chamberlain We want to pass in an array which will be assigned to the array @items. Here's how to do that:         @items = ('ivory', 'apes', 'peacocks', );         $template->fill_in(); This is not very safe. The reason this isn't as safe is that if you had a variable named $item_no in scope in your program at the point you called fill_in, its value would be clobbered by the act of filling out the template. The problem is the same as if you had written a subroutine that used those variables in the same way that the template does. ($OUT is special in templates and is always safe.) One solution to this is to make the $item_no variable private to the template by declaring it with my. If the template does this, you are safe. But if you use the PACKAGE option, you will probably be safe even if the template does not declare its variables with my:         @Q::items = ('ivory', 'apes', 'peacocks', );         $template->fill_in(PACKAGE => 'Q'); In this case the template will clobber the variable $Q::item_no, which is not related to the one your program was using. Templates cannot affect variables in the main program that are declared with my, unless you give the template references to those variables. HASH You may not want to put the template variables into a package. Packages can be hard to manage: You can't copy them, for example. HASH provides an alternative. The value for HASH should be a reference to a hash that maps variable names to values. For example,         $template->fill_in(HASH => { recipient => ""The King"",                                      items => ['gold', 'frankincense', 'myrrh'],                                      object => \$self,                                    }); will fill out the template and use ""The King"" as the value of $recipient and the list of items as the value of @items. Note that we pass an array reference, but inside the template it appears as an array. In general, anything other than a simple string or number should be passed by reference. We also want to pass an object, which is in $self; note that we pass a reference to the object, \$self instead. Since we've passed a reference to a scalar, inside the template the object appears as $object. The full details of how it works are a little involved, so you might want to skip to the next section. Suppose the key in the hash is key and the value is value. If the value is undef, then any variables named $key, @key, %key, etc., are undefined. If the value is a string or a number, then $key is set to that value in the template. For anything else, you must pass a reference. If the value is a reference to an array, then @key is set to that array. If the value is a reference to a hash, then %key is set to that hash. Similarly if value is any other kind of reference. This means that         var => ""foo"" and         var => \""foo"" have almost exactly the same effect. (The difference is that in the former case, the value is copied, and in the latter case it is aliased.) In particular, if you want the template to get an object or any kind, you must pass a reference to it:         $template->fill_in(HASH => { database_handle => \$dbh, ... }); If you do this, the template will have a variable $database_handle which is the database handle object. If you leave out the \, the template will have a hash %database_handle, which exposes the internal structure of the database handle object; you don't want that. Normally, the way this works is by allocating a private package, loading all the variables into the package, and then filling out the template as if you had specified that package. A new package is allocated each time. However, if you also use the PACKAGE option, Text::Template loads the variables into the package you specified, and they stay there after the call returns. Subsequent calls to fill_in that use the same package will pick up the values you loaded in. If the argument of HASH is a reference to an array instead of a reference to a hash, then the array should contain a list of hashes whose contents are loaded into the template package one after the other. You can use this feature if you want to combine several sets of variables. For example, one set of variables might be the defaults for a fill-in form, and the second set might be the user inputs, which override the defaults when they are present:         $template->fill_in(HASH => [\%defaults, \%user_input]); You can also use this to set two variables with the same name:         $template->fill_in(HASH => [{ v => ""The King"" },                                     { v => [1,2,3] },                                    ]                           ); This sets $v to ""The King"" and @v to (1,2,3). BROKEN If any of the program fragments fails to compile or aborts for any reason, and you have set the BROKEN option to a function reference, Text::Template will invoke the function. This function is called the BROKEN function. The BROKEN function will tell Text::Template what to do next. If the BROKEN function returns undef, Text::Template will immediately abort processing the template and return the text that it has accumulated so far. If your function does this, it should set a flag that you can examine after fill_in returns so that you can tell whether there was a premature return or not. If the BROKEN function returns any other value, that value will be interpolated into the template as if that value had been the return value of the program fragment to begin with. For example, if the BROKEN function returns an error string, the error string will be interpolated into the output of the template in place of the program fragment that cased the error. If you don't specify a BROKEN function, Text::Template supplies a default one that returns something like         Program fragment delivered error ``Illegal division by 0 at         template line 37'' (Note that the format of this message has changed slightly since version 1.31.) The return value of the BROKEN function is interpolated into the template at the place the error occurred, so that this template:         (3+4)*5 = { 3+4)*5 } yields this result:         (3+4)*5 = Program fragment delivered error ``syntax error at template line 1'' If you specify a value for the BROKEN attribute, it should be a reference to a function that fill_in can call instead of the default function. fill_in will pass a hash to the broken function. The hash will have at least these three members: text The source code of the program fragment that failed error The text of the error message ($@) generated by eval. The text has been modified to omit the trailing newline and to include the name of the template file (if there was one). The line number counts from the beginning of the template, not from the beginning of the failed program fragment. lineno The line number of the template at which the program fragment began. There may also be an arg member. See BROKEN_ARG, below BROKEN_ARG If you supply the BROKEN_ARG option to fill_in, the value of the option is passed to the BROKEN function whenever it is called. The default BROKEN function ignores the BROKEN_ARG, but you can write a custom BROKEN function that uses the BROKEN_ARG to get more information about what went wrong. The BROKEN function could also use the BROKEN_ARG as a reference to store an error message or some other information that it wants to communicate back to the caller. For example:         $error = '';          sub my_broken {             my %args = @_;            my $err_ref = $args{arg};            ...            $$err_ref = ""Some error message"";            return undef;         }          $template->fill_in(BROKEN => \&my_broken,                            BROKEN_ARG => \$error,                           );          if ($error) {           die ""It didn't work: $error"";         } If one of the program fragments in the template fails, it will call the BROKEN function, my_broken, and pass it the BROKEN_ARG, which is a reference to $error. my_broken can store an error message into $error this way. Then the function that called fill_in can see if my_broken has left an error message for it to find, and proceed accordingly. SAFE If you give fill_in a SAFE option, its value should be a safe compartment object from the Safe package. All evaluation of program fragments will be performed in this compartment. See Safe for full details about such compartments and how to restrict the operations that can be performed in them. If you use the PACKAGE option with SAFE, the package you specify will be placed into the safe compartment and evaluation will take place in that package as usual. If not, SAFE operation is a little different from the default. Usually, if you don't specify a package, evaluation of program fragments occurs in the package from which the template was invoked. But in SAFE mode the evaluation occurs inside the safe compartment and cannot affect the calling package. Normally, if you use HASH without PACKAGE, the hash variables are imported into a private, one-use-only package. But if you use HASH and SAFE together without PACKAGE, the hash variables will just be loaded into the root namespace of the Safe compartment. OUTPUT If your template is going to generate a lot of text that you are just going to print out again anyway, you can save memory by having Text::Template print out the text as it is generated instead of making it into a big string and returning the string. If you supply the OUTPUT option to fill_in, the value should be a filehandle. The generated text will be printed to this filehandle as it is constructed. For example:         $template->fill_in(OUTPUT => \*STDOUT, ...); fills in the $template as usual, but the results are immediately printed to STDOUT. This may result in the output appearing more quickly than it would have otherwise. If you use OUTPUT, the return value from fill_in is still true on success and false on failure, but the complete text is not returned to the caller. PREPEND You can have some Perl code prepended automatically to the beginning of every program fragment. See ""PREPEND feature and using strict in templates"" below. DELIMITERS If this option is present, its value should be a reference to a list of two strings. The first string is the string that signals the beginning of each program fragment, and the second string is the string that signals the end of each program fragment. See ""Alternative Delimiters"", below. If you specify DELIMITERS in the call to fill_in, they override any delimiters you set when you created the template object with new. Convenience Functions fill_this_in The basic way to fill in a template is to create a template object and then call fill_in on it. This is useful if you want to fill in the same template more than once. In some programs, this can be cumbersome. fill_this_in accepts a string, which contains the template, and a list of options, which are passed to fill_in as above. It constructs the template object for you, fills it in as specified, and returns the results. It returns undef and sets $Text::Template::ERROR if it couldn't generate any results. An example:         $Q::name = 'Donald';         $Q::amount = 141.61;         $Q::part = 'hyoid bone';          $text = Text::Template->fill_this_in( <<'EOM', PACKAGE => Q);         Dear {$name},         You owe me \\${sprintf('%.2f', $amount)}.           Pay or I will break your {$part}.                 Love,                 Grand Vizopteryx of Irkutsk.         EOM Notice how we included the template in-line in the program by using a `here document' with the << notation. fill_this_in is a deprecated feature. It is only here for backwards compatibility, and may be removed in some far-future version in Text::Template. You should use fill_in_string instead. It is described in the next section. fill_in_string It is stupid that fill_this_in is a class method. It should have been just an imported function, so that you could omit the Text::Template-> in the example above. But I made the mistake four years ago and it is too late to change it. fill_in_string is exactly like fill_this_in except that it is not a method and you can omit the Text::Template-> and just say         print fill_in_string(<<'EOM', ...);         Dear {$name},           ...         EOM To use fill_in_string, you need to say         use Text::Template 'fill_in_string'; at the top of your program. You should probably use fill_in_string instead of fill_this_in. fill_in_file If you import fill_in_file, you can say         $text = fill_in_file(filename, ...); The ... are passed to fill_in as above. The filename is the name of the file that contains the template you want to fill in. It returns the result text. or undef, as usual. If you are going to fill in the same file more than once in the same program you should use the longer new / fill_in sequence instead. It will be a lot faster because it only has to read and parse the file once. Including files into templates People always ask for this. ``Why don't you have an include function?'' they want to know. The short answer is this is Perl, and Perl already has an include function. If you want it, you can just put         {qx{cat filename}} into your template. Voilà. If you don't want to use cat, you can write a little four-line function that opens a file and dumps out its contents, and call it from the template. I wrote one for you. In the template, you can say         {Text::Template::_load_text(filename)} If that is too verbose, here is a trick. Suppose the template package that you are going to be mentioning in the fill_in call is package Q. Then in the main program, write         *Q::include = \&Text::Template::_load_text; This imports the _load_text function into package Q with the name include. From then on, any template that you fill in with package Q can say         {include(filename)} to insert the text from the named file at that point. If you are using the HASH option instead, just put include => \&Text::Template::_load_text into the hash instead of importing it explicitly. Suppose you don't want to insert a plain text file, but rather you want to include one template within another? Just use fill_in_file in the template itself:         {Text::Template::fill_in_file(filename)} You can do the same importing trick if this is too much to type. Miscellaneous my variables People are frequently surprised when this doesn't work:         my $recipient = 'The King';         my $text = fill_in_file('formletter.tmpl'); The text The King doesn't get into the form letter. Why not? Because $recipient is a my variable, and the whole point of my variables is that they're private and inaccessible except in the scope in which they're declared. The template is not part of that scope, so the template can't see $recipient. If that's not the behavior you want, don't use my. my means a private variable, and in this case you don't want the variable to be private. Put the variables into package variables in some other package, and use the PACKAGE option to fill_in:         $Q::recipient = $recipient;         my $text = fill_in_file('formletter.tmpl', PACKAGE => 'Q');         or pass the names and values in a hash with the HASH option:         my $text = fill_in_file('formletter.tmpl', HASH => { recipient => $recipient }); Security Matters All variables are evaluated in the package you specify with the PACKAGE option of fill_in. if you use this option, and if your templates don't do anything egregiously stupid, you won't have to worry that evaluation of the little programs will creep out into the rest of your program and wreck something. Nevertheless, there's really no way (except with Safe) to protect against a template that says         { $Important::Secret::Security::Enable = 0;            # Disable security checks in this program          } or         { $/ = ""ho ho ho"";   # Sabotage future uses of <FH>.           # $/ is always a global variable         } or even         { system(""rm -rf /"") } so don't go filling in templates unless you're sure you know what's in them. If you're worried, or you can't trust the person who wrote the template, use the SAFE option. A final warning: program fragments run a small risk of accidentally clobbering local variables in the fill_in function itself. These variables all have names that begin with $fi_, so if you stay away from those names you'll be safe. (Of course, if you're a real wizard you can tamper with them deliberately for exciting effects; this is actually how $OUT works.) I can fix this, but it will make the package slower to do it, so I would prefer not to. If you are worried about this, send me mail and I will show you what to do about it. Alternative Delimiters Lorenzo Valdettaro pointed out that if you are using Text::Template to generate TeX output, the choice of braces as the program fragment delimiters makes you suffer suffer suffer. Starting in version 1.20, you can change the choice of delimiters to something other than curly braces. In either the new() call or the fill_in() call, you can specify an alternative set of delimiters with the DELIMITERS option. For example, if you would like code fragments to be delimited by [@-- and --@] instead of { and }, use         ... DELIMITERS => [ '[@--', '--@]' ], ... Note that these delimiters are literal strings, not regexes. (I tried for regexes, but it complicates the lexical analysis too much.) Note also that DELIMITERS disables the special meaning of the backslash, so if you want to include the delimiters in the literal text of your template file, you are out of luck---it is up to you to choose delimiters that do not conflict with what you are doing. The delimiter strings may still appear inside of program fragments as long as they nest properly. This means that if for some reason you absolutely must have a program fragment that mentions one of the delimiters, like this:         [@--                 print ""Oh no, a delimiter: --@]\n""         --@] you may be able to make it work by doing this instead:         [@--                 # Fake matching delimiter in a comment: [@--                 print ""Oh no, a delimiter: --@]\n""         --@] It may be safer to choose delimiters that begin with a newline character. Because the parsing of templates is simplified by the absence of backslash escapes, using alternative DELIMITERS may speed up the parsing process by 20-25%. This shows that my original choice of { and } was very bad. PREPEND feature and using strict in templates Suppose you would like to use strict in your templates to detect undeclared variables and the like. But each code fragment is a separate lexical scope, so you have to turn on strict at the top of each and every code fragment:         { use strict;           use vars '$foo';           $foo = 14;           ...         }          ...          { # we forgot to put `use strict' here           my $result = $boo + 12;    # $boo is misspelled and should be $foo           # No error is raised on `$boo'         } Because we didn't put use strict at the top of the second fragment, it was only active in the first fragment, and we didn't get any strict checking in the second fragment. Then we mispelled $foo and the error wasn't caught. Text::Template version 1.22 and higher has a new feature to make this easier. You can specify that any text at all be automatically added to the beginning of each program fragment. When you make a call to fill_in, you can specify a         PREPEND => 'some perl statements here' option; the statements will be prepended to each program fragment for that one call only. Suppose that the fill_in call included a         PREPEND => 'use strict;' option, and that the template looked like this:         { use vars '$foo';           $foo = 14;           ...         }          ...          { my $result = $boo + 12;    # $boo is misspelled and should be $foo           ...         } The code in the second fragment would fail, because $boo has not been declared. use strict was implied, even though you did not write it explicitly, because the PREPEND option added it for you automatically. There are two other ways to do this. At the time you create the template object with new, you can also supply a PREPEND option, in which case the statements will be prepended each time you fill in that template. If the fill_in call has its own PREPEND option, this overrides the one specified at the time you created the template. Finally, you can make the class method call         Text::Template->always_prepend('perl statements'); If you do this, then call calls to fill_in for any template will attach the perl statements to the beginning of each program fragment, except where overridden by PREPEND options to new or fill_in. Prepending in Derived Classes This section is technical, and you should skip it on the first few readings. Normally there are three places that prepended text could come from. It could come from the PREPEND option in the fill_in call, from the PREPEND option in the new call that created the template object, or from the argument of the always_prepend call. Text::Template looks for these three things in order and takes the first one that it finds. In a subclass of Text::Template, this last possibility is ambiguous. Suppose S is a subclass of Text::Template. Should         Text::Template->always_prepend(...); affect objects in class Derived? The answer is that you can have it either way. The always_prepend value for Text::Template is normally stored in a hash variable named %GLOBAL_PREPEND under the key Text::Template. When Text::Template looks to see what text to prepend, it first looks in the template object itself, and if not, it looks in $GLOBAL_PREPEND{class} where class is the class to which the template object belongs. If it doesn't find any value, it looks in $GLOBAL_PREPEND{'Text::Template'}. This means that objects in class Derived will be affected by         Text::Template->always_prepend(...); unless there is also a call to         Derived->always_prepend(...); So when you're designing your derived class, you can arrange to have your objects ignore Text::Template::always_prepend calls by simply putting Derived->always_prepend('') at the top of your module. Of course, there is also a final escape hatch: Templates support a prepend_text that is used to look up the appropriate text to be prepended at fill_in time. Your derived class can override this method to get an arbitrary effect. JavaScript Jennifer D. St Clair asks:         > Most of my pages contain JavaScript and Stylesheets.         > How do I change the template identifier?  Jennifer is worried about the braces in the JavaScript being taken as the delimiters of the Perl program fragments. Of course, disaster will ensue when perl tries to evaluate these as if they were Perl programs. The best choice is to find some unambiguous delimiter strings that you can use in your template instead of curly braces, and then use the DELIMITERS option. However, if you can't do this for some reason, there are two easy workarounds: 1. You can put \ in front of {, }, or \ to remove its special meaning. So, for example, instead of             if (br== ""n3"") {                  // etc.             } you can put             if (br== ""n3"") \{                  // etc.             \} and it'll come out of the template engine the way you want. But here is another method that is probably better. To see how it works, first consider what happens if you put this into a template:             { 'foo' } Since it's in braces, it gets evaluated, and obviously, this is going to turn into             foo So now here's the trick: In Perl, q{...} is the same as '...'. So if we wrote             {q{foo}} it would turn into             foo So for your JavaScript, just write             {q{if (br== ""n3"") {                   // etc.                }}             } and it'll come out as               if (br== ""n3"") {                    // etc.               } which is what you want. Shut Up! People sometimes try to put an initialization section at the top of their templates, like this:         { ...           $var = 17;         } Then they complain because there is a 17 at the top of the output that they didn't want to have there. Remember that a program fragment is replaced with its own return value, and that in Perl the return value of a code block is the value of the last expression that was evaluated, which in this case is 17. If it didn't do that, you wouldn't be able to write {$recipient} and have the recipient filled in. To prevent the 17 from appearing in the output is very simple:         { ...           $var = 17;           '';         } Now the last expression evaluated yields the empty string, which is invisible. If you don't like the way this looks, use         { ...           $var = 17;           ($SILENTLY);         } instead. Presumably, $SILENTLY has no value, so nothing will be interpolated. This is what is known as a `trick'. Compatibility Every effort has been made to make this module compatible with older versions. The only known exceptions follow: The output format of the default BROKEN subroutine has changed twice, most recently between versions 1.31 and 1.40. Starting in version 1.10, the $OUT variable is arrogated for a special meaning. If you had templates before version 1.10 that happened to use a variable named $OUT, you will have to change them to use some other variable or all sorts of strangeness will result. Between versions 0.1b and 1.00 the behavior of the \ metacharacter changed. In 0.1b, \\ was special everywhere, and the template processor always replaced it with a single backslash before passing the code to Perl for evaluation. The rule now is more complicated but probably more convenient. See the section on backslash processing, below, for a full discussion. Backslash Processing In Text::Template beta versions, the backslash was special whenever it appeared before a brace or another backslash. That meant that while {""\n""} did indeed generate a newline, {""\\""} did not generate a backslash, because the code passed to Perl for evaluation was ""\"" which is a syntax error. If you wanted a backslash, you would have had to write {""\\\\""}. In Text::Template versions 1.00 through 1.10, there was a bug: Backslash was special everywhere. In these versions, {""\n""} generated the letter n. The bug has been corrected in version 1.11, but I did not go back to exactly the old rule, because I did not like the idea of having to write {""\\\\""} to get one backslash. The rule is now more complicated to remember, but probably easier to use. The rule is now: Backslashes are always passed to Perl unchanged unless they occur as part of a sequence like \\\\\\{ or \\\\\\}. In these contexts, they are special; \\ is replaced with \, and \{ and \} signal a literal brace. Examples:         \{ foo \} is not evaluated, because the \ before the braces signals that they should be taken literally. The result in the output looks like this:         { foo } This is a syntax error:         { ""foo}"" } because Text::Template thinks that the code ends at the first }, and then gets upset when it sees the second one. To make this work correctly, use         { ""foo\}"" } This passes ""foo}"" to Perl for evaluation. Note there's no \ in the evaluated code. If you really want a \ in the evaluated code, use         { ""foo\\\}"" } This passes ""foo\}"" to Perl for evaluation. Starting with Text::Template version 1.20, backslash processing is disabled if you use the DELIMITERS option to specify alternative delimiter strings. A short note about $Text::Template::ERROR In the past some people have fretted about `violating the package boundary' by examining a variable inside the Text::Template package. Don't feel this way. $Text::Template::ERROR is part of the published, official interface to this package. It is perfectly OK to inspect this variable. The interface is not going to change. If it really, really bothers you, you can import a function called TTerror that returns the current value of the $ERROR variable. So you can say:         use Text::Template 'TTerror';          my $template = new Text::Template (SOURCE => $filename);         unless ($template) {           my $err = TTerror;           die ""Couldn't make template: $err; aborting"";         } I don't see what benefit this has over just doing this:         use Text::Template;          my $template = new Text::Template (SOURCE => $filename)           or die ""Couldn't make template: $Text::Template::ERROR; aborting""; But if it makes you happy to do it that way, go ahead. Sticky Widgets in Template Files The CGI module provides functions for `sticky widgets', which are form input controls that retain their values from one page to the next. Sometimes people want to know how to include these widgets into their template output. It's totally straightforward. Just call the CGI functions from inside the template:         { $q->checkbox_group(NAME => 'toppings',                              LINEBREAK => true,                              COLUMNS => 3,                              VALUES => \@toppings,                             );         } Automatic preprocessing of program fragments It may be useful to preprocess the program fragments before they are evaluated. See Text::Template::Preprocess for more details. Automatic postprocessing of template hunks It may be useful to process hunks of output before they are appended to the result text. For this, subclass and replace the append_text_to_result method. It is passed a list of pairs with these entries:   handle - a filehandle to which to print the desired output   out    - a ref to a string to which to append, to use if handle is not given   text   - the text that will be appended   type   - where the text came from: TEXT for literal text, PROG for code Author Mark Jason Dominus, Plover Systems Please send questions and other remarks about this software to mjd-perl-template+@plover.com You can join a very low-volume (<10 messages per year) mailing list for announcements about this package. Send an empty note to mjd-perl-template-request@plover.com to join. For updates, visit http://www.plover.com/~mjd/perl/Template/. Support? This software is version 1.46. It may have bugs. Suggestions and bug reports are always welcome. Send them to mjd-perl-template+@plover.com. (That is my address, not the address of the mailing list. The mailing list address is a secret.) LICENSE     Text::Template version 1.46     Copyright 2013 Mark Jason Dominus      This program is free software; you can redistribute it and/or     modify it under the terms of the GNU General Public License as     published by the Free Software Foundation; either version 2 of the     License, or (at your option) any later version.  You may also can     redistribute it and/or modify it under the terms of the Perl     Artistic License.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received copies of the GNU General Public License     along with this program; if not, write to the Free Software     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. THANKS Many thanks to the following people for offering support, encouragement, advice, bug reports, and all the other good stuff. David H. Adler / Joel Appelbaum / Klaus Arnhold / António Aragão / Kevin Atteson / Chris.Brezil / Mike Brodhead / Tom Brown / Dr. Frank Bucolo / Tim Bunce / Juan E. Camacho / Itamar Almeida de Carvalho / Joseph Cheek / Gene Damon / San Deng / Bob Dougherty / Marek Grac / Dan Franklin / gary at dls.net / Todd A. Green / Donald L. Greer Jr. / Michelangelo Grigni / Zac Hansen / Tom Henry / Jarko Hietaniemi / Matt X. Hunter / Robert M. Ioffe / Daniel LaLiberte / Reuven M. Lerner / Trip Lilley / Yannis Livassof / Val Luck / Kevin Madsen / David Marshall / James Mastros / Joel Meulenberg / Jason Moore / Sergey Myasnikov / Chris Nandor / Bek Oberin / Steve Palincsar / Ron Pero / Hans Persson / Sean Roehnelt / Jonathan Roy / Shabbir J. Safdar / Jennifer D. St Clair / Uwe Schneider / Randal L. Schwartz / Michael G Schwern / Yonat Sharon / Brian C. Shensky / Niklas Skoglund / Tom Snee / Fred Steinberg / Hans Stoop / Michael J. Suzio / Dennis Taylor / James H. Thompson / Shad Todd / Lieven Tomme / Lorenzo Valdettaro / Larry Virden / Andy Wardley / Archie Warnock / Chris Wesley / Matt Womer / Andrew G Wood / Daini Xie / Michaely Yeung Special thanks to: Jonathan Roy for telling me how to do the Safe support (I spent two years worrying about it, and then Jonathan pointed out that it was trivial.) Ranjit Bhatnagar for demanding less verbose fragments like they have in ASP, for helping me figure out the Right Thing, and, especially, for talking me out of adding any new syntax. These discussions resulted in the $OUT feature. Bugs and Caveats my variables in fill_in are still susceptible to being clobbered by template evaluation. They all begin with fi_, so avoid those names in your templates. The line number information will be wrong if the template's lines are not terminated by ""\n"". You should let me know if this is a problem. If you do, I will fix it. The $OUT variable has a special meaning in templates, so you cannot use it as if it were a regular variable. There are not quite enough tests in the test suite. × Module Install Instructions To install Text::Template, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Text::Template CPAN shell                      perl -MCPAN -e shell                     install Text::Template For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Templates with embedded perl"	"true"
"Template Engines"	"Text::Xslate"	"https://metacpan.org/pod/Text::Xslate"	"Faster template engine with XS. Supports multiple syntaxes."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Text::Xslate - Scalable template engine for Perl5 - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Syohei Yoshida  /  3.3.9 (SYOHEX on 2015-12-18) 3.3.8 (SYOHEX on 2015-12-18) 3.3.7 (SYOHEX on 2015-08-28) 3.3.6 (SYOHEX on 2015-08-25) 3.3.5 (SYOHEX on 2015-08-05) 3.3.4 (GFUJI on 2015-03-24) 3.3.3 (SYOHEX on 2014-08-04) 3.2.3 (SYOHEX on 2014-08-04) 3.3.1 (GFUJI on 2014-08-03) 3.3.0 (GFUJI on 2014-08-03) 3.2.5 (GFUJI on 2014-07-14) 3.2.4 (GFUJI on 2014-04-27) 3.2.3 (GFUJI on 2014-04-22) 3.2.2 (GFUJI on 2014-04-22) 3.2.1 (GFUJI on 2014-04-16) 3.2.0 (GFUJI on 2014-04-03) 3.1.2 (GFUJI on 2014-02-20) 3.1.1 (GFUJI on 2014-01-23) 3.1.0 (GFUJI on 2013-11-16) 3.0.2 (GFUJI on 2013-11-15) 3.0.1 (GFUJI on 2013-11-04) 3.0.0 (GFUJI on 2013-10-18) 2.1.0 (GFUJI on 2013-10-17) 2.0010 (GFUJI on 2013-10-07) 2.0009 (GFUJI on 2013-07-08) 2.0008 (GFUJI on 2013-07-06) 2.0007 (GFUJI on 2013-06-21) 2.0006 (GFUJI on 2013-06-03) 2.0005 (GFUJI on 2013-06-02) 2.0004 (GFUJI on 2013-05-30) 2.0003 (GFUJI on 2013-05-10) 2.0002 (GFUJI on 2013-04-26) 2.0001 (GFUJI on 2013-04-24) 2.0000 (GFUJI on 2013-02-20) 1.9999_01 DEV (GFUJI on 2013-02-16) 1.6002 (GFUJI on 2012-12-19) 1.6001 (GFUJI on 2012-12-05) 1.6000_01 DEV (GFUJI on 2012-11-04) 1.5025 (GFUJI on 2012-10-20) 1.5024 (GFUJI on 2012-10-15) 1.5023 (GFUJI on 2012-10-14) 1.5022 (GFUJI on 2012-10-14) 1.5021 (GFUJI on 2012-10-14) 1.5020 (GFUJI on 2012-10-14) 1.5019 (GFUJI on 2012-10-03) 1.5018 (GFUJI on 2012-09-30) 1.5017 (GFUJI on 2012-08-04) 1.5016 (GFUJI on 2012-08-04) 1.5015 (GFUJI on 2012-07-13) 1.5014 (GFUJI on 2012-06-26) 1.5013 (GFUJI on 2012-06-12) 1.5012 (GFUJI on 2012-05-21) 1.5011 (GFUJI on 2012-05-21) 1.5010 (GFUJI on 2012-05-03) 1.5009 (GFUJI on 2012-03-30) 1.5008 (GFUJI on 2012-03-28) 1.5007 (GFUJI on 2011-11-17) 1.5006 (GFUJI on 2011-11-12) 1.5005 (GFUJI on 2011-10-27) 1.4002 (GFUJI on 2011-08-29) 1.3001 (GFUJI on 2011-07-10) 1.2004 (GFUJI on 2011-06-05) 1.2003 (GFUJI on 2011-06-02) 1.5004 (GFUJI on 2011-10-13) 1.5003 (GFUJI on 2011-10-05) 1.5002 (GFUJI on 2011-08-30) 1.5001 (GFUJI on 2011-08-30) 1.5000 (GFUJI on 2011-08-29) 1.4001 (GFUJI on 2011-07-29) 1.4000 (GFUJI on 2011-07-24) 1.3999_04 DEV (GFUJI on 2011-07-24) 1.3999_03 DEV (GFUJI on 2011-07-23) 1.3999_02 DEV (GFUJI on 2011-07-23) 1.3999_01 DEV (GFUJI on 2011-07-13) 1.3000 (GFUJI on 2011-06-11) 1.2002 (GFUJI on 2011-05-18) 1.2001 (GFUJI on 2011-05-16) 1.2000 (GFUJI on 2011-05-14) 1.1005_01 DEV (GFUJI on 2011-05-11) 1.1005 (GFUJI on 2011-04-30) 1.1004 (GFUJI on 2011-04-11) 1.1003 (GFUJI on 2011-04-07) 1.1002 (GFUJI on 2011-04-04) 1.1001 (GFUJI on 2011-04-01) 1.001 (GFUJI on 2011-04-01) 1.1000 (GFUJI on 2011-03-17) 1.0099_03 DEV (GFUJI on 2011-03-13) 1.0099_02 DEV (GFUJI on 2011-03-10) 1.0099_01 DEV (GFUJI on 2011-03-10) 1.0012 (GFUJI on 2011-03-04) 1.0011 (GFUJI on 2011-03-01) 1.0010 (GFUJI on 2011-02-28) 1.0009 (GFUJI on 2011-02-28) 1.0008 (GFUJI on 2011-02-14) 1.0007 (GFUJI on 2011-02-13) 1.0006 (GFUJI on 2011-02-11) 1.0005 (GFUJI on 2011-02-09) 1.0004 (GFUJI on 2011-02-08) 1.0003 (GFUJI on 2011-02-05) 1.0002 (GFUJI on 2011-02-02) 1.0001 (GFUJI on 2011-02-02) 1.0000 (GFUJI on 2011-01-07) 0.3002 (GFUJI on 2010-12-16) 0.3001 (GFUJI on 2010-12-09) 0.3000 (GFUJI on 2010-11-23) 0.2015 (GFUJI on 2010-11-17) 0.2014 (GFUJI on 2010-11-06) 0.2013 (GFUJI on 2010-10-30) 0.2012 (GFUJI on 2010-10-18) 0.2011 (GFUJI on 2010-10-17) 0.2010 (GFUJI on 2010-10-17) 0.2009 (GFUJI on 2010-10-06) 0.2008_02 DEV (GFUJI on 2010-09-28) 0.2008_01 DEV (GFUJI on 2010-09-22) 0.2008 (GFUJI on 2010-09-19) 0.2007 (GFUJI on 2010-09-17) 0.2006 (GFUJI on 2010-09-14) 0.2005 (GFUJI on 2010-09-13) 0.2004 (GFUJI on 2010-09-10) 0.2003 (GFUJI on 2010-09-09) 0.2002 (GFUJI on 2010-09-07) 0.2001 (GFUJI on 2010-08-31) 0.2000 (GFUJI on 2010-08-27) 0.1999_06 DEV (GFUJI on 2010-08-26) 0.1999_05 DEV (GFUJI on 2010-08-25) 0.1999_04 DEV (GFUJI on 2010-08-25) 0.1999_03 DEV (GFUJI on 2010-08-24) 0.1999_02 DEV (GFUJI on 2010-08-24) 0.1999_01 DEV (GFUJI on 2010-08-22) 0.1058 (GFUJI on 2010-08-17) 0.1057 (GFUJI on 2010-08-15) 0.1056 (GFUJI on 2010-08-10) 0.1055 (GFUJI on 2010-08-07) 0.1054 (GFUJI on 2010-08-02) 0.1053 (GFUJI on 2010-08-01) 0.1052 (GFUJI on 2010-08-01) 0.1051 (GFUJI on 2010-07-29) 0.1050 (GFUJI on 2010-07-27) 0.1049 (GFUJI on 2010-07-27) 0.1048 (GFUJI on 2010-07-26) 0.1047 (GFUJI on 2010-07-19) 0.1046 (GFUJI on 2010-07-17) 0.1045 (GFUJI on 2010-07-13) 0.1044 (GFUJI on 2010-07-12) 0.1043 (GFUJI on 2010-07-10) 0.1042 (GFUJI on 2010-07-06) 0.1041 (GFUJI on 2010-07-03) 0.1040 (GFUJI on 2010-07-01) 0.1039 (GFUJI on 2010-06-28) 0.1038 (GFUJI on 2010-06-28) 0.1037 (GFUJI on 2010-06-27) 0.1036 (GFUJI on 2010-06-23) 0.1035 (GFUJI on 2010-06-20) 0.1034 (GFUJI on 2010-06-16) 0.1033 (GFUJI on 2010-06-13) 0.1032 (GFUJI on 2010-06-10) 0.1031 (GFUJI on 2010-06-09) 0.1030 (GFUJI on 2010-06-09) 0.1029 (GFUJI on 2010-06-08) 0.1028 (GFUJI on 2010-06-06) 0.1027 (GFUJI on 2010-06-04) 0.1026 (GFUJI on 2010-06-03) 0.1025 (GFUJI on 2010-05-31) 0.1024 (GFUJI on 2010-05-30) 0.1023 (GFUJI on 2010-05-28) 0.1022 (GFUJI on 2010-05-26) 0.1021 (GFUJI on 2010-05-25) 0.1020 (GFUJI on 2010-05-21) 0.1019 (GFUJI on 2010-05-19) 0.1018 (GFUJI on 2010-05-19) 0.1017 (GFUJI on 2010-05-18) 0.1016 (GFUJI on 2010-05-16) 0.1015 (GFUJI on 2010-05-14) 0.1014 (GFUJI on 2010-05-14) 0.1013 (GFUJI on 2010-05-13) 0.1012 (GFUJI on 2010-05-10) 0.1011 (GFUJI on 2010-05-07) 0.1010 (GFUJI on 2010-05-06) 0.1009 (GFUJI on 2010-05-05) 0.1008 (GFUJI on 2010-05-03) 0.1007 (GFUJI on 2010-05-02) 0.1006 (GFUJI on 2010-05-01) 0.1005 (GFUJI on 2010-05-01) 0.1004 (GFUJI on 2010-04-30) 0.1003 (GFUJI on 2010-04-30) 0.1002 (GFUJI on 2010-04-30) 0.1001 (GFUJI on 2010-04-29) 0.1000 (GFUJI on 2010-04-28) 0.001_09 DEV (GFUJI on 2010-04-28) 0.001_08 DEV (GFUJI on 2010-04-23) 0.001_07 DEV (GFUJI on 2010-04-22) 0.001_06 DEV (GFUJI on 2010-04-21) 0.001_05 DEV (GFUJI on 2010-04-20) 0.001_04 DEV (GFUJI on 2010-04-20) 0.001_03 DEV (GFUJI on 2010-04-20) 0.001_02 DEV (GFUJI on 2010-04-19) 0.001_01 DEV (GFUJI on 2010-04-18) Text-Xslate-3.3.9 52 ++ 52 ++  / Text::Xslate 18 Dec 2015 13:13:57 GMT Module version: 3.3.9 Source (raw) Browse (raw) Changes Homepage Clone repository Issues 5 (4 reviews) Testers (1161 / 49 / 8) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (222.23Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 3.3.8 (SYOHEX on 2015-12-18) 3.3.7 (SYOHEX on 2015-08-28) 3.3.6 (SYOHEX on 2015-08-25) 3.3.5 (SYOHEX on 2015-08-05) 3.3.4 (GFUJI on 2015-03-24) 3.3.3 (SYOHEX on 2014-08-04) 3.2.3 (SYOHEX on 2014-08-04) 3.3.1 (GFUJI on 2014-08-03) 3.3.0 (GFUJI on 2014-08-03) 3.2.5 (GFUJI on 2014-07-14) 3.2.4 (GFUJI on 2014-04-27) 3.2.3 (GFUJI on 2014-04-22) 3.2.2 (GFUJI on 2014-04-22) 3.2.1 (GFUJI on 2014-04-16) 3.2.0 (GFUJI on 2014-04-03) 3.1.2 (GFUJI on 2014-02-20) 3.1.1 (GFUJI on 2014-01-23) 3.1.0 (GFUJI on 2013-11-16) 3.0.2 (GFUJI on 2013-11-15) 3.0.1 (GFUJI on 2013-11-04) 3.0.0 (GFUJI on 2013-10-18) 2.1.0 (GFUJI on 2013-10-17) 2.0010 (GFUJI on 2013-10-07) 2.0009 (GFUJI on 2013-07-08) 2.0008 (GFUJI on 2013-07-06) 2.0007 (GFUJI on 2013-06-21) 2.0006 (GFUJI on 2013-06-03) 2.0005 (GFUJI on 2013-06-02) 2.0004 (GFUJI on 2013-05-30) 2.0003 (GFUJI on 2013-05-10) 2.0002 (GFUJI on 2013-04-26) 2.0001 (GFUJI on 2013-04-24) 2.0000 (GFUJI on 2013-02-20) 1.9999_01 DEV (GFUJI on 2013-02-16) 1.6002 (GFUJI on 2012-12-19) 1.6001 (GFUJI on 2012-12-05) 1.6000_01 DEV (GFUJI on 2012-11-04) 1.5025 (GFUJI on 2012-10-20) 1.5024 (GFUJI on 2012-10-15) 1.5023 (GFUJI on 2012-10-14) 1.5022 (GFUJI on 2012-10-14) 1.5021 (GFUJI on 2012-10-14) 1.5020 (GFUJI on 2012-10-14) 1.5019 (GFUJI on 2012-10-03) 1.5018 (GFUJI on 2012-09-30) 1.5017 (GFUJI on 2012-08-04) 1.5016 (GFUJI on 2012-08-04) 1.5015 (GFUJI on 2012-07-13) 1.5014 (GFUJI on 2012-06-26) 1.5013 (GFUJI on 2012-06-12) 1.5012 (GFUJI on 2012-05-21) 1.5011 (GFUJI on 2012-05-21) 1.5010 (GFUJI on 2012-05-03) 1.5009 (GFUJI on 2012-03-30) 1.5008 (GFUJI on 2012-03-28) 1.5007 (GFUJI on 2011-11-17) 1.5006 (GFUJI on 2011-11-12) 1.5005 (GFUJI on 2011-10-27) 1.4002 (GFUJI on 2011-08-29) 1.3001 (GFUJI on 2011-07-10) 1.2004 (GFUJI on 2011-06-05) 1.2003 (GFUJI on 2011-06-02) 1.5004 (GFUJI on 2011-10-13) 1.5003 (GFUJI on 2011-10-05) 1.5002 (GFUJI on 2011-08-30) 1.5001 (GFUJI on 2011-08-30) 1.5000 (GFUJI on 2011-08-29) 1.4001 (GFUJI on 2011-07-29) 1.4000 (GFUJI on 2011-07-24) 1.3999_04 DEV (GFUJI on 2011-07-24) 1.3999_03 DEV (GFUJI on 2011-07-23) 1.3999_02 DEV (GFUJI on 2011-07-23) 1.3999_01 DEV (GFUJI on 2011-07-13) 1.3000 (GFUJI on 2011-06-11) 1.2002 (GFUJI on 2011-05-18) 1.2001 (GFUJI on 2011-05-16) 1.2000 (GFUJI on 2011-05-14) 1.1005_01 DEV (GFUJI on 2011-05-11) 1.1005 (GFUJI on 2011-04-30) 1.1004 (GFUJI on 2011-04-11) 1.1003 (GFUJI on 2011-04-07) 1.1002 (GFUJI on 2011-04-04) 1.1001 (GFUJI on 2011-04-01) 1.001 (GFUJI on 2011-04-01) 1.1000 (GFUJI on 2011-03-17) 1.0099_03 DEV (GFUJI on 2011-03-13) 1.0099_02 DEV (GFUJI on 2011-03-10) 1.0099_01 DEV (GFUJI on 2011-03-10) 1.0012 (GFUJI on 2011-03-04) 1.0011 (GFUJI on 2011-03-01) 1.0010 (GFUJI on 2011-02-28) 1.0009 (GFUJI on 2011-02-28) 1.0008 (GFUJI on 2011-02-14) 1.0007 (GFUJI on 2011-02-13) 1.0006 (GFUJI on 2011-02-11) 1.0005 (GFUJI on 2011-02-09) 1.0004 (GFUJI on 2011-02-08) 1.0003 (GFUJI on 2011-02-05) 1.0002 (GFUJI on 2011-02-02) 1.0001 (GFUJI on 2011-02-02) 1.0000 (GFUJI on 2011-01-07) 0.3002 (GFUJI on 2010-12-16) 0.3001 (GFUJI on 2010-12-09) 0.3000 (GFUJI on 2010-11-23) 0.2015 (GFUJI on 2010-11-17) 0.2014 (GFUJI on 2010-11-06) 0.2013 (GFUJI on 2010-10-30) 0.2012 (GFUJI on 2010-10-18) 0.2011 (GFUJI on 2010-10-17) 0.2010 (GFUJI on 2010-10-17) 0.2009 (GFUJI on 2010-10-06) 0.2008_02 DEV (GFUJI on 2010-09-28) 0.2008_01 DEV (GFUJI on 2010-09-22) 0.2008 (GFUJI on 2010-09-19) 0.2007 (GFUJI on 2010-09-17) 0.2006 (GFUJI on 2010-09-14) 0.2005 (GFUJI on 2010-09-13) 0.2004 (GFUJI on 2010-09-10) 0.2003 (GFUJI on 2010-09-09) 0.2002 (GFUJI on 2010-09-07) 0.2001 (GFUJI on 2010-08-31) 0.2000 (GFUJI on 2010-08-27) 0.1999_06 DEV (GFUJI on 2010-08-26) 0.1999_05 DEV (GFUJI on 2010-08-25) 0.1999_04 DEV (GFUJI on 2010-08-25) 0.1999_03 DEV (GFUJI on 2010-08-24) 0.1999_02 DEV (GFUJI on 2010-08-24) 0.1999_01 DEV (GFUJI on 2010-08-22) 0.1058 (GFUJI on 2010-08-17) 0.1057 (GFUJI on 2010-08-15) 0.1056 (GFUJI on 2010-08-10) 0.1055 (GFUJI on 2010-08-07) 0.1054 (GFUJI on 2010-08-02) 0.1053 (GFUJI on 2010-08-01) 0.1052 (GFUJI on 2010-08-01) 0.1051 (GFUJI on 2010-07-29) 0.1050 (GFUJI on 2010-07-27) 0.1049 (GFUJI on 2010-07-27) 0.1048 (GFUJI on 2010-07-26) 0.1047 (GFUJI on 2010-07-19) 0.1046 (GFUJI on 2010-07-17) 0.1045 (GFUJI on 2010-07-13) 0.1044 (GFUJI on 2010-07-12) 0.1043 (GFUJI on 2010-07-10) 0.1042 (GFUJI on 2010-07-06) 0.1041 (GFUJI on 2010-07-03) 0.1040 (GFUJI on 2010-07-01) 0.1039 (GFUJI on 2010-06-28) 0.1038 (GFUJI on 2010-06-28) 0.1037 (GFUJI on 2010-06-27) 0.1036 (GFUJI on 2010-06-23) 0.1035 (GFUJI on 2010-06-20) 0.1034 (GFUJI on 2010-06-16) 0.1033 (GFUJI on 2010-06-13) 0.1032 (GFUJI on 2010-06-10) 0.1031 (GFUJI on 2010-06-09) 0.1030 (GFUJI on 2010-06-09) 0.1029 (GFUJI on 2010-06-08) 0.1028 (GFUJI on 2010-06-06) 0.1027 (GFUJI on 2010-06-04) 0.1026 (GFUJI on 2010-06-03) 0.1025 (GFUJI on 2010-05-31) 0.1024 (GFUJI on 2010-05-30) 0.1023 (GFUJI on 2010-05-28) 0.1022 (GFUJI on 2010-05-26) 0.1021 (GFUJI on 2010-05-25) 0.1020 (GFUJI on 2010-05-21) 0.1019 (GFUJI on 2010-05-19) 0.1018 (GFUJI on 2010-05-19) 0.1017 (GFUJI on 2010-05-18) 0.1016 (GFUJI on 2010-05-16) 0.1015 (GFUJI on 2010-05-14) 0.1014 (GFUJI on 2010-05-14) 0.1013 (GFUJI on 2010-05-13) 0.1012 (GFUJI on 2010-05-10) 0.1011 (GFUJI on 2010-05-07) 0.1010 (GFUJI on 2010-05-06) 0.1009 (GFUJI on 2010-05-05) 0.1008 (GFUJI on 2010-05-03) 0.1007 (GFUJI on 2010-05-02) 0.1006 (GFUJI on 2010-05-01) 0.1005 (GFUJI on 2010-05-01) 0.1004 (GFUJI on 2010-04-30) 0.1003 (GFUJI on 2010-04-30) 0.1002 (GFUJI on 2010-04-30) 0.1001 (GFUJI on 2010-04-29) 0.1000 (GFUJI on 2010-04-28) 0.001_09 DEV (GFUJI on 2010-04-28) 0.001_08 DEV (GFUJI on 2010-04-23) 0.001_07 DEV (GFUJI on 2010-04-22) 0.001_06 DEV (GFUJI on 2010-04-21) 0.001_05 DEV (GFUJI on 2010-04-20) 0.001_04 DEV (GFUJI on 2010-04-20) 0.001_03 DEV (GFUJI on 2010-04-20) 0.001_02 DEV (GFUJI on 2010-04-19) 0.001_01 DEV (GFUJI on 2010-04-18) Diff with version 3.3.8 (SYOHEX on 2015-12-18) 3.3.7 (SYOHEX on 2015-08-28) 3.3.6 (SYOHEX on 2015-08-25) 3.3.5 (SYOHEX on 2015-08-05) 3.3.4 (GFUJI on 2015-03-24) 3.3.3 (SYOHEX on 2014-08-04) 3.2.3 (SYOHEX on 2014-08-04) 3.3.1 (GFUJI on 2014-08-03) 3.3.0 (GFUJI on 2014-08-03) 3.2.5 (GFUJI on 2014-07-14) 3.2.4 (GFUJI on 2014-04-27) 3.2.3 (GFUJI on 2014-04-22) 3.2.2 (GFUJI on 2014-04-22) 3.2.1 (GFUJI on 2014-04-16) 3.2.0 (GFUJI on 2014-04-03) 3.1.2 (GFUJI on 2014-02-20) 3.1.1 (GFUJI on 2014-01-23) 3.1.0 (GFUJI on 2013-11-16) 3.0.2 (GFUJI on 2013-11-15) 3.0.1 (GFUJI on 2013-11-04) 3.0.0 (GFUJI on 2013-10-18) 2.1.0 (GFUJI on 2013-10-17) 2.0010 (GFUJI on 2013-10-07) 2.0009 (GFUJI on 2013-07-08) 2.0008 (GFUJI on 2013-07-06) 2.0007 (GFUJI on 2013-06-21) 2.0006 (GFUJI on 2013-06-03) 2.0005 (GFUJI on 2013-06-02) 2.0004 (GFUJI on 2013-05-30) 2.0003 (GFUJI on 2013-05-10) 2.0002 (GFUJI on 2013-04-26) 2.0001 (GFUJI on 2013-04-24) 2.0000 (GFUJI on 2013-02-20) 1.9999_01 DEV (GFUJI on 2013-02-16) 1.6002 (GFUJI on 2012-12-19) 1.6001 (GFUJI on 2012-12-05) 1.6000_01 DEV (GFUJI on 2012-11-04) 1.5025 (GFUJI on 2012-10-20) 1.5024 (GFUJI on 2012-10-15) 1.5023 (GFUJI on 2012-10-14) 1.5022 (GFUJI on 2012-10-14) 1.5021 (GFUJI on 2012-10-14) 1.5020 (GFUJI on 2012-10-14) 1.5019 (GFUJI on 2012-10-03) 1.5018 (GFUJI on 2012-09-30) 1.5017 (GFUJI on 2012-08-04) 1.5016 (GFUJI on 2012-08-04) 1.5015 (GFUJI on 2012-07-13) 1.5014 (GFUJI on 2012-06-26) 1.5013 (GFUJI on 2012-06-12) 1.5012 (GFUJI on 2012-05-21) 1.5011 (GFUJI on 2012-05-21) 1.5010 (GFUJI on 2012-05-03) 1.5009 (GFUJI on 2012-03-30) 1.5008 (GFUJI on 2012-03-28) 1.5007 (GFUJI on 2011-11-17) 1.5006 (GFUJI on 2011-11-12) 1.5005 (GFUJI on 2011-10-27) 1.4002 (GFUJI on 2011-08-29) 1.3001 (GFUJI on 2011-07-10) 1.2004 (GFUJI on 2011-06-05) 1.2003 (GFUJI on 2011-06-02) 1.5004 (GFUJI on 2011-10-13) 1.5003 (GFUJI on 2011-10-05) 1.5002 (GFUJI on 2011-08-30) 1.5001 (GFUJI on 2011-08-30) 1.5000 (GFUJI on 2011-08-29) 1.4001 (GFUJI on 2011-07-29) 1.4000 (GFUJI on 2011-07-24) 1.3999_04 DEV (GFUJI on 2011-07-24) 1.3999_03 DEV (GFUJI on 2011-07-23) 1.3999_02 DEV (GFUJI on 2011-07-23) 1.3999_01 DEV (GFUJI on 2011-07-13) 1.3000 (GFUJI on 2011-06-11) 1.2002 (GFUJI on 2011-05-18) 1.2001 (GFUJI on 2011-05-16) 1.2000 (GFUJI on 2011-05-14) 1.1005_01 DEV (GFUJI on 2011-05-11) 1.1005 (GFUJI on 2011-04-30) 1.1004 (GFUJI on 2011-04-11) 1.1003 (GFUJI on 2011-04-07) 1.1002 (GFUJI on 2011-04-04) 1.1001 (GFUJI on 2011-04-01) 1.001 (GFUJI on 2011-04-01) 1.1000 (GFUJI on 2011-03-17) 1.0099_03 DEV (GFUJI on 2011-03-13) 1.0099_02 DEV (GFUJI on 2011-03-10) 1.0099_01 DEV (GFUJI on 2011-03-10) 1.0012 (GFUJI on 2011-03-04) 1.0011 (GFUJI on 2011-03-01) 1.0010 (GFUJI on 2011-02-28) 1.0009 (GFUJI on 2011-02-28) 1.0008 (GFUJI on 2011-02-14) 1.0007 (GFUJI on 2011-02-13) 1.0006 (GFUJI on 2011-02-11) 1.0005 (GFUJI on 2011-02-09) 1.0004 (GFUJI on 2011-02-08) 1.0003 (GFUJI on 2011-02-05) 1.0002 (GFUJI on 2011-02-02) 1.0001 (GFUJI on 2011-02-02) 1.0000 (GFUJI on 2011-01-07) 0.3002 (GFUJI on 2010-12-16) 0.3001 (GFUJI on 2010-12-09) 0.3000 (GFUJI on 2010-11-23) 0.2015 (GFUJI on 2010-11-17) 0.2014 (GFUJI on 2010-11-06) 0.2013 (GFUJI on 2010-10-30) 0.2012 (GFUJI on 2010-10-18) 0.2011 (GFUJI on 2010-10-17) 0.2010 (GFUJI on 2010-10-17) 0.2009 (GFUJI on 2010-10-06) 0.2008_02 DEV (GFUJI on 2010-09-28) 0.2008_01 DEV (GFUJI on 2010-09-22) 0.2008 (GFUJI on 2010-09-19) 0.2007 (GFUJI on 2010-09-17) 0.2006 (GFUJI on 2010-09-14) 0.2005 (GFUJI on 2010-09-13) 0.2004 (GFUJI on 2010-09-10) 0.2003 (GFUJI on 2010-09-09) 0.2002 (GFUJI on 2010-09-07) 0.2001 (GFUJI on 2010-08-31) 0.2000 (GFUJI on 2010-08-27) 0.1999_06 DEV (GFUJI on 2010-08-26) 0.1999_05 DEV (GFUJI on 2010-08-25) 0.1999_04 DEV (GFUJI on 2010-08-25) 0.1999_03 DEV (GFUJI on 2010-08-24) 0.1999_02 DEV (GFUJI on 2010-08-24) 0.1999_01 DEV (GFUJI on 2010-08-22) 0.1058 (GFUJI on 2010-08-17) 0.1057 (GFUJI on 2010-08-15) 0.1056 (GFUJI on 2010-08-10) 0.1055 (GFUJI on 2010-08-07) 0.1054 (GFUJI on 2010-08-02) 0.1053 (GFUJI on 2010-08-01) 0.1052 (GFUJI on 2010-08-01) 0.1051 (GFUJI on 2010-07-29) 0.1050 (GFUJI on 2010-07-27) 0.1049 (GFUJI on 2010-07-27) 0.1048 (GFUJI on 2010-07-26) 0.1047 (GFUJI on 2010-07-19) 0.1046 (GFUJI on 2010-07-17) 0.1045 (GFUJI on 2010-07-13) 0.1044 (GFUJI on 2010-07-12) 0.1043 (GFUJI on 2010-07-10) 0.1042 (GFUJI on 2010-07-06) 0.1041 (GFUJI on 2010-07-03) 0.1040 (GFUJI on 2010-07-01) 0.1039 (GFUJI on 2010-06-28) 0.1038 (GFUJI on 2010-06-28) 0.1037 (GFUJI on 2010-06-27) 0.1036 (GFUJI on 2010-06-23) 0.1035 (GFUJI on 2010-06-20) 0.1034 (GFUJI on 2010-06-16) 0.1033 (GFUJI on 2010-06-13) 0.1032 (GFUJI on 2010-06-10) 0.1031 (GFUJI on 2010-06-09) 0.1030 (GFUJI on 2010-06-09) 0.1029 (GFUJI on 2010-06-08) 0.1028 (GFUJI on 2010-06-06) 0.1027 (GFUJI on 2010-06-04) 0.1026 (GFUJI on 2010-06-03) 0.1025 (GFUJI on 2010-05-31) 0.1024 (GFUJI on 2010-05-30) 0.1023 (GFUJI on 2010-05-28) 0.1022 (GFUJI on 2010-05-26) 0.1021 (GFUJI on 2010-05-25) 0.1020 (GFUJI on 2010-05-21) 0.1019 (GFUJI on 2010-05-19) 0.1018 (GFUJI on 2010-05-19) 0.1017 (GFUJI on 2010-05-18) 0.1016 (GFUJI on 2010-05-16) 0.1015 (GFUJI on 2010-05-14) 0.1014 (GFUJI on 2010-05-14) 0.1013 (GFUJI on 2010-05-13) 0.1012 (GFUJI on 2010-05-10) 0.1011 (GFUJI on 2010-05-07) 0.1010 (GFUJI on 2010-05-06) 0.1009 (GFUJI on 2010-05-05) 0.1008 (GFUJI on 2010-05-03) 0.1007 (GFUJI on 2010-05-02) 0.1006 (GFUJI on 2010-05-01) 0.1005 (GFUJI on 2010-05-01) 0.1004 (GFUJI on 2010-04-30) 0.1003 (GFUJI on 2010-04-30) 0.1002 (GFUJI on 2010-04-30) 0.1001 (GFUJI on 2010-04-29) 0.1000 (GFUJI on 2010-04-28) 0.001_09 DEV (GFUJI on 2010-04-28) 0.001_08 DEV (GFUJI on 2010-04-23) 0.001_07 DEV (GFUJI on 2010-04-22) 0.001_06 DEV (GFUJI on 2010-04-21) 0.001_05 DEV (GFUJI on 2010-04-20) 0.001_04 DEV (GFUJI on 2010-04-20) 0.001_03 DEV (GFUJI on 2010-04-20) 0.001_02 DEV (GFUJI on 2010-04-19) 0.001_01 DEV (GFUJI on 2010-04-18) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 33 PAUSE users 19 non-PAUSE users. SYOHEX Syohei Yoshida and 1 contributors show them Fuji, Goro (gfx). Dependencies Data::MessagePack Mouse parent Scalar::Util XSLoader and possibly others CPAN Testers List Reverse dependencies Dependency graph × Text-Xslate-3.3.9 NAME VERSION SYNOPSIS DESCRIPTION Features High performance Smart escaping for HTML metacharacters Template cascading Easiness to enhance INTERFACE Methods Text::Xslate->new(%options) $tx->render($file, \%vars) :Str $tx->render_string($string, \%vars) :Str $tx->load_file($file) :Void Text::Xslate->current_engine :XslateEngine Text::Xslate->current_vars :HashRef Text::Xslate->current_file :Str Text::Xslate->current_line :Int Text::Xslate->print(...) :Void $tx->validate($file) :Void Exportable functions mark_raw($str :Str) :RawStr unmark_raw($str :Str) :Str html_escape($str :Str) :RawStr uri_escape($str :Str) :Str html_builder { block } | \&function :CodeRef Command line interface TEMPLATE SYNTAX NOTES Nil/undef handling DEPENDENCIES TODO RESOURCES BUGS ACKNOWLEDGEMENT AUTHOR LICENSE AND COPYRIGHT NAME Text::Xslate - Scalable template engine for Perl5 VERSION This document describes Text::Xslate version 3.3.9. SYNOPSIS     use Text::Xslate qw(mark_raw);      my $tx = Text::Xslate->new();      my %vars = (         title => 'A list of books',         books => [             { title => 'Islands in the stream' },             { title => 'Programming Perl'      },             # ...         ],          # mark HTML components as raw not to escape its HTML tags         gadget => mark_raw('<div class=""gadget"">...</div>'),     );      # for files     print $tx->render('hello.tx', \%vars);      # for strings (easy but slow)     my $template = q{         <h1><: $title :></h1>         <ul>         : for $books -> $book {             <li><: $book.title :></li>         : } # for         </ul>     };      print $tx->render_string($template, \%vars); DESCRIPTION Xslate is a template engine, tuned for persistent applications, safe as an HTML generator, and with rich features. There are a lot of template engines in CPAN, for example Template-Toolkit, Text::MicroTemplate, HTML::Template, and so on, but all of them have some weak points: a full-featured template engine may be slow, while a fast template engine may be too simple to use. This is why Xslate is developed, which is the best template engine for web applications. The concept of Xslate is strongly influenced by Text::MicroTemplate and Template-Toolkit 2, but the central philosophy of Xslate is different from them. That is, the philosophy is sandboxing that the template logic should not have no access outside the template beyond your permission. Other remarkable features are as follows: Features High performance This engine introduces the virtual machine paradigm. Templates are compiled into intermediate code, and then executed by the virtual machine, which is highly optimized for rendering templates. Thus, Xslate is much faster than any other template engines. The template roundup project by Sam Graham shows Text::Xslate got amazingly high scores in instance_reuse condition (i.e. for persistent applications). The template roundup project http://illusori.co.uk/projects/Template-Roundup/ Perl Template Roundup October 2010 Performance vs Variant Report: instance_reuse http://illusori.co.uk/projects/Template-Roundup/201010/performance_vs_variant_by_feature_for_instance_reuse.html There are also benchmarks in benchmark/ directory in the Xslate distribution. Smart escaping for HTML metacharacters Xslate employs the smart escaping strategy, where a template engine escapes all the HTML metacharacters in template expressions unless users mark values as raw. That is, the output is unlikely to prone to XSS. Template cascading Xslate supports the template cascading, which allows you to extend templates with block modifiers. It is like a traditional template inclusion, but is more powerful. This mechanism is also called as template inheritance. Easiness to enhance Xslate is ready to enhance. You can add functions and methods to the template engine and even add a new syntax via extending the parser. INTERFACE Methods Text::Xslate->new(%options) Creates a new Xslate template engine with options. You can reuse this instance for multiple calls to render(). Possible options are: path => \@path // ['.'] Specifies the include paths, which may be directory names or virtual paths, i.e. HASH references which contain $file_name => $content pairs. Note that if you use taint mode (-T), you have to give absolute paths to path and cache_dir. Otherwise you'll get errors because they depend on the current working directory which might not be secure. cache => $level // 1 Sets the cache level. If $level == 1 (default), Xslate caches compiled templates on the disk, and checks the freshness of the original templates every time. If $level >= 2, caches will be created but the freshness will not be checked. $level == 0 uses no caches, which is provided for testing. cache_dir => $dir // ""$ENV{HOME}/.xslate_cache"" Specifies the directory used for caches. If $ENV{HOME} doesn't exist, File::Spec->tmpdir will be used. You should specify this option for productions to avoid conflicts of template names. function => \%functions Specifies a function map which contains name-coderef pairs. A function f may be called as f($arg) or $arg | f in templates. Note that these registered functions have to return a text string, not a binary string unless you want to handle bytes in whole templates. Make sure what you want to use returns either a text string or a binary string. For example, some methods of Time::Piece might return a binary string which is encoded in UTF-8, so you'll want to decode their values.     # under LANG=ja_JP.UTF-8 on MacOSX (Darwin 11.2.0)     use Time::Piece;     use Encode qw(decode);      sub ctime {         my $ctime = Time::Piece->new->strftime; # UTF-8 encoded bytes         return decode ""UTF-8"", $ctime;     }      my $tx = Text::Xslate->new(         function => {             ctime => \&ctime,         },         ...,     ); Built-in functions are described in Text::Xslate::Manual::Builtin. module => [$module => ?\@import_args, ...] Imports functions from $module, which may be a function-based or bridge module. Optional @import_args are passed to import as $module->import(@import_args). For example:     # for function-based modules     my $tx = Text::Xslate->new(         module => ['Digest::SHA1' => [qw(sha1_hex)]],     );     print $tx->render_string(         '<: sha1_hex($x).substr(0, 6) :>',         { x => foo() },     ); # => 0beec7      # for bridge modules     my $tx = Text::Xslate->new(         module => ['Text::Xslate::Bridge::Star'],     );     print $tx->render_string(         '<: $x.uc() :>',         { x => 'foo' },     ); # => 'FOO' Because you can use function-based modules with the module option, and also can invoke any object methods in templates, Xslate doesn't require specific namespaces for plugins. html_builder_module => [$module => ?\@import_args, ...] Imports functions from $module, wrapping each function with html_builder(). input_layer => $perliolayers // ':utf8' Specifies PerlIO layers to open template files. verbose => $level // 1 Specifies the verbose level. If $level == 0, all the possible errors will be ignored. If $level >= 1 (default), trivial errors (e.g. to print nil) will be ignored, but severe errors (e.g. for a method to throw the error) will be warned. If $level >= 2, all the possible errors will be warned. suffix => $ext // '.tx' Specify the template suffix, which is used for cascade and include in Kolon. Note that this is used for static name resolution. That is, the compiler uses it but the runtime engine doesn't. syntax => $name // 'Kolon' Specifies the template syntax you want to use. $name may be a short name (e.g. Kolon), or a fully qualified name (e.g. Text::Xslate::Syntax::Kolon). This option is passed to the compiler directly. type => $type // 'html' Specifies the output content type. If $type is html or xml, smart escaping is applied to template expressions. That is, they are interpolated via the html_escape filter. If $type is text smart escaping is not applied so that it is suitable for plain texts like e-mails. $type may be html, xml (identical to html), and text. This option is passed to the compiler directly. line_start => $token // $parser_defined_str Specify the token to start line code as a string, which quotemeta will be applied to. If you give undef, the line code style is disabled. This option is passed to the parser via the compiler. tag_start => $str // $parser_defined_str Specify the token to start inline code as a string, which quotemeta will be applied to. This option is passed to the parser via the compiler. tag_end => $str // $parser_defined_str Specify the token to end inline code as a string, which quotemeta will be applied to. This option is passed to the parser via the compiler. header => \@template_files Specify the header template files, which are inserted to the head of each template. This option is passed to the compiler. footer => \@template_files Specify the footer template files, which are inserted to the foot of each template. This option is passed to the compiler. warn_handler => \&cb Specify the callback &cb which is called on warnings. die_handler => \&cb Specify the callback &cb which is called on fatal errors. pre_process_handler => \&cb Specify the callback &cb which is called after templates are loaded from the disk in order to pre-process template. For example:     # Remove withespace from templates     my $tx = Text::Xslate->new(         pre_process_handler => sub {             my $text = shift;             $text=~s/\s+//g;             return $text;         }     ); The first argument is the template text string, which can be both text strings and byte strings. This filter is applied only to files, not a string template for render_string. $tx->render($file, \%vars) :Str Renders a template file with given variables, and returns the result. \%vars is optional. Note that $file may be cached according to the cache level. $tx->render_string($string, \%vars) :Str Renders a template string with given variables, and returns the result. \%vars is optional. Note that $string is never cached, so this method should be avoided in production environment. If you want in-memory templates, consider the path option for HASH references which are cached as you expect:     my %vpath = (         'hello.tx' => 'Hello, <: $lang :> world!',     );      my $tx = Text::Xslate->new( path => \%vpath );     print $tx->render('hello.tx', { lang => 'Xslate' }); Note that $string must be a text string, not a binary string. $tx->load_file($file) :Void Loads $file into memory for following render(). Compiles and saves it as disk caches if needed. Text::Xslate->current_engine :XslateEngine Returns the current Xslate engine while executing. Otherwise returns undef. This method is significant when it is called by template functions and methods. Text::Xslate->current_vars :HashRef Returns the current variable table, namely the second argument of render() while executing. Otherwise returns undef. Text::Xslate->current_file :Str Returns the current file name while executing. Otherwise returns undef. This method is significant when it is called by template functions and methods. Text::Xslate->current_line :Int Returns the current line number while executing. Otherwise returns undef. This method is significant when it is called by template functions and methods. Text::Xslate->print(...) :Void Adds the argument into the output buffer. This method is available on executing. $tx->validate($file) :Void Checks whether the syntax of $file is valid or invalid as Xslate. If it detects the invalid factor, this method throws the exception. Exportable functions mark_raw($str :Str) :RawStr Marks $str as raw, so that the content of $str will be rendered as is, so you have to escape these strings by yourself. For example:     use Text::Xslate qw( mark_raw );      my $tx   = Text::Xslate->new();     my $tmpl = 'Mailaddress: <: $email :>';     my %vars = (         email => mark_raw('Foo &lt;foo at example.com&gt;'),     );     print $tx->render_string($tmpl, \%email);     # => Mailaddress: Foo &lt;foo@example.com&gt; This function is available in templates as the mark_raw filter, although the use of it is strongly discouraged. unmark_raw($str :Str) :Str Clears the raw marker from $str, so that the content of $str will be escaped before rendered. This function is available in templates as the unmark_raw filter. html_escape($str :Str) :RawStr Escapes HTML meta characters in $str, and returns it as a raw string (see above). If $str is already a raw string, it returns $str as is. By default, this function will automatically be applied to all template expressions. This function is available in templates as the html filter, but you're better off using unmark_raw to ensure that expressions are html-escaped. uri_escape($str :Str) :Str Escapes URI unsafe characters in $str, and returns it. This function is available in templates as the uri filter. html_builder { block } | \&function :CodeRef Wraps a block or &function with mark_raw so that the new subroutine will return a raw string. This function is used to tell the xslate engine that &function is an HTML builder that returns HTML sources. For example:     sub some_html_builder {         my @args = @_;         my $html;         # build HTML ...         return $html;     }      my $tx = Text::Xslate->new(         function => {             some_html_builder => html_builder(\&some_html_builder),         },     ); See also Text::Xslate::Manual::Cookbook. Command line interface The xslate(1) command is provided as a CLI to the Text::Xslate module, which is used to process directory trees or to evaluate one liners. For example:     $ xslate -Dname=value -o dest_path src_path      $ xslate -e 'Hello, <: $ARGV[0] :> wolrd!' Xslate     $ xslate -s TTerse -e 'Hello, [% ARGV.0 %] world!' TTerse See xslate(1) for details. TEMPLATE SYNTAX There are multiple template syntaxes available in Xslate. Kolon Kolon is the default syntax, using <: ... :> inline code and : ... line code, which is explained in Text::Xslate::Syntax::Kolon. Metakolon Metakolon is the same as Kolon except for using [% ... %] inline code and %% ... line code, instead of <: ... :> and : .... TTerse TTerse is a syntax that is a subset of Template-Toolkit 2 (and partially TT3), which is explained in Text::Xslate::Syntax::TTerse. HTMLTemplate There's HTML::Template compatible layers in CPAN. Text::Xslate::Syntax::HTMLTemplate is a syntax for HTML::Template. HTML::Template::Parser is a converter from HTML::Template to Text::Xslate. NOTES There are common notes in Xslate. Nil/undef handling Note that nil (i.e. undef in Perl) handling is different from Perl's. Basically it does nothing, but verbose => 2 will produce warnings on it. to print Prints nothing. to access fields Returns nil. That is, nil.foo.bar.baz produces nil. to invoke methods Returns nil. That is, nil.foo().bar().baz() produces nil. to iterate Dealt as an empty array. equality $var == nil returns true if and only if $var is nil. DEPENDENCIES Perl 5.8.1 or later. If you have a C compiler, the XS backend will be used. Otherwise the pure Perl backend will be used. TODO Context controls. e.g. <: [ $foo->bar @list ] :>. Augment modifiers. Default arguments and named arguments for macros. External macros. Just idea: in the new macro concept, macros and external templates will be the same in internals:     : macro foo($lang) { ""Hello, "" ~ $lang ~ "" world!"" }     : include foo { lang => 'Xslate' }     : # => 'Hello, Xslate world!'      : extern bar 'my/bar.tx';     # 'extern bar $file' is ok     : bar( value => 42 );         # calls an external template     : include bar { value => 42 } # ditto A ""too-safe"" HTML escaping filter which escape all the symbolic characters RESOURCES WEB: http://xslate.org/ PROJECT HOME: http://github.com/xslate/ REPOSITORY: http://github.com/xslate/p5-Text-Xslate/ BUGS Please make a file on http://github.com/xslate/. Patches are always welcome. =head1 SEE ALSO Documents: Text::Xslate::Manual Xslate template syntaxes: Text::Xslate::Syntax::Kolon Text::Xslate::Syntax::Metakolon Text::Xslate::Syntax::TTerse Xslate command: xslate Other template modules that Xslate has been influenced by: Text::MicroTemplate Text::MicroTemplate::Extended Text::ClearSilver Template (Template::Toolkit) HTML::Template HTML::Template::Pro Template::Alloy Template::Sandbox Benchmarks: Template::Benchmark http://xslate.org/benchmark.html Papers: http://www.cs.usfca.edu/~parrt/papers/mvc.templates.pdf - Enforcing Strict Model-View Separation in Template Engines ACKNOWLEDGEMENT Thanks to lestrrat for the suggestion to the interface of render(), the contribution of Text::Xslate::Runner (was App::Xslate), and a lot of suggestions. Thanks to tokuhirom for the ideas, feature requests, encouragement, and bug finding. Thanks to gardejo for the proposal to the name template cascading. Thanks to makamaka for the contribution of Text::Xslate::PP. Thanks to jjn1056 to the concept of template overlay (now implemented as cascade with ...). Thanks to typester for the various inspirations. Thanks to clouder for the patch of adding AND and OR to TTerse. Thanks to punytan for the documentation improvement. Thanks to chiba for the bug reports and patches. Thanks to turugina for the patch to fix Win32 problems Thanks to Sam Graham for the bug reports. Thanks to Mons Anderson for the bug reports and patches. Thanks to hirose31 for the feature requests and bug reports. Thanks to c9s for the contribution of the documents. Thanks to shiba_yu36 for the bug reports. Thanks to kane46taka for the bug reports. Thanks to cho45 for the bug reports. Thanks to shmorimo for the bug reports. Thanks to ueda for the suggestions. AUTHOR Fuji, Goro (gfx) <gfuji@cpan.org>. Makamaka Hannyaharamitu (makamaka) (Text::Xslate::PP) Maki, Daisuke (lestrrat) (Text::Xslate::Runner) LICENSE AND COPYRIGHT Copyright (c) 2010-2013, Fuji, Goro (gfx). All rights reserved. This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself. × Module Install Instructions To install Text::Xslate, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Text::Xslate CPAN shell                      perl -MCPAN -e shell                     install Text::Xslate For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Faster template engine with XS. Supports multiple syntaxes."	"true"
"Template Engines"	"Tiffany"	"https://metacpan.org/pod/Tiffany"	"Generic interface for template engines. It makes it easy to use multiple template engines."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Tiffany - Generic interface for Perl5 template engines. - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors MATSUNO★Tokuhiro  /  1.01 (TOKUHIROM on 2013-09-04) 1.00 (TOKUHIROM on 2012-10-01) 0.08 (TOKUHIROM on 2012-04-16) 0.07 (TOKUHIROM on 2012-04-16) 0.06 (TOKUHIROM on 2012-04-10) 0.05 (TOKUHIROM on 2012-04-09) 0.04 (TOKUHIROM on 2011-02-23) 0.03 (TOKUHIROM on 2010-09-10) 0.02 (TOKUHIROM on 2010-08-31) 0.01_08 DEV (TOKUHIROM on 2010-08-09) 0.01_07 DEV (TOKUHIROM on 2010-08-09) 0.01_06 DEV (TOKUHIROM on 2010-08-08) Tiffany-1.01 4 ++ 4 ++  / Tiffany 04 Sep 2013 02:50:26 GMT Module version: 1.01 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues (0) Testers (2217 / 0 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (15.75Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 1.00 (TOKUHIROM on 2012-10-01) 0.08 (TOKUHIROM on 2012-04-16) 0.07 (TOKUHIROM on 2012-04-16) 0.06 (TOKUHIROM on 2012-04-10) 0.05 (TOKUHIROM on 2012-04-09) 0.04 (TOKUHIROM on 2011-02-23) 0.03 (TOKUHIROM on 2010-09-10) 0.02 (TOKUHIROM on 2010-08-31) 0.01_08 DEV (TOKUHIROM on 2010-08-09) 0.01_07 DEV (TOKUHIROM on 2010-08-09) 0.01_06 DEV (TOKUHIROM on 2010-08-08) Diff with version 1.00 (TOKUHIROM on 2012-10-01) 0.08 (TOKUHIROM on 2012-04-16) 0.07 (TOKUHIROM on 2012-04-16) 0.06 (TOKUHIROM on 2012-04-10) 0.05 (TOKUHIROM on 2012-04-09) 0.04 (TOKUHIROM on 2011-02-23) 0.03 (TOKUHIROM on 2010-09-10) 0.02 (TOKUHIROM on 2010-08-31) 0.01_08 DEV (TOKUHIROM on 2010-08-09) 0.01_07 DEV (TOKUHIROM on 2010-08-09) 0.01_06 DEV (TOKUHIROM on 2010-08-08) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 2 PAUSE users 2 non-PAUSE users. TOKUHIROM MATSUNO★Tokuhiro and 4 contributors show them Tokuhiro Matsuno lestrrat gfx tokuhirom Dependencies none CPAN Testers List Reverse dependencies NAME SYNOPSIS DESCRIPTION FACTORY METHOD The Tiffany Protocol HOW TO USE IT IN MY WEB APPLICATION FRAMEWORK? FAQ AUTHOR SEE ALSO THANKS TO LICENSE NAME Tiffany - Generic interface for Perl5 template engines. SYNOPSIS     use Tiffany;      my $tmpl = Tiffany->load('Text::Xslate', {syntax => 'TTerse'});     $tmpl->render(\'Hello, [% name %]', {name => 'John'});     # => ""Hello, John"" DESCRIPTION Tiffany is a generic interface for Perl5 template engines. FACTORY METHOD Tiffany.pm acts as a factory for Tiffany::* classes, which in turn are the actual adaptor classes for each template engine. my $tiffany = Tiffany->load($klass, $args) Load Tiffany::* class if necessary, and create new instance of using the given arguments.     my $xslate = Tiffany->load(""Text::Xslate"", +{syntax => 'TTerse'});      my $xslate = Tiffany->load(""+My::Template::Engine"", +{option => 'here'}); The Tiffany Protocol The Tiffany protocol is based on duck typing. A template adaptor does not need to inherit from a particular class, but its API needs to adhere to the spec provided here. In the documentation that follows, Tiffany::Thing represents an adaptor class. my $tiffanny = Tiffany::Thing->new([$args:HashRef|ArrayRef]); The module SHOULD have a new method. This method creates a new instance of Tiffany module. $args should be passed to the constructor of the template engine. my $result = $tmpl->render($stuff:Scalar|ScalarRef [, @args]); The module SHOULD have a render method. This method should invoke the appropriate rendering method for the underlying template engine, using @args. If the template engine found any errors, this method MUST throw an exception. If the template engine throws any exceptions, Tiffany module SHOULD pass through the exception unaltered. $stuff SHOULD expect a Scalar that represents the template filename. The module MAY allow a ScalarRef that holds the actual template code. This method MUST return plain string. Do not return a blessed reference. HOW TO USE IT IN MY WEB APPLICATION FRAMEWORK? Example code is here: eg/sinatraish/ in distribution tar ball or http://github.com/tokuhirom/p5-tiffany/tree/master/eg/sinatraish/. FAQ Is Tiffany supports JSON? Tiffany should not support JSON. Tiffany protocol can support JSON serialize. But real web application needs more things like Content-Type. It is not supported area for Tiffany. AUTHOR Tokuhiro Matsuno <tokuhirom AAJKLFJEF@ GMAIL COM> SEE ALSO Any::Template, http://github.com/rtomayko/tilt THANKS TO kazuhooku gfx miyagawa lestrrat LICENSE Copyright (C) Tokuhiro Matsuno This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself. × Module Install Instructions To install Tiffany, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Tiffany CPAN shell                      perl -MCPAN -e shell                     install Tiffany For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Generic interface for template engines. It makes it easy to use multiple template engines."	"true"
"Template Engines"	"Template::Magic"	"https://metacpan.org/pod/Template::Magic"	"Magic merger of runtime values with templates."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Magic merger of runtime values with templates."	"true"
"Testing Frameworks"	"Test::Base"	"https://metacpan.org/pod/Test::Base"	"A Data Driven Testing Framework"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"A Data Driven Testing Framework"	"true"
"Testing Frameworks"	"Test::Base::Less"	"https://metacpan.org/pod/Test::Base::Less"	"Limited version of Test::Base"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Limited version of Test::Base"	"true"
"Testing Frameworks"	"Test::BDD::Cucumber"	"https://metacpan.org/pod/Test::BDD::Cucumber"	"Implementation of the popular Cucumber framework in Perl"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Implementation of the popular Cucumber framework in Perl"	"true"
"Testing Frameworks"	"Test::Class"	"https://metacpan.org/pod/Test::Class"	"Class-based testing. Support ""setup"" and ""teardown""."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Class-based testing. Support ""setup"" and ""teardown""."	"true"
"Testing Frameworks"	"Test::Deep"	"https://metacpan.org/pod/Test::Deep"	"Test deep and complex data structures with great flexibility."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Test deep and complex data structures with great flexibility."	"true"
"Testing Frameworks"	"Test::Deep::Matcher"	"https://metacpan.org/pod/Test::Deep::Matcher"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Testing Frameworks"	"Test::Harness"	"https://metacpan.org/pod/Test::Harness"	"Run Perl standard test scripts with statistics"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Run Perl standard test scripts with statistics"	"true"
"Testing Frameworks"	"Test::Kantan"	"https://metacpan.org/pod/Test::Kantan"	"simple, flexible, fun ""Testing framework"""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"simple, flexible, fun ""Testing framework"""	"true"
"Testing Frameworks"	"Test::More"	"https://metacpan.org/pod/Test::More"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Test Double"	"Test::Exception"	"https://metacpan.org/pod/Test::Exception"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Test Double"	"Test::Fatal"	"https://metacpan.org/pod/Test::Fatal"	"Simple module for verifying exceptions."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Simple module for verifying exceptions."	"true"
"Test Double"	"Test::Mock::Guard"	"https://metacpan.org/pod/Test::Mock::Guard"	"Mocking package subroutines."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Mocking package subroutines."	"true"
"Test Double"	"Test::MockTime"	"https://metacpan.org/pod/Test::MockTime"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Test Double"	"Test::mysqld"	"https://metacpan.org/pod/Test::mysqld"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Test Double"	"Test::TCP"	"https://metacpan.org/pod/Test::TCP"	"Launch temporary TCP Server"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Launch temporary TCP Server"	"true"
"Test Double"	"Test::Time"	"https://metacpan.org/pod/Test::Time"	"Simple module for faking system time."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Simple module for faking system time."	"true"
"Coverage"	"Devel::Cover"	"https://metacpan.org/pod/Devel::Cover"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Coverage"	"Devel::Cover::Report::Coveralls"	"https://metacpan.org/pod/Devel::Cover::Report::Coveralls"	"Report to Coveralls"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Report to Coveralls"	"true"
"Tools"	"App::Ack"	"https://metacpan.org/pod/App::Ack"	"ack is a tool like grep, optimized for programmers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"ack is a tool like grep, optimized for programmers."	"true"
"Tools"	"App::Nopaste"	"https://metacpan.org/pod/App::Nopaste"	"Post to various pastebins from the CLI"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Post to various pastebins from the CLI"	"true"
"Tools"	"Daiku"	"https://metacpan.org/pod/Daiku"	"Make for Perl."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Make for Perl."	"true"
"Tools"	"Data::Printer"	"https://metacpan.org/pod/Data::Printer"	"Colored pretty-print of Perl data structures and objects."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Colored pretty-print of Perl data structures and objects."	"true"
"Tools"	"Reply"	"https://metacpan.org/pod/Reply"	"Read-eval-print-loop(REPL) command-line tool."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Read-eval-print-loop(REPL) command-line tool."	"true"
"Tools"	"Riji"	"https://metacpan.org/pod/Riji"	"Static site generator using markdown and git mainly for blogging."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Static site generator using markdown and git mainly for blogging."	"true"
"Tools"	"Toolbox::Simple"	"https://metacpan.org/pod/Toolbox::Simple"	"Simplfy some common tasks in Perl."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Simplfy some common tasks in Perl."	"true"
"Tools"	"Script::Toolbox"	"https://metacpan.org/pod/Script::Toolbox"	"Framework for the daily business scripts."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Framework for the daily business scripts."	"true"
"Tools"	"Devel::Kit"	"https://metacpan.org/pod/Devel::Kit"	"Handy toolbox of things to ease development/debugging."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Handy toolbox of things to ease development/debugging."	"true"
"Tools"	"Config::Tiny"	"https://metacpan.org/pod/Config::Tiny"	"Read/Write.ini style files with as little code as possible"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Read/Write.ini style files with as little code as possible"	"true"
"Web Frameworks"	"Amon2"	"https://metacpan.org/pod/Amon2"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Web Frameworks"	"Catalyst"	"https://metacpan.org/pod/Catalyst"	"Overflowing with features. Very popular."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Overflowing with features. Very popular."	"true"
"Web Frameworks"	"Dancer"	"https://metacpan.org/pod/Dancer"	"()"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"()"	"true"
"Web Frameworks"	"Official site"	"http://perldancer.org/"	"()"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"344"	"79"	"199"	"GitHub - PerlDancer/Dancer2: Perl Dancer Next Generation (rewrite of Perl Dancer) Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 79 Star 344 Fork 199 PerlDancer/Dancer2 Code Issues 85 Pull requests 21 Wiki Pulse Graphs Perl Dancer Next Generation (rewrite of Perl Dancer) http://perldancer.org/ 3,587 commits 35 branches 65 releases Fetching contributors Perl 98.7% Other 1.3% Perl Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags PR/localize_hook_args ambs/travis-tests bugfix/preregister_route_handlers bugfix/scoping_for_404 bugfix/session_destroy dams/cleanup_plugin_code docs/from-scratch docs/tutorial feature/change_session_id feature/cleanup-error-object feature/common_middleware feature/engine_request_attr feature/logger_hooks feature/meta-irc feature/migrate_send_error feature/mixed_named_params_and_splats feature/optimize feature/plugin-commands feature/rebuilt-architecture feature/serializer-very-mutable feature/tests-by-classes feature/xs_cookies fix-spelling-in-plugin fix/eval_antipattern issue-894 master mickey/dsl_request_data plugins-yanick pr/behind_proxy_middleware pr/fixupload pr/gh-893 pr/plugin-hook-bug pr/workaround_plugin_hooks refactor/request_body_parsing yaml_dep_change Nothing to show v2.0000_01 v1.9999_02 v1.9999_01 v0.200003 v0.200002 v0.200001 v0.200000 v0.166001_04 v0.166001_03 v0.166001_02 v0.166001_01 v0.166001 v0.166000 v0.165000 v0.164000 v0.163000 v0.162000_01 v0.162000 v0.161000_01 v0.161000 v0.160003 v0.160002 v0.160001 v0.160000 v0.159003 v0.159002 v0.159001 v0.159000 v0.158000 v0.157001 v0.157000 v0.156001 v0.156000 v0.155004 v0.155003 v0.155002 v0.155001 v0.155000 v0.154000 v0.153002 v0.153001 v0.153000 v0.152000 v0.151000 v0.150000 v0.149000_02 v0.149000_01 v0.143000 v0.142000 v0.141000 v0.140900_01 v0.140001 v0.140000 v0.13 v0.12 v0.11 v0.10 v0.09 v0.08 v0.07 v0.06 v0.05 v0.04 v0.03 v0.02 Nothing to show New pull request Latest commit 51f8ba1 Jul 13, 2016 cromedome Merge branch 'docs/params-patch-1213' Permalink Failed to load latest commit information. lib Update contributors. Jul 13, 2016 script Add documentation index to dancer2 docs Jul 7, 2016 share/skel Use a table for the error stacktrace & show 5 lines of context Apr 1, 2016 t Add test supplied by SysPete Jul 7, 2016 tools fixes for the performance tool Oct 2, 2015 xt Fix spelling mistakes detected by codespell Feb 21, 2016 .gitignore ignore logs Jul 11, 2015 .perltidyrc make travis play with dzil perltidy Oct 27, 2012 .travis.yml Use Travis CIs container based infrastructure Jul 26, 2015 AUTHORS GH#452: Make a complete authors section on Dancer2: Dec 7, 2013 Changes reflect changes Jul 13, 2016 GitGuide.md Adding --no-author option to `dzil test` in GitGuide Sep 21, 2014 README.mkdn v0.200003 Jul 11, 2016 dist.ini prune t/sessions using PruneFiles dzil plugin Jul 7, 2016 README.mkdn NAME Dancer2 - Lightweight yet powerful web application framework VERSION version 0.200003 DESCRIPTION Dancer2 is the new generation of Dancer, the lightweight web-framework for Perl. Dancer2 is a complete rewrite based on Moo. Dancer2 can optionally use XS modules for speed, but at its core remains fatpackable (packable by App::FatPacker) so you could easily deploy Dancer2 applications on hosts that do not support custom CPAN modules. Dancer2 is easy and fun: use Dancer2; get '/' => sub { ""Hello World"" }; dance;  This is the main module for the Dancer2 distribution. It contains logic for creating a new Dancer2 application. You are welcome to join our mailing list. For subscription information, mail address and archives see http://lists.preshweb.co.uk/mailman/listinfo/dancer-users. We are also on IRC: #dancer on irc.perl.org. Documentation Index Documentation on Dancer2 is split into several manpages. Below is a complete outline on where to go for help. Dancer2 Tutorial If you are new to the Dancer approach, you should start by reading our Dancer2::Tutorial. Dancer2 Manual Dancer2::Manual is the reference for Dancer2. Here you will find information on the concepts of Dancer2 application development and a comprehensive reference to the Dancer2 domain specific language. Dancer2 Keywords The keywords for Dancer2 can be found under DSL Keywords. Dancer2 Deployment For configuration examples of different deployment solutions involving Dancer2 and Plack, refer to Dancer2::Manual::Deployment. Dancer2 Cookbook Specific examples of code for real-life problems and some 'tricks' for applications in Dancer can be found in Dancer2::Cookbook Dancer2 Config For configuration file details refer to Dancer2::Config. It is a complete list of all configuration options. Dancer2 Plugins Refer to Dancer2::Plugins for a partial list of available Dancer2 plugins. Note that although we try to keep this list up to date we expect plugin authors to tell us about new modules. For information on how to author a plugin, see ""Writing the plugin"" in Dancer2::Plugin. Dancer2 Migration guide Dancer2::Manual::Migration provides the most up-to-date instruction on how to convert a Dancer (1) based application to Dancer2. FUNCTIONS my $runner=runner(); Returns the current runner. It is of type Dancer2::Core::Runner. AUTHORS CORE DEVELOPERS Alberto Simões Alexis Sukrieh Damien Krotkine David Golden David Precious Franck Cuny Jason A. Crome Mickey Nasriachi Russell Jenkins Sawyer X Stefan Hornburg (Racke) Steven Humphrey Yanick Champoux  CONTRIBUTORS A. Sinan Unur Ahmad M. Zawawi Alex Beamish Alexander Karelas Alexandr Ciornii Andrew Beverley Andrew Grangaard Andrew Inishev Andrew Solomon Andy Jack Ashvini V B10m Bas Bloemsaat baynes Ben Hutton Blabos de Blebe Breno G. de Oliveira cdmalon Celogeek Cesare Gargano Charlie Gonzalez chenchen000 Chi Trinh Christian Walde Colin Kuskie cym0n Dale Gallagher Daniel Muey David Steinbrunner David Zurborg Davs Dinis Rebolo dtcyganov Erik Smit Fayland Lam Gabor Szabo geistteufel Gideon D'souza Graham Knop Gregor Herrmann Grzegorz Rożniecki Hobbestigrou Ivan Bessarabov Ivan Kruglov JaHIY Jakob Voss James Aitken James Raspass James McCoy Jason Lewis Javier Rojas Jean Stebens Jens Rehsack Joel Berger Jonathan Scott Duff Julien Fiegehenn Julio Fraire Kaitlyn Parkhurst (SYMKAT) kbeyazli Keith Broughton lbeesley Lennart Hengstmengel Ludovic Tolhurst-Cleaver Mark A. Stratman Mateu X Hunter Matt Phillips Matt S Trout Maurice Menno Blom Michael Kröll Michał Wojciechowski Mohammad S Anwar mokko Nick Patch Nick Tonkin Nikita K Nuno Carvalho Olaf Alders Olivier Mengué Omar M. Othman pants Patrick Zimmermann Pau Amma Paul Cochrane Pedro Bruno Pedro Melo Peter Mottram Philippe Bricout Ricardo Signes Rick Yakubowski Ruben Amortegui sakshee3 Sam Kington Samit Badle Shlomi Fish simbabque Slava Goltser Snigdha Tatsuhiko Miyagawa Tina Müller Tom Hukins Upasana Shukla Vernon Lyon Victor Adam Vince Willems Vincent Bachelier  AUTHOR Dancer Core Developers COPYRIGHT AND LICENSE This software is copyright (c) 2016 by Alexis Sukrieh. This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/PerlDancer/Dancer2"	"()"	"true"
"Web Frameworks"	"Dancer2"	"https://metacpan.org/pod/Dancer2"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
"Web Frameworks"	"Gantry"	"https://metacpan.org/pod/Gantry"	"Web application framework for mod_perl, cgi, etc."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Web application framework for mod_perl, cgi, etc."	"true"
"Web Frameworks"	"Kossy"	"https://metacpan.org/pod/Kossy"	"A Web framework with simple interface."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"A Web framework with simple interface."	"true"
"Web Frameworks"	"Mojolicious"	"https://metacpan.org/pod/Mojolicious"	"An all in one framework."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"An all in one framework."	"true"
"Web Frameworks"	"Poet"	"https://metacpan.org/pod/Poet"	"a modern Perl web framework for Mason developers"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"a modern Perl web framework for Mason developers"	"true"
"Middlewares"	"Gazelle"	"https://metacpan.org/pod/Gazelle"	"Preforked Plack Handler for performance freaks"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Preforked Plack Handler for performance freaks"	"true"
"Middlewares"	"Plack"	"https://metacpan.org/pod/Plack"	"PSGI server implementation and utilities for Web applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"PSGI server implementation and utilities for Web applications."	"true"
"Middlewares"	"Server::Starter"	"https://metacpan.org/pod/Server::Starter"	"Process manager with the ""graceful restart"" feature."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"239"	"35"	"145"	"GitHub - metacpan/metacpan-web: Web interface for MetaCPAN Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 239 Fork 145 metacpan/metacpan-web Code Issues 123 Pull requests 4 Pulse Graphs Web interface for MetaCPAN http://metacpan.org 2,560 commits 35 branches 2 releases 89 contributors Perl 35.6% HTML 24.6% CSS 20.5% JavaScript 14.9% Perl6 4.3% Shell 0.1% Perl HTML CSS JavaScript Perl6 Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags author-wishlist clinton/issue-281 directories_without_prefix do_not_look_at_me legacy/v0 leo/cache_3 leo/fastly_add_keys_for_caching leo/less leo/switch_css_js_to_cdn_friendly master meta-description mickey/GH1692 mo/gzip mo/settings mo/win32 oalders/carton oalders/cpancover oalders/elasticsearch-2.0 oalders/perl-critic oalders/pr/1389 oalders/recommendations oalders/tidy-js-and-css oalders/tidyall-tests omega/release-changes plu/issue-55 plu/issue-224 plu/issue-276 plu/refactor-models pr/1609 recommendations stage/bm-mc-03 stage/lw-mc-03 talina/stargazer talina/wotv1 templates Nothing to show v1.0.0 prebootstrap Nothing to show New pull request Latest commit b8f96dd Jul 12, 2016 oalders committed on GitHub Merge pull request #1747 from metacpan/mickey/use_author_links_in_tem… … …plates  use author.links in template Permalink Failed to load latest commit information. .github Issue template tweaks. Mar 7, 2016 bin Tidy purge script Jul 6, 2015 git Use carton's local::lib for pre-commit hook Jun 5, 2014 lib use local links in pod Jul 11, 2016 root use author.links in template Jul 12, 2016 t update links for new org and repo names Jun 28, 2016 .editorconfig Keep indentation consistent in travis yml Oct 15, 2014 .gitignore perltidy was complaining about .gitignore. This change satisfies perl… Sep 5, 2014 .perlcriticrc Relax criticisms as done in the api Apr 20, 2015 .perltidyrc Make perltidy consistent with api repo Feb 11, 2014 .tidyallrc Adds JS beautifier defaults. Apr 16, 2015 .travis.yml too early for 5.24 Jun 11, 2016 LICENSE License under same terms as Perl (GPL/Artistic) Jan 25, 2014 News.md update links for new org and repo names Jun 28, 2016 README.md update links for new org and repo names Jun 28, 2016 app.psgi better debugging Jun 11, 2016 cpanfile use same JSON module as API Jun 14, 2016 cpanfile.snapshot use same JSON module as API Jun 14, 2016 metacpan_web.conf The API is now HTTPS only. Jun 11, 2016 run-dev reverse proxy psgi Oct 9, 2015 static-app.psgi reverse proxy psgi Oct 9, 2015 README.md GETTING STARTED We strongly recommend using metacpan-developer, this will give you a virtual machine already configured and ready to start developing on. $ vagrant ssh $ cd $HOME/metacpan-web $ sudo service starman_metacpan-web restart  You'll find some log files in var/logs. Installing manually If you prefer not to use the VM, the following commands will get you started: commands can be converted to: $ carton install $ ./bin/prove t $ carton exec plackup -p 5001 -r  Local configuration changes The backend defaults to api.metacpan.org. Running a local API server is optional and not required to hack on the front-end. The address to the API user can be changed in the metacpan_web.conf file. Ideally you would create a new file called metacpan_web_local.conf that contains api                 http://127.0.0.1:5000 api_external        http://127.0.0.1:5000 api_secure          http://127.0.0.1:5000 api_external_secure http://127.0.0.1:5000  which will be loaded on top of the existing config file. COMPATIBILITY NOTES On Win32 (and possibly also on other platforms) when using Perl < 5.12, the server started with plackup will generate warnings relating to date parsing. These are caused by Plack due to a bug in the gmtime implementation and can be removed by upgrading to Perl 5.12. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/CPAN-API/metacpan-web"	"Process manager with the ""graceful restart"" feature."	"true"
"Middlewares"	"Starlet"	"https://metacpan.org/pod/Starlet"	"High-performance PSGI Server"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Starlet - a simple, high-performance PSGI/Plack HTTP server - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Kazuho Oku  /  0.30 (KAZUHO on 2016-06-10) 0.29 (KAZUHO on 2016-02-23) 0.28 (KAZUHO on 2015-11-05) 0.27_01 DEV (KAZUHO on 2015-10-29) 0.26 (KAZUHO on 2015-10-13) 0.25 (KAZUHO on 2015-06-29) 0.24 (KAZUHO on 2014-05-26) 0.23 (KAZUHO on 2014-04-22) 0.22 (KAZUHO on 2014-04-11) 0.21 (KAZUHO on 2013-11-25) 0.20 (KAZUHO on 2013-08-23) 0.19 (KAZUHO on 2013-06-13) 0.18 (KAZUHO on 2013-03-18) 0.17_01 DEV (KAZUHO on 2013-03-08) 0.16 (KAZUHO on 2012-09-12) 0.15 (KAZUHO on 2012-08-07) 0.14 (KAZUHO on 2011-10-31) 0.13 (KAZUHO on 2010-11-30) 0.12 (KAZUHO on 2010-11-29) 0.11 (KAZUHO on 2010-10-26) 0.10 (KAZUHO on 2010-08-17) 0.09 (KAZUHO on 2010-08-04) 0.08 (KAZUHO on 2010-03-28) 0.07 (KAZUHO on 2010-03-26) 0.06 (KAZUHO on 2010-03-26) 0.05 (KAZUHO on 2010-03-26) Starlet-0.30 14 ++ 14 ++  / Starlet 10 Jun 2016 02:18:22 GMT Module version: 0.30 Source (raw) Browse (raw) Changes Issues (9) Testers Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (108.25Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.29 (KAZUHO on 2016-02-23) 0.28 (KAZUHO on 2015-11-05) 0.27_01 DEV (KAZUHO on 2015-10-29) 0.26 (KAZUHO on 2015-10-13) 0.25 (KAZUHO on 2015-06-29) 0.24 (KAZUHO on 2014-05-26) 0.23 (KAZUHO on 2014-04-22) 0.22 (KAZUHO on 2014-04-11) 0.21 (KAZUHO on 2013-11-25) 0.20 (KAZUHO on 2013-08-23) 0.19 (KAZUHO on 2013-06-13) 0.18 (KAZUHO on 2013-03-18) 0.17_01 DEV (KAZUHO on 2013-03-08) 0.16 (KAZUHO on 2012-09-12) 0.15 (KAZUHO on 2012-08-07) 0.14 (KAZUHO on 2011-10-31) 0.13 (KAZUHO on 2010-11-30) 0.12 (KAZUHO on 2010-11-29) 0.11 (KAZUHO on 2010-10-26) 0.10 (KAZUHO on 2010-08-17) 0.09 (KAZUHO on 2010-08-04) 0.08 (KAZUHO on 2010-03-28) 0.07 (KAZUHO on 2010-03-26) 0.06 (KAZUHO on 2010-03-26) 0.05 (KAZUHO on 2010-03-26) Diff with version 0.29 (KAZUHO on 2016-02-23) 0.28 (KAZUHO on 2015-11-05) 0.27_01 DEV (KAZUHO on 2015-10-29) 0.26 (KAZUHO on 2015-10-13) 0.25 (KAZUHO on 2015-06-29) 0.24 (KAZUHO on 2014-05-26) 0.23 (KAZUHO on 2014-04-22) 0.22 (KAZUHO on 2014-04-11) 0.21 (KAZUHO on 2013-11-25) 0.20 (KAZUHO on 2013-08-23) 0.19 (KAZUHO on 2013-06-13) 0.18 (KAZUHO on 2013-03-18) 0.17_01 DEV (KAZUHO on 2013-03-08) 0.16 (KAZUHO on 2012-09-12) 0.15 (KAZUHO on 2012-08-07) 0.14 (KAZUHO on 2011-10-31) 0.13 (KAZUHO on 2010-11-30) 0.12 (KAZUHO on 2010-11-29) 0.11 (KAZUHO on 2010-10-26) 0.10 (KAZUHO on 2010-08-17) 0.09 (KAZUHO on 2010-08-04) 0.08 (KAZUHO on 2010-03-28) 0.07 (KAZUHO on 2010-03-26) 0.06 (KAZUHO on 2010-03-26) 0.05 (KAZUHO on 2010-03-26) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 9 PAUSE users 5 non-PAUSE users. KAZUHO Kazuho Oku Dependencies Parallel::Prefork Plack Server::Starter and possibly others CPAN Testers List Reverse dependencies Dependency graph × Starlet-0.30 NAME SYNOPSIS DESCRIPTION COMMAND LINE OPTIONS --max-workers=# --timeout=# --keepalive-timeout=# --max-keepalive-reqs=# --max-reqs-per-child=# --min-reqs-per-child=# --spawn-interval=# --child-exit=s NOTES SEE ALSO AUTHOR LICENSE NAME Starlet - a simple, high-performance PSGI/Plack HTTP server SYNOPSIS   % start_server --port=80 -- plackup -s Starlet [options] your-app.psgi    or if you do not need hot deploy,    % plackup -s Starlet --port=80 [options] your-app.psgi DESCRIPTION Starlet is a standalone HTTP/1.1 web server, formerly known as Plack::Server::Standalone::Prefork and Plack::Server::Standalone::Prefork::Server::Starter. The server supports following features, and is suitable for running HTTP application servers behind a reverse proxy. - prefork and graceful shutdown using Parallel::Prefork - hot deploy using Server::Starter - fast HTTP processing using HTTP::Parser::XS (optional) COMMAND LINE OPTIONS In addition to the options supported by plackup, Starlet accepts following options(s). --max-workers=# number of worker processes (default: 10) --timeout=# seconds until timeout (default: 300) --keepalive-timeout=# timeout for persistent connections (default: 2) --max-keepalive-reqs=# max. number of requests allowed per single persistent connection. If set to one, persistent connections are disabled (default: 1) --max-reqs-per-child=# max. number of requests to be handled before a worker process exits (default: 100) --min-reqs-per-child=# if set, randomizes the number of requests handled by a single worker process between the value and that supplied by --max-reqs-per-chlid (default: none) --spawn-interval=# if set, worker processes will not be spawned more than once than every given seconds. Also, when SIGHUP is being received, no more than one worker processes will be collected every given seconds. This feature is useful for doing a ""slow-restart"". See http://blog.kazuhooku.com/2011/04/web-serverstarter-parallelprefork.html for more information. (default: none) --child-exit=s the subroutine code to be executed right before a child process exits. e.g. --child-exit='sub { POSIX::_exit(0) }'. (default: none) NOTES Starlet is designed and implemented to be simple, secure and fast, especially for running as an HTTP application server running behind a reverse proxy. It only depends on a minimal number of well-designed (and well-focused) modules. SEE ALSO Parallel::Prefork Starman Server::Starter AUTHOR Kazuho Oku miyagawa kazeburo Tomohiro Takezawa LICENSE This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself. See http://www.perl.com/perl/misc/Artistic.html × Module Install Instructions To install Starlet, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Starlet CPAN shell                      perl -MCPAN -e shell                     install Starlet For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"High-performance PSGI Server"	"true"
"Middlewares"	"Starman"	"https://metacpan.org/pod/Starman"	"High-performance preforking PSGI/Plack web server"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Starman - High-performance preforking PSGI/Plack web server - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Tatsuhiko Miyagawa  /  0.4014 (MIYAGAWA on 2015-06-03) 0.4013 (MIYAGAWA on 2015-05-14) 0.4012 (MIYAGAWA on 2015-05-14) 0.4011 (MIYAGAWA on 2014-11-11) 0.4010 (MIYAGAWA on 2014-08-22) 0.4009 (MIYAGAWA on 2014-04-03) 0.4008 (MIYAGAWA on 2013-09-09) 0.4007 DEV (MIYAGAWA on 2013-09-03) 0.4006 (MIYAGAWA on 2013-08-16) 0.4005 DEV (MIYAGAWA on 2013-08-14) 0.4004 (MIYAGAWA on 2013-08-12) 0.4003 (MIYAGAWA on 2013-08-08) 0.4002 (MIYAGAWA on 2013-08-08) 0.4001 (MIYAGAWA on 2013-07-30) 0.4000 (MIYAGAWA on 2013-07-29) 0.3014 (MIYAGAWA on 2013-06-16) 0.3013 (MIYAGAWA on 2013-06-13) 0.3012 (MIYAGAWA on 2013-06-12) 0.3011 (MIYAGAWA on 2013-04-25) 0.3010 (MIYAGAWA on 2013-04-24) 0.3009 (MIYAGAWA on 2013-04-24) 0.3008 (MIYAGAWA on 2013-04-07) 0.3007 (MIYAGAWA on 2013-03-28) 0.3006 (MIYAGAWA on 2012-12-19) 0.3005 (MIYAGAWA on 2012-11-15) 0.3004 (MIYAGAWA on 2012-11-09) 0.3003 (MIYAGAWA on 2012-09-27) 0.3002 (MIYAGAWA on 2012-09-25) 0.3001 (MIYAGAWA on 2012-06-25) 0.3000 (MIYAGAWA on 2012-02-21) 0.29_90 DEV (MIYAGAWA on 2011-12-02) 0.2014 (MIYAGAWA on 2011-09-18) 0.2013 (MIYAGAWA on 2011-06-25) 0.2012 (MIYAGAWA on 2011-06-22) 0.2011 (MIYAGAWA on 2011-05-24) 0.2010 (MIYAGAWA on 2011-03-28) 0.2009 (MIYAGAWA on 2011-03-26) 0.2008_2 DEV (MIYAGAWA on 2011-03-03) 0.2008_1 DEV (MIYAGAWA on 2011-02-23) 0.2008 (MIYAGAWA on 2011-02-15) 0.2007 (MIYAGAWA on 2010-09-30) 0.2006 (MIYAGAWA on 2010-07-03) 0.2005 (MIYAGAWA on 2010-07-03) 0.2004 (MIYAGAWA on 2010-04-20) 0.2003 (MIYAGAWA on 2010-04-19) 0.2002 (MIYAGAWA on 2010-04-18) 0.2001 (MIYAGAWA on 2010-04-14) 0.2000 (MIYAGAWA on 2010-04-14) 0.1007 (MIYAGAWA on 2010-04-14) 0.1006 (MIYAGAWA on 2010-04-12) 0.1005 (MIYAGAWA on 2010-03-28) 0.1004 (MIYAGAWA on 2010-03-28) 0.1003 (MIYAGAWA on 2010-03-22) 0.1002 (MIYAGAWA on 2010-03-10) 0.1001 (MIYAGAWA on 2010-02-27) 0.1000 (MIYAGAWA on 2010-02-16) Starman-0.4014 85 ++ 85 ++  / Starman 03 Jun 2015 19:02:12 GMT Module version: 0.4014 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues 5 (2 reviews) Testers (2020 / 9 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (28.32Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.4013 (MIYAGAWA on 2015-05-14) 0.4012 (MIYAGAWA on 2015-05-14) 0.4011 (MIYAGAWA on 2014-11-11) 0.4010 (MIYAGAWA on 2014-08-22) 0.4009 (MIYAGAWA on 2014-04-03) 0.4008 (MIYAGAWA on 2013-09-09) 0.4007 DEV (MIYAGAWA on 2013-09-03) 0.4006 (MIYAGAWA on 2013-08-16) 0.4005 DEV (MIYAGAWA on 2013-08-14) 0.4004 (MIYAGAWA on 2013-08-12) 0.4003 (MIYAGAWA on 2013-08-08) 0.4002 (MIYAGAWA on 2013-08-08) 0.4001 (MIYAGAWA on 2013-07-30) 0.4000 (MIYAGAWA on 2013-07-29) 0.3014 (MIYAGAWA on 2013-06-16) 0.3013 (MIYAGAWA on 2013-06-13) 0.3012 (MIYAGAWA on 2013-06-12) 0.3011 (MIYAGAWA on 2013-04-25) 0.3010 (MIYAGAWA on 2013-04-24) 0.3009 (MIYAGAWA on 2013-04-24) 0.3008 (MIYAGAWA on 2013-04-07) 0.3007 (MIYAGAWA on 2013-03-28) 0.3006 (MIYAGAWA on 2012-12-19) 0.3005 (MIYAGAWA on 2012-11-15) 0.3004 (MIYAGAWA on 2012-11-09) 0.3003 (MIYAGAWA on 2012-09-27) 0.3002 (MIYAGAWA on 2012-09-25) 0.3001 (MIYAGAWA on 2012-06-25) 0.3000 (MIYAGAWA on 2012-02-21) 0.29_90 DEV (MIYAGAWA on 2011-12-02) 0.2014 (MIYAGAWA on 2011-09-18) 0.2013 (MIYAGAWA on 2011-06-25) 0.2012 (MIYAGAWA on 2011-06-22) 0.2011 (MIYAGAWA on 2011-05-24) 0.2010 (MIYAGAWA on 2011-03-28) 0.2009 (MIYAGAWA on 2011-03-26) 0.2008_2 DEV (MIYAGAWA on 2011-03-03) 0.2008_1 DEV (MIYAGAWA on 2011-02-23) 0.2008 (MIYAGAWA on 2011-02-15) 0.2007 (MIYAGAWA on 2010-09-30) 0.2006 (MIYAGAWA on 2010-07-03) 0.2005 (MIYAGAWA on 2010-07-03) 0.2004 (MIYAGAWA on 2010-04-20) 0.2003 (MIYAGAWA on 2010-04-19) 0.2002 (MIYAGAWA on 2010-04-18) 0.2001 (MIYAGAWA on 2010-04-14) 0.2000 (MIYAGAWA on 2010-04-14) 0.1007 (MIYAGAWA on 2010-04-14) 0.1006 (MIYAGAWA on 2010-04-12) 0.1005 (MIYAGAWA on 2010-03-28) 0.1004 (MIYAGAWA on 2010-03-28) 0.1003 (MIYAGAWA on 2010-03-22) 0.1002 (MIYAGAWA on 2010-03-10) 0.1001 (MIYAGAWA on 2010-02-27) 0.1000 (MIYAGAWA on 2010-02-16) Diff with version 0.4013 (MIYAGAWA on 2015-05-14) 0.4012 (MIYAGAWA on 2015-05-14) 0.4011 (MIYAGAWA on 2014-11-11) 0.4010 (MIYAGAWA on 2014-08-22) 0.4009 (MIYAGAWA on 2014-04-03) 0.4008 (MIYAGAWA on 2013-09-09) 0.4007 DEV (MIYAGAWA on 2013-09-03) 0.4006 (MIYAGAWA on 2013-08-16) 0.4005 DEV (MIYAGAWA on 2013-08-14) 0.4004 (MIYAGAWA on 2013-08-12) 0.4003 (MIYAGAWA on 2013-08-08) 0.4002 (MIYAGAWA on 2013-08-08) 0.4001 (MIYAGAWA on 2013-07-30) 0.4000 (MIYAGAWA on 2013-07-29) 0.3014 (MIYAGAWA on 2013-06-16) 0.3013 (MIYAGAWA on 2013-06-13) 0.3012 (MIYAGAWA on 2013-06-12) 0.3011 (MIYAGAWA on 2013-04-25) 0.3010 (MIYAGAWA on 2013-04-24) 0.3009 (MIYAGAWA on 2013-04-24) 0.3008 (MIYAGAWA on 2013-04-07) 0.3007 (MIYAGAWA on 2013-03-28) 0.3006 (MIYAGAWA on 2012-12-19) 0.3005 (MIYAGAWA on 2012-11-15) 0.3004 (MIYAGAWA on 2012-11-09) 0.3003 (MIYAGAWA on 2012-09-27) 0.3002 (MIYAGAWA on 2012-09-25) 0.3001 (MIYAGAWA on 2012-06-25) 0.3000 (MIYAGAWA on 2012-02-21) 0.29_90 DEV (MIYAGAWA on 2011-12-02) 0.2014 (MIYAGAWA on 2011-09-18) 0.2013 (MIYAGAWA on 2011-06-25) 0.2012 (MIYAGAWA on 2011-06-22) 0.2011 (MIYAGAWA on 2011-05-24) 0.2010 (MIYAGAWA on 2011-03-28) 0.2009 (MIYAGAWA on 2011-03-26) 0.2008_2 DEV (MIYAGAWA on 2011-03-03) 0.2008_1 DEV (MIYAGAWA on 2011-02-23) 0.2008 (MIYAGAWA on 2011-02-15) 0.2007 (MIYAGAWA on 2010-09-30) 0.2006 (MIYAGAWA on 2010-07-03) 0.2005 (MIYAGAWA on 2010-07-03) 0.2004 (MIYAGAWA on 2010-04-20) 0.2003 (MIYAGAWA on 2010-04-19) 0.2002 (MIYAGAWA on 2010-04-18) 0.2001 (MIYAGAWA on 2010-04-14) 0.2000 (MIYAGAWA on 2010-04-14) 0.1007 (MIYAGAWA on 2010-04-14) 0.1006 (MIYAGAWA on 2010-04-12) 0.1005 (MIYAGAWA on 2010-03-28) 0.1004 (MIYAGAWA on 2010-03-28) 0.1003 (MIYAGAWA on 2010-03-22) 0.1002 (MIYAGAWA on 2010-03-10) 0.1001 (MIYAGAWA on 2010-02-27) 0.1000 (MIYAGAWA on 2010-02-16) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 54 PAUSE users 31 non-PAUSE users. MIYAGAWA Tatsuhiko Miyagawa and 24 contributors show them Adam Guthrie Alex Vandiver Andrew Nelson Aristotle Pagaltzis Audrey Tang Chia-liang Kao cho45 David Steinbrunner Graham Barr Grant McLean Gregory Oschwald Jeremy Krieg John Siracusa Leon Brocard Masahiro Nagano Olaf Alders Paulo E. Castro Perlover Peter Makholm Piotr Roszatycki Robert Sedlacek Slobodan Mišković spleenjack Tim Bunce Dependencies Data::Dump HTTP::Date HTTP::Parser::XS HTTP::Status Net::Server parent Plack Test::TCP CPAN Testers List Reverse dependencies Dependency graph × Starman-0.4014 NAME SYNOPSIS DESCRIPTION PERFORMANCE NOTES AUTHOR COPYRIGHT LICENSE SEE ALSO NAME Starman - High-performance preforking PSGI/Plack web server SYNOPSIS   # Run app.psgi with the default settings   > starman    # run with Server::Starter   > start_server --port 127.0.0.1:80 -- starman --workers 32 myapp.psgi    # UNIX domain sockets   > starman --listen /tmp/starman.sock Read more options and configurations by running `perldoc starman` (lower-case s). DESCRIPTION Starman is a PSGI perl web server that has unique features such as: High Performance Uses the fast XS/C HTTP header parser Preforking Spawns workers preforked like most high performance UNIX servers do. Starman also reaps dead children and automatically restarts the worker pool. Signals Supports HUP for graceful worker restarts, and TTIN/TTOU to dynamically increase or decrease the number of worker processes, as well as QUIT to gracefully shutdown the worker processes. Superdaemon aware Supports Server::Starter for hot deploy and graceful restarts. Multiple interfaces and UNIX Domain Socket support Able to listen on multiple interfaces including UNIX sockets. Small memory footprint Preloading the applications with --preload-app command line option enables copy-on-write friendly memory management. Also, the minimum memory usage Starman requires for the master process is 7MB and children (workers) is less than 3.0MB. PSGI compatible Can run any PSGI applications and frameworks HTTP/1.1 support Supports chunked requests and responses, keep-alive and pipeline requests. UNIX only This server does not support Win32. PERFORMANCE Here's a simple benchmark using Hello.psgi.   -- server: Starman (workers=10)   Requests per second:    6849.16 [#/sec] (mean)   -- server: Twiggy   Requests per second:    3911.78 [#/sec] (mean)   -- server: AnyEvent::HTTPD   Requests per second:    2738.49 [#/sec] (mean)   -- server: HTTP::Server::PSGI   Requests per second:    2218.16 [#/sec] (mean)   -- server: HTTP::Server::PSGI (workers=10)   Requests per second:    2792.99 [#/sec] (mean)   -- server: HTTP::Server::Simple   Requests per second:    1435.50 [#/sec] (mean)   -- server: Corona   Requests per second:    2332.00 [#/sec] (mean)   -- server: POE   Requests per second:    503.59 [#/sec] (mean) This benchmark was processed with ab -c 10 -t 1 -k on MacBook Pro 13"" late 2009 model on Mac OS X 10.6.2 with perl 5.10.0. YMMV. NOTES Because Starman runs as a preforking model, it is not recommended to serve the requests directly from the internet, especially when slow requesting clients are taken into consideration. It is suggested to put Starman workers behind the frontend servers such as nginx, and use HTTP proxy with TCP or UNIX sockets. AUTHOR Tatsuhiko Miyagawa <miyagawa@bulknews.net> Andy Grundman wrote Catalyst::Engine::HTTP::Prefork, which this module is heavily based on. Kazuho Oku wrote Net::Server::SS::PreFork that makes it easy to add Server::Starter support to this software. COPYRIGHT Tatsuhiko Miyagawa, 2010- LICENSE This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself. SEE ALSO Plack Catalyst::Engine::HTTP::Prefork Net::Server::PreFork × Module Install Instructions To install Starman, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Starman CPAN shell                      perl -MCPAN -e shell                     install Starman For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"High-performance preforking PSGI/Plack web server"	"true"
"Middlewares"	"Twiggy"	"https://metacpan.org/pod/Twiggy"	"Event-driven PSGI application server"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Twiggy - AnyEvent HTTP server for PSGI (like Thin) - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Tatsuhiko Miyagawa  /  0.1025 (MIYAGAWA on 2015-01-03) 0.1024 (MIYAGAWA on 2013-10-12) 0.1023 (MIYAGAWA on 2013-06-15) 0.1022 (MIYAGAWA on 2013-06-12) 0.1021 (MIYAGAWA on 2012-10-19) 0.1020 (MIYAGAWA on 2012-02-21) 0.1010 (MIYAGAWA on 2011-01-18) 0.1009 (MIYAGAWA on 2010-12-03) 0.1008 (MIYAGAWA on 2010-10-01) 0.1007 (MIYAGAWA on 2010-09-10) 0.1006 (MIYAGAWA on 2010-08-09) 0.1005 (MIYAGAWA on 2010-03-28) 0.1004 (MIYAGAWA on 2010-02-18) 0.1003 (MIYAGAWA on 2010-02-18) 0.1002 (MIYAGAWA on 2010-02-16) 0.1001 (MIYAGAWA on 2010-02-16) 0.1000 (MIYAGAWA on 2010-02-16) Twiggy-0.1025 18 ++ 18 ++  / Twiggy 03 Jan 2015 22:00:40 GMT Module version: 0.1025 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues Testers (1456 / 86 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (60.63Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.1024 (MIYAGAWA on 2013-10-12) 0.1023 (MIYAGAWA on 2013-06-15) 0.1022 (MIYAGAWA on 2013-06-12) 0.1021 (MIYAGAWA on 2012-10-19) 0.1020 (MIYAGAWA on 2012-02-21) 0.1010 (MIYAGAWA on 2011-01-18) 0.1009 (MIYAGAWA on 2010-12-03) 0.1008 (MIYAGAWA on 2010-10-01) 0.1007 (MIYAGAWA on 2010-09-10) 0.1006 (MIYAGAWA on 2010-08-09) 0.1005 (MIYAGAWA on 2010-03-28) 0.1004 (MIYAGAWA on 2010-02-18) 0.1003 (MIYAGAWA on 2010-02-18) 0.1002 (MIYAGAWA on 2010-02-16) 0.1001 (MIYAGAWA on 2010-02-16) 0.1000 (MIYAGAWA on 2010-02-16) Diff with version 0.1024 (MIYAGAWA on 2013-10-12) 0.1023 (MIYAGAWA on 2013-06-15) 0.1022 (MIYAGAWA on 2013-06-12) 0.1021 (MIYAGAWA on 2012-10-19) 0.1020 (MIYAGAWA on 2012-02-21) 0.1010 (MIYAGAWA on 2011-01-18) 0.1009 (MIYAGAWA on 2010-12-03) 0.1008 (MIYAGAWA on 2010-10-01) 0.1007 (MIYAGAWA on 2010-09-10) 0.1006 (MIYAGAWA on 2010-08-09) 0.1005 (MIYAGAWA on 2010-03-28) 0.1004 (MIYAGAWA on 2010-02-18) 0.1003 (MIYAGAWA on 2010-02-18) 0.1002 (MIYAGAWA on 2010-02-16) 0.1001 (MIYAGAWA on 2010-02-16) 0.1000 (MIYAGAWA on 2010-02-16) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 11 PAUSE users 7 non-PAUSE users. MIYAGAWA Tatsuhiko Miyagawa and 13 contributors show them Adam Thomason Chia-liang Kao Kazuho Oku Moritz Onken Pedro Melo Rob Hoelz Sergey Zasenko Tomas Doran (t0m) Yuval Kogman hidekiy lestrrat maedama moznion Dependencies AnyEvent HTTP::Status Plack Try::Tiny CPAN Testers List Reverse dependencies Dependency graph × Twiggy-0.1025 NAME SYNOPSIS DESCRIPTION ENVIRONMENT NAMING Twiggy? Why the cute name instead of more descriptive namespace? Are you on drugs? LICENSE AUTHOR SEE ALSO NAME Twiggy - AnyEvent HTTP server for PSGI (like Thin) SYNOPSIS   twiggy --listen :8080 See twiggy -h for more details.   use Twiggy::Server;    my $server = Twiggy::Server->new(       host => $host,       port => $port,   );   $server->register_service($app);    AE::cv->recv; DESCRIPTION Twiggy is a lightweight and fast HTTP server with unique features such as: PSGI Can run any PSGI applications. Fully supports psgi.nonblocking and psgi.streaming interfaces. AnyEvent This server uses AnyEvent and runs in a non-blocking event loop, so it's best to run event-driven web applications that runs I/O bound jobs or delayed responses such as long-poll, WebSocket or streaming content (server push). This software used to be called Plack::Server::AnyEvent but was renamed to Twiggy. See ""NAMING"" for details. Fast header parser Uses XS/C based HTTP header parser for the best performance. (optional, install the HTTP::Parser::XS module to enable it; see also Plack::HTTPParser for more information). Lightweight and Fast The memory required to run twiggy is 6MB and it can serve more than 4500 req/s with a single process on Perl 5.10 with MacBook Pro 13"" late 2009. Superdaemon aware Supports Server::Starter for hot deploy and graceful restarts. To use it, instead of the usual:     plackup --server Twiggy --port 8111 app.psgi install Server::Starter and use:     start_server --port 8111 plackup --server Twiggy app.psgi ENVIRONMENT The following environment variables are supported. TWIGGY_DEBUG Set to true to enable debug messages from Twiggy. NAMING Twiggy? Because it is like Thin, Ruby's Rack web server using EventMachine. You know, Twiggy is thin :) Why the cute name instead of more descriptive namespace? Are you on drugs? I'm sick of naming Perl software like HTTP::Server::PSGI::How::Its::Written::With::What::Module and people call it HSPHIWWWM on IRC. It's hard to say on speeches and newbies would ask questions what they stand for every day. That's crazy. This module actually includes the longer alias and an empty subclass AnyEvent::Server::PSGI for those who like to type more ::'s. It would actually help you find this software by searching for PSGI Server AnyEvent on CPAN, which i believe is a good thing. Yes, maybe I'm on drugs. We'll see. LICENSE This module is licensed under the same terms as Perl itself. AUTHOR Tatsuhiko Miyagawa Tokuhiro Matsuno Yuval Kogman Hideki Yamamura Daisuke Maki SEE ALSO Plack AnyEvent Tatsumaki × Module Install Instructions To install Twiggy, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Twiggy CPAN shell                      perl -MCPAN -e shell                     install Twiggy For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Event-driven PSGI application server"	"true"
"Web Frameworks-Like"	"Embperl"	"https://metacpan.org/pod/Embperl"	"Building dynamic Websites with Perl (sort of like Perl crossed with PHP)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Embperl - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Gerald Richter  /  v2.5.0 (GRICHTER on 2014-04-16) 2.4.0 (GRICHTER on 2010-10-04) 2.3.0 (GRICHTER on 2007-09-29) 2.2.0 (GRICHTER on 2006-04-08) 2.1.0 (GRICHTER on 2005-11-15) 2.0.1 (GRICHTER on 2005-10-03) 2.0.0 (GRICHTER on 2005-08-14) 2.0rc5 (GRICHTER on 2005-08-07) 2.0rc4 (GRICHTER on 2005-06-21) 2.0rc3 (GRICHTER on 2005-03-14) 2.0rc2 (GRICHTER on 2004-11-21) 2.0rc1 (GRICHTER on 2004-08-24) 2.0b10 (GRICHTER on 2004-03-15) 2.0b10 (GRICHTER on 2004-01-23) 2.09 (GRICHTER on 2003-06-10) 2.08 (GRICHTER on 2002-06-25) 2.07 (GRICHTER on 2002-03-21) 2.06 (GRICHTER on 2002-03-13) Embperl-2.5.0 1 ++ 1 ++  / Embperl 16 Apr 2014 18:33:32 GMT Module version: 2.5.0 Source (raw) Browse (raw) Changes Issues (8) 5 (1 review) Testers (37 / 31 / 0) Kwalitee License: unknown Activity 24 month Tools MOBI | EPUB Download (768.94Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 2.4.0 (GRICHTER on 2010-10-04) 2.3.0 (GRICHTER on 2007-09-29) 2.2.0 (GRICHTER on 2006-04-08) 2.1.0 (GRICHTER on 2005-11-15) 2.0.1 (GRICHTER on 2005-10-03) 2.0.0 (GRICHTER on 2005-08-14) 2.0rc5 (GRICHTER on 2005-08-07) 2.0rc4 (GRICHTER on 2005-06-21) 2.0rc3 (GRICHTER on 2005-03-14) 2.0rc2 (GRICHTER on 2004-11-21) 2.0rc1 (GRICHTER on 2004-08-24) 2.0b10 (GRICHTER on 2004-03-15) 2.0b10 (GRICHTER on 2004-01-23) 2.09 (GRICHTER on 2003-06-10) 2.08 (GRICHTER on 2002-06-25) 2.07 (GRICHTER on 2002-03-21) 2.06 (GRICHTER on 2002-03-13) Diff with version 2.4.0 (GRICHTER on 2010-10-04) 2.3.0 (GRICHTER on 2007-09-29) 2.2.0 (GRICHTER on 2006-04-08) 2.1.0 (GRICHTER on 2005-11-15) 2.0.1 (GRICHTER on 2005-10-03) 2.0.0 (GRICHTER on 2005-08-14) 2.0rc5 (GRICHTER on 2005-08-07) 2.0rc4 (GRICHTER on 2005-06-21) 2.0rc3 (GRICHTER on 2005-03-14) 2.0rc2 (GRICHTER on 2004-11-21) 2.0rc1 (GRICHTER on 2004-08-24) 2.0b10 (GRICHTER on 2004-03-15) 2.0b10 (GRICHTER on 2004-01-23) 2.09 (GRICHTER on 2003-06-10) 2.08 (GRICHTER on 2002-06-25) 2.07 (GRICHTER on 2002-03-21) 2.06 (GRICHTER on 2002-03-13) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 1 PAUSE user GRICHTER Gerald Richter and 1 contributors show them Gerald Richter <richter at embperl dot org> Dependencies File::Spec and possibly others CPAN Testers List Reverse dependencies Dependency graph × Embperl-2.5.0 NAME SYNOPSIS DESCRIPTION SYNTAX [+ Perl code +] [- Perl code -] [! Perl Code !] [* Perl code *] [# Some Text #] (Comments) [= =] (Internationalisation) [$ Cmd Arg $] (Meta-Commands) HTML Tags Variable scope and cleanup Predefined variables %ENV $epreq $epapp %fdat @ffld %idat %udat (only 1.2b1 or higher) %mdat (only 1.2b2 or higher) $row, $col $maxrow, $maxcol $cnt $tabmode $escmode $req_rec LOG OUT @param %http_headers_out (only 1.2b10 and above) $optXXX $dbgXXX %CLEANUP %CLEANUPFILE (1.2b6+) Session handling Functions/Methods for session handling Embperl::Req::SetupSession ($req_rec, $uid, $sid, $app_param) [1.3b6+] Embperl::Req::GetSession / $r -> GetSession [1.3b6+] Embperl::Req::CleanupSession ($req_rec, $app_param) [1.3b6+] Embperl::Req::DeleteSession / $r -> DeleteSession [1.3b6+] Embperl::Req::RefreshSession / $r -> RefreshSession [1.3b6+] Embperl::Req::SetSessionCookie ($req_rec, $app_param) [1.3b7+] Recipes XML, XSLT Form Validation Caching Internationalisation (I18N) Encoding/UTF-8 Error trapping Utility Functions MailFormTo($MailTo, $Subject, $ReturnField) exit Performance Bugs Compatibility on Linux 2.x/3.x with on Windows NT 4.0 with on Windows 95/98 with Support Feedback and Bug Reports Commerical Support How to Support the Development of Embperl Links and Download Information Download SVN Syntaxmodes for various editors Emacs VIM Dreamweaver AUTHOR SEE ALSO NAME Embperl - Building dynamic Websites with Perl SYNOPSIS For a list of available Embperl documentation please view Embperl::TOC with perldoc(1) or man(1). If Embperl is not yet installed, have a look at perldoc TOC.pod in the distribution archive. DESCRIPTION Embperl is a framework for building websites with Perl. For the beginner it's any easy to setup and use way of embedding Perl code in HTML pages. It delivers several features that ease the task of creating a websites, including dynamic tables, formfield-processing, escaping/unescaping, session handling, caching and more. If your demands grows it gives you the power to make your Web site object-oriented and build it out of small reusable components. If you don't like the idea of mixing up all your layout and code Embperl supports separating it in different objects (e.g. createing an MVC application). Of course Embperl doesn't ties you to HTML, it allows components to be from different source formats (e.g. HTML, WML, XML, POD, ...) and if necessary transforms it (for example via XSLT) to other output formats. This is achieved by diving the output generation in small steps, where each is processed by a plugable provider. Advanced user can create their own syntax definitions (for example tag libraries) and extent Embperl by writing their own providers and much more IMPORTANT: This document describes the syntax and several features of Embperl. Please read also perldoc Config.pod, which describes how to configure Embperl and how to access the different Embperl objects and their data. Also take a look at perldoc Embperl::Object to learn how to use Embperl page as objects. Additionally there are a few introductions documents should consider to read: Intro.pod, IntroEmbperl2.pod and IntroEmbperlObject.pod. SYNTAX Embperl understands two categories of commands. The first one are special Embperl commands, and the second category consists of some HTML tags which can trigger special processing. Embperl commands can span multiple lines and need not start or end at a line boundary. Before the special Embperl commands are processed, and for the VALUE attribute of the INPUT tag (see below), all HTML tags are removed and special HTML characters are translated to their ASCII values (e.g., `&lt;' is translated to `<'). You can avoid this behavior by preceding the special character or HTML tag with a backslash. This is done in case your favorite (WYSIWYG) HTML editor inserts tags like line breaks or formatting into your Embperl commands where you don't want them. All Embperl commands start with a `[' and end with a `]'. To get a real `[' you must enter `[['. Embperl does not use SGML comments (i.e., <! ... !> or similar things) because some HTML editors can't create them, or it's much more complicated. Since every HTML editor takes (or should take) `[' and `]' as normal text, there should be no problem. [+ Perl code +] Replace the command with the result you get from evaluating the Perl code. The Perl code can be anything which can be used as an argument to a Perl eval statement. (See ""(Safe-)Namespaces and opcode restrictions"" below for restrictions.) Examples:  [+ $a +]        Replaces the [+ $a +] with the content of                  the variable $a   [+ $a+1 +]      (Any expression can be used)   [+ $x[$i] +]    (Arrays, hashes, and more complex                  expressions work) NOTE: Whitespace is ignored. The output will be automatically HTML-escaped (e.g., `<' is translated to `&lt;') depending on the value of the variables $escmode. You do not have to worry about it. [- Perl code -] Executes the Perl code, but deletes the whole command from the HTML output. Examples:  [- $a=1 -]            Set the variable $a to one.                        No output will be generated.   [- use SomeModule ;  -]  You can use other modules. NOTE the semicolon!   [- $i=0; while ($i<5) {$i++} -]  Even more complex                                   statements or multiple                                   statements are possible. NOTE: Statements like if, while, for, etc., must be contained in a single Embperl command. You cannot have the if in one command block and the terminating `}' or else in another. NOTE: To define subroutines, use ""[! Perl Code !]"" (see below) instead of [- ... -] to avoid recompilation of the subroutine on every request. [! Perl Code !] Same as [- Perl Code -] with the exception that the code is only executed at the first request. This could be used to define subroutines, or do one-time initialization. [* Perl code *] (only version 1.2b2 or higher) EXPERIMENTAL! This is similar to [- Perl Code -]. The main difference is, while [- Perl Code -] always has its own scope, all [* Perl code *] blocks runs in the same scope. This allows you to define ""local"" variables with a scope of the whole page. Normally, you don't need to use local, because Embperl takes care of separate namespaces of different documents and cleanup after the request is finished, but in special cases it's necessary. For example, if you want to recursively call an Embperl document via Execute. There is a second reason to use the [* Perl code *] instead of the [- Perl Code -]. If you like to use perl's control structures. Perl's if, while, for etc. can not span mulitple [- Perl Code -] blocks, but it can span multiple [* Perl Code *].   Example:    [* foreach $i (1..10) { *]          [- $a = $i + 5 -]     loop count + 5 = [+ $a +] <br>    [* } *]    The following B<won't> work:    [- foreach $i (1..10) { -]     some text here <br>   [- } -] The same can be done with Embperl meta commands (see below)   [$ foreach $i (1..10) $]          [- $a = $i + 5 -]     loop count + 5 = [+ $a +] <br>    [$ endforeach $] NOTE 1: [* ... *] blocks _must_ always end with a ;,{ or } NOTE 2: [* ... *] cannot apear inside a html tag that is interpreted by Embperl (unless you disable the interpretation of such tags like table, input etc.) NOTE 3: There are still benefits of using [- ... -] and metacommands: - much better debugging in the log file. - no restriction on where they can be used. You can use them anywhere; even inside html tags that are interpreted by Embperl. [# Some Text #] (Comments) (only version 1.2b2 or higher) This is a comment block. Everything between the [# and the #] will be removed from the output. NOTE 1: The [* ... *] blocks are interpreted before the comment block, so they are executed also inside a comment. NOTE 2: Everything (except [* ... *]) is really removed from the source, so you can also use the [# ... #] block to take a part out of your document. [= =] (Internationalisation) Defines a string which should be translated into a local language. See Internationalisation (I18N) for details. [$ Cmd Arg $] (Meta-Commands) Execute an Embperl metacommand. Cmd can be one of the following. (Arg varies depending on <Cmd>). if, elsif, else, endif Everything following the if metacommand until the else, elsif, or endif is only output if the Perl expression given in Arg is true. else and elsif work similarly. Example:  [$ if $ENV{REQUEST_METHOD} eq 'GET' $]  Method was GET<BR>  [$ else $]  Method other than GET used<BR>  [$ endif $] This will send one of the two sentences to the client, depending on the request method used to retrieve the document. while, endwhile Executes a loop until the Arg given to while is false. Example: (see eg/x/loop.htm)  [- $i = 0; @k = keys %ENV -]  [$ while ($i < $#k) $]  [+ $k[$i] +] = [+ $ENV{$k[$i]} +]<BR>  [- $i++ -]  [$ endwhile $] This will send a list of all environment variables to the client. do, until Executes a loop until the Arg given to until is true.  Example:   [- $i = 0 -]  [$ do $]      [+ $i++ +] <BR>  [$ until $i > 10 $] foreach, endforeach Executes a loop for each element of the second Arg, setting the first Arg accordingly.  Example:   [- @arr = (1, 3, 5) -]  [$ foreach $v (@arr) $]      [+ $v +] <BR>  [$ endforeach $] next Inside of looks same as Perl next statement. You could also use the following syntax, which allows you to add an addtional condition (or any other Perl code):     [* next if ($foo) *] last Inside of looks same as Perl last statement. You could also use the following syntax, which allows you to add an addtional condition (or any other Perl code):     [* last if ($foo) *] redo Inside of looks same as Perl redo statement. You could also use the following syntax, which allows you to add an addtional condition (or any other Perl code):     [* redo if ($foo) *] hidden Arg consists of zero, one or two names of hashes (with or without the leading %) and an optional array as third parameter. The hidden metacommand will generate hidden fields for all data contained in the first hash but not in the second hash. The default used for the first hash is %fdat, %idat is used for the second. If the third parameter is specified, the fields are written in the order they appear in this array. That is, all keys of the first hash must be properly sorted in this array. This is intended for situations where you want to pass data from one form to the next, for example, two forms which should be filled in one after the other. (Examples might be an input form and a second form to review and accept the input, or a Windows-style ""wizard""). Here you can pass along data from previous forms in hidden fields. (See eg/x/neu.htm for an example.) If you use just the 'hidden' command without parameters, it simply generates hidden fields for all form fields submitted to this document which aren't already contained in another input field. Example:     <FORM ACTION=""inhalt.htm"" METHOD=""GET"">         <INPUT TYPE=""TEXT"" NAME=""field1"">     [$ hidden $]     </FORM> If you request this with     http://host/doc.htm?field1=A&field2=B&field3=C the output will be     <FORM ACTION=""inhalt.htm"" METHOD=""GET"">         <INPUT TYPE=""TEXT"" NAME=""feld1"" VALUE=""A"">              <INPUT TYPE=""HIDDEN"" NAME=""field2"" VALUE=""B"">     <INPUT TYPE=""HIDDEN"" NAME=""field3"" VALUE=""C"">     </FORM> NOTE: This should only be used for a small amount of data, since the hidden fields are sent to the browser, which sends it back with the next request. If you have a large amount of data, store it in a file with a unique name and send only the filename in a hidden field. Be aware of the fact that the data can be changed by the browser if the user doesn't behave exactly as you expect. Users have a nasty habit of doing this all of the time. Your program should be able to handle such situations properly. var The var command declares one or more variables for use within this Embperl document and sets the strict pragma. The variable names must be supplied as a space-separated list. Example:         [$var $a %b @c $] This is the same as writing the following in normal Perl code:         use strict ;         use vars qw($a %b @c) ; NOTE 1: `use strict' within an Embperl document will only apply to the block in which it occurs. sub (Only Embperl 1.2b5 and above) Defines a Embperl subroutine. Example:   [$ sub foo $]     <p> Here we do something </p>   [$ endsub $] You can call this subroutine either as a normal Perl subroutine   [- foo -] or via the Embperl::Execute function.   [- Execute ('#foo')           # short form -]   [- Execute ({ sub => 'foo'})  # long form  -] The difference is that the Execute function will reset the internal states of Embperl like they were before the subrountine call, when the subroutine returns. You may also pass Parameters to the subroutine:   [$ sub foo $]     [- $p = shift -]     <p> Here we show the first parameter [+ $p +]</p>   [$ endsub $]       [- foo ('value') -] In Embperl 2.0.2 and up you can use a shortcut syntax for passing parameters:     [$ sub foo ($p) $]      <p> Here we show the first parameter [+ $p +]</p>     [$ endsub $] This behaves the same as the example above, but in addition the parameters defined in this way are lexcialy scoped and therefore only available inside the subroutine. In addtion you can define some initial Perl code for the subroutine:    [$ sub foo ($a, $b)    my $c = $a + $b ;    $]      <p> The result is [+ $c +]</p>    [$ endsub $] If you have a couple of commonly used subroutines you can define then in one file and import them into the modules where they are necessary:   [- Execute ({ inputfile => 'mylib.htm', import => 1 }) -] This will import all subroutines from the file mylib.htm into the current page where they could call just as a normal Perl subroutine. dump Embperl 2.1.1 and above. dump can be used to output the values of variables either to the output or to logfiles. The first parameter specifies the output channel: out Output to the page output pre Same as out, but suround with a <pre> tag. This is the default, if the output parameter is omitted. log Output to embperl log file err Output to stderr, which normally goes to the httpd error log. If the output parameter is omitted, pre is assumed. The following parameter can be a literal text (in quotes) or a list of variables. Example:   [$ dump err 'dump test', %fdat $]    [$ dump %fdat, $i, @array $] HTML Tags Embperl recognizes the following HTML tags in a special way. All others are simply passed through, as long as they are not part of a Embperl command. TABLE, /TABLE, TR, /TR Embperl can generate dynamic tables (one- or two-dimensional). You only need to specify one row or column. Embperl generates as many rows or columns as necessary. This is done by using the magic variables $row, $col, and $cnt. If you don't use $row/$col/$cnt within a table, Embperl does nothing and simply passes the table through. Embperl checks if any of $row, $col, or $cnt is used. Embperl repeats all text between <table> and </table>, as long as the expressions in which $row or $cnt occurs are defined. Embperl repeats all text between <tr> and </tr>, as long as the expressions in which $col or $cnt occurs are defined. See also ""$tabmode"" (below) for end-of-table criteria. Examples: (see eg/x/table.htm for more examples)  [- @k = keys %ENV -]  <TABLE>      <TR>          <TD>[+ $i=$row +]</TD>          <TD>[+ $k[$row] +]</TD>          <TD>[+ $ENV{$k[$i]} +]</TD>      </TR>   </TABLE> This will show all entries in array @k (which contains the keys from %ENV), so the whole environment is displayed (as in the while example), with the first column containing the zero-based index, the second containing the content of the variable name, and the third the environment variable's value. This could be used to display the result of a database query if you have the result in an array. You may provide as many columns as you need. It is also possible to call a 'fetch' subroutine in each table row. DIR, MENU, OL, UL, DL, SELECT, /DIR, /MENU, /OL, /UL, /DL, /SELECT Lists and dropdowns or list boxes are treated exactly as one- dimensional tables. Only ""$row"", ""$maxrow"", ""$col"", ""$maxcol"" and ""$tabmode"" are honored. $col and $maxcol are ignored. See eg/x/lists.htm for an example. OPTION Embperl checks if there is a value from the form data for a specific option in a menu. If so, this option will be pre-selected. Example: <FORM METHOD=""POST""> <P>Select Tag</P>   If you request this document with list.htm?SEL1=x   you can specify that the element which has a value   of x is initially selected    <P><SELECT NAME=""SEL1"">      <OPTION VALUE=""[+ $v[$row] +]"">         [+ $k[$row] +]      </OPTION>   </SELECT></P> </FORM> INPUT The INPUT tag interacts with the hashes %idat and %fdat. If the input tag has no value and a key exists with the same text as the NAME attribute of the input tag, Embperl will generate a VALUE attribute with the corresponding value of the hash key. All values of <INPUT> tags are stored in the hash %idat, with NAME as the hash key and VALUE as the hash value. Special processing is done for TYPE=RADIO and TYPE=CHECKBOX. If the VALUE attribute contains the same text as the value of the hash the CHECKED attribute is inserted, else it is removed. So, if you specify, as the ACTION URL, the file which contains the form itself, the form will be redisplayed with same values as entered the first time. (See eg/x/neu.htm for an example.) TEXTAREA, /TEXTAREA The TEXTAREA tag is treated exactly like other input fields. META HTTP-EQUIV= <meta http-equiv= ... > will over-ride the corresponding http header. This keeps Netscape from asking the user to reload the document when the content-type differs between the http header and the meta http-equiv. This can also be used to set http headers. When running under mod_perl http-headers can also be set by the function header_out     Example of how to set a http header:      <META HTTP-EQUIV=""Language"" CONTENT=""DE"">      This is the same as using the Apache function      [- $req_rec -> header_out(""Language"" => ""DE""); -] A, EMBED, IMG, IFRAME, FRAME, LAYER The output of perl blocks inside the HREF attribute of the A Tags and the SRC attribute of the other Tags are URL escaped instead of HTML escaped. (see also $escmode). Also, when inside such a URL, Embperl expands array and hash references to URL parameter syntax. Example:   [-   $A = { A => 1, B => 2 } ;  # Hashreference   @A = (X, 9, Y, 8, Z, 7)   -]    <A HREF=""http://localhost/tests?[+ $A  +]"">     <A HREF=""http://localhost/tests?[+ \@A +]""> is expanded by Embperl to   <A HREF=""http://localhost/tests?A=1&amp;B=2"">   <A HREF=""http://localhost/tests?X=9&amp;Y=8&Z=7""> Variable scope and cleanup The scope of a variable declared with my or local ends at the end of the enclosing [+/- ... -/+] block; the [+/- ... -/+] blocks act much like Perl's { ... } in that regard. Global variables (everything not declared with my or local) will be undef'ed at the end of each request, so you don't need to worry about any old variables laying around and causing suspicious results. This is only done for variables in the package the code is eval'ed in -- every variable that does not have an explicit package name. All variables with an explicit package name (i.e., in modules you use) will stay valid until the httpd child process dies. Embperl will change the current package to a unique name for every document, so the influence between different documents is kept to a minimum. You can set the name of the package with EMBPERL_PACKAGE. (See also ""(Safe-)Namespaces and opcode restrictions"".) Since a CGI script is always a process of its own, you don't need to worry about that when you use Embperl as a CGI script. If you need to declare variables which need to live longer than just one HTTP request (for example, a database handle), you must either put it's name in the hash %CLEANUP or declare them in another package (i.e., $Persistent::handle instead of $handle). If you want to use the strict pragma, you can do this by using the var metacommand to declare your variables. NOTE: Bacause Apache::DBI has its own namespace, this module will work together with Embperl to maintain your persistent database connection. You can disable the automatic cleanup of global variables with EMBPERL_OPTIONS or the cleanup parameter of the Execute function. You can define exceptions to the cleanup rule with the hash %CLEANUP. If you like to do your own cleanup you can define a subroutine CLEANUP in your document. This will be called right before the variables are cleaned up, but after the connection to the client is closed.  EXAMPLE:    [! sub CLEANUP { close FH ; } !] Predefined variables Embperl has some special variables which have a predefined meaning. %ENV Contains the environment as seen from a CGI script. $epreq Contains a reference to the Embperl request object. This is the same as adding $epreq = shift at the top of each page. $epapp Contains a reference to the Embperl application object. This is the same as $epreq - app> would return. %fdat Contains all the form data sent to the script by the calling form. The NAME attribute builds the key and the VALUE attribute is used as the hash value. Embperl doesn't care if it is called with the GET or POST method, but there may be restrictions on the length of parameters using GET -- not from Embperl, but perhaps from the web server, especially if you're using Embperl's CGI mode -- it is safer to use POST. If multiple fields with the same name are sent to a Embperl page, they will put in the same hash element and separated be tabs. You can split it up in an array, by writing:   @array = split (/\t/, $fdat{'fieldname'}) ; Embperl also supports ENCTYPE multipart/form-data, which is used for file uploads. The entry in %fdat corresponding to the file field will be a filehandle, as with CGI.pm. (Embperl uses CGI.pm internally to process forms encoded with multipart/form-data.) File upload example:   HTML page:      <FORM METHOD=""POST"" ENCTYPE=""multipart/form-data"">       <INPUT TYPE=""FILE"" NAME=""ImageName"">     </FORM>    Embperl ACTION:      [- if (defined $fdat{ImageName}) {          open FILE, ""> /tmp/file.$$"";          print FILE $buffer            while read($fdat{ImageName}, $buffer, 32768);          close FILE;        }     -]         When you have installed CGI.pm 2.46 or above, you may also retrieve the filename (local filename, as it was on the browser side) and the information provided by the CGI.pm uploadInfo function. To get the filename, simply print out the value of the corresponding %fdat entry, instead of using it as a filehandle. To get the uploadInfo use the fieldname with a dash in front of it:   Example:    # ImageName is the NAME of the field, you must replace it with whatever    # name is given in your HTML code   Filename:      [+ $fdat{ImageName} +] <br>   Content-Type:  [+ $fdat{-ImageName} -> {'Content-Type'} +] <br> NOTE: The way uploadInfos are accessed before 1.2b11 is not supported anymore. NOTE: This works the other way as well: any input fields with names that are %fdat keys, and without values, will have their values automatically set to the appropriate %fdat value. See ""HTML Tags"" INPUT/OPTION/TEXTAREA. @ffld Contains all the field names in the order in which they were sent by the browser. This is normally -- but not necessarily -- the order in which they appear in your form. %idat Contains all the values from all input tags processed so far. %udat (only 1.2b1 or higher) You can use %udat to store per user data. As long as you don't use %udat, nothing happens, but as soon as you write anything to %udat, Embperl creates a session id and sends it via a cookie to the browser. The data you have written to %udat is stored by Apache::Session. The next time the same user request an Embperl page, the browser sends the cookie with the session id back and Embperl fills the %udat hash from Apache::Session with the same values as you have stored for that user. (See also ""Session handling"") %mdat (only 1.2b2 or higher) You can use %mdat to store per module/page data. As long as you don't use %mdat, nothing happens, but as soon as you write anything to %mdat, Embperl creates a session id and stores the data via Apache::Session. The next time any user hits the same Embperl page, Embperl fill the %mdat hash from Apache::Session with the same values as you have stored within the last request to that page. (See also ""Session handling"") $row, $col Row and column counts for use in dynamic tables. (See ""HTML tag table"".) $maxrow, $maxcol Maximum number of rows or columns to display in a table. To prevent endless loops, $maxrow defaults to 100 and $maxcol to 10. (See ""HTML tag table"".) $cnt Contains the number of table cells displayed so far. (See ""HTML tag table"".) $tabmode Determines how the end of a dynamic table is detected. Tables are always limited to the size specified in $maxrow and $maxcol, but can be ended early when the row ($row) and column ($col) variables become undefined. $tabmode operates as follows: $tabmode = 1 End table looping when any one of the expressions in the table row using $row returns undefined. The row containing the undefined expression is not displayed. Only those expressions are observed which contain an access to the variable $row. $tabmode = 2 End when an expression with $row becomes undefined. The row containing the undefined expression is displayed. $tabmode = 4 End when $maxrow rows have been displayed. end of row $tabmode = 16 End table column looping when any one of the expressions in the table column using $col returns undefined. The column containing the undefined expression is not displayed. Only those expressions are observed which contain an access to the variable $col. $tabmode = 32 End when an expression with $col becomes undefined. The column containing the undefined expression is displayed. $tabmode = 64 End when $maxcol columns have been displayed. The default is 17, which is correct for all sort of arrays. You should rarely need to change it. The two values can be added together. $escmode Turn HTML and URL escaping on and off. The default is on ($escmode = 3). NOTE: Normaly you can disable escaping by preceding the item that normally is escaped with a backslash. While this is a handy thing, it could be very dangerous in situations, where content that is inserted by some user is redisplayed, because they can enter arbitrary HTML and preceed them with a backslash to avoid correct escaping when their input is redisplayed again. To avoid this problem, add 4 to the values below. This will cause Embperl to ignore the backslash when it does output escaping at all. (only 1.3b4 and above) NOTE 2: If you want to output binary data, you must set the escmode to zero. (only 1.3b6 and above) $escmode = 8 (or 15) (2.0b4 and above) The result of a Perl expression is always XML-escaped (e.g., `>' becomes `&gt;' and ' become &apos;). $escmode = 3 (or 7) The result of a Perl expression is HTML-escaped (e.g., `>' becomes `&gt;') in normal text and URL-escaped (e.g., `&' becomes `%26') within of A, EMBED, IMG, IFRAME, FRAME and LAYER tags. $escmode = 2 (or 6) The result of a Perl expression is always URL-escaped (e.g., `&' becomes `%26'). $escmode = 1 (or 5) The result of a Perl expression is always HTML-escaped (e.g., `>' becomes `&gt;'). $escmode = 0 No escaping takes place. SEE ALSO: Configuration directive EMBPERL_INPUT_ESCMODE (was optRawInput in Embperl 1.3.x) $req_rec This variable is only available when running under control of mod_perl. It contains the request record needed to access the Apache server API. See perldoc Apache for more information. LOG This is the filehandle of the Embperl logfile. By writing `print LOG ""something""' you can add lines to the logfile. NOTE: The logfile line should always start with the pid of the current process and continue with a four-character signature delimited by a ':', which specifies the log reason. Example: print LOG ""[$$]ABCD: your text\n"" ; If you are writing a module for use under Embperl you can say     tie *LOG, 'Embperl::Log'; to get a handle by which you can write to the Embperl logfile. OUT This filehandle is tied to Embperl's output stream. Printing to it has the same effect as using the [+ ... +] block. (See also optRedirectStdout) @param Will be setup by the 'param' parameter of the Execute function. Could be used to pass parameters to an Embperl document and back. (see Execute for further docs) %http_headers_out (only 1.2b10 and above) You can put any http headers you want to send into this hash. If you set a location header, Embperl will automatically set the status to 301 (Redirect). Example:   [- $http_headers_out{'Location'} = ""http://www.ecos.de/embperl/"" -] however, it is possible to specify a two element array for Location, the second element of which gives the desired HTTP status:   [- $http_headers_out{Location} = [ ""http://www.ecos.de/embperl/"", 303 ]; -] Starting with version 1.3.2 all headers with the exception of ""Content-Type"" can take multiple values. For instance, if you wanted to set two cookies, you can proceed as follows:   [- $http_headers_out{'Set-Cookie'} =        ['name=cook1;value=2;','name=cook2;value=b'] ; -] If you supply multiple values for ""Location"" or ""Content-Type"" via an array reference, then Embperl will simply use the first in the list. Empty arrays will be ignored. For instance, the following will neither change the status to 301 nor create a Location: line in the HTTP headers:   [- $http_headers_out{'Location'} = [] ; -] see also META HTTP-EQUIV= $optXXX $dbgXXX All options (see ""EMBPERL_OPTIONS"") and all debugging flags (see ""EMBPERL_DEBUG"") can be read and most of them can be set by the corresponding variables. See ""perldoc Config"".   Example:      [- $dbgInput = 1 -]            [- $dbgInput = 0 -]        [+ $dbgCmd +] # Output the state of the dbgCmd flag %CLEANUP Embperl cleanups up only variables with are defined within the Embperl page. If you want Embperl to cleanup additional variables you can add them to the hash %CLEANUP, with the key set to the variable name and the value set to one. The other way you could prevent Embperl from cleaning up some variables, is by adding them to this hash, with values of zero. %CLEANUPFILE (1.2b6+) Same purpose as %CLEANUP, but you may add filenames. All variables defined inside that file will be cleaned up. Session handling From 1.2b1 and higher Embperl is able to handle per user sessions for you. You can store any data in the %udat hash and if the same user requests an Embperl document again, you will see the same values in that hash again. From 1.2b2 and higher Embperl is able to handle per module/page persistent data for you. You can store any data in the %mdat hash and if any request comes to the same Embperl document, you will see the same values in that hash again. Session handling has changed from 1.3.3 to 1.3.4 and 2.0b3 to 2.0b4. You must either install Apache::SessionX or set     PerlSetEnv EMBPERL_SESSION_HANDLER_CLASS ""Embperl::Session"" to get the old behaviour. If you have Apache::SessionX installed, you don't have to make addtional configuration, otherwise you must do the following things. You are also able to override the Apache::SessionX defaults, by using the following parameters: To configure Embperl to do session management for you, you must have installed Apache::Session (1.53 or higher) and tell Embperl which storage and locker classes you would like to use for Apache::Session. This is done by setting the environment variable EMBPERL_SESSION_CLASSES. If you want to use a MySQL database for storing your sessions, you may have a startup.pl for your httpd which looks like this:  BEGIN     {     $ENV{EMBPERL_SESSION_CLASSES} = ""MySQL Semaphore"" ;     $ENV{EMBPERL_SESSION_ARGS}    = ""DataSource=dbi:mysql:session UserName=test"" ;     } ;   use Embperl ; or you may put this in the httpd/srm.conf:  PerlSetEnv EMBPERL_SESSION_CLASSES ""MySQL Semaphore""  PerlSetEnv EMBPERL_SESSION_ARGS ""DataSource=dbi:mysql:session UserName=test""  PerlModule Embperl ; Refer to the Apache::Session docs (e.g. Apache::Session::Store::MySQL) on how to setup your database tables. EMBPERL_SESSION_ARGS is a space separated list of name/value pairs, which gives additional arguments for Apache::Session classes. Here is an example for using a filesystem based storage: PerlSetEnv EMBPERL_SESSION_CLASSES ""File Semaphore"" PerlSetEnv EMBPERL_SESSION_ARGS ""Directory=/path/to/your/sessions"" Refer to the Apache::Session docs to find out which other storage/locker methods are available. EMBPERL_SESSION_CLASSES can (optionally) take two more classnames, which specify the class for serialization (Default: Storable) and for generating the id (Default: MD5). NOTE: The above configuration works only with Apache::Session 1.52 and Embperl 1.3b5 or above. Older versions of Embperl only support Apache::Session 1.0x, which has different parameters for EMBPERL_SESSION_CLASSES (e.g. $ENV{EMBPERL_SESSION_CLASSES} = ""DBIStore SysVSemaphoreLocker"" ; ) Apache::Session 1.0x still works with this Embperl version. Now you are able to use the %udat and %mdat hashes for your user/module sessions. As long as you don't touch %udat or %mdat, Embperl will not create any session, and Apache::Session is not loaded. As soon as you store any value to %udat, Embperl will create a new session and send a cookie to the browser to maintain its id, while the data is stored by Apache::Session. (Further version may also be able to use URL rewriting for storing the id). When you modify %mdat, Embperl will store the data via Apache::Session and retrieve it when the next request comes to the same page. Functions/Methods for session handling Embperl::Req::SetupSession ($req_rec, $uid, $sid, $app_param) [1.3b6+] This can be used from a script that will later call Embperl::Execute to preset the session so it's available to the calling script. $req_rec Apache request record when running under mod_perl, undef otherwise. $uid Session ID of the user session. If not given it is taken from the session cookie or out of the query_string. $sid Session ID of the state session. If not given it is taken out of the query_string. $app_param SetupSession tries to figure out the correct Application object for this request, in case this is not possible you can pass parameters for the Application object as a hash ref. To pass the name of the application object to use, try to pass:   { appname => 'myappname' } Returns a reference to %udat or, if call in an array context, a reference to %udat %mdat and %sdat. See also CleanupSession. Embperl::Req::GetSession / $r -> GetSession [1.3b6+] Returns a reference to %udat or, if called in an array context, a reference to %udat and %mdat. This could be used by modules that are called from inside an Embperl page, where the session management is already setup. If called as a method $r must be a Embperl::Req object, which is passed as first parameter to every Embperl page in @_ . Embperl::Req::CleanupSession ($req_rec, $app_param) [1.3b6+] Must be called at the end of a script by scripts that use SetupSession, but do not call Embperl::Execute. $req_rec Apache request record when running under mod_perl, undef otherwise. $app_param CleanupSession tries to figure out the correct Application object for this request, in case this is not possible you can pass parameters for the Application object as a hash ref. To pass the name of the application object to use, try to pass:   { appname => 'myappname' } Embperl::Req::DeleteSession / $r -> DeleteSession [1.3b6+] Deletes the session data and removes the cookie from the browser. If called as a method $r must be a Embperl::Req object, which is passed as first parameter to every Embperl page in @_ . Embperl::Req::RefreshSession / $r -> RefreshSession [1.3b6+] Triggers a resend of the cookie. Normaly the cookie is only send the first time. If called as a method $r must be a Embperl::Req object, which is passed as first parameter to every Embperl page in @_ . Embperl::Req::SetSessionCookie ($req_rec, $app_param) [1.3b7+] Must be called by scripts that use SetupSession, but do not call Embperl::Execute. This is necessary to set the cookie for the user session id, in case a new session is created, which is normally done by Embperl::Execute. SetSessionCookie does only set the cookie for the user session and it works only when running under mod_perl. It does not set session id if no cookies are used. Also it does not care about the state session. $req_rec Apache request record when running under mod_perl, undef otherwise. $app_param SetupSessionCookie tries to figure out the correct Application object for this request, in case this is not possible you can pass parameters for the Application object as a hash ref. To pass the name of the application object to use, try to pass:   { appname => 'myappname' } Recipes Starting with 2.0b4 Embperl introduces the concept of recipes. A recipe basically tells Embperl how a component should be build. While before 2.0b4 you could have only one processor that works on the request (the Embperl processor - you're also able to define different syntaxes), now you can have multiple of them arranged in a pipeline or even a tree. While you are able to give the full recipe when calling Execute, this is not very convenient, so normally you will only give the name of a recipe, either as parameter 'recipe' to Execute or as EMBPERL_RECIPE in your httpd.conf. Of course you can have different recipes for different locations and/or files. A recipe is constructed out of providers. A provider can either be read from some source or do some processing on a source. There is no restriction on what sort of data a provider has as in- and output - you just have to make sure that output format of a provider matches the input format of the next provider. In the current implementation Embperl comes with a set of built-in providers: file read file data memory get data from a scalar epparse parse file into a Embperl tree structure epcompile compile Embperl tree structure eprun execute Embperl tree structure eptostring convert Embperl tree structure to string libxslt-parse-xml parse xml source for libxslt libxslt-compile-xsl parse and compile stylesheet for libxslt libxslt do an xsl transformation via libxslt xalan-parse-xml parse xml source for xalan xalan-compile-xsl parse and compile stylesheet for xalan xalan do an xsl transformation via xalan There is a C interface, so new custom providers can be written, but what makes it really useful is that the next release of Embperl will contain a Perl interface, so you can write your own providers in Perl. The default recipe is named Embperl and contains the following providers:     +-----------+     + file      +     +-----------+           |           v     +-----------+     + epparse   +     +-----------+           |           v     +-----------+     + epcompile +     +-----------+           |           v     +-----------+     + eprun     +     +-----------+ This cause Embperl to behave like it has done in the past, when no recipes existed. Each intermediate result could be cached. So for example you are able to cache the already parsed XML or compiled stylesheet in memory, without the need to reparse/recompile it over and over again. Another nice thing about recipes is that they are not static. A recipe is defined by a recipe object. When a request comes in, Embperl calls the get_recipe method of the application object, which by default calls the get_recipe of the named recipe object, which should return a array that describes what Embperl has to do. The get_recipe methods can of course build the array dynamically, looking, for example, at the request parameters like filename, formvalues, mime type or whatever. For example if you give a scalar as input the Embperl recipe replaces the file provider with a memory provider. Additionally you can specify more then one recipe (separated by spaces). Embperl will call all the new methods in turn until the first one that returns undef. This way you can create recipes that are known for what they are responsible. One possibility would be to check the file extension and only return the recipe if it matches. Much more sophisticated things are possible... See perldoc Embperl::Recipe for how to create your own provider. XML, XSLT As mentioned above, Embperl now contains a provider for doing XSLT transformations. More XML will come in the next releases. The easiest thing is to use the XSLT stuff thru the predefined recipes: EmbperlLibXSLT the result of Embperl will run thru the Gone libxslt EmbperlXalanXSLT the result of Embperl will run thru Xalan-C EmbperlXSLT the result of Embperl will run thru the XSL transformer given by xsltproc or EMBPERL_XSLTPROC LibXSLT run source thru the Gone libxslt XalanXSLT run source thru Xalan-C XSLT run source thru the XSL transformer given by xsltproc or EMBPERL_XSLTPROC For example, including the result of an XSLT transformation into your html page could look like this:     <html><head><title>Include XML via XSLT</title></head>     <body>      <h1>Start xml</h1>     [- Execute ({inputfile => 'foo.xml', recipe => 'EmbperlXalanXSLT', xsltstylesheet => 'foo.xsl'}) ; -]     <h1>END</h1>      </body>     </html> As you already guessed, the xsltstylesheet parameter gives the name of the xsl file. You can also use the EMBPERL_XSLTSTYLESHEET configuration directive to set it from your configuration file. By setting EMBPERL_ESCMODE (or $escmode) to 15 you get the correct escaping for XML. Form Validation Embperl comes with the ability to validate form data. Rules can be defined how the data from forms should be validated. This done by the module Embperl::Form::Validate. This module is able to do client side verification by generation JavaScript code and server side verification by providing a Perl method to validate the data. Embperl::Form::Validate comes with a lot of standard tests and you can extent it by providing your own test classes, which can inherit from the shiped test classes. For further details see perldoc Embperl::Form::Validate. Caching Embperl caches a lot of intermediate results by default to speed up generation of pages. (For example compiled Perl code and compiled XSLT templates) With Embperl is also possible to cache the output of pages or components. This is controlled by parameters passed to the providers via recipes or as configuration directives inside the page, passed to Execute or in your httpd.conf. See Emperl_Cache_* and Embperl_Expires_* in Config.pod. Internationalisation (I18N) Starting with 2.0b6 Embperl has buildin support for multi-language applications. There are two things to do. First inside your pages marks which parts are translateable, by using the [= =]. Inside the [= =] blocks you could either put id, which are symbolic names for the text, or you put the text in your primary lanaguage inside the blocks. An example code could look like: [= heading =] <input name=""foo"" value=""[=bar=]"" type=""submit""> Now you run the embpmsgid.pl utility, which extracts all the ids from your page:     perl embpmsgid.pl -l de -l en -d msg.pl foo.htm This will create a file msg.pl which contains empty definitions for 'en' and 'de' with all the ids found in the page. If the file msg.pl already exists, the definitions are added. You can give more then one filename to the commandline. The format of the msg.pl file is written with Data::Dumper, so it can be easily read in via 'do' and postprocessed. As next step fill the empty definition with the correct translation. The last thing to do, is tell Embperl which language set to use. You do this inside the init method of the application object. Create an application object, which reads in the message and when the init method is called, pass the correct one to Embperl. There are tow methods $r -> message and $r -> default_message. Both returns a array ref on which you can push your message hashs. Embperl consults first the message array and if not found afterwards the default_message array for the correct message. Because both are arrays you can push multiple message sets on it. This is handy when your application object calls it's base class, which also may define some messages. Starting with version 2.3.0 it is also possible, to add a code ref instead of a hash ref to the arrays. The code is than called with the key as argument and must return the translated text. Here is an example:     package My::App ;       @ISA = ('Embperl::App') ;      %messages =         (         'de' =>             {             'heading' => '\[:U]berschrift',             'bar'     => 'Absenden',             },         'en' =>             {             'heading' => 'Heading',             'bar'     => 'Submit',             },         ) ;      sub init         {         my $self = shift ;         my $r = $self -> curr_req ;          $lang = $r -> param -> language || 'de' ;         push @{$r -> messages}, $messages{$lang} ;         push @{$r -> default_messages}, $messages{'en'} if ($lang ne 'en') ;         }      # Code ref works too...     @{$r -> messages} = (\&ecos::I18L::translate::gettext) ;      # and gettext is defined as     sub gettext          {         my ($key) = @_ ;          return ""translated text"" ;         }                 1 ; Just load this package and set EMBPERL_APP_HANDLER_CLASS to My::App, then Embperl will call the init method on the start of the request. If you are using Embperl::Object, you may instead save it as a file in your document hiearchie make the filename know to Embperl::Object with the EMBPERL_OBJECT_APP directive and Embperl::Object will retrieve the correct application file, just in the same way it retrieves other files. NOTE: When using with Embperl::Object, don't make a package declaration at the top of your application object, Embperl::Object assign it's own namespace to the application object. In case you need to retrieve a text inside your Perl code, you can do this with $r -> gettext('bar') Encoding/UTF-8 Requires Embperl 2.1.0 and up. Embperl tries to do the right thing to handle ISO-8859-1 and UTF-8 out of the box. There are three places where encoding comes into places: Posted form data Output escaping Source code While the first two things are handled by Embperl itself, the third item is currently left to handle by Perl. Perl carries for each string value a flag that tells if the string is UTF-8 or not. Embperl uses this flag. Posted form data is examined. If a string contains valid UTF-8 characters Perl's internal UTF-8 flag is set. You can disable setting the UTF-8 flag by setting optFormDataNoUtf8 in EMBPERL_OPTIONS. Output escaping is done based on the UTF-8 flag. In case the UTF-8 flags is set characters above 127 are not escaped. To get the correct appearance in your browser you also have to specify the encoding as UTF-8 in your content-type http header. If the UTF-8 flag is not set the output escaping is done based on the setting of EMBPERL_OUTPUT_ESC_CHARSET, which defaults to ISO-8859-1 (latin1). ISO-8859-2 (latin2) is also selectable. If you wish to have your Perl source code in UTF-8, you have to add a use utf8; at the top of each page. Please note that not all modules sets Perl's internal UTF-8 flag correctly. At the time of this writing for example DBI and Net::LDAP does not set this flag. You have to correct it manualy, for example by using Encode::_utf8_on. Error trapping When an error occurs inside an Embperl page, Embperl will display an error page, containing the error message. Sometimes you want to have a different behaviour. One possibility is to let Apache display a custom error page (of course only when you run under mod_perl). To get this working you need to set the option optReturnError (262144) in your httpd.conf in the EMBPERL_OPTIONS directive. With this option set, Embperl sends no output in case of an error. It returns the error back to Apache or the calling program. When running under mod_perl this gives you the chance to use the Apache ErrorDocument directive to show a custom error-document. Inside the ErrorDocument you can retrieve the error messages with   $errors = $req_rec -> prev -> pnotes('EMBPERL_ERRORS') ; where $errors is a array reference. If you want to trap exceptions in a Embperl document, that you call via Execute, you can do this by passing an array to Execute, which receives all error/warning messages and/or all error objects.     [-     Execute ({inputfile => 'foo.epl', errors => \@errors}) ;     -]          [$if @errors$]         The following errors had occured:<br>         [$foreach $err (@errors)$]             [+ $err +]<br>                  [$endforeach$]     [$endif$] In case you call die inside the executed page and pass an object (or a reference) to die instead of a string this will also show up in @errors. The last object passed to die is also available via $epreq - errobj>. $epreq - error> can be used to test if an error occured so far during the current request. You can also set $epreq - error> to false to reset Embperl's internal error condition. If the option optReturnError or an error array is passed to a component the error flag is reset after the execution of component. If an error array is passed to a component, the errors inside the component are not added to the overall errors of the request and therefore will not cause Embperl to display an error page. An more seldom used option is optDisableEmbperlErrorPage (2), which tells tells Embperl not to send its own errorpage in case of failure, but instead show as much of the page as possible. Errors are only logged to the log file. Utility Functions MailFormTo($MailTo, $Subject, $ReturnField) Sends the content of the hash %fdat in the order specified by @ffld to the given $MailTo addressee, with a subject of $Subject. If you specify $ReturnField the value of that formfield will be used as Return-Path. Usually, this will be the field where the user enters his e-mail address in the form. If you specifiy the following example code as the action in your form   <FORM ACTION=""x/feedback.htm"" METHOD=""POST""         ENCTYPE=""application/x-www-form-urlencoded""> The content of the form will be mailed to the given e-mail address. MailFormTo uses ""EMBPERL_MAILHOST"" as SMTP server or localhost if non given. Example:  <HTML>  <HEAD>  <TITLE>Feedback</TITLE>  </HEAD>  <BODY>         [- MailFormTo('webmaster@domain.xy',                       'Mail from WWW Form', 'email') -]         Your data has been successfully sent!  </BODY>  </HTML> This will send an email with all the form fields to webmaster@domain.xy, with the Subject 'Mail from WWW Form' and will set the Return-Path of the mail to the address which was entered in the field with the name 'email'. NOTE: You must have Net::SMTP (from the libnet package) installed to use this function. exit exit will override the normal Perl exit in every Embperl document. Calling exit will immediately stop any further processing of that file and send the already-done work to the output/browser. NOTE 1: If you are inside of an Execute, Embperl will only exit this Execute, but the file which called the file containing the exit with Execute will continue. NOTE 2: If you called exit with an argument it exits the whole request e.g. exit (200). NOTE 3: If you write a module which should work with Embperl under mod_perl, you must use Apache::exit instead of the normal Perl exit (as always when running under mod_perl). Performance To get the best performace from Embperl, it is necessary to restrict logging to a minimum. You can drastically slow down Embperl if you enable all logging options. (This is why `make test' takes a while to run.) You should never enable dbgFlushOutput or dbgFlushLog in a production environment. More debugging options are useful for development where it doesn't matter if the request takes a little bit longer, but on a heavily-loaded server they should be disabled. Preloading of page can save memory, because preloaded page can be shared between child processes. See ""perldoc Config"" for more details. Also take a look at mod_perl_tuning.pod for general ideas about performance. Bugs None known. Compatibility I have tested Embperl successfully on Linux 2.x/3.x with perl5.005_03, 5.6.x, 5.8.x, 5.10.x, 5.12.x, 5.14.x, 5.16.x, 5.18.x apache_1.3.0 - apache_1.3.31, apache 2.0.x, apache 2.2.x, apache 2.4.x apache_ssl (Ben SSL) Stronghold 2.2 Stronghold 2.4.1 Apache_1.3.x with mod_ssl 2.x.x I know from other people that it works on many other UNIX systems on Windows NT 4.0 with perl5.004_04 perl5.005 perl5.6.1 perl5.8.x apache_1.3.0 - apache_1.3.31 on Windows 95/98 with perl5.004_02 (binary distribution, only Offline Mode) perl5.005_02 + apache_1.3.6 Support Feedback and Bug Reports Please let me know if you use or test this module. Bugs, questions, suggestions for things you would find useful, etc., are discussed on the Embperl mailing list. If you have a site that is using Embperl, I would love to mention it in list of sites using Embperl. Please drop me a mail with a short description, if your site uses Embperl. The Embperl mailing list (embperl@perl.apache.org) is available for Embperl users and developers to share ideas, solve problems and discuss things related to Embperl To subscribe to this list, send mail to embperl-subscribe@perl.apache.org. To unsubscribe send email to embperl-unsubscribe@perl.apache.org . There is an archive for the Embperl mailing list at http://mail-archives.apache.org/mod_mbox/perl-embperl For mod_perl related questions you may search the mod_perl mailing list archive at http://mail-archives.apache.org/mod_mbox/perl-modperl Commerical Support You can get free support on the Embperl mailing list (see above). If you need commercial support, ecos can provide it for you. We offer: Consulting and assistance for you and your programmers Planning of your dynamic website Creating of parts or a whole website Fixing bugs in Embperl (also available for mod_perl) Adding new features You can reach us via http://www.ecos.de or info@ecos.de How to Support the Development of Embperl If you use and like Embperl and want to support it's ongoing development you have two possibilities: Send me patches for things you like to see in Embperl Donate money to Embperl. See http://perl.apache.org/donate.htm Buy commercial support (see above). Also you may get the same answers to your questions on the mailing list, by buying the commercial support you not only buy support for yourself and can be sure you get an answer, you also give us the possibility to put more power in the further development of Embperl. Links and Download Information mod_perl http://perl.apache.org/ Embperl http://perl.apache.org/embperl/ Embperl (german) http://www.ecos.de/embperl/ DBIx::Recordset http://search.cpan.org/~grichter/ Apache web server http://www.apache.org/ Download mod_perl http://perl.apache.org/dist/ Apache Perl Modules http://www.perl.com/CPAN/modules/by-module/Apache/ Embperl http://www.embperl.org/downloads DBIx::Recordset http://search.cpan.org/~grichter/ PPM for ActiveState - Perl 5.6.x http://theoryx5.uwinnipeg.ca/ppmpackages/ - Perl 5.8.x http://theoryx5.uwinnipeg.ca/ppms Informations on how to install Embperl can be found in INSTALL.pod SVN The latest developments are available via SVN. Look at ""perldoc SVN.pod"" for a detailed description. Syntaxmodes for various editors Emacs From: Erik Arneson [erik@mind.net] Here's the amount of documentation I've got right now. They need to get mmm.el from this URL: http://mmm-mode.sourceforge.net/ Then download my mmm-embperl.el from this one: http://www.aarg.net/erik/mmm-embperl.el The documentation for using these is included in those two elisp files. VIM Vim Syntaxfile for Vim 5.x & 6.x from Lukas Zapletal with syntax highliting for JavaScript, VBScript, Perl+Embperl, CSS and HTML, yellow background for Perl`s code (like M$ Interdev) and working Perl folding can be found at http://vim.sourceforge.net/script.php?script_id=61 Vim Syntaxfile from Steve Willer can be found at http://www.interlog.com/~willer/embperl.vim Vim Syntaxfile from Kee Hinckley can be found at http://www.somewhere.com/software/ Dreamweaver Dreamweaver extension which tells Dreamweaver not to touch Embperl code can be found at http://www.somewhere.com/software/ AUTHOR G. Richter (richter at embperl dot org) SEE ALSO perl(1), mod_perl, Apache httpd × Module Install Instructions To install Embperl, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Embperl CPAN shell                      perl -MCPAN -e shell                     install Embperl For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Building dynamic Websites with Perl (sort of like Perl crossed with PHP)"	"true"
"Web Frameworks-Like"	"Mason"	"https://metacpan.org/pod/Mason"	"Powerful, high-performance templating for the web and beyond"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Mason - Powerful, high-performance templating for the web and beyond - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Jonathan Swartz  /  2.24 (JSWARTZ on 2015-05-16) 2.23 (JSWARTZ on 2015-02-07) 2.22 (JSWARTZ on 2014-02-01) 2.21 (JSWARTZ on 2014-01-18) 2.20 (JSWARTZ on 2012-07-12) 2.19 (JSWARTZ on 2012-05-02) 2.18 (JSWARTZ on 2012-04-22) 2.17 (JSWARTZ on 2012-03-27) 2.16 (JSWARTZ on 2012-02-24) 2.15 (JSWARTZ on 2011-11-28) 2.14 (JSWARTZ on 2011-09-07) 2.13 (JSWARTZ on 2011-07-26) 2.12 (JSWARTZ on 2011-07-03) 2.11 (JSWARTZ on 2011-06-29) 2.10 (JSWARTZ on 2011-06-23) 2.09 (JSWARTZ on 2011-06-20) 2.08 (JSWARTZ on 2011-06-18) 2.07 (JSWARTZ on 2011-04-21) 2.06 (JSWARTZ on 2011-03-15) 2.05 (JSWARTZ on 2011-03-07) 2.04 (JSWARTZ on 2011-02-26) 2.03 (JSWARTZ on 2011-02-25) 2.02 (JSWARTZ on 2011-02-24) 2.01 (JSWARTZ on 2011-02-21) 2.00 (JSWARTZ on 2011-02-17) Mason-2.24 17 ++ 17 ++  / Mason 16 May 2015 20:12:09 GMT Module version: 2.24 Source (raw) Browse (raw) Changes Repository (git clone) Issues (5) Testers (1251 / 3 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (88.02Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 2.23 (JSWARTZ on 2015-02-07) 2.22 (JSWARTZ on 2014-02-01) 2.21 (JSWARTZ on 2014-01-18) 2.20 (JSWARTZ on 2012-07-12) 2.19 (JSWARTZ on 2012-05-02) 2.18 (JSWARTZ on 2012-04-22) 2.17 (JSWARTZ on 2012-03-27) 2.16 (JSWARTZ on 2012-02-24) 2.15 (JSWARTZ on 2011-11-28) 2.14 (JSWARTZ on 2011-09-07) 2.13 (JSWARTZ on 2011-07-26) 2.12 (JSWARTZ on 2011-07-03) 2.11 (JSWARTZ on 2011-06-29) 2.10 (JSWARTZ on 2011-06-23) 2.09 (JSWARTZ on 2011-06-20) 2.08 (JSWARTZ on 2011-06-18) 2.07 (JSWARTZ on 2011-04-21) 2.06 (JSWARTZ on 2011-03-15) 2.05 (JSWARTZ on 2011-03-07) 2.04 (JSWARTZ on 2011-02-26) 2.03 (JSWARTZ on 2011-02-25) 2.02 (JSWARTZ on 2011-02-24) 2.01 (JSWARTZ on 2011-02-21) 2.00 (JSWARTZ on 2011-02-17) Diff with version 2.23 (JSWARTZ on 2015-02-07) 2.22 (JSWARTZ on 2014-02-01) 2.21 (JSWARTZ on 2014-01-18) 2.20 (JSWARTZ on 2012-07-12) 2.19 (JSWARTZ on 2012-05-02) 2.18 (JSWARTZ on 2012-04-22) 2.17 (JSWARTZ on 2012-03-27) 2.16 (JSWARTZ on 2012-02-24) 2.15 (JSWARTZ on 2011-11-28) 2.14 (JSWARTZ on 2011-09-07) 2.13 (JSWARTZ on 2011-07-26) 2.12 (JSWARTZ on 2011-07-03) 2.11 (JSWARTZ on 2011-06-29) 2.10 (JSWARTZ on 2011-06-23) 2.09 (JSWARTZ on 2011-06-20) 2.08 (JSWARTZ on 2011-06-18) 2.07 (JSWARTZ on 2011-04-21) 2.06 (JSWARTZ on 2011-03-15) 2.05 (JSWARTZ on 2011-03-07) 2.04 (JSWARTZ on 2011-02-26) 2.03 (JSWARTZ on 2011-02-25) 2.02 (JSWARTZ on 2011-02-24) 2.01 (JSWARTZ on 2011-02-21) 2.00 (JSWARTZ on 2011-02-17) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 6 PAUSE users 11 non-PAUSE users. JSWARTZ Jonathan Swartz Dependencies Capture::Tiny Class::Load Class::Unload Devel::GlobalDestruction Exception::Class File::Spec File::Temp Guard IPC::System::Simple JSON Log::Any Memoize Method::Signatures::Simple Moose MooseX::HasDefaults MooseX::StrictConstructor Scalar::Util Try::Tiny CPAN Testers List Reverse dependencies Dependency graph × Mason-2.24 NAME SYNOPSIS DESCRIPTION SUPPORT ACKNOWLEDGEMENTS SEE ALSO AUTHOR COPYRIGHT AND LICENSE NAME Mason - Powerful, high-performance templating for the web and beyond SYNOPSIS   foo.mc:     % my $name = ""Mason"";     Hello world! Welcome to <% $name %>.    #!/usr/local/bin/perl   use Mason;   my $mason = Mason->new(comp_root => '...');   print $mason->run('/foo')->output; DESCRIPTION Mason is a powerful Perl-based templating system, designed to generate dynamic content of all kinds. Unlike many templating systems, Mason does not attempt to invent an alternate, ""easier"" syntax for templates. It provides a set of syntax and features specific to template creation, but underneath it is still clearly and proudly recognizable as Perl. Mason is most often used for generating web pages. It has a companion web framework, Poet, designed to take maximum advantage of its routing and content generation features. It can also be used as the templating layer for web frameworks such as Catalyst and Dancer. All documentation is indexed at Mason::Manual. The previous major version of Mason (1.x) is available under the name HTML::Mason. SUPPORT The mailing list is mason-users@lists.sourceforge.net. You must be subscribed to send a message. To subscribe, visit https://lists.sourceforge.net/lists/listinfo/mason-users. You can also visit us at #mason on irc://irc.perl.org/#mason. Bugs and feature requests will be tracked at RT:     http://rt.cpan.org/NoAuth/Bugs.html?Dist=Mason     bug-mason@rt.cpan.org The latest source code can be browsed and fetched at:     http://github.com/jonswar/perl-mason     git clone git://github.com/jonswar/perl-mason.git The official Mason website is http://www.masonhq.com/, however it contains mostly information about Mason 1. We're not sure what the future of the website will be wrt Mason 2. ACKNOWLEDGEMENTS Thanks to Stevan Little and the Moose team for the awesomeness of Moose, which motivated me to create a second version of Mason years after I thought I was done. Thanks to Tatsuhiko Miyagawa and the PSGI/Plack team, who freed me from ever worrying about server backends again. SEE ALSO HTML::Mason AUTHOR Jonathan Swartz <swartz@pobox.com> COPYRIGHT AND LICENSE This software is copyright (c) 2012 by Jonathan Swartz. This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself. × Module Install Instructions To install Mason, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Mason CPAN shell                      perl -MCPAN -e shell                     install Mason For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	"Powerful, high-performance templating for the web and beyond"	"true"
"Web Scraping"	"Web::Scraper"	"https://metacpan.org/pod/Web::Scraper"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Web::Scraper - Web Scraping Toolkit using HTML and CSS Selectors or XPath expressions - metacpan.org Home Recent FAQ Github Issues News Lab Account Identities Profile Favorites Logout Sign in Facebook GitHub Twitter Google OpenID Search Modules Authors Tatsuhiko Miyagawa  /  0.38 (MIYAGAWA on 2014-10-20) 0.37 (MIYAGAWA on 2012-10-19) 0.36 (MIYAGAWA on 2011-11-19) 0.35 (MIYAGAWA on 2011-09-27) 0.34 (MIYAGAWA on 2011-02-24) 0.33 (MIYAGAWA on 2011-02-17) 0.32 (MIYAGAWA on 2010-02-04) 0.31 (MIYAGAWA on 2009-07-19) 0.30 (MIYAGAWA on 2009-07-08) 0.29 (MIYAGAWA on 2009-07-08) 0.28 (MIYAGAWA on 2009-03-28) 0.27 (MIYAGAWA on 2009-03-24) 0.26 (MIYAGAWA on 2009-01-15) 0.25 (MIYAGAWA on 2009-01-11) 0.24 (MIYAGAWA on 2007-11-26) 0.23 (MIYAGAWA on 2007-11-25) 0.22 (MIYAGAWA on 2007-10-18) 0.21_01 DEV (MIYAGAWA on 2007-10-04) 0.21 (MIYAGAWA on 2007-10-03) 0.20 (MIYAGAWA on 2007-10-03) 0.19 (MIYAGAWA on 2007-09-21) 0.18 (MIYAGAWA on 2007-09-21) 0.17 (MIYAGAWA on 2007-09-20) 0.16 (MIYAGAWA on 2007-09-19) 0.15 (MIYAGAWA on 2007-09-16) 0.14 (MIYAGAWA on 2007-09-14) 0.13 (MIYAGAWA on 2007-09-03) 0.12 (MIYAGAWA on 2007-08-30) 0.11 (MIYAGAWA on 2007-08-28) 0.10 (MIYAGAWA on 2007-08-27) 0.09 (MIYAGAWA on 2007-08-15) 0.08 (MIYAGAWA on 2007-08-14) 0.07 (MIYAGAWA on 2007-05-12) 0.05 (MIYAGAWA on 2007-05-10) 0.04 (MIYAGAWA on 2007-05-09) 0.03 (MIYAGAWA on 2007-05-09) 0.02 (MIYAGAWA on 2007-05-09) 0.01 (MIYAGAWA on 2007-05-09) Web-Scraper-0.38 35 ++ 35 ++  / Web::Scraper 20 Oct 2014 00:27:05 GMT Module version: 0.38 Source (raw) Browse (raw) Changes Homepage Repository (git clone) Issues 4.5 (2 reviews) Testers (2230 / 2 / 0) Kwalitee License: perl_5 Activity 24 month Tools MOBI | EPUB Download (25.13Kb) 0 MetaCPAN Explorer Rate this distribution Subscribe to distribution Install Instructions Jump to version 0.37 (MIYAGAWA on 2012-10-19) 0.36 (MIYAGAWA on 2011-11-19) 0.35 (MIYAGAWA on 2011-09-27) 0.34 (MIYAGAWA on 2011-02-24) 0.33 (MIYAGAWA on 2011-02-17) 0.32 (MIYAGAWA on 2010-02-04) 0.31 (MIYAGAWA on 2009-07-19) 0.30 (MIYAGAWA on 2009-07-08) 0.29 (MIYAGAWA on 2009-07-08) 0.28 (MIYAGAWA on 2009-03-28) 0.27 (MIYAGAWA on 2009-03-24) 0.26 (MIYAGAWA on 2009-01-15) 0.25 (MIYAGAWA on 2009-01-11) 0.24 (MIYAGAWA on 2007-11-26) 0.23 (MIYAGAWA on 2007-11-25) 0.22 (MIYAGAWA on 2007-10-18) 0.21_01 DEV (MIYAGAWA on 2007-10-04) 0.21 (MIYAGAWA on 2007-10-03) 0.20 (MIYAGAWA on 2007-10-03) 0.19 (MIYAGAWA on 2007-09-21) 0.18 (MIYAGAWA on 2007-09-21) 0.17 (MIYAGAWA on 2007-09-20) 0.16 (MIYAGAWA on 2007-09-19) 0.15 (MIYAGAWA on 2007-09-16) 0.14 (MIYAGAWA on 2007-09-14) 0.13 (MIYAGAWA on 2007-09-03) 0.12 (MIYAGAWA on 2007-08-30) 0.11 (MIYAGAWA on 2007-08-28) 0.10 (MIYAGAWA on 2007-08-27) 0.09 (MIYAGAWA on 2007-08-15) 0.08 (MIYAGAWA on 2007-08-14) 0.07 (MIYAGAWA on 2007-05-12) 0.05 (MIYAGAWA on 2007-05-10) 0.04 (MIYAGAWA on 2007-05-09) 0.03 (MIYAGAWA on 2007-05-09) 0.02 (MIYAGAWA on 2007-05-09) 0.01 (MIYAGAWA on 2007-05-09) 0.05 (PJB on 2007-05-11) Diff with version 0.37 (MIYAGAWA on 2012-10-19) 0.36 (MIYAGAWA on 2011-11-19) 0.35 (MIYAGAWA on 2011-09-27) 0.34 (MIYAGAWA on 2011-02-24) 0.33 (MIYAGAWA on 2011-02-17) 0.32 (MIYAGAWA on 2010-02-04) 0.31 (MIYAGAWA on 2009-07-19) 0.30 (MIYAGAWA on 2009-07-08) 0.29 (MIYAGAWA on 2009-07-08) 0.28 (MIYAGAWA on 2009-03-28) 0.27 (MIYAGAWA on 2009-03-24) 0.26 (MIYAGAWA on 2009-01-15) 0.25 (MIYAGAWA on 2009-01-11) 0.24 (MIYAGAWA on 2007-11-26) 0.23 (MIYAGAWA on 2007-11-25) 0.22 (MIYAGAWA on 2007-10-18) 0.21_01 DEV (MIYAGAWA on 2007-10-04) 0.21 (MIYAGAWA on 2007-10-03) 0.20 (MIYAGAWA on 2007-10-03) 0.19 (MIYAGAWA on 2007-09-21) 0.18 (MIYAGAWA on 2007-09-21) 0.17 (MIYAGAWA on 2007-09-20) 0.16 (MIYAGAWA on 2007-09-19) 0.15 (MIYAGAWA on 2007-09-16) 0.14 (MIYAGAWA on 2007-09-14) 0.13 (MIYAGAWA on 2007-09-03) 0.12 (MIYAGAWA on 2007-08-30) 0.11 (MIYAGAWA on 2007-08-28) 0.10 (MIYAGAWA on 2007-08-27) 0.09 (MIYAGAWA on 2007-08-15) 0.08 (MIYAGAWA on 2007-08-14) 0.07 (MIYAGAWA on 2007-05-12) 0.05 (MIYAGAWA on 2007-05-10) 0.04 (MIYAGAWA on 2007-05-09) 0.03 (MIYAGAWA on 2007-05-09) 0.02 (MIYAGAWA on 2007-05-09) 0.01 (MIYAGAWA on 2007-05-09) 0.05 (PJB on 2007-05-11) Permalinks This version Latest version S.C.O This version Latest version ShowHide Right Panel ++ed by: 25 PAUSE users 10 non-PAUSE users. MIYAGAWA Tatsuhiko Miyagawa and 9 contributors show them Alexandr Ciornii Andrew Whatson DQNEO David Steinbrunner Jay Shirley Lee Aylward Perlover Stanislaw Pusep vti Dependencies HTML::Entities HTML::Selector::XPath HTML::Tagset HTML::TreeBuilder HTML::TreeBuilder::XPath LWP Scalar::Util UNIVERSAL::require URI XML::XPathEngine YAML CPAN Testers List Reverse dependencies Dependency graph × Web-Scraper-0.38 NAME SYNOPSIS DESCRIPTION METHODS scraper scrape process process_first result EXAMPLES NESTED SCRAPERS FILTERS XML backends AUTHOR LICENSE SEE ALSO NAME Web::Scraper - Web Scraping Toolkit using HTML and CSS Selectors or XPath expressions SYNOPSIS   use URI;   use Web::Scraper;   use Encode;    # First, create your scraper block   my $authors = scraper {       # Parse all TDs inside 'table[width=""100%]""', store them into       # an array 'authors'.  We embed other scrapers for each TD.       process 'table[width=""100%""] td', ""authors[]"" => scraper {         # And, in each TD,         # get the URI of ""a"" element         process ""a"", uri => '@href';         # get text inside ""small"" element         process ""small"", fullname => 'TEXT';       };   };    my $res = $authors->scrape( URI->new(""http://search.cpan.org/author/?A"") );    # iterate the array 'authors'   for my $author (@{$res->{authors}}) {       # output is like:       # Andy Adler      http://search.cpan.org/~aadler/       # Aaron K Dancygier       http://search.cpan.org/~aakd/       # Aamer Akhter    http://search.cpan.org/~aakhter/       print Encode::encode(""utf8"", ""$author->{fullname}\t$author->{uri}\n"");   } The structure would resemble this (visually) { authors => [ { fullname => $fullname, link => $uri }, { fullname => $fullname, link => $uri }, ] } DESCRIPTION Web::Scraper is a web scraper toolkit, inspired by Ruby's equivalent Scrapi. It provides a DSL-ish interface for traversing HTML documents and returning a neatly arranged Perl data structure. The scraper and process blocks provide a method to define what segments of a document to extract. It understands HTML and CSS Selectors as well as XPath expressions. METHODS scraper   $scraper = scraper { ... }; Creates a new Web::Scraper object by wrapping the DSL code that will be fired when scrape method is called. scrape   $res = $scraper->scrape(URI->new($uri));   $res = $scraper->scrape($html_content);   $res = $scraper->scrape(\$html_content);   $res = $scraper->scrape($http_response);   $res = $scraper->scrape($html_element); Retrieves the HTML from URI, HTTP::Response, HTML::Tree or text strings and creates a DOM object, then fires the callback scraper code to retrieve the data structure. If you pass URI or HTTP::Response object, Web::Scraper will automatically guesses the encoding of the content by looking at Content-Type headers and META tags. Otherwise you need to decode the HTML to Unicode before passing it to scrape method. You can optionally pass the base URL when you pass the HTML content as a string instead of URI or HTTP::Response.   $res = $scraper->scrape($html_content, ""http://example.com/foo""); This way Web::Scraper can resolve the relative links found in the document. process   scraper {       process ""tag.class"", key => 'TEXT';       process '//tag[contains(@foo, ""bar"")]', key2 => '@attr';       process '//comment()', 'comments[]' => 'TEXT';   }; process is the method to find matching elements from HTML with CSS selector or XPath expression, then extract text or attributes into the result stash. If the first argument begins with ""//"" or ""id("" it's treated as an XPath expression and otherwise CSS selector.   # <span class=""date"">2008/12/21</span>   # date => ""2008/12/21""   process "".date"", date => 'TEXT';    # <div class=""body""><a href=""http://example.com/"">foo</a></div>   # link => URI->new(""http://example.com/"")   process "".body > a"", link => '@href';    # <div class=""body""><!-- HTML Comment here --><a href=""http://example.com/"">foo</a></div>   # comment => "" HTML Comment here ""   #   # NOTES: A comment nodes are accessed when installed   # the HTML::TreeBuilder::XPath (version >= 0.14) and/or   # the HTML::TreeBuilder::LibXML (version >= 0.13)   process ""//div[contains(@class, 'body')]/comment()"", comment => 'TEXT';    # <div class=""body""><a href=""http://example.com/"">foo</a></div>   # link => URI->new(""http://example.com/""), text => ""foo""   process "".body > a"", link => '@href', text => 'TEXT';    # <ul><li>foo</li><li>bar</li></ul>   # list => [ ""foo"", ""bar"" ]   process ""li"", ""list[]"" => ""TEXT"";    # <ul><li id=""1"">foo</li><li id=""2"">bar</li></ul>   # list => [ { id => ""1"", text => ""foo"" }, { id => ""2"", text => ""bar"" } ];   process ""li"", ""list[]"" => { id => '@id', text => ""TEXT"" }; process_first process_first is the same as process but stops when the first matching result is found.   # <span class=""date"">2008/12/21</span>   # <span class=""date"">2008/12/22</span>   # date => ""2008/12/21""   process_first "".date"", date => 'TEXT'; result result allows to return not the default value after processing but a single value specified by a key or a hash reference built from several keys.   process 'a', 'want[]' => 'TEXT';   result 'want'; EXAMPLES There are many examples in the eg/ dir packaged in this distribution. It is recommended to look through these. NESTED SCRAPERS Scrapers can be nested thus allowing to scrape already captured data.   # <ul>   # <li class=""foo""><a href=""foo1"">bar1</a></li>   # <li class=""bar""><a href=""foo2"">bar2</a></li>   # <li class=""foo""><a href=""foo3"">bar3</a></li>   # </ul>   # friends => [ {href => 'foo1'}, {href => 'foo2'} ];   process 'li', 'friends[]' => scraper {     process 'a', href => '@href',   }; FILTERS Filters are applied to the result after processing. They can be declared as anonymous subroutines or as class names.   process $exp, $key => [ 'TEXT', sub { s/foo/bar/ } ];   process $exp, $key => [ 'TEXT', 'Something' ];   process $exp, $key => [ 'TEXT', '+MyApp::Filter::Foo' ]; Filters can be stacked   process $exp, $key => [ '@href', 'Foo', '+MyApp::Filter::Bar', \&baz ]; More about filters you can find in Web::Scraper::Filter documentation. XML backends By default HTML::TreeBuilder::XPath is used, this can be replaces by a XML::LibXML backend using Web::Scraper::LibXML module.   use Web::Scraper::LibXML;    # same as Web::Scraper   my $scraper = scraper { ... }; AUTHOR Tatsuhiko Miyagawa <miyagawa@bulknews.net> LICENSE This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself. SEE ALSO http://blog.labnotes.org/category/scrapi/ HTML::TreeBuilder::XPath × Module Install Instructions To install Web::Scraper, simply copy and paste either of the commands in to your terminal cpanm                      cpanm Web::Scraper CPAN shell                      perl -MCPAN -e shell                     install Web::Scraper For more information on module installation please visit the detailed CPAN module installation guide. Close   API About MetaCPAN CPAN Mirrors Fork metacpan.org Perl.org Hosting generously provided by: Keyboard Shortcuts Global s Focus search bar ? Bring up this help dialog Github g p Go to pull requests g i go to github issues (only if github is preferred repository) POD g a Go to author g c Go to changes g i Go to issues g d Go to dist g r Go to repository/SCM g s Go to source g b Go to file browse"	"null"	"https://github.com/CPAN-API/metacpan-web"	""	"true"
