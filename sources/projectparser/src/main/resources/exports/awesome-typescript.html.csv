"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
"Visual Studio"	"Visual Studio Community Edition 2015"	"https://www.visualstudio.com/products/visual-studio-community-vs"	"free (conditionally) IDE with integrated TypeScript support"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Free Dev Tools - Visual Studio Community 2015 https://www.visualstudio.com MSDN Subscriptions Sign in Products Top Products Visual Studio 2015 Products Visual Studio Enterprise Visual Studio Professional Visual Studio Community Visual Studio Code Visual Studio Team Services Team Foundation Server Other Products Visual Studio Test Professional Team Explorer Everywhere Application Insights MSDN Platforms HockeyApp Visual Studio Express How to Buy Visual Studio Visual Studio Team Services Compare Compare Visual Studio 2015 Offerings Visual Studio Team Services Feature Matrix Features Application Development Mobile Web Cloud Windows Office Tools Games Node.js Visual C++ Python .NET Lifecycle Management DevOps and ALM Agile Software Development Version Control Tools for Java teams Release Management Reporting Cloud-Based Load Testing Continuous Integration Testing Tools Extend and Integrate Visual Studio Visual Studio Team Services Visual Studio Code Downloads Top Downloads Visual Studio Enterprise Visual Studio Community Visual Studio Code Team Foundation Server Extensions and Integrations Visual Studio Tools for Apache Cordova Visual Studio Tools for Unity Node.js Tools for Visual Studio Python Tools for Visual Studio .NET Nuget Packages Visual Studio Gallery Visual Studio Team Services Integrations All Downloads News Support Marketplace Documentation Visual Studio on MSDN Visual Studio Team Services Visual Studio Code Free Visual Studio Visual Studio Community A free, fully-featured, and extensible IDE for creating modern applications for Windows, Android, and iOS, as well as web applications and cloud services. Download Community 2015 Visual Studio Community is free for individual developers, open source projects, academic research, education, and small professional teams. Learn more Everything you need all in one place Flexibility Build apps for any platform Productivity Designers, editors, debuggers, profilers, in one single tool Ecosystem Access to thousands of extensions Languages Code in C#, Visual Basic, F#, C++, HTML, JavaScript, Python, and more Now with Xamarin Deliver great mobile apps Visual Studio Community now integrates Xamarin features that complete the out-of-the-box mobile application development experience for Android, iOS and Windows. Share code across devices while delivering apps with native performance and look & feel. Learn more Powerful coding tools Write code, navigate, and fix issues Code with confidence in your language, find and fix code issues quickly, and refactor with ease. Learn more about editing with Visual Studio Advanced debugging Debug, profile, and diagnose Debug cross language locally or remotely. Diagnose performance issues without leaving the debugger workflow. Learn more about debugging with Visual Studio Device apps Windows Desktop, Universal Windows Platform, iOS, and Android Tools for Apache Cordova, Xamarin, and Unity available for download to enable code, debug, test, share, and reuse for more platforms. Learn more about Universal Windows Platform development Learn more about cross-platform mobile development Web tools Create and deploy modern web applications Develop for the web with ASP.NET, Node.js, Python, and JavaScript. Use with powerful web frameworks such as AngularJS, jQuery, Bootstrap, Django, and Backbone.js. Learn more about web development in Visual Studio Multiple languages Use the language of your choice Multi-language support includes C#, Visual Basic, F#, C++, JavaScript, TypeScript, Python, and more. Visual Studio guides you as you write, debug, and test code — no matter what language you choose. Ecosystem Access to thousands of extensions Customize Visual Studio by taking advantage of the tools, controls, and templates available from partners and the community, or go further and build your own extensions. Learn more about customizing Visual Studio Learn more about Visual Studio Gallery Git integration Host code anywhere Manage your source code in Git repos hosted by any provider, including GitHub. Or use Visual Studio Team Services to manage code alongside bugs and work items for your whole project. Learn more about Visual Studio Team Services Learn more about GitHub extension for Visual Studio Exciting benefits Access to free tools and resources When you sign into Visual Studio Community, you get access to a broad set of free developer tools, selected Xamarin University courses on-demand, Pluralsight training, Azure credits, and more as part of Visual Studio Dev Essentials. Learn more about Visual Studio Dev Essentials Usage For individuals Any individual developer can use Visual Studio Community to create their own free or paid apps. For organizations An unlimited number of users within an organization can use Visual Studio Community for the following scenarios: in a classroom learning environment, for academic research, or for contributing to open source projects. For all other usage scenarios: In non-enterprise organizations, up to five users can use Visual Studio Community. In enterprise organizations (meaning those with >250 PCs or >$1 Million US Dollars in annual revenue), no use is permitted beyond the open source, academic research, and classroom learning environment scenarios described above. For more information, see the Visual Studio Community license terms. Learn more News and blogs Welcome to Visual Studio 2015 Cross-platform mobile development Web and Cloud development Resources System requirements Compare editions Related What are Visual Studio Team Services? Cloud services for development teams to collaborate and manage software projects. Read more False False             Is this page helpful? Your feedback about this content is important. Let us know what you think. Yes No Additional feedback? 1500 characters remaining Submit Skip this Thank you! We appreciate your feedback. Visual Studio My Visual Studio Manage Visual Studio Marketplace Integrate Related Sites Visual Studio documentation MSDN Home Channel 9 Azure Visual Studio Blog Products Visual Studio Visual Studio Team Services Visual Studio Code Download Compare How to Buy Support Get Support Submit a Bug Submit an Idea Forums United States (English) Contact us Jobs Privacy Terms of use Trademarks © 2016 Microsoft Third party scripts and code linked to or referenced from this website are licensed to you by the parties that own such code, not by Microsoft. See ASP.NET Ajax CDN Terms of Use – http://www.asp.net/ajaxlibrary/CDN.ashx."	"null"	"null"	"free (conditionally) IDE with integrated TypeScript support"	"true"
"Visual Studio"	"VS Addon - TypescriptSyntaxPaste"	"https://visualstudiogallery.msdn.microsoft.com/eb0887f8-3ac1-434a-b50b-f0112f1572f7"	"Allow you to copy C# source code, then paste as Typescript syntax which help you with converting DTO or interface"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"TypescriptSyntaxPaste extension Sign in Gallery MSDN Library Forums Get started for free Extensions > Tools > TypescriptSyntaxPaste Report abuse to Microsoft nhabuiduc/TypescriptSyntaxPaste TypescriptSyntaxPaste Free Allow you to copy C# source code, then paste as Typescript syntax which help you with converting DTO or interface. Copy any C# code (correct syntax, whole class, method or interface, currently does not support to convert fragment of source code) It is based on Roslyn compiler,... CREATED BY Nha Bui Duc (bui duc nha) REVIEWS (5) Review SUPPORTS Visual Studio 2015, 15 DOWNLOADS Download (1,870) UPDATED 5/18/2016 VERSION 1.2.1 SHARE FAVORITES Add to favorites Description Reviews (5) Q and A Sign in to write a review Sort by: Date - new to old Date - old to new Rating - high to low Rating - low to high Your Rating: Required             Review (Maximum of 1200 Characters)     by Bin Laidand | June 30 2016 Absolutely brilliant. Saved me a ton of time. After installing the download, I had to restart VS.NET 2015 in order to see the Tools -> Option -> Typescript Paste. After restarting, I changed some of the options then tried copying from a DTO class from a C# file and pasting into a TypeScript file. It worked the first time seamlessly.   by tmhung | March 27 2016 Great tool. Save me a lot of time from dealing with the hustle   by Jimi At Working | January 07 2016 Great tool   by waynewaynewayne | September 29 2015 Great Work. Saved me a lot of time. Would be even greater if you could convert *.cs files via context menu.   by chartzDev | August 18 2015 This is a good tool! Saved me allot of time building up typescript interfaces. Something closer to TypeLite would be my preferred choice, but i could not figure out how to get it to work with Asp.net 5, so this seems like the best solution for now. Nha Bui Duc September 10 2015 | Edit | Delete Thanks for feedback, I've created the option for you to create Typescript interface directly from Class/Struct C# code. Update to new version, and go to Tool->Option->Typescript Paste-> Convert to Interface: true.  Thanks for feedback, I've created the option for you to create Typescript interface directly from Class/Struct C# code. Update to new version, and go to Tool->Option->Typescript Paste-> Convert to Interface: true. Sign in to start a discussion Title: * Post ( Maximum of 2000 Characters ): *     Be the first to create a discussion. Dev Centers Windows Office More... Related Sites Visual Studio Visual Studio Integrate VSIP Program Microsoft .NET Microsoft Azure Connect Forums Blog Facebook LinkedIn Stack Overflow Twitter Visual Studio Events YouTube Developer Resources Code samples Documentation Downloads Products & extensions for Visual Studio REST APIs Testing tools for web developers Videos and tutorials Virtual Labs United States (English) © 2016 Microsoft Terms of Use Trademarks Privacy Statement Site Feedback"	"null"	"null"	"Allow you to copy C# source code, then paste as Typescript syntax which help you with converting DTO or interface"	"true"
"Visual Studio"	"NodeJS Tools for Visual Studio"	"https://github.com/Microsoft/nodejstools"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1291"	"178"	"221"	"GitHub - Microsoft/nodejstools: Node.js Tools for Visual Studio Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 178 Star 1,291 Fork 221 Microsoft/nodejstools Code Issues 202 Pull requests 20 Wiki Pulse Graphs Node.js Tools for Visual Studio http://aka.ms/explorentvs 2,391 commits 11 branches 30 releases 37 contributors C# 92.0% JavaScript 6.5% PowerShell 0.9% HTML 0.3% Batchfile 0.2% TypeScript 0.1% C# JavaScript PowerShell HTML Batchfile TypeScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags lightweight-install master mjbvz-code-of-conduct-link mjbvz-pr-template-test-section mousetraps-patch-1 mousetraps-patch-2 revert-1008-i1007 revert-1031-mousetraps-patch-2 source-mapping v1.1.x v1.2.x Nothing to show v1.2.RC v1.2.Dev-7.13.2016 v1.2.Dev-6.24.2016 v1.2.Dev-6.18.2016 v1.2.Dev-6.13.2016 v1.2.Dev-6.11.2016 v1.2.Dev-6.9.2016 v1.2.Beta v1.2Beta v1.2.Alpha2 v1.2.Alpha v1.1.1 v1.1 v1.1RC2 v1.1.RC v1.1.Dev-11.14.2015 v1.1.Dev-10.22.2015 v1.1.Dev-10.20.2015 v1.1.Dev-10.14.2015 v1.1.Dev-9.17.2015 v1.1.Dev-8.4.2015 v1.1.Dev-7.15.2015 v1.1.Dev-6.15.2015 v1.1.Dev-5.13.2015 v1.1.Dev-3.22.2016 v1.1.Dev-03.01.2016 v1.1.Dev-3.1.2016 v1.1.Dev-2.22.2016 v1.1-RC.3 v1.1-RC.2.1 Nothing to show New pull request Latest commit 94b1142 Jul 13, 2016 mjbvz committed on GitHub Merge pull request #1134 from mjbvz/remove-npm-bin-and-supporting-glo… … …bal-package-logic  Remove npm bin Command and Supporting Global Package Logic Permalink Failed to load latest commit information. .github Add testing section to pull request template Jun 21, 2016 Build #53 Add environment setup script to streamline build instructions Apr 25, 2016 Common Add Additional Project info to diagnostics Window Jun 30, 2016 Nodejs Merge pull request #1134 from mjbvz/remove-npm-bin-and-supporting-glo… Jul 13, 2016 Tools/Wix/3.7 remove unnecessary files Apr 26, 2016 .gitattributes Fix corrupted CloudService template files Jun 17, 2016 .gitignore Reorder temp_proj ignore Mar 2, 2016 .tfignore Main -> Nodejs_Main Nov 24, 2014 EnvironmentSetup.ps1 fixed Issue #1083. EnvironmentSetup.ps1 now copies the .targets file to Jun 22, 2016 LICENSE #60 Add LICENSE Apr 9, 2015 README.md Update README.md Jun 27, 2016 RunTests.ps1 Reuse var in runtests.ps Apr 27, 2016 appveyor.yml rebuild Jun 8, 2016 build.root FI to Node.js branch Sep 13, 2013 dirs.proj FI Main to Node.js Dec 3, 2013 README.md NTVS is a free, open source plugin that turns Visual Studio into a Node.js IDE. It is designed, developed, and supported by Microsoft and the community. > Learn more and start developing Node.js applications in Visual Studio NTVS supports editing, Intellisense, profiling, npm, TypeScript, debugging locally and remotely (Windows/MacOS/Linux), as well Azure Web Sites and Cloud Services. Documentation NTVS documentation is available in the NTVS wiki. Microsoft/nodejs-guidelines includes other tips for working with Node.js. Releases Node.js Tools 1.1 - Stable NTVS release (available for Visual Studio 2012, 2013, and 2015) Node.js Tools 1.2 RC - Preview build with better ES6 Support and other improvements (available for Visual Studio 2015 Update 3 RTM) Dev Builds - Includes the most recent changes and bugfixes (available for Visual Studio 2015 and VS 15) Contributions We would love to have you as a contributor! Contributing to NTVS Build Instructions for NTVS This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. License Apache License 2.0 (Apache) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/nodejstools"	""	"true"
"Other (Plugins || Cross-platform || OSS || Free)"	"Visual Studio Code"	"https://www.visualstudio.com/en-us/products/code-vs.aspx"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Visual Studio Code https://www.visualstudio.com MSDN Subscriptions Sign in Products Top Products Visual Studio 2015 Products Visual Studio Enterprise Visual Studio Professional Visual Studio Community Visual Studio Code Visual Studio Team Services Team Foundation Server Other Products Visual Studio Test Professional Team Explorer Everywhere Application Insights MSDN Platforms HockeyApp Visual Studio Express How to Buy Visual Studio Visual Studio Team Services Compare Compare Visual Studio 2015 Offerings Visual Studio Team Services Feature Matrix Features Application Development Mobile Web Cloud Windows Office Tools Games Node.js Visual C++ Python .NET Lifecycle Management DevOps and ALM Agile Software Development Version Control Tools for Java teams Release Management Reporting Cloud-Based Load Testing Continuous Integration Testing Tools Extend and Integrate Visual Studio Visual Studio Team Services Visual Studio Code Downloads Top Downloads Visual Studio Enterprise Visual Studio Community Visual Studio Code Team Foundation Server Extensions and Integrations Visual Studio Tools for Apache Cordova Visual Studio Tools for Unity Node.js Tools for Visual Studio Python Tools for Visual Studio .NET Nuget Packages Visual Studio Gallery Visual Studio Team Services Integrations All Downloads News Support Marketplace Documentation Visual Studio on MSDN Visual Studio Team Services Visual Studio Code Free Visual Studio Visual Studio Code Code editing redefined and optimized for building and debugging modern web and cloud applications. Visual Studio Code is free and available on your favorite platform — Linux, OS X, and Windows. Download Code Documentation Everything you need all in one place Any language, any OS Available on Mac OS X, Linux and Windows — supports >30 programming languages Optimized for modern web Integrated debugging of ASP.NET 5 and Node.js applications Open Source Actively maintained and accepting community contributions Streamlined + powerful A first class keyboard-centric editor that’s lightweight and customizable   OS X, Linux, and Windows Runs natively on the operating system of your choice Get up and running in minutes and be productive no matter what OS you are using. Regular updates are simple to install and released on all platforms at the same time. The perfect complement to your favorite developer tools. Get Code for your OS Language coverage 30+ languages and counting, syntax highlighting, bracket matching Syntax colorization, highlighting, and bracket matching make Code a great editor for all your programming tasks. Visual Studio Code supports JavaScript, C#, C++, PHP, Java, HTML, R, CSS, SQL, Markdown, TypeScript, LESS, SASS, JSON, XML, and Python as well as many other common file formats. See our full list of languages Code-focused editing Fast and keyboard-centric, advanced editing with multiple cursors A lightweight editor with first-class keyboard-centric gestures means you never need to reach for the mouse. Instantly open large or small files and focus on your code without distraction. Leverage advanced editing features such as multiple cursors, autosave, and more. Learn more about editing Code navigation RegEx find, outlining, peek definition Keep in context as you move through large code files and across your code base. The enhanced scrollbar highlights issues in the current file, integrated find supports regular expressions. Code outlining, navigate to and peek definition help you get where you need to be fast. Learn more about code navigation Code understanding IntelliSense, linting, refactoring IntelliSense describes APIs as you type, auto-completing to increase speed and accuracy. Quick info tool tips let you inspect API definitions, and ""squiggles"" let you know about issues: often showing them as you type. Learn more about code understanding Debugging Break, watch, inspect Diagnose issues with your application using integrated debugging tools for Node.js, TypeScript, and JavaScript. Set breakpoints in your code, break on exceptions, watch variables, step through your code, or navigate up the call stack — as well as attaching to local running processes. Learn more about debugging Git version control Commit, diff, pull and push Embrace modern workflows with the power and flexibility of Git. See changed files, diffs, and make commits right from within the editor. Connect with the entire Git universe by pulling and pushing code to any remote — GitHub, Azure Web Apps, Visual Studio Team Services, and more. Learn more about Git support ASP.NET 5 and Node.js Rich support for modern web technologies Visual Studio Code supports the end-to-end development workflow for ASP.NET 5 and Node.js applications. Full IntelliSense, debugging support, and more — across all supported operating systems. Including many of your favorite frameworks such as D3, JQuery, Express, Angular, grunt, gulp, and more. Find out how to work with ASP.NET 5 Find out how to work with Node.js Make it yours Choose your theme, customizable key bindings, and more It’s one thing to be able to work with any source file, any Git remote and on your favorite OS. Code allows you to configure the environment the way you want with support for multiple UI themes, custom key-bindings, and more. Find out how to customize Code Extensible Languages, features, themes Go beyond built-in customizations with additional extensions from the Visual Studio Marketplace, or create your own extension with Yeoman. Find extensions Find out how to create an extension Learn more Visual Studio Code site Visual Studio Code documentation Visual Studio Code videos Resources Visual Studio Code on Twitter Debugging with Visual Studio Code Editing with Visual Studio Code Related Marketplace Find extensions to enhance and customize Visual Studio Code. Read more False             Is this page helpful? Your feedback about this content is important. Let us know what you think. Yes No Additional feedback? 1500 characters remaining Submit Skip this Thank you! We appreciate your feedback. Visual Studio My Visual Studio Manage Visual Studio Marketplace Integrate Related Sites Visual Studio documentation MSDN Home Channel 9 Azure Visual Studio Blog Products Visual Studio Visual Studio Team Services Visual Studio Code Download Compare How to Buy Support Get Support Submit a Bug Submit an Idea Forums United States (English) Contact us Jobs Privacy Terms of use Trademarks © 2016 Microsoft Third party scripts and code linked to or referenced from this website are licensed to you by the parties that own such code, not by Microsoft. See ASP.NET Ajax CDN Terms of Use – http://www.asp.net/ajaxlibrary/CDN.ashx."	"null"	"null"	""	"true"
"Other (Plugins || Cross-platform || OSS || Free)"	"PhpStorm"	"https://www.jetbrains.com/phpstorm/download/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Download PhpStorm :: The most intelligent PHP IDE All Tools IDEs .NET & Visual Studio Team Tools Languages Store Support We Are JetBrains Check out our IDEs IntelliJ IDEA The most intelligent Java IDE PhpStorm Lightning-smart PHP IDE PyCharm Python IDE for professional developers RubyMine The most intelligent Ruby IDE WebStorm The smartest JavaScript IDE AppCode Smart IDE for iOS/OS X development CLion A smart cross-platform IDE for C and C++ DataGrip Your Swiss Army knife for databases & SQL Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for .NET and Visual Studio ReSharper Visual Studio extension for .NET developers ReSharper C++ Visual Studio extension for C++ developers dotTrace .NET performance profiler dotMemory .NET memory profiler dotCover .NET unit test runner and code coverage tool dotPeek Free .NET decompiler and assembly browser Rider A cross-platform C# IDE based on IntelliJ platform and ReSharper Check out our tools for teams TeamCity Powerful Continuous Integration out of the box YouTrack Issue tracker designed for development teams Upsource Code review and repository browsing Hub JetBrains team tools, integrated Check out our languages and related tools Kotlin Programming language for JVM & Android MPS DSL development environment Store Pricing and licensing options for everyone, from free plans for students to volume licensing for companies. JetBrains Toolbox Team Tools Purchase Terms FAQ Contact Sales Support Questions or problems? We want to help! Dedicated support teams can answer product- or purchase-related questions. Technical Support Contact Sales Commitment Community Support Webinars Early Access Programs We Are JetBrains We make professional software development a more productive and enjoyable experience. About Us People Customers & Awards Press Room Partners & Resellers Technology Partners Careers Contacts Search PhpStorm What's New Features Docs & Demos Buy Download Version: Build: Released: System requirements Installation Instructions Previous versions Download PhpStorm OS X Windows Linux Download PhpStorm includes bundled evaluation license key for a free 30-day trial. System requirements Mac OS X 10.8 or higher, including 10.9 (Mavericks) 1 GB RAM minimum 2 GB RAM recommended 1024x768 minimum screen resolution Installation Instructions Download the PhpStorm-.dmg Mac OS X Disk Image file Mount it as another disk in your system Copy PhpStorm to your Applications folder Download PhpStorm includes bundled evaluation license key for a free 30-day trial. System requirements Microsoft 10/8/7/Vista/2003/XP (incl. 64-bit) 1 GB RAM minimum 2 GB RAM recommended 1024x768 minimum screen resolution Installation Instructions Run the PhpStorm-.exe file that starts the Installation Wizard Follow all steps suggested by the wizard. Please pay special attention to the corresponding installation options Download PhpStorm includes bundled evaluation license key for a free 30-day trial. System requirements 1 GB RAM minimum, 2 GB RAM recommended 1024x768 minimum screen resolution GNOME or KDE desktop Installation Instructions Unpack the PhpStorm-.tar.gz file using the following command: tar xfz PhpStorm-.tar.gz Run PhpStorm.sh from the bin subdirectory Also on JetBrains My account Newsletter Contact Follow JetBrains © 2000—2016 JetBrains s.r.o. All rights reserved. Developed with drive and IntelliJ IDEA Privacy Policy | Terms of Use"	"null"	"null"	""	"true"
"Other (Plugins || Cross-platform || OSS || Free)"	"CATS"	"http://jbaron.github.io/cats/"	"is an IDE for TypeScript and Web developers by @jbaron"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"CATS View on GitHub CATS Code Assistant for TypeScript Download this project as a .zip file Download this project as a tar.gz file CATS CATS is an IDE for TypeScript and Web developers. CATS is open source software released under the Apache 2.0 license and it runs on Linux, Windows and OS X. CATS itself is also written in TypeScript, so you can easily customize it if required. And although still work in progress, CATS is already very usable and has built-in support for the following features: Intelligent code editor and code completion for TypeScript sources. Syntax highlighting for over 110 languages (TextMate/Sublime Text.tmlanguage files can be imported). Support for code snippets. Support for refactoring and smart navigation. TypeScript compilation to JavaScript. Validation of the source code while you are typing. Linter support for TypeScript and JavaScript. Generate API documentation based on the comments in the source code. Editing features like folding, indentation and code formatting. Running your application from within IDE and using the WebKit debugger to debug. Support for external build systems like Grunt, Jake, Gulp and Makefiles. Usage The easiest way to start using CATS it to follow these simple steps: In case you haven't already installed nodewebkit on your machine, do that first. In case you have nodejs installed, you can install nodewebkit by typing the following command (using npm, the node package manager):   npm install -g nodewebkit  Alternatively you can download Nodewebkit from the following page: Nodewebkit downloads. Download the CATS binary package (it is a file called cats-x.y.z.nw). There are two versions available, a stable version meant for daily work and an unstable version if you want to try out the latest and greatest features. Download either one from the following location: CATS releases After you installed Nodewebkit, just go to the directory where you downloaded the CATS package and type: nodewebkit cats-x.y.z.nw If you already have a directory with TypeScript files, just select that directory from ""Open project..."" to start editing your files. Othwewise you can open any directory as a project and start adding the different typefiles as you go along with your project. There are some commandline paramters you can use. For example to open CATS with a specific project, use: nodewebkit cats-x.y.z.nw --project </path/projectDirectory> Please note that you have to specify the full path to the project directory you want to open. To open CATS with the same project as last time you opened it, you can use the --restore option: nodewebkit cats-x.y.z.nw --restore Building In case you want to make changes to CATS and want to build new versions, there are a few additional steps to perform. Ensure that you have Git and Node.js installed. Clone a copy of the CATS repo: git clone https://github.com/jbaron/cats.git  Change to the cats directory: cd cats  Install Nodewebkit, TypeScript, Jake and the module dependencies: npm install -g nodewebkit npm install -g typescript npm install -g jake npm install  Use one of the following to build: jake lib/main.js            # Builds the main frontend module for CATS jake lib/tsworker.js        # Builds the Web workers module jake clean                  # Cleans the compiler output, declare files, and tests jake default                # Builds the full CATS application jake -T                     # List the above commands.   Configuration CATS will look for a file in the project directory called: "".settings/config.json"". If found, CATS will use the values configured in this file, otherwise it will use some sensible default values. You can edit this file (or the default values if you don't have this file yet) from the main menu. Goals One of the main goals of CATS is to make the developer that is used to IDE's like Eclipse, NetBeans, Visual Studio or IntelliJ, feel right at home. So the same support you got from your IDE when you developed in Java or C#, is now available for TypeScript projects. However a lot of effort is spent to assure CATS deosn't become a resource hog. So while designing and developing CATS, performance is one of the key aspects. In fact, CATS runs fine on older hardware. Bugs and Issues In case you encounter an issue, you can open a ticket on Github. Also enhancement requests can be entered here: Github issue tracker Couldn't have done it without .... There is not a lot of documentation yet explaining the structure of CATS and how the different parts work together. So the more surprised we were when we received some pull request that added functionality or fixed some bugs. So thanks to everyone who already contributed to this project. And of course some of the main 3rd party components that we have used within CATS and couldn't have done without: TypeScript (of course), developed by Microsoft. Qooxdoo, an excellent JavaScript library with many great UI widgets. ACE, an embeddable code editor written in JavaScript. The main developers are Cloud9 and Mozilla. Node-webkit. This is a great initiative from Intel to allow Node libraries to be used within a web page. CATS use this to read and write local files without the need for a server-side component. TSLint. A linter for the TypeScript language that helps to improve your code base even further. TypeDoc. This is a documentation generator for TypeScript projects that supports theming and a lot of other very impressive features. jsUML2. This is library for creating UML diagrams done in pure JavaScript. Todo The todo list items are tracked as enhancement requests on GitHub. You can check them out at: Todo List There is also a milestone planning in there when some enhancements should be delivered. CATS maintained by jbaron Published with GitHub Pages"	"null"	"null"	"is an IDE for TypeScript and Web developers by @jbaron"	"true"
"Other (Plugins || Cross-platform || OSS || Free)"	"TypeScript Sublime Plugin"	"https://github.com/Microsoft/TypeScript-Sublime-Plugin"	"by @Microsoft"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"680"	"77"	"70"	"GitHub - Microsoft/TypeScript-Sublime-Plugin: IO wrapper around TypeScript language services, allowing for easy consumption by editor plugins Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 77 Star 680 Fork 70 Microsoft/TypeScript-Sublime-Plugin Code Issues 66 Pull requests 4 Wiki Pulse Graphs IO wrapper around TypeScript language services, allowing for easy consumption by editor plugins 659 commits 11 branches 15 releases 27 contributors JavaScript 96.4% Python 3.6% JavaScript Python Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ColorizeAnyKeyword asyncSignatureHelp fixCompletionIssue170 fixInsertKeyParameter fixupReadme master organizeFiles release-0.1 release-0.1.8 tooltips zrh/protocolAllignment Nothing to show 0.1.14 0.1.13 0.1.12 0.1.11 0.1.10 0.1.9 0.1.8 0.1.7 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0 Nothing to show New pull request Latest commit b4d3427 Jun 28, 2016 zhengbli committed on GitHub Merge pull request #487 from Microsoft/updateTmlanguage … Update tmlanguage files Permalink Failed to load latest commit information. icons Moving the sublime TypeScript folder contents to the root Feb 20, 2015 messages Minor change Jun 23, 2015 screenshots Add screenshots Jul 22, 2015 snippets Remove extra newline in log snippet Feb 17, 2016 tsserver Update tsserver to release-1.8 Feb 26, 2016 typescript Delay invocations of get_popup_manager Feb 29, 2016 .gitignore Stop event listenrs from running if LS is disabled Nov 25, 2015 .no-sublime-package Fix issues due to sublime packaging Apr 10, 2015 Comments.tmPreferences Enable all snippets and custom commands to work with tsx source files. Sep 14, 2015 Default (Linux).sublime-keymap Enable all snippets and custom commands to work with tsx source files. Sep 15, 2015 Default (OSX).sublime-keymap Enable all snippets and custom commands to work with tsx source files. Sep 15, 2015 Default (Windows).sublime-keymap Stop event listenrs from running if LS is disabled Nov 26, 2015 Default.sublime-keymap Enable all snippets and custom commands to work with tsx source files. Sep 15, 2015 ErrorList.YAML-tmLanguage Polish the errorlist panel and update the tsserver to 1.5 release Jun 18, 2015 ErrorList.hidden-tmLanguage Polish the errorlist panel and update the tsserver to 1.5 release Jun 18, 2015 FindRefs.YAML-tmLanguage Added configuration request. The host can send this request to inform Mar 16, 2015 FindRefs.hidden-tmLanguage Added configuration request. The host can send this request to inform Mar 16, 2015 FindRefs.hidden-tmTheme Hooking the mouse (double-click) in the reference view to go to the r… Feb 24, 2015 FindRefs.sublime-settings Moving the sublime TypeScript folder contents to the root Feb 20, 2015 LICENSE Initial commit Dec 15, 2014 Main.sublime-menu Make the menu items work with cloned plugin Nov 17, 2015 Preferences.sublime-settings Disable auto-format be default Mar 4, 2016 README.md Update README.md Jun 2, 2016 TypeScript Indent.YAML-tmPreferences Enable all snippets and custom commands to work with tsx source files. Sep 15, 2015 TypeScript Indent.tmPreferences Enable all snippets and custom commands to work with tsx source files. Sep 15, 2015 TypeScript.YAML-tmLanguage update tmlanguage files Jun 27, 2016 TypeScript.sublime-build Enable all snippets and custom commands to work with tsx source files. Sep 15, 2015 TypeScript.sublime-commands Use ""Go To Definition"" instead of ""GoToDefinition"". Aug 26, 2015 TypeScript.sublime-settings Remove force ts file to translate tabs to spaces. May 4, 2015 TypeScript.tmLanguage update tmlanguage files Jun 27, 2016 TypeScriptReact.YAML-tmLanguage update tmlanguage files Jun 27, 2016 TypeScriptReact.sublime-settings Add TypeScriptReact.sublime-settings to enable autocomplete in tsx fi… Sep 14, 2015 TypeScriptReact.tmLanguage update tmlanguage files Jun 27, 2016 main.py Merge pull request #406 from zhengbli/addSwitchOffLS Feb 24, 2016 messages.json Add message for 0.1.5 Jun 23, 2015 popup.html Shoud multi-line comments in signature tooltip Nov 19, 2015 README.md TypeScript Plugin for Sublime Text The plugin uses an IO wrapper around the TypeScript language services to provide an enhanced Sublime Text experience when working with TypeScript code. Requirements The plug-in uses Node.js to run the TypeScript server. The plug-in looks for node in the PATH environment variable (which is inherited from Sublime). If the 'node_path' setting is present, this will override the PATH environment variable and the plug-in will use the value of the 'node_path' setting as the node executable to run. See more information in the tips. Installation If using Package Control for Sublime Text, simply install the TypeScript package. Alternatively, you can clone the repo directly into your Sublime plugin folder. For example, for Sublime Text 3 on a Mac this would look something like: cd ~/""Library/Application Support/Sublime Text 3/Packages"" git clone --depth 1 https://github.com/Microsoft/TypeScript-Sublime-Plugin.git TypeScript  And on Windows: cd ""%APPDATA%\Sublime Text 3\Packages"" git clone --depth 1 https://github.com/Microsoft/TypeScript-Sublime-Plugin.git TypeScript  (--depth 1 downloads only the current version to reduce the clone size.) Note if you are using the portable version of Sublime Text, the location will be different. (See http://docs.sublimetext.info/en/latest/basic_concepts.html#the-data-directory for more info). IMPORTANT If you already have a package called TypeScript installed, either remove this first, or clone this repo to a different folder, else module name resolution can break the plugin. Platform support OS: The plugin has identical behavior across Windows, Mac, and Linux; Sublime Text version: The plugin supports both ST2 and ST3. However, some features are only available in ST3: Tool tips Error list On Windows with ST2, you may see a ""plugin delay"" message upon startup. This happens because ST2 does not call ""plugin_loaded()"", so the TypeScript server process is started from within an event handler. Where possible, the use of a Sublime Text 3 build >= 3070 is recommended, as this provides a popup API used for tool tips. Features The below features are available via the keyboard shortcuts shown, or via the Command Palette (^ means the ctrl key): Feature Shortcut Rename ^T ^M Find references ^T ^R Next reference ^T ^N Prev reference ^T ^P Format document ^T ^F Format selection ^T ^F Format line ^; Format braces ^ Shift ] Navigate to symbol ^ Alt R Go to definition ^T^D or F12 Trigger completion ^Space Trigger signature help Alt+, See previous signature in the tooltip Alt + up See next signature in the tooltip Alt + down Paste and format ^V or ⌘V Quick info ^T ^Q Build (Win)^B or F7, (OSX) ⌘B or F7 Error list (via Command Palette) The ""format on key"" feature is on by default, which formats the current line after typing ;, } or enter. To disable it, go to Preferences -> Package Settings -> TypeScript -> Plugin Settings - User, and add ""typescript_auto_format"": false to the json file. For further information about the keyboard shortcuts, please refer to the Default.sublime-keymap file for common shortcuts and Default (OSX).sublime-keymap, Default (Windows).sublime-keymap, Default (Linux).sublime-keymap for OS-specific shortcuts. Project System The plugin supports two kinds of projects: Inferred project For loose TS files opened in Sublime, the plugin will create an inferred project and include every files that the current file refers to. Configured project The plugin also supports representing a TypeScript project via a tsconfig.json file. If a file of this name is detected in a parent directory, then its settings will be used by the plugin. Screenshots Project error list Signature popup (Requires Sublime Text 3 build >= 3070) Navigate to symbol Format Rename Find all references Quick info Build configured project Build loose file Reporting Issues Issues are being tracked via the GitHub Issues page for the project, and tagged with the appropriate issue type. Please do log issues for any bugs you find or enhancements you would like to see (after searching to see if such as issue already exists). We are excited to get your feedback and work with the community to make this plugin as awesome as possible. Note about .tmLanguage related issues As the TypeScript and TypeScriptReact .tmLanguage definition files are shared across multiple editors including Sublime Text, Atom-TypeScript, and Visual Studio Code, we decided to create a dedicated repo for these files to combine the efforts for improvement. The new repo is at https://github.com/Microsoft/TypeScript-TmLanguage, and all future tmLanguage-related issues will be tracked there and ported back to this repo. Using nightly TypeScript builds The plugin can be configured to load a different TypeScript version other than the one bundled along. To do that, update the Settings - User file with the following: ""typescript_tsdk"": ""<path to your folder>/node_modules/typescript/lib"" Tips and Known Issues See tips and known issues in the wiki page. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/TypeScript-Sublime-Plugin"	"by @Microsoft"	"true"
"Other (Plugins || Cross-platform || OSS || Free)"	"Atom TypeScript"	"https://github.com/TypeStrong/atom-typescript"	"by @TypeStrong"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"646"	"37"	"126"	"GitHub - TypeStrong/atom-typescript: The only TypeScript package you will ever need Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 37 Star 646 Fork 126 TypeStrong/atom-typescript Code Issues 253 Pull requests 1 Pulse Graphs The only TypeScript package you will ever need https://atom.io/packages/atom-typescript 1,760 commits 10 branches 376 releases 60 contributors TypeScript 50.4% JavaScript 40.3% CoffeeScript 6.8% CSS 2.5% TypeScript JavaScript CoffeeScript CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags feat/ts-1.5 feat/ui-awesomeness feat/worker-running-averages grammar/nuke local-babel master spike/node_modules-1 spike/node_modules-2 spike/node_modules-3 spike/node_modules-4 Nothing to show v10.1.3 v10.1.2 v10.1.1 v10.1.0 v10.0.1 v10.0.0 v9.0.0 v8.11.0 v8.10.2 v8.10.1 v8.10.0 v8.9.2 v8.9.1 v8.9.0 v8.8.1 v8.8.0 v8.7.0 v8.6.0 v8.5.0 v8.4.0 v8.3.2 v8.3.1 v8.3.0 v8.2.0 v8.1.0 v8.0.0 v7.16.1 v7.16.0 v7.15.0 v7.14.3 v7.14.2 v7.14.1 v7.14.0 v7.13.0 v7.12.1 v7.12.0 v7.11.1 v7.11.0 v7.10.2 v7.10.1 v7.10.0 v7.9.0 v7.8.0 v7.7.2 v7.7.1 v7.7.0 v7.6.5 v7.6.4 v7.6.3 v7.6.2 v7.6.1 v7.6.0 v7.5.1 v7.5.0 v7.4.6 v7.4.5 v7.4.4 v7.4.3 v7.4.2 v7.4.1 v7.4.0 v7.3.0 v7.2.0 v7.1.5 v7.1.4 v7.1.3 v7.1.2 v7.1.1 v7.1.0 v7.0.3 v7.0.2 v7.0.1 v7.0.0 v6.0.18 v6.0.17 v6.0.16 v6.0.15 v6.0.14 v6.0.13 v6.0.12 v6.0.11 v6.0.10 v6.0.9 v6.0.8 v6.0.7 v6.0.6 v6.0.5 v6.0.4 v6.0.3 v6.0.2 v6.0.1 v6.0.0 v5.5.1 v5.5.0 v5.4.2 v5.4.1 v5.4.0 v5.3.0 v5.2.9 v5.2.8 Nothing to show New pull request Latest commit 917d218 Jul 15, 2016 Basarat Ali Syed Prepare 10.1.3 release Permalink Failed to load latest commit information. dist Add a couple tsconfig options to atom-typescript (#1011) Jul 15, 2016 docs Update faq.md Jun 30, 2016 grammars Issue 818/angular component html highlighing (#948) May 15, 2016 images file semantic view complete Jul 23, 2015 keymaps fix(keymaps) keymaps were broken for `.tsx` files after scope rename Oct 23, 2015 lib Add a couple tsconfig options to atom-typescript (#1011) Jul 15, 2016 menus fix(keymaps) stronger specifity of build and go to declaration commands Mar 4, 2015 scripts Issue 818/angular component html highlighing (#948) May 14, 2016 settings fix(tsx) prefer `//` comments same as .ts Nov 3, 2015 snippets Support `source.tsx` with styles and snippets Oct 21, 2015 styles #726 adds show-type command for type info at cursor (#970) Jun 6, 2016 views feat(tooltip) no longer depend upon 'tooltips.less' as it might not b… Apr 15, 2015 .gitattributes (otherwise Jason showed up) Jul 11, 2015 .gitignore Start using `typings` Nov 22, 2015 .travis.yml travis hates me Nov 20, 2015 CONTRIBUTING.md minor Jan 28, 2016 LICENSE.md initial commit Jun 21, 2014 README.md Update README.md Feb 5, 2016 VSProj.njsproj Move to using `glob` library (optimised globbing) Oct 7, 2015 VSProj.sln Added visual studio support to get the ball rolling Jan 20, 2015 globals.js have working `ref` and `import` snippets and completions Feb 27, 2015 package.json Prepare 10.1.3 release Jul 15, 2016 pull_request_template.md Create pull_request_template.md Jul 15, 2016 typings.json chore(compile) move more stuff to typings Jan 25, 2016 README.md Atom TypeScript JavaScript developers can now just open a .ts file and start hacking away like they are used to. No grunt no Visual Studio. Just pure coding. Installation Install atom. apm install atom-typescript (apm needs git in your path) Fire up atom. Open a TypeScript file. Potentially wait for further installs (just apm install linter if its not there already). Additional Notes: Some packages we love. Reviews Featured on the TypeScript home page under tools http://www.typescriptlang.org/ and demoed by Anders Hejlsberg. ""I was shocked at how good it felt to poke around on the compiler with it."" Jonathan Turner ""And guess what, it worked perfectly. Like everything else! Faster than Visual Studio!"" Daniel Earwicker ""It's a thing of beauty - they had me at 'Type information on hover'. Discovering tsconfig.json support as well was just an enormous bonus."" John Reilly ""This may be your best option for editing TypeScript at the moment - very nice!"" Rasmus Schultz Add yours! Features Autocomplete Live error analysis Type information on hover Compile on save Project Context Support (tsconfig.json) Project Build Support package.json Support React Support Format code (configurable to be on save) Goto Declaration Find References Block comment and uncomment Goto history (goto next/previous error in open files, goto next/previous build) Auto indent for new lines TypeScript context menu Symbols in Project Symbols in File Semantic View Rename refactoring Quick Fix Toggle Breakpoint Common Snippets import / /// <reference relative path resolution Output Toggle AST visualizer Dependency View Sync FAQ Located online : https://github.com/TypeStrong/atom-typescript/blob/master/docs/faq.md Feature Details Auto Complete Internally using AutoComplete+. Just start typing and hints will show up. Or you can explicitly trigger it using ctrl+space or cmd+space. Press tab to make a selection. Type information on hover Just hover Compile on save TypeScript files will be compiled on save automatically. Different notifications are given if emit was successful or not. If you need to disable this feature, add ""compileOnSave"": false in your tsconfig.json. Project Support Supported via tsconfig.json which is going to be the defacto Project file format for the next versions of TypeScript. It also supports filesGlob which will expand files for you based on minmatch|glob|regex (similar to grunt). Project Build Support Shortcut: F6. If there are any errors they are shown as well. NPM Module Support We have a sample NPM module : https://github.com/basarat/ts-npm-module (trick : in tsconfig have ""declaration"" : true an in package.json have a typings field pointing to the main file) and its usage is demoed in https://github.com/basarat/ts-npm-module-consume. React Support Configuration tips Covered here : http://basarat.gitbooks.io/typescript/content/docs/jsx/tsx.html Html to TSX Format Code Shortcut : ctrl+alt+l or cmd+alt+l. Will format just the selection if you have something selected otherwise it will format the entire file. Format on save is covered here Go to Declaration Shortcut : F12. Will open the first declaration of the said item for now. (Note: some people call it Go to Definition) Find References Shortcut shift+F12. Also called find usages. Block Comment and Uncomment ctrl+/ or cmd+/. Does a block comment / uncomment of code. Go to Next / Go to Previous f8 and shift+f8 respectively. This will go to next/previous errors in open files OR build error OR references based on which tab you have selected. Context menu Quickly toggle the TypeScript panel OR select active TypeScript panel tab and other stuff using the context menu. ctrl+; or cmd+;. Symbols View Integrates with atom's symbols view (ctrl+r or cmd+r) to provide you with a list of searchable symbols in the current file. Semantic View A bird's eye view of the current file. Use command toggle semantic view. The view updates while you edit the code. You can also click to jump to any portion of the file. Project Symbols View Also called Go To Type in other IDEs. Integrates with atom's project level symbols (ctrl+shift+r or cmd+shift+r) to provide you with a list of searchable symbols in the entire typescript project. Refactoring Rename f2 to initiate rename. enter to commit and esc to cancel. Quick Fix Press the TypeScript: Quick Fix shortcut alt+enter at an error location to trigger quick fixes. Select the quick fix you want and press enter to commit e.g Add class members More Quick fixes We are actively adding quick fixes so go here for an up to date list. Toggle Breakpoint Use command TypeScript: Toggle Breakpoint shortcut f9: tsconfig validation We will validate it and help you to fix it :) Snippets Relative Paths Relative paths have traditionally been a pain, not anymore. Use import or ref and press tab to trigger snippet. ref import Note that within the path string you get autocomplete (ctrl+space/cmd+space) for all the files in the project by filename (works for both ref and import). Output Toggle ctrl+shift+m to toggle the output compiled JS file for a give TypeScript file. The keyboard shortcut is consistent with atom's markdown preview. AST Visualizer Command : Typescript: Ast. Useful when authoring new features. Also command : TypeScript: Ast Full that includes the trivia (punctuation, comments etc. received from ts.Node.getChildren()) as well. Dependency View Command : Typescript: Dependency View. A dependency viewer for insight into the project if you use external modules. You can zoom, pan, drag points around and hover over nodes. (more details) Sync We try to keep as much of the stuff in sync while you edit code. However in dire circumstances: a soft sync is done when you save a file ctrl+s and we will completely reprocess the active file. This might not fix stuff if the error is because of some other file on the file system. ctrl+' or cmd+' : If you deleted files in the background or renamed them or jumped git branches or something weird just happened then sync. No need to restart your IDE :). Contributing Look at CONTRIBUTING.md for curiosity. We work hard to keep the code as approachable as possible and are highly keen on helping you help us. Changelog Breaking changes available online. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/TypeStrong/atom-typescript"	"by @TypeStrong"	"true"
"Other (Plugins || Cross-platform || OSS || Free)"	"TypeScript Interactive Development Environment for Emacs"	"https://github.com/ananthakumaran/tide"	"by @ananthakumaran"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"140"	"10"	"13"	"GitHub - ananthakumaran/tide: Tide - TypeScript Interactive Development Environment for Emacs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 140 Fork 13 ananthakumaran/tide Code Issues 5 Pull requests 0 Pulse Graphs Tide - TypeScript Interactive Development Environment for Emacs 109 commits 2 branches 0 releases 7 contributors JavaScript 99.0% Other 1.0% JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master typescript-2.0 Nothing to show Nothing to show New pull request Latest commit fbdef5d Jul 13, 2016 ananthakumaran don't delay the buffer configuration … fixes #43  Looks like `hack-local-variables-hook` is not much reliable, it can be disabled or it might get delayed(sometimes flycheck runs before this hook). Run the tide-configure-buffer right away, this might send the command twice to the server, but it's better than none. Permalink Failed to load latest commit information. example add a d.ts file Jun 25, 2016 tsserver update to 2.0 beta Jul 12, 2016 .gitignore add pkg file also Jun 10, 2015 Cask add pkg file also Jun 10, 2015 Makefile remove geterr.patch Jun 25, 2016 README.md add info about how to install company Jul 12, 2016 tide.el don't delay the buffer configuration Jul 13, 2016 README.md Tide TypeScript Interactive Development Environment for Emacs screencast Installation Install node.js v0.12.0 or greater. Tide is available in melpa. You can install tide via package-install M-x package-install [ret] tide Configuration TypeScript (defun setup-tide-mode ()   (interactive)   (tide-setup)   (flycheck-mode +1)   (setq flycheck-check-syntax-automatically '(save mode-enabled))   (eldoc-mode +1)   ;; company is an optional dependency. You have to   ;; install it separately via package-install   ;; `M-x package-install [ret] company`   (company-mode +1))  ;; aligns annotation to the right hand side (setq company-tooltip-align-annotations t)  ;; formats the buffer before saving (add-hook 'before-save-hook 'tide-format-before-save)  ;; format options (setq tide-format-options '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil)) ;; see https://github.com/Microsoft/TypeScript/blob/cc58e2d7eb144f0b2ff89e6a6685fb4deaa24fde/src/server/protocol.d.ts#L421-473 for the full list available options  (add-hook 'typescript-mode-hook #'setup-tide-mode) TSX (require 'web-mode) (add-to-list 'auto-mode-alist '(""\\.tsx\\'"" . web-mode)) (add-hook 'web-mode-hook           (lambda ()             (when (string-equal ""tsx"" (file-name-extension buffer-file-name))               (setup-tide-mode)))) Tide also provides support for editing js & jsx files. Tide checkers javascript-tide and jsx-tide are not enabled by default for js & jsx files. It can be enabled by setting flycheck-checker JavaScript (add-hook 'js2-mode-hook #'setup-tide-mode) JSX (require 'web-mode) (add-to-list 'auto-mode-alist '(""\\.jsx\\'"" . web-mode)) (add-hook 'web-mode-hook           (lambda ()             (when (string-equal ""jsx"" (file-name-extension buffer-file-name))               (setup-tide-mode)))) Notes Make sure to add tsconfig.json or jsconfig.json in the project root folder. tsserver mangles output sometimes issue - #2758, which will result in json parse error. Try node version 0.12.x if you get this error. Commands Keyboard shortcuts Description C-c d Show documentation for the symbol at point. M-. Jump to the definition of the symbol at point. With a prefix arg, Jump to the type definition. M-, Return to your pre-jump position. M-x tide-restart-server Restart tsserver. Currently tsserver doesn't pickup tsconfig.json file changes. This would come in handy after you edit tsconfig.json. M-x tide-references List all references to the symbol at point in a buffer. References can be navigated using n and p. Press enter to open the file. M-x tide-rename-symbol Rename all occurrences of the symbol at point. M-x tide-format Format the current region or buffer. Features ElDoc Auto complete Flycheck Jump to definition, Jump to type definition Find occurrences Rename symbol Imenu Debugging Tide uses tsserver as the backend for most of the features. It writes out a comprehensive log file which can be captured by setting tide-tsserver-process-environment variable. (setq tide-tsserver-process-environment '(""TSS_LOG=-level verbose -file /tmp/tss.log"")) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ananthakumaran/tide"	"by @ananthakumaran"	"true"
"Other (Plugins || Cross-platform || OSS || Free)"	"TypeScript IDE for Eclipse"	"http://typecsdev.com/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"61"	"13"	"13"	"GitHub - axmor/typecs: TypEcs - TypeScript IDE for Eclipse Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 61 Fork 13 axmor/typecs Code Issues 30 Pull requests 1 Wiki Pulse Graphs TypEcs - TypeScript IDE for Eclipse 249 commits 4 branches 4 releases 10 contributors JavaScript 72.4% Java 25.8% Other 1.8% JavaScript Java Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master new_bridge_comm ts1.5 Nothing to show v4.0.0 v3.1.0 v3.0.0 v1.5.0 Nothing to show New pull request Latest commit f89f0f7 Jun 17, 2016 p-kudrin revert dependency Permalink Failed to load latest commit information. resources/logo ETSP-88: Implement ""Call Hierarchy"" view (#28) Dec 19, 2014 src revert dependency Jun 17, 2016 tools ETSP-88: Implement ""Call Hierarchy"" view (#28) Dec 19, 2014 .gitignore #78: Renaming ts-files breaks typescript-editor-support Mar 29, 2016 .hgignore \#35 Added initial TypeScript 1.4 support drop legacy version support Feb 9, 2015 README.md Update README.md Aug 11, 2015 epl-v10.html ETSP-88: Implement ""Call Hierarchy"" view (#28) Dec 19, 2014 README.md Installation Required software: Java 7, Eclipse Kepler 4.3 or higher, Node.js. In Eclipse go to Help → Install New Software... Provide the installation location http://axmor.github.io/typecs/stable/update-site/ Mark the plugin version you would like to install then press Next... On Install Details press Next... Review and confirm the plugin to install. Restart Eclipse. New and Noteworthy v4.0 - New and Noteworthy v3.0 - New and Noteworthy v2.0 - New and Noteworthy v1.5 - New and Noteworthy Plugin Features NodeJS and WebRemote Debug Support Syntax highlighting Code Completion Code Outline Find References Rename / Refactor Open Type Code Compilation Format Code Comment Code Open Declaration Features Details Development builds Zipped Update Site Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/axmor/typecs"	""	"true"
"Other (Plugins || Cross-platform || OSS || Free)"	"TypeScript Syntax for VIM"	"https://github.com/leafgarland/typescript-vim"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"343"	"10"	"59"	"GitHub - leafgarland/typescript-vim: Typescript syntax files for Vim Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 343 Fork 59 leafgarland/typescript-vim Code Issues 7 Pull requests 1 Pulse Graphs Typescript syntax files for Vim 95 commits 1 branch 0 releases 27 contributors VimL 100.0% VimL Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 76e27b7 Jul 14, 2016 leafgarland Highlight expressions in interpolated strings. … Fixes issue #54. Based on PR #73 and the comment in that PR from @romgrk. Permalink Failed to load latest commit information. compiler Add config option for tsc binary path Jan 11, 2015 ftdetect Fix late night typo May 21, 2016 ftplugin Add ts extension to suffixes for gf Mar 31, 2016 indent fix Fixedgq: remove invalid semicolon (#83) May 23, 2016 syntax Highlight expressions in interpolated strings. Jul 14, 2016 README.md Highlight expressions in interpolated strings. Jul 14, 2016 vimshot01.png Extra readme in my README Oct 4, 2012 README.md Typescript Syntax for Vim Syntax file and other settings for TypeScript. The syntax file is taken from this blog post. Checkout Tsuquyomi for omni-completion and other features for TypeScript editing. Install The simplest way to install is via a Vim add-in manager such as Plug, Vundle or Pathogen. Pathogen git clone https://github.com/leafgarland/typescript-vim.git ~/.vim/bundle/typescript-vim  If you want to install manually then you need to copy the files from this repository into your vim path, see the vim docs for :help runtimepath for more information. This might be as simple as copying the files and directories to ~/.vim/ but it depends on your Vim install and operating system. Usage Once the files are installed the syntax highlighting and other settings will be automatically enabled anytime you edit a .ts file. Indenting This plugin includes a custom indenter (based on indent/java.vim), it works pretty well but there are cases where it fails. If these bother you or want to use other indent settings you can disable it by setting a flag in your .vimrc: let g:typescript_indent_disable = 1 Compiler settings This plugin contains compiler settings to set makeprg and errorformat. The compiler settings enable you to call the tsc compiler directly from Vim and display any errors or warnings in Vim's QuickFix window. To run the compiler, enter :make, this will run tsc against the last saved version of your currently edited file. The default for makeprg is tsc $* %. You can enter other compiler options into your :make command line and they will be inserted in place of $*. There are options to change the compiler name and to insert default options. let g:typescript_compiler_binary = 'tsc' let g:typescript_compiler_options = '' You can completely override this plugin's compiler settings with something like this in your .vimrc, where you can set makeprg to whatever you want.   autocmd FileType typescript :set makeprg=tsc Note, this plugin's compiler settings are not used by Syntastic which has its own way of changing the options. See https://github.com/scrooloose/syntastic#faqargs. You can use something like this in your .vimrc to make the QuickFix window automatically appear if :make has any errors. autocmd QuickFixCmdPost [^l]* nested cwindow autocmd QuickFixCmdPost    l* nested lwindow Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/leafgarland/typescript-vim"	""	"true"
"Other (Plugins || Cross-platform || OSS || Free)"	"Typescript addin for"	"https://github.com/mrward/typescript-addin"	"MonoDevelop, SharpDevelop and Xamarin Studio; a short"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"25"	"5"	"7"	"GitHub - mrward/typescript-addin: TypeScript addin for MonoDevelop and Xamarin Studio Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 25 Fork 7 mrward/typescript-addin Code Issues 7 Pull requests 1 Pulse Graphs TypeScript addin for MonoDevelop and Xamarin Studio 212 commits 14 branches 11 releases Fetching contributors JavaScript 95.0% C# 5.0% JavaScript C# Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags generate-declaration-files master monodevelop-4.0 monodevelop-javascript-net monodevelop-v8-dotnet-linux-32bit monodevelop-v8-dotnet-mac monodevelop-v8-dotnet-rename-dialog monodevelop-v8-dotnet monodevelop sharpdevelop-4 sharpdevelop-5-port typescript-1.3 v8-dotnet v8dotnet-one-package Nothing to show 0.9-monodevelop 0.8-monodevelop 0.7-monodevelop 0.6-monodevelop 0.5-monodevelop 0.5-monodevelop-linux-32-bit 0.4-monodevelop 0.3-monodevelop 0.2-monodevelop 0.1 0.1-monodevelop Nothing to show New pull request Latest commit f3760cf Mar 25, 2016 mrward Fix warnings when installing addin. … When installing the addin the install would work but show a dialog with:  The installation has completed with warnings.  The add-in 'MonoDevelop.TypeScript,0.9' is trying to extend '', but there isn't any add-in defining this extension point The add-in 'MonoDevelop.TypeScript,0.9' is trying to extend '/TypeScript', but there isn't any add-in defining this extension point  This was because the wrong attribute was being used for the MonoDevelop/ProjectModel/LanguageBindings extension.  Fixes #15 Permalink Failed to load latest commit information. lib src .gitignore LICENSE.txt Add TypeScript syntax highighting. Mar 30, 2013 README.md Update readme. Dec 22, 2015 addin-project.xml README.md TypeScript Addin for MonoDevelop and Xamarin Studio This addin provides TypeScript support in MonoDevelop and Xamarin Studio. Features Syntax highlighting for TypeScript files (.ts) TypeScript file template. Code completion - using the TypeScript language services. Code folding. Rename refactoring. Generate JavaScript file when saving TypeScript file or building the project. Configurable TypeScript compiler options in Tools Options dialog. Find References. Go to Definition. For more detailed look at the features please read the TypeScript Support in Xamarin Studio blog post Requirements MonoDevelop 5.0 or Xamarin Studio 5.0 Installation The addin is available from the MonoDevelop addin repository. To install the addin: Open the Add-in Manager dialog. Select the Gallery tab. Select Xamarin Studio Add-in Repository (Alpha channel) from the drop down list. Expand Web Development. Select TypeScript. Click the Refresh button if the addin is not visible. Click Install... to install the addin. Dependencies TypeScript - The TypeScript language services are used to provide code completion. V8.NET - A library that hosts Google's V8 JavaScript engine and allows .NET objects to be used directly from JavaScript. Json.NET - Json library for .NET created by James Newton-King. How it works The addin glues together the TypeScript language services and MonoDevelop using V8.NET as the bridge between them. JavaScript code is executed by V8 and uses the TypeScript language services to get information about the TypeScript files in the project. This information is delivered to the C# host class which interacts with MonoDevelop. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/mrward/typescript-addin"	"MonoDevelop, SharpDevelop and Xamarin Studio; a short"	"true"
"Other (Plugins || Cross-platform || OSS || Free)"	"review article"	"http://lastexitcode.com/blog/2015/04/01/TypeScriptSupportInXamarinStudio/"	"MonoDevelop, SharpDevelop and Xamarin Studio; a short"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"4"	"4"	"GitHub - chrisber/v8dotnet: A fairly non-abstracted wrapper for Google's V8 JavaScript engine. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 4 Fork 4 chrisber/v8dotnet forked from rjamesnw/v8dotnet Code Issues 0 Pull requests 0 Wiki Pulse Graphs A fairly non-abstracted wrapper for Google's V8 JavaScript engine. 240 commits 5 branches 8 releases 3 contributors C# 81.0% C++ 13.7% Python 2.5% JavaScript 1.2% Shell 0.8% HTML 0.6% Other 0.2% C# C++ Python JavaScript Shell HTML Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: development-mo… Switch branches/tags Branches Tags development-mono-iojs-win development-mono-iojs development-mono development master Nothing to show v1.5.0.2 v0.5.4.1.0.27 v0.5 v0.4 v0.3.1 v0.3 v0.2 v0.1 Nothing to show New pull request Pull request Compare This branch is 165 commits ahead, 12 commits behind rjamesnw:master. Latest commit 333aa84 Apr 11, 2015 chrisber Update README.md Permalink Failed to load latest commit information. Release Using ""Assembly.LoadFrom"" instead of ""Assembly.LoadFile"" so V8.NET as… Jan 19, 2015 Source reset v8 version Mar 24, 2015 Tests Clean up tabs to whitespaces Jan 20, 2015 gyp @ e1c8fcf Update build script for osx Mar 23, 2015 .gitattributes Add gitattributes Jan 20, 2015 .gitignore Merge wit development-mono Jan 20, 2015 .gitmodules Add submodule gyp Jan 20, 2015 .travis.yml Upate travis.yml Jan 12, 2015 LICENSE Commits to update for GitHub Jan 19, 2015 README.md Update README.md Apr 11, 2015 V8.Net.sln Just moving files around. Jan 7, 2015 build.py update build script Jan 25, 2015 build_V8_Net.sh Update build script for osx Mar 23, 2015 common.gypi Improved build script by using GYP Dec 30, 2014 v8dotnet.gyp Update build script for osx Mar 23, 2015 README.md V8.NET Compilation and Installation Using V8.Net with Mono Configuration Options Summary: A fairly non-abstracted wrapper for Google's V8 JavaScript engine. Note: The project is hosted at CodePlex officially, so the files here are only updated after posting there first. What does that mean? Well, most other existing wrappers abstract most of the Google V8 engine's abilities away from you. That's fine for simple tasks, but wouldn't you rather have full control over the power of the V8 engine from managed code? I've carefully crafted a C++ proxy wrapper to help marshal fast data transfers between the V8 engine and the managed side. One of the biggest challenges (which actually turned out to be simple in the end) was storing a field pointer in V8 objects to reference managed objects on call-backs (using reverse P/Invoke). A special custom C# class was created to manage objects in an indexed array in an O(1) design that is extremely fast in locating managed objects representing V8 ones. Interesting note: I was carefully considering future portability to the Mono framework as well for this project, so great care was made to make the transition as seamless/painless as possible. ;) License Clarification The license is LGPL. In a nutshell, this means that you can link to the libraries from your own proprietary code, but if you modify the source files for anything in this project, the modified source and executables from it must also be made freely available as well (and you must clearly state you modified the code). Coming in Next Release / WIP (updated on Jan 19th, 2015): (NOTE: If I'm posting up coming changes here, they are usually in the latest development-branch release binaries. Those binary releases will continue to be the bleeding edge releases.) (Focus is currently on a new VPL {""[visual programming language]""} based scripting solution called ""FlowScript"" as a browser IDE for JavaScript development; However, I'll make minor updates as needed.) Completed Updates This Release Fixed a bug where '{V8Engine}.call()' doesn't catch and return any exceptions. Previously, exceptions would cause 'undefined' to be returned. Apparently Google has changed a lot of how the API works, and rearranged code in V8 namespaces, so those looking to build from the source had issues. I've fixed it for the most part (in the latest dev branch, including the binaries). Because V8.Net is part of a larger project vision, I'm focusing on the other projects now. I'll be coming back to it off and on as required, and will try to get in some requests/fixes as soon as possible. Thanks, and have a great day! 8) Previous Updates: Breaking change: While working on DreamSpace it occurred to me that running actions in scopes is just a pain in the @$$. ;) I did a speed check and found this: ** > Using action callbacks ... ** > 20000000 loops @ 32679ms total = 0.00163395 ms each pass. ** > Using native stack scopes ... ** > 20000000 loops @ 21378ms total = 0.0010689 ms each pass. ** It's clear there's really not much benefit because I think the majority of V8.NET users are creating non-linear calls to the engine, and thus it's faster to stick with the native V8 side scopes on a per P/Invoke call basis (which I sort of suspected - though the goal was to mimic V8 at the time). Besides, I think it will also help cut down on a lot of bugs if in case someone forgets to use a scope. :) ""{ObjectTemplate}.RegisterInvokeHandler()"" should take a JSFunction as a callback, and not the native callback signature. This has been corrected. Bug fixes (see master branch history for details). Fixed a bug in the garbage collection process where managed functions from function templates might disappear, causing the native script call to fail. Many bugs fixed in the new binding system, which is much more efficient! Security has also been enhanced, so implicit binding of types, by default, will not show any properties unless you explicitly register the type using ""{V8Engine}.RegisterType()"". Breaking change: Generic invocation will change from the form {""'SomeMethod$#(types...)(params...)'""} (where '#' is the number of expected types) to {""'SomeMethod$#([types...], params...)'""}, which is more efficient, and allows faster binding and invoking. Same number of characters actually, and the first argument to a generic method must be an array of types (or values to get types from). Added ""{ObjectTemplate}.RegisterInvokeHandler()"" to allow invoking non-function objects, created from templates, like function objects. Added ""{TypeBinder}.ChangeMemberSecurity()"" to modify security on types you don't have control over. Refactoring the files to better support the coming Mono port. 8) Special thanks to rryk for getting the ball rolling. To this end, I'll also be converting the source repository to Git! :) You're welcome. Breaking change: (already!? yes. ;) ) After some retrospecting, I think it's better to update an ObjectTemplate to spit out objects for a given types more quickly than having the type binder set accessors for each new bound instance. This is a small change, and simply requires to call ""RegisterType()"" on the engine instance instead. Added ""Prototype"" to InternalHandle and ObjectHandle. Added 'SetProperty()' and 'SetAccessor()' to 'ObjectTemplate' to call the corresponding ""Set()"" and ""SetAccessor()"" functions on the native ObjectTemplate instance. This allows setting up your own properties on the template without needing to implement a custom 'V8ManagedObject' instance. Static types are now supported when binding CLR objects to JavaScript. Spaces removed from paths and file names to better support cross-platform compatibility with IDEs such as MonoDevelop. The test project was also removed (was never used anyhow - testing is done in script form via V8). Very easy to deal with accessing nested properties/objects. Added methods to make it easier to bind existing .NET object instances and types to the V8 JS environment. Created a new function '{V8Engine}.LoadScript(string scriptFile)' to make it more convenient to load JS files. Breaking change 1: Some handle property names were refactored, and some added so that handles can have full access to the native objects without having to create V8NativeObject instances (too much extra overhead I wanted to avoid). In fact, V8NativeObject now wraps a Handle and redirects dynamic requests to it, and both Handle and InternalHandle implement the same methods for working on the native JavaScript objects (so that's all you need to access/update in-script objects!). This was done to allow dynamic property access on the handles without having to create another object to do it. This change slightly affects the members and functionality of the V8NativeObject - but mostly behind the scenes. This allows accessing objects easily using a chain of property names, such as '((dynamic){someHandle}).a.b.c.d...' or '{object}.AsDynamic.a.b.c.d...'. Breaking change 2: V8NativeObject will now have a generic object (V8NativeObject) version to allow injecting your own objects into it instead of deriving from it (deriving is recommended however). I wanted to get rid of the internal ""_ObjectInfo' objects that were holding member data that really should be in the object itself. This will mainly affect only those who need to implement the interface (IV8NativeObject) instead of inheriting from V8NativeObject. Under the new system, when the ""Initialize()"" virtual method is called, you just cache a pointer to the 'V8NativeObject' instance wrapping your object and use that instead. Added support for .NET 3.5. I used some fancy build configurations to compile both in the same solution. ;) The only difference, as it pertains to this project, is that .NET 3.5 and under does not support ""DynamicObject"" (nor the dynamic type), and default parameters are not supported. Looks like some people have issues with the DLLs loading. I've made this better and have a more descriptive error to help correct the issues. :) I spent a lot of time on the performance of the system and have been able to increased it quiet a bit. I have some simple garbage collection and performance testing scripts now that can be run from the console. Future Ideas I'll also be looking into the WebRTC SDK in the near future as well to help support networkable servers that are compatible to the supported browsers (currently Chrome and Firefox). V8.Net (v8dotnet) -- Mono runtime 3.10.0 Build Status Linux Mac OS X Working Compilation and Installation The Repository contains the following branches: Master (stable releases for windows) development (bleeding edge development changes) development-mono (bleeding edge development changes for mono) Project structure Build (Native V8 Proxy build directory) BuildResult (Binaries) gyp (Build Engine for the native proxy) Source V8.Net (Manage Wrapper) V8.NET-Console (Test App) V8.Net.Mono.Nuget V8.NET-Proxy (Native files) V8 (Google V8) V8.NET-ProxyInterface (Managed Interface for p/invoke) V8.Net-SharedTypes (Managed defined types) Use V8.Net from Binaries Download the Binaries here: Run the V8.Net Console with following command: mono V8.Net-Console.exe or LD_LIBRARY_PATH=""pwd"" MONO_LOG_LEVEL=debug MONO_LOG_MASK=all mono V8.Net-Console.exe Build Dependencies Ubuntu 14.04.01 sudo aptitude install build-essential subversion git git-svn sudo apt-get install g++-multilib  OpenSuse sudo zypper install --type pattern devel_basis sudo zypper in gcc48-32bit libstdc++48-devel-32bit  compat-32bit  Mac OSX 10.10 brew install gcc49 xcode-select --install Install Xcode IDE 6.x  V8dotnet is based on the Mono Runtime <= 3.10.0. To install the Runtime 3.10.0 together with Monodevelop on Ubuntu Building with the V8.Net build script . To build on OSX you need to export: export CXX=/usr/local/bin/g++-4.9  export LINK=/usr/local/bin/g++-4.9   The build script defines a number of targets for each target architecture (ia32, x64, ) and mode (debug, release). The basic commands for building are: cd v8dotnet ./build_V8_Net.sh --default x64.release 2 (where 2 stands for the available core to build V8 ) or ./build_V8_Net.sh --default ia32.debug 4 Note: The mono runtime on OSX is only available with the x86 architecture to not run into the error (An attempt was made to load a program with an incorrect format) compile ia32 for osx. Also only build v8dotnet with stdlibc++ because libc++ is incompatible to mono when it comes to handling p/invoke calls; ./build_V8_Net.sh --default ia32.release 2 Start the V8 Console app with: cd BuildResutl/Release and LD_LIBRARY_PATH=""pwd"" MONO_LOG_LEVEL=debug MONO_LOG_MASK=all mono V8.Net-Console.exe Form more build option use: ./build_V8_Net.sh --help Using V8.Net with Mono Loading the libV8_Net_Proxy.so library There are three possibilities to load the library adding it in the same place where the executable is. For instance: V8.Net-Console.exe libV8_Net_Proxy.so adding it in the /usr/lib directory libV8_Net_Proxy.so or setting the `LD_LIBRARY_PATH=""pwd"" path. License Clarification The license is LGPL. In a nutshell, this means that you can link to the libraries from your own proprietary code, but if you modify the source files for anything in this project, the modified source and executables from it must also be made freely available as well (and you must clearly state you modified the code). Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/chrisber/v8dotnet"	"MonoDevelop, SharpDevelop and Xamarin Studio; a short"	"true"
"Playground"	"TypeScript playground-on-ace"	"https://github.com/hi104/typescript-playground-on-ace"	"by @hi104"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"72"	"9"	"23"	"GitHub - hi104/typescript-playground-on-ace: typescript playground on ace editor Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 9 Star 72 Fork 23 hi104/typescript-playground-on-ace Code Pull requests 1 Pulse Graphs typescript playground on ace editor http://hi104.github.com/typescript-playground-on-ace/ 15 commits 2 branches 0 releases 1 contributor JavaScript 99.9% CoffeeScript 0.1% JavaScript CoffeeScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show Nothing to show New pull request Latest commit 3161fa7 Dec 6, 2012 hi104 add error markers Permalink Failed to load latest commit information. javascripts add error markers Dec 6, 2012 samples init Nov 3, 2012 src change match regex and refactor Nov 10, 2012 stylesheets add error markers Dec 6, 2012 typescripts update TypeScript, lib.d.ts Nov 16, 2012 .gitignore init Nov 3, 2012 LICENSE add MIT license Dec 5, 2012 README.md update README Nov 3, 2012 index.html add stylesheets directory Nov 16, 2012 README.md TypeScript Playground on Ace TypeScript Playground build on ace editor http://hi104.github.com/typescript-playground-on-ace/ See Also TypeScript Playground http://www.typescriptlang.org/Playground/ Ace http://ace.ajax.org Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/hi104/typescript-playground-on-ace"	"by @hi104"	"true"
"Playground"	"updated to TypeScript 1.5"	"https://github.com/basarat/TypeScriptEditor"	"by @hi104"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"41"	"6"	"13"	"GitHub - basarat/TypeScriptEditor: A typescript editor you can use in the browser Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 41 Fork 13 basarat/TypeScriptEditor Code Issues 1 Pull requests 0 Pulse Graphs A typescript editor you can use in the browser http://basarat.github.io/TypeScriptEditor/ 100 commits 3 branches 0 releases Fetching contributors JavaScript 98.8% Other 1.2% JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: gh-pages Switch branches/tags Branches Tags gh-pages testingAceSource typescritp9 Nothing to show Nothing to show New pull request Latest commit b90d00b May 22, 2015 1 basarat Update CONTRIBUTING.md Permalink Failed to load latest commit information. .idea Made harness.ts a more direct copy. Apr 21, 2013 samples Update greeter.ts Apr 23, 2013 scripts ready for merge May 22, 2015 stylesheets thumb May 22, 2015 typescripts bring in all the latest typescript bits (not activated yet) May 22, 2015 .gitignore ignore Apr 20, 2013 CONTRIBUTING.md Update CONTRIBUTING.md May 22, 2015 LICENSE add MIT license Dec 5, 2012 README.md updated docs May 22, 2015 index.html bring in all the latest typescript bits (not activated yet) May 22, 2015 README.md TypeScript Playground on Ace TypeScript Playground build on ace editor http://basarat.github.io/TypeScriptEditor/ Goals Make it easier for people to create TypeScript playgrounds. Supports loading of custom definition files. Currently only loads lib.d.ts locally. For more information see CONTRIBUTING.md Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/basarat/TypeScriptEditor"	"by @hi104"	"true"
"Playground"	"TypeScript official Playground"	"http://www.typescriptlang.org/Playground/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Playground"	"null"	"null"	""	"true"
"Playground"	"JS Bin"	"http://jsbin.com/?js"	"(Select TypeScript)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2891"	"141"	"848"	"GitHub - jsbin/jsbin: Collaborative JavaScript Debugging App Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 141 Star 2,891 Fork 848 jsbin/jsbin Code Issues 515 Pull requests 30 Wiki Pulse Graphs Collaborative JavaScript Debugging App http://jsbin.com 5,847 commits 84 branches 407 releases 142 contributors JavaScript 69.4% CSS 19.9% HTML 10.7% JavaScript CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags demo/snyk feat/service-worker feature/add-tests feature/admin-tools feature/anti-phish feature/api feature/bin-options feature/choc-processor feature/customisation-via-config feature/docco feature/embed-lazyload feature/emmet-1.1.0 feature/error-pages feature/escape-trapped-focus feature/grunt-css feature/haml feature/lasy-embed-load feature/layouts feature/layouts2 feature/memcached feature/norobot feature/offline feature/output-source feature/pluggings feature/pro-change-cc-details feature/pro_user_flag feature/refactor-upgrade feature/sharejs feature/ssl-login-merge feature/static-uploads feature/stripe_payment feature/team-integrate feature/tests-YES-TESTS feature/timeline feature/tweak-feature-list feature/upgrade-description feature/url-follow-along feature/url-revisionless-tweaks feature/vanity-cname feature/vatmoss feature/zen feature/6to5 feature/1950/prevent-non-revision find-memory-leak fix/alerts fix/boot-speed fix/cancel-sub fix/exceptions-and-streaming-issues fix/info-card-avatar fix/invoice-discounts fix/memcached-promises fix/ping-processors fix/processor-output fix/settings-saved fix/tern fix/type-error-value fix/949 fix/1005 fix/1009 fix/1012 fix/1172-css-branding fix/1222-localstorage-not-enabled fix/1354 fix/1552-update-sql-file fix/1643 fix/1657-stream-subdomain fix/1897-codefold-highlight fix/1904 fix/1910 fix/1912 fix/1923 fix/1949 fix/1961-view-features fix/2106 fix/2425 fix/2431 fix/2464 malditogeek-feature/oembed-support master merge/team mrm007-feature/react-jsx patch/update-less snyk-fix-5c51757d snyk-fix-46782ea9 Nothing to show v3.37.0 v3.36.20 v3.36.19 v3.36.18 v3.36.17 v3.36.16 v3.36.15 v3.36.14 v3.36.13 v3.36.12 v3.36.11 v3.36.10 v3.36.9 v3.36.8 v3.36.7 v3.36.6 v3.36.5 v3.36.4 v3.36.3 v3.36.2 v3.36.1 v3.36.0 v3.35.13 v3.35.12 v3.35.11 v3.35.10 v3.35.9 v3.35.8 v3.35.7 v3.35.6 v3.35.5 v3.35.4 v3.35.3 v3.35.2 v3.35.1 v3.35.0 v3.34.3 v3.34.2 v3.34.1 v3.34.0 v3.33.3 v3.33.2 v3.33.1 v3.33.0 v3.32.0 v3.31.0 v3.30.4 v3.30.3 v3.30.2 v3.30.1 v3.30.0 v3.29.20 v3.29.19 v3.29.18 v3.29.17 v3.29.16 v3.29.15 v3.29.14 v3.29.13 v3.29.12 v3.29.11 v3.29.10 v3.29.9 v3.29.8 v3.29.7 v3.29.6 v3.29.5 v3.29.4 v3.29.3 v3.29.2 v3.29.1 v3.29.0 v3.28.1 v3.28.0 v3.27.4 v3.27.3 v3.27.2 v3.27.1 v3.27.0 v3.26.2 v3.26.1 v3.26.0 v3.25.23 v3.25.22 v3.25.21 v3.25.20 v3.25.19 v3.25.18 v3.25.17 v3.25.16 v3.25.15 v3.25.14 v3.25.13 v3.25.12 v3.25.11 v3.25.10 v3.25.9 v3.25.8 v3.25.7 v3.25.6 Nothing to show New pull request Latest commit cc4ade9 Jul 13, 2016 remy 3.37.0 Permalink Failed to load latest commit information. bin feat: attempt to get numbers on local installs Jul 5, 2015 build Embed customisation support plus https redirects Jun 8, 2015 docs docs: fix typos Feb 9, 2016 lib feat: allow users to update their card Jul 13, 2016 public Merge branch 'feature/change-cc-details' Jul 13, 2016 test test: removed loop protect test dep Jan 8, 2016 views feat: allow users to update their card Jul 13, 2016 .gitignore fix: update label on babel, said maybel Jun 16, 2015 .jshintrc fix: put avatar in /other/ jsbin object Jul 22, 2015 .npmignore config corrected for npm deploy Jul 28, 2012 .snyk chore: testing snyk on the project Mar 16, 2016 .travis.yml fix node version in .travis.yml Oct 13, 2015 CODE_OF_CONDUCT.md docs: add code of conduct Sep 12, 2015 Gruntfile.js Add compressed embed Jun 24, 2015 MIT-LICENSE.TXT updated license Mar 30, 2012 README.markdown Update Gratipay link Jul 9, 2015 TODO.md TODO: stats Aug 17, 2012 config.default.json Set Cache-Control: max-age for static content (default: 1 day) Jun 16, 2015 package.json 3.37.0 Jul 13, 2016 scripts.json WIP Jun 23, 2016 README.markdown JS Bin JS Bin is an open source collaborative web development debugging tool. If you use JS Bin locally... It likely means you're not going to subscribe as a pro user - which is how we're sustaining our project, which is cool, but please consider donating via Gratipay here. What can JS Bin do? Write code and have it both save in real-time, but also render a full preview in real-time Help debug other people's JavaScript, HTML or CSS by sharing and editing urls CodeCast - where you share what you're typing in JS Bin in real-time Remote rendering - view the output of your JS Bin on any device on any platform, updating in real-time Processors, including: coffee-script, LESS, Markdown and Jade. Debug remote Ajax calls Find out more about JS Bin's features via the YouTube JS Bin playlist. Who built this? JS Bin was built by Remy Sharp and is completely open source and available at http://github.com/jsbin/jsbin. You can also follow @rem on Twitter where he'll tweet about JavaScript, HTML 5 and other such gems. If you would like to work with Remy and his company, Left Logic on a front end development project, please get in touch. UX was kindly donated by Danny Hope who also tweets as @yandle. The vast majority of the port from PHP to Node in June 2012 was done by Aron Carroll who also plays in github as @aron. A short history JS Bin is a webapp specifically designed to help JavaScript and CSS folk test snippets of code, within some context, and debug the code collaboratively. JS Bin allows you to edit and test JavaScript and HTML (reloading the URL also maintains the state of your code - new tabs doesn't). Once you're happy you can save, and send the URL to a peer for review or help. They can then make further changes saving anew if required. The original idea spawned from a conversation with another developer in trying to help him debug an Ajax issue. The original aim was to build it using Google's app engine, but in the end, it was John Resig's Learning app that inspired me to build the whole solution in JavaScript with liberal dashes of jQuery and a tiny bit of LAMP for the saving process. Version 1 of JS Bin took me the best part of 4 hours to develop back in 2008, but version 2 was been rewritten from the ground up and is completely open source. Build Process JS Bin has been designed to work both online at jsbin.com but also in your own locally hosted environment - or even live in your own site (if you do host it as a utility, do let us know by pinging @js_bin on twitter). Historically JS Bin was built on PHP, but has since moved to Node. The PHP flavour is no longer supported, however everything else released in v3.0.0 of JS Bin is available in both, but all releases after are only supported in the Node environment. Your PHP mileage may vary! For detailed instructions on how to build JS Bin please see the running your own JS Bin document. If you install Node.js installation is easy: $ npm install -g jsbin $ jsbin  Optionally point JS Bin to your config: $ JSBIN_CONFIG=~/config.local.json jsbin  Then open your browser to http://localhost:3000 and you have a fully working version of JS Bin running locally. API A simple REST based API exists for anonymous users if it is enabled in your config.*.json, or can be restricted to registered users with a key specified in ownership.api_key Authentication is required for all API requests unless one of the following api configuration options are set: api.allowAnonymousReadWrite - if set to true allows GET and POST operations to the API anonymously (without an API key) api.allowAnonymousRead - if set to true allows GET operations to the API anonymously (without an API key) By default, config.default.json has api.allowAnonymousRead set to true. Curl authentication examples: $ curl http://{{host}}/api/:bin -H ""Authorization: token {{token_key}}"" $ curl http://{{host}}/api/:bin?api_key={{token_key}}  End points are: GET /api/:bin - Retrieve the latest version of the bin with that specified ID GET /api/:bin/:rev - Retrieve the specific version of the bin with the specified ID and revision POST /api/save - Create a new bin, the body of the post should be URL encoded and contain html, javascript and css parameters POST /api/:bin/save - Create a new revision for the specified bin, the body of the post should be URL encoded and contain html, javascript and css parameters Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jsbin/jsbin"	"(Select TypeScript)"	"true"
"Playground"	"Codepen"	"http://codepen.io/"	"(Select TypeScript)"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"CodePen - Front End Developer Playground & Code Editor in the Browser octocat star tv header numbered-list123 split-screen CodePen Pens Posts Collections Jobs Blog Store Patterns Perks Podcast Menu + New Pen Log In Sign Up Search Pens Posts Collections Users CodePen is a playground for the front end web. Show off your latest creation and get feedback. Build a test case for that pesky bug. Find example design patterns and inspiration for your projects. Find out more Sign me up Background by Jack Rugile Picked Pens View More Pens                                     Picked Posts View More Posts Sassier z-index Management For Complex Layouts In 2014, Jackie Balzer wrote an excellent piece for Smashing Magazine on using Sass to automatically manage the z-indexes of elements using lists. I've been using this technique since an... Matt Stow 1613 0 26 Responsive <canvas> elements tl;dr - If you want responsive canvases to be a part of your RWD website, use scrawl-canvas. The Responsive Web Design (RWD) Wikipedia article defines RWD as: ... an approach to web design aimed at... Rik Roots 951 1 14 Design Patterns: Introduction with Singletons Design Patterns: Introduction with Singletons Introduction This is the first instalment of a series about design patterns in software development. Each post will discuss a new design pattern and will... Bas Groothedde 2160 11 46 Picked Collections View More Collections 60 Pens Physics & Acceleration the study of movement GRAY GHOST 2554 24 8 Pens Sass Awesomeness A collection of anything and everything helpful created using Sass. Dan Denney 1519 30 25 Pens Optical Illusions With code :D Tim Holman 5033 51 Go PRO Unlock the full power of CodePen by upgrading to PRO. You'll be able to save Private Pens, upload Assets, work with others in real-time with Collab Mode, and more! Upgrade Now CodePen Radio An inside look from the three founders of CodePen on what it's like running a web business. Everything from server infrastructure, to day-to-day operations, to new feature development. Go Listen CodePen Documentation Blog Store Podcast Stats About Support Community Jobs Meetups Twitter Flickr Code of Conduct CodePen ©2016 CodePen Demo or it didn't happen. CodePen doesn't work very well without JavaScript. We're all for progressive enhancement, but CodePen is a bit unique in that it's all about writing and showing front end code, including JavaScript. It's required to use most of the features of CodePen. Need to know how to enable it? Go here. Close this, use anyway."	"null"	"null"	"(Select TypeScript)"	"true"
"Playground"	"TypeScript Interpret - Terminal Emulator"	"http://niutech.github.io/typescript-interpret/"	"by @niutech"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"2"	"2"	"GitHub - niutech/typescript-interpret: Interpret TypeScript using the Console/Terminal Emulator in JavaScript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 15 Fork 2 niutech/typescript-interpret Code Issues 1 Pull requests 0 Pulse Graphs Interpret TypeScript using the Console/Terminal Emulator in JavaScript http://niutech.github.com/typescript-interpret/ 2 commits 1 branch 0 releases Fetching contributors JavaScript 100.0% JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: gh-pages Switch branches/tags Branches Tags gh-pages Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. README.md index.html typescript.interpret.js typescript.interpret.min.js README.md TypeScript Interpret TypeScript is a brand new language which compiles on JavaScript. However, this operation has to be performed manually, using the command-line compiler tsc or other tools. But now it can be interpreted straight in your web browser, thanks to TypeScript Interpret! TypeScript Interpret automatically interprets your TypeScript code typed into a console, using the jQuery Terminal by Jakub Jankiewicz. Demo Here is a TypeScript terminal emulator Download TypeScript 0.8 (minified JS) TypeScript Interpret 0.2 (minified JS) jQuery Terminal 0.4.22 (minified JS) Authors & License TypeScript is developed by Microsoft Corp. under Apache 2.0 License. TypeScript Interpret is developed by Jerzy Głowacki under Apache 2.0 License. jQuery Terminal is developed by Jakub Jankiewicz under GNU GPL 3 License. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/niutech/typescript-interpret"	"by @niutech"	"true"
"Playground"	"TypeScript Editor"	"http://drake7707.github.io/Typescript-Editor/"	"by @drake7707"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Typescript editor File New Open Save New milestone Download Export to project Shortcuts Libraries JQuery JQuery UI LINQJS Bootstrap Ace editor   TypeScript Editor Jump to line on error Enable js in output pane Open seperate window HTML CSS Typescript Javascript Console Output × Available files Close × Update description Cancel Update description × Create a new milestone Cancel Create milestone × Available shortcuts [Ctrl-Space] : AutoComplete [F2] : Rename (TS only) [Ctrl-D] : Format document [F12] : Go to definition (TS only) [Shift-F12] : Go back to previous position (TS only) [Alt-0] : Fold all [Alt-Shift-0] : Unfold all [Ctrl-/] : Comment/uncomment line [Ctrl-Alt-Up/Down] : Multiple cursors [Ctrl-N] : New [Ctrl-O] : Open [Ctrl-S] : Save [Ctrl-M] : New milestone [Ctrl-W] : Toggle Typescript navigation tree [Ctrl-1-6] : Toggle tab panes (HTML, CSS, ...) Close"	"null"	"null"	"by @drake7707"	"true"
"Chrome Extension"	"TypeScript Editey"	"https://chrome.google.com/webstore/detail/typescript-editey/liedfkjkedgcgpddoijfeeeeoikcbmaf"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"TypeScript Editey - Chrome Web Store TypeScript Editey offered by editey.com (3) 915 users Overview TypeScript Editor for Google Drive Simple and free TypeScript Editor for Google Drive. Create new TypeScript files right from the Google Drive ""Create"" menu. Files will appear with a proper icon in your Google Drive folders. Make sure to set this app as default to get the correct file icon.  * Realtime collaboration * Comments and Replies * Revision History * Instant upload to your FTP server * Content Management with Page Editey * Emacs and vi key bindings * Automatic indent and outdent * Multiple cursors and selections * Live syntax checker Website Report Abuse Additional Information Version: 1.38 Updated: November 12, 2013 Size: 2.9KiB Language: English"	"null"	"null"	""	"true"
"React.js"	"jsxtyper"	"https://github.com/fuselabs/jsxtyper"	"Generates TypeScript interfaces from.jsx files"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"25"	"5"	"1"	"GitHub - fuselabs/jsxtyper: Generates TypeScript interfaces from .jsx files. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 25 Fork 1 fuselabs/jsxtyper Code Issues 0 Pull requests 0 Pulse Graphs Generates TypeScript interfaces from .jsx files. 6 commits 1 branch 0 releases Fetching contributors TypeScript 54.2% JavaScript 41.3% CSS 3.9% HTML 0.6% TypeScript JavaScript CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit b566545 Jun 6, 2015 Rajeev-K minor updates Permalink Failed to load latest commit information. SampleProject Scripts/typings tasks tests .gitattributes .gitignore .npmignore JSXTyper.njsproj JSXTyper.sln LICENSE NuGet.config README.md debug.jsx jsxtyper.ts jsxtypercore.ts package.json packages.config README.md JSXtyper JSXtyper generates TypeScript interfaces from your .jsx files. By referencing the generated .ts file and using the generated props and state interfaces you can make sure all data expected by the .jsx is supplied, and catch any typos at build-time. How to build JSXtyper Install Node if you haven't already. Then open Node.js command prompt and run: npm install  This will install esprima-fb, estraverse and estraverse-fb. We also depend on estree.d.ts. This file will be automatically downloaded when you build the solution in Visual Studio, unless you have turned off automatic downloading of dependencies. To manually download this dependency open Package Manager Console and type: Install-Package estree.TypeScript.DefinitelyTyped  You are now ready to build. Open the .sln file in Visual Studio and select Build > Build Solution from the menu. Note that you must have Node.js Tools for Visual Studio installed in order to open .njsproj projects. Example Here's an example .jsx file and the corresponding generated .ts file: var OrderPage = React.createClass({   getInitialState: function () {     return { orderStatus: this.props.initialOrderStatus };   },   render: function () {     var header =        <div>         <div>Customer: {this.props.customerName}</div>         <div>Order Date: {this.props.orderDate}</div>       </div>;     var details = [];     for (var i = 0; i < this.props.items.length; i++) {       var item = this.props.items[i];       details.push(         <tr>           <td>{item.name}</td>           <td>{item.price}</td>         </tr>       );     };     return (       <div>         {header}         <table>            <tbody>              {details}              <tr>                <td><b>Total</b></td>                <td><b>{this.props.total}</b></td>              </tr>            </tbody>         </table>         <div>Status: {this.state.orderStatus}</div>       </div>     );   } });  The following TypeScript interfaces were automatically generated from the JSX file above. // This file was automatically generated by jsxtyper. Do not modify by hand!  interface OrderPageProps {     initialOrderStatus: any;     customerName: any;     orderDate: any;     items: {         name: any;         price: any;     }[];     total: any; }  interface OrderPageState {     orderStatus: any; }  declare var OrderPage: React.ComponentClass<OrderPageProps>;  The generated interfaces are compatible with react-global.d.ts. The SampleProject folder contains a complete sample project. How to run JSXtyper Open Node.js command prompt and run node jsxtyper.js example.jsx  Grunt task JSXtyper can also be invoked from Grunt. To install type npm install grunt-jsxtyper --save-dev  Here's a sample Gruntfile.js: module.exports = function(grunt) {    grunt.initConfig({     pkg: grunt.file.readJSON('package.json'),     jsxtyper: {       'Generated/Views.ts': ['Views/*.jsx']     }   });    grunt.loadNpmTasks('grunt-jsxtyper');    grunt.registerTask('default', ['jsxtyper']); };  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/fuselabs/jsxtyper"	"Generates TypeScript interfaces from.jsx files"	"true"
"React.js"	"Building a simple react component with typescript"	"http://www.austentalbot.com/how-to-use-react-with-typescript/"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"5"	"2"	"0"	"GitHub - austentalbot/React-TypeScript-Starter: A starter project example for using React and TypeScript together Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 5 Fork 0 austentalbot/React-TypeScript-Starter Code Issues 0 Pull requests 0 Pulse Graphs A starter project example for using React and TypeScript together 10 commits 1 branch 0 releases Fetching contributors TypeScript 47.9% JavaScript 40.8% HTML 11.3% TypeScript JavaScript HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. src .gitignore LICENSE README.md gulpfile.js index.html package.json tsd.json README.md React-TypeScript-Starter A starter project example for using React and TypeScript together Read the blog post for a full walkthrough. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/austentalbot/React-TypeScript-Starter"	""	"true"
"React.js"	"TodoMVC • TypeScript + React Example"	"https://github.com/tastejs/todomvc/tree/gh-pages/examples/typescript-react"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17687"	"971"	"10068"	"todomvc/examples/typescript-react at gh-pages · tastejs/todomvc · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 971 Star 17,687 Fork 10,068 tastejs/todomvc Code Issues 92 Pull requests 28 Wiki Pulse Graphs Branch: gh-pages Switch branches/tags Branches Tags drop-ng-perf elm-15-update gh-pages master sjs/test-wip Nothing to show v1.01 v1.0.1 v1.0 v1.0rc v0.25 v0.2 v0.2pre v0.1.1 v0.1.0 1.3.0 1.2.0 1.1.0 1.0.1 1.0 Nothing to show Create new file Find file History todomvc/examples/typescript-react/ Pull request Compare This branch is even with gh-pages. Latest commit 9f8c0cd Jun 9, 2016 samccone Revert ""update the build files for gh-pages [ci skip]"" … This reverts commit 582130d. Permalink .. Failed to load latest commit information. js Revert ""update the build files for gh-pages [ci skip]"" Jun 9, 2016 node_modules Revert ""update the build files for gh-pages [ci skip]"" Jun 10, 2016 typings Revert ""update the build files for gh-pages [ci skip]"" Jun 10, 2016 index.html Revert ""update the build files for gh-pages [ci skip]"" Jun 10, 2016 package.json Revert ""update the build files for gh-pages [ci skip]"" Jun 10, 2016 readme.md Revert ""update the build files for gh-pages [ci skip]"" Jun 10, 2016 tsd.json Revert ""update the build files for gh-pages [ci skip]"" Jun 10, 2016 readme.md TypeScript & React TodoMVC Example TypeScript is a language for application-scale JavaScript development. TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open Source. TypeScript - typescriptlang.org React is a JavaScript library for creating user interfaces. Its core principles are declarative code, efficiency, and flexibility. Simply specify what your component looks like and React will keep it up-to-date when the underlying data changes. React - facebook.github.io/react Learning TypeScript The TypeScript website is a great resource for getting started. Here are some links you may find helpful: Tutorial Code Playground Documentation Applications built with TypeScript Blog Source Code Articles and guides from the community: Thoughts on TypeScript ScreenCast - Why I Like TypeScript Get help from other TypeScript users: TypeScript on StackOverflow Forums TypeScript on Twitter If you have other helpful links to share, or find any of the links above no longer work, please let us know. Learning React The React getting started documentation is a great way to get started. Here are some links you may find helpful: Documentation API Reference Blog React on GitHub Support Articles and guides from the community: How is Facebook's React JavaScript library React: Under the hood Get help from other React users: React on StackOverflow Discussion Forum If you have other helpful links to share, or find any of the links above no longer work, please let us know. Running A standalone TypeScript compiler is available on NPM. npm install typescript  To compile the TypeScript in this project: # from examples/typescript-react $ tsc -p js  To be able to run the output JS files in the browser: # from examples/typescript-react $ npm install -g browserify $ browserify js/app.js -o js/bundle.js  To run the app, spin up an HTTP server (e.g. python -m SimpleHTTPServer) and visit http://localhost/.../myexample/. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/tastejs/todomvc/tree/gh-pages/examples/typescript-react"	""	"true"
"React.js"	"Working with React and TypeScript"	"http://blog.wolksoftware.com/working-with-react-and-typescript"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Working with React and TypeScript   Svbtle Wolk Software Engineering Menu Wolk Software Engineering is writing on the Svbtle network. @WolkSoftwareLtd wolksoftware.com rss feed about svbtle sign up October 12, 2015 Working with React and TypeScript An introduction to the development of React applications with Atom and TypeScript We are about to develop the famous TODO App from the TodoMVC project using React and TypeScript: In this post you will learn about the following: 1. Setting up the environment 2. Setting up the project 3. The basics about React components 4. Developing React components with TypeScript 5. Compiling the application 6. Running the application Let’s get started!  1. Setting up the environment We will start by setting up the environment: Download an install Node.js from https://nodejs.org. Install TypeScript and tsd using npm: $ npm install -g typescript tsd  Note: use sudo if you are using OSX Download and install atom from https://atom.io/. Install the atom-typescript plugin for atom: $ apm install atom-typescript  This plugin has some cool features like HTML to TSX: Or dependency view: Please visit the project’s page on GitHub to learn more about the atom-typescript features. Install the React developer tools extension for chrome. This extension helps us to debug React applications by displaying the value of the properties and state of a selected component.  2. Setting up the project By the end of this tutorial the project structure will be similar to the following one: ├── index.html ├── js │   ├── app.js │   ├── app.tsx │   ├── constants.js │   ├── constants.ts │   ├── footer.js │   ├── footer.tsx │   ├── interfaces.d.ts │   ├── todoItem.js │   ├── todoItem.tsx │   ├── todoModel.js │   ├── todoModel.ts │   ├── tsconfig.json │   ├── utils.js │   └── utils.ts ├── node_modules │   ├── director │   ├── react │   └── todomvc-app-css ├── package.json ├── tsd.json └── typings     ├── react     │   ├── react-global.d.ts     │   └── react.d.ts     └── tsd.d.ts  Let’s start by creating the application’s root folder. $ mkdir typescript-react $ cd typescript-react  Then create new package.json file inside the application’s root folder: { private: true,   dependencies: {     director: ""^1.2.0"",     react: ""^0.13.3"",     todomvc-app-css: ""^2.0.0""   } }  You can then install the project dependencies using npm: # from the application's root folder $ npm install  This command should create a folder named node_modules inside the application’s root folder. The node_modules should contain 3 folders named: director, react and todomvc-app-css. ├── node_modules │   ├── director │   ├── react │   └── todomvc-app-css  We will now install some TypeScript type definitions files. Type definitions files are used to declare the interfaces of the public API of third party libraries like React. These interfaces can be used by the IDEs to help us during the development of TypeScript applications with features like IntelliSense. The type definitions files are also used by the TypeScript compiler to ensure that we are using the third party libraries correctly. We are going to need the React type definitions. We can install them using the following command: # from the application's root folder $ tsd init $ tsd install react --save  The command above will create a file named tsd.json and a folder named typings in the application’s root folder. The typings folder should contain a folder named react. We also need to manually download and save a file named react-global.d.ts under the typings/react folder. └── typings     ├── react     │   ├── react-global.d.ts     │   └── react.d.ts     └── tsd.d.ts  Now, let’s create the index.html file inside the application’s root folder: <!doctype html> <html lang=""en"" data-framework=""typescript"">   <head>     <meta charset=""utf-8"">     <title>React • TodoMVC</title>     <link rel=""stylesheet""            href=""node_modules/todomvc-common/base.css"">      <link rel=""stylesheet""            href=""node_modules/todomvc-app-css/index.css"">    </head>   <body>     <section class=""todoapp""></section>     <footer class=""info"">       <p>Double-click to edit a todo</p>       <p>         Created by          <a href=""http://github.com/remojansen/"">Remo H. Jansen</a>       </p>       <p>Part of <a href=""http://todomvc.com"">TodoMVC</a></p>     </footer>      <script type=""text/javascript""              src=""node_modules/react/dist/react-with-addons.js"">     </script>      <script type=""text/javascript""              src=""node_modules/director/build/director.js"">     </script>      <script type=""text/javascript"" src=""js/constants.js""></script>     <script type=""text/javascript"" src=""js/utils.js""></script>     <script type=""text/javascript"" src=""js/todoModel.js""></script>     <script type=""text/javascript"" src=""js/todoItem.js""></script>     <script type=""text/javascript"" src=""js/footer.js""></script>     <script type=""text/javascript"" src=""js/app.js""></script>   </body> </html>  At this point you should have the following files and folders in place: ├── index.html ├── node_modules │   ├── director │   ├── react │   └── todomvc-app-css ├── package.json ├── tsd.json └── typings     ├── react     │   ├── react-global.d.ts     │   └── react.d.ts     └── tsd.d.ts  You may have noticed that some of the JavaScript files referenced by our index.html file are missing. We will now proceed to solve that problem.  3. The basics about React components Components are he main building block of a React application. A component represents a self-contained piece of UI. A component will usually display some data and be able handle some kind of user interaction. A component can contain child components. The application that we are about to develop is really small, so we will only develop one top-level component named TodoApp. The TodoApp component will be composed of multiple components, including one TodoFooter component and a list of TodoItem components. Components differentiate two different sets of data: properties and state.  Properties Props (short for properties) are a Component’s configuration, its options if you may. They are received from above and immutable as far as the Component receiving them is concerned. A Component cannot change its props, but it is responsible for putting together the props of its child Components.  State The state starts with a default value when a Component mounts and then suffers from mutations in time (mostly generated from user events). It’s a serialisable representation of one point in time—a snapshot. A Component manages its own state internally, but—besides setting an initial state—has no business fiddling with the state of its children. You could say the state is private. When we declare a new React component using TypeScript we must declare the interface of its properties and state as follows: class SomeComponent extends React.Component<ISomeComponentProps, ISomeComponentState> {   // ... }  Now that we have our project structure in place and we know the basics about components it is time to start developing our components.  4. Developing React components with TypeScript Let’s create a new folder named js under the application’s root folder. We are going to create the following files: ├── js │   ├──interfaces.d.ts │   ├── constants.ts │   ├── utils.ts │   ├── todoModel.js │   ├── footer.tsx │   ├── todoItem.tsx │   └── app.tsx  Feel free to create them now or do it as we implement each one of them.  interfaces.d.ts We will use this file to define all the interfaces in our application. We use the extension .d.ts (which is also used by the type definition files) instead of .ts because this file will not be transpiled into a JavaScript file. The file is not transpiled because TypeScript interfaces are not transformed into JavaScript code during the compilation process. // Defines the interface of the structure of a task interface ITodo {   id: string,   title: string,   completed: boolean }  // Defines the interface of the properties of the TodoItem component interface ITodoItemProps {   key : string,   todo : ITodo;   editing? : boolean;   onSave: (val: any) => void;   onDestroy: () => void;   onEdit: ()  => void;   onCancel: (event : any) => void;   onToggle: () => void; }  // Defines the interface of the state of the TodoItem component interface ITodoItemState {   editText : string }  // Defines the interface of the properties of the Footer component interface ITodoFooterProps {   completedCount : number;   onClearCompleted : any;   nowShowing : string;   count : number; }  // Defines the TodoModel interface interface ITodoModel {   key : any;   todos : Array<ITodo>;   onChanges : Array<any>;   subscribe(onChange);   inform();   addTodo(title : string);   toggleAll(checked);   toggle(todoToToggle);   destroy(todo);   save(todoToSave, text);   clearCompleted(); }  // Defines the interface of the properties of the App component interface IAppProps {   model : ITodoModel; }  // Defines the interface of the state of the App component interface IAppState {   editing? : string;   nowShowing? : string }   constants.ts This file is used to expose some constants. The constants are used to store the numeric value of the keyboard keys (ENTER_KEY and ESCAPE_KEY) that we will use later to set some events listeners. We will also use some values to identify the currently displayed list of tasks by its status: COMPLETED_TODOS Used when displaying completed tasks ACTIVE_TODOS Used when displaying incomplete tasks ALL_TODOS Used when displaying all tasks namespace app.constants {   export var ALL_TODOS = 'all';   export var ACTIVE_TODOS = 'active';   export var COMPLETED_TODOS = 'completed';   export var ENTER_KEY = 13;   export var ESCAPE_KEY = 27; }   utils.ts This file contains a class named Utils. The Utils class is no more that a collection of utility static functions. namespace app.miscelanious {    export class Utils {      // generates a new Universally unique identify (UUID)      // the UUID is used to identify each of the tasks     public static uuid() : string {       /*jshint bitwise:false */       var i, random;       var uuid = '';        for (i = 0; i < 32; i++) {         random = Math.random() * 16 | 0;         if (i === 8 || i === 12 || i === 16 || i === 20) {           uuid += '-';         }         uuid += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random))           .toString(16);       }        return uuid;     }      // adds 's' to the end of a given world when count > 1     public static pluralize(count, word) {       return count === 1 ? word : word + 's';     }      // stores data using the localStorage API     public static store(namespace, data?) {       if (data) {         return localStorage.setItem(namespace, JSON.stringify(data));       }        var store = localStorage.getItem(namespace);       return (store && JSON.parse(store)) || [];     }      // just a helper for inheritance     public static extend(...objs : any[]) : any {       var newObj = {};       for (var i = 0; i < objs.length; i++) {         var obj = objs[i];         for (var key in obj) {           if (obj.hasOwnProperty(key)) {             newObj[key] = obj[key];           }         }       }       return newObj;     }    } }   todoModel.ts TodoModel is a generic “model” object. Since this application is really small it may not even be worth separating this logic out, but we do this to demonstrate one way to separate out parts of your application. /// <reference path=""../typings/react/react-global.d.ts"" /> /// <reference path=""./interfaces.d.ts""/>  namespace app.models {    export class TodoModel implements ITodoModel {      public key : string;            // key used for local storage     public todos : Array<ITodo>;    // a list of tasks     public onChanges : Array<any>;  // a list of events      constructor(key) {       this.key = key;       this.todos = app.miscelanious.Utils.store(key);       this.onChanges = [];     }      // the following are some methods      // used to manipulate the list of tasks      public subscribe(onChange) {       this.onChanges.push(onChange);     }      public inform() {       app.miscelanious.Utils.store(this.key, this.todos);       this.onChanges.forEach(function (cb) { cb(); });     }      public addTodo(title : string) {       this.todos = this.todos.concat({         id: app.miscelanious.Utils.uuid(),         title: title,         completed: false       });        this.inform();     }      public toggleAll(checked) {       // Note: it's usually better to use immutable        // data structures since they're easier to        // reason about and React works very        // well with them. That's why we use        // map() and filter() everywhere instead of        // mutating the array or todo items themselves.       this.todos = this.todos.map<ITodo>((todo : ITodo) => {         return app.miscelanious.Utils.extend(           {}, todo, {completed: checked}         );       });        this.inform();     }      public toggle(todoToToggle) {       this.todos = this.todos.map<ITodo>((todo : ITodo) => {         return todo !== todoToToggle ?           todo :           app.miscelanious.Utils.extend(             {}, todo, {completed: !todo.completed}           );       });        this.inform();     }      public destroy(todo) {       this.todos = this.todos.filter(function (candidate) {         return candidate !== todo;       });        this.inform();     }      public save(todoToSave, text) {       this.todos = this.todos.map(function (todo) {         return todo !== todoToSave ? todo : app.miscelanious.Utils.extend({}, todo, {title: text});       });        this.inform();     }      public clearCompleted() {       this.todos = this.todos.filter(function (todo) {         return !todo.completed;       });        this.inform();     }   }  }   footer.tsx This file uses the .tsx extension instead of the .ts extension because it contains some TSX code. TSX is a typed superset of JSX. We will use TSX instead of HTML of client-side templates like Handlebars because TSX and JSX are used to generate an in-memory representation of the DOM. When the components state or properties change Reacts calculates the most efficient way to update the in-memory representation of the DOM and then proceeds to apply those changes to the real DOM. This process makes React highly efficient when it comes to DOM manipulation. Note: We need use some extra compiler options to compile .tsx. We will learn more about this topic towards the end of this post. The footer component allows users to filter the lists of tasks by their status and displays the count of tasks. This component has no state (Note how {} is passed to React.Component as the interface of its state) but it has some properties (ITodoFooterProps) that are set by its parent component (the TodoApp component). /// <reference path=""../typings/react/react-global.d.ts"" /> /// <reference path=""./interfaces.d.ts""/>  namespace app.components {    export class TodoFooter extends React.Component<ITodoFooterProps, {}> {      public render() {       var activeTodoWord = app.miscelanious.Utils.pluralize(this.props.count, 'item');       var clearButton = null;        if (this.props.completedCount > 0) {         clearButton = (           <button             className=""clear-completed""             onClick={this.props.onClearCompleted}>             Clear completed           </button>         );       }        // React idiom for shortcutting to `classSet` since it'll be used often       var cx = React.addons.classSet;       var nowShowing = this.props.nowShowing;       return (         <footer className=""footer"">           <span className=""todo-count"">             <strong>{this.props.count}</strong> {activeTodoWord} left           </span>           <ul className=""filters"">             <li>               <a                 href=""#/""                 className={cx({selected: nowShowing === app.constants.ALL_TODOS})}>                   All               </a>             </li>             {' '}             <li>               <a                 href=""#/active""                 className={cx({selected: nowShowing === app.constants.ACTIVE_TODOS})}>                   Active               </a>             </li>             {' '}             <li>               <a                 href=""#/completed""                 className={cx({selected: nowShowing === app.constants.COMPLETED_TODOS})}>                   Completed               </a>             </li>           </ul>           {clearButton}         </footer>       );     }   }  }   todoItem.tsx The TodoItem component represents one of the tasks in the list of tasks. This component has both properties (ITodoItemProps) and state (ITodoItemState). The component initial’s state is set in the component’s constructor by itself while the properties are passed as constructor arguments and are set by the component’s parent component (the TodoApp component). /// <reference path=""../typings/react/react-global.d.ts"" /> /// <reference path=""./interfaces.d.ts""/>  namespace app.components {    export class TodoItem extends React.Component<ITodoItemProps, ITodoItemState> {      constructor(props : ITodoItemProps){       super(props);       // set initial state       this.state = { editText: this.props.todo.title };     }      public handleSubmit(event) {       var val = this.state.editText.trim();       if (val) {         this.props.onSave(val);         this.setState({editText: val});       } else {         this.props.onDestroy();       }     }      public handleEdit() {       this.props.onEdit();       this.setState({editText: this.props.todo.title});     }      public handleKeyDown(event) {       if (event.which === app.constants.ESCAPE_KEY) {         this.setState({editText: this.props.todo.title});         this.props.onCancel(event);       } else if (event.which === app.constants.ENTER_KEY) {         this.handleSubmit(event);       }     }      public handleChange(event) {       this.setState({editText: event.target.value});     }      // This is a completely optional performance enhancement      // that you can implement on any React component. If you      // were to delete this method the app would still work      // correctly (and still be very performant!), we just use it      // as an example of how little code it takes to get an order     // of magnitude performance improvement.     public shouldComponentUpdate(nextProps, nextState) {       return (         nextProps.todo !== this.props.todo ||         nextProps.editing !== this.props.editing ||         nextState.editText !== this.state.editText       );     }      // Safely manipulate the DOM after updating the state      // when invoking this.props.onEdit() in the handleEdit     // method above.      public componentDidUpdate(prevProps) {       if (!prevProps.editing && this.props.editing) {         var node = React.findDOMNode<HTMLInputElement>(this.refs[""editField""]);         node.focus();         node.setSelectionRange(node.value.length, node.value.length);       }     }      public render() {       return (         <li className={React.addons.classSet({           completed: this.props.todo.completed,           editing: this.props.editing         })}>           <div className=""view"">             <input               className=""toggle""               type=""checkbox""               checked={this.props.todo.completed}               onChange={this.props.onToggle}             />             <label onDoubleClick={ e => this.handleEdit() }>               {this.props.todo.title}             </label>             <button className=""destroy"" onClick={this.props.onDestroy} />           </div>           <input             ref=""editField""             className=""edit""             value={this.state.editText}             onBlur={ e => this.handleSubmit(e) }             onChange={ e => this.handleChange(e) }             onKeyDown={ e => this.handleKeyDown(e) }           />         </li>       );     }   }  }   app.tsx This file contains the application’s entry point and the declaration of the TodoApp component which is the only top-level component in this application. /// <reference path=""../typings/react/react-global.d.ts"" /> /// <reference path=""./interfaces.d.ts""/>  // We should have installed a type declaration file but // for the director npm package but it is not available // so we will use this declaration to avoid compilation  // errors for now. declare var Router : any;  var TodoModel = app.models.TodoModel; var TodoFooter = app.components.TodoFooter; var TodoItem = app.components.TodoItem;  namespace app.components {    export class TodoApp extends React.Component<IAppProps, IAppState> {      constructor(props : IAppProps) {       super(props);       this.state = {         nowShowing: app.constants.ALL_TODOS,         editing: null       };     }      public componentDidMount() {       var setState = this.setState;       // we will configure the Router here       // our router is provided by the       // director npm module       // the router observes changes in the URL and        // triggers some component's event accordingly        var router = Router({         '/': setState.bind(this, {nowShowing: app.constants.ALL_TODOS}),         '/active': setState.bind(this, {nowShowing: app.constants.ACTIVE_TODOS}),         '/completed': setState.bind(this, {nowShowing: app.constants.COMPLETED_TODOS})       });       router.init('/');     }      public handleNewTodoKeyDown(event) {       if (event.keyCode !== app.constants.ENTER_KEY) {         return;       }        event.preventDefault();        var val = React.findDOMNode<HTMLInputElement>(this.refs[""newField""]).value.trim();        if (val) {         this.props.model.addTodo(val);         React.findDOMNode<HTMLInputElement>(this.refs[""newField""]).value = '';       }     }      public toggleAll(event) {       var checked = event.target.checked;       this.props.model.toggleAll(checked);     }      public toggle(todoToToggle) {       this.props.model.toggle(todoToToggle);     }      public destroy(todo) {       this.props.model.destroy(todo);     }      public edit(todo) {       this.setState({editing: todo.id});     }      public save(todoToSave, text) {       this.props.model.save(todoToSave, text);       this.setState({editing: null});     }      public cancel() {       this.setState({editing: null});     }      public clearCompleted() {       this.props.model.clearCompleted();     }      // the JSX syntax is quite intuitive but check out     // https://facebook.github.io/react/docs/jsx-in-depth.html     // if you need additional help     public render() {       var footer;       var main;       var todos = this.props.model.todos;        var shownTodos = todos.filter(function (todo) {         switch (this.state.nowShowing) {         case app.constants.ACTIVE_TODOS:           return !todo.completed;         case app.constants.COMPLETED_TODOS:           return todo.completed;         default:           return true;         }       }, this);        var todoItems = shownTodos.map(function (todo) {         return (           <TodoItem             key={todo.id}             todo={todo}             onToggle={this.toggle.bind(this, todo)}             onDestroy={this.destroy.bind(this, todo)}             onEdit={this.edit.bind(this, todo)}             editing={this.state.editing === todo.id}             onSave={this.save.bind(this, todo)}             onCancel={ e => this.cancel() }           />         );       }, this);        var activeTodoCount = todos.reduce(function (accum, todo) {         return todo.completed ? accum : accum + 1;       }, 0);        var completedCount = todos.length - activeTodoCount;        if (activeTodoCount || completedCount) {         footer =           <TodoFooter             count={activeTodoCount}             completedCount={completedCount}             nowShowing={this.state.nowShowing}             onClearCompleted={ e=> this.clearCompleted() }           />;       }        if (todos.length) {         main = (           <section className=""main"">             <input               className=""toggle-all""               type=""checkbox""               onChange={ e => this.toggleAll(e) }               checked={activeTodoCount === 0}             />             <ul className=""todo-list"">               {todoItems}             </ul>           </section>         );       }        return (         <div>           <header className=""header"">             <h1>todos</h1>             <input               ref=""newField""               className=""new-todo""               placeholder=""What needs to be done?""               onKeyDown={ e => this.handleNewTodoKeyDown(e) }               autoFocus={true}             />           </header>           {main}           {footer}         </div>       );     }   } }  var model = new TodoModel('react-todos'); var TodoApp = app.components.TodoApp;  function render() {   React.render(     <TodoApp model={model}/>,     document.getElementsByClassName('todoapp')[0]   ); }  model.subscribe(render); render();  Make sure that the this operator is pointing to the right element at all times. For example, you should use arrow functions: onKeyDown={ e => this.handleNewTodoKeyDown(e) }  instead of onKeyDown={ this.handleNewTodoKeyDown }  To ensure that the this operator is pointing to the component inside the handleNewTodoKeyDown function.  5. Compiling the application To compile our application we must add a file named tsconfig.json under the js folder: {     ""compilerOptions"": {         ""target"": ""es5"",         ""module"": ""commonjs"",         ""moduleResolution"": ""node"",         ""isolatedModules"": false,         ""jsx"": ""react"",         ""experimentalDecorators"": true,         ""emitDecoratorMetadata"": true,         ""declaration"": false,         ""noImplicitAny"": false,         ""removeComments"": true,         ""noLib"": false,         ""preserveConstEnums"": true,         ""suppressImplicitAnyIndexErrors"": true     },     ""filesGlob"": [         ""**/*.ts"",         ""**/*.tsx"",         ""!node_modules/**""     ],     ""files"": [         ""constants.ts"",         ""interfaces.d.ts"",         ""todoModel.ts"",         ""utils.ts"",         ""app.tsx"",         ""footer.tsx"",         ""todoItem.tsx""     ],     ""exclude"": [] }  If we check out the TypeScript compiler options we can find out how to use the tsconfig.json file: The --project or -p can be used to compile the project in the given directory. The directory needs to contain a tsconfig.json file to direct compilation. We can compile our application using the following command: # from the application's root folder $ tsc -p js  This should create the following JavaScript files under the js folder: ├── js │   ├── app.js │   ├── constants.js │   ├── footer.js │   ├── todoItem.js │   ├── todoModel.js │   └── utils.ts  These are the files that were referenced in our index.html file: <script type=""text/javascript"" src=""js/constants.js""></script> <script type=""text/javascript"" src=""js/utils.js""></script> <script type=""text/javascript"" src=""js/todoModel.js""></script> <script type=""text/javascript"" src=""js/todoItem.js""></script> <script type=""text/javascript"" src=""js/footer.js""></script> <script type=""text/javascript"" src=""js/app.js""></script>  We are now ready to run our application.  6. Running the application To run the application, we need a web server. We will use the npm module http-server. We can install this package using the following commmand: $ npm install -g http-server  Note: use sudo if you are using OSX Use the following command to run the application: # from the application's root folder $ http-server  If you open a browser and navigate to http://127.0.0.1:8080/ you should be able to see the application running: Remember to open the chrome developer tools to take a look to the React developer tools extension for chrome and how the value of the properties and state of the components change as you interact with the application.  7. Conclusions In this post we have learned how to set up a development environment and create a new project to work with TypeScript and React. You can browse the source code online at GitHub. Are you thirsty for more? If so, check out Typed React and Redux by Jack Hsu. We will keep this blog updated and write more about React and TypeScript in the future. Don’t forget to subscribe if you don’t want to miss it out! Please feel free to talk about this article with us via @OweR_ReLoaDeD and @WolkSoftwareLtd.   1,164 Kudos   1,164 Kudos Tweet Now read this Writing JavaScript APIs This article covers the most important things that you will need to consider before and while writing your own utilities and libraries. We’ll focus on how to make your code accessible to other developers. A couple of topics will be... Continue → Subscribe to Wolk Software Engineering Subscribe Don’t worry; we hate spam with a passion. You can unsubscribe with one click. oDUaBPhXkhNlbmkybTNs @WolkSoftwareLtd wolksoftware.com Svbtle Wolk Software Limited Svbtle Terms • Privacy • Promise  "	"null"	"null"	""	"true"
"React.js"	"vortigern - A universal boilerplate for building web applications w/ TypeScript, React, Redux and more."	"https://github.com/barbar/vortigern"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"121"	"11"	"14"	"GitHub - barbar/vortigern: A universal boilerplate for building web applications w/ TypeScript, React, Redux, Server Side Rendering and more. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 121 Fork 14 barbar/vortigern Code Issues 6 Pull requests 0 Pulse Graphs A universal boilerplate for building web applications w/ TypeScript, React, Redux, Server Side Rendering and more. https://barbar.github.io/vortigern 134 commits 3 branches 1 release 4 contributors TypeScript 64.5% JavaScript 34.8% CSS 0.7% TypeScript JavaScript CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags develop gh-pages master Nothing to show v0.1 Nothing to show New pull request Latest commit d44c320 Jul 12, 2016 altayaydemir Update server.tsx and favicon's path, fixes #70 Permalink Failed to load latest commit information. config added tslint preloader to karma, set the fail on hint to true on all … Jul 7, 2016 src Update server.tsx and favicon's path, fixes #70 Jul 12, 2016 .dockerignore added typings to the ignore files Apr 28, 2016 .editorconfig add editorconfig Apr 29, 2016 .gitignore Added idea Jun 1, 2016 .stylelintrc add counter example with container & tests Apr 28, 2016 .travis.yml Add configuration for CI Jun 21, 2016 Dockerfile added Dockerfile Apr 28, 2016 LICENSE Update LICENSE Jun 21, 2016 README.md Update README.md Jun 21, 2016 package.json updated tslint & loader, added react-specific rule set Jul 9, 2016 tsconfig.json add counter example with container & tests Apr 28, 2016 tslint.json relaxing the linter more Jul 9, 2016 typings.json Add Enzyme as TestHelper May 28, 2016 README.md Vortigern Vortigern is our opinionated boilerplate for crafting universal web applications by using modern technologies like TypeScript, React and Redux. Libraries Vortigern uses the following libraries and tools: Core TypeScript React & React DOM for views. React Router to handle in-app routing. Redux for managing application state. React-Redux to use React-Redux bindings. React-Router-Redux to keep application state sync with route changes. Utilities Isomorphic Fetch with ES6-Promise for using fetch api on both client & server side. Redux Thunk for dispatching async actions. Redux Connect for resolving async props in react-router. React Helmet classnames Build System Webpack for bundling. TypeScript Loader as ts loader. Babel Loader as js loader. React Hot Loader for providing hot reload capability to our development server Isomorphic Style Loader for loading styles on server-side. Style Loader CSS Loader PostCSS Loader PostCSS cssnext PostCSS Assets JSON Loader File Loader URL Loader Sourcemap Loader Manifest Plugin Extract Text Plugin for exporting bundled css. tslint Loader for using tslint as preloader on build process. stylelint Loader for using stylelint as preloader on build process. Istanbul Instrumenter Loader for using istanbul on postload process while generating code coverage reports. Dev & Prod Server Webpack Dev Server Webpack Dev Middleware Webpack Hot Middleware Express for running server both on client and server side. Compression for gzip compression Serve Favicon for serving favicon. Developer Experience Typings for installing type definitions of external libraries. tslint for linting TypeScript files. stylelint for linting styles. Redux Logger Redux DevTools Chalk for colored terminal logs. Testing Karma as test runner with following plugins Karma-Webpack Karma-Mocha Karma-Chai Karma-Coverage Karma-PhantomJS Launcher Mocha as testing framework. Chai as assertion library. Enzyme for rendering React Components. Fetch Mock for testing async actions. Redux Mock Store for creating mock stores. Directory Structure . ├── build                       # Built, ready to serve app. ├── config                      # Root folder for configurations. │   ├── test                    # Test configurations. │   ├── types                   # Global type definitions, written by us. │   ├── webpack                 # Webpack configurations. │   └── main.ts                 # Generic App configurations. ├── node_modules                # Node Packages. ├── src                         # Source code. │   ├── app                     # App folder. │   │ ├── components            # React Components. │   │ ├── containers            # React/Redux Containers. │   │ ├── helpers               # Helper Functions & Components. │   │ ├── redux                 # Redux related code aka data layer of the app. │   │ │   ├── modules           # Redux modules.    │   │ │   ├── reducers.ts       # Main reducers file to combine them.   │   │ │   └── store.ts          # Redux store, contains global app state.     │   │ └── routes.tsx            # Routes. │   ├── client.tsx              # Entry point for client side rendering. │   └── server.tsx              # Entry point for server side rendering. ├── typings                     # Type definitions installed with typings.               ├── .dockerignore               # Tells docker which files to ignore. ├── .gitignore                  # Tells git which files to ignore. ├── .stylelintrc                # Configures stylelint. ├── Dockerfile                  # Dockerfile. ├── favicon.ico                 # Favicon. ├── package.json                # Package configuration. ├── README.md                   # This file ├── tsconfig.json               # TypeScript transpiler configuration. ├── tslint.json                 # Configures tslint. └── typings.json                # Typings package configuration. Installation You can clone from this repository or install the latest version as a zip file or a tarball. $ git clone https://github.com/barbar/vortigern $ cd vortigern $ npm install Usage All commands defaults to development environment. You can set NODE_ENV to production or use the shortcuts below. # Running  $ npm start # This starts the app in development mode  # Starting it with the production build $ NODE_ENV=production npm start # or $ npm run start:prod  # Building   $ npm build # This builds the app in development mode  # Commands below builds the production build $ NODE_ENV=production npm build # or $ npm run build:prod  # Testing $ npm test For Windows users, we recommend using the shortcuts instead of setting environment variables because they work a little different on Windows. Notes # If you want install additional libraries, you can also install their typings from DefinitelyTyped $ typings install dt~<package> --global --save # or if it's located on npm $ typings install <package> --save Credits Vortigern is released under the MIT license. The image in this README belongs to hhvferry.com. Barbar Startup Factory We help startups start and stay started by helping them plan, strategize, fund and execute their vision. You can contact us at hey@barbar.com.tr Be sure to check out available jobs at Barbar. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/barbar/vortigern"	""	"true"
"Module Bundlers"	"Grunt"	"http://gruntjs.com/"	"CommonJS module bundler. Does not support TypeScript ""out of the box"", but can be applied with"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"grunt · GitHub Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This organization grunt http://gruntjs.com/ Repositories People 21 Filters Sources Forks JavaScript 10,929 1,382 grunt Grunt: The JavaScript Task Runner Updated Jul 15, 2016 JavaScript 1,243 288 grunt-contrib-uglify Minify files with UglifyJS. Updated Jul 15, 2016 JavaScript 252 38 grunt-contrib-csslint Lint CSS files. Updated Jul 15, 2016 JavaScript 394 56 grunt-contrib-htmlmin Minify HTML. Updated Jul 14, 2016 JavaScript 13 3 grunt-contrib-internal Internal tasks for managing the grunt-contrib project. Updated Jul 13, 2016 JavaScript 658 129 grunt-contrib-connect Start a static web server. Updated Jul 12, 2016 JavaScript 738 164 grunt-contrib-concat Concatenate files. Updated Jul 7, 2016 JavaScript 719 138 grunt-contrib-cssmin Compress CSS files. Updated Jul 5, 2016 JavaScript 200 85 grunt-contrib-qunit Run QUnit unit tests in a headless PhantomJS instance. Updated Jul 3, 2016 JavaScript 1 2 grunt-legacy-log-utils Static methods for the Grunt 0.4.x logger. Updated Jun 27, 2016 JavaScript 1,811 327 grunt-contrib-watch Run tasks whenever watched files change. Updated Jun 25, 2016 JavaScript 338 162 grunt-contrib-jasmine Run jasmine specs headlessly through PhantomJS. Updated Jun 21, 2016 JavaScript 683 174 grunt-contrib-jshint Validate files with JSHint. Updated Jun 15, 2016 JavaScript 4 9 grunt-legacy-log The Grunt 0.4.x logger. Updated Jun 11, 2016 JavaScript 677 181 grunt-contrib-less Compile LESS files to CSS. Updated Jun 8, 2016 JavaScript 322 83 grunt-contrib-compress Compress files and folders. Updated May 24, 2016 JavaScript 1,125 160 grunt-contrib-imagemin Minify PNG and JPEG images. Updated May 23, 2016 JavaScript 277 133 grunt-contrib-handlebars Precompile Handlebars templates to JST file. Updated May 18, 2016 3 0 rfcs RFCs for changes to Grunt Updated May 17, 2016 73 130 grunt-docs Grunt documentation. Updated May 16, 2016 Previous 1 2 3 4 Next 21 People Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/gruntjs/"	"CommonJS module bundler. Does not support TypeScript ""out of the box"", but can be applied with"	"true"
"Module Bundlers"	"grunt-ts"	"https://www.npmjs.com/package/grunt-ts"	"CommonJS module bundler. Does not support TypeScript ""out of the box"", but can be applied with"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"grunt-ts Search sign up or log in log in node package manager Toggle Navigation npm Enterprise features pricing documentation support Introducing npm Enterprise add-ons. Integrate third-party dev tools into npm… grunt-ts Compile and manage your TypeScript project grunt-ts TypeScript Compilation Task for GruntJS Grunt-ts is an npm package that handles TypeScript compilation work in GruntJS build scripts. It provides a Grunt-compatible wrapper for the tsc command-line compiler, and provides some additional functionality that improves the TypeScript development workflow. Grunt-ts supports compiling against tsconfig.json or even a Visual Studio project directly. Grunt-ts is itself written in TypeScript. Latest Changes Latest beta release is 6.0.0-beta.1 which should be compatible with typescript@next. Latest release is 5.5.1 with built-in support for features added in TypeScript 1.8. Full changelog is here. How To Contribute Thank you for your interest in contributing! Please see the contributing guide for details. Getting Started If you've never used GruntJS on your computer, you should follow the detailed instructions here to get Node.js and the grunt-cli working. If you're a Grunt expert, simply follow these steps: Run npm install grunt-ts in your project directory; this will install grunt-ts, TypeScript, and GruntJS. Add the ts task in your Gruntfile.js (see below for a minimalist one). Run grunt at the command line in your project folder to compile your TypeScript code. This minimalist Gruntfile.js will compile *.ts files in all subdirectories of the project folder, excluding anything under node_modules: module.exports = function(grunt) {   grunt.initConfig({     ts: {       default : {         src: [""**/*.ts"", ""!node_modules/**""]       }     }   });   grunt.loadNpmTasks(""grunt-ts"");   grunt.registerTask(""default"", [""ts""]); }; A more extensive sample Gruntfile.js is available here. Grunt-ts Features Allows use of all standard GruntJS functionality such as use of customizable task targets, globbing, use of the files object (for instantiating multiple independent tsc runs in a single target), etc. Allows the developer to select a custom TypeScript compiler version for their project, or even use a custom (in-house) version. Supports most switches of the tsc TypeScript Compiler via options in the gruntfile ts task, and also supports switch overrides per-target. Supports Visual Studio Projects as a compile target for identifying TypeScript files, setting up compile configuration, or both. Supports TypeScript Projects via tsconfig.json when used with TypeScript 1.5 or higher. Provides a transforms feature that eases code refactoring by taking the burden of relative path maintenance off the developer. If the paths to a set of files changes, grunt-ts will regenerate the relevant sections. This feature supports: External module import transforms by file name, aliasing, directories, indexed directories, and re-exported imports. Internal module reference maintenance Common reference file management Allows concatenation where supported by the TypeScript compiler's --out switch Encodes HTML files as TypeScript variables (for HTML templating engines) Performs live file watching (compile on save) Enables ""Fast"" compile when using external modules Support for tsc Switches Grunt-ts provides explicit support for most tsc switches. Any arbitrary switches can be passed to tsc via the additionalFlags feature. tsc switch name in grunt-ts description --allowJs allowJs Allow JavaScript files (*.js) to be compiled. --allowSyntheticDefaultImports allowSyntheticDefaultImports Allows use ""default"" ES6 module import syntax with pre-ES6 libraries that don't have a default (on by default with SystemJS) --allowUnreachableCode allowUnreachableCode Do not report errors on unreachable code. --allowUnusedLabels allowUnusedLabels Do not report errors on unused labels. --declaration declaration Generates a .d.ts definitions file for compiled TypeScript files --emitDecoratorMetadata emitDecoratorMetadata Emit metadata for type/parameter decorators. --experimentalAsyncFunctions experimentalAsyncFunctions Enables experimental support for proposed ECMAScript async functions --experimentalDecorators experimentalDecorators Enables experimental support for proposed ECMAScript decorators --forceConsistentCasingInFileNames forceConsistentCasingInFileNames Disallow inconsistently-cased references to the same file. --inlineSourceMap inlineSourceMap Emit a single file that includes source maps instead of emitting a separate .js.map file. --inlineSources inlineSources Emit the TypeScript source alongside the sourcemaps within a single file; requires --inlineSourceMap to be set. --isolatedModules isolatedModules Ensures that the output is safe to only emit single files by making cases that break single-file transpilation an error --jsx jsx Specifies the JSX code generation style: 'preserve' or 'react' --locale locale Specify locale for error messages. --mapRoot LOCATION mapRoot Specifies the location where debugger should locate map files instead of generated locations. --module KIND module Specify module style for code generation --moduleResolution KIND moduleResolution Specifies module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). --newLine newLine Explicitly specify newline character (CRLF or LF); if omitted, uses OS default. --noEmit noEmit Check, but do not emit JS, even in the absence of errors. --noEmitHelpers noEmitHelpers Do not generate custom helper functions like __extends in compiled output. --noEmitOnError noEmitOnError Do not emit JavaScript if there is a compilation error --noFallthroughCasesInSwitch noFallthroughCasesInSwitch Report errors for fallthrough cases in switch statement. --noImplicitAny noImplicitAny Warn on expressions and declarations with an implied any type. --noImplicitUseStrict noImplicitUseStrict Warn on expressions and declarations with an implied any type. --noImplicitReturns noImplicitReturns Report error when not all code paths in function return a value. --noLib noLib Do not automatically include lib.d.ts is compilation context. --noResolve noResolve Do not add triple-slash references or module import targets to the compilation context. --out FILE out Concatenate and emit output to a single file. --outDir DIRECTORY outDir Redirect output structure to the directory. --preserveConstEnums preserveConstEnums Const enums will be kept as enums in the emitted JS. --pretty pretty Stylize errors and messages using color and context. --reactNamespace reactNamespace Specifies the object invoked for createElement and __spread when targeting 'react' JSX emit. --removeComments removeComments Configures if comments should be included in the output --rootDir rootDir Allows override of common root folder calculated by --outDir. --skipDefaultLibCheck skipDefaultLibCheck Don't check a user-defined default lib file's validity. --sourceMap sourceMap Generates corresponding .map file --sourceRoot LOCATION sourceRoot Specifies the location where debugger should locate TypeScript files instead of source locations. --stripInternal stripInternal does not emit members marked as @internal. --suppressExcessPropertyErrors suppressExcessPropertyErrors Disables strict object literal assignment checking (experimental). --suppressImplicitAnyIndexErrors suppressImplicitAnyIndexErrors Specifies the location where debugger should locate TypeScript files instead of source locations. --target VERSION target Specify ECMAScript target version: 'es3', 'es5', or 'es6' For file ordering, look at JavaScript Generation. grunt-ts gruntfile.js options grunt-ts property where to define description additionalFlags option string - allows passing arbitrary strings to the compiler. This is intended to enable compatibility with features not supported directly by grunt-ts. allowJs option true, false (default) - Allow JavaScript files (*.js) to be compiled. allowUnreachableCode option true, false (default) - Do not report errors on unreachable code. allowUnusedLabels option true, false (default) - Do not report errors on unused labels. allowSyntheticDefaultImports option true, false (default) - Allows use ""default"" ES6 module import syntax with pre-ES6 libraries that don't have a default (on by default with SystemJS and not required to specify). baseDir option string - Sets root directory for maintaining source structure when using outDir and fast together. Use rootDir for newer versions of TypeScript. comments option true, false (default) - include comments in emitted JS. compile option true (default), false - compile TypeScript code. compiler option string - path to custom compiler declaration option true, false (default) - indicates that definition files should be emitted. emitDecoratorMetadata option true, false (default) - set to true to emit metadata for proposed ECMAScript decorators (will enable experimentalDecorators) emitGruntEvents option true, false (default) - set to true to raise an event in Grunt upon failed builds. experimentalAsyncFunctions option true, false (default) - set to true to enable support for proposed ECMAScript async functions (in ES6 mode only) experimentalDecorators option true, false (default) - set to true to enable support for proposed ECMAScript decorators failOnTypeErrors option true (default), false - fail Grunt pipeline if there is a type error. (See also noEmitOnError) fast option 'watch' (default), 'always', 'never' - how to decide on a ""fast"" grunt-ts compile. files target Sets of files to compile and optional output destination forceConsistentCasingInFileNames option true, false (default) - Disallow inconsistently-cased references to the same file. html target string or string[] - glob to HTML templates htmlModuleTemplate option string - HTML template namespace htmlOutDir option string - Sets a root for output of transformed-to-TypeScript HTML files htmlOutDirFlatten option true, false (default) - Will flatten the transformed HTML files to a single folder htmlVarTemplate option string - HTML property name inlineSourceMap option true, false (default) Emit a single file that includes source maps instead of emitting a separate .js.map file; If enabled, will automatically enable sourceMap. inlineSources option true, false (default) Emit the TypeScript source alongside the sourcemaps within a single file; If enabled, will automatically enable inlineSourceMap and sourceMap. isolatedModules option true, false (default) Ensures that the output is safe to only emit single files by making cases that break single-file transpilation an error. jsx option 'preserve', 'react', (TypeScript default is 'react'). If 'preserve', TypeScript will emit .jsx; if 'react', TypeScript will transpile and emit .js files. locale option string - specify locale for error messages mapRoot option string - root for referencing .js.map files in JS module option default to be nothing, If you want to set it you set it to either 'amd' or 'commonjs' moduleResolution option 'classic' or 'node'. This was introduced in TypeScript 1.6. The default is 'node' if not passed. More details here. newLine option CRLF, LF, `` (default) - If passed with a value, TypeScript will use the specified line endings. Also affects grunt-ts transforms. noEmit option true, false (default) - If passed as true, TypeScript will not emit even if it compiles cleanly noEmitHelpers option true, false (default) - If passed as true, TypeScript will not generate custom helper functions like __extends in compiled output noEmitOnError option true, false (default) - If passed as true, TypeScript will not emit JS if there is an error (see also failOnTypeErrors) noFallthroughCasesInSwitch option true, false (default) - Report errors for fallthrough cases in switch statement. noImplicitAny option true, false (default) - enable for stricter type checking noImplicitReturns option true, false (default) - Report error when not all code paths in function return a value. noLib option true, false (default) - do not automatically include lib.d.ts in compilation context noResolve option true, false (default) - for deprecated version of TypeScript options target out target string - instruct tsc to concatenate output to this file. outDir target string - instruct tsc to emit JS to this directory. preserveConstEnums option true, false (default) - If true, const enums will be kept as enums in the emitted JS. pretty option true, false (default) - Stylize errors and messages using color and context. reactNamespace option string - Specifies the object invoked for createElement and __spread when targeting 'react' JSX emit. reference target string - tells grunt-ts which file to use for maintaining references removeComments option true (default), false - removes comments in emitted JS rootDir option string - Allows override of common root folder calculated by --outDir. skipDefaultLibCheck option true, false (default) - Don't check a user-defined default lib file's validity. sourceRoot option string - root for referencing TS files in .js.map sourceMap option true (default), false - indicates if source maps should be generated (.js.map) stripInternal option true, false (default) - does not emit members marked as @internal. suppressExcessPropertyErrors option false (default), true - indicates if TypeScript should disable strict object literal assignment checking (experimental) suppressImplicitAnyIndexErrors option false (default), true - indicates if TypeScript should allow access to properties of an object by string indexer when --noImplicitAny is active, even if TypeScript doesn't know about them. src target string or string[] - glob of TypeScript files to compile. target option 'es5' (default), 'es3', or 'es6' - targeted ECMAScript version tsconfig target true, a string path, or an object. See tsconfig for details. verbose option true, false (default) - logs tsc command-line options to console vs target string referencing a .csproj or .vbproj file or, {} (object) (see Visual Studio Projects for details) watch target string - will watch for changes in the specified directory or below something else Don't see the switch you're looking for? Check out additionalFlags Note: In the above chart, if ""where to define"" is ""target"", the property must be defined on a target or on the ts object directly. If ""where to define"" is ""options"", then the property must be defined on an options object on ts or on a target under ts. grunt-ts target properties dest Grunt-ts does not support the GruntJS standard dest target property. Instead, you should use files, out, or outDir. files Grunt-ts supports use of the GruntJS-centric files property on a target as an alternative to the tsc-centric use of src and out/outDir. Notes: The fast grunt-ts option is not supported in this configuration. You should specify fast: 'never' to avoid warnings when files is used. It is not supported to specify an array of values for dest with grunt-ts. A warning will be issued to the console. If a non-empty array is passed, the first element will be used and the rest will be truncated. If the dest parameter ends with "".js"", the value will be passed to the --out parameter of the TypeScript compiler. Otherwise, if there is a non-blank value, it will be passed to the --outDir parameter. If you intend to pass the specific value ""src"" to the TypeScript --outDir parameter, specify it as ""src/"" in the dest parameter to avoid grunt-ts warnings. Here are some examples of using the target files property with grunt-ts: grunt.initConfig({   ts: {     compileTwoSetsOfFilesUsingArrayStyle: {       // This will run tsc twice.  The first time, the result of the 'files1/**/*.ts' glob will be        // passed to tsc with the --out switch as 'out/ArrayStyle/1.js'.        // see https://github.com/gruntjs/grunt-docs/blob/master/Configuring-tasks.md#files-array-format        files: [{ src: ['files1/**/*.ts'], dest: 'out/ArrayStyle/1.js' },               { src: ['files2/**/*.ts'], dest: 'out/ArrayStyle/2.js' }],       options: {         fast: 'never'       }     },     compileTwoSetsOfFilesToDirUsingArrayStyle: {       // This will run tsc twice.  The first time, the result of the 'files1/**/*.ts' glob will be        // passed to tsc with the --outDir switch as 'out/ArrayStyle'.        // see https://github.com/gruntjs/grunt-docs/blob/master/Configuring-tasks.md#files-array-format        files: [{ src: ['files1/**/*.ts'], dest: 'out/ArrayStyle' },               { src: ['files2/**/*.ts'], dest: 'out/ArrayStyle' }],       options: {         fast: 'never'       }     },     compileTwoSetsOfFilesUsingObjectStyle: {       // This will run tsc twice.  The first time, the result of the 'files1/**/*.ts' glob will be        // passed to tsc with the --out switch as 'out/ObjectStyle/1.js'.        // see https://github.com/gruntjs/grunt-docs/blob/master/Configuring-tasks.md#files-object-format        files: {         'out/ObjectStyle/1.js': ['files1/**/*.ts'],         'out/ObjectStyle/2.js': ['files2/**/*.ts']       },       options: {         fast: 'never'       }     },     compileTwoSetsOfFilesToDirUsingObjectStyle: {       // This will run tsc once.  The result of the globs will be passed to tsc with the        // --outDir switch as 'out/ObjectStyle'.        // see https://github.com/gruntjs/grunt-docs/blob/master/Configuring-tasks.md#files-object-format        files: {         'out/ObjectStyle': ['files1/**/*.ts','files2/**/*.ts']         },         options: {           fast: 'never'         }       }     } }); html Grunt-ts supports compilation of .html file content to TypeScript variables which is explained in detail here. The html target property acts similarly to src, except that it searches for html files to convert to TypeScript variables. See also htmlModuleTemplate and htmlVarTemplate. // How to use the html target property (incomplete example)  grunt.initConfig({   ts: {     default: {       html: [""templates/**/*.html""]     }   } }); Note: the html compilation functionality will not fire if the src property is not specified. If you wish to only have the HTML compile to TypeScript without compiling the resulting .ts files to JavaScript, make sure they're excluded from the src globs, or else specify an empty src array alongside the html task property, and set the target compile option to false: // Example of how to compile html files to TypeScript without compiling the resulting  // .ts files to JavaScript.  grunt.initConfig({   ts: {     default: {       html: [""templates/**/*.html""],       src: [],       options: {         compile: false       }     }   } }); options This section allows global configuration for the grunt-ts task. All target-specific options are supported. If a target also has options set, the target's options override the global task options. out Passes the --out switch to tsc. This will cause the emitted JavaScript to be concatenated to a single file if your code allows for that. Note - the sequence of concatenation when using namespaces (formerly called internal modules) is usually significant. You can assist TypeScript to order the emitted JavaScript correctly by changing the sequence in which files appear in your glob. For example, if you have a.ts, b.ts, and c.ts and use the glob '*.ts, the default would be for TypeScript to concatenate the files in alphabetical order. If you needed the content from b.ts to appear first, and then the rest in alphabetical order, you could specify the glob like this: ['b.ts','*.ts']. Note - the out feature should not be used in combination with module because the TypeScript compiler does not support concatenation of external modules; consider using a module bundler like WebPack, Browserify, or Require's r.js to concatenate external modules. grunt.initConfig({   ts: {     default: {       out: ""dist/myscript.js""     }   } }); Warning: Using the compiler with out and reference will prevent grunt-ts from using its fast compile feature. Consider using external modules with transforms instead. outDir Passes the --outDir switch to tsc. This will redirect the emitted JavaScript to the specified directory and subdirectories. grunt.initConfig({   ts: {     default: {       outDir: ""dist""     }   } }); reference Grunt-ts can automatically generate a TypeScript file containing a reference to all other found .ts files. This means that the developer will not need to cross-reference each of their TypeScript files manually; instead, they can just reference the single reference file in each of their code files. grunt.initConfig({   ts: {     default: {       src: [""references.ts"",""some/other/path/**/*.ts""],       reference: ""references.ts""     }   } }); Note: the TypeScript file identified in the reference property must be included in the src or files property in the Grunt target, or reference won't work (either directly or via wildcard/glob). Note: It is not supported to use reference with files. Warning: Using the compiler with out and reference will prevent grunt-ts from using its fast compile feature. Consider using external modules with transforms instead. src Allows you to specify the TypeScript files that will be passed to the compiler. Supports standard GruntJS functionality such as globbing. More info at Configuring GruntJS Tasks](http://gruntjs.com/configuring-tasks#files). grunt.initConfig({   ts: {     default: {       src: [""app/**/*.ts""]     }   } }); vs Grunt-ts can use the TypeScript compilation settings from a Visual Studio project file (.csproj or .vbproj). In the simplest use case, specify a string identifying the Visual Studio project file name in the vs target property. Grunt-ts will extract the TypeScript settings last saved into the project file and compile the TypeScript files identified in the project in the manner specified by the Visual Studio project's configuration. grunt.initConfig({   ts: {     default: {       vs: 'test/vsproj/testproject.csproj'     }   } }); If more control is desired, you may pass the vs target property as an object literal with the following properties: project: (string, mandatory) the relative path (from the gruntfile.js) to the Visual Studio project file. config: (string, optional, default = '') the Visual Studio project configuration to use (allows choosing a different project configuration than the one currently in-use/saved in Visual Studio). ignoreFiles: (boolean, optional, default = false) Will ignore the files identified in the Visual Studio project. This is useful if you want to keep your command-line build settings synchronized with the project's TypeScript Build settings, but want to specify a custom set of files to compile in your own src glob. If not specified or set to false, the TypeScript files referenced in the Visual Studio project will be compiled in addition to any files identified in the src target property. ignoreSettings: (boolean, optional, default = false) Will ignore the compile settings identified in the Visual Studio project. If specified, grunt-ts will follow its normal behavior and use any TypeScript build settings specified on the target or its defaults. All features of grunt-ts other than files, are compatible with the vs target property. If you wish to add more files to the compilation than are referenced in the Visual Studio project, the src grunt-ts property can be used; any files found in the glob are added to the compilation list (grunt-ts will resolve duplicates). All other target properties and target options specified in the gruntfile.js will override the settings in the Visual Studio project file. For example, if you were referencing a Visual Studio project configuration that had source maps enabled, specifying sourcemap: false in the gruntfile.js would keep all other Visual Studio build settings, but disable generation of source maps. Note: Using the vs target property with files is not supported. Example: Use all compilation settings specified in the ""Release"" TypeScript configuration from the project, but compile only the TypeScript files in the lib subfolder to a single file in the built folder. grunt.initConfig({   ts: {     CompileMyLibsOnly: {       src: 'MyProject/lib/**/*.ts',       out: 'built/mylibs.js',       vs: {         project: 'MyProject/MyProject.csproj',         ignoreFiles: true,         config: 'Release'       }     }   } }); If you wish to disable the Visual Studio built-in TypeScript build, but keep the Visual Studio project properties TypeScript Build pane working, follow these instructions. watch Grunt-ts can watch a directory and recompile TypeScript files when any TypeScript or HTML file is changed, added, or removed. Use the watch target option specifying a target directory that will be watched. All subdirectories are automatically included. Note: this feature does not allow for additional tasks to run after the compilation step is done - for that you should use grunt-contrib-watch. grunt.initConfig({   ts: {     default: {       watch: "".""  //will re-run this task if any .ts or .html file is changed.      }   } }); grunt-ts target options additionalFlags Allows passing arbitrary strings to the compiler. This is intended to enable compatibility with features not supported directly by grunt-ts. The parameters will be passed exactly as-is with a space separating them from the previous switches. It is possible to pass more than one switch with additionalFlags by separating them with spaces. grunt.initConfig({   ts: {     default: {       options: {         additionalFlags: '--autoFixBugs --gruntTs ""is awesome!""'       }     }   } }); allowJs Allows JavaScript files to be compiled. This setting works well with outDir. This feature requires grunt-ts 5.5 or higher and TypeScript 1.8 or higher. grunt.initConfig({   ts: {     default: {       src: [""**/*.ts"", ""**/*.js"", ""!emit/**"", ""!node_modules/**""],       outDir: 'emit/',       options: {         allowJs: true       }     }   } }); allowSyntheticDefaultImports Allows use of ES6 ""default"" import syntax with pre-ES6 modules when not using SystemJS. If using module format ""amd"", ""commonjs"" or ""umd"", the following import syntax for jQuery will give the error ""Module 'jquery' has no default export"" when exporting to ""amd"", ""commonjs"", or ""umd"" format: import * as $ from 'jquery';. In that case, passing allowSyntheticDefaultImports will eliminate this error. NOTE: This is the default behavior when SystemJS module format is used (module: ""system""). This switch (and behavior) requires TypeScript 1.8 or higher. See this issue for more details. grunt.initConfig({   ts: {     default: {       options: {         allowSyntheticDefaultImports: true,         module: 'umd'       }     }   } }); allowUnreachableCode When set to true, TypeScript will not report errors on unreachable code. Requires TypeScript 1.8 or higher. grunt.initConfig({   ts: {     default: {       src: [""**/*.ts"", ""!node_modules/**""],       options: {         allowUnreachableCode: true       }     }   } }); allowUnusedLabels When set to true, TypeScript will not report errors when there are unused labels in your code. Requires TypeScript 1.8 or higher. grunt.initConfig({   ts: {     default: {       src: [""**/*.ts"", ""!node_modules/**""],       options: {         allowUnusedLabels: true       }     }   } }); baseDir When using TypeScript >= 1.5 (most common), use rootDir instead. When using fast compile with outDir, tsc won't guarantee the output directory structure will match the source structure. Setting baseDir helps to ensure the original source structure is mapped to the output directory. This will create a .baseDir.ts file in the baseDir location. A .baseDir.js and .baseDir.js.map will be created in the outDir. grunt.initConfig({   ts: {     default: {       outDir: 'dist',       options: {         baseDir: 'src',         fast: always       }     }   } }); compile true (default)| false Indicates if the TypeScript compilation should be attempted. Turn this off if you wish to just run transforms. grunt.initConfig({   ts: {     default: {       options: {         compile: false       }     }   } }); compiler This target option allows the developer to select an alternate TypeScript compiler. By default, grunt-ts will use the TypeScript compiler that came bundled with it. Alternate compilers can be used by this target option (for custom compiler builds) or using package.json (for npm released version of typescript). To use a custom compiler, update your gruntfile.js file with this code: grunt.initConfig({   ts: {     options: {       compiler: './node_modules/grunt-ts/customcompiler/tsc'     }   } }); Download custom compilers from the current TypeScript repository on GitHub or the old TypeScript repository on CodePlex and extract it to a folder in your project. The compiler will be in the bin folder. Copy all of the files to your project folder and then reference tsc using the compiler task option. For example, if you extracted everything to a mycompiler folder in your project, you'd set the grunt-ts compiler property to './mycompiler/tsc'. In the absence of a compiler argument, grunt-ts will look for an alternate compiler in its peer node_modules folder (where grunt-ts and typescript are peers). The package.json would look something like this for a legacy project: {   ""devDependencies"": {     ""grunt"" : ""~0.4.1"",     ""grunt-ts"" : ""~1.9.2"",     ""typescript"" : ""0.9.7""   } } Note: It is safest to pin the exact TypeScript version (do not use ~ or >). comments true | false (default) Retains comments in the emitted JavaScript if set to true. Removes comments if set to false. Note that if comments and removeComments are both used, the value of removeComments will win; regardless, please don't do this as it is just confusing to everyone. grunt.initConfig({   ts: {     options: {       comments: true //preserves comments in output.      }   } }); declaration true | false (default) Generates corresponding .d.ts file(s) for compiled TypeScript files. grunt.initConfig({   ts: {     options: {       declaration: true     }   } }); emitDecoratorMetadata true | false (default) Set to true to pass --emitDecoratorMetadata to the compiler. If set to true, TypeScript will emit type information about type and parameter decorators, so it's available at runtime. Used by tools like Angular. You will probably need to import the reflect-metadata package in your app when using this feature. This is only available in TypeScript 1.5 and higher. If enabled, will automatically enable experimentalDecorators grunt.initConfig({   ts: {     options: {       emitDecoratorMetadata: true     }   } }); emitGruntEvents true | false (default) Set to true to emit events in Grunt upon significant events in grunt-ts. This is used by the task validate_failure_count in the Gruntfile.js of grunt-ts itself. Currently, the only supported event is grunt-ts.failure which will be raised upon a failed build if emitGruntEvents is true. This is only available in grunt-ts 5.2.0 or higher. grunt.initConfig({   ts: {     options: {       emitGruntEvents: true     }   } }); Example usage: grunt.event.on('grunt-ts.failure', function() {     console.log('It failed!!!!!!'); }); experimentalAsyncFunctions true | false (default) Enable support for experimental proposed ECMAScript async functionality. This is only available in TypeScript 1.6 and higher in 'es6' mode. grunt.initConfig({   ts: {     options: {       experimentalAsyncFunctions: true,       target: 'es6'     }   } }); experimentalDecorators true | false (default) Enable support for experimental proposed ECMAScript decorators. This is only available in TypeScript 1.5 and higher. grunt.initConfig({   ts: {     options: {       experimentalDecorators: true     }   } }); failOnTypeErrors true (default) | false TypeScript has two types of errors: emit preventing and non-emit preventing. Generally, type errors do not prevent the JavaScript emit. Therefore, it can be useful to allow the Grunt pipeline to continue even if there are type errors because tsc will still generate JavaScript. If failOnTypeErrors is set to false, grunt-ts will not halt the Grunt pipeline if a TypeScript type error is encountered. Note that syntax errors or other general tsc errors will always halt the pipeline. grunt.initConfig({   ts: {     options: {       failOnTypeErrors: true     }   } }); fast ""watch"" (default) | ""always"" | ""never"" If you are using external modules, grunt-ts will try to do a fast compile by default, basically only compiling what's changed. It should ""just work"" with the built-in file watching as well as with external tools like grunt-contrib-watch. To do a fast compile, grunt-ts maintains a cache of hashes for TypeScript files in the .tscache folder to detect changes (needed for external watch tool support). It also creates a .baseDir.ts file at the root, passing it to the compiler to make sure that --outDir is always respected in the generated JavaScript. You can customize the behaviour of grunt-ts fast. If you are using files, grunt-ts can't do a fast compile. You should set fast to 'never'. grunt.initConfig({   ts: {     options: {       // disable the grunt-ts fast feature        fast: 'never'     }   } }); forceConsistentCasingInFileNames When set to true, disallows inconsistently-cased references to the same file. For example, when using ES6-style imports, importing a file as ""./MyLibrary"" in one file and ""./mylibrary"" in another. grunt.initConfig({   ts: {     default: {       src: [""**/*.ts"", ""!node_modules/**""],       options: {         forceConsistentCasingInFileNames: true       }     }   } }); htmlModuleTemplate Grunt-ts supports compilation of .html file content to TypeScript variables which is explained in detail here. The htmlModuleTemplate target property allows the developer to define a namespace for the templates. See also html and htmlVarTemplate. //Note: incomplete - combine with html and htmlVarTemplate  grunt.initConfig({   ts: {     default: {       options: {         //MyTemplate.html will be accessible as HtmlTemplates.MyTemplate          htmlModuleTemplate: 'HtmlTemplates.<%= filename %>'       }     }   } }); htmlVarTemplate Grunt-ts supports compilation of .html file content to TypeScript variables which is explained in detail here. The htmlVarTemplate target property allows the developer to define a property name for the template contents. See also html and htmlModuleTemplate. //Note: incomplete - combine with html and htmlModuleTemplate  grunt.initConfig({   ts: {     default: {       options: {         //HTML template objects will expose their content via a property called markup.          htmlVarTemplate: 'markup'       }     }   } }); htmlOutDir Sets a root for output of transformed-to-TypeScript HTML files. See detailed explanation of grunt-ts HTML template support. //Note: incomplete - combine with html and src/files/etc.  grunt.initConfig({   ts: {     default: {       options: {         htmlOutDir: 'generatedHtml'       }     }   } }); htmlOutDirFlatten Will flatten the transformed HTML files to a single folder. See detailed explanation of grunt-ts HTML template support. //Note: incomplete - combine with html and src/files/etc.  grunt.initConfig({   ts: {     default: {       options: {         htmlOutDir: 'generatedHtml',         htmlOutDirFlatten: true       }     }   } }); htmlOutputTemplate Grunt-ts supports compilation of .html file content to TypeScript variables which is explained in detail here. The htmlOutputTemplate target property allows the developer to override the internally defined output template to a custom one, useful if one would like to define the HTML output as an external modules, for example. Three variables can be used in the template, namely: ""<%= modulename %>"" - This variable will be replaced with the value of the htmlModuleTemplate option. ""<%= varname %>"" - This variable will be replaced with the value of the htmlVarTemplate option. ""<%= content %>"" - This variable will be replaced with the content of the HTML file. //Note: Outputs an external module  grunt.initConfig({   ts: {     default: {       options: {         //HTML template objects will expose their content via a property called markup.          htmlVarTemplate: 'markup',         htmlModuleTemplate: 'html',         htmlOutputTemplate: '/* tslint:disable:max-line-length */ \n\           export module <%= modulename %> {\n\               export var <%= varname %> = \'<%= content %>\';\n\           }\n'       }     }   } }); inlineSourceMap true | false (default) When true, TypeScript will emit source maps inline at the bottom of each JS file, instead of emitting a separate .js.map file. If this option is used with sourceMap, inlineSourceMap will win. grunt.initConfig({   ts: {     default: {       options: {         inlineSourceMap: true       }     }   } }); inlineSources true | false (default) When true, TypeScript will emit TypeScript sources ""inline"". This must be used with either inlineSourceMap or sourceMap. When used with inlineSourceMap, the TypeScript sources and the source map itself are included in a Base64-encoded string in a comment at the end of the emitted JavaScript file. When used with sourceMap, the escaped TypeScript sources are included in the .js.map file itself under a sourcesContent property. grunt.initConfig({   ts: {     default: {       options: {         inlineSources: true,         inlineSourceMap: true       }     }   } }); isolatedModules true | false (default) When true, makes scenarios that break single-file transpilation into an error. See https://github.com/Microsoft/TypeScript/issues/2499 for more details. If you are using TypeScript 1.5, and fast compilation, it is ideal to use this to take advantage of future compilation optimizations. grunt.initConfig({   ts: {     default: {       options: {         isolatedModules: true       }     }   } }); jsx `'react'` (default) | `'preserve'` Specify the JSX code generation style. Documentation is here: TypeScript Wiki - JSX. grunt.initConfig({   ts: {     options: {       jsx: 'preserve'     }   } }); locale Specify culture string for error messages - will pass the --locale switch. Requires appropriate TypeScript error messages file to be present (see TypeScript documentation for more details). grunt.initConfig({   ts: {     default: {       options: {         locale: ""ja-jp""       }     }   } }); mapRoot Specifies the root for where .js.map sourcemap files should be referenced. This is useful if you intend to move your .js.map files to a different location. Leave this blank or omit entirely if the .js.map files will be deployed to the same folder as the corresponding .js files. See also sourceRoot. grunt.initConfig({   ts: {     default: {       options: {         //When abc.ts is compiled to abc.js, it will reference /maps/abc.js.map          mapRoot: ""/maps""       }     }   } }); module ""amd"" | ""commonjs"" | ""system"" | ""umd"" | ""es6"" | ""es2015"" | """" (default) Specifies if TypeScript should emit AMD, CommonJS, SystemJS, ""ES6"", or UMD-style external modules. Has no effect if internal modules are used. Note - this should not be used in combination with out prior to TypeScript 1.8 because the TypeScript compiler does not support concatenation of external modules; consider using a module bundler like WebPack, Browserify, or Require's r.js to concatenate external modules. grunt.initConfig({   ts: {     default: {       options: {         module: ""amd""       }     }   } }); moduleResolution ""node"" | ""classic"" (default) New in TypeScript 1.6. TypeScript is gaining support for resolving definition files using rules similar to common JavaScript module loaders. The first new one is support for CommonJS used by NodeJS, which is why this parameter is called ""node"" The ""node"" setting performs an extra check to see if a definition file exists in the node_modules/modulename folder if a TypeScript definition can't be found for an imported module. if this is not desired, set this setting to ""classic"". On Defaults. When using --module commonjs the default --moduleResolution will be node. For all other --module options the default is --moduleResolution classic. If specified, the specified value will always be used. grunt.initConfig({   ts: {     default: {       options: {         moduleResolution: ""classic""       }     }   } }); newLine ""CRLF"" | ""LF"" | """" (default) Will force TypeScript to use the specified newline sequence. Grunt-ts will also use this newline sequence for transforms. If not specified, TypeScript and grunt-ts use the OS default. grunt.initConfig({   ts: {     default: {       options: {         newLine: ""CRLF""       }     }   } }); noEmit true | false (default) Set to true to pass --noEmit to the compiler. If set to true, TypeScript will not emit JavaScript regardless of if the compile succeeds or fails. grunt.initConfig({   ts: {     default: {       options: {         noEmit: true       }     }   } }); noEmitHelpers true | false (default) Set to true to pass --noEmitHelpers to the compiler. If set to true, TypeScript will not emit JavaScript helper functions such as __extends. This is for very advanced users who wish to provide their own implementation of the TypeScript runtime helper functions. grunt.initConfig({   ts: {     default: {       options: {         noEmitHelpers: true       }     }   } }); noEmitOnError true | false (default) Set to true to pass --noEmitOnError to the compiler. If set to true, TypeScript will not emit JavaScript if there is a type error. This flag does not affect the Grunt pipeline; to force the Grunt pipeline to continue (or halt) in the presence of TypeScript type errors, see failOnTypeErrors. grunt.initConfig({   ts: {     default: {       options: {         noEmitOnError: true       }     }   } }); noFallthroughCasesInSwitch true | false (default) Report errors for fallthrough cases in switch statement. grunt.initConfig({   ts: {     default: {       src: [""**/*.ts"", ""!node_modules/**""],       options: {         noFallthroughCasesInSwitch: true       }     }   } }); noImplicitAny true | false (default) Set to true to pass --noImplicitAny to the compiler. Requires more strict type checking. If noImplicitAny is enabled, TypeScript will raise a type error whenever it is unable to infer the type of a variable. By default, grunt-ts will halt the Grunt pipeline on type errors. See failOnTypeErrors for more info. grunt.initConfig({   ts: {     default: {       options: {         noImplicitAny: true       }     }   } }); noImplicitReturns true | false (default) Report error when not all code paths in function return a value. grunt.initConfig({   ts: {     default: {       options: {         noImplicitReturns: true       }     }   } }); noLib true | false (default) Specify this option if you do not want the lib.d.ts to be loaded by the TypeScript compiler. Generally this is used to allow you to manually specify your own lib.d.ts. grunt.initConfig({   ts: {     default: {       options: {         noLib: true       }     }   } }); noResolve true | false (default) Do not add triple-slash references or module import targets to the list of compiled files. grunt.initConfig({   ts: {     options: {       noResolve: true     }   } }); preserveConstEnums true | false (default) Set to true to pass --preserveConstEnums to the compiler. If set to true, TypeScript will emit code that allows other JavaScript code to use the enum. If false (the default), TypeScript will inline the enum values as magic numbers with a comment in the emitted JS. grunt.initConfig({   ts: {     default: {       options: {         preserveConstEnums: true       }     }   } }); pretty true | false (default) Stylize errors and messages using color and context. grunt.initConfig({   ts: {     default: {       options: {         pretty: true       }     }   } }); reactNamespace string Specifies the object invoked for createElement and __spread when targeting 'react' JSX emit. Requires TypeScript 1.8 or higher and grunt-ts 5.5 or higher. grunt.initConfig({   ts: {     options: {       rootDir: ""src/app""     }   } }); removeComments true (default)| false Removes comments in the emitted JavaScript if set to true. Preserves comments if set to false. Note that if comments and removeComments are both used, the value of removeComments will win; regardless, please don't do this as it is just confusing to everyone. grunt.initConfig({   ts: {     options: {       removeComments: false //preserves comments in output.      }   } }); rootDir string Affects the creation of folders inside the outDir location. rootDir allows manually specifying the desired common root folder when used in combination with outDir. Otherwise, TypeScript attempts to calculate this automatically. Not specifying rootDir can result in outDir not matching structure of src folder when using fast compilation. baseDir provides a poor man's version of rootDir for those using TypeScript < 1.5. grunt.initConfig({   ts: {     options: {       rootDir: ""src/app""     }   } }); skipDefaultLibCheck true | false (default) Don't check a user-defined default lib file's validity. grunt.initConfig({   ts: {     default: {       options: {         skipDefaultLibCheck: true       }     }   } }); sourceMap true (default) | false If true, grunt-ts will instruct tsc to emit source maps (.js.map files). If this option is used with inlineSourceMap, inlineSourceMap will win. grunt.initConfig({   ts: {     default: {       options: {         sourceMap: true       }     }   } }); sourceRoot The sourceRoot to use in the emitted source map files. Allows mapping moved .js.map files back to the original TypeScript files. See also mapRoot. grunt.initConfig({   ts: {     default: {       options: {         sourceRoot: ""/dev""       }     }   } }); stripInternal Use stripInternal to prevent the emit of members marked as @internal via a comment. For example: /* @internal */ export class MyClass { } grunt.initConfig({   ts: {     default: {       options: {         sourceRoot: ""/dev""       }     }   } }); suppressExcessPropertyErrors true | false (default) Set to true to disable strict object literal assignment checking (experimental). See https://github.com/Microsoft/TypeScript/pull/4484 for more details. grunt.initConfig({   ts: {     default: {       options: {         suppressExcessPropertyErrors: true       }     }   } }); suppressImplicitAnyIndexErrors true | false (default) Set to true to pass --suppressImplicitAnyIndexErrors to the compiler. If set to true, TypeScript will allow access to properties of an object by string indexer when --noImplicitAny is active, even if TypeScript doesn't know about them. This setting has no effect unless --noImplicitAny is active. grunt.initConfig({   ts: {     default: {       options: {         suppressImplicitAnyIndexErrors: true,         noImplicitAny: true       }     }   } }); For example, the following code would not compile with --noImplicitAny alone, but it would be legal with --noImplicitAny and --suppressImplicitAnyIndexErrors both enabled: interface person {     name: string; }   var p : person = { name: ""Test"" }; p[""age""] = 101;  //property age does not exist on interface person. console.log(p[""age""]); emitDecoratorMetadata true | false (default) Set to true to pass --emitDecoratorMetadata to the compiler. If set to true, TypeScript will emit type information about type and parameter decorators, so it's available at runtime. Used by tools like Angular. You will probably need to import the reflect-metadata package in your app when using this feature. target ""es5"" (default) | ""es3"" | ""es6"" Allows the developer to specify if they are targeting ECMAScript version 3, 5, or 6. Support for es6 emit was added in TypeScript 1.4 and is listed as experimental. Only select ES3 if you are targeting old browsers (IE8 or below). The default for grunt-ts (es5) is different than the default for tsc (es3). grunt.initConfig({   ts: {     default: {       options: {         target: ""es3"" //for IE8 and below        }     }   } }); tsconfig Grunt-ts can integrate with a tsconfig.json file in three ways which offer different behavior: As a boolean: simplest way for default behavior. As a string: still uses defaults, but allows specifying a specific path to the tsconfig.json file or the containing folder. As an object: allows detailed control over how grunt-ts works with tsconfig.json When specifying tsconfig as a boolean In this scenario, grunt-ts will use all settings from the tsconfig.json file in the same folder as Gruntfile.js. If a filesGlob property is present in the tsconfig.json file: It will be evaluated, and any identified files will be added to the compilation context. If a files property is present, it will be modified with the result from evaluating the filesGlob that is present inside tsconfig.json (the files element will not be updated with the results from any glob inside Gruntfile.js). If exclude is present, it will be ignored. If a filesGlob property is NOT present, but files is present: Any files specified in files will be added to the compilation context. If exclude is present, it will be ignored. If neither filesGlob nor files is present: All *.ts and *.tsx files in all subfolders will be added to the compilation context, excluding any subfolders specified in the optional exclude property. If a glob is also specified in the Gruntfile.js, grunt-ts will NOT update the filesGlob in the tsconfig.json file with it nor will those files be added to the tsconfig.json files element. The tsconfig property should function correctly as either a task option or a target property. If the tsconfig.json file does not exist or there is a parse error, compilation will be aborted with an error. grunt.initConfig({   ts: {     default: {       // specifying tsconfig as a boolean will use the 'tsconfig.json' in same folder as Gruntfile.js        tsconfig: true     }   } }); When specifying tsconfig as a string This scenario follows the same behavior as specifying tsconfig.json as a boolean, except that it is possible to use an explicit file name. If a directory name is provided instead, grunt-ts will use tsconfig.json in that directory. The path to tsconfig.json (or the directory that contains it) is relative to Gruntfile.js. grunt.initConfig({   ts: {     default: {       // specifying tsconfig as a string will use the specified `tsconfig.json` file.        tsconfig: './some/path/to/tsconfig.json'     }   } }); When specifying tsconfig as an object This provides the most control over how grunt-ts integrates with tsconfig.json. Supported properties are: tsconfig: string (optional) - if absent, will default to tsconfig.json in same folder as Gruntfile.js. If a folder is passed, will use tsconfig.json in that folder. ignoreFiles: boolean (optional) - default is false. If true, will not inlcude files in files array from tsconfig.json in the compilation context. ignoreSettings: boolean (optional) - default is false. If true, will ignore compilerOptions section in tsconfig.json (will only use settings from Gruntfile.js or grunt-ts defaults) overwriteFilesGlob: boolean (optional) - default is false. If true, will overwrite the contents of the filesGlob array with the contents of the src glob from grunt-ts. updateFiles: boolean (optional) - default is true. Will modify the files array in tsconfig.json to match the result of evaluating a filesGlob that is present inside tsconfig.json (the files element will not be updated with the results from any glob inside Gruntfile.js unless overwriteFilesGlob is also true). passThrough: boolean (optional) - default is false. If passThrough is true, grunt-ts will run TypeScript (tsc) with the specified tsconfig folder, passing the --project option only (and anything in additionalFlags). This provides support for custom compilers with custom implementations of tsconfig.json support. Note: Since this entirely depends on support from tsc, the tsconfig option must be a directory (not a file) as of TypeScript 1.6. grunt.initConfig({   ts: {     default: {       // specifying tsconfig as an object allows detailed configuration overrides...        tsconfig: {         tsconfig: './SomeOtherFolder/tsconfig.json',         ignoreFiles: false,         ignoreSettings: false,         overwriteFilesGlob: false,         updateFiles: true,         passThrough: false       }     }   } });     Important notes: Globs in filesGlob in tsconfig.json are relative to the tsconfig.json, not the Gruntfile.js. tsconfig has a restriction when used with files in the Grunt task configuration: overwriteFilesGlob is NOT supported if files has more than one element. This will abort compilation. If files is absent in tsconfig.json, but filesGlob is present, grunt-ts will create and update the files array in tsconfig.json as long as updateFiles is true (the default). Since files will be created in this scenario, any values in the exclude array will be ignored. This feature may be used along with the vs keyword. Any settings found in tsconfig.json will override any settings found in the Visual Studio project file. Any files referenced in the Visual Studio file that are not also referenced in tsconfig.json will be included in the compilation context after any files from tsconfig.json (any files from src but not in vs or tsconfig will be included after that). The order of the files in tsconfig.json will override the order of the files in the VS project file. verbose false (default) | true Will print the switches passed to tsc on the console. Helpful for debugging. grunt.initConfig({   ts: {     default: {       options: {         verbose: true       }     }   } }); Transforms Objective: To allow for easier code refactoring by taking relative path maintenance burden off the developer. If the path to a referenced file changes, grunt-ts will regenerate the relevant lines. Transforms begin with a three-slash comment /// and are prefixed with ts:. When grunt-ts is run against your TypeScript file, it will add a new line with the appropriate TypeScript code to reference the file, or it will generate a comment indicating that the file you referenced could not be found. For example, if you put this in your code: ///ts:ref=mylibrary The next time grunt-ts runs, it might change that line to this: ///ts:ref=mylibrary /// <reference path='../path/to/mylibrary.d.ts'/> ///ts:ref:generated Important Note: All transforms require the searched-for file to be included in the result of the files, src, or vs Grunt globs. Grunt-ts will only search within the results that Grunt has identified; it does not go searching through your disk for files! You can also run transforms without compiling your code by setting compile: false in your config. For example: grunt.initConfig({   ts: {     ""transforms-only"": {       options: {         compile: false       },       // in addition to your standard settings:        // src: ...        // outDir: ...      },     // ...    } } ); Import Transform ///ts:import=<fileOrDirectoryName>[,<variableName>] This will generate the relevant import foo = require('./path/to/foo'); code without you having to figure out the relative path. If a directory is provided, the entire contents of the directory will be imported. However if a directory has a file index.ts inside of it, then instead of importing the entire folder only index.ts is imported. Examples Import file: ///ts:import=filename import filename = require('../path/to/filename'); ///ts:import:generated Import file with an alternate name: ///ts:import=BigLongClassName,foo import foo = require('../path/to/BigLongClassName'); ///ts:import:generated Import directory: ///ts:import=directoryName import filename = require('../path/to/directoryName/filename'); ///ts:import:generated import anotherfile = require('../path/to/directoryName/deeper/anotherfile'); ///ts:import:generated ... Import directory that has an index.ts file in it: What happens when npm’s amazing community gets together to share with one another? Buy a ticket » how? learn more nycdotnet published 2016-07-13T03:53:20.169Z 6.0.0-beta.2 is the latest of 133 releases github.com/TypeStrong/grunt-ts MIT ® Collaborators Stats 2361 downloads in the last day 15651 downloads in the last week 57733 downloads in the last month Have an issue? File it. on GitHub on GitHub Try it out Test grunt-ts in your browser. Keywords build, visualstudio, task, compiler, typescript, gruntplugin, grunt Dependencies (9) underscore, strip-bom, semver, rimraf, ncp, lodash, es6-promise, csproj2ts, chokidar Dependents wix-gruntfile, lineman-angular2, grunt-swagger-ts, node-fishbowl, amqptools, charettejs, js-webservices, packadic-site, middleout-ng-cache, middleout-ng-locale, middleout-ng-acl, middleout-ng-pageloader, middleout-ng-flashmessenger, middleout-ng-flux, wiesels-navbar, middleout-ng-router, proxyviaemail, coraljs, grunt-providesupport-scaffolding You Need Help Documentation Support / Contact Us Registry Status Website Issues CLI Issues Security About npm About npm, Inc Jobs npm Weekly Blog Twitter GitHub Legal Stuff Terms of Use Code of Conduct Package Name Disputes Privacy Policy Reporting Abuse Other policies npm loves you"	"null"	"null"	"CommonJS module bundler. Does not support TypeScript ""out of the box"", but can be applied with"	"true"
"Module Bundlers"	"Webpack"	"http://webpack.github.io/"	"supports CommonJS and AMD module bundling"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"16676"	"671"	"1572"	"GitHub - webpack/webpack: A bundler for javascript and friends. Packs many modules into a few bundled assets. Code Splitting allows to load parts for the application on demand. Through ""loaders,"" modules can be CommonJs, AMD, ES6 modules, CSS, Images, JSON, Coffeescript, LESS, ... and your custom stuff. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 671 Star 16,676 Fork 1,572 webpack/webpack Code Issues 867 Pull requests 34 Wiki Pulse Graphs A bundler for javascript and friends. Packs many modules into a few bundled assets. Code Splitting allows to load parts for the application on demand. Through ""loaders,"" modules can be CommonJs, AMD, ES6 modules, CSS, Images, JSON, Coffeescript, LESS, ... and your custom stuff. https://webpack.github.io 2,041 commits 10 branches 201 releases 146 contributors JavaScript 99.3% Other 0.7% JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.8 0.9 0.10 0.11 1.0 aggressive-splitting fix/91 inline master webpack-1 Nothing to show v2.1.0-beta.18 v2.1.0-beta.17 v2.1.0-beta.16 v2.1.0-beta.15 v2.1.0-beta.14 v2.1.0-beta.13 v2.1.0-beta.12 v2.1.0-beta.11 v2.1.0-beta.10 v2.1.0-beta.9 v2.1.0-beta.8 v2.1.0-beta.7 v2.1.0-beta.6 v2.1.0-beta.5 v2.1.0-beta.4 v2.1.0-beta.3 v2.1.0-beta.2 v2.1.0-beta.1 v2.1.0-beta.0 v2.0.7-beta v2.0.6-beta v2.0.5-beta v2.0.4-beta v2.0.3-beta v2.0.2-beta v2.0.1-beta v2.0.0-beta v1.13.1 v1.13.0 v1.12.15 v1.12.14 v1.12.13 v1.12.12 v1.12.11 v1.12.10 v1.12.9 v1.12.8 v1.12.7 v1.12.6 v1.12.5 v1.12.4 v1.12.3 v1.12.2 v1.12.1 v1.12.0 v1.11.0 v1.10.5 v1.10.4 v1.10.3 v1.10.2 v1.10.1 v1.10.0 v1.9.13 v1.9.12 v1.9.11 v1.9.10 v1.9.9 v1.9.8 v1.9.7 v1.9.6 v1.9.5 v1.9.4 v1.9.3 v1.9.2 v1.9.1 v1.9.0 v1.8.11 v1.8.10 v1.8.9 v1.8.8 v1.8.7 v1.8.6 v1.8.5 v1.8.4 v1.8.3 v1.8.2 v1.8.1 v1.8.0 v1.7.4 v1.7.3 v1.7.2 v1.7.1 v1.7.0 v1.6.0 v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.4.15 v1.4.14 v1.4.13 v1.4.12 v1.4.11 v1.4.10 v1.4.9 v1.4.8 v1.4.7 v1.4.6 v1.4.5 v1.4.4 Nothing to show New pull request Latest commit d826f99 Jul 15, 2016 sokra 2.1.0-beta.18 Permalink Failed to load latest commit information. .github updated issue template Jun 20, 2016 benchmark added more benchmark fixtures Apr 22, 2016 bin fixes #2754 Jul 13, 2016 buildin fix bug where children is not visible on module object Jun 5, 2016 examples updated extract-text-plugin examples Jul 15, 2016 hot allow to ignore errors and fire events Jul 2, 2016 lib Merge pull request #2775 from Meroje/patch-1 Jul 15, 2016 test more test timeout, updated plugin version Jul 13, 2016 web_modules make it webpack-able Jul 10, 2013 .editorconfig Trim trailing whitespace aided by editorconfig Aug 3, 2015 .eslintrc Use eslint's indent rule Jun 20, 2016 .gitattributes fixed small issues with new loader-runner Dec 30, 2015 .gitignore ignore idea config Apr 14, 2016 .jsbeautifyrc better beautify scripts Jul 16, 2015 .travis.yml remove node 0.12 from travis Jul 15, 2016 CONTRIBUTING.md Improve CONTRIBUTING.md May 28, 2016 LICENSE Update Copyright notice to include 2016. Jan 7, 2016 README.md link build badge to master branch May 17, 2016 appveyor.yml feat(app): Reverting back to standard version of npm Jul 13, 2015 package.json 2.1.0-beta.18 Jul 15, 2016 README.md build dependencies donation documentation Introduction webpack is a bundler for modules. The main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset. TL; DR Bundles both CommonJS and AMD modules (even combined). Can create a single bundle or multiple chunks that are asynchronously loaded at runtime (to reduce initial loading time). Dependencies are resolved during compilation reducing the runtime size. Loaders can preprocess files while compiling, e.g. coffeescript to JavaScript, handlebars strings to compiled functions, images to Base64, etc. Highly modular plugin system to do whatever else your application requires. Getting Started Check out webpack's documentation for quick Getting Started guide, in-depth usage, tutorials and resources. Installation project: npm install webpack --save-dev global: npm install webpack -g Usage: https://webpack.github.io/docs/tutorials/getting-started/ Examples Take a look at the examples folder. Features Plugins webpack has a rich plugin interface. Most of the features within webpack itself use this plugin interface. This makes webpack very flexible. Performance webpack uses async I/O and has multiple caching levels. This makes webpack fast and incredibly fast on incremental compilations. Loaders webpack enables use of loaders to preprocess files. This allows you to bundle any static resource way beyond JavaScript. You can easily write your own loaders using node.js. Loaders are activated by using loadername! prefixes in require() statements, or are automatically applied via regex from your webpack configuration. Please see Using Loaders for more information. basic json: Loads file as JSON raw: Loads raw content of a file (as utf-8) val: Executes code as module and consider exports as JavaScript code script: Executes a JavaScript file once in global context (like in script tag), requires are not parsed. packaging file: Emits the file into the output folder and returns the (relative) url. url: The url loader works like the file loader, but can return a Data Url if the file is smaller than a limit. image: Compresses your images. Ideal to use together with file or url. svgo-loader: Compresses SVG images using svgo library baggage: Automatically require any resources related to the required one polymer-loader: Process HTML & CSS with preprocessor of choice and require() Web Components like first-class modules. dialects coffee: Loads coffee-script like JavaScript babel: Turn ES6 code into vanilla ES5 using Babel. livescript: Loads LiveScript like JavaScript sweetjs: Use sweetjs macros. traceur: Use future JavaScript features with Traceur. typescript: Loads TypeScript like JavaScript. templating html: Exports HTML as string, require references to static resources. jade: Loads jade template and returns a function handlebars: Loads handlebars template and returns a function ractive: Pre-compiles Ractive templates for interactive DOM manipulation markdown: Compiles Markdown to HTML ng-cache: Puts HTML partials in the Angular's $templateCache styling style: Add exports of a module as style to DOM css: Loads css file with resolved imports and returns css code cssnext: Loads and compiles a css file using cssnext less: Loads and compiles a less file sass: Loads and compiles a scss file stylus: Loads and compiles a stylus file misc po: Loads a PO gettext file and returns JSON mocha: Do tests with mocha in browser or node.js eslint: PreLoader for linting code using ESLint. jshint: PreLoader for linting code. jscs: PreLoader for style checking. injectable: Allow to inject dependencies into modules transform: Use browserify transforms as loader. For the full list of loaders, see list of loaders. Module Format (AMD/CommonJS) webpack supports both AMD and CommonJS module styles. It performs clever static analysis on the AST of your code. It even has an evaluation engine to evaluate simple expressions. This allows you to support most existing libraries out of the box. Code Splitting webpack allows you to split your codebase into multiple chunks. Chunks are loaded asynchronously at runtime. This reduces the initial loading time. Code Splitting documentation Optimizations webpack can do many optimizations to reduce the output size of your JavaScript by deduplicating frequently used modules, minifying, and giving you full control of what is loaded initially and what is loaded at runtime through code splitting. It can also can make your code chunks cache friendly by using hashes. Optimization documentation A small example of what's possible // webpack is a module bundler. // This means webpack takes modules with dependencies // and emits static assets representing those modules.  // Dependencies can be written in CommonJS var commonjs = require(""./commonjs""); // or in AMD define([""amd-module"", ""../file""], function (amdModule, file) {     // while previous constructs are sync,     // this is async     require([""big-module/big/file""], function (big) {          // For async dependencies, webpack splits          // your application into multiple ""chunks"".          // This part of your application is          // loaded on demand (code-splitting).         var stuff = require(""../my/stuff"");         // ""../my/stuff"" is also loaded on-demand         //  because it's in the callback function         //  of the AMD require.     }); });   require(""coffee!./cup.coffee""); // ""Loaders"" are used to preprocess files. // They can be prefixed in the require call // or configured in the configuration. require(""./cup""); // This does the same when you add "".coffee"" to the extensions // and configure the ""coffee"" loader for /\.coffee$/  function loadTemplate (name) {     return require(""./templates/"" + name + "".jade"");     // Many expressions are supported in require calls.     // A clever parser extracts information and concludes     // that everything in ""./templates"" that matches     // /\.jade$/ should be included in the bundle, as it     // can be required. }   // ...and you can combine everything. function loadTemplateAsync (name, callback) {     require([""bundle?lazy!./templates/"" + name + "".jade""],       function (templateBundle) {               templateBundle(callback);     }); } Documentation documentation Changelog changelog Tests You can run the Node tests with npm test. You can run the browser tests: cd test/browsertests node build  and open tests.html in the browser. Contribution Most of the time, if webpack is not working correctly for you it is a simple configuration issue. If you are still having difficulty after looking over your configuration carefully, please post a question to StackOverflow with the webpack tag. Questions that include your webpack.config.js and relevant files are more likely to receive responses. If you have discovered a bug or have a feature suggestion, feel free to create an issue on Github. If you create a loader or plugin, please consider open sourcing it, putting it on NPM and following the x-loader, x-plugin convention. You are also welcome to correct any spelling mistakes or any language issues. If you want to discuss something or just need help, here is our gitter.im room. License Copyright (c) 2012-2016 Tobias Koppers MIT (http://opensource.org/licenses/mit-license.php) Thanks to (In chronological order) @google for Google Web Toolkit (GWT), which aims to compile Java to JavaScript. It features a similar Code Splitting as webpack. @medikoo for modules-webmake, which is a similar project. webpack was born because I wanted Code Splitting for modules-webpack. Interestingly the Code Splitting issue is still open (thanks also to @Phoscur for the discussion). @substack for browserify, which is a similar project and source for many ideas. @jrburke for require.js, which is a similar project and source for many ideas. @defunctzombie for the browser-field spec, which makes modules available for node.js, browserify and webpack. Every early webpack user, which contributed to webpack by writing issues or PRs. You influenced the direction... @shama, @jhnns and @sokra for maintaining this project Everyone who has written a loader for webpack. You are the ecosystem... Everyone I forgot to mention here, but also influenced webpack. Sponsor This is a free-time project. The time I invest in it fluctuates. If you use webpack for a serious task, and you'd like me to invest more time on it, please donate. This project increases your income/productivity too. It makes development and applications faster and it reduces the required bandwidth. Another way you can help fund Webpack is by buying the ebook ""SurviveJS - Webpack"", where around ~30% of the book's profit will go to me. I'm very thankful for every dollar. If you leave your username or email, I may show my thanks by giving you extra support. Dependencies esprima enhanced-resolve uglify-js mocha should optimist async mkdirp clone Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/webpack/webpack"	"supports CommonJS and AMD module bundling"	"true"
"Module Bundlers"	"TypeScript and webpack"	"http://www.jbrantly.com/typescript-and-webpack/"	"How to configure Webpack for TypeScript with source map support"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"346"	"24"	"47"	"GitHub - TypeStrong/ts-loader: TypeScript loader for webpack Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 24 Star 346 Fork 47 TypeStrong/ts-loader Code Issues 51 Pull requests 30 Wiki Pulse Graphs TypeScript loader for webpack 308 commits 50 branches 31 releases 11 contributors JavaScript 86.0% TypeScript 13.9% HTML 0.1% JavaScript TypeScript HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags appveyor document-npm-link dont-force-module fix-71 fix-81 fix-current-tests fix-libFileName fix-symbolic-link fix-tests fixup-tests-1.7-again fixup-tests-1.7 greenkeeper-babel-core-6.9.0 greenkeeper-babel-core-6.9.1 greenkeeper-babel-core-6.10.4 greenkeeper-glob-7.0.4 greenkeeper-glob-7.0.5 greenkeeper-html-webpack-plugin-2.18.0 greenkeeper-html-webpack-plugin-2.19.0 greenkeeper-html-webpack-plugin-2.20.0 greenkeeper-html-webpack-plugin-2.21.0 greenkeeper-html-webpack-plugin-2.21.1 greenkeeper-html-webpack-plugin-2.22.0 greenkeeper-mocha-2.5.0 greenkeeper-mocha-2.5.1 greenkeeper-mocha-2.5.2 greenkeeper-mocha-2.5.3 greenkeeper-rimraf-2.5.3 greenkeeper-semver-5.1.1 greenkeeper-semver-5.2.0 greenkeeper-semver-5.3.0 greenkeeper-typescript-1.8.10 greenkeeper-update-all greenkeeper-webpack-1.13.1 ignoreDiagnostics improve-initial-buildtime issue-109 issue-156 issue92 issue152 johnnyreilly-patch-1 master output-to-stderr remove-1.5 support-1.8.0 support-declaration-output tests-for-156 update-appveyer-badge update-build update-tests-for-tsconfig-comments watch-imports Nothing to show v0.8.2 v0.8.1 v0.8.0 v0.7.2 v0.7.1 v0.7.0 v0.6.1 v0.6.0 v0.5.6 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.7 v0.4.6 v0.4.5 v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.3 v0.2.0 v0.1.0 Nothing to show New pull request Latest commit 26481d5 May 31, 2016 johnnyreilly Fix html-webpack-plugin tests (#221) … * minor fix to test  maybe if I do this I'll tempt @jbrantly back 😄  * wrong error no  * fix html-webpack-plugin tests Permalink Failed to load latest commit information. test Fix html-webpack-plugin tests (#221) May 31, 2016 typings Saving files before refreshing line endings Mar 5, 2016 .gitattributes Force line-endings to LF for all platforms (#136) Jan 23, 2016 .gitignore Add support for emitting declaration files Jan 9, 2016 .npmignore Remove usage of tsd Aug 2, 2015 .travis.yml Update CI builds with latest versions Jan 28, 2016 CHANGELOG.md Publish v0.8.2 Apr 10, 2016 CONTRIBUTING.md Restructure builds Oct 6, 2015 LICENSE Simplify license and update to TypeStrong Sep 28, 2015 README.md Merge pull request #178 from toolness/patch-1 Apr 10, 2016 UPGRADE.md Publish v0.8.0 Jan 19, 2016 appveyor.yml Update CI builds with latest versions Jan 29, 2016 index.ts Watch for changes on elided imports. (#156) (#169) Apr 10, 2016 package.json Fix some html-weback-plugin tests May 17, 2016 resolver.ts Add support for custom TypeScript module resolution using webpack's r… Aug 28, 2015 tsconfig.json Simplify build; de-hardcode typescript typings Oct 9, 2015 README.md TypeScript loader for webpack Getting Started Tutorials and examples can be found here. Installation npm install ts-loader  You will also need to install TypeScript if you have not already. npm install typescript  or if you want to install TypeScript globally npm install typescript -g npm link typescript  Upgrading Take advantage of the Changelog and Upgrade Guide. Running Use webpack like normal, including webpack --watch and webpack-dev-server, or through another build system using the Node.js API. Compatibility The current version is compatible with TypeScript 1.6 and above, including the nightly build. You may experience issues using the nightly build due to its nature, but a full test suite runs against the latest nightly every day to catch incompatibilites early. Please report any issues you experience with the nightly so that they can be fixed promptly. Configuration Create or update webpack.config.js like so: module.exports = {   entry: './app.ts',   output: {     filename: 'bundle.js'   },   resolve: {     // Add `.ts` and `.tsx` as a resolvable extension.     extensions: ['', '.webpack.js', '.web.js', '.ts', '.tsx', '.js']   },   module: {     loaders: [       // all files with a `.ts` or `.tsx` extension will be handled by `ts-loader`       { test: /\.tsx?$/, loader: 'ts-loader' }     ]   } } Add a tsconfig.json file. {   ""compilerOptions"": {     ""target"": ""es5"",     ""sourceMap"": true   },   ""exclude"": [     ""node_modules""   ] } The tsconfig.json file controls TypeScript-related options so that your IDE, the tsc command, and this loader all share the same options. TypeScript files from all subdirectories will get included except the ones matching exclude. Failing the build on TypeScript compilation error When the build fails (i.e. at least one typescript compile error occured), ts-loader does not propagate the build failure to webpack. The upshot of this is you can fail to notice an erroring build. This is inconvenient; particularly in continuous integration scenarios. If you want to ensure that the build failure is propogated it is advised that you make use of the webpack-fail-plugin. This plugin that will make the process return status code 1 when it finishes with errors in single-run mode. Et voilà! Build failure. For more background have a read of this issue. Options There are two types of options: TypeScript options (aka ""compiler options"") and loader options. TypeScript options should be set using a tsconfig.json file. Loader options can be set either using a query when specifying the loader or through the ts property in the webpack configuration. module.exports = {   ...   module: {     loaders: [       // specify option using query       { test: /\.tsx?$/, loader: 'ts-loader?compiler=ntypescript' }     ]   },   // specify option using `ts` property   ts: {     compiler: 'ntypescript'   } } transpileOnly (boolean) (default=false) If you want to speed up compilation significantly you can set this flag. However, many of the benefits you get from static type checking between different dependencies in your application will be lost. You should also set the isolatedModules TypeScript option if you plan to ever make use of this. silent (boolean) (default=false) If true, no console.log messages will be emitted. Note that most error messages are emitted via webpack which is not affected by this flag. ignoreDiagnostics (number[]) (default=[]) You can squelch certain TypeScript errors by specifying an array of diagnostic codes to ignore. compiler (string) (default='typescript') Allows use of TypeScript compilers other than the official one. Should be set to the NPM name of the compiler, eg ntypescript. configFileName (string) (default='tsconfig.json') Allows you to specify a custom configuration file. compilerOptions (object) (default={}) Allows overriding TypeScript options. Should be specified in the same format as you would do for the compilerOptions property in tsconfig.json. instance (string) Advanced option to force files to go through different instances of the TypeScript compiler. Can be used to force segregation between different parts of your code. Loading other resources and code splitting Loading css and other resources is possible but you will need to make sure that you have defined the require function in a declaration file. declare var require: {     <T>(path: string): T;     (paths: string[], callback: (...modules: any[]) => void): void;     ensure: (paths: string[], callback: (require: <T>(path: string) => T) => void) => void; }; Then you can simply require assets or chunks per the webpack documentation. require('!style!css!./style.css'); The same basic process is required for code splitting. In this case, you import modules you need but you don't directly use them. Instead you require them at split points. See this example for more details. Contributing Please see the contributer's guide. License MIT License Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jbrantly/ts-loader"	"How to configure Webpack for TypeScript with source map support"	"true"
"Module Bundlers"	"Browserify"	"http://browserify.org/"	"CommonJS module bundler. Does not support TypeScript ""out of the box"", but can be applied with"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"51"	"5"	"12"	"GitHub - substack/vm-browserify: require('vm') like in node but for the browser Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 51 Fork 12 substack/vm-browserify Code Issues 6 Pull requests 2 Pulse Graphs require('vm') like in node but for the browser 21 commits 1 branch 5 releases 4 contributors JavaScript 100.0% JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.0.4 0.0.3 0.0.2 0.0.1 0.0.0 Nothing to show New pull request Latest commit bfd7c5f Jan 28, 2014 substack 0.0.4 Permalink Failed to load latest commit information. example/run runInNewContext example Feb 26, 2012 test another test works fine Jan 28, 2014 LICENSE license file, modernize the readme Dec 28, 2013 index.js move win.eval creating logic up Jan 28, 2014 package.json 0.0.4 Jan 28, 2014 readme.markdown testling badge Dec 28, 2013 readme.markdown vm-browserify emulate node's vm module for the browser example Just write some client-side javascript: var vm = require('vm');  $(function () {     var res = vm.runInNewContext('a + 5', { a : 100 });     $('#res').text(res); }); compile it with browserify: browserify entry.js -o bundle.js  then whip up some html: <html>   <head>     <script src=""http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js""></script>     <script src=""/bundle.js""></script>   </head>   <body>     result = <span id=""res""></span>   </body> </html> and when you load the page you should see: result = 105  methods vm.runInNewContext(code, context={}) Evaluate some code in a new iframe with a context. Contexts are like wrapping your code in a with() except slightly less terrible because the code is sandboxed into a new iframe. install This module is depended upon by browserify, so you should just be able to require('vm') and it will just work. However if you want to use this module directly you can install it with npm: npm install vm-browserify  license MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/substack/vm-browserify"	"CommonJS module bundler. Does not support TypeScript ""out of the box"", but can be applied with"	"true"
"Module Bundlers"	"grunt-browserify"	"https://www.npmjs.com/package/grunt-browserify"	"CommonJS module bundler. Does not support TypeScript ""out of the box"", but can be applied with"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"grunt-browserify Search sign up or log in log in node package manager Toggle Navigation npm Enterprise features pricing documentation support Introducing npm Enterprise add-ons. Integrate third-party dev tools into npm… grunt-browserify Grunt task for node-browserify grunt-browserify Grunt task for node-browserify. grunt-browserify is looking for a new maintainer. If you are interested in taking over, please message jmreidy or tleunen. Thanks! Getting Started This plugin requires Grunt ~0.4.0. Install this grunt plugin with: npm install grunt-browserify --save-dev Then add this line to your project's grunt.js Gruntfile: grunt.loadNpmTasks('grunt-browserify'); 3.0 Release An important note for those running the latest release of grunt-browserify: the newest version (>3.0) incorporates breaking changes from Browserify which REMOVED BUNDLE OPTIONS. All options to browserify must now be passed in the browserifyOptions hash. In the Wild Most simply, Browserify is a tool for taking your CommonJS-style Javascript code and packaging it for use in the browser. Grunt-Browserify provides the glue to better integrate Browserify into your Grunt-based development workflow. For JavaScripters unfamiliar with CJS-style code and the Node ecosystem, moving to Browserify can be a bit confusing. Writing your client-side code as CJS modules allows for smaller, easier to understand files that perform one task well. These modules, because of their simplicity, will be significantly easier to use across projects. CJS modules also help to expose the dependency graph inherent in your code, allowing you to write cleaner, more-maintainable modules. As Alex MacCaw writes: CommonJS modules are one of the best solutions to JavaScript dependency management. CommonJS modules solve JavaScript scope issues by making sure each module is executed in its own namespace. Modules have to explicitly export variables they want to expose to other modules, and explicitly import other modules; in other words, there's no global namespace. (A note to AMD fans that the benefits above are not unique to the CJS style of writing JavaScript modules, but the ease-of-interoperability with Node.JS code is a plus of CJS.) As you begin to write your client-side code in small, reusable modules, you start to have a lot more files to manage. At the same time, you need to integrate these files with other client-side libraries, some of which do not play particularly nicely with a CJS module system. The simplicity provided by CJS modules can be lost as build complexity is increased and Browserify compilation time gets out of control. Documentation Run this task with the grunt browserify command. As with other Grunt plugins, the src and dest properties are most important: src will use the Grunt glob pattern to specify files for inclusion in the browserified package, and dest will specify the outfile for the compiled module. The current version of grunt-browserify sticks as close to the core browserify API as possible. Additional functionality can be added via the rich ecosystem of browserify transforms and plugins. The following task options are supported: alias Type: Object{alias:path} Browserify can alias files or modules to a certain name. For example, require('./foo') can be aliased to be used as require('foo'). options: {   alias: {     'foo': './foo.js'   } } The alias option is just a shortcut to require a file and expose a different name for it. You could do exactly the same thing using require instead of alias. It's equivalent to require: [ ['./foo.js', {expose: 'foo'} ] ] If you need alias mappings, you can use @joeybaker's remapify plugin, as demonstrated in the code below: options: {   plugin: [     [       'remapify', [{           src: './client/views/**/*.js',  // glob for the files to remap            expose: 'views', // this will expose `__dirname + /client/views/home.js` as `views/home.js`            cwd: __dirname  // defaults to process.cwd()          }       ]     ]   ] } banner Type: String Default: empty string The string will be prepended to the output. Template strings (e.g. <%= config.value %> will be expanded automatically. require Type: [String] or [String:String] or [[String, Object]] Specifies files to be required in the browserify bundle. String filenames are parsed into their full paths with path.resolve. Aliases can be provided by using the filePathString:aliasName format. Each require can also be provided with an options hash; in this case, the require should be specified as an array of [filePathString, optionsHash]. ignore Type: [String] Specifies files to be ignored in the browserify bundle. String filenames are parsed into their full paths with path.resolve. Globbing patterns are supported. exclude Type: [String] Specifies files or modules to be excluded in the browserify bundle. Globbing patterns are supported; globbed filenames are parsed into their full paths. external Type: [String] or Object{alias:path}. Specifies id strings which will be loaded from a previously loaded, “common” bundle. That is to say, files in the bundle that require the target String will assume that the target is provided externally. The secondary form of this option follows the format of alias above, and will externalise the ids specified in the alias object. This second form allows for the declaration of a single alias object which can be supplied to one bundle's alias option and another option's external option. In either case, globbing patterns are supported. transform Type: [String || Function] or [[String || Function, Object]] Specifies a pipeline of functions (or modules) through which the browserified bundle will be run. The transform can either be a literal function, or a string referring to a NPM module. The browserify docs themselves explain transform well, but below is an example of transform used with grunt-browserify to automatically compile coffeescript files for use in a bundle: browserify: {   dist: {     files: {       'build/module.js': ['client/scripts/**/*.js', 'client/scripts/**/*.coffee']     },     options: {       transform: ['coffeeify']     }   } } Transforms can also be provided with an options hash; in this case, the transform should be specified as an array of [transformStringOrFn, optionsHash]. Note for browserify-shim, the configuration of this transformation has to be inside package.json. Please see documentation of browserify-shim and our example. plugin Type: [String || Function] Register a browserify plugin with the bundle. As with transforms, plugins are identified with either their NPM name (String) or a function literal. browserifyOptions Type: Object A hash of options that are passed to browserify during instantiation. Task-level browserifyOptions are not merged into target-level options. If a target overrides task-level browserifyOptions, it overrides all of it. Browserify Github README watch Type: Boolean If true, invoke watchify instead of browserify. For watchify to work properly, you have to keep the process running. The option keepAlive can help you do that, or you can use another grunt-watch task. keepAlive Type: Boolean If true and if watch above is true, keep the Grunt process alive (simulates grunt-watch functionality). watchifyOptions Type: Object A hash of options that are passed to watchify during instantiation. Watchify Github README configure Type: Function (b) An optional callback function that is invoked once before the bundle runs. This can be used for programatically configuring browserify using it's API. b is the browserify instance for the bundle. preBundleCB Type: Function (b) An optional callback function, that will be called before bundle completion. b is the browerify instance that will output the bundle. NB: This callback will be invoked every time the bundle is built so when used with the watch option set to true it will be called multiple times. Do not register transforms in this callback or they will end up being registered multiple times. postBundleCB Type: Function (err, src, next) An optional callback function, which will be called after bundle completion and before writing of the bundle. The err and src arguments are provided directly from browserify. The next callback should be called with (err, modifiedSrc); the modifiedSrc is what will be written to the output file. NB: This callback will be invoked every time the bundle is built so when used with the watch option set to true it will be called multiple times. Contributing In lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code. Release History See the CHANGELOG. License Copyright (c) 2013-2015 grunt-browserify contributors Licensed under the MIT license. What happens when npm’s amazing community gets together to share with one another? Buy a ticket » how? learn more tleunen published 2016-03-11T16:07:50.784Z 5.0.0 is the latest of 64 releases github.com/jmreidy/grunt-browserify MIT ® Collaborators Stats 5063 downloads in the last day 27838 downloads in the last week 116596 downloads in the last month Have an issue? File it. on GitHub on GitHub Try it out Test grunt-browserify in your browser. Keywords grunt, browserify, gruntplugin Dependencies (6) watchify, resolve, lodash, glob, browserify, async Dependents fidem-dsl, qiprofile, mana.js, dapid-identity-ethereum, trivialmodels, sife, visualtesting-admin, material-cms, rey, @realpage/foundation-ui-framework, grunt-jasmine-firefoxaddon, date_picker, argentum-online-js, perf-plus.js, vfenpm, sahil-sdk, grunt-front-end-modules, preventoverscrolljs, bump-framework, upper, packadic-site, rx-bing-map, 3d-preview, wa-build, sails-rx-react-js, e2d-sprite, machinepack-rxbingservices, luobo-node, robocop.js, bndr, fittable, game-of-life-d3-boots, diploma-crm-project, crunch-js-components, kappa-www, taxgraphs, yacht-rock, xtuple-dashboard-anything, att.js, scarlet-ioc, lineman-browserify, monacore, hash-framework, palettejs, iorest, felina-web, grunt-coffee-browser-project, breathe-easy, openarms You Need Help Documentation Support / Contact Us Registry Status Website Issues CLI Issues Security About npm About npm, Inc Jobs npm Weekly Blog Twitter GitHub Legal Stuff Terms of Use Code of Conduct Package Name Disputes Privacy Policy Reporting Abuse Other policies npm loves you"	"null"	"null"	"CommonJS module bundler. Does not support TypeScript ""out of the box"", but can be applied with"	"true"
"Module Bundlers"	"grunt-contrib-uglify"	"https://www.npmjs.com/package/grunt-contrib-uglify"	"CommonJS module bundler. Does not support TypeScript ""out of the box"", but can be applied with"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"grunt-contrib-uglify Search sign up or log in log in node package manager Toggle Navigation npm Enterprise features pricing documentation support Introducing npm Enterprise add-ons. Integrate third-party dev tools into npm… grunt-contrib-uglify Minify javascript files with UglifyJS grunt-contrib-uglify v1.0.1 Minify javascript files with UglifyJS Getting Started If you haven't used Grunt before, be sure to check out the Getting Started guide, as it explains how to create a Gruntfile as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command: npm install grunt-contrib-uglify --save-dev Once the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript: grunt.loadNpmTasks('grunt-contrib-uglify'); Uglify task Run this task with the grunt uglify command. Task targets, files and options may be specified according to the grunt Configuring tasks guide. Migrating from 2.x to 3.x Version 3.x introduced changes to configuring source maps. Accordingly, if you don't use the source map options you should be able to upgrade seamlessly. If you do use source maps, see below. Removed options sourceMappingURL - This is calculated automatically now sourceMapPrefix - No longer necessary for the above reason Changed options sourceMap - Only accepts a Boolean value. Generates a map with a default name for you sourceMapRoot - The location of your sources is now calculated for you when sourceMap is set to true but you can set manual source root if needed New options sourceMapName - Accepts a string or function to change the location or name of your map sourceMapIncludeSources - Embed the content of your source files directly into the map expression - Accepts a Boolean value. Parse a single expression (JSON or single functions) quoteStyle - Accepts integers 0 (default), 1, 2, 3. Enforce or preserve quotation mark style. Options This task primarily delegates to UglifyJS2, so please consider the UglifyJS documentation as required reading for advanced configuration. mangle Type: Boolean Object Default: {} Turn on or off mangling with default options. If an Object is specified, it is passed directly to ast.mangle_names() and ast.compute_char_frequency() (mimicking command line behavior). View all options here. compress Type: Boolean Object Default: {} Turn on or off source compression with default options. If an Object is specified, it is passed as options to UglifyJS.Compressor(). View all options here. beautify Type: Boolean Object Default: false Turns on beautification of the generated source code. An Object will be merged and passed with the options sent to UglifyJS.OutputStream(). View all options here expression Type: Boolean Default: false Parse a single expression, rather than a program (for parsing JSON) report Choices: false, 'none', 'min', 'gzip' Default: 'min' Either report only minification result or report minification and gzip results. This is useful to see exactly how well clean-css is performing but using 'gzip' will make the task take 5-10x longer to complete. Example output. If false or 'none' is used the report will be generated on the verbose output. sourceMap Type: Boolean Default: false If true, a source map file will be generated in the same directory as the dest file. By default it will have the same basename as the dest file, but with a .map extension. sourceMapName Type: String Function Default: undefined To customize the name or location of the generated source map, pass a string to indicate where to write the source map to. If a function is provided, the uglify destination is passed as the argument and the return value will be used as the file name. sourceMapIn Type: String Function Default: undefined The location of an input source map from an earlier compilation, e.g. from CoffeeScript. If a function is provided, the uglify source is passed as the argument and the return value will be used as the sourceMap name. This only makes sense when there's one source file. sourceMapIncludeSources Type: Boolean Default: false Pass this flag if you want to include the content of source files in the source map as sourcesContent property. sourceMapRoot Type: String Default: undefined With this option you can customize root URL that browser will use when looking for sources. If the sources are not absolute URLs after prepending of the sourceMapRoot, the sources are resolved relative to the source map. sourceMapUrl Type: String Default: undefined Override the calculated value for sourceMappingURL in the source map. This is useful if the source map location is not relative to the base path of the minified file, i.e. when using a CDN enclose Type: Object Default: undefined Wrap all of the code in a closure with a configurable arguments/parameters list. Each key-value pair in the enclose object is effectively an argument-parameter pair. wrap Type: String Default: undefined Wrap all of the code in a closure, an easy way to make sure nothing is leaking. For variables that need to be public exports and global variables are made available. The value of wrap is the global variable exports will be available as. maxLineLen Type: Number Default: 32000 Limit the line length in symbols. Pass maxLineLen = 0 to disable this safety feature. ASCIIOnly Type: Boolean Default: false Enables to encode non-ASCII characters as \uXXXX. exportAll Type: Boolean Default: false When using wrap this will make all global functions and variables available via the export variable. preserveComments Type: Boolean String Function Default: undefined Options: false 'all' 'some' Turn on preservation of comments. false will strip all comments 'all' will preserve all comments in code blocks that have not been squashed or dropped 'some' will preserve all comments that start with a bang (!) or include a closure compiler style directive (@preserve @license @cc_on) Function specify your own comment preservation function. You will be passed the current node and the current comment and are expected to return either true or false banner Type: String Default: '' This string will be prepended to the minified output. Template strings (e.g. <%= config.value %> will be expanded automatically. footer Type: String Default: '' This string will be appended to the minified output. Template strings (e.g. <%= config.value %> will be expanded automatically. screwIE8 Type: Boolean Default: false Pass this flag if you don't care about full compliance with Internet Explorer 6-8 quirks. mangleProperties Type: Boolean Object Default: false Turn on or off property mangling with default options. If an Object is specified, it is passed directly to ast.mangle_properties() (mimicking command line behavior). View all options here. reserveDOMProperties Type: Boolean Default: false Use this flag in conjunction with mangleProperties to prevent built-in browser object properties from being mangled. exceptionsFiles Type: Array Default: [] Use this with mangleProperties to pass one or more JSON files containing a list of variables and object properties that should not be mangled. See the UglifyJS docs for more info on the file syntax. nameCache Type: String Default: '' A string that is a path to a JSON cache file that uglify will create and use to coordinate symbol mangling between multiple runs of uglify. Note: this generated file uses the same JSON format as the exceptionsFiles files. quoteStyle Type: Integer Default: 0 Preserve or enforce quotation mark style. 0 will use single or double quotes such as to minimize the number of bytes (prefers double quotes when both will do) 1 will always use single quotes 2 will always use double quotes 3 will preserve original quotation marks Usage examples Basic compression This configuration will compress and mangle the input files using the default options. // Project configuration.  grunt.initConfig({   uglify: {     my_target: {       files: {         'dest/output.min.js': ['src/input1.js', 'src/input2.js']       }     }   } }); No mangling Specify mangle: false to prevent changes to your variable and function names. // Project configuration.  grunt.initConfig({   uglify: {     options: {       mangle: false     },     my_target: {       files: {         'dest/output.min.js': ['src/input.js']       }     }   } }); Reserved identifiers You can specify identifiers to leave untouched with an except array in the mangle options. // Project configuration.  grunt.initConfig({   uglify: {     options: {       mangle: {         except: ['jQuery', 'Backbone']       }     },     my_target: {       files: {         'dest/output.min.js': ['src/input.js']       }     }   } }); Source maps Generate a source map by setting the sourceMap option to true. The generated source map will be in the same directory as the destination file. Its name will be the basename of the destination file with a .map extension. Override these defaults with the sourceMapName attribute. // Project configuration.  grunt.initConfig({   uglify: {     my_target: {       options: {         sourceMap: true,         sourceMapName: 'path/to/sourcemap.map'       },       files: {         'dest/output.min.js': ['src/input.js']       }     }   } }); Advanced source maps Set the sourceMapIncludeSources option to true to embed your sources directly into the map. To include a source map from a previous compilation pass it as the value of the sourceMapIn option. // Project configuration.  grunt.initConfig({   uglify: {     my_target: {       options: {         sourceMap: true,         sourceMapIncludeSources: true,         sourceMapIn: 'example/coffeescript-sourcemap.js', // input sourcemap from a previous compilation        },       files: {         'dest/output.min.js': ['src/input.js'],       },     },   }, }); Refer to the UglifyJS SourceMap Documentation for more information. Turn off console warnings Specify drop_console: true as part of the compress options to discard calls to console.* functions. This will suppress warning messages in the console. // Project configuration.  grunt.initConfig({   uglify: {     options: {       compress: {         drop_console: true       }     },     my_target: {       files: {         'dest/output.min.js': ['src/input.js']       }     }   } }); Beautify Specify beautify: true to beautify your code for debugging/troubleshooting purposes. Pass an object to manually configure any other output options passed directly to UglifyJS.OutputStream(). See UglifyJS Codegen documentation for more information. Note that manual configuration will require you to explicitly set beautify: true if you want traditional, beautified output. // Project configuration.  grunt.initConfig({   uglify: {     my_target: {       options: {         beautify: true       },       files: {         'dest/output.min.js': ['src/input.js']       }     },     my_advanced_target: {       options: {         beautify: {           width: 80,           beautify: true         }       },       files: {         'dest/output.min.js': ['src/input.js']       }     }   } }); Banner comments In this example, running grunt uglify:my_target will prepend a banner created by interpolating the banner template string with the config object. Here, those properties are the values imported from the package.json file (which are available via the pkg config property) plus today's date. Note: you don't have to use an external JSON file. It's also valid to create the pkg object inline in the config. That being said, if you already have a JSON file, you might as well reference it. // Project configuration.  grunt.initConfig({   pkg: grunt.file.readJSON('package.json'),   uglify: {     options: {       banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' +         '<%= grunt.template.today(""yyyy-mm-dd"") %> */'     },     my_target: {       files: {         'dest/output.min.js': ['src/input.js']       }     }   } }); Conditional compilation You can also enable UglifyJS conditional compilation. This is commonly used to remove debug code blocks for production builds. This is equivalent to the command line --define option. See UglifyJS global definitions documentation for more information. // Project configuration.  grunt.initConfig({   uglify: {     options: {       compress: {         global_defs: {           ""DEBUG"": false         },         dead_code: true       }     },     my_target: {       files: {         'dest/output.min.js': ['src/input.js']       }     }   } }); Compiling all files in a folder dynamically This configuration will compress and mangle the files dynamically. // Project configuration.  grunt.initConfig({   uglify: {     my_target: {       files: [{           expand: true,           cwd: 'src/js',           src: '**/*.js',           dest: 'dest/js'       }]     }   } }); Turn on object property name mangling This configuration will turn on object property name mangling, but not mangle built-in browser object properties. Additionally, variables and object properties listed in the myExceptionsFile.json will be mangled. For more info, on the format of the exception file format please see the UglifyJS docs. // Project configuration.  grunt.initConfig({   uglify: {     options: {       mangleProperties: true,       reserveDOMCache: true,       exceptionsFiles: [ 'myExceptionsFile.json' ]     },     my_target: {       files: {         'dest/output.min.js': ['src/input.js']       }     }   } }); Turn on use of name mangling cache Turn on use of name mangling cache to coordinate mangled symbols between outputted uglify files. uglify will the generate a JSON cache file with the name provided in the options. Note: this generated file uses the same JSON format as the exceptionsFiles files. // Project configuration.  grunt.initConfig({   uglify: {     options: {       nameCache: '.tmp/grunt-uglify-cache.json',     },     my_target: {       files: {         'dest/output1.min.js': ['src/input1.js'],         'dest/output2.min.js': ['src/input2.js']       }     }   } }); Release History 2016-03-16 v1.0.1 downgrade maxmin for node 0.10 2016-03-04 v1.0.0 Use uglify-js ~2.6.2 to fix sourcemap issue. Improving docs for global-defs and --define options. Add 'sourceMapUrl' option. add bare_returns option. Optionally set report verbosity level using report option. 2016-01-29 v0.11.1 switch to lodash ^4.0.1 switch to grunt-contrib-clean ^0.7.0 switch to grunt-contrib-jshint ^0.12.0 2015-11-20 v0.11.0 switch to uglify ~2.6.0 2015-11-12 v0.10.1 switch to uglify ~2.5 2015-10-27 v0.10.0 bump to uglify ^2.5 2015-08-24 v0.9.2 bump to uglify ^2.4.24 2015-04-07 v0.9.1 more fixes for mangle options 2015-04-07 v0.9.0 added hook into uglify's mangling functionality 2015-03-30 v0.8.1 lock uglify to 2.4.17 due to breaking changes 2015-02-19 v0.8.0 Add screwIE8 option. Fix issue with explicit compress in node 0.12.0. 2014-12-23 v0.7.0 Adds sourceMapRoot options. Updates readme descriptions. Removes reference to cleancss. 2014-09-17 v0.6.0 Output fixes. ASCIIOnly option. Other fixes. 2014-07-25 v0.5.1 Chalk updates. Output updates. 2014-03-01 v0.4.0 remove grunt-lib-contrib dependency and add more colors 2014-02-27 v0.3.3 remove unnecessary calls to grunt.template.process 2014-01-22 v0.3.2 fix handling of sourceMapIncludeSources option. 2014-01-20 v0.3.1 fix relative path issue in sourcemaps 2014-01-16 v0.3.0 refactor sourcemap support 2013-11-09 v0.2.7 prepending banner if sourceMap option not set, addresses 2013-11-08 v0.2.6 merged 45, 53, 85 (105 by way of duping 53) Added support for banners in uglified files with sourcemaps Updated docs 2013-10-28 v0.2.5 Added warning for banners when using sourcemaps 2013-09-02 v0.2.4 updated sourcemap format via /83 2013-06-10 v0.2.3 added footer option 2013-05-31 v0.2.2 Reverted /56 due to /58 until chrome/239660 firefox/870361 drop 2013-05-22 v0.2.1 Bumped uglify to ~2.3.5 /55 /40 Changed sourcemappingUrl syntax /56 Disabled sorting of names for consistent mangling /44 Updated docs for sourceMapRoot /47 /25 2013-03-14 v0.2.0 No longer report gzip results by default. Support report option. 2013-01-30 v0.1.2 Added better error reporting Support for dynamic names of multiple sourcemaps 2013-02-15 v0.1.1 First official release for Grunt 0.4.0. 2013-01-18 v0.1.1rc6 Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. 2013-01-09 v0.1.1rc5 Updating to work with grunt v0.4.0rc5. Switching back to this.files api. 2012-11-28 v0.1.0 Work in progress, not yet officially released. Task submitted by ""Cowboy"" Ben Alman This file was generated on Wed Mar 16 2016 10:51:38. What happens when npm’s amazing community gets together to share with one another? Buy a ticket » how? learn more vladikoff published 2016-03-16T14:51:58.088Z 1.0.1 is the latest of 36 releases github.com/gruntjs/grunt-contrib-uglify MIT ® Collaborators Stats 37520 downloads in the last day 202790 downloads in the last week 895427 downloads in the last month Have an issue? File it. on GitHub on GitHub Try it out Test grunt-contrib-uglify in your browser. Keywords gruntplugin Dependencies (5) uri-path, uglify-js, maxmin, lodash, chalk Dependents wix-gruntfile, nodame, fidem-dsl, jq-signature, download.jqueryui.com, @covisint/cui-idm-b2x, grunt-fcoo-grunt-plugin, qiprofile, grunt-veronica, qw-cli, sails, grunt-treeshake, node-red-habanero, ziplines, uimmutable, fido-styleguide, pipaslot-front-end, iconate, frontBuild, isotope-modulo-columns, isotope-modolu-columns, mana.js, wee-core, ChuckCSS, bootstrap-ui-datetime-picker, grunt-sofea-build, get-capitan, grunt-useref, mysails, gladys, pipaslot-modules, ng-contextmenu, videojs, spectacle-docs, travis-ci-wdc, new-relic-insights-wdc, dcm-dfa-wdc, ttech-wp-theme-config, cognito-node-sdk, easy-build, css-clean-npm, studio-widget-compiler, typerjs, q9, grunt-jquery-toolbox, 88131787, workfront-wdc, github-wdc, grunt-set-ionic, visualtesting-admin, and more You Need Help Documentation Support / Contact Us Registry Status Website Issues CLI Issues Security About npm About npm, Inc Jobs npm Weekly Blog Twitter GitHub Legal Stuff Terms of Use Code of Conduct Package Name Disputes Privacy Policy Reporting Abuse Other policies npm loves you"	"null"	"null"	"CommonJS module bundler. Does not support TypeScript ""out of the box"", but can be applied with"	"true"
"Tools"	"TypeDoc"	"http://typedoc.io/"	"A documentation generator for TypeScript projects"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"513"	"40"	"94"	"GitHub - TypeStrong/typedoc: Documentation generator for TypeScript projects. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 40 Star 513 Fork 94 TypeStrong/typedoc Code Issues 82 Pull requests 1 Pulse Graphs Documentation generator for TypeScript projects. http://typedoc.io 543 commits 5 branches 26 releases 24 contributors HTML 64.3% TypeScript 33.0% JavaScript 2.7% HTML TypeScript JavaScript Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fallback-to-default-theme gh-pages master v0.1 v0.3 Nothing to show v0.4.4 v0.4.3 v0.4.2 v0.4.1 v0.4.0 v0.3.12 v0.3.11 v0.3.10 v0.3.9 v0.3.8 v0.3.7 v0.3.6 v0.3.5 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.3 v0.1.2 v0.1.1 v0.1.0 Nothing to show New pull request Latest commit 155fa12 Jul 2, 2016 cspotcode committed with blakeembrey Allows comments in `tsconfig.json` (#245) Permalink Failed to load latest commit information. bin Rebuild options backend Sep 19, 2015 examples Merge branch 'master' of github.com:sebastian-lenz/typedoc into v0.4 Dec 7, 2015 src Allows comments in `tsconfig.json` (#245) Jul 2, 2016 tasks Add grunt task Mar 7, 2015 test Move theme options to renderer (#230) Jun 10, 2016 .gitignore Tidy up compiled assets from repo (#208) May 7, 2016 .travis.yml Only call getRelativeUrl when url is defined (#238) Jun 17, 2016 LICENSE Initial commit May 24, 2014 README.md Correct README repo links Jun 4, 2016 UPDATING.md Update TypeScript to 1.8.10 (#204) May 7, 2016 gruntfile.js Target correct file to replace version placeholder (#225) Jun 6, 2016 index.js Update TypeScript to 1.8.10 (#204) May 7, 2016 package.json Remove `package.json` broken ""main"" field (#248) Jul 1, 2016 tsconfig.json Recompiled TypeDoc with TypeScript 1.7 Dec 8, 2015 tsd.json New component and event framework Sep 12, 2015 README.md TypeDoc Documentation generator for TypeScript projects. Installation TypeDoc runs on Node.js and is available as an NPM package. You can install TypeDoc in your project's directory as usual: $ npm install typedoc --save-dev Like the TypeScript compiler, TypeDoc comes with a binary that can be called from anywhere if you install TypeDoc as a global module. The name of the executable is typedoc. $ npm install typedoc --global $ typedoc Preview If you want to know what a documentation created with TypeDoc looks like, head over to the homepage of the project. We've setup examples demonstrating the two default themes shipped with the package: http://typedoc.io/themes/default http://typedoc.io/themes/minimal The default themes can be found here: https://github.com/TypeStrong/typedoc-default-themes Usage Shell TypeDoc accepts most of the command line arguments that the TypeScript compiler accepts. One major difference is the fact that one may pass an entire directory instead of individual files to the documentation generator. So in order to create a documentation for an entire project you simply type: $ typedoc --out path/to/documentation/ path/to/typescript/project/ Important note Starting with version 0.2, TypeDoc no longer can predict whether files should be treated as modules or whether the project should be compiled into one big namespace. You must specify the mode argument in order to change the behaviour of TypeDoc. Arguments --out <path/to/documentation/> Specifies the location the documentation should be written to. --mode <file|modules> Specifies the output mode the project is used to be compiled with. --json <path/to/output.json> Specifies the location and file name a json file describing the project is written to. When specified no documentation will be generated. Source file handling --exclude <pattern> Exclude files by the given pattern when a path is provided as source --includeDeclarations Turn on parsing of .d.ts declaration files. --externalPattern <pattern> Define a pattern for files that should be considered being external. --excludeExternals Prevent externally resolved TypeScript files from being documented. TypeScript compiler --module <commonjs, amd, system or umd> Specify module code generation: ""commonjs"", ""amd"", ""system"" or ""umd"". --target <ES3, ES5, or ES6> Specify ECMAScript target version: ""ES3"" (default), ""ES5"" or ""ES6"" Theming --theme <default|minimal|path/to/theme> Specify the path to the theme that should be used. --name <Documentation title> Set the name of the project that will be used in the header of the template. --readme <path/to/readme|none> Path to the readme file that should be displayed on the index page. Pass none to disable the index page and start the documentation on the globals page. --hideGenerator Do not print the TypeDoc link at the end of the page. --gaID Set the Google Analytics tracking ID and activate tracking code. --gaSite <site> Set the site name for Google Analytics. Defaults to auto --entryPoint <fully.qualified.name> Specifies the fully qualified name of the root symbol. Defaults to global namespace. Content --includes <path/to/includes> Specifies the location to look for included documents. One may use [[include:FILENAME]] in comments to include documents from this location. --media <path/to/media> Specifies the location with media files that should be copied to the output directory. In order to create a link to media files use the pattern media://FILENAME in comments. Miscellaneous --version Display the version number of TypeDoc. --help Display a simple cheat sheet. Gulp There is a plugin available to run TypeDoc with Gulp created by Rogier Schouten. You can find it on NPM: https://www.npmjs.org/package/gulp-typedoc/ Grunt There is a plugin available to run TypeDoc with Grunt created by Bart van der Schoor. You can find it on NPM: https://www.npmjs.org/package/grunt-typedoc Advanced guides and docs Visit our homepage for advanced guides and an extensive API documentation: http://typedoc.io Contributing Contributions are welcome and appreciated. You can find TypeDoc on GitHub, feel free to start an issue or create a pull requests: https://github.com/TypeStrong/typedoc License Copyright (c) 2015 Sebastian Lenz. Licensed under the Apache License 2.0. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/sebastian-lenz/typedoc"	"A documentation generator for TypeScript projects"	"true"
"Tools"	"TsLint"	"https://github.com/palantir/tslint"	"TypeScript linter by @palantir"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"891"	"48"	"234"	"GitHub - palantir/tslint: An extensible linter for the TypeScript language. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 48 Star 891 Fork 234 palantir/tslint Code Issues 217 Pull requests 17 Pulse Graphs An extensible linter for the TypeScript language. http://palantir.github.io/tslint/ 1,536 commits 9 branches 84 releases 96 contributors TypeScript 97.7% JavaScript 1.2% Shell 1.1% TypeScript JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ad/fast-tests allowNonTsExtensions array_padding_rule gh-pages master new-grunt-tslint-version next-rule-metadata next wip-prefer-const Nothing to show v0.1.1 3.14.0-dev.0 3.13.0 3.13.0-dev.0 3.12.1 3.12.0 3.12.0-dev.2 3.12.0-dev.1 3.12.0-dev.0 3.11.0 3.11.0-dev.0 3.10.2 3.10.1 3.10.0 3.10.0-dev.3 3.10.0-dev.2 3.10.0-dev.1 3.10.0-dev.0 3.9.0 3.9.0-dev.0 3.8.1 3.8.0 3.8.0-dev.1 3.8.0-dev.0 3.7.4 3.7.3 3.7.2 3.7.1 3.7.0 3.7.0-dev.5 3.7.0-dev.4 3.7.0-dev.3 3.7.0-dev.2 3.7.0-dev.1 3.6.0 3.6.0-dev.1 3.5.0 3.5.0-dev.1 3.4.0 3.4.0-dev.2 3.4.0-dev.1 3.3.0 3.3.0-dev.2 3.3.0-dev.1 3.2.2 3.2.2-dev.1 3.2.1 3.2.1-dev.1 3.2.0 3.2.0-dev.2 3.2.0-dev.1 3.1.1 3.1.0 3.1.0-dev.1 3.0.0 3.0.0-dev.3 3.0.0-dev.2 3.0.0-dev.1 2.6.0-dev.2 2.6.0-dev.1 2.5.1 2.5.0 2.5.0-dev.5 2.5.0-dev.4 2.5.0-dev.3 2.5.0-dev.2 2.5.0-dev.1 2.5.0-beta 2.4.5 2.4.4 2.4.3 2.4.2 2.4.1 2.4.0 2.3.1-beta 2.3.0 2.3.0-beta 2.1.0 1.2.0 0.4.13 0.4.12 0.4.10 0.4.9 0.4.8 Nothing to show New pull request Latest commit ae4ef37 Jul 11, 2016 weswigham committed with adidahiya Revert changes made to findup-sync during refactoring now that TS pro… … …prtly supports module targets (#1388) Permalink Failed to load latest commit information. .github Tweaks to github issue template May 27, 2016 .settings VSCode uses .vscode instead of .settings since 0.8.0 Sep 17, 2015 .vscode VSCode uses .vscode instead of .settings since 0.8.0 Sep 16, 2015 bin Rearchitect lib, next up is tests Oct 2, 2015 custom-typings Use `resolve` instead of Node.JS require for resolving configuration … Apr 28, 2016 scripts Order imports so build passes (#1370) Jul 1, 2016 src Revert changes made to findup-sync during refactoring now that TS pro… Jul 11, 2016 test Add optional type information to rules (#1363) Jul 11, 2016 typings Revert changes made to findup-sync during refactoring now that TS pro… Jul 12, 2016 .eslintrc.json Bump NPM dependencies and switch to ESLint (#1221) May 10, 2016 .gitattributes adding linebreak-style rule (#1254) May 17, 2016 .gitignore Metadata for each rule (#1311) Jun 16, 2016 .npmignore Bump NPM dependencies and switch to ESLint (#1221) May 10, 2016 .project Only use the src and test folders in Eclipse Oct 27, 2014 CHANGELOG.md Prepare Release v3.13.0 (#1369) Jun 30, 2016 Gruntfile.js Metadata for each rule (#1311) Jun 16, 2016 LICENSE Moved LICENSE file to reflect standard Jul 25, 2014 README.md Add optional type information to rules (#1363) Jul 11, 2016 TypeScriptNotice.txt add copyright Aug 10, 2013 appveyor.yml Node 5 tests in CI Nov 13, 2015 circle.yml Stricter regexes for deployment tags May 10, 2016 package.json Prepare Release v3.13.0 (#1369) Jul 1, 2016 tsd.json Metadata for each rule (#1311) Jun 16, 2016 tslint.json Use latest tslint config and fix some lint errors (#1308) Jun 13, 2016 README.md TSLint An extensible linter for the TypeScript language. Supports: custom rules custom formatters inline disabling / enabling of rules integration with msbuild, grunt, gulp, atom, eclipse, emacs, sublime, vim, visual studio, vscode, webstorm, and more Table of Contents Installation Usage Core Rules Rule Flags Custom Rules Development Creating a new release Installation back to ToC ↑ CLI npm install -g tslint typescript  Library npm install tslint typescript  Peer dependencies typescript is a peer dependency of tslint. This allows you to update the compiler independently from the linter. This also means that tslint will have to use the same version of tsc used to actually compile your sources. Breaking changes in the latest dev release of typescript@next might break something in the linter if we haven't built against that release yet. If this happens to you, you can try: picking up tslint@next, which may have some bugfixes not released in tslint@latest (see release notes here). rolling back typescript to a known working version. Usage back to ToC ↑ Please ensure that the TypeScript source files compile correctly before running the linter. Configuration TSLint is configured via a file named tslint.json. This file is loaded from the current path, or the user's home directory, in that order. The configuration file specifies which rules are enabled and their options. These configurations may extend other ones via the ""extends"" field in tslint.json. {   /*    * Possible values:    * - the name of a built-in config    * - the name of an NPM module which has a ""main"" file that exports a config object    * - a relative path to a JSON file    */   ""extends"": ""tslint:latest"",   ""rules"": {     /*      * Any rules specified here will override those from the base config we are extending      */     ""no-constructor-vars"": true   },   ""rulesDirectory"": [     /*      * A list of relative or absolute paths to directories that contain custom rules.      * See the Custom Rules documentation below for more details.      */   ] } Built-in configs include tslint:latest and tslint:recommended. You may inspect their source here. tslint:recommended is a stable, somewhat opinionated set of rules which we encourage for general TypeScript programming. This configuration follows semver, so it will not have breaking changes across minor or patch releases. tslint:latest extends tslint:recommended and is continuously updated to include configuration for the latest rules in every TSLint release. Using this config may introduce breaking changes across minor releases as new rules are enabled which cause lint failures in your code. When TSLint reaches a major version bump, tslint:recommended will be updated to be identical to tslint:latest. See the core rules list below for descriptions of all the rules. CLI usage: tslint [options] file ... Options: -c, --config          configuration file --force               return status code 0 even if there are lint errors -h, --help            display detailed help -i, --init            generate a tslint.json config file in the current working directory -o, --out             output file -r, --rules-dir       rules directory -s, --formatters-dir  formatters directory -e, --exclude         exclude globs from path expansion -t, --format          output format (prose, json, verbose, pmd, msbuild, checkstyle)  [default: ""prose""] --test                test that tslint produces the correct output for the specified directory --project             path to tsconfig.json file --type-check          enable type checking when linting a project -v, --version         current version  tslint accepts the following command-line options: -c, --config:     The location of the configuration file that tslint will use to     determine which rules are activated and what options to provide     to the rules. If no option is specified, the config file named     tslint.json is used, so long as it exists in the path.     The format of the file is { rules: { /* rules list */ } },     where /* rules list */ is a key: value comma-separated list of     rulename: rule-options pairs. Rule-options can be either a     boolean true/false value denoting whether the rule is used or not,     or a list [boolean, ...] where the boolean provides the same role     as in the non-list case, and the rest of the list are options passed     to the rule that will determine what it checks for (such as number     of characters for the max-line-length rule, or what functions to ban     for the ban rule).  -e, --exclude:     A filename or glob which indicates files to exclude from linting.     This option can be supplied multiple times if you need multiple     globs to indicate which files to exclude.  --force:     Return status code 0 even if there are any lint errors.     Useful while running as npm script.  -i, --init:     Generates a tslint.json config file in the current working directory.  -o, --out:     A filename to output the results to. By default, tslint outputs to     stdout, which is usually the console where you're running it from.  -r, --rules-dir:     An additional rules directory, for user-created rules.     tslint will always check its default rules directory, in     node_modules/tslint/lib/rules, before checking the user-provided     rules directory, so rules in the user-provided rules directory     with the same name as the base rules will not be loaded.  -s, --formatters-dir:     An additional formatters directory, for user-created formatters.     Formatters are files that will format the tslint output, before     writing it to stdout or the file passed in --out. The default     directory, node_modules/tslint/build/formatters, will always be     checked first, so user-created formatters with the same names     as the base formatters will not be loaded.  -t, --format:     The formatter to use to format the results of the linter before     outputting it to stdout or the file passed in --out. The core     formatters are prose (human readable), json (machine readable)     and verbose. prose is the default if this option is not used.     Other built-in options include pmd, msbuild, checkstyle, and vso.     Additional formatters can be added and used if the --formatters-dir     option is set.  --test:     Runs tslint on the specified directory and checks if tslint's output matches     the expected output in .lint files. Automatically loads the tslint.json file in the     specified directory as the configuration file for the tests. See the     full tslint documentation for more details on how this can be used to test custom rules.  --project:     The location of a tsconfig.json file that will be used to determine which     files will be linted.  --type-check     Enables the type checker when running linting rules. --project must be     specified in order to enable type checking.  -v, --version:     The current version of tslint.  -h, --help:     Prints this help message.  Library const Linter = require(""tslint""); const fs = require(""fs"");  const fileName = ""Specify file name""; const configuration = {     rules: {         ""variable-name"": true,         ""quotemark"": [true, ""double""]     } }; const options = {     formatter: ""json"",     configuration: configuration,     rulesDirectory: ""customRules/"",     formattersDirectory: ""customFormatters/"" };  const fileContents = fs.readFileSync(fileName, ""utf8""); const linter = new Linter(fileName, fileContents, options); const result = linter.lint(); Type Checking To enable rules that work with the type checker, a TypeScript program object must be passed to the linter when using the programmatic API. Helper functions are provided to create a program from a tsconfig.json file. A project directory can be specified if project files do not lie in the same directory as the tsconfig.json file. const program = Linter.createProgram(""tsconfig.json"", ""projectDir/""); const files = Linter.getFileNames(program); const results = files.map(file => {     const fileContents = program.getSourceFile(file).getFullText();     const linter = new Linter(file, fileContents, options, program);     return result.lint(); }); When using the CLI, the --project flag will automatically create a program from the specified tsconfig.json file. Adding --type-check then enables rules that require the type checker. Core Rules back to ToC ↑ Core rules are included in the tslint package. align enforces vertical alignment. Rule options: ""parameters"" checks alignment of function parameters. ""arguments"" checks alignment of function call arguments. ""statements"" checks alignment of statements. ban bans the use of specific functions. Options are [""object"", ""function""] pairs that ban the use of object.function(). class-name enforces PascalCased class and interface names. comment-format enforces rules for single-line comments. Rule options: ""check-space"" enforces the rule that all single-line comments must begin with a space, as in // comment note that comments starting with /// are also allowed, for things such as ///<reference> ""check-lowercase"" enforces the rule that the first non-whitespace character of a comment must be lowercase, if applicable. ""check-uppercase"" enforces the rule that the first non-whitespace character of a comment must be uppercase, if applicable. curly enforces braces for if/for/do/while statements. eofline enforces the file to end with a newline. forin enforces a for ... in statement to be filtered with an if statement. indent enforces indentation with tabs or spaces. Rule options (one is required): ""tabs"" enforces consistent tabs. ""spaces"" enforces consistent spaces. interface-name enforces consistent interface names. Rule options: ""always-prefix"" enforces interface names must have an 'I' prefix ""never-prefix"" enforces interface names must not have an 'I' prefix jsdoc-format enforces basic format rules for jsdoc comments -- comments starting with /** each line contains an asterisk and asterisks must be aligned each asterisk must be followed by either a space or a newline (except for the first and the last) the only characters before the asterisk on each line must be whitespace characters one line comments must start with /** and end with */ label-position enforces labels only on sensible statements. label-undefined checks that labels are defined before usage. linebreak-style checks that line breaks used in source files are either linefeed or carriage-return linefeeds. By default linefeeds are required. This rule accepts one parameter, either ""LF"" or ""CRLF"". max-line-length sets the maximum length of a line. member-access enforces using explicit visibility on class members ""check-accessor"" enforces explicit visibility on get/set accessors ""check-constructor"" enforces explicit visibility on constructors member-ordering enforces member ordering. The first option should be an object with an order key. Values for order can be fields-first, statics-first, instance-sandwich, or a custom order. new-parens enforces parentheses when invoking a constructor via the new keyword. no-angle-bracket-type-assertion disallows usages of <> type assertions in favor of using the as keyword. no-any diallows usages of any as a type decoration. no-arg disallows access to arguments.callee. no-bitwise disallows bitwise operators. no-conditional-assignment disallows any type of assignment in any conditionals. This applies to do-while, for, if, and while statements. no-consecutive-blank-lines disallows having more than one blank line in a row in a file. no-console disallows access to the specified functions on console. Rule options are functions to ban on the console variable. no-construct disallows access to the constructors of String, Number, and Boolean. no-constructor-vars disallows the public and private modifiers for constructor parameters. no-debugger disallows debugger statements. no-default-export disallows default exports in ES6-style modules. Use named exports instead. no-duplicate-key disallows duplicate keys in object literals. no-duplicate-variable disallows duplicate variable declarations in the same block scope. no-empty disallows empty blocks. no-eval disallows eval function invocations. no-inferrable-types disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean. ignore-params allows specifying an inferrable type as a function param no-internal-module disallows internal module (use namespace instead). no-invalid-this disallows using the this keyword outside of classes. check-function-in-method disallows using the this keyword in functions within class methods. no-mergeable-namespace disallows mergeable namespaces in the same file. no-namespace disallows both internal modules and namespace, but allows ES6-style external modules. allow-declarations allows declare namespace ... {} to describe external APIs. no-null-keyword disallows use of the null keyword literal. no-reference disallows /// <reference path=> imports (use ES6-style imports instead). no-require-imports disallows invocation of require() (use ES6-style imports instead). no-shadowed-variable disallows shadowed variable declarations. no-string-literal disallows object access via string literals. no-switch-case-fall-through disallows falling through case statements. As of TypeScript version 1.8, this rule can be enabled within the compiler by passing the --noFallthroughCasesInSwitch flag. no-trailing-whitespace disallows trailing whitespace at the end of a line. no-unreachable disallows unreachable code after break, catch, throw, and return statements. This rule is supported and enforced by default within the TypeScript compiler since version 1.8. no-unused-expression disallows unused expression statements, that is, expression statements that are not assignments or function invocations (and thus no-ops). Combine with no-unused-new to disallow expressions containing the new keyword. no-unused-new disallows unused expressions statements which include the new keyword. no-unused-variable disallows unused imports, variables, functions and private class members. Rule options: ""check-parameters"" disallows unused function and constructor parameters. NOTE: this option is experimental and does not work with classes that use abstract method declarations, among other things. Use at your own risk. ""react"" relaxes the rule for a namespace import named React (from either the module ""react"" or ""react/addons""). Any JSX expression in the file will be treated as a usage of React (because it expands to React.createElement). {""ignore-pattern"": ""pattern""} where pattern is a case-sensitive regexp. Variable names that match the pattern will be ignored. no-use-before-declare disallows usage of variables before their declaration. no-var-keyword disallows usage of the var keyword, use let or const instead. no-var-requires disallows the use of require statements except in import statements, banning the use of forms such as var module = require(""module""). object-literal-sort-keys checks that keys in object literals are declared in alphabetical order (useful to prevent merge conflicts). one-line enforces the specified tokens to be on the same line as the expression preceding it. Rule options: ""check-catch"" checks that catch is on the same line as the closing brace for try. ""check-else"" checks that else is on the same line as the closing brace for if. ""check-finally"" checks that finally is on the same line as the closing brace for the preceding try or catch. ""check-open-brace"" checks that an open brace falls on the same line as its preceding expression. ""check-whitespace"" checks preceding whitespace for the specified tokens. one-variable-per-declaration disallows multiple variable definitions in the same statement. ""ignore-for-loop"" allows multiple variable definitions in for loop statement. only-arrow-functions disallows traditional function () { ... } declarations, preferring () => { ... } arrow lambdas. quotemark enforces consistent single or double quoted string literals. Rule options (at least one of ""double"" or ""single"" is required): ""single"" enforces single quotes. ""double"" enforces double quotes. ""jsx-single"" enforces single quotes for JSX attributes. ""jsx-double"" enforces double quotes for JSX attributes. ""avoid-escape"" allows you to use the ""other"" quotemark in cases where escaping would normally be required. For example, [true, ""double"", ""avoid-escape""] would not report a failure on the string literal 'Hello ""World""'. radix enforces the radix parameter of parseInt. restrict-plus-operands enforces the type of addition operands to be both string or both number (requires type checking). semicolon enforces consistent semicolon usage at the end of every statement. Rule options: ""always"" enforces semicolons at the end of every statement. ""never"" disallows semicolons at the end of every statement except for when they are necessary. switch-default enforces a default case in switch statements. trailing-comma enforces or disallows trailing comma within array and object literals, destructuring assignment and named imports. Each rule option requires a value of ""always"" or ""never"". Rule options: ""multiline"" checks multi-line object literals. ""singleline"" checks single-line object literals. triple-equals enforces === and !== in favor of == and !=. ""allow-null-check"" allows == and != when comparing to null. ""allow-undefined-check"" allows == and != when comparing to undefined. typedef enforces type definitions to exist. Rule options: ""call-signature"" checks return type of non-arrow functions. ""arrow-call-signature"" checks return type of arrow functions. ""parameter"" checks type specifier of function parameters for non-arrow functions. ""arrow-parameter"" checks type specifier of function parameters for arrow functions. ""property-declaration"" checks return types of interface properties. ""variable-declaration"" checks variable declarations. ""member-variable-declaration"" checks member variable declarations. For arrow functions being assigned as properties, either the property itself or the arrow functions parameters must have a typedef. typedef-whitespace enforces spacing whitespace for type definitions. Each rule option requires a value of ""nospace"", ""onespace"" or ""space"" to require no space, exactly one or at least one space before or after the type specifier's colon. You can specify two objects containing the five options. The first one describes the left, the second one the right hand side of the typedef colon. To omit checks for either side, omit the second object or pass an empty object for the first. Rule options: ""call-signature"" checks return type of functions. ""index-signature"" checks index type specifier of indexers. ""parameter"" checks function parameters. ""property-declaration"" checks object property declarations. ""variable-declaration"" checks variable declaration. use-isnan enforces that you use the isNaN() function to check for NaN references instead of a comparison to the NaN constant. use-strict enforces ECMAScript 5's strict mode. check-module checks that all top-level modules are using strict mode. check-function checks that all top-level functions are using strict mode. variable-name checks variables names for various errors. Rule options: ""check-format"": allows only camelCased or UPPER_CASED variable names ""allow-leading-underscore"" allows underscores at the beginning. ""allow-trailing-underscore"" allows underscores at the end. ""allow-pascal-case"" allows PascalCase in addition to camelCase. ""ban-keywords"": disallows the use of certain TypeScript keywords (any, Number, number, String, string, Boolean, boolean, undefined) as variable or parameter names. whitespace enforces spacing whitespace. Rule options: ""check-branch"" checks branching statements (if/else/for/while) are followed by whitespace. ""check-decl""checks that variable declarations have whitespace around the equals token. ""check-module"" checks for whitespace in import & export statements. ""check-operator"" checks for whitespace around operator tokens. ""check-separator"" checks for whitespace after separator tokens (,/;). ""check-type"" checks for whitespace before a variable type specification. ""check-typecast"" checks for whitespace between a typecast and its target. Rule Flags back to ToC ↑ You may enable/disable TSLint or a subset of rules within certain lines of a file with the following comment rule flags: /* tslint:disable */ - Disable all rules for the rest of the file /* tslint:enable */ - Enable all rules for the rest of the file /* tslint:disable:rule1 rule2 rule3... */ - Disable the listed rules for the rest of the file /* tslint:enable:rule1 rule2 rule3... */ - Enable the listed rules for the rest of the file // tslint:disable-next-line - Disables all rules for the following line someCode(); // tslint:disable-line - Disables all rules for the current line // tslint:disable-next-line:rule1 rule2 rule3... - Disables the listed rules for the next line etc. Rules flags enable or disable rules as they are parsed. Disabling an already disabled rule or enabling an already enabled rule has no effect. For example, imagine the directive /* tslint:disable */ on the first line of a file, /* tslint:enable:ban class-name */ on the 10th line and /* tslint:enable */ on the 20th. No rules will be checked between the 1st and 10th lines, only the ban and class-name rules will be checked between the 10th and 20th, and all rules will be checked for the remainder of the file. Custom Rules back to ToC ↑ Custom rule sets from Palantir tslint-react - Lint rules related to React & JSX. Custom rule sets from the community If we don't have all the rules you're looking for, you can either write your own custom rules or use custom rules that others have developed. The repos below are a good source of custom rules: ESLint rules for TSLint - Improve your TSLint with the missing ESLint Rules tslint-microsoft-contrib - A set of TSLint rules used on some Microsoft projects codelyzer - A set of tslint rules for static code analysis of Angular 2 TypeScript projects vrsource-tslint-rules Writing custom rules TSLint ships with a set of core rules that can be configured. However, users are also allowed to write their own rules, which allows them to enforce specific behavior not covered by the core of TSLint. TSLint's internal rules are itself written to be pluggable, so adding a new rule is as simple as creating a new rule file named by convention. New rules can be written in either TypeScript or JavaScript; if written in TypeScript, the code must be compiled to JavaScript before invoking TSLint. Rule names are always camel-cased and must contain the suffix Rule. Let us take the example of how to write a new rule to forbid all import statements (you know, for science). Let us name the rule file noImportsRule.ts. Rules can be referenced in tslint.json in their kebab-case forms, so ""no-imports"": true would turn on the rule. Now, let us first write the rule in TypeScript. A few things to note: We import tslint/lib/lint to get the whole Lint namespace instead of just the Linter class. The exported class must always be named Rule and extend from Lint.Rules.AbstractRule. import * as ts from ""typescript""; import * as Lint from ""tslint/lib/lint"";  export class Rule extends Lint.Rules.AbstractRule {     public static FAILURE_STRING = ""import statement forbidden"";      public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {         return this.applyWithWalker(new NoImportsWalker(sourceFile, this.getOptions()));     } }  // The walker takes care of all the work. class NoImportsWalker extends Lint.RuleWalker {     public visitImportDeclaration(node: ts.ImportDeclaration) {         // create a failure at the current position         this.addFailure(this.createFailure(node.getStart(), node.getWidth(), Rule.FAILURE_STRING));          // call the base version of this visitor to actually parse this node         super.visitImportDeclaration(node);     } } Given a walker, TypeScript's parser visits the AST using the visitor pattern. So the rule walkers only need to override the appropriate visitor methods to enforce its checks. For reference, the base walker can be found in syntaxWalker.ts. We still need to hook up this new rule to TSLint. First make sure to compile noImportsRule.ts: tsc -m commonjs --noImplicitAny noImportsRule.ts node_modules/tslint/lib/tslint.d.ts Then, if using the CLI, provide the directory that contains this rule as an option to --rules-dir. If using TSLint as a library or via grunt-tslint, the options hash must contain ""rulesDirectory"": ""..."". If you run the linter, you'll see that we have now successfully banned all import statements via TSLint! Final notes: Core rules cannot be overwritten with a custom implementation. Custom rules can also take in options just like core rules (retrieved via this.getOptions()). Custom Formatters back to ToC ↑ Just like rules, additional formatters can also be supplied to TSLint via --formatters-dir on the CLI or formattersDirectory option on the library or grunt-tslint. Writing a new formatter is simpler than writing a new rule, as shown in the JSON formatter's code. import * as ts from ""typescript""; import * as Lint from ""tslint/lib/lint"";  export class Formatter extends Lint.Formatters.AbstractFormatter {     public format(failures: Lint.RuleFailure[]): string {         var failuresJSON = failures.map((failure: Lint.RuleFailure) => failure.toJson());         return JSON.stringify(failuresJSON);     } } Such custom formatters can also be written in JavaScript. Formatter files are always named with the suffix Formatter and the exported class within the file must be named Formatter. A formatter is referenced from TSLint without its suffix. Development back to ToC ↑ Quick Start git clone git@github.com:palantir/tslint.git npm install grunt next branch The next branch of this repo tracks the latest TypeScript compiler nightly release as a peerDependency. This allows you to develop the linter and its rules against the latest features of the language. Releases from this branch are published to npm with the next dist-tag, so you may install the latest dev version of TSLint via npm install tslint@next. Creating a new release back to ToC ↑ Bump the version number in package.json and src/tslint.ts Add release notes in CHANGELOG.md Run grunt to build the latest sources Commit with message Prepare release <version> Run npm publish Create a git tag for the new release and push it (see existing tags here) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/palantir/tslint"	"TypeScript linter by @palantir"	"true"
"Mobile"	"NativeScript"	"https://github.com/NativeScript/NativeScript"	"Open Source framework for building cross-platform truly native iOS, Android and Windows mobile apps using JavaScript"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7473"	"498"	"561"	"GitHub - NativeScript/NativeScript: Build truly native cross-platform iOS and Android apps with JavaScript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 498 Star 7,473 Fork 561 NativeScript/NativeScript Code Issues 189 Pull requests 5 Wiki Pulse Graphs Build truly native cross-platform iOS and Android apps with JavaScript http://www.nativescript.org 3,224 commits 49 branches 16 releases 63 contributors TypeScript 94.8% JavaScript 5.1% Other 0.1% TypeScript JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ErjanGavalji/apiref-development-instructions ErjanGavalji/fix-transitions-test-run-in-travis ErjanGavalji/improve-docs-cookbook ErjanGavalji/use-ns-default-theme-for-api-ref UpdateGrunt action-bar-title-fix angular-release angular animations-fix appbuilder1.5.2 atanasovg/async-image-impl atanasovg/number-picker cankov/add-repo cankov/background-native-image-recreated cankov/binding-context-null cankov/css-hash-lookup cankov/error-tests-runtime-change cankov/fix-android-background-navigate cankov/fix-positionless-source-error-format cankov/frame-currentEntry-fix cankov/grunt-inplace cankov/image-exactly cankov/ios-navbar-background cankov/list-improvements cankov/nested-scopes cankov/network-spike capitalize-android fealebenpae/http-image-async feature/definition-tests feature/docs feature/docs2-rebased feature/docs2 feature/file-name-resolver-tests-fix feature/share-example gatanasov/api-reference-update hdeshev/xhr-response-type hshristov/update-changelog image-ios-async master niliev/docs-fix-slash-misuse nnikolov/DatePickerHotFixAngular plamen5kov/add_packagejson_info raikov/inspector raikov/test-dock-in-scrollview release tsenov/panEvent tsenov/panEventTestPage tsenov/test-pages tsenov/testPages Nothing to show v2.0.1 v2.0.0 v1.7.1 v1.7.0 v1.6.0 v1.5.2 v1.5.1 v1.5.0 v1.4.0 v1.3.0 v1.2.1 v1.2.0 v1.1.0 v1.0.0 v0.10.0 v0.9.0 Nothing to show New pull request Latest commit b07dd30 Jul 14, 2016 SvetoslavTsenov committed on GitHub Merge pull request #2454 from NativeScript/tsenov/ui-tests … Remove some unnecessary variables Permalink Failed to load latest commit information. .github fix the link to coding convention. May 20, 2016 apps Remove some unnecessary variables Jul 14, 2016 build Transpile should be allowed to emit on errors Jun 13, 2016 node-tests Remove the files entry from the tsconfig.json Jun 13, 2016 tests Fix apps and tests TypeScript projects Jul 12, 2016 tns-core-modules Merge pull request #2435 from toddanglin/patch-1 Jul 13, 2016 .ackrc Add an ackrc for easier searching Feb 24, 2016 .ctags_exclude (chore) Exclude platform d.ts files from ctags traversals. May 16, 2016 .gitattributes definitions fixed Mar 3, 2015 .gitignore Create a single NS app for cuteness.io, gallery-app and ui-tests-app … Jul 11, 2016 .travis.yml Grunt tasks now have verbose output Jul 12, 2016 AUTHORS Update Authors Feb 16, 2016 CHANGELOG.md Remove the redundant header that gets added by the retriever script o… Jul 1, 2016 CodingConvention.md (Coding Convention) Fix indents to use 4 spaces (per the same guideli… Mar 15, 2016 CreateNewModule.md definitions fixed Mar 3, 2015 CrossPlatformModules.csproj Update csproj (#2145) May 19, 2016 CrossPlatformModules.sln Add commented unittest - will need to check later why android tests f… Sep 4, 2015 DebugV8Heap.md definitions fixed Mar 3, 2015 DevelopmentWorkflow.md Add DevelopmentWorkflow.md May 27, 2016 Introduction.md Rename the old Readme Apr 24, 2015 LICENSE Fix the license agreements Mar 17, 2016 LICENSE.md Fix the license agreements Mar 17, 2016 README.md README: Link to both getting started guides Jun 3, 2016 RunTests.md Add the new snippet injector in grunt task Apr 13, 2016 expect.exp Add a check so setting src on async image multiple times wont mismatc… Jun 9, 2016 gruntfile.js Create a single NS app for cuteness.io, gallery-app and ui-tests-app … Jul 11, 2016 package.json Add grunt dev dependenices back since they are needed by the Travis g… Jul 12, 2016 running-tests.md Remove redundant files. Update the doc with iOS instructions Oct 29, 2015 source-control.md Fix typos in source-control.md Feb 13, 2016 tsconfig.json Create a single NS app for cuteness.io, gallery-app and ui-tests-app … Jul 11, 2016 README.md NativeScript NativeScript is a framework for building native iOS and Android apps using JavaScript and CSS. NativeScript renders UIs with the native platform’s rendering engine, no WebViews, resulting in native-like performance and UX. NativeScript provides a best-of-both-worlds development experience. Our cross-platform JavaScript modules give you the convenience of writing iOS and Android apps from a single JavaScript codebase, while our runtimes give you the power of accessing native APIs, SDKs, and frameworks when you need them—all without needing to open Xcode or Android Studio. NativeScript was created and is supported by Telerik. Check out the links below to get started: CTO’s guide to NativeScript Getting Started and Installation Quick Links Repositories Contributing Angular 2 For CTOs Making the right technology choices is key to success. Our CTO’s guide to NativeScript helps you understand why NativeScript is the right choice for your next mobile project. Getting Started and Installation Our Getting Started Guides are hands-on tutorials that walk you through installing NativeScript and building a real iOS and Android application. Get started with JavaScript Get started with TypeScript and Angular 2 Quick Links NativeScript home page NativeScript and Angular @NativeScript on Twitter NativeScript community Slack channel NativeScript on Stack Overflow NativeScript documentation NativeScript blog Repositories The NativeScript framework consists of a number of components, all of which are open source and on GitHub. Here are the major ones: Cross-platform modules This repo contains the NativeScript cross-platform modules, which abstract iOS and Android APIs into JavaScript APIs—e.g. camera.takePicture(). The modules are written in TypeScript. iOS runtime This repo contains the NativeScript iOS runtime—the code that hosts NativeScript iOS apps, and allows JavaScript code to be executed on iOS devices. The iOS runtime is written in a fun mix of C++, Objective-C, and more. Android runtime This repo contains the NativeScript Android—the code that hosts NativeScript Android apps, and allows JavaScript code to be executed on Android devices. The Android runtime is written in a fun mix of C++ and Java. CLI This repo contains the NativeScript command-line interface, which lets you create, build, and run apps using the NativeScript framework. The CLI is written in TypeScript. Docs This repo contains the NativeScript framework documentation, which is available at http://docs.nativescript.org/. The docs are written in Markdown. In addition to the code that makes up the NativeScript framework itself, we also provide a number of open-source sample apps that you can reference while building your NativeScript application. Contributing We love PRs, and accept them for all of our repositories—even docs! Please follow our contribution guide if you want to become part of the project. Angular 2 We are working together with the Google Angular JS team to make Angular 2.0 work on top of NativeScript. To use Angular 2 and NativeScript please follow the getting started article. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/NativeScript/NativeScript"	"Open Source framework for building cross-platform truly native iOS, Android and Windows mobile apps using JavaScript"	"true"
"Web"	"AngularJs2"	"https://github.com/angular/angular"	"Angular is a development platform for building mobile and desktop web applications"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13923"	"1773"	"3592"	"GitHub - angular/angular Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,773 Star 13,923 Fork 3,592 angular/angular Code Issues 1,231 Pull requests 33 Wiki Pulse Graphs https://angular.io 5,014 commits 33 branches 78 releases 306 contributors TypeScript 86.4% Dart 10.1% JavaScript 1.3% HTML 0.9% Shell 0.8% CSS 0.3% Other 0.2% TypeScript Dart JavaScript HTML Shell CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags IgorMinar-patch-1 alexeagle-patch-1 analyzer angular.io-docs builds-dart builds-js ci-test css_parser_source_span docker examples fix g3_master g3_v2_0-dart g3_v2_0 master mhevery-patch-1 package-splitup-squashed-rebased package-splitup perftest presubmit-alexeagle-pr-8098 presubmit-hansl-pr-8290 presubmit-hansl-pr-8339 presubmit-mprobst-pr-8324 presubmit-mprobst-pr-8375 presubmit-mprobst-pr-8399 presubmit-robertmesserle-pr-8071 presubmit-robertmesserle-pr-8081 presubmit-robertmesserle-pr-8126 presubmit-robertmesserle-pr-8147 presubmit-tbosch-pr-8393 presubmit-vsavkin-pr-7948 presubmit-vsavkin-pr-8354 presubmit-vsavkin-pr-8451 Nothing to show starting 2.0.0-rc.4 2.0.0-rc.3 2.0.0-rc.2 2.0.0-rc.1 2.0.0-rc.0 2.0.0-build.0069329.js 2.0.0-build.0069329.dart 2.0.0-build.43133b5.js 2.0.0-build.43133b5.dart 2.0.0-build.9d5918e.js 2.0.0-build.9d5918e.dart 2.0.0-build.8c01008.js 2.0.0-build.8c01008.dart 2.0.0-build.dafd9d9.js 2.0.0-build.dafd9d9.dart 2.0.0-build.ac87a84.js 2.0.0-build.ac87a84.dart 2.0.0-beta.17 2.0.0-beta.16 2.0.0-beta.15 2.0.0-beta.14 2.0.0-beta.13 2.0.0-beta.12 2.0.0-beta.11 2.0.0-beta.10 2.0.0-beta.9 2.0.0-beta.8 2.0.0-beta.7 2.0.0-beta.6 2.0.0-beta.5 2.0.0-beta.4 2.0.0-beta.3 2.0.0-beta.2 2.0.0-beta.1 2.0.0-beta.0 2.0.0-alpha.55 2.0.0-alpha.54 2.0.0-alpha.53 2.0.0-alpha.52 2.0.0-alpha.51 2.0.0-alpha.50 2.0.0-alpha.49 2.0.0-alpha.48 2.0.0-alpha.47 2.0.0-alpha.46 2.0.0-alpha.45 2.0.0-alpha.44 2.0.0-alpha.42 2.0.0-alpha.41 2.0.0-alpha.40 2.0.0-alpha.39 2.0.0-alpha.38 2.0.0-alpha.37 2.0.0-alpha.36 2.0.0-alpha.35 2.0.0-alpha.34 2.0.0-alpha.33 2.0.0-alpha.32 2.0.0-alpha.31 2.0.0-alpha.30 2.0.0-alpha.29 2.0.0-alpha.28 2.0.0-alpha.27 2.0.0-alpha.26 2.0.0-alpha.25 2.0.0-alpha.24 2.0.0-alpha.23 2.0.0-alpha.22 2.0.0-alpha.21 2.0.0-alpha.20 2.0.0-alpha.19 2.0.0-alpha.18 2.0.0-alpha.17 2.0.0-alpha.16 2.0.0-alpha.15 2.0.0-alpha.14 2.0.0-alpha.13 Nothing to show New pull request Latest commit f08060b Jul 15, 2016 vsavkin fix(router): back button does not work in IE11 and Safari Permalink Failed to load latest commit information. .github chore(.github): improve github issue and PR templates Jun 16, 2016 modules fix(router): back button does not work in IE11 and Safari Jul 15, 2016 modules_dart Revert ""feat(change_detection): make INTERPOLATE_REGEXP customizable (#… Jun 1, 2016 scripts refactor(core): clean up platform bootstrap and initTestEnvironment Jul 8, 2016 tools fix(router): expose initalNavigation and dispose so they can be used … Jul 14, 2016 .bowerrc chore(dgeni): clean up legacy typings bundle creation Oct 29, 2015 .clang-format feat(tooling): Add a .clang-format for automated JavaScript formatting. Apr 2, 2015 .editorconfig chore(.editorconfig): include markdown config Jan 27, 2015 .gitattributes build: fix some issues on Windows platforms Jun 23, 2016 .gitignore chore(tsc-wrapped): update to newest tsickle Jun 9, 2016 .nvmrc build(node): upgrade to node 5.4.1 Jan 22, 2016 .travis.yml chore(build): activate optional jobs in SL and BS (#8605) Jun 9, 2016 CHANGELOG.md doc(changelog): cleans up markdown for breaking changes (#9739) Jun 30, 2016 COMMITTER.md chore(docs): update the merge process docs Dec 23, 2015 CONTRIBUTING.md removes tailing slashes from url in lines 229 231 May 26, 2016 DEVELOPER.md doc(developer): updates (#10075) Jul 14, 2016 LICENSE Update change from Apache to MIT license Jan 8, 2016 NAMING.md refactor(ngProbe): rename to ng.probe Aug 31, 2015 README.md chore(readme): add CircleCI status badge May 27, 2016 TOOLS.md feat(docs): document change detection profiler Sep 4, 2015 TOOLS_DART.md fix(docs): fix an import in TOOLS_DART.md Dec 17, 2015 TOOLS_JS.md doc: fix `enableDebugTools` import path (#9377) Jun 20, 2016 TRIAGE_AND_LABELS.md chore(docs): explain the process for merging changes to master Aug 11, 2015 bower.json fix(benchmarks): update react and polymer benchmarks and get tree upd… Oct 28, 2015 browser-providers.conf.js chore(build): reenable optional jobs in SL and BS May 11, 2016 build.sh chore(build): update build script to increase node's heap size Jul 6, 2016 circle.yml chore(lint): re-enable clang-format on tools/ May 26, 2016 gulpfile.js fix(platform-browser): remove testing_e2e target (#10029) Jul 13, 2016 gulpfile.js.old build: use connect web server instead of SimpleHTTPServer May 25, 2016 karma-js.conf.js chore(karma): remove ref to legacy files (#9008) Jun 4, 2016 npm-shrinkwrap.clean.json build(npm): upgrade ts-api-guardian to v0.1.4 Jun 27, 2016 npm-shrinkwrap.json build(npm): upgrade ts-api-guardian to v0.1.4 Jun 27, 2016 npm-shrinkwrap.readme.md build(npm): add tools/npm/reshrinkwrap script and update docs Jan 22, 2016 package.json docs(changelog): change log and package.json to rc4 Jun 30, 2016 perf-cloud-secret.template.js refactor(build): support multiple configurable browsers for e2e and p… Jan 20, 2015 presubmit.sh refactor(compiler): rename /compiler_cli to /compiler-cli Jun 2, 2016 protractor-dart2js.conf.js chore: rename modules/examples to modules/playground Oct 18, 2015 protractor-ddc.conf.js chore(ddc): add e2e test infra + first test Mar 22, 2016 protractor-js-dev.conf.js chore(test): setup a gulp task for quickly running e2e tests against … Jun 11, 2015 protractor-js-new-world.conf.js build: use connect web server instead of SimpleHTTPServer May 25, 2016 protractor-js-prod.conf.js chore(build): add a task to watch and render examples and e2e tests f… Jun 19, 2015 protractor-js.conf.js build: adding basic e2e testing infrastructure May 2, 2016 protractor-shared.js refactor(chore): Replace all 'bindings' with 'providers' May 23, 2016 publish-packages.sh cleanup(router): removes router Jun 20, 2016 pubspec.yaml chore(test): migrate Dart tests to package:test Mar 4, 2016 shims_for_IE.js fix(IE): make shim work with instrumented code May 19, 2016 test-main.js refactor(core): clean up platform bootstrap and initTestEnvironment Jul 8, 2016 test.sh chore: have test.sh take platform argument Jun 14, 2016 tslint.json chore(lint): enable lint check for duplicate vars Jul 13, 2016 README.md Angular Angular is a development platform for building mobile and desktop web applications. This is the repository for Angular 2, both the JavaScript (JS) and Dart versions. Angular 2 is currently in Release Candidate. Quickstart Get started in 5 minutes. Want to help? Want to file a bug, contribute some code, or improve documentation? Excellent! Read up on our guidelines for contributing and then check out one of our issues in the hotlist: community-help. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/angular/angular"	"Angular is a development platform for building mobile and desktop web applications"	"true"
"Web"	"palantir/plottable"	"https://github.com/palantir/plottable"	"A library of modular chart components, built on (see also: )"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1071"	"65"	"117"	"GitHub - palantir/plottable: A library of modular chart components built on D3 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 65 Star 1,071 Fork 117 palantir/plottable Code Issues 249 Pull requests 11 Wiki Pulse Graphs A library of modular chart components built on D3 http://plottablejs.org/ 9,840 commits 35 branches 148 releases 38 contributors TypeScript 58.3% JavaScript 41.0% Other 0.7% TypeScript JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags 2396fix 2612fr-2 2693fr 2772fix 2777demo 2868fix 2868fix1 3029-revert 3045fix axesStuff barChartVerticalQuery bugfix/handle-newlines-in-domains categoryAxisComputedSpace develop dispatcherTest extremePerf feature/categorySorting fixSinon groupGetClosestPlotData iclTick iclTick2 master objectConstancy onRender panLimit panLimitAPI panLimits pointer preventDefault refactorDispatcher refactorKeyInteraction tests14 timezone_extend timezone_newclass timezones Nothing to show v2.2.0 v2.1.0 v2.0.0 v2.0.0-rc2 v2.0.0-rc1 v1.16.2 v1.16.1 v1.16.0 v1.15.0 v1.14.0 v1.13.0 v1.12.0 v1.11.0 v1.10.0 v1.9.0 v1.8.0 v1.7.0 v1.6.1 v1.6.0 v1.5.2 v1.5.1 v1.5.0 v1.4.0 v1.3.0 v1.2.0 v1.1.0 v1.0.0 v1.0.0-rc7 v1.0.0-rc6 v1.0.0-rc5 v1.0.0-rc4 v1.0.0-rc3 v1.0.0-rc2 v1.0.0-rc1 v0.54.0 v0.53.0 v0.52.0 v0.51.0 v0.50.0 v0.49.0 v0.48.1 v0.48.0 v0.47.0 v0.46.0 v0.45.2 v0.45.1 v0.45.0 v0.44.0 v0.43.2 v0.43.1 v0.42.0 v0.41.1 v0.41.0 v0.40.0 v0.39.0 v0.38.0 v0.37.0 v0.36.1 v0.36.0 v0.35.1 v0.35.0 v0.34.1 v0.34.0 v0.33.1 v0.33.0 v0.33.0-preview-2 v0.32.1 v0.32.0 v0.31.0 v0.30.0 v0.29.0 v0.28.1 v0.28.0 v0.27.1 v0.27.0 v0.26.2 v0.26.1 v0.26.0 v0.25.1 v0.25.0 v0.24.0 v0.23.2 v0.23.1 v0.23.0 v0.22.0 v0.21.3 v0.21.2 v0.21.1 v0.21.0 v0.20.5 v0.20.4 v0.20.3 v0.20.3-hover-tooltip v0.20.3-hover-tooltip-1 v0.20.2 v0.20.1 v0.20.0 v0.19.3 v0.19.2 v0.19.1 Nothing to show New pull request Latest commit 5672976 May 16, 2016 JKillian committed with adidahiya Fix color quicktests (#3081) Permalink Failed to load latest commit information. bower_components Add sinon to test framework Oct 16, 2015 quicktests Fix color quicktests (#3081) May 16, 2016 src Rename LinePlot#entityNearest to entityNearestByXThenY (#3079) Apr 28, 2016 test Prepare for NPM publishing (#3077) Apr 15, 2016 typings Enable additional TSLint rules Jan 18, 2016 .editorconfig EditorConfig, whitespace cleanup, README edits Dec 7, 2015 .eslintrc Add utility function to create random data with name, x, and y fields… Oct 23, 2015 .gitattributes Force git to recognize .d.ts files as text Oct 23, 2015 .gitignore adding back settings Sep 10, 2015 .jscsrc adding EOF newline Jun 17, 2015 .npmignore Prepare for NPM publishing (#3077) Apr 15, 2016 .sublimets sublime tsc compiling working Jun 3, 2014 .travis.yml Remove before_install Phantom check Jul 28, 2015 Gruntfile.js Fix typo in Gruntfile Apr 15, 2016 LICENSE Update license with up-to-date year Mar 6, 2015 Plottable_Corporate_Contributor_License_Agreement.pdf Update Contributor License Agreements. Aug 31, 2015 Plottable_Personal_Contributor_License_Agreement.pdf Update Contributor License Agreements. Sep 1, 2015 README.md Update README w/ info about viewing quicktests May 16, 2016 bower.json Release version 2.2.0 May 6, 2016 license_header.txt Updated copyright date in license header. Jun 19, 2015 package.json Release version 2.2.0 May 6, 2016 plottable-npm.d.ts Rename LinePlot#entityNearest to entityNearestByXThenY (#3079) Apr 29, 2016 plottable.css set pointer-events to none on swatch-bounding-box Oct 20, 2015 plottable.d.ts Rename LinePlot#entityNearest to entityNearestByXThenY (#3079) Apr 29, 2016 plottable.js Release version 2.2.0 May 6, 2016 plottable.min.js Release version 2.2.0 May 6, 2016 plottable.zip Release version 2.2.0 May 6, 2016 tsconfig.json Prepare for NPM publishing (#3077) Apr 15, 2016 tsd.json Add sinon to test framework Oct 16, 2015 tslint.json Prepare for NPM publishing (#3077) Apr 15, 2016 README.md Plottable.js Overview Plottable.js is a library of chart components for creating flexible, custom charts for websites. It is built on top of D3.js and provides higher-level pieces, like plots, gridlines, and axes. As such, it's easier to quickly build charts than with D3, and the charts are much more flexible than standard-template charts provided by charting libraries. You can think of Plottable as a ""D3 for Charts"" — it is not a charting library but rather a library of chart components. Check out examples of Plottable on our website's examples page. Philosophy Plottable's core philosophy is ""Composition over Configuration"", so a lot of the API flexibility is in choosing which Components to use, and how to arrange them in Tables, rather than setting high-level properties on the charts. If you find you need a feature that doesn't exist, consider writing a new Component that implements the functionality. This way, you can get your custom functionality and still benefit from the rest of the library. Plottable.js is being developed by Palantir Technologies. It's developed in TypeScript and distributed in ES5 JavaScript. Quick Start Get Plottable: Bower: bower install --save plottable cdnjs URL Direct download: plottable.zip Check out examples Read the tutorials Visit the website, plottablejs.org Upgrading to v1.0.0 If you are upgrading from a pre-v1.0.0 version of Plottable to v1.0.0 or later, please use the Upgrade Guide on the wiki. We Want To Help! If you run into any problems using Plottable, please let us know. We want Plottable to be easy-to-use, so if you are getting confused, it is our fault, not yours. Create an issue and we'll be happy to help you out, or drop by our Gitter room. Development Clone the repo Install global dependencies npm install grunt grunt-cli -g Install local dependencies npm install Run grunt and it will spin up a server (pointed at http://localhost:9999) and begin compiling the typescript code If you get an EACCESS error at any point, instead of running command with sudo try first changing permission to following folders: usr/local by running sudo chown -R ""$(whoami)"" /usr/local ~/.npm/ by running sudo chown -R ""$(whoami)"" ~/.npm/ Navigate to http://localhost:9999/quicktests/ and choose a directory to view visual tests Contributing Write your code Add tests for new functionality, and please add some quicktests too Run grunt test and verify it completes with no warnings or failures Commit new files, including the updated built files like plottable.js and plottable.d.ts Fill out the Personal or Corporate Contributor License Agreement and send it to opensource@palantir.com You can do this easily on a Mac by using the Tools - Annotate - Signature feature in Preview. Submit a pull request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/palantir/plottable"	"A library of modular chart components, built on (see also: )"	"true"
"Web"	"http://plottablejs.org"	"http://plottablejs.org/"	"A library of modular chart components, built on (see also: )"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"1071"	"65"	"117"	"GitHub - palantir/plottable: A library of modular chart components built on D3 Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 65 Star 1,071 Fork 117 palantir/plottable Code Issues 249 Pull requests 11 Wiki Pulse Graphs A library of modular chart components built on D3 http://plottablejs.org/ 9,840 commits 35 branches 148 releases 38 contributors TypeScript 58.3% JavaScript 41.0% Other 0.7% TypeScript JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: develop Switch branches/tags Branches Tags 2396fix 2612fr-2 2693fr 2772fix 2777demo 2868fix 2868fix1 3029-revert 3045fix axesStuff barChartVerticalQuery bugfix/handle-newlines-in-domains categoryAxisComputedSpace develop dispatcherTest extremePerf feature/categorySorting fixSinon groupGetClosestPlotData iclTick iclTick2 master objectConstancy onRender panLimit panLimitAPI panLimits pointer preventDefault refactorDispatcher refactorKeyInteraction tests14 timezone_extend timezone_newclass timezones Nothing to show v2.2.0 v2.1.0 v2.0.0 v2.0.0-rc2 v2.0.0-rc1 v1.16.2 v1.16.1 v1.16.0 v1.15.0 v1.14.0 v1.13.0 v1.12.0 v1.11.0 v1.10.0 v1.9.0 v1.8.0 v1.7.0 v1.6.1 v1.6.0 v1.5.2 v1.5.1 v1.5.0 v1.4.0 v1.3.0 v1.2.0 v1.1.0 v1.0.0 v1.0.0-rc7 v1.0.0-rc6 v1.0.0-rc5 v1.0.0-rc4 v1.0.0-rc3 v1.0.0-rc2 v1.0.0-rc1 v0.54.0 v0.53.0 v0.52.0 v0.51.0 v0.50.0 v0.49.0 v0.48.1 v0.48.0 v0.47.0 v0.46.0 v0.45.2 v0.45.1 v0.45.0 v0.44.0 v0.43.2 v0.43.1 v0.42.0 v0.41.1 v0.41.0 v0.40.0 v0.39.0 v0.38.0 v0.37.0 v0.36.1 v0.36.0 v0.35.1 v0.35.0 v0.34.1 v0.34.0 v0.33.1 v0.33.0 v0.33.0-preview-2 v0.32.1 v0.32.0 v0.31.0 v0.30.0 v0.29.0 v0.28.1 v0.28.0 v0.27.1 v0.27.0 v0.26.2 v0.26.1 v0.26.0 v0.25.1 v0.25.0 v0.24.0 v0.23.2 v0.23.1 v0.23.0 v0.22.0 v0.21.3 v0.21.2 v0.21.1 v0.21.0 v0.20.5 v0.20.4 v0.20.3 v0.20.3-hover-tooltip v0.20.3-hover-tooltip-1 v0.20.2 v0.20.1 v0.20.0 v0.19.3 v0.19.2 v0.19.1 Nothing to show New pull request Latest commit 5672976 May 16, 2016 JKillian committed with adidahiya Fix color quicktests (#3081) Permalink Failed to load latest commit information. bower_components Add sinon to test framework Oct 16, 2015 quicktests Fix color quicktests (#3081) May 16, 2016 src Rename LinePlot#entityNearest to entityNearestByXThenY (#3079) Apr 28, 2016 test Prepare for NPM publishing (#3077) Apr 15, 2016 typings Enable additional TSLint rules Jan 18, 2016 .editorconfig EditorConfig, whitespace cleanup, README edits Dec 7, 2015 .eslintrc Add utility function to create random data with name, x, and y fields… Oct 23, 2015 .gitattributes Force git to recognize .d.ts files as text Oct 23, 2015 .gitignore adding back settings Sep 10, 2015 .jscsrc adding EOF newline Jun 17, 2015 .npmignore Prepare for NPM publishing (#3077) Apr 15, 2016 .sublimets sublime tsc compiling working Jun 3, 2014 .travis.yml Remove before_install Phantom check Jul 28, 2015 Gruntfile.js Fix typo in Gruntfile Apr 15, 2016 LICENSE Update license with up-to-date year Mar 6, 2015 Plottable_Corporate_Contributor_License_Agreement.pdf Update Contributor License Agreements. Aug 31, 2015 Plottable_Personal_Contributor_License_Agreement.pdf Update Contributor License Agreements. Sep 1, 2015 README.md Update README w/ info about viewing quicktests May 16, 2016 bower.json Release version 2.2.0 May 6, 2016 license_header.txt Updated copyright date in license header. Jun 19, 2015 package.json Release version 2.2.0 May 6, 2016 plottable-npm.d.ts Rename LinePlot#entityNearest to entityNearestByXThenY (#3079) Apr 29, 2016 plottable.css set pointer-events to none on swatch-bounding-box Oct 20, 2015 plottable.d.ts Rename LinePlot#entityNearest to entityNearestByXThenY (#3079) Apr 29, 2016 plottable.js Release version 2.2.0 May 6, 2016 plottable.min.js Release version 2.2.0 May 6, 2016 plottable.zip Release version 2.2.0 May 6, 2016 tsconfig.json Prepare for NPM publishing (#3077) Apr 15, 2016 tsd.json Add sinon to test framework Oct 16, 2015 tslint.json Prepare for NPM publishing (#3077) Apr 15, 2016 README.md Plottable.js Overview Plottable.js is a library of chart components for creating flexible, custom charts for websites. It is built on top of D3.js and provides higher-level pieces, like plots, gridlines, and axes. As such, it's easier to quickly build charts than with D3, and the charts are much more flexible than standard-template charts provided by charting libraries. You can think of Plottable as a ""D3 for Charts"" — it is not a charting library but rather a library of chart components. Check out examples of Plottable on our website's examples page. Philosophy Plottable's core philosophy is ""Composition over Configuration"", so a lot of the API flexibility is in choosing which Components to use, and how to arrange them in Tables, rather than setting high-level properties on the charts. If you find you need a feature that doesn't exist, consider writing a new Component that implements the functionality. This way, you can get your custom functionality and still benefit from the rest of the library. Plottable.js is being developed by Palantir Technologies. It's developed in TypeScript and distributed in ES5 JavaScript. Quick Start Get Plottable: Bower: bower install --save plottable cdnjs URL Direct download: plottable.zip Check out examples Read the tutorials Visit the website, plottablejs.org Upgrading to v1.0.0 If you are upgrading from a pre-v1.0.0 version of Plottable to v1.0.0 or later, please use the Upgrade Guide on the wiki. We Want To Help! If you run into any problems using Plottable, please let us know. We want Plottable to be easy-to-use, so if you are getting confused, it is our fault, not yours. Create an issue and we'll be happy to help you out, or drop by our Gitter room. Development Clone the repo Install global dependencies npm install grunt grunt-cli -g Install local dependencies npm install Run grunt and it will spin up a server (pointed at http://localhost:9999) and begin compiling the typescript code If you get an EACCESS error at any point, instead of running command with sudo try first changing permission to following folders: usr/local by running sudo chown -R ""$(whoami)"" /usr/local ~/.npm/ by running sudo chown -R ""$(whoami)"" ~/.npm/ Navigate to http://localhost:9999/quicktests/ and choose a directory to view visual tests Contributing Write your code Add tests for new functionality, and please add some quicktests too Run grunt test and verify it completes with no warnings or failures Commit new files, including the updated built files like plottable.js and plottable.d.ts Fill out the Personal or Corporate Contributor License Agreement and send it to opensource@palantir.com You can do this easily on a Mac by using the Tools - Annotate - Signature feature in Preview. Submit a pull request Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/palantir/plottable"	"A library of modular chart components, built on (see also: )"	"true"
"Standalone apps"	"Visual Studio Code"	"https://github.com/Microsoft/vscode"	"Multiplatform IDE."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"16037"	"996"	"2150"	"GitHub - Microsoft/vscode: Visual Studio Code Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 996 Star 16,037 Fork 2,150 Microsoft/vscode Code Issues 2,009 Pull requests 28 Wiki Pulse Graphs Visual Studio Code http://code.visualstudio.com 7,777 commits 31 branches 26 releases 133 contributors TypeScript 61.2% JavaScript 35.6% CSS 2.9% HTML 0.2% Shell 0.1% Groovy 0.0% TypeScript JavaScript CSS HTML Shell Groovy Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags aeschli/css-decorators-test aeschli/css-extension aeschli/external-injections alex/cursorHardHome andre/pickervariables aweinand/asyncsourcemaps ben/electron ben/tabsanimation cpp/customDebugViews dbaeumer/TS9125 dbaeumer/extensionLanguageCreation dbaeumer/localizationSupport dbaeumer/nls-package-json dbaeumer/nlsSupport dbaeumer/projectCompile dbaeumer/3849 dbaeumer/4613 dbaeumer/8509 joh/release/1.0.0 master noupdate release/1.2 release/1.3.0 sandy/workspace sandy081/editorCommands sandy081/errorlists standalone/0.1.1 tyriar/explorer_icons tyriar/launch_terminal_context_at tyriar/migrate-user-data-dir tyriar/run_selected_text_in_terminal Nothing to show 1.3.1 1.3.0 1.2.1 1.2.0 1.1.1 1.1.0 1.1.0-insider 1.0.0 0.10.15-insiders 0.10.14-insiders 0.10.13-insiders 0.10.12-insiders 0.10.11 0.10.11-insiders 0.10.10 0.10.10-insiders 0.10.9 0.10.8 0.10.8-insiders 0.10.7-insiders 0.10.6 0.10.5 0.10.3 0.10.2 0.10.1 0.10.1-extensionbuilders Nothing to show New pull request Latest commit 66f637a Jul 15, 2016 Tyriar Add note about Windows\sysnative in terminal settings … Part of #7095 Permalink Failed to load latest commit information. .vscode Revert ""revert changes to gulp files"" Jul 12, 2016 build Revert ""revert changes to gulp files"" Jul 12, 2016 extensions update node-debug Jul 15, 2016 i18n Import i18n files Jul 10, 2016 resources Add proper package replace metadata to deb control Jul 8, 2016 scripts back to ATOM_SHELL_INTERNAL_RUN_AS_NODE Jul 8, 2016 src Add note about Windows\sysnative in terminal settings Jul 15, 2016 test Revert recent wiki changes Apr 22, 2016 .editorconfig Add trim_trailing_whitespace to .editorconfig Apr 7, 2016 .eslintrc Revert ""revert changes to gulp files"" Jul 12, 2016 .gitignore Improve editor-distro gulp task May 31, 2016 .mention-bot update mention bot configuration Jul 11, 2016 .travis.yml travis: split compile & optimize Jun 16, 2016 CONTRIBUTING.md Fix typo Jul 15, 2016 LICENSE.txt Hello Code Nov 13, 2015 OSSREADME.json back to electron 0.37.6 Jul 8, 2016 README.md Replaced README image of product to reflect new UI Jul 6, 2016 ThirdPartyNotices.txt Clean extensions OSSREADME.json since the tool now can scan all npm-s… Jul 7, 2016 appveyor.yml back to ATOM_SHELL_INTERNAL_RUN_AS_NODE Jul 8, 2016 gulpfile.js Revert ""revert changes to gulp files"" Jul 12, 2016 issue_template.md Update issue_template.md Mar 14, 2016 npm-shrinkwrap.json fix version Jul 12, 2016 package.json fix 30% cpu spikes on OSX gulp watch Jul 12, 2016 product.json remove urls Jun 21, 2016 tslint.json Port noUnexternalizedStringsRule to TS 1.8.0. Add support to detect d… Feb 18, 2016 README.md Visual Studio Code - Open Source VS Code is a new type of tool that combines the simplicity of a code editor with what developers need for their core edit-build-debug cycle. Code provides comprehensive editing and debugging support, an extensibility model, and lightweight integration with existing tools. The vscode repository is where we do development and there are many ways you can participate in the project, for example: Submit bugs and feature requests and help us verify as they are checked in Review source code changes Review the documentation and make pull requests for anything from typos to new content Contributing If you are interested in fixing issues and contributing directly to the code base, please see the document How to Contribute, which covers the following: How to build and run from source The development workflow, including debugging and running tests Coding Guidelines Submitting pull requests This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Feedback Ask a question on Stack Overflow. Request a feature on User Voice. File a bug in GitHub Issues. Tweet us with other feedback. Related Projects Many of the core components and extensions to Code live in their own repositories on GitHub. For example, the node debug adapter and the mono debug adapter. For a complete list, please see the Related Projects page on our wiki. License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Microsoft/vscode"	"Multiplatform IDE."	"true"
"Standalone apps"	"alm - A next generation IDE just for TypeScript written in TypeScript + React"	"https://github.com/alm-tools/alm"	""	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"675"	"34"	"28"	"GitHub - alm-tools/alm: A next generation IDE just for TypeScript Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 34 Star 675 Fork 28 alm-tools/alm Code Issues 6 Pull requests 0 Pulse Graphs 🌹 A next generation IDE just for TypeScript ❤️ http://alm.tools/ 2,286 commits 1 branch 119 releases 1 contributor TypeScript 97.1% CSS 2.1% Other 0.8% TypeScript CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.1.23 v0.1.22 v0.1.21 v0.1.20 v0.1.19 v0.1.18 v0.1.17 v0.1.16 v0.1.15 v0.1.14 v0.1.13 v0.1.12 v0.1.11 v0.1.10 v0.1.9 v0.1.8 v0.1.7 v0.1.6 v0.1.5 v0.1.4 v0.1.3 v0.1.2 v0.1.1 v0.1.0 v0.0.95 v0.0.94 v0.0.93 v0.0.92 v0.0.91 v0.0.90 v0.0.89 v0.0.88 v0.0.87 v0.0.86 v0.0.85 v0.0.84 v0.0.83 v0.0.82 v0.0.81 v0.0.80 v0.0.79 v0.0.78 v0.0.77 v0.0.76 v0.0.75 v0.0.74 v0.0.73 v0.0.72 v0.0.71 v0.0.70 v0.0.69 v0.0.68 v0.0.67 v0.0.66 v0.0.65 v0.0.64 v0.0.63 v0.0.62 v0.0.61 v0.0.60 v0.0.59 v0.0.58 v0.0.57 v0.0.56 v0.0.55 v0.0.54 v0.0.53 v0.0.52 v0.0.51 v0.0.50 v0.0.49 v0.0.48 v0.0.47 v0.0.46 v0.0.45 v0.0.44 v0.0.43 v0.0.42 v0.0.41 v0.0.40 v0.0.39 v0.0.38 v0.0.37 v0.0.36 v0.0.35 v0.0.34 v0.0.33 v0.0.32 v0.0.31 v0.0.30 v0.0.29 v0.0.28 v0.0.27 v0.0.26 v0.0.25 v0.0.24 v0.0.23 v0.0.22 v0.0.21 v0.0.20 Nothing to show New pull request Latest commit b840c12 Jul 15, 2016 Basarat Ali Syed WIP open settings file Permalink Failed to load latest commit information. bin alm tools are a go Dec 22, 2015 docs 💄 apply style to html immediately Jul 10, 2016 resources favicon Mar 20, 2016 scripts Split the typescript worker into its own process (#56) Apr 8, 2016 src WIP open settings file Jul 15, 2016 tests Move to monaco (#121) Jun 22, 2016 .editorconfig New command : create editorconfig 🌹 Jul 8, 2016 .gitattributes bring in the good stuff Aug 20, 2015 .gitignore Move to monaco (#121) Jun 21, 2016 .npmignore fix(docs) exclude the docs folder but not any *file* that matches the… May 18, 2016 .travis.yml hopefully travis automatically uses npm v3 because of node upgrade Apr 20, 2016 CONTRIBUTING.md WIP FARM disable replace multi Jan 29, 2016 LICENSE MIT May 28, 2016 README.md snippets May 12, 2016 book.json May 8, 2016 cover.jpg cover Apr 13, 2016 nodemon.json ignore tests Oct 18, 2015 package.json good to have 🌹 Jul 15, 2016 README.md The best IDE for TypeScript With great languages come great development tools. Semantic releases start once 🌟 count > 1000. Don't forget to share 🌹 Why Checkout the website and if you need more reasons we have them. Requirements Chrome NodeJS v5 Usage Get it: npm install alm -g  Run it passing in the directory you want to serve up: alm .  Now open it in chrome at the URL mentioned in your console. (protip use alm -o if your default browser is chrome) Features We work hard 👷 on our 📝 so please jump to the book. But since its good to show a list so in no particular order and incomplete list: Super slick syntax highlighting just for TypeScript Tabs Panes Live file linting Project wide linting AST viewer Dependency viewer / analyzer Typescript Build Live incremental TypeScript compile Cursor History Clipboard ring Git Status gutter Git Status scroll bar Git reset file Find in project Find and replace in file (with regex support) Multi Cursor Rectangular selections Command Search TypeScript symbol search TypeScript project selector Live TypeScript ouput JavaScript preview Multi monitor Super friendly error panel with f8 error cycling Copy paste buttons when they make sense (so you don't need to select stuff) Type info / errors on hover TypeScript doctor so you don't need to hover Code folding Bracket and tag matching Matching bracking jumping TypeScript formatting editorconfig support HTML to TSX/JSX CSS to TS/JS File Tree On screen hints around current options (e.g. tree view) Snippets Add the feature you liked the most 🌹 And of course my favorite: Code blaster Contributing A key motivation for this project is to educate the community of about creating great TypeScript tools. So we would love to help you understand how the project works. Checkout the developer / contributor docs. License MIT Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/alm-tools/alm"	""	"true"
"Social"	"@typescriptlang"	"https://twitter.com/typescriptlang"	"Official Typescript Twitter"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"TypeScript (@typescriptlang) | Twitter Główna O nas Szukaj Szukaj na Twitterze Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Język: polski Bahasa Indonesia Bahasa Melayu Català Čeština Dansk Deutsch English English UK Español Filipino Français Hrvatski Italiano Magyar Nederlands Norsk Português Română Slovenčina Suomi Svenska Tiếng Việt Türkçe Ελληνικά Български език Русский Српски Українська мова עִבְרִית العربية فارسی मराठी हिन्दी বাংলা ગુજરાતી தமிழ் ಕನ್ನಡ ภาษาไทย 한국어 日本語 简体中文 繁體中文 Masz konto? Zaloguj się Masz konto? Zapamiętaj mnie · Nie pamiętasz hasła? Nowy na Twitterze? Zarejestruj się Korzystanie z usług Twittera oznacza, że wyrażasz zgodę na korzystanie przez nas z plików cookie i przesyłanie danych poza Unię Europejską. Firma Twitter i jej partnerzy działają globalnie i wykorzystują pliki cookie do analiz, personalizacji treści i wyświetlania reklam. Zamknij TypeScript @typescriptlang Tweety 166 Obserwowani 44 Obserwujący 20,4 tys. Polubienia 18   Więcej Polubienia Wyłącz wyciszenie @typescriptlang Wycisz @typescriptlang Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj TypeScript @typescriptlang TypeScript is a language for application-scale JavaScript development. It's a typed superset of JavaScript that compiles to plain JavaScript. Redmond, WA typescriptlang.org Dołączył wrzesień 2012 5 zdjęć lub filmów Zdjęcia i filmy Tweety Tweety Tweety i odpowiedzi Multimedia @typescriptlang jest zablokowany Czy na pewno chcesz zobaczyć te tweety? Zobaczenie tweetów nie odblokuje @typescriptlang. Pokaż Tweety Zamknij TypeScript obserwuje TypeScript ‏ @typescriptlang 11.07 Announcing TypeScript 2.0 Beta! Try it out today, and read more on our blog! https://blogs.msdn.microsoft.com/typescript/2016/07/11/announcing-typescript-2-0-beta … 401 podanych dalej 360 polubionych Odpowiedz Podaj dalej 401 Podane dalej 401 Polub 360 Polubione 360 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript ‏ @typescriptlang 15.06 .d.ts files should be simple to manage - check out our plans to make that happen in TypeScript 2.0! https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/ … 170 podanych dalej 185 polubionych Odpowiedz Podaj dalej 170 Podane dalej 170 Polub 185 Polubione 185 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript ‏ @typescriptlang 10.05 We're trying to make starting up new TypeScript projects even easier. Take a look at our newly published tutorials! https://blogs.msdn.microsoft.com/typescript/2016/05/10/making-new-typescript-projects-a-breeze … 89 podanych dalej 127 polubionych Odpowiedz Podaj dalej 89 Podane dalej 89 Polub 127 Polubione 127 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript ‏ @typescriptlang 14.04 Congrats VS @Code team for shipping 1.0. It’s been amazing to be a part of your journey & collaborating with y’all-http://code.visualstudio.com/blogs/2016/04/14/vscode-1.0 … 48 podanych dalej 70 polubionych Odpowiedz Podaj dalej 48 Podane dalej 48 Polub 70 Polubione 70 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript ‏ @typescriptlang 12.04 #TypeScript v1.8.10 now available with fixes for @reactjs 15!https://github.com/Microsoft/TypeScript/releases/tag/v1.8.10 … 97 podanych dalej 74 polubione Odpowiedz Podaj dalej 97 Podane dalej 97 Polub 74 Polubione 74 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript podał/a dalej Jordan Matthiesen ‏ @JMatthiesen 6.04 If you use @TypeScriptlang and @angularjs 2, we in the @VisualStudio team want to hear about your experience! http://hubs.ly/H02C1Yn0  23 podane dalej 34 polubione Odpowiedz Podaj dalej 23 Podane dalej 23 Polub 34 Polubione 34 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript ‏ @typescriptlang 24.03 TypeScript website just got a refresh - http://www.typescriptlang.org/ . Lots of doc updates! Faster iteration going ahead- https://blogs.msdn.microsoft.com/typescript/2016/03/24/new-typescript-website/ … 194 podane dalej 195 polubionych Odpowiedz Podaj dalej 194 Podane dalej 194 Polub 195 Polubione 195 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript ‏ @typescriptlang 15.03 Our 10,000th GitHub Star! Thank you to everyone who's helped us along the way. When will the 20,000th star happen?pic.twitter.com/R5Z6xIipQE 39 podanych dalej 74 polubione Odpowiedz Podaj dalej 39 Podane dalej 39 Polub 74 Polubione 74 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript ‏ @typescriptlang 8.03 How do you prefer to represent 'missing' or 'nothing' values in your programs? 35 podanych dalej 14 polubionych Odpowiedz Podaj dalej 35 Podane dalej 35 Polub 14 Polubione 14 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript ‏ @typescriptlang 22.02 See the (long!) list of new goodness in 1.8 at our What's New page:https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#typescript-18 … 78 podanych dalej 50 polubionych Odpowiedz Podaj dalej 78 Podane dalej 78 Polub 50 Polubione 50 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript ‏ @typescriptlang 22.02 TypeScript 1.8: String literal types, captured 'let' support, improved React types, JS compilation, and much more! https://blogs.msdn.microsoft.com/typescript/2016/02/22/announcing-typescript-1-8-2/ … 140 podanych dalej 89 polubionych Odpowiedz Podaj dalej 140 Podane dalej 140 Polub 89 Polubione 89 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript ‏ @typescriptlang 28.01 Announcing TypeScript 1.8 Beta! http://blogs.msdn.com/b/typescript/archive/2016/01/28/announcing-typescript-1-8-beta.aspx … see alsohttps://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript … 149 podanych dalej 86 polubionych Odpowiedz Podaj dalej 149 Podane dalej 149 Polub 86 Polubione 86 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript ‏ @typescriptlang 15.12.2015 Congratulations to the @angularjs team on reaching their next milestone! Angular 2 Beta now available http://angularjs.blogspot.com/2015/12/angular-2-beta.html?m=1 … 82 podane dalej 66 polubionych Odpowiedz Podaj dalej 82 Podane dalej 82 Polub 66 Polubione 66 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript ‏ @typescriptlang 30.11.2015 Announcing TypeScript 1.7 - http://blogs.msdn.com/b/typescript/archive/2015/11/30/announcing-typescript-1-7.aspx …. Try it out & send us your feedback. 131 podanych dalej 64 polubione Odpowiedz Podaj dalej 131 Podane dalej 131 Polub 64 Polubione 64 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript obserwuje Jonathan Turner, λ Calrissian i Microsoft Edge Dev Wyłącz wyciszenie @jntrnr Wycisz @jntrnr Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Jonathan Turner @jntrnr Currently: Engineer at Mozilla working on @rustlang Previously: PM on @typescriptlang team at Microsoft and contributor to Clang/LLVM at Apple. Wyłącz wyciszenie @mattpodwysocki Wycisz @mattpodwysocki Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj λ Calrissian @mattpodwysocki An Open Sourcerer at Microsoft. Author of RxJS/ @ReactiveX, contributor to @ThaliProject and @ReactWindows TypeScript podał/a dalej Seth Reid ‏ @sethreidnz 13.11.2015 Mmm that delicious @typescriptlang in my @nodejs got me feeling all sorts of good! 6 podanych dalej 7 polubionych Odpowiedz Podaj dalej 6 Podane dalej 6 Polub 7 Polubione 7 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript ‏ @typescriptlang 4.11.2015 What about async/await in TypeScript - http://blogs.msdn.com/b/typescript/archive/2015/11/03/what-about-async-await.aspx …. Try it out & send us your feedback. 68 podanych dalej 57 polubionych Odpowiedz Podaj dalej 68 Podane dalej 68 Polub 57 Polubione 57 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript podał/a dalej QCon San Francisco ‏ @QConSF 29.09.2015 Take a guided tour to @typescriptlang & learn how simplifies application-scale JavaScript development. http://bit.ly/1h35ypJ  #qconsf 7 podanych dalej 11 polubionych Odpowiedz Podaj dalej 7 Podane dalej 7 Polub 11 Polubione 11 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript podał/a dalej naomi b. ‏ @naomitraveller 18.10.2015 Want a cheat sheet for Angular 2 TypeScript Syntax? Here you go! https://angular.io/cheatsheet pic.twitter.com/axrCYzHDFQ 295 podanych dalej 316 polubionych Odpowiedz Podaj dalej 295 Podane dalej 295 Polub 316 Polubione 316 Więcej Kopiuj link do tweeta Zamieść tweeta TypeScript podał/a dalej Ben Lesh ‏ @BenLesh 15.10.2015 . @typescriptlang has some work done on adding ES7 function bind `::`! This is great news for #RxJS in TypeScripthttps://github.com/Microsoft/TypeScript/compare/bindOperator … 27 podanych dalej 26 polubionych Odpowiedz Podaj dalej 27 Podane dalej 27 Polub 26 Polubione 26 Więcej Kopiuj link do tweeta Zamieść tweeta @typescriptlang nie ma jeszcze wpisów. Do góry ↑ Wydaje się, że ładowanie zajmuje dużo czasu. Twitter może być przeciążony lub mieć chwilowy problem. Spróbuj ponownie lub sprawdź Status Twittera, aby uzyskać więcej informacji. Nowy na Twitterze? Zarejestruj się, a otrzymasz spersonalizowaną oś czasu! Zarejestruj się Może Ci się też spodobać · Odśwież Redmond, WA © 2016 Twitter O nas Pomoc Zasady Prywatność Cookies (ciasteczka) Informacje o reklamach Zamknij Wybierz lokalizację trendu Odrzuć Zamknij Poprzedni Dalej Zamknij Przejdź do profilu osoby Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Zamknij Podać dalej do Twoich obserwujących? Opcjonalny komentarz przy podawaniu Tweeta dalej     Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ 140 Podaj dalej Tweetnij Zamknij Czy na pewno chcesz usunąć tego tweeta? Anuluj Usuń Zamknij Promuj ten tweet Zamknij Zablokuj Anuluj Zablokuj Dodaj Lokalizację do Twoich wpisów Gdy tweetniesz z lokalizacją, Twitter ją zachowa. Możesz włączyć/wyłączyć dodawanie położenia przed wysłaniem każdego tweeta i zawsze masz możliwość usunięcia swojej historii lokalizacji. Dowiedz się więcej Włącz usługę lokalizacji Nie teraz Zamknij Podsumowanie profilu Zamknij Twoje listy Zamknij Utwórz nową listę Nazwa listy Opis Opcjonalne, poniżej 100 znaków Prywatność Publiczny · Każdy może obserwować tą listę Prywatne · Tylko Ty masz dostęp do tej listy Zapisz listę Zamknij Twoja odpowiedź obejmuje osoby w tej rozmowie aż do tego momentu. Dowiedz się więcej Zamknij Kopiuj link do tweeta Poniżej jest adres URL tego tweeta. Skopiuj go, żeby łatwo się nim podzielić ze znajomymi. Zamknij Umieszczanie tweeta Embed this Video Umieść ten tweet na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Umieść ten film na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Hmm, wystąpił problem z połączeniem z serwerem. Spróbować ponownie? Dołącz pierwszy tweet Dołącz multimedia Podgląd Zamknij Zaloguj się do Twittera Zapamiętaj mnie · Nie pamiętasz hasła? Nie masz konta? Zarejestruj się » Zamknij Zarejestruj się na Twitterze Nie ma Cię na Twitterze? Załóż profil, połącz go do interesujących Cię tematów – i otrzymuj aktualności gdy tylko się wydarzą! Zarejestruj się Masz konto? Zaloguj się » Zamknij Wysyłanie i odbieranie krótkich kodów: Kraj Kod Dla klientów Stany Zjednoczone 40404 (dowolny) Kanada 21212 (dowolny) Wielka Brytania 86444 Vodafone, Orange, 3, O2 Brazylia 40404 Nextel, TIM Haiti 40404 Digicel, Voila Irlandia 51210 Vodafone, O2 Indie 53000 Bharti Airtel, Videocon, Reliance Indonezja 89887 AXIS, 3, Telkomsel, Indosat, XL Axiata Włochy 4880804 Wind 3424486444 Vodafone » Zobacz krótkie kody SMS dla innych państw Zamknij Potwierdzenie Zamknij   Zamknij Zamknij Kup teraz Hmm... Coś poszło nie tak. Spróbuj jeszcze raz. Następny Tweet użytkownika"	"null"	"null"	"Official Typescript Twitter"	"true"
"Social"	"@angularjs"	"https://twitter.com/angularjs"	"Official Angularjs Twitter using Typescript Since 2.0"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Angular (@angularjs) | Twitter Główna O nas Szukaj Szukaj na Twitterze Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Język: polski Bahasa Indonesia Bahasa Melayu Català Čeština Dansk Deutsch English English UK Español Filipino Français Hrvatski Italiano Magyar Nederlands Norsk Português Română Slovenčina Suomi Svenska Tiếng Việt Türkçe Ελληνικά Български език Русский Српски Українська мова עִבְרִית العربية فارسی मराठी हिन्दी বাংলা ગુજરાતી தமிழ் ಕನ್ನಡ ภาษาไทย 한국어 日本語 简体中文 繁體中文 Masz konto? Zaloguj się Masz konto? Zapamiętaj mnie · Nie pamiętasz hasła? Nowy na Twitterze? Zarejestruj się Korzystanie z usług Twittera oznacza, że wyrażasz zgodę na korzystanie przez nas z plików cookie i przesyłanie danych poza Unię Europejską. Firma Twitter i jej partnerzy działają globalnie i wykorzystują pliki cookie do analiz, personalizacji treści i wyświetlania reklam. Zamknij Angular @angularjs Tweety 2 480 Obserwowani 115 Obserwujący 157 tys. Polubienia 1 566   Więcej Polubienia Wyłącz wyciszenie @angularjs Wycisz @angularjs Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Angular @angularjs Bringing “simple” back to the development of complex webapps... angularjs.org Dołączył październik 2010 68 zdjęć lub filmów Zdjęcia i filmy Tweety Tweety Tweety i odpowiedzi Multimedia @angularjs jest zablokowany Czy na pewno chcesz zobaczyć te tweety? Zobaczenie tweetów nie odblokuje @angularjs. Pokaż Tweety Zamknij Angular obserwuje Przypięty tweet Angular ‏ @angularjs 19.05 Watch ""Angular 2 and Progressive Web Apps"" for blazing fast mobile web (and desktop!) apps:https://www.youtube.com/watch?v=vAb-2d1vcg8&feature=youtu.be … 197 podanych dalej 318 polubionych Odpowiedz Podaj dalej 197 Podane dalej 197 Polub 318 Polubione 318 Więcej Kopiuj link do tweeta Zamieść tweeta Angular ‏ @angularjs 12.07 One Global Community: Angular docs & site localized for China. http://goo.gl/0jXEXb pic.twitter.com/k4nfORVAMG 27 podanych dalej 77 polubionych Odpowiedz Podaj dalej 27 Podane dalej 27 Polub 77 Polubione 77 Więcej Kopiuj link do tweeta Zamieść tweeta Angular podał/a dalej Lukas Ruebbelke ‏ @simpulton 6.07 Angular 2 with Handcrafted Tools, Century-Old Techniques andES5http://onehungrymind.com/build-angular-2-app-es5/ … #notTHATbadpic.twitter.com/wup33tduI6 25 podanych dalej 61 polubionych Odpowiedz Podaj dalej 25 Podane dalej 25 Polub 61 Polubione 61 Więcej Kopiuj link do tweeta Zamieść tweeta Angular podał/a dalej TypeScript ‏ @typescriptlang 11.07 Announcing TypeScript 2.0 Beta! Try it out today, and read more on our blog! https://blogs.msdn.microsoft.com/typescript/2016/07/11/announcing-typescript-2-0-beta … 401 podanych dalej 360 polubionych Odpowiedz Podaj dalej 401 Podane dalej 401 Polub 360 Polubione 360 Więcej Kopiuj link do tweeta Zamieść tweeta Angular podał/a dalej Pawel Kozlowski ‏ @pkozlowski_os 8.07 Bootstrap widgets for @angularjs 2 just got released: https://ng-bootstrap.github.io  ! Brought to you by the angular-ui team. 80 podanych dalej 99 polubionych Odpowiedz Podaj dalej 80 Podane dalej 80 Polub 99 Polubione 99 Więcej Kopiuj link do tweeta Zamieść tweeta Angular podał/a dalej Todd Motto ‏ @toddmotto 7.07 Bristol, England Meet ngMigrate, the Angular 2 migration guide. First 3 guides are now available right here: http://ngmigrate.telerik.com pic.twitter.com/Abp0OpL96c 177 podanych dalej 284 polubione Odpowiedz Podaj dalej 177 Podane dalej 177 Polub 284 Polubione 284 Więcej Kopiuj link do tweeta Zamieść tweeta Angular podał/a dalej Todd Motto ‏ @toddmotto 18.04 My Angular fundamentals course is live! :D <3 Architecture, components, ui-router, all latest and best practices: https://courses.toddmotto.com/products/ultimate-angularjs-starter … 85 podanych dalej 248 polubionych Odpowiedz Podaj dalej 85 Podane dalej 85 Polub 248 Polubione 248 Więcej Kopiuj link do tweeta Zamieść tweeta Angular ‏ @angularjs 30.06 Angular 2 RC4 is out! Loads of fixes and API improvements moving us closer to final https://github.com/angular/angular/blob/master/CHANGELOG.md#200-rc4-2016-06-30 …pic.twitter.com/rB4xByumZw 460 podanych dalej 425 polubionych Odpowiedz Podaj dalej 460 Podane dalej 460 Polub 425 Polubione 425 Więcej Kopiuj link do tweeta Zamieść tweeta Angular podał/a dalej Code School ‏ @codeschool 29.06 Start creating the future of web apps with our new Accelerating Through Angular 2 course! https://www.codeschool.com/courses/accelerating-through-angular-2 …pic.twitter.com/Ou5jWRXte2 Accelerating Through Angular 2 Intro Get a feel for our Accelerating Through Angular 2 course and see what you’ll learn when you take Angular 2 for a test drive. 58 podanych dalej 111 polubionych Odpowiedz Podaj dalej 58 Podane dalej 58 Polub 111 Polubione 111 Więcej Kopiuj link do tweeta Zamieść tweeta Umieść film Angular podał/a dalej Reactive Conference ‏ @ReactiveConf 27.06 #AngularJS dev @IgorMinar will speak at #ReactiveConf too & A's fans can get a 10% discount: https://ti.to/reactive/reactiveconf-2016?discount_code=angular2967 …pic.twitter.com/DqwyiljG6n 17 podanych dalej 17 polubionych Odpowiedz Podaj dalej 17 Podane dalej 17 Polub 17 Polubione 17 Więcej Kopiuj link do tweeta Zamieść tweeta Angular ‏ @angularjs 24.06 Angular ​*1.5.7*​ and ​*1.4.12*​ are released! Check them out at https://github.com/angular/angular.js/blob/master/CHANGELOG.md#157-hexagonal-circumvolution-2016-06-15 …pic.twitter.com/s5o9WMLRfI 79 podanych dalej 54 polubione Odpowiedz Podaj dalej 79 Podane dalej 79 Polub 54 Polubione 54 Więcej Kopiuj link do tweeta Zamieść tweeta Angular ‏ @angularjs 23.06 Write safer apps thanks to @martin_probst & angular author @_clarkio! New Security Guide: https://angular.io/docs/ts/latest/guide/security.html …pic.twitter.com/bXl9GOd86J 135 podanych dalej 171 polubionych Odpowiedz Podaj dalej 135 Podane dalej 135 Polub 171 Polubione 171 Więcej Kopiuj link do tweeta Zamieść tweeta Angular ‏ @angularjs 23.06 Many thanks to angular author @helgevold for the Guide and Cookbook for new Dynamic Forms! https://angular.io/docs/ts/latest/guide/forms.html …pic.twitter.com/JbJVekde8y 97 podanych dalej 155 polubionych Odpowiedz Podaj dalej 97 Podane dalej 97 Polub 155 Polubione 155 Więcej Kopiuj link do tweeta Zamieść tweeta Angular podał/a dalej Onsen UI ‏ @Onsen_UI 22.06 We kicked off Onsen UI for Angular 2! Ready to create astonishing @angularjs hybrid apps? https://onsen.io/angular2 pic.twitter.com/1gyPvh9DFL 72 podane dalej 108 polubionych Odpowiedz Podaj dalej 72 Podane dalej 72 Polub 108 Polubione 108 Więcej Kopiuj link do tweeta Zamieść tweeta Angular ‏ @angularjs 22.06 Can it be? Yes, it's RC3! Fixes RC2 performance, better docs for Security, Router, Forms. http://angularjs.blogspot.com/2016/06/rc3-now-available.html …pic.twitter.com/FHhwBKTGTy 397 podanych dalej 322 polubione Odpowiedz Podaj dalej 397 Podane dalej 397 Polub 322 Polubione 322 Więcej Kopiuj link do tweeta Zamieść tweeta Angular ‏ @angularjs 20.06 Team meeting notes: Goals for RC3, RC4 and Angular 2 final. https://docs.google.com/document/d/150lerb1LmNLuau_a_EznPV1I1UHMTbEl61t4hZ7ZpS0/edit# …pic.twitter.com/nAk7t29OAl 172 podane dalej 171 polubionych Odpowiedz Podaj dalej 172 Podane dalej 172 Polub 171 Polubione 171 Więcej Kopiuj link do tweeta Zamieść tweeta Angular podał/a dalej Made With Angular ‏ @madewithangular 18.06 Health & fitness site @Greatist has healthy recipes & workout tips, and is made w @AngularJS http://buff.ly/1PmOwy8 pic.twitter.com/uEfHTlBcFX 10 podanych dalej 8 polubionych Odpowiedz Podaj dalej 10 Podane dalej 10 Polub 8 Polubione 8 Więcej Kopiuj link do tweeta Zamieść tweeta Angular podał/a dalej Brad Green ‏ @bradlygreen 19.06 “Building Simon with Angular2-IoT Part 2” by Uri Shakedhttps://medium.com/@urish/building-simon-with-angular2-iot-part-2-ee3a270747b5#.rubq2dyr2 … 33 podane dalej 65 polubionych Odpowiedz Podaj dalej 33 Podane dalej 33 Polub 65 Polubione 65 Więcej Kopiuj link do tweeta Zamieść tweeta Angular obserwuje Qiang 付 i Brandon Wyłącz wyciszenie @Qiang623551864 Wycisz @Qiang623551864 Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Qiang 付 @Qiang623551864 a female programmer in future~^_^~ Wyłącz wyciszenie @brandontroberts Wycisz @brandontroberts Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Brandon @brandontroberts Gadgets, software and sports Angular ‏ @angularjs 17.06 It's a new Dev Guide for the (alpha) Component Router, thanks to #angular author @bdogg64! https://angular.io/docs/ts/latest/guide/router.html …pic.twitter.com/7sPxNULWzP 169 podanych dalej 226 polubionych Odpowiedz Podaj dalej 169 Podane dalej 169 Polub 226 Polubione 226 Więcej Kopiuj link do tweeta Zamieść tweeta Angular podał/a dalej Jeff Cross ️ ‏ @jeffbcross 16.06 . @_davideast and I FINALLY pushed AngularFire2 beta.1 with @Firebase 3 support! https://www.npmjs.com/package/angularfire2 … changelog: https://github.com/angular/angularfire2/blob/master/CHANGELOG.md … 56 podanych dalej 88 polubionych Odpowiedz Podaj dalej 56 Podane dalej 56 Polub 88 Polubione 88 Więcej Kopiuj link do tweeta Zamieść tweeta @angularjs nie ma jeszcze wpisów. Do góry ↑ Wydaje się, że ładowanie zajmuje dużo czasu. Twitter może być przeciążony lub mieć chwilowy problem. Spróbuj ponownie lub sprawdź Status Twittera, aby uzyskać więcej informacji. Nowy na Twitterze? Zarejestruj się, a otrzymasz spersonalizowaną oś czasu! Zarejestruj się Może Ci się też spodobać · Odśwież © 2016 Twitter O nas Pomoc Zasady Prywatność Cookies (ciasteczka) Informacje o reklamach Zamknij Wybierz lokalizację trendu Odrzuć Zamknij Poprzedni Dalej Zamknij Przejdź do profilu osoby Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Zamknij Podać dalej do Twoich obserwujących? Opcjonalny komentarz przy podawaniu Tweeta dalej     Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ 140 Podaj dalej Tweetnij Zamknij Czy na pewno chcesz usunąć tego tweeta? Anuluj Usuń Zamknij Promuj ten tweet Zamknij Zablokuj Anuluj Zablokuj Dodaj Lokalizację do Twoich wpisów Gdy tweetniesz z lokalizacją, Twitter ją zachowa. Możesz włączyć/wyłączyć dodawanie położenia przed wysłaniem każdego tweeta i zawsze masz możliwość usunięcia swojej historii lokalizacji. Dowiedz się więcej Włącz usługę lokalizacji Nie teraz Zamknij Podsumowanie profilu Zamknij Twoje listy Zamknij Utwórz nową listę Nazwa listy Opis Opcjonalne, poniżej 100 znaków Prywatność Publiczny · Każdy może obserwować tą listę Prywatne · Tylko Ty masz dostęp do tej listy Zapisz listę Zamknij Twoja odpowiedź obejmuje osoby w tej rozmowie aż do tego momentu. Dowiedz się więcej Zamknij Kopiuj link do tweeta Poniżej jest adres URL tego tweeta. Skopiuj go, żeby łatwo się nim podzielić ze znajomymi. Zamknij Umieszczanie tweeta Embed this Video Umieść ten tweet na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Umieść ten film na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Hmm, wystąpił problem z połączeniem z serwerem. Spróbować ponownie? Dołącz pierwszy tweet Dołącz multimedia Podgląd Zamknij Zaloguj się do Twittera Zapamiętaj mnie · Nie pamiętasz hasła? Nie masz konta? Zarejestruj się » Zamknij Zarejestruj się na Twitterze Nie ma Cię na Twitterze? Załóż profil, połącz go do interesujących Cię tematów – i otrzymuj aktualności gdy tylko się wydarzą! Zarejestruj się Masz konto? Zaloguj się » Zamknij Wysyłanie i odbieranie krótkich kodów: Kraj Kod Dla klientów Stany Zjednoczone 40404 (dowolny) Kanada 21212 (dowolny) Wielka Brytania 86444 Vodafone, Orange, 3, O2 Brazylia 40404 Nextel, TIM Haiti 40404 Digicel, Voila Irlandia 51210 Vodafone, O2 Indie 53000 Bharti Airtel, Videocon, Reliance Indonezja 89887 AXIS, 3, Telkomsel, Indosat, XL Axiata Włochy 4880804 Wind 3424486444 Vodafone » Zobacz krótkie kody SMS dla innych państw Zamknij Potwierdzenie Zamknij   Zamknij Zamknij Kup teraz Hmm... Coś poszło nie tak. Spróbuj jeszcze raz. Następny Tweet użytkownika"	"null"	"null"	"Official Angularjs Twitter using Typescript Since 2.0"	"true"
"Social"	"@jntrnr"	"https://twitter.com/jntrnr"	"Typescript Program Manager at Microsoft"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Jonathan Turner (@jntrnr) | Twitter Główna O nas Szukaj Szukaj na Twitterze Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Język: polski Bahasa Indonesia Bahasa Melayu Català Čeština Dansk Deutsch English English UK Español Filipino Français Hrvatski Italiano Magyar Nederlands Norsk Português Română Slovenčina Suomi Svenska Tiếng Việt Türkçe Ελληνικά Български език Русский Српски Українська мова עִבְרִית العربية فارسی मराठी हिन्दी বাংলা ગુજરાતી தமிழ் ಕನ್ನಡ ภาษาไทย 한국어 日本語 简体中文 繁體中文 Masz konto? Zaloguj się Masz konto? Zapamiętaj mnie · Nie pamiętasz hasła? Nowy na Twitterze? Zarejestruj się Korzystanie z usług Twittera oznacza, że wyrażasz zgodę na korzystanie przez nas z plików cookie i przesyłanie danych poza Unię Europejską. Firma Twitter i jej partnerzy działają globalnie i wykorzystują pliki cookie do analiz, personalizacji treści i wyświetlania reklam. Zamknij Jonathan Turner @jntrnr Tweety 1 764 Obserwowani 78 Obserwujący 1 436 Polubienia 368   Więcej Polubienia Wyłącz wyciszenie @jntrnr Wycisz @jntrnr Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Jonathan Turner @jntrnr Currently: Engineer at Mozilla working on @rustlang Previously: PM on @typescriptlang team at Microsoft and contributor to Clang/LLVM at Apple. Boston, MA jonathanturner.org Dołączył marzec 2009 26 zdjęć lub filmów Zdjęcia i filmy Tweety Tweety Tweety i odpowiedzi Multimedia @jntrnr jest zablokowany Czy na pewno chcesz zobaczyć te tweety? Zobaczenie tweetów nie odblokuje @jntrnr. Pokaż Tweety Zamknij Jonathan Turner obserwuje Przypięty tweet Jonathan Turner ‏ @jntrnr 5.07 My current mantrapic.twitter.com/tQysuSZ70R 2 podane dalej 5 polubionych Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 5 Polubione 5 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner podał/a dalej David Smith ‏ @Catfish_Man 13 godz.13 godzin temu Upper Market, San Francisco Want to be a 1000x developer? Work on a library with 100k users and improve it so they write 1% fewer bugs on average. 25 podanych dalej 93 polubione Odpowiedz Podaj dalej 25 Podane dalej 25 Polub 93 Polubione 93 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner podał/a dalej John Carmack ‏ @ID_AA_Carmack 23 godz.23 godziny temu Sometimes duplicating things, either code or data, can significantly simplifies a system. DRY isn't absolute. 684 podane dalej 990 polubionych Odpowiedz Podaj dalej 684 Podane dalej 684 Polub 990 Polubione 990 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner podał/a dalej Ryan Cavanaugh ‏ @SeaRyanC 14.07 Are you using a TypeScript -> babel chain to do downlevel async/await? We'd like to see your repo to do some analysis - tweet me a link! 3 podane dalej 1 polubiony Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 1 Polubione 1 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner podał/a dalej Rust Language ‏ @rustlang 12.07 Shipping Rust in Firefox: https://mzl.la/29Lyvca  154 podane dalej 117 polubionych Odpowiedz Podaj dalej 154 Podane dalej 154 Polub 117 Polubione 117 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner podał/a dalej Jason Turner ‏ @lefticus 10.07 New project: x86-to-6502 re-assembler https://github.com/lefticus/x86-to-6502 … #mos6502 #commodore64 #TheRetroProgrammer videos coming this week 4 podane dalej 3 polubione Odpowiedz Podaj dalej 4 Podane dalej 4 Polub 3 Polubione 3 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner ‏ @jntrnr 8.07 Check out how @coursera uses @rustlang for efficient, secure grading of student assignments https://building.coursera.org/blog/2016/07/07/rust-docker-in-production-coursera/ … 19 podanych dalej 33 polubione Odpowiedz Podaj dalej 19 Podane dalej 19 Polub 33 Polubione 33 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner ‏ @jntrnr 8.07 How I feel this morningpic.twitter.com/5yWLhXFxsY 0 podanych dalej 0 polubionych Odpowiedz Podaj dalej Podane dalej Polub Polubione Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner podał/a dalej naomi b. ‏ @naomitraveller 8.07 naomi b. podał/a dalej Broderick Greer This. #BlackLivesMatter.https://twitter.com/BroderickGreer/status/624068665609224192 … naomi b. dodał/a, Broderick Greer @BroderickGreer Repeat after me: I am committed to the social, political, and economic liberation of black people. 2 podane dalej 1 polubiony Odpowiedz Podaj dalej 2 Podane dalej 2 Polub 1 Polubione 1 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner podał/a dalej Brennan Saeta ‏ @bsaeta 7.07 Statically linking @rustlang binaries for use in untrusted @docker containers: http://betacs.pro/blog/2016/07/07/docker-and-rust/ … 10 podanych dalej 10 polubionych Odpowiedz Podaj dalej 10 Podane dalej 10 Polub 10 Polubione 10 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner ‏ @jntrnr 7.07 Today's coding music: Megadeth's classic "" @Rustlang in Peace"" 0 podanych dalej 7 polubionych Odpowiedz Podaj dalej Podane dalej Polub 7 Polubione 7 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner podał/a dalej Rust Language ‏ @rustlang 30.06 Thanks to everyone who replied to the community survey! We have some results and thoughts to share: http://blog.rust-lang.org/2016/06/30/State-of-Rust-Survey-2016.html … 49 podanych dalej 48 polubionych Odpowiedz Podaj dalej 49 Podane dalej 49 Polub 48 Polubione 48 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner podał/a dalej Rust Language ‏ @rustlang 29.06 Check out @Dropbox's new blog post on compression, and why they used #rustlang: https://blogs.dropbox.com/tech/2016/06/lossless-compression-with-brotli/ … 77 podanych dalej 87 polubionych Odpowiedz Podaj dalej 77 Podane dalej 77 Polub 87 Polubione 87 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner ‏ @jntrnr 24.06 I misread ""reactive programming"" as ""redactive programming"" and accidentally discovered a new paradigm. 3 podane dalej 5 polubionych Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 5 Polubione 5 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner podał/a dalej Rob Pike ‏ @rob_pike 22.06 What I should have said: The more you know about the fundamentals of computing the more you will benefit. Learning should never stop. 470 podanych dalej 854 polubione Odpowiedz Podaj dalej 470 Podane dalej 470 Polub 854 Polubione 854 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner ‏ @jntrnr 20.06 Finished Spelunky (from Boss Fight Books) by Derek Yu on the plane yesterday. Excellent read -https://www.amazon.com/Spelunky-Boss-Fight-Books-Book-ebook/dp/B01CYVHYSS … 0 podanych dalej 0 polubionych Odpowiedz Podaj dalej Podane dalej Polub Polubione Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner podał/a dalej Ryan Cavanaugh ‏ @SeaRyanC 15.06 “for the most part, it’s as if this is coming from people who have never tried a bicycle themselves” https://medium.com/@zeh/typescript-is-a-bicycle-62e9e34d7ad#.od63qhqn2 … 3 podane dalej 2 polubione Odpowiedz Podaj dalej 3 Podane dalej 3 Polub 2 Polubione 2 Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner ‏ @jntrnr 12.06 Woke up to hear the news of the worst single-shooter mass shooting in the US. Sickening.http://www.bbc.com/news/world-us-canada-36512308 … 0 podanych dalej 0 polubionych Odpowiedz Podaj dalej Podane dalej Polub Polubione Więcej Kopiuj link do tweeta Zamieść tweeta Jonathan Turner podał/a dalej Intel Open Source ‏ @intelopensource 8.06 Proud sponsor of the 1st @rustconf in Portland, OR. We're thrilled to be a part of @rustlang's welcoming community http://rustconf.com/  25 podanych dalej 46 polubionych Odpowiedz Podaj dalej 25 Podane dalej 25 Polub 46 Polubione 46 Więcej Kopiuj link do tweeta Zamieść tweeta @jntrnr nie ma jeszcze wpisów. Do góry ↑ Wydaje się, że ładowanie zajmuje dużo czasu. Twitter może być przeciążony lub mieć chwilowy problem. Spróbuj ponownie lub sprawdź Status Twittera, aby uzyskać więcej informacji. Nowy na Twitterze? Zarejestruj się, a otrzymasz spersonalizowaną oś czasu! Zarejestruj się Może Ci się też spodobać · Odśwież Boston, MA © 2016 Twitter O nas Pomoc Zasady Prywatność Cookies (ciasteczka) Informacje o reklamach Zamknij Wybierz lokalizację trendu Odrzuć Zamknij Poprzedni Dalej Zamknij Przejdź do profilu osoby Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Zamknij Podać dalej do Twoich obserwujących? Opcjonalny komentarz przy podawaniu Tweeta dalej     Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ 140 Podaj dalej Tweetnij Zamknij Czy na pewno chcesz usunąć tego tweeta? Anuluj Usuń Zamknij Promuj ten tweet Zamknij Zablokuj Anuluj Zablokuj Dodaj Lokalizację do Twoich wpisów Gdy tweetniesz z lokalizacją, Twitter ją zachowa. Możesz włączyć/wyłączyć dodawanie położenia przed wysłaniem każdego tweeta i zawsze masz możliwość usunięcia swojej historii lokalizacji. Dowiedz się więcej Włącz usługę lokalizacji Nie teraz Zamknij Podsumowanie profilu Zamknij Twoje listy Zamknij Utwórz nową listę Nazwa listy Opis Opcjonalne, poniżej 100 znaków Prywatność Publiczny · Każdy może obserwować tą listę Prywatne · Tylko Ty masz dostęp do tej listy Zapisz listę Zamknij Twoja odpowiedź obejmuje osoby w tej rozmowie aż do tego momentu. Dowiedz się więcej Zamknij Kopiuj link do tweeta Poniżej jest adres URL tego tweeta. Skopiuj go, żeby łatwo się nim podzielić ze znajomymi. Zamknij Umieszczanie tweeta Embed this Video Umieść ten tweet na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Umieść ten film na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Hmm, wystąpił problem z połączeniem z serwerem. Spróbować ponownie? Dołącz pierwszy tweet Dołącz multimedia Podgląd Zamknij Zaloguj się do Twittera Zapamiętaj mnie · Nie pamiętasz hasła? Nie masz konta? Zarejestruj się » Zamknij Zarejestruj się na Twitterze Nie ma Cię na Twitterze? Załóż profil, połącz go do interesujących Cię tematów – i otrzymuj aktualności gdy tylko się wydarzą! Zarejestruj się Masz konto? Zaloguj się » Zamknij Wysyłanie i odbieranie krótkich kodów: Kraj Kod Dla klientów Stany Zjednoczone 40404 (dowolny) Kanada 21212 (dowolny) Wielka Brytania 86444 Vodafone, Orange, 3, O2 Brazylia 40404 Nextel, TIM Haiti 40404 Digicel, Voila Irlandia 51210 Vodafone, O2 Indie 53000 Bharti Airtel, Videocon, Reliance Indonezja 89887 AXIS, 3, Telkomsel, Indosat, XL Axiata Włochy 4880804 Wind 3424486444 Vodafone » Zobacz krótkie kody SMS dla innych państw Zamknij Potwierdzenie Zamknij   Zamknij Zamknij Kup teraz Hmm... Coś poszło nie tak. Spróbuj jeszcze raz. Następny Tweet użytkownika"	"null"	"null"	"Typescript Program Manager at Microsoft"	"true"
"Social"	"@ahejlsberg"	"https://twitter.com/ahejlsberg"	"Technical Fellow at Microsoft invovled with the Typescript project"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Anders Hejlsberg (@ahejlsberg) | Twitter Główna O nas Szukaj Szukaj na Twitterze Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Język: polski Bahasa Indonesia Bahasa Melayu Català Čeština Dansk Deutsch English English UK Español Filipino Français Hrvatski Italiano Magyar Nederlands Norsk Português Română Slovenčina Suomi Svenska Tiếng Việt Türkçe Ελληνικά Български език Русский Српски Українська мова עִבְרִית العربية فارسی मराठी हिन्दी বাংলা ગુજરાતી தமிழ் ಕನ್ನಡ ภาษาไทย 한국어 日本語 简体中文 繁體中文 Masz konto? Zaloguj się Masz konto? Zapamiętaj mnie · Nie pamiętasz hasła? Nowy na Twitterze? Zarejestruj się Korzystanie z usług Twittera oznacza, że wyrażasz zgodę na korzystanie przez nas z plików cookie i przesyłanie danych poza Unię Europejską. Firma Twitter i jej partnerzy działają globalnie i wykorzystują pliki cookie do analiz, personalizacji treści i wyświetlania reklam. Zamknij Anders Hejlsberg @ahejlsberg Tweety 94 Obserwowani 20 Obserwujący 14,7 tys. Polubienia 22   Więcej Polubienia Wyłącz wyciszenie @ahejlsberg Wycisz @ahejlsberg Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Anders Hejlsberg @ahejlsberg Technical Fellow at Microsoft Seattle Dołączył wrzesień 2012 0 zdjęć lub filmów Zdjęcia i filmy Tweety Tweety Tweety i odpowiedzi @ahejlsberg jest zablokowany Czy na pewno chcesz zobaczyć te tweety? Zobaczenie tweetów nie odblokuje @ahejlsberg. Pokaż Tweety Zamknij Anders Hejlsberg obserwuje Anders Hejlsberg ‏ @ahejlsberg 17.06 Discriminated union types now in TypeScript 2.0 master branch. https://github.com/Microsoft/TypeScript/pull/9163 … #typescript @typescriptlang 111 podanych dalej 164 polubione Odpowiedz Podaj dalej 111 Podane dalej 111 Polub 164 Polubione 164 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg podał/a dalej Victor Savkin ‏ @victorsavkin 22.05 Enabled strictNullChecks in a small #typescript project and found two bugs right away. It's a game-changing feature. 45 podanych dalej 64 polubione Odpowiedz Podaj dalej 45 Podane dalej 45 Polub 64 Polubione 64 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg ‏ @ahejlsberg 19.05 Another chat with @sethjuarez: TypeScript 2.0, non-null types, control flow analysis. https://channel9.msdn.com/Blogs/Seth-Juarez/Anders-Hejlsberg-on-TypeScript-2 … #typescript @typescriptlang 69 podanych dalej 104 polubione Odpowiedz Podaj dalej 69 Podane dalej 69 Polub 104 Polubione 104 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg ‏ @ahejlsberg 12.05 Had a fun chat with @sethjuarez about modern compiler construction. https://channel9.msdn.com/Blogs/Seth-Juarez/Anders-Hejlsberg-on-Modern-Compiler-Construction … #TypeScript #csharp @typescriptlang @roslyn 127 podanych dalej 208 polubionych Odpowiedz Podaj dalej 127 Podane dalej 127 Polub 208 Polubione 208 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg podał/a dalej Yehuda Katz ‏ @wycats 7.05 I turned on strict null checking in TypeScript and it's wonderful. Everything it flags would cause dynamic errors in the real world. 167 podanych dalej 294 polubione Odpowiedz Podaj dalej 167 Podane dalej 167 Polub 294 Polubione 294 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg podał/a dalej JavaScript Jabber ‏ @JSJabber 27.04 New @JSJabber Episode 209: TypeScript with Anders Hejlsberg http://ow.ly/4n9lco  cc/ @ahejlsberg 11 podanych dalej 18 polubionych Odpowiedz Podaj dalej 11 Podane dalej 11 Polub 18 Polubione 18 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg ‏ @ahejlsberg 22.04 Control flow based type analysis is now in TypeScript master branch. Check it out. https://github.com/Microsoft/TypeScript/pull/8010 … #TypeScript @typescriptlang 87 podanych dalej 112 polubionych Odpowiedz Podaj dalej 87 Podane dalej 87 Polub 112 Polubione 112 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg ‏ @ahejlsberg 12.04 Demos from my Build talk on TypeScript are now online at https://github.com/Microsoft/typescript-build2016-demos … #typescript @typescriptlang #Build2016 54 podane dalej 79 polubionych Odpowiedz Podaj dalej 54 Podane dalej 54 Polub 79 Polubione 79 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg ‏ @ahejlsberg 31.03 If you missed my TypeScript talk yesterday you can now watch it online. https://channel9.msdn.com/Events/Build/2016/B881 … #typescript @typescriptlang #Build2016 140 podanych dalej 227 polubionych Odpowiedz Podaj dalej 140 Podane dalej 140 Polub 227 Polubione 227 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg ‏ @ahejlsberg 29.03 Presenting ""What's new in TypeScript"" at //build tomorrow (Mar 30) 3:30-4:30. Live on https://channel9.msdn.com/  #TypeScript @typescriptlang 63 podane dalej 71 polubionych Odpowiedz Podaj dalej 63 Podane dalej 63 Polub 71 Polubione 71 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg ‏ @ahejlsberg 24.03 TypeScript website just got a makeover. Check it out. http://www.typescriptlang.org/  #typescript 90 podanych dalej 86 polubionych Odpowiedz Podaj dalej 90 Podane dalej 90 Polub 86 Polubione 86 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg ‏ @ahejlsberg 30.11.2015 TypeScript 1.7 released: Async/await for ES6 targets, polymorphic 'this' type, ** operator, and more. http://blogs.msdn.com/b/typescript/archive/2015/11/30/announcing-typescript-1-7.aspx … #typescript 329 podanych dalej 229 polubionych Odpowiedz Podaj dalej 329 Podane dalej 329 Polub 229 Polubione 229 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg podał/a dalej Jules Kremer ‏ @jules_kremer 18.11.2015 What a moment for a Googler and ex-Softie @ #Connect #Angular #Typescript #Microsoftpic.twitter.com/CwmuNiK4e8 Anders Hejlsberg 55 podanych dalej 71 polubionych Odpowiedz Podaj dalej 55 Podane dalej 55 Polub 71 Polubione 71 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg ‏ @ahejlsberg 18.11.2015 VIsual Studio @code is now open source! Congrats @ErichGamma and team. #connect2015 139 podanych dalej 86 polubionych Odpowiedz Podaj dalej 139 Podane dalej 139 Polub 86 Polubione 86 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg podał/a dalej Alex Eagle ‏ @Jakeherringbone 17.10.2015 Alex Eagle podał/a dalej Olivier Combe All TypeScript libraries should publish with their typings like I did for Angular 2. Thanks @OCombe for the writeup!https://twitter.com/OCombe/status/655306089349709824 … Alex Eagle dodał/a, Olivier Combe @OCombe How to publish a library for Angular 2 on npm. https://medium.com/@OCombe/how-to-publish-a-library-for-angular-2-on-npm-5f48cdabf435?source=tw-5ae4b2205cba-1445072078059 … 21 podanych dalej 31 polubionych Odpowiedz Podaj dalej 21 Podane dalej 21 Polub 31 Polubione 31 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg podał/a dalej Gaurav Seth ‏ @gauravseth 8.10.2015 Come work as a PM on TypeScript (http://aka.ms/TypeScriptPM ) or Chakra (http://aka.ms/ChakraPM ). DM me or mail gauravs at microsoft dot com 37 podanych dalej 9 polubionych Odpowiedz Podaj dalej 37 Podane dalej 37 Polub 9 Polubione 9 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg podał/a dalej José Antonio Márquez ‏ @joseeight 2.10.2015 Brisbane, CA Would you be interested in a @typescriptlang conference? #javascript #TypeScript 69 podanych dalej 40 polubionych Odpowiedz Podaj dalej 69 Podane dalej 69 Polub 40 Polubione 40 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg ‏ @ahejlsberg 16.09.2015 TypeScript 1.6 released. React/JSX support, intersection types, class expressions, abstract classes... http://blogs.msdn.com/b/typescript/archive/2015/09/16/announcing-typescript-1-6.aspx … #typescript 268 podanych dalej 131 polubionych Odpowiedz Podaj dalej 268 Podane dalej 268 Polub 131 Polubione 131 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg podał/a dalej Brad Green ‏ @bradlygreen 1.09.2015 Angular 2 survey results on the @angularjs blog thanks to @jeffwhelpley and @gdi2290! http://angularjs.blogspot.com/2015/09/angular-2-survey-results.html …pic.twitter.com/rrAMSOdgA0 102 podane dalej 68 polubionych Odpowiedz Podaj dalej 102 Podane dalej 102 Polub 68 Polubione 68 Więcej Kopiuj link do tweeta Zamieść tweeta Anders Hejlsberg obserwuje Daniel Rosenwasser, Luke Hoban, Mads Torgersen i 3 innych Wyłącz wyciszenie @drosenwasser Wycisz @drosenwasser Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Daniel Rosenwasser @drosenwasser Program Manager (previously Engineer) on TypeScript at Microsoft Wyłącz wyciszenie @lukehoban Wycisz @lukehoban Obserwuj Obserwowany Przestań obserwować Zablokowane Odblokuj Oczekujące Anuluj Luke Hoban @lukehoban @ahejlsberg nie ma jeszcze wpisów. Do góry ↑ Wydaje się, że ładowanie zajmuje dużo czasu. Twitter może być przeciążony lub mieć chwilowy problem. Spróbuj ponownie lub sprawdź Status Twittera, aby uzyskać więcej informacji. Nowy na Twitterze? Zarejestruj się, a otrzymasz spersonalizowaną oś czasu! Zarejestruj się Może Ci się też spodobać · Odśwież Seattle © 2016 Twitter O nas Pomoc Zasady Prywatność Cookies (ciasteczka) Informacje o reklamach Zamknij Wybierz lokalizację trendu Odrzuć Zamknij Poprzedni Dalej Zamknij Przejdź do profilu osoby Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ Zamknij Podać dalej do Twoich obserwujących? Opcjonalny komentarz przy podawaniu Tweeta dalej     Zapisane wyszukiwania Usuń Konto zweryfikowane @ Proponowani użytkownicy Konto zweryfikowane @ Konto zweryfikowane @ 140 Podaj dalej Tweetnij Zamknij Czy na pewno chcesz usunąć tego tweeta? Anuluj Usuń Zamknij Promuj ten tweet Zamknij Zablokuj Anuluj Zablokuj Dodaj Lokalizację do Twoich wpisów Gdy tweetniesz z lokalizacją, Twitter ją zachowa. Możesz włączyć/wyłączyć dodawanie położenia przed wysłaniem każdego tweeta i zawsze masz możliwość usunięcia swojej historii lokalizacji. Dowiedz się więcej Włącz usługę lokalizacji Nie teraz Zamknij Podsumowanie profilu Zamknij Twoje listy Zamknij Utwórz nową listę Nazwa listy Opis Opcjonalne, poniżej 100 znaków Prywatność Publiczny · Każdy może obserwować tą listę Prywatne · Tylko Ty masz dostęp do tej listy Zapisz listę Zamknij Twoja odpowiedź obejmuje osoby w tej rozmowie aż do tego momentu. Dowiedz się więcej Zamknij Kopiuj link do tweeta Poniżej jest adres URL tego tweeta. Skopiuj go, żeby łatwo się nim podzielić ze znajomymi. Zamknij Umieszczanie tweeta Embed this Video Umieść ten tweet na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Umieść ten film na swojej stronie, kopiując poniższy kod. Dowiedz się więcej Hmm, wystąpił problem z połączeniem z serwerem. Spróbować ponownie? Dołącz pierwszy tweet Dołącz multimedia Podgląd Zamknij Zaloguj się do Twittera Zapamiętaj mnie · Nie pamiętasz hasła? Nie masz konta? Zarejestruj się » Zamknij Zarejestruj się na Twitterze Nie ma Cię na Twitterze? Załóż profil, połącz go do interesujących Cię tematów – i otrzymuj aktualności gdy tylko się wydarzą! Zarejestruj się Masz konto? Zaloguj się » Zamknij Wysyłanie i odbieranie krótkich kodów: Kraj Kod Dla klientów Stany Zjednoczone 40404 (dowolny) Kanada 21212 (dowolny) Wielka Brytania 86444 Vodafone, Orange, 3, O2 Brazylia 40404 Nextel, TIM Haiti 40404 Digicel, Voila Irlandia 51210 Vodafone, O2 Indie 53000 Bharti Airtel, Videocon, Reliance Indonezja 89887 AXIS, 3, Telkomsel, Indosat, XL Axiata Włochy 4880804 Wind 3424486444 Vodafone » Zobacz krótkie kody SMS dla innych państw Zamknij Potwierdzenie Zamknij   Zamknij Zamknij Kup teraz Hmm... Coś poszło nie tak. Spróbuj jeszcze raz. Następny Tweet użytkownika"	"null"	"null"	"Technical Fellow at Microsoft invovled with the Typescript project"	"true"
