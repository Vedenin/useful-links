"category"	"name"	"url"	"description"	"star"	"stackOverflow"	"stackOverflowUrl"	"license"	"licenseUrl"	"site"	"userGuide"	"newStars"	"newWatchs"	"newForks"	"pageText"	"newStackOverflow"	"github"	"allText"	"isExist"
 "Client Web App Frameworks"	"Angular"	"https://angulardart.org/"	"Angular is a framework for building client web-apps."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13923"	"1773"	"3592"	"GitHub - angular/angular Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,773 Star 13,923 Fork 3,592 angular/angular Code Issues 1,232 Pull requests 34 Wiki Pulse Graphs https://angular.io 5,013 commits 33 branches 78 releases 306 contributors TypeScript 86.4% Dart 10.1% JavaScript 1.3% HTML 0.9% Shell 0.8% CSS 0.3% Other 0.2% TypeScript Dart JavaScript HTML Shell CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags IgorMinar-patch-1 alexeagle-patch-1 analyzer angular.io-docs builds-dart builds-js ci-test css_parser_source_span docker examples fix g3_master g3_v2_0-dart g3_v2_0 master mhevery-patch-1 package-splitup-squashed-rebased package-splitup perftest presubmit-alexeagle-pr-8098 presubmit-hansl-pr-8290 presubmit-hansl-pr-8339 presubmit-mprobst-pr-8324 presubmit-mprobst-pr-8375 presubmit-mprobst-pr-8399 presubmit-robertmesserle-pr-8071 presubmit-robertmesserle-pr-8081 presubmit-robertmesserle-pr-8126 presubmit-robertmesserle-pr-8147 presubmit-tbosch-pr-8393 presubmit-vsavkin-pr-7948 presubmit-vsavkin-pr-8354 presubmit-vsavkin-pr-8451 Nothing to show starting 2.0.0-rc.4 2.0.0-rc.3 2.0.0-rc.2 2.0.0-rc.1 2.0.0-rc.0 2.0.0-build.0069329.js 2.0.0-build.0069329.dart 2.0.0-build.43133b5.js 2.0.0-build.43133b5.dart 2.0.0-build.9d5918e.js 2.0.0-build.9d5918e.dart 2.0.0-build.8c01008.js 2.0.0-build.8c01008.dart 2.0.0-build.dafd9d9.js 2.0.0-build.dafd9d9.dart 2.0.0-build.ac87a84.js 2.0.0-build.ac87a84.dart 2.0.0-beta.17 2.0.0-beta.16 2.0.0-beta.15 2.0.0-beta.14 2.0.0-beta.13 2.0.0-beta.12 2.0.0-beta.11 2.0.0-beta.10 2.0.0-beta.9 2.0.0-beta.8 2.0.0-beta.7 2.0.0-beta.6 2.0.0-beta.5 2.0.0-beta.4 2.0.0-beta.3 2.0.0-beta.2 2.0.0-beta.1 2.0.0-beta.0 2.0.0-alpha.55 2.0.0-alpha.54 2.0.0-alpha.53 2.0.0-alpha.52 2.0.0-alpha.51 2.0.0-alpha.50 2.0.0-alpha.49 2.0.0-alpha.48 2.0.0-alpha.47 2.0.0-alpha.46 2.0.0-alpha.45 2.0.0-alpha.44 2.0.0-alpha.42 2.0.0-alpha.41 2.0.0-alpha.40 2.0.0-alpha.39 2.0.0-alpha.38 2.0.0-alpha.37 2.0.0-alpha.36 2.0.0-alpha.35 2.0.0-alpha.34 2.0.0-alpha.33 2.0.0-alpha.32 2.0.0-alpha.31 2.0.0-alpha.30 2.0.0-alpha.29 2.0.0-alpha.28 2.0.0-alpha.27 2.0.0-alpha.26 2.0.0-alpha.25 2.0.0-alpha.24 2.0.0-alpha.23 2.0.0-alpha.22 2.0.0-alpha.21 2.0.0-alpha.20 2.0.0-alpha.19 2.0.0-alpha.18 2.0.0-alpha.17 2.0.0-alpha.16 2.0.0-alpha.15 2.0.0-alpha.14 2.0.0-alpha.13 Nothing to show New pull request Latest commit b77a4a4 Jul 14, 2016 vsavkin fix(router): expose initalNavigation and dispose so they can be used … … …with webworkers Permalink Failed to load latest commit information. .github chore(.github): improve github issue and PR templates Jun 16, 2016 modules fix(router): expose initalNavigation and dispose so they can be used … Jul 14, 2016 modules_dart Revert ""feat(change_detection): make INTERPOLATE_REGEXP customizable (#… Jun 1, 2016 scripts refactor(core): clean up platform bootstrap and initTestEnvironment Jul 8, 2016 tools fix(router): expose initalNavigation and dispose so they can be used … Jul 15, 2016 .bowerrc chore(dgeni): clean up legacy typings bundle creation Oct 29, 2015 .clang-format feat(tooling): Add a .clang-format for automated JavaScript formatting. Apr 2, 2015 .editorconfig chore(.editorconfig): include markdown config Jan 27, 2015 .gitattributes build: fix some issues on Windows platforms Jun 23, 2016 .gitignore chore(tsc-wrapped): update to newest tsickle Jun 9, 2016 .nvmrc build(node): upgrade to node 5.4.1 Jan 22, 2016 .travis.yml chore(build): activate optional jobs in SL and BS (#8605) Jun 9, 2016 CHANGELOG.md doc(changelog): cleans up markdown for breaking changes (#9739) Jun 30, 2016 COMMITTER.md chore(docs): update the merge process docs Dec 23, 2015 CONTRIBUTING.md removes tailing slashes from url in lines 229 231 May 26, 2016 DEVELOPER.md doc(developer): updates (#10075) Jul 14, 2016 LICENSE Update change from Apache to MIT license Jan 8, 2016 NAMING.md refactor(ngProbe): rename to ng.probe Aug 31, 2015 README.md chore(readme): add CircleCI status badge May 27, 2016 TOOLS.md feat(docs): document change detection profiler Sep 4, 2015 TOOLS_DART.md fix(docs): fix an import in TOOLS_DART.md Dec 17, 2015 TOOLS_JS.md doc: fix `enableDebugTools` import path (#9377) Jun 20, 2016 TRIAGE_AND_LABELS.md chore(docs): explain the process for merging changes to master Aug 11, 2015 bower.json fix(benchmarks): update react and polymer benchmarks and get tree upd… Oct 28, 2015 browser-providers.conf.js chore(build): reenable optional jobs in SL and BS May 11, 2016 build.sh chore(build): update build script to increase node's heap size Jul 6, 2016 circle.yml chore(lint): re-enable clang-format on tools/ May 26, 2016 gulpfile.js fix(platform-browser): remove testing_e2e target (#10029) Jul 13, 2016 gulpfile.js.old build: use connect web server instead of SimpleHTTPServer May 25, 2016 karma-js.conf.js chore(karma): remove ref to legacy files (#9008) Jun 4, 2016 npm-shrinkwrap.clean.json build(npm): upgrade ts-api-guardian to v0.1.4 Jun 27, 2016 npm-shrinkwrap.json build(npm): upgrade ts-api-guardian to v0.1.4 Jun 27, 2016 npm-shrinkwrap.readme.md build(npm): add tools/npm/reshrinkwrap script and update docs Jan 22, 2016 package.json docs(changelog): change log and package.json to rc4 Jun 30, 2016 perf-cloud-secret.template.js refactor(build): support multiple configurable browsers for e2e and p… Jan 20, 2015 presubmit.sh refactor(compiler): rename /compiler_cli to /compiler-cli Jun 2, 2016 protractor-dart2js.conf.js chore: rename modules/examples to modules/playground Oct 18, 2015 protractor-ddc.conf.js chore(ddc): add e2e test infra + first test Mar 22, 2016 protractor-js-dev.conf.js chore(test): setup a gulp task for quickly running e2e tests against … Jun 11, 2015 protractor-js-new-world.conf.js build: use connect web server instead of SimpleHTTPServer May 25, 2016 protractor-js-prod.conf.js chore(build): add a task to watch and render examples and e2e tests f… Jun 19, 2015 protractor-js.conf.js build: adding basic e2e testing infrastructure May 2, 2016 protractor-shared.js refactor(chore): Replace all 'bindings' with 'providers' May 23, 2016 publish-packages.sh cleanup(router): removes router Jun 20, 2016 pubspec.yaml chore(test): migrate Dart tests to package:test Mar 4, 2016 shims_for_IE.js fix(IE): make shim work with instrumented code May 19, 2016 test-main.js refactor(core): clean up platform bootstrap and initTestEnvironment Jul 8, 2016 test.sh chore: have test.sh take platform argument Jun 14, 2016 tslint.json chore(lint): enable lint check for duplicate vars Jul 13, 2016 README.md Angular Angular is a development platform for building mobile and desktop web applications. This is the repository for Angular 2, both the JavaScript (JS) and Dart versions. Angular 2 is currently in Release Candidate. Quickstart Get started in 5 minutes. Want to help? Want to file a bug, contribute some code, or improve documentation? Excellent! Read up on our guidelines for contributing and then check out one of our issues in the hotlist: community-help. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/angular/angular"	"Angular is a framework for building client web-apps."	"true"
"Client Web App Frameworks"	"Angular2"	"https://angular.io/"	"Angular is a development platform for building mobile and desktop web applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"13923"	"1773"	"3592"	"GitHub - angular/angular Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1,773 Star 13,923 Fork 3,592 angular/angular Code Issues 1,232 Pull requests 34 Wiki Pulse Graphs https://angular.io 5,013 commits 33 branches 78 releases 306 contributors TypeScript 86.4% Dart 10.1% JavaScript 1.3% HTML 0.9% Shell 0.8% CSS 0.3% Other 0.2% TypeScript Dart JavaScript HTML Shell CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags IgorMinar-patch-1 alexeagle-patch-1 analyzer angular.io-docs builds-dart builds-js ci-test css_parser_source_span docker examples fix g3_master g3_v2_0-dart g3_v2_0 master mhevery-patch-1 package-splitup-squashed-rebased package-splitup perftest presubmit-alexeagle-pr-8098 presubmit-hansl-pr-8290 presubmit-hansl-pr-8339 presubmit-mprobst-pr-8324 presubmit-mprobst-pr-8375 presubmit-mprobst-pr-8399 presubmit-robertmesserle-pr-8071 presubmit-robertmesserle-pr-8081 presubmit-robertmesserle-pr-8126 presubmit-robertmesserle-pr-8147 presubmit-tbosch-pr-8393 presubmit-vsavkin-pr-7948 presubmit-vsavkin-pr-8354 presubmit-vsavkin-pr-8451 Nothing to show starting 2.0.0-rc.4 2.0.0-rc.3 2.0.0-rc.2 2.0.0-rc.1 2.0.0-rc.0 2.0.0-build.0069329.js 2.0.0-build.0069329.dart 2.0.0-build.43133b5.js 2.0.0-build.43133b5.dart 2.0.0-build.9d5918e.js 2.0.0-build.9d5918e.dart 2.0.0-build.8c01008.js 2.0.0-build.8c01008.dart 2.0.0-build.dafd9d9.js 2.0.0-build.dafd9d9.dart 2.0.0-build.ac87a84.js 2.0.0-build.ac87a84.dart 2.0.0-beta.17 2.0.0-beta.16 2.0.0-beta.15 2.0.0-beta.14 2.0.0-beta.13 2.0.0-beta.12 2.0.0-beta.11 2.0.0-beta.10 2.0.0-beta.9 2.0.0-beta.8 2.0.0-beta.7 2.0.0-beta.6 2.0.0-beta.5 2.0.0-beta.4 2.0.0-beta.3 2.0.0-beta.2 2.0.0-beta.1 2.0.0-beta.0 2.0.0-alpha.55 2.0.0-alpha.54 2.0.0-alpha.53 2.0.0-alpha.52 2.0.0-alpha.51 2.0.0-alpha.50 2.0.0-alpha.49 2.0.0-alpha.48 2.0.0-alpha.47 2.0.0-alpha.46 2.0.0-alpha.45 2.0.0-alpha.44 2.0.0-alpha.42 2.0.0-alpha.41 2.0.0-alpha.40 2.0.0-alpha.39 2.0.0-alpha.38 2.0.0-alpha.37 2.0.0-alpha.36 2.0.0-alpha.35 2.0.0-alpha.34 2.0.0-alpha.33 2.0.0-alpha.32 2.0.0-alpha.31 2.0.0-alpha.30 2.0.0-alpha.29 2.0.0-alpha.28 2.0.0-alpha.27 2.0.0-alpha.26 2.0.0-alpha.25 2.0.0-alpha.24 2.0.0-alpha.23 2.0.0-alpha.22 2.0.0-alpha.21 2.0.0-alpha.20 2.0.0-alpha.19 2.0.0-alpha.18 2.0.0-alpha.17 2.0.0-alpha.16 2.0.0-alpha.15 2.0.0-alpha.14 2.0.0-alpha.13 Nothing to show New pull request Latest commit b77a4a4 Jul 14, 2016 vsavkin fix(router): expose initalNavigation and dispose so they can be used … … …with webworkers Permalink Failed to load latest commit information. .github chore(.github): improve github issue and PR templates Jun 16, 2016 modules fix(router): expose initalNavigation and dispose so they can be used … Jul 14, 2016 modules_dart Revert ""feat(change_detection): make INTERPOLATE_REGEXP customizable (#… Jun 1, 2016 scripts refactor(core): clean up platform bootstrap and initTestEnvironment Jul 8, 2016 tools fix(router): expose initalNavigation and dispose so they can be used … Jul 15, 2016 .bowerrc chore(dgeni): clean up legacy typings bundle creation Oct 29, 2015 .clang-format feat(tooling): Add a .clang-format for automated JavaScript formatting. Apr 2, 2015 .editorconfig chore(.editorconfig): include markdown config Jan 27, 2015 .gitattributes build: fix some issues on Windows platforms Jun 23, 2016 .gitignore chore(tsc-wrapped): update to newest tsickle Jun 9, 2016 .nvmrc build(node): upgrade to node 5.4.1 Jan 22, 2016 .travis.yml chore(build): activate optional jobs in SL and BS (#8605) Jun 9, 2016 CHANGELOG.md doc(changelog): cleans up markdown for breaking changes (#9739) Jun 30, 2016 COMMITTER.md chore(docs): update the merge process docs Dec 23, 2015 CONTRIBUTING.md removes tailing slashes from url in lines 229 231 May 26, 2016 DEVELOPER.md doc(developer): updates (#10075) Jul 14, 2016 LICENSE Update change from Apache to MIT license Jan 8, 2016 NAMING.md refactor(ngProbe): rename to ng.probe Aug 31, 2015 README.md chore(readme): add CircleCI status badge May 27, 2016 TOOLS.md feat(docs): document change detection profiler Sep 4, 2015 TOOLS_DART.md fix(docs): fix an import in TOOLS_DART.md Dec 17, 2015 TOOLS_JS.md doc: fix `enableDebugTools` import path (#9377) Jun 20, 2016 TRIAGE_AND_LABELS.md chore(docs): explain the process for merging changes to master Aug 11, 2015 bower.json fix(benchmarks): update react and polymer benchmarks and get tree upd… Oct 28, 2015 browser-providers.conf.js chore(build): reenable optional jobs in SL and BS May 11, 2016 build.sh chore(build): update build script to increase node's heap size Jul 6, 2016 circle.yml chore(lint): re-enable clang-format on tools/ May 26, 2016 gulpfile.js fix(platform-browser): remove testing_e2e target (#10029) Jul 13, 2016 gulpfile.js.old build: use connect web server instead of SimpleHTTPServer May 25, 2016 karma-js.conf.js chore(karma): remove ref to legacy files (#9008) Jun 4, 2016 npm-shrinkwrap.clean.json build(npm): upgrade ts-api-guardian to v0.1.4 Jun 27, 2016 npm-shrinkwrap.json build(npm): upgrade ts-api-guardian to v0.1.4 Jun 27, 2016 npm-shrinkwrap.readme.md build(npm): add tools/npm/reshrinkwrap script and update docs Jan 22, 2016 package.json docs(changelog): change log and package.json to rc4 Jun 30, 2016 perf-cloud-secret.template.js refactor(build): support multiple configurable browsers for e2e and p… Jan 20, 2015 presubmit.sh refactor(compiler): rename /compiler_cli to /compiler-cli Jun 2, 2016 protractor-dart2js.conf.js chore: rename modules/examples to modules/playground Oct 18, 2015 protractor-ddc.conf.js chore(ddc): add e2e test infra + first test Mar 22, 2016 protractor-js-dev.conf.js chore(test): setup a gulp task for quickly running e2e tests against … Jun 11, 2015 protractor-js-new-world.conf.js build: use connect web server instead of SimpleHTTPServer May 25, 2016 protractor-js-prod.conf.js chore(build): add a task to watch and render examples and e2e tests f… Jun 19, 2015 protractor-js.conf.js build: adding basic e2e testing infrastructure May 2, 2016 protractor-shared.js refactor(chore): Replace all 'bindings' with 'providers' May 23, 2016 publish-packages.sh cleanup(router): removes router Jun 20, 2016 pubspec.yaml chore(test): migrate Dart tests to package:test Mar 4, 2016 shims_for_IE.js fix(IE): make shim work with instrumented code May 19, 2016 test-main.js refactor(core): clean up platform bootstrap and initTestEnvironment Jul 8, 2016 test.sh chore: have test.sh take platform argument Jun 14, 2016 tslint.json chore(lint): enable lint check for duplicate vars Jul 13, 2016 README.md Angular Angular is a development platform for building mobile and desktop web applications. This is the repository for Angular 2, both the JavaScript (JS) and Dart versions. Angular 2 is currently in Release Candidate. Quickstart Get started in 5 minutes. Want to help? Want to file a bug, contribute some code, or improve documentation? Excellent! Read up on our guidelines for contributing and then check out one of our issues in the hotlist: community-help. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/angular/angular"	"Angular is a development platform for building mobile and desktop web applications."	"true"
"Client Web App Frameworks"	"Polymer"	"https://www.dartlang.org/polymer/"	"Use polymer to build structured, encapsulated, client-side web apps with web components."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Polymer | webdev.dartlang.org Get Started Libraries Tools Search Quick Start Get Started Write an Angular App Libraries Overview Angular 2 for Dart Tools Dart Tools for the Web Community Community and Support Tutorials Overview Articles Overview On this page Polymer Send feedback Resources for using Polymer in Dart programs: Polymer Dart Developer Guide Dart Academy Polymer tutorials Archive of dartlang.org/polymer-old/ #polymer channel of Dart on Slack (Not already a member of Dart on Slack? Register!) Polymer is just one of several web libraries available for Dart. For information on others, see: Overview: Web Libraries Angular for Dart Technologies Dart Angular Dart Polymer Dart Resources DartPad Code labs API reference Community Mailing lists Stack Overflow Slack (register) Problems with this site? File a bug Terms | Privacy Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code samples are licensed under the BSD License."	"null"	"null"	"Use polymer to build structured, encapsulated, client-side web apps with web components."	"true"
"Client Web App Frameworks"	"uix"	"https://github.com/localvoid/uix"	"Library to build Web User Interfaces in Dart inspired by React."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"51"	"10"	"2"	"GitHub - localvoid/uix: Dart Web UI library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 10 Star 51 Fork 2 localvoid/uix Code Issues 9 Pull requests 0 Pulse Graphs Dart Web UI library 175 commits 3 branches 0 releases 3 contributors Dart 97.3% HTML 2.7% Dart HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags experimental-scheduler immutable-vnode master Nothing to show Nothing to show New pull request Latest commit 546c7ec Sep 3, 2015 localvoid Separate adjacent text nodes with comment nodes Permalink Failed to load latest commit information. example Add input field to anchor example May 13, 2015 lib Separate adjacent text nodes with comment nodes Sep 3, 2015 test Change API to specify styles. May 11, 2015 .gitignore Ignore .packages file Sep 3, 2015 .travis.yml Disable testing in firefox May 6, 2015 AUTHORS Initial commit Mar 17, 2015 CHANGELOG.md Separate adjacent text nodes with comment nodes Sep 3, 2015 LICENSE Initial commit Mar 17, 2015 README.md Update README May 13, 2015 pubspec.yaml Add support for namespaced attributes May 11, 2015 README.md uix Library to build Web User Interfaces in Dart inspired by React. Virtual DOM Virtual DOM simplifies the way to manage DOM mutations, just describe how your Component should look at any point in time. uix library has a highly optimized virtual dom implementation, see benchmarks below. Scheduler Scheduler is responsible for running tasks that update visual representation of the Components, and business logic of web app services. Misc Automatic management of Dart streams with addSubscription(StreamSubscription s), addTransientSubscription(StreamSubscription s) methods. Transient subscriptions simplifies the way to manage subscriptions the same way virtual dom simplifies DOM mutations, just describe which dependencies should be active at any point in time. // Code from TodoMVC[Observable] example  $Entry() => new Entry(); class Entry extends Component<int> {   updateState() {     _entry = entryStore.get(data);      // each time Component is invalidated, old subscription will be     // automatically canceled, so we just register a new one when     // something is changed.     addTransientSubscription(_entry.onChange.listen(invalidate));      return true;   }   ... } revisioned nodes for fast ""dirty checking"" of mutable data structures. Just update revision when data is changed and check if view has an older revision, for example: class LineView extends Component<RichLine> {   List<VNode> _fragments;    set data(RichLine newData) {     if (identical(data, newData)) {       if (data.isNewer(this)) {         invalidate();       }     } else {       data_ = newData;       invalidate();     }   }   ... } Lifecycle control of children virtual nodes to implement complex animations. For example: CssTransitionContainer Mount on top of existing html document. Mount example Moving html nodes and components between different parents and preserving internal state with Virtual DOM api using Anchor objects. Anchor example Quick Start Requirements: Dart SDK 1.9.1 or greater 1. Create a new Dart Web Project 2. Add uix library in pubspec.yaml file: dependencies:   uix: any 3. Install dependencies $ pub get 4. Create web/index.html file: <!DOCTYPE html> <html>   <head>     <meta charset=""utf-8"">     <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">     <title>Hello uix</title>   </head>   <body>     <script type=""application/dart"" src=""main.dart""></script>     <script src=""packages/browser/dart.js""></script>   </body> </html> 5. Create web/main.dart file: library main;  import 'dart:html' as html; import 'package:uix/uix.dart';  // Function to create new Box instances, it is used as an argument for // virtual nodes that represent components. // In the future, when metaclasses will be implemented in Dart, it // won't be necessary to create this functions. Right now it is just a // convention that will make it easier to migrate in the future by // removing '$' prefix in all 'vComponent' invocations. $Box() => new Box();  // Component<T> type parameter is used to specify type of the input data // (props in React terms). class Box extends Component<String> {   // Tag name of the root element for this Component. Default tag 'div'.   final tag = 'span';    // Each time when Component is invalidated (new data is passed,   // or invalidate() method is called), it will be updated during   // writeDom phase.   //   // API is designed this way intentionally to improve developer   // experience and get better stack traces when something is   // failing, that is why there is no method like render() in   // React.   updateView() {     // updateRoot method is used to update internal representation     // using Virtual DOM API.     //     // vRoot node is used to represent root element.     //     // Call operator is overloaded for all virtual nodes and is used     // to assign children, it accepts Lists, Iterables, VNodes and     // Strings.     updateRoot(vRoot()(       vElement('span')(data)     ));   } }  class Main extends Component<String> {   updateView() {     updateRoot(vRoot()([       vElement('span')('Hello '),       vComponent($Box, data: data)     ]));   } }  main() {   // Initialize uix library.   initUix();    final component = new Main()..data = 'uix';    // Inject component into document body.   injectComponent(component, html.document.body); } Examples Hello Timer Collapsable Form State Diff Read/Write DOM Batching Component Inheritance SVG Canvas Css Transition Container TodoMVC (observable) TodoMVC (persistent) MineSweeper Game Snake Game Dual N-Back Game VDom Benchmark Run DBMonster Benchmark Run Run (compiled with patched dart-sdk) Server-Side rendering uix library with simple tweaks is fully capable to render components on the server and mounting on top of the existing html tree. Unfortunately Dart doesn't support any usable way to build uix Components this way. There are several proposals for Configured Imports 1 2 3 that will solve some problems, but it is still not enough to provide a good developer experience for users of this library. Conditional compilation will be way much better to write ""isomorphic"" Components. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/localvoid/uix"	"Library to build Web User Interfaces in Dart inspired by React."	"true"
"Client Web App Frameworks"	"MDL/Dart"	"http://www.material-design-lite.pub/"	"Material Design Lite for Dart is a framework of components for web developers based on Google's Material Design philosophy."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"114"	"13"	"21"	"GitHub - MikeMitterer/dart-material-design-lite: Material Design Lite Components, Directives + SPA with HTML, CSS + Dart Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 114 Fork 21 MikeMitterer/dart-material-design-lite Code Issues 9 Pull requests 1 Pulse Graphs Material Design Lite Components, Directives + SPA with HTML, CSS + Dart http://www.material-design-lite.pub/ 700 commits 35 branches 103 releases Fetching contributors CSS 69.2% Dart 19.6% HTML 5.9% JavaScript 5.1% Shell 0.2% CSS Dart HTML JavaScript Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags DivDataTable MaterialFormatter aniNotifications animation cleanupstyles dialogScopeAware form grinder landing master mdl mdlFlux merge0211 merge0308 merge0510 merge1307 merge1412 merge1708 merge1910 merge2007 merge2112 merge2707 merge3011 merge3108 merge160111 merge160321 model palette properties reflections repeater2 sample2site spaSample templates1307 transformer Nothing to show v1.17.4 v1.17.3 v1.17.2 v1.17.1 v1.17.0 v1.16.1 v1.16.0 v1.15.5 v1.15.4 v1.15.3 v1.15.2 v1.15.1 v1.15.0 v1.14.0 v1.13.1 v1.13.0 v1.12.4 v1.12.3 v1.12.2 v1.12.1 v1.12.0 v1.11.1 v1.11.0 v1.10.3 v1.10.2 v1.10.1 v1.10.0 v1.9.2 v1.9.1 v1.9.0 v1.8.1 v1.8.0 v1.7.1 v1.7.0 v1.6.1 v1.6.0 v1.5.8 v1.5.7 v1.5.6 v1.5.5 v1.5.4 v1.5.3 v1.5.2 v1.5.1 v1.5.0 v1.3.6 v1.3.5 v1.3.4 v1.3.3 v1.3.2 v1.3.1 v1.3.0 v1.2.3 v1.2.1 v1.2.0 v1.1.2 v1.1.1 v1.1.0 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.9.1 v0.9.0 v0.8.2 v0.8.1 v0.8.0 v0.7.9 v0.7.8 v0.7.7 v0.7.6 v0.7.5 v0.7.4 v0.7.3 v0.7.2 v0.7.1 v0.7.0 v0.6.10 v0.6.9 v0.6.8 v0.6.7 v0.6.6 v0.6.5 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.2 v0.1.1-mdl v0.1.0 v0.1.0-mdl v0.1 v0.0.3 v0.0.2 v0.0.1 tag rm 1.8.0 1.7.0 Nothing to show New pull request Latest commit 4def065 Jul 14, 2016 MikeMitterer Regnerated all CSS-Files Permalink Failed to load latest commit information. .stagedive feature: StageDive support Jul 10, 2015 docker Fiddling with docker Jul 14, 2015 lib Regnerated all CSS-Files Jul 14, 2016 test feature: MaterialTabs fires onChange-Event if active tab changes Apr 11, 2016 tool Merged latest MDL/JS master, MdlTemplateComponent-Test added Mar 21, 2016 .analysis_options doc: Move tests to new test-structure Dec 4, 2015 .gitignore Added ASCII Logo to README Jul 6, 2016 CHANGELOG.md Released 1.17.4 Jul 14, 2016 LICENSE Copyright added Apr 16, 2015 README.md Added ASCII Logo to README Jul 6, 2016 pubspec.yaml Released 1.17.4 Jul 14, 2016 README.md Material Design Lite for Dart A GUI library and framework to develop web apps in Dart. www.material-design-lite.pub. MDL/Dart is also on Facebook Material Design Lite lets you add a Material Design look and feel to your dynamic websites and web app. It doesn't rely on any JavaScript frameworks or libraries. Optimised for cross-device use, gracefully degrades in older browsers, and offers an experience that is accessible from the get-go. Getting started Here is a short guide to help you setting up your MDL/Dart page New v 1.11 - MDLFlux (REACT-like Actions, ActionBus, Dispatcher and DataStore) You can see further changes on the CHANGELOG! Flux - Overview Main features 16 base components ready to use 4 different Dialogs, AlertDialog, ConfirmDialog, Notification-Messages and Snackbar Directives Drag and Drop Formatters Mustache-Based Components (Template based) Nice, ready to use, templates Single Page Application Routing Dependency injection Samples, samples, samples Theming Visit the website for a ""Quick start"" or check out the Kitchen Sink Examples Check out the samples Download all the samples as TGZ from here IMPORTANT!!! All samples-sources are now on GH dart-material-design-lite-site Features and bugs Please file feature requests and bugs at the issue tracker. More links Material Design License Copyright 2016 Michael Mitterer (office@mikemitterer.at), IT-Consulting and Development Limited, Austrian Branch      __  ___ ____   __    __ __   ____                __     /  |/  // __ \ / /   / // /  / __ \ ____ _ _____ / /_   / /|_/ // / / // /   / // /_ / / / // __ `// ___// __/  / /  / // /_/ // /___/__  __// /_/ // /_/ // /   / /_   /_/  /_//_____//_____/  /_/  /_____/ \__,_//_/    \__/    Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with the License. You may obtain a copy of the License at     http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.  If this plugin is helpful for you - please (Circle) me or star this repo here on GitHub Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/MikeMitterer/dart-material-design-lite"	"Material Design Lite for Dart is a framework of components for web developers based on Google's Material Design philosophy."	"true"
"Server Frameworks"	"Redstone"	"https://github.com/redstone-dart/redstone"	"Redstone is a server-side, metadata driven micro-framework for Dart."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"237"	"29"	"33"	"GitHub - redstone-dart/redstone: A metadata driven microframework for Dart. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 29 Star 237 Fork 33 redstone-dart/redstone Code Issues 14 Pull requests 0 Wiki Pulse Graphs A metadata driven microframework for Dart. http://redstonedart.org 253 commits 5 branches 18 releases Fetching contributors Dart 100.0% Dart Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: v0.6 Switch branches/tags Branches Tags gh-pages simplify v0.5 v0.6 #123 Nothing to show v0.5.21 v0.5.20 v0.5.19 v0.5.18 v0.5.17 v0.5.15 v0.5.14 v0.5.13 v0.5.12 v0.5.10 v0.5.8 v0.5.7+2 v0.5.7 v0.5.3+1 v0.5.3 v0.5.2 v0.5.1 v0.5.0 Nothing to show New pull request Latest commit be2d24a Jun 6, 2016 Pacane Merge pull request #183 from sestegra/routes_test … Implement subgroup tests Permalink Failed to load latest commit information. example Fix a bunch of warnings from the analyzer Jan 29, 2016 lib Implement subgroup tests Jun 6, 2016 roadmaps Add v0.6 Roadmap Apr 12, 2015 test Remove useless equals in tests Jun 6, 2016 tool Add Travis CI Support Apr 14, 2015 .analysis_options Fix a bunch of warnings from the analyzer Jan 30, 2016 .gitignore Ignore .packages files Sep 14, 2015 .travis.yml Add Travis CI Support Apr 14, 2015 CHANGELOG.md Update change log May 16, 2016 LICENSE Initial commit Feb 20, 2014 README.md Update README.md Jan 25, 2016 pubspec.yaml Update change log May 16, 2016 README.md Redstone Redstone is an annotation driven web server micro-framework for Dart and influenced by Flask. It is based on shelf so you may also use any shelf middleware you like with Redstone. Example Redstone allows you to easily publish functions through a web interface, by just adding some annotations to them. import 'package:redstone/redstone.dart' as web;  @web.Route(""/"") helloWorld() => ""Hello, World!"";  main() {   web.setupConsoleLog();   web.start(); } Installation To install, set the redstone: ""^0.6.4"" constraint to your pubspec. dependencies:   redstone: ""^0.6.4"" The following plugins are also available for this version: redstone_mapper: 0.2.0-beta.1+1 redstone_mapper_mongo: 0.2.0-beta.1 redstone_mapper_pg: 0.2.0-beta.2+2 redstone_web_socket: 0.1.0-beta.1 Want to learn more? Check out our wiki! :) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/redstone-dart/redstone"	"Redstone is a server-side, metadata driven micro-framework for Dart."	"true"
"Server Frameworks"	"Start"	"https://github.com/lvivski/start"	"Sinatra inspired web framework to serve static files, handle dynamic requests, websockets and create JSON responses."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"361"	"27"	"41"	"GitHub - lvivski/start: Sinatra inspired web development framework for Dart Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 27 Star 361 Fork 41 lvivski/start Code Issues 3 Pull requests 3 Pulse Graphs Sinatra inspired web development framework for Dart 185 commits 2 branches 22 releases 13 contributors Dart 98.6% Shell 1.3% CSS 0.1% Dart Shell CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.2.7 v0.2.6 v0.2.5 v0.2.4 v0.2.3 v0.2.2 v0.2.1 v0.2.0 v0.1.3 v0.1.2 v0.1.1 v0.1.0 v0.0.10 v0.0.9 v0.0.8 v0.0.7 v0.0.6 v0.0.5 v0.0.4 v0.0.3 v0.0.2 v0.0.1 Nothing to show New pull request Latest commit 4534e29 Aug 16, 2014 lvivski v0.2.7, fix #61 Permalink Failed to load latest commit information. example better static files serving, fix #48 Apr 29, 2014 lib v0.2.7, fix #61 Aug 16, 2014 test cleanup Jan 4, 2014 tool fix Jun 18, 2013 .gitignore closes #6 Mar 23, 2013 CHANGELOG.md removed `hart` dependency, resolves #26 Jun 18, 2013 LICENSE update copyright year Mar 16, 2014 README.md docs Aug 1, 2014 pubspec.yaml v0.2.7, fix #61 Aug 16, 2014 README.md Start Sinatra inspired web framework. It has simple API to serve static files, handle dynamic requests, websockets and create JSON responses. import 'package:start/start.dart';  void main() {   start(port: 3000).then((Server app) {      app.static('web');      app.get('/hello/:name.:lastname?').listen((request) {       request.response         .header('Content-Type', 'text/html; charset=UTF-8')         .send('Hello, ${request.param('name')} ${request.param('lastname')}');     });      app.ws('/socket').listen((socket) {       socket.on('ping').listen((data) => socket.send('pong'));       socket.on('pong').listen((data) => socket.close(1000, 'requested'));     });    }); } API start() You start the server with start() function. It has 3 named arguments and returns Server future start({String host: '127.0.0.1', int port: 80}) Server listen(host, port) // start the server (it's performed by the start function) stop() // stops the server get|post|put|delete(String route) // adds a handler, returns a Stream<Request> ws(String route) // adds WebSocket handler, returns a Stream static(String path, {bool jail, bool listing, bool links}) // serves static files from `path`, follows symlinks outside the root if jail is false Routes Route is a string with placeholders like :firstname its value is available through the Request param() method. Placeholders should start with colon :, if placeholder ends with a question mark ? it's optional. ""/hello/:firstname.:lastname?"" will match ""/hello/john"" and ""/hello/john.doe"" Request header(String name) // get header accepts(String type) // check accept header input // raw HttpRequest stream path // requested URI path uri // requested URI cookies // provided cookies param(String name) // get query param by name payload(Encoding enc) // get a promise with a Map of request body params Response header(String name, [value]) // get or set header get(String name) // get header set(String name) // set header type(contentType) // set Content-Type cache(String cacheType) // set Cache-Control status(code) // sets response status code cookie(name, val) // sets cookie add(string) // add a string to response close() // closes response send(string) // sends string and closes response json(Map data) // stringifies map and sends it jsonp(String name, Map data) // stringifies map and sends it in callback as `name(data)` render(viewName, [Map params]) // renders server view Socket send(message) // sends message on(message, action) // adds handler to message close(status, reason) // closes socket License (The MIT License) Copyright (c) 2012 Yehor Lvivski lvivski@gmail.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/lvivski/start"	"Sinatra inspired web framework to serve static files, handle dynamic requests, websockets and create JSON responses."	"true"
"Server Frameworks"	"Express"	"https://github.com/dartist/express"	"A simple, thin expressjs inspired layer around Dart's primitive HttpServer APIs."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"99"	"8"	"10"	"GitHub - dartist/express: A thin express-js inspired layer around Dart's primitive HttpServer APIs Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 99 Fork 10 dartist/express Code Issues 5 Pull requests 0 Pulse Graphs A thin express-js inspired layer around Dart's primitive HttpServer APIs 68 commits 1 branch 0 releases Fetching contributors Dart 94.9% CSS 5.1% Dart CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit f1d88d9 Sep 18, 2014 mythz Merge pull request #22 from DisDis/master … fix Dart 1.6, Iterable<Module> -> Iterable<Formatter> Permalink Failed to load latest commit information. lib fix Dart 1.6, Iterable<Module> -> Iterable<Formatter> Sep 18, 2014 test Merge branch 'master' of github.com:dartist/express May 10, 2014 .children Change API to allow chaining, remove redundant param(), start adding … May 22, 2012 .gitignore fix Dart 1.6, Iterable<Module> -> Iterable<Formatter> Sep 18, 2014 .gitmodules Removed submodule dependency Jan 19, 2013 .project Add Mixin as a Submodule and fill in README May 18, 2012 LICENSE Add LICENSE Jul 1, 2013 README.md - Added possibility to add middleware to your routes Jul 26, 2014 jade_build.dart INCR to v0.1.1 Jul 5, 2013 pubspec.lock - Added ctx.body for post params Jul 19, 2014 pubspec.yaml Improve logging and dependencies May 11, 2014 README.md Dart Express A simple, thin expressjs inspired layer around Dart's primitive HttpServer APIs. Also included is a single static file server module. This library will eventually expand to help with other common usage patterns and features as and when needed. Installing via Pub Add this to your package's pubspec.yaml file: dependencies:   express: 0.1.6  Example Usages Basic Jade and Express app import ""package:jaded/jaded.dart""; import ""package:express/express.dart""; import ""dart:io"";  import ""views/jade.views.dart"" as views; import ""public/jade.views.dart"" as pages;  main(){   int counter = 0;   var app = new Express()     ..use(new JadeViewEngine(views.JADE_TEMPLATES, pages:pages.JADE_TEMPLATES))     ..use(new StaticFileHandler(""public""))      ..get('/', (ctx){       ctx.render('index', {'title': 'Home'});     })      ..get('/error', (ctx){       throw new ArgumentError(""custom error in handler"");     })      ..get('/counter', (ctx){       ctx.sendJson({'counter': counter++});     });    app.listen(""127.0.0.1"", 8000); } Static files used by this app /public /stylesheets style.css layout.jade - layout for .jade pages called directly (i.e. no explicit route required) layout-plain.jade - an alternative layout used by page.jade static.jade - a static home page page.jade - another page with layout-plain and inline :markdown content links.md - a markdown partial jade.yaml - tell express to watch and pre-compile .jade views in this directory jade.views.dart - the auto-generated pre-compiled .jade views for this directory /views layout.jade index.jade links.md - a markdown partial jade.yaml - tell express to watch and pre-compile .jade views in this directory jade.views.dart - the auto-generated pre-compiled .jade views for this directory Pre-compile .jade views on save This example uses the Dart Editor build.dart Build System to compile all .jade views in any directory that contains an empty jade.yaml file. To trigger this in your project add this to your projects /build.dart file: import ""package:express/express_build.dart"" as express;  main(){   express.build(); } Add middleware methods to a route It happens that a developer has to check if a user is signed in or if the call to an API endpoint is valid. This is where middleware kicks in. In the following example, you can find a middleware method that checks if the user is signed in. The first line of the method should be replaced by the really checking if the user is signed in. import 'package:express/express.dart';  main(){   var app = new Express()     ..get('/', (ctx){       // render the homepage       ctx.sendJson({'homepage': true});     })      ..get('/dashboard').then(isSignedIn).then((ctx){       // render the dashboard       ctx.sendJson({'dashboard': true});     });    app.listen(""127.0.0.1"", 8000); }  bool isSignedIn(HttpContext ctx) {   bool signedIn = true;    if(!signedIn) {     ctx.res.redirect(new Uri(path: '/'));   }    return signedIn; } As you can see, you can just chain the handlers with the then() method. The middlewares should return a boolean indicating if we should continue to the next method or if we should stop executing. Backbone Todo's JSON Server This is an example of an Redis-powered REST backend Backbones.js demo TODO application: var client = new RedisClient();  var app = new Express(); app   .use(new StaticFileHandler())    ..get(""/todos"", (HttpContext ctx){     redis.keys(""todo:*"").then((keys) =>       redis.mget(keys).then(ctx.sendJson)     );   })    ..get(""/todos/:id"", (HttpContext ctx){     var id = ctx.params[""id""];     redis.get(""todo:$id"").then((todo) =>       todo != null ?         ctx.sendJson(todo) :         ctx.notFound(""todo $id does not exist"")     );   })    ..post(""/todos"", (HttpContext ctx){     ctx.readAsJson().then((x){       redis.incr(""ids:todo"").then((newId){         var todo = $(x).defaults({""content"":null,""done"":false,""order"":0});         todo[""id""] = newId;         redis.set(""todo:$newId"", todo);         ctx.sendJson(todo);       });     });   })    ..put(""/todos/:id"", (HttpContext ctx){     var id = ctx.params[""id""];     ctx.readAsJson().then((todo){       redis.set(""todo:$id"", todo);       ctx.sendJson(todo);     });   })    ..delete(""/todos/:id"", (HttpContext ctx){     redis.del(""todo:${ctx.params['id']}"");     ctx.send();   });    app.listen(""127.0.0.1"", 8000); API Register encapsulated Modules like StaticFileHandler abstract class Module {   void register(Express server); } The signature your Request Handlers should implement: typedef void RequestHandler (HttpContext ctx); The core Express API where all your Apps modules and request handlers are registered on. Then when the server has started, the request handler of the first matching route found will be executed. abstract class Express {   factory Express() = _Express;    //Sets a config setting   void config(String name, String value);    //Gets a config setting   String getConfig(String name);    //Register a module to be used with this app   Express use(Module module);    //Register a request handler that will be called for a matching GET request   Route get(String atRoute, [RequestHandler handler]);    //Register a request handler that will be called for a matching POST request   Route post(String atRoute, [RequestHandler handler]);    //Register a request handler that will be called for a matching PUT request   Route put(String atRoute, [RequestHandler handler]);    //Register a request handler that will be called for a matching DELETE request   Route delete(String atRoute, [RequestHandler handler]);    //Register a request handler that will be called for a matching PATCH request   Route patch(String atRoute, [RequestHandler handler]);    //Register a request handler that will be called for a matching HEAD request   Route head(String atRoute, [RequestHandler handler]);    //Register a request handler that will be called for a matching OPTIONS request   Route options(String atRoute, [RequestHandler handler]);    //Register a request handler that handles ANY verb   Route any(String atRoute, [RequestHandler handler]);    //Register a custom request handler. Execute requestHandler, if matcher is true.   //If priority < 0, custom handler will be executed before route handlers, otherwise after.    void addRequestHandler(bool matcher(HttpRequest req), void requestHandler(HttpContext ctx), {int priority:0});    //Alias for registering a request handler matching ANY verb   void operator []=(String atRoute, RequestHandler handler);    //Can any of the registered routes handle this HttpRequest   bool handlesRequest(HttpRequest req);    // Return true if this HttpRequest is a match for this verb and route   bool isMatch(String verb, String route, HttpRequest req);    // When all routes and modules are registered - Start the HttpServer on host:port   Future<HttpServer> listen([String host, int port]);    //render a view   void render(HttpContext ctx, String viewName, [dynamic viewModel]);    /// Permanently stops this [HttpServer] from listening for new connections.   /// This closes this [Stream] of [HttpRequest]s with a done event.   void close(); } A high-level object encapsulating both HttpRequest and HttpResponse objects providing useful overloads for common operations and usage patterns. abstract class HttpContext implements HttpRequest {   //Context   String routePath;   HttpRequest  req;   HttpResponse res;   Map<String,String> get params;   Map<String,String> get body;    //Read APIs   String get contentType;   Future<List<int>> readAsBytes();   Future<String> readAsText([CONV.Encoding encoding]);   Future<Object> readAsJson({CONV.Encoding encoding});   Future<Object> readAsObject([CONV.Encoding encoding]);    //Write APIs   String get responseContentType;   void set responseContentType(String value);   HttpContext head([int httpStatus, String statusReason, String contentType, Map<String,String> headers]);    HttpContext write(Object value, {String contentType});   HttpContext writeText(String text);   HttpContext writeBytes(List<int> bytes);    //Overloads for sending different content responses    void send({Object value, String contentType, int httpStatus, String statusReason});   void sendJson(Object value, {int httpStatus, String statusReason});   void sendHtml(Object value, [int httpStatus, String statusReason]);   void sendText(Object value, {String contentType, int httpStatus, String statusReason});   void sendBytes(List<int> bytes, {String contentType, int httpStatus, String statusReason});    //Custom Status responses   void notFound([String statusReason, Object value, String contentType]);    //Format response with the default renderer   void render(String, [dynamic viewModel]);    //Close and mark this request as handled    void end();    //If the request has been handled   bool get closed; } Modules JadeViewEngine Register the jaded view engine to render HTML .jade views. Supports both controller view pages and static page .jade templates. app.use(new JadeViewEngine(views.JADE_TEMPLATES, pages:pages.JADE_TEMPLATES)) Usage app.get('/', (HttpContext ctx){   ctx.render('index', {'title': 'Home'}); }) Renders the /views/index.jade view with the {'title': 'Home'} view model. A request without a matching route, e.g: GET /page  Will execute the /public/page.jade template, passing these HTTP request vars as the viewModel: Map viewModel = {   'method': req.method,   'uri': req.uri,   'headers': req.headers,   'request': req,   'response': req.response, } StaticFileHandler Serve static files for requests that don't match any defined routes: app.use(new StaticFileHandler('public')); Serves static files from the /public folder. Other APIs // Register different Formatters abstract class Formatter implements Module {   String get contentType;   String get format => contentType.split(""/"").last;   String render(HttpContext ctx, dynamic viewModel, [String viewName]); }  // The loglevel for express int logLevel = LogLevel.Info;  // Inject your own logger, sensitive on logtypes (error, warning...) typedef Logger(Object obj, {int logtype}); Logger logger = (Object obj, {int logtype}) => print(obj); Contributors mythz (Demis Bellot) financeCoding (Adam Singer) SamVerschueren (Sam Verschueren) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dartist/express"	"A simple, thin expressjs inspired layer around Dart's primitive HttpServer APIs."	"true"
"Server Frameworks"	"Shelf"	"https://pub.dartlang.org/packages/shelf"	"Shelf makes it easy to create and compose web servers and parts of web servers."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"32"	"37"	"14"	"GitHub - dart-lang/shelf: Web server middleware for Dart Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 37 Star 32 Fork 14 dart-lang/shelf Code Issues 11 Pull requests 1 Pulse Graphs Web server middleware for Dart https://pub.dartlang.org/packages/shelf 69 commits 3 branches 17 releases Fetching contributors Dart 99.7% Shell 0.3% Dart Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags logging_shelf_io_issue2 master travis_ci_fails Nothing to show 0.6.5+2 0.6.5+1 0.6.5 0.6.4+3 0.6.4+2 0.6.4+1 0.6.4 0.6.3+1 0.6.3 0.6.2+1 0.6.2 0.6.1+3 0.6.1+2 0.6.1+1 0.6.1 0.6.0 0.5.7 Nothing to show New pull request Latest commit cdfe101 May 5, 2016 nex3 Support the latest http_parser. … R=kevmoo@google.com  Review URL: https://codereview.chromium.org//1951173003 . Permalink Failed to load latest commit information. example use async and enable compression in example Feb 2, 2016 lib Fix all strong-mode warnings and errors. May 4, 2016 test Fix all strong-mode warnings and errors. May 4, 2016 tool test browsers on Travis-CI Mar 3, 2016 .analysis_options Fix all strong-mode warnings and errors. May 4, 2016 .gitignore Add 'body' named argument to Request/Response change method Jul 6, 2015 .test_config Use the test runner on the bots. Jul 16, 2015 .travis.yml travis-ci: test all supported Dart SDK versions May 3, 2016 CHANGELOG.md Support the latest http_parser. May 5, 2016 LICENSE pkg/shelf Apr 1, 2014 README.md Add a Server interface. Oct 26, 2015 codereview.settings pkg/shelf: formatted code Jan 20, 2015 pubspec.yaml Support the latest http_parser. May 5, 2016 README.md Web Server Middleware for Dart Introduction Shelf makes it easy to create and compose web servers and parts of web servers. How? Expose a small set of simple types. Map server logic into a simple function: a single argument for the request, the response is the return value. Trivially mix and match synchronous and asynchronous processing. Flexibility to return a simple string or a byte stream with the same model. Example See example/example_server.dart import 'package:shelf/shelf.dart' as shelf; import 'package:shelf/shelf_io.dart' as io;  void main() {   var handler = const shelf.Pipeline().addMiddleware(shelf.logRequests())       .addHandler(_echoRequest);    io.serve(handler, 'localhost', 8080).then((server) {     print('Serving at http://${server.address.host}:${server.port}');   }); }  shelf.Response _echoRequest(shelf.Request request) {   return new shelf.Response.ok('Request for ""${request.url}""'); } Handlers and Middleware A handler is any function that handles a shelf.Request and returns a shelf.Response. It can either handle the request itself--for example, a static file server that looks up the requested URI on the filesystem--or it can do some processing and forward it to another handler--for example, a logger that prints information about requests and responses to the command line. The latter kind of handler is called ""middleware"", since it sits in the middle of the server stack. Middleware can be thought of as a function that takes a handler and wraps it in another handler to provide additional functionality. A Shelf application is usually composed of many layers of middleware with one or more handlers at the very center; the shelf.Pipeline class makes this sort of application easy to construct. Some middleware can also take multiple handlers and call one or more of them for each request. For example, a routing middleware might choose which handler to call based on the request's URI or HTTP method, while a cascading middleware might call each one in sequence until one returns a successful response. Middleware that routes requests between handlers should be sure to update each request's handlerPath and url. This allows inner handlers to know where they are in the application so they can do their own routing correctly. This can be easily accomplished using Request.change(): // In an imaginary routing middleware... var component = request.url.pathComponents.first; var handler = _handlers[component]; if (handler == null) return new Response.notFound(null);  // Create a new request just like this one but with whatever URL comes after // [component] instead. return handler(request.change(script: component)); Adapters An adapter is any code that creates shelf.Request objects, passes them to a handler, and deals with the resulting shelf.Response. For the most part, adapters forward requests from and responses to an underlying HTTP server; shelf_io.serve is this sort of adapter. An adapter might also synthesize HTTP requests within the browser using window.location and window.history, or it might pipe requests directly from an HTTP client to a Shelf handler. When implementing an adapter, some rules must be followed. The adapter must not pass the url or handlerPath parameters to new shelf.Request; it should only pass requestedUri. If it passes the context parameter, all keys must begin with the adapter's package name followed by a period. If multiple headers with the same name are received, the adapter must collapse them into a single header separated by commas as per RFC 2616 section 4.2. An adapter must handle all errors from the handler, including the handler returning a null response. It should print each error to the console if possible, then act as though the handler returned a 500 response. The adapter may include body data for the 500 response, but this body data must not include information about the error that occurred. This ensures that unexpected errors don't result in exposing internal information in production by default; if the user wants to return detailed error descriptions, they should explicitly include middleware to do so. An adapter should include information about itself in the Server header of the response by default. If the handler returns a response with the Server header set, that must take precedence over the adapter's default header. An adapter should include the Date header with the time the handler returns a response. If the handler returns a response with the Date header set, that must take precedence. An adapter should ensure that asynchronous errors thrown by the handler don't cause the application to crash, even if they aren't reported by the future chain. Specifically, these errors shouldn't be passed to the root zone's error handler; however, if the adapter is run within another error zone, it should allow these errors to be passed to that zone. The following function can be used to capture only errors that would otherwise be top-leveled: /// Run [callback] and capture any errors that would otherwise be top-leveled. /// /// If [this] is called in a non-root error zone, it will just run [callback] /// and return the result. Otherwise, it will capture any errors using /// [runZoned] and pass them to [onError]. catchTopLevelErrors(callback(), void onError(error, StackTrace stackTrace)) {   if (Zone.current.inSameErrorZone(Zone.ROOT)) {     return runZoned(callback, onError: onError);   } else {     return callback();   } } An adapter that knows its own URL should provide an implementation of the Server interface. Inspiration Connect for NodeJS. Read this great write-up to understand the overall philosophy of all of these models. Rack for Ruby. WSGI for Python. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dart-lang/shelf"	"Shelf makes it easy to create and compose web servers and parts of web servers."	"true"
"Server Frameworks"	"shelf_"	"https://pub.dartlang.org/search?q=shelf_"	"There are many packages written for Shelf. By convention they start with"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Search results for shelf_. dartlang.org pub.dartlang.org Getting Started Docs Getting Started Dependencies Pubspec Format Package Layout Conventions Assets and Transformers Reference FAQ Glossary Versioning Philosophy Commands Pub Commands pub build pub cache pub deps pub get pub global pub publish pub run pub serve pub upgrade pub uploader Packages Search Results for “shelf_” shelf 0.6.5+2 Web Server Middleware for Dart last updated May 5, 2016 shelf_route 0.14.2 Routing middleware for Shelf last updated Apr 10, 2016 shelf_rest 0.3.4 Shelf components that makes it easy to create uniform, hierarchical REST resources. last updated Apr 10, 2016 shelf_auth 0.7.2 A shelf handler for authentication and authorisation last updated Apr 10, 2016 shelf_bind 0.9.3 A binding handler for shelf last updated Apr 10, 2016 shelf_static 0.2.4 Static file server support for Shelf last updated Jul 6, 2016 shelf_path 0.1.8 Path parameter helpers for Shelf last updated Apr 10, 2016 shelf_proxy 0.1.0+4 A shelf handler for proxying requests to another server. last updated May 9, 2016 shelf_cors 0.2.1 Middleware to add CORS headers to shelf responses. last updated Mar 27, 2015 shelf_exception_response 0.1.1 Shelf middleware that provides the abillity to simply throw an HttpException that gets converted to an appropriate response code and a formatted response body dependent on the clients accept header. last updated Nov 5, 2014 « 1 2 3 4 5 6 » Dart Language — Site Map — Terms of Service — Privacy Policy π"	"null"	"null"	"There are many packages written for Shelf. By convention they start with"	"true"
"Server Frameworks"	"Force"	"https://github.com/ForceUniverse/dart-force"	"A real time web framework, embracing websockets, making communication even better"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"75"	"13"	"10"	"GitHub - ForceUniverse/dart-force: Dart Realtime Web Framework! Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 13 Star 75 Fork 10 ForceUniverse/dart-force Code Issues 4 Pull requests 0 Wiki Pulse Graphs Dart Realtime Web Framework! https://pub.dartlang.org/packages/force 672 commits 4 branches 25 releases Fetching contributors Dart 98.7% Other 1.3% Dart Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags experimental gh-pages master transformers Nothing to show v0.7.0 v0.6.5 v0.6.4 v0.6.3 v0.6.2 v0.6.1 v0.6.0 v0.5.6 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.4.2 v0.4.1 v0.4.0 v0.3.6 v0.3.5 v0.3.4 v0.3.2 v0.3.1 0.5.7 0.5.0 0.3.7 0.3.0 Nothing to show New pull request Latest commit 944e144 Jul 4, 2016 jorishermans update to the latest forcemvc Permalink Failed to load latest commit information. example remove unused imports Mar 11, 2016 lib improve the test library of dart-force Jun 19, 2015 resources sizing logo Dec 19, 2013 test formalize cargo tests Jul 4, 2015 .gitattributes adding first commit on github Dec 13, 2013 .gitignore update pubspec.yaml to newer versions Apr 14, 2016 .packages updating dependencies Feb 22, 2016 AUTHORS adding contributors Jun 15, 2014 CHANGELOG.md update to the latest forcemvc Jul 4, 2016 LICENSE license update Mar 11, 2014 pubspec.yaml update to the latest forcemvc Jul 4, 2016 readme.md update readme Apr 15, 2016 walkthrough.md updating the readme.md to the essentials May 8, 2015 readme.md Dart Force Framework A realtime web framework for dart. With this framework communication between client and server becomes easy, without any boilerplate code. Introduction Dart Force is a Realtime web framework for Dart. We will make it easy for you to create realtime applications with it in Dart, like a chat, interactive dashboard, multiplayer games, ... How does it work? Serverside First of all you need a server to handle incoming messages and dispatch or handle this messages correctly. import ""package:force/force_serverside.dart"";  ForceServer fs = new ForceServer();  main() async{   fs.server.use(""/"", (req, model) => ""dartforcetodo"");   await fs.start();    fs.on(""add"", (vme, sender) {      fs.send(""update"", vme.json);   });  } Clientside The client can listen to messages: ForceClient fc; void main() {   fc = new ForceClient();   fc.connect();    fc.onConnected.listen((e) {     fc.on(""update"", (fme, sender) {       querySelector(""#list"").appendHtml(""<div>${fme.json[""todo""]}</div>"");     });   }); } You can also send messages: InputElement input = querySelector(""#input""); var data = {""todo"": input.value}; fc.send(""add"", data); It is a little bit inspired by socket.io for the communication flow. Dart Force mvc access (routing) You have access to the force mvc webserver if you do the following:   forceServer.server.on(url, controllerHandler, method: 'GET'); or just create a controller class. For more info go to the project page of force mvc Shelf integration You can very easily use the power of Force into the shelf stack by using shelf_web_socket package and then use the following code, so that force can interpret the websocket stream of shelf.    Force force = new Force();    var _handlerws = webSocketHandler((webSocket) => force.handle(new StreamSocket(webSocket))); More info on the wiki page Quick starter guide This guide can help you to get you started! Getting started Reference Long polling Communication flow Profile management Annotations ForceMVC: Serverside routing, similar too spring mvc Authentication Google AppEngine Connectors Server 2 Server Communication Custom protocols Clientside DB API Look at our wiki for more info or this info below. Examples You can find a lot of examples in the force examples organisation Links to some examples that I made with this framework. chat - source code polymer example - source code Development trick Following the next steps will make it easier for you to develop, this allows you to adapt clientside files and immidiatly see results without doing a pub build. pub serve web --hostname 0.0.0.0 --port 7777 && export DART_PUB_SERVE=""http://localhost:7777"" && pub run bin/server.dart  Server 2 Server It is also possible to do server 2 server communication. You can find the more info here or you can watch the video Notes to Contributors Fork Dart Force If you'd like to contribute back to the core, you can fork this repository and send us a pull request, when it is ready. If you are new to Git or GitHub, please read this guide first. Twitter Follow us on twitter https://twitter.com/usethedartforce Google+ Follow us on google+ or join our G+ Community Screencast tutorial Screencast todo tutorial about the dart force realtime functionality on youtube Join our discussion group Google group Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/ForceUniverse/dart-force"	"A real time web framework, embracing websockets, making communication even better"	"true"
"Server Frameworks"	"Vane"	"https://github.com/Scorpiion/Vane"	"Framework with built-in server runtime environment and middleware system"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"19"	"2"	"6"	"GitHub - Scorpiion/vane: Server-side framework for Dart/Dartlang with a built-in middleware system. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 19 Fork 6 Scorpiion/vane Code Issues 10 Pull requests 1 Pulse Graphs Server-side framework for Dart/Dartlang with a built-in middleware system. 158 commits 1 branch 0 releases Fetching contributors Dart 100.0% Dart Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit b91a7ca May 11, 2016 Scorpiion Pub update Permalink Failed to load latest commit information. lib Added so render engine is detected if not specified May 11, 2016 .gitignore Save Dec 4, 2015 CHANGELOG.md Pub update May 11, 2016 LICENSE Moved core vane package back to top level again. Dec 4, 2015 README.md Moved core vane package back to top level again. Dec 4, 2015 pubspec.yaml Pub update May 11, 2016 README.md Vane Vane is server side framework written and optimized for the Dart programming language. Vane comes bundled with a lightweight and performant middleware system and strives to provide commonly used parameters and objects in an easy to use manner such as query parameters or json body data. Summary Supports three handler types; Func, Podo and Vane Class based, easy to make your own standard classes by extending any Podo or Vane class and adding your own behavior Simple top level access to commonly used data such as query parameters, json body or file uploads Out of the box websocket support Any Vane class can run as the main controller or as a middleware Middlewares can be defined to run synchronously or asynchronously, before or after the main controller Built in ""plug and play"" support for Mongodb Handlers Vane supports three different types of handlers: Vane handlers - Classes that extend the Vane class Podo handlers - ""Plain Old Dart Objects"", normal classes that have one or more functions with the @Route annotation Func handlers - Function handlers, normal dart function with the @Route annotation Vane handler A vane handler is any class that extends the Vane class. When you extend the Vane class your handler functions get access to many helpers and features that are part of the Vane framework. In a vane handler you have access to a set of top level helpers to make life easier, some example of these are a ready to use parsed version of incoming json data called ""json"". A Vane class can either run on it's own or in a pipeline of a set of Vane controllers. When mulitple a Vane controller is used in a pipeline to process a request those other than the main controller are called middleware controllers, but it's not a different type of controller and middleware controllers can themself also have their own middleware controllers. Inside a Vane controller you can either end the controller by returning next() or close(), if you return with next() the next middleware controller will run (if there is one, otherwise the call will be changed to a close() call). If you call close() that will end the request even if there are middleware controllers that have yet not run. Vane classes registered to as middleware can run either before or after the main controller. Middleware controllers can run synchronously or asynchronously and you are guaranteed that they execute in the order you define. Per default middleware controllers run synchronously and the next controller only starts when the current one has finished. You can choose to run one or more middleware controllers in async and also combine both a set of synchronous and asynchronous controller to create more complex pipelines for processing. Hello World Example: class HelloVane extends Vane {   @Route(""/"")   Future World() {      return close(""Hello world! (from vane handler)"");   } } Middleware Example: class HelloVane extends Vane {   var pipeline = [MyMiddleware, This]   @Route(""/"")   Future World() {      return close(""Hello world! (from vane handler)"");   } }  class MyMiddleware extends Vane {   Future main() {      write(""Hello from middleware!"");     return next();   } } Podo handler A podo handler is a ""Plain Old Dart Object"", basically any Dart class that have 1 or more function handlers with declared with the @Route annotation. Hello World Example: class HelloPodo {   @Route(""/"")   void World(HttpRequest request) {     request.response.write(""Hello World! (from podo handler)"");     request.response.close();   } } Func handler A function handler is simple a function that takes at least 1 HttpRequest parameter and optionally 1 or more parameters that can be mapped from the url. Hello World Example: @Route(""/"") void helloFuncWorld(HttpRequest request) {   request.response.write(""Hello World! (from func handler)"");   request.response.close(); } Vane server (server.dart) With Vane you don't have to worry about writing a dart/web server, you focus on writing your controllers/handlers and Vane serves them for you automatically based on your @Route annotations. All you need to do is to make sure they are in the same library and that you start the serve function. Hello World with a Vane handler import 'dart:async'; import 'package:vane/vane.dart';  class HelloWorld extends Vane {   @Route(""/"")   Future Hello() {     return close(""Hello world"");   } }  void main() => serve(); Example with all three types of handlers import 'dart:io'; import 'dart:async'; import 'package:vane/vane.dart';  class HelloVane extends Vane {   @Route(""/"")   @Route(""/vane"")   Future World() {     return close(""Hello world! (from vane handler)"");   }    @Route(""/{user}"")   @Route(""/vane/{user}"")   Future User(String user) {     return close(""Hello ${user}! (from vane handler)"");   } }  class HelloPodo {   @Route(""/podo"")   void World(HttpRequest request) {     request.response.write(""Hello World! (from podo handler)"");     request.response.close();   }    @Route(""/podo/{user}"")   void User(HttpRequest request, String user) {     request.response.write(""Hello World $user! (from podo handler)"");     request.response.close();   } }  @Route(""/func"") void helloFuncWorld(HttpRequest request) {   request.response.write(""Hello World! (from func handler)"");   request.response.close(); }  @Route(""/func/{user}"") void helloFuncUser(HttpRequest request, String user) {   request.response.write(""Hello World $user! (from func handler)"");   request.response.close(); }  void main() => serve(); Documentation, examples and roadmap Official project page and documentation API documentation Github project Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/Scorpiion/Vane"	"Framework with built-in server runtime environment and middleware system"	"true"
"Server Frameworks"	"Rikulo Stream"	"https://github.com/rikulo/stream"	"Lightweight web server with request routing, filtering, template engine, WebSocket, MVC design pattern, and file-based static resources"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"122"	"15"	"21"	"GitHub - rikulo/stream: Lightweight Dart web server. Features: request routing, filtering, template engine, WebSocket, MVC design pattern, and file-based static resources. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 15 Star 122 Fork 21 rikulo/stream Code Issues 2 Pull requests 0 Pulse Graphs Lightweight Dart web server. Features: request routing, filtering, template engine, WebSocket, MVC design pattern, and file-based static resources. http://rikulo.org 337 commits 1 branch 0 releases Fetching contributors Dart 90.4% HTML 6.2% Shell 2.6% CSS 0.8% Dart HTML Shell CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 4572fcf Jun 1, 2016 tomyeh Minor optimize Permalink Failed to load latest commit information. .settings example lib test tool .gitattributes .gitignore Upgrade to new HttpServer.bindSecure() api Mar 14, 2016 CHANGES.md LICENSE initial Jan 10, 2013 README.md pubspec.yaml README.md Stream Stream is a Dart web server supporting request routing, filtering, template engine, WebSocket, MVC design pattern and file-based static resources. Home Documentation API Reference Discussion Git Repository Issues Stream is distributed under an Apache 2.0 License. Installation Add this to your pubspec.yaml (or create it): dependencies:   stream:  Usage Introduction Getting Started with Hello World Compile RSP (Rikulo Stream Page) to dart files There are two ways to compile RSP files into dart files: automatic building with Dart Editor or manual compiling. RSP is a template technology allowing developers to create dynamically generated web pages based on HTML, XML or other document types (such as this and this). Please refer to here for more information. Build with Dart Editor To compile your RSP files automatically, you just need to add a build.dart file in the root directory of your project, with the following content: import 'package:stream/rspc.dart'; void main(List<String> arguments) {   build(arguments); }  With this build.dart script, whenever your RSP is modified, it will be re-compiled. Compile Manually To compile a RSP file manually, run rspc (RSP compiler) to compile it into the dart file with command line interface as follows: tool/rspc.dart your-rsp-file(s)  A dart file is generated for each RSP file you gave. Or, you can use a Bash program, tool/rspc, to detect any change of RSP files and compile them automatically. Notes to Contributors Fork Stream If you'd like to contribute back to the core, you can fork this repository and send us a pull request, when it is ready. Please be aware that one of Stream's design goals is to keep the sphere of API as neat and consistency as possible. Strong enhancement always demands greater consensus. If you are new to Git or GitHub, please read this guide first. Who Uses Quire - a simple, collaborative, multi-level task management tool. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/rikulo/stream"	"Lightweight web server with request routing, filtering, template engine, WebSocket, MVC design pattern, and file-based static resources"	"true"
"Game Development"	"StageXL"	"http://www.stagexl.org/"	"StageXL offers an easy to use and complete API (based on the Flash API) for impressive 2D content like games and other rich applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"586"	"56"	"68"	"GitHub - bp74/StageXL: A fast and universal 2D rendering engine for HTML5 and Dart. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 56 Star 586 Fork 68 bp74/StageXL Code Issues 30 Pull requests 2 Wiki Pulse Graphs A fast and universal 2D rendering engine for HTML5 and Dart. http://www.stagexl.org 1,612 commits 8 branches 0 releases Fetching contributors Dart 100.0% Dart Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags 0.9.4 0.10.3 0.11.0 0.12.0 0.13.0 0.13.1 0.13.2 master Nothing to show Nothing to show New pull request Latest commit d0bfcaa Jun 18, 2016 bp74 Dispatch FlipBook complete event only once Permalink Failed to load latest commit information. doc Update getting_started.md Nov 14, 2014 lib Dispatch FlipBook complete event only once Jun 18, 2016 test enable more lints, fix methods missing return types Mar 20, 2016 .analysis_options Use Dart 1.17 and enable strong mode analysis Jun 9, 2016 .gitignore ignores packages/ in test dir Feb 8, 2016 .travis.yml Updated travis.yml Oct 25, 2015 AUTHORS.md Make sound engine configurable Jun 18, 2016 CHANGELOG.md Version 0.13.9 Jun 18, 2016 LICENSE.md Updated change log and license Jan 2, 2016 README.md Updated README Apr 3, 2016 pubspec.yaml Version 0.13.9+2 Jun 18, 2016 README.md StageXL StageXL is a fast and universal 2D rendering engine for HTML5 and Dart. It provides a wide range of features for 2D games and other graphically rich content. The WebGL based engine is highly optimized to reduce the number of draw calls sent to the GPU and therefore delivers top-class performance. The automatic fallback to a Canvas2D based engine guarantees compatibility with older browsers or legacy hardware. Some of the features provided by StageXL are: texture atlas support, draw call batching, pixel masking, pixel filters, pixel blending, texture filtering, hierarchical display list, sprite sheet animations, rich animation framework, audio and video support, interaction events, 3D transformations of 2D objects, resource management, text rendering and many other features as well as extensibility for even more features. Extension Libraries StageXL provides a rich set of built-in features. Even more advanced use cases may require an extension library with a specialised set of features. The number of extension libraries is growing over time, here is a list of the most popular StageXL extension libraries. Bitmap Fonts: https://github.com/bp74/StageXL_BitmapFont GAF Runtime: https://github.com/bp74/StageXL_GAF Spine Runtime: https://github.com/bp74/StageXL_Spine Toolkit Runtime: https://github.com/bp74/StageXL_Toolkit DragonBones Runtime: https://github.com/bp74/StageXL_DragonBones Flump Runtime: https://github.com/bp74/StageXL_Flump Particle Emitter: https://github.com/bp74/StageXL_Particle Rich Text Field: https://github.com/realbluesky/StageXL_RichTextField Getting Help The easiest way to get started or to accomplish a task is to ask questions. We are actively tracking the following websites and answer questions as fast as possible. We would like to get more FAQs on StackOverflow to help other developers to find answers quickly, therefore it would be great to get your questions on StackOverflow. StageXL Forum: https://groups.google.com/forum/#!forum/stagexl StageXL GitHub Issues: https://github.com/bp74/StageXL/issues StageXL StackOverflow: http://stackoverflow.com/questions/ask?tags=stagexl StageXL API Reference: http://www.stagexl.org/docs/api/index.html Examples We are working on more examples to covering a wider range of use cases. Please take a look at the StageXL samples repository for our ongoing work. Don't hesitate to send example requests that would help you to learn about a particular feature. GitHub repository: https://github.com/bp74/StageXL_Samples StageXL homepage: http://www.stagexl.org/samples Roadmap Besides improving our existing features and improving performance as much as possible, we are always thinking about new features we want to add next. Please send us your ideas and requests to make those things a reality you care about most. Some of the things we will tackle in the near future are: Getting closer to version 1.0. Runtime support for Tiled Map Editor. Support for Flutter (native runtime environment for Android). A new StageXL homepage with more articles / blog posts. Adobe Flash heritage StageXL started as an easy migration path for Adobe Flash developers and their products to HTML5. Therefore StageXL provides the same display list API you may have used in Flash for many years. Furthermore the Dart programming language is easy to use for everyone who is familiar with ActionScript. Toolkit for Dart: http://toolkitfordart.github.io ActionScript to Dart converter: https://github.com/blockforest/stagexl-converter-pubrun ActionScript to Dart comparison: http://www.stagexl.org/docs/actionscript-dart.html Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/bp74/StageXL"	"StageXL offers an easy to use and complete API (based on the Flash API) for impressive 2D content like games and other rich applications."	"true"
"Game Development"	"DartRocket"	"https://github.com/StrykerKKD/dartrocket"	"DartRocket is a HTML5 game framework written in Dart and which uses the StageXL rendering engine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"38"	"7"	"10"	"GitHub - StrykerKKD/dartrocket: HTML5 game framework made with Dart and StageXL Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 38 Fork 10 StrykerKKD/dartrocket Code Issues 2 Pull requests 0 Wiki Pulse Graphs HTML5 game framework made with Dart and StageXL 415 commits 1 branch 0 releases Fetching contributors Dart 97.8% HTML 2.2% Dart HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit cba4564 Apr 24, 2015 StrykerKKD Changes due to refactoring Permalink Failed to load latest commit information. example lib test .gitignore CHANGELOG.md LICENSE.md Initial commit May 2, 2014 README.md pubspec.yaml README.md DartRocket is a HTML5 Game Engine, which is written in Dart and uses the StageXL rendering engine. The main goal of this framework is to provide an easy to use solution for HTML5 game making with the Dart language. How to start? Please check out the wiki. For fast start you can use the basic template. You can find additional examples in the documentation and in the examples directory in dartrocket's github repo. Documentation DartRocket's Documentation on dartdocs.org. Support/Forum If you have any question or problem. Just make a topic and ask. DartRocket's forum Blog The Framework has a blog, which will provide information about how the development is going. Examples These example's build will be updated, when there is a new version of DartRocket. SpaceInvader shows a basic space invader game. StateMachine shows how the state manager work. MovementSystem shows how the sprite can move. You can move with w,a,s,d and you can rotate with q,e and you can accelerate with j,k. World-Camera shows how the camera works. You can move the ship with w,a,s,d, you can unfollow the ship with Space and you can move camera with cursors. Gravity shows the gravity system in the game. You can move the rectangle with w,a,s,d. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/StrykerKKD/dartrocket"	"DartRocket is a HTML5 game framework written in Dart and which uses the StageXL rendering engine."	"true"
"Game Development"	"Pixi Dart"	"https://github.com/FedeOmoto/pixi"	"A port of the pixi.js rendering engine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"18"	"2"	"2"	"GitHub - FedeOmoto/pixi: A port of the pixi.js rendering  engine to Dart. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 18 Fork 2 FedeOmoto/pixi Code Issues 1 Pull requests 0 Pulse Graphs A port of the pixi.js rendering engine to Dart. 17 commits 1 branch 0 releases Fetching contributors Dart 100.0% Dart Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit c470d52 Nov 28, 2014 Federico Omoto Update README Permalink Failed to load latest commit information. lib New Polygon class Nov 28, 2014 .gitignore Initial commit Jul 6, 2014 CHANGELOG.md Require SDK 1.8 Nov 28, 2014 LICENSE Initial commit Jul 6, 2014 README.md pubspec.yaml Update README Nov 28, 2014 README.md Pixi Dart A port of the pixi.js rendering engine to Dart. Demos http://FedeOmoto.github.io/pixi/ Demos source code Pub: http://pub.dartlang.org/packages/pixi_examples GitHub: https://github.com/FedeOmoto/pixi_examples/ Docs http://www.dartdocs.org/documentation/pixi_dart/0.2.0+3/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/FedeOmoto/pixi"	"A port of the pixi.js rendering engine."	"true"
"Game Development"	"Ranger"	"https://github.com/wdevore/Ranger-Dart"	"A game engine centered around HTML5 Canvas and a scene graph."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12"	"2"	"1"	"GitHub - wdevore/Ranger-Dart: Game engine written in Dart Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 12 Fork 1 wdevore/Ranger-Dart Code Issues 0 Pull requests 0 Pulse Graphs Game engine written in Dart 228 commits 1 branch 0 releases Fetching contributors Dart 100.0% Dart Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit 827d36d Jun 17, 2015 wdevore adjusting viewport aabb Permalink Failed to load latest commit information. .pub/bin docs lib adjusting viewport aabb Jun 17, 2015 .gitignore LICENSE README.md updated to include audio Nov 29, 2014 pubspec.yaml adjusting viewport aabb Jun 17, 2015 README.md Ranger-Dart - v0.9.5 Beta Contents: About Screen shots Features Getting started Libraries (Pubs) Folder layout Documentation Google Blog Author License RoadMap TODOs Further reading Showcases Contributing About Ranger-Dart (Ranger for short) is a game engine written in Dart and slightly modeled after an older version of Cocos2d-js 1.x. Ranger is actually two projects: this project and Ranger-Sack (Sack for short). Ranger is the core piece needed to create games. The Sack isn't needed at all, it simply serves as a goto place for examples covering apps, templates and unit tests. If you have ever worked with Cocos2D-js then you will recognize a fair amount of the examples. However, several things have changed, most notebly Animations and Messaging. Initially Ranger's code base was structured similar to Cocos2d. However, after using Dart design patterns and libraries (aka Pubs) the code base diverged and has changed considerably. The only concepts remaining are Scenes, Layers and Scheduler. Ranger is a game engine currently centric around an HTML5-Canvas and a Scene graph. Rendering of the scene graph is rendered via a Context of type CanvasRenderingContext2D. In the future the WebGLRenderingContext will be supported. Screen shots Ranger in action via Sack: ScreenShots and videos Features Scene graph (heirarchical spatial organization) including space mappings. Animations using Universal Tween Engine Pub by Xavier Guzman. Message system using EventBus Pub by Marco Jakob. Pooling ported from Dartemis: Entity System Framework Pub by Dennis Kaselow. Sprites and sprite sheets. (PNG, SVG etc...) Particle systems. Html5 Canvas rendering. Design resolution that is independent of device resolution. Scene transitions. Optional Updates-per-second for slower devices. Examples, starter templates and Unit tests. Note: if you are interested in an Entity System approach to game development consider Dartemis. It is based off the concept of Data Oriented Design (DOD). Ranger has the ability to add ""systems"" and feed timing to them so you can effectively code in a hybrid design where some of your code is hierarchical through a scene graph and other portions are more ""linear-ish"" through DOD. For further reference Artemis. Getting started Where to start? Easy, just follow these steps: Download the Dart SDK and install it. If you are on a Mac then it is as easy as installing the .dmg. Go to GitHub and download Ranger-Sack. To do that choose to either Clone in Desktop or Download ZIP. If choose the Zip option then uncompress it to a location of your choosing. You should now have a folder called ""Ranger-Sack"". Launch the Dart Editor that came with the SDK. In the editor navigate to the file menu and choose Open Existing Folder. Navigate to the location of either the uncompressed Zip or The local Git repository that you cloned to your ""desktop"". With the project open, run one of the Templates called ""level0"" Navigate into the ""level0"" template folder located under: web/     applications/         templates/             level0  Right-click on level0.html and choose Run in Dartium. Once Dartium (which comes with the SDK) has launched it will automatically navigate to ""http://localhost:8080/applications/templates/level0/level0.html"" and start running. First you will see a splash scene for 3 seconds and then instaneously transition to a GameLayer with dark blue text displaying ""Ranger GameLayer"" on a dark grey background. 7. Congratulations. You have successfully installed and ran Ranger! Libraries (Pubs) Ranger relies on several Dart Pubs. EventBus by Marco Jakob Tween Engine by Xavier Guzman Vector Math by John McCutchan Browser. Every Dartium app relies on this Pub. Sack relies on Ranger libraries plus several other Pubs color_slider_control gradient_colorstops_control lawndart by Seth Ladd. Folder layout Ranger is a Pub and the core code is located under the lib folder. Here is a brief overview: lib/     ranger/         animation/      -- Tween animation wrapper/helper         audio/          -- AudioEffects. Classic arcade style         core/           -- Pooling and timing (aka the Scheduler)         geometry/       -- (Optional) Basic geometric shapes         mixins/         -- Color, Input behaviors         nodes/          -- The main visuals (Scenes, Layers etc...)         particles/      -- (Optional) particle systems         physics/        -- (Optional) Velocity         rendering/      -- DrawContext (includes default implementations.)         resources/      -- Imageloading and Embedded Base64 resources         sprites/        -- Includes Canvas implementations         utilities/      -- Misc  Basically there are 4 critical folders that matter when developing a game: animation, core, mixins and nodes. Other than that you are not required to use anything else. geometry, particles, physics and even sprites are not required. The optional folders simply provide examples on how to build Nodes, and they are used mostly for the unit tests and templates. Documentation Getting started (Google doc) Nodes (Google doc) Animations (Google doc) Scene Graph (Google doc) Audio (Google doc) Development (--) -- NOT COMPLETE These docs are not directly related to Ranger. But they could help your game development. They are all a work in progress. Misc -- NOT COMPLETE Physics -- NOT COMPLETE Collision -- NOT COMPLETE Google Blog Ranger has a Blog where I periodically post statues. Author Hello, I am Will DeVore the current developer of Ranger and Sack. I find it a pleasure working with the Dart language. Its integration with HTML/CSS/Canvas/WebGL is solid and functional. License See MIT license TODOs Ranger's code is still sprinkled with TODOs. Most are minor in nature. Some of the top areas are: Performance. Things like String conversions in places where code runs in tight loops. Pause/Resume. I need to add the pause/resume code when Scenes are transitioning. An early version was present but once I replaced the old dispatch code with Dart's Streams that code became obsolete. Visibility of browser/tabs. When a tab or the whole browser focus is lost the engine needs to recognize this and pause. Accelerometer code. Several pieces of code should be optimized to check for dirty flag on transformations. I have slacked off is a few areas--in progress. A better more full proof way of handling Infinite animations. At the moment the developer needs to track the Infinite animations. If they are not ""killed"" then cycles are wasted as the animation continues to animate objects that may be gone or invisible. RoadMap There are still manys things that need to be done in Ranger. It will probably never really be complete, nonetheless, I have a list of things that I would like to add as time permits in no particular order. WebGL. Ranger has preliminary polymophic support to accomodate WebGL. It is quite possible that an underlying library will be used; perhaps the Three.dart Pub may be a viable candidate. Worst case is to follow something similar to Cocos2dx-3.x. Audio (for example: generated 8bit sound via WebAudio) Quad tree culling Physics with Box2D Pub Fullscreen support Textures. Assuming WebGL is added. Additional transition effects. Add things to the Ranger-Sack GitHub repository. This repo will hold extensions to Ranger. For example, collision, zooming, zones, tracking, UI-kit etc. Components. Note: The idea was brought up about UX design. Ranger doesn't enforce any particular approach, but at the same time it would be convenient to have a sample UI-kit that may provide a launching point for coding GUIs in their games. Ranger's Unit tests and Applications (RangerParticles, RangerRocket) use a hybrid approach at the moment. Some icons (of SVG type) use hit testing while pop out panels use HTML. Ranger's goal isn't to be an enforcer but enabler. Every game developer has an idea of what their UX should be and so there is no way a game engine could meet those expectations. Nonetheless, a sample UI-kit would provide ideas on howto wire things up and what options are possible. Further reading Dart language WebGL Html Canvas Core Html5 Canvas Cocos2D 3.0 Learning Cocos2D Showcases None at the moment. Contributing There is still a fair amount of stuff to do to make Ranger feature complete. Contributing to Ranger would be helpful as the spirit of Ranger is maintained. End. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/wdevore/Ranger-Dart"	"A game engine centered around HTML5 Canvas and a scene graph."	"true"
"Animation"	"Universal Tween Engine"	"https://github.com/xaguzman/tween-engine-dart"	"A port of the original java Universal Tween Engine created by Aurelien Ribbon."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"17"	"7"	"3"	"GitHub - xaguzman/tween-engine-dart: This is a dart port of the original java Universal Tween Engine created by Aurelien Ribbon Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 7 Star 17 Fork 3 xaguzman/tween-engine-dart Code Issues 1 Pull requests 0 Pulse Graphs This is a dart port of the original java Universal Tween Engine created by Aurelien Ribbon 60 commits 2 branches 5 releases Fetching contributors Dart 98.1% HTML 1.9% Dart HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show v0.11.1 v0.11.0 v0.10.2 v0.10.1 v0.10.0 Nothing to show New pull request Latest commit c73d9ef Apr 14, 2016 xaguzman Update readme.md Permalink Failed to load latest commit information. .pub/bin example undeprectaing repeatYoyo Aug 26, 2014 lib test updated tests to the new tests package Apr 14, 2016 .gitignore .packages .travis.yml updated tests to the new tests package Apr 14, 2016 AUTHORS CHANGELOG.md changed version to 0.11.1, changed all dependencies to be dev depende… Sep 11, 2014 LICENSE initial commit Jan 29, 2014 pubspec.yaml updated tests to the new tests package Apr 14, 2016 readme.md readme.md License Apache License 2.0 About This is a dart port of the original java Universal Tween Engine created by Aurelien Ribbon. This readme is an adaptation of the original's engine readme and includes how things are handled in the dart version of the engine. You can find a demo of the library here. The engine might have some bugs. Use at your own risk. Introduction The Universal Tween Engine enables the interpolation of every attribute from any object in any dart project (server or client side). Tweens are 'fire and forget'. Implementing Dart, unlike javascript, has no string accessors for objects, such as myObject['myProperty']. Reflection methods are still under development in Dart, and they will be slow. So, there are two ways of telling the engine which properties you want to tween. The first one is very useful if you do not have control over the class you want to tween a property of. The second one is a bit less verbose but requires code in the class you want to tween. Using TweenAccessor Create an accessor that implements the TweenAccessor interface, register it to the engine, and animate anything you want! class MyAccessor implements TweenAccessor<MyClass>{   static const Type1 = 1;    int getValues(MyClass target, Tween tween, int tweenType, List<num> returnValues){     if ( tweenType == MyAccessor.Type1 ){       returnValues[0] = target.x;       returnValues[1] = target.y;       return 2;     }     return 0;   }    void setValues(MyClass target, Tween tween, int tweenType, List<num> newValues){     if ( tweenType == MyAccessor.Type1 ){       target.x = newValues[0];       target.y = newValues[1];     }   } }  class MyClass{   num x=0, y=0; }  main(){    Tween.registerAccessor(MyClass, new MyAccessor()); }  Using Tweenable Make sure the class you want to tween implements the Tweenable interface. class MyTweenable implements Tweenable {   static const int ANSWER = 1;   static const int CIRCLE = 2;    int answer = 42;   num circle = 6.2831853;    /**    * Updates [returnValues] with the values of the properties you want to tween    * when you run a `tweenType` tween.    * Returns the number of values set in [returnValues].    */   int getTweenableValues(int tweenType, Tween tween, List<num> returnValues) {     if (tweenType == ANSWER) {       returnValues[0] = answer;     } else if (tweenType == CIRCLE) {       returnValues[0] = circle;     }     return 1;   }    /**    * Updates this object's properties with values from [newValues],    * in the [tweenType] fashion of `getTweenableValues`.    */   void setTweenableValues(int tweenType, Tween tween, List<num> newValues) {     if (tweenType == ANSWER) {       answer = newValues[0];     } else if (tweenType == CIRCLE) {       circle = newValues[0];     }   } } Updating For the tween to be completed, a continuous call to your TweenManager's .update(delta) is needed. The delta parameter represents the time elapsed in milliseconds since last call to update. An easy way to obtain the delta is the window.animationFrame method: TweenManager myManager; main(){   ...   myManager = new TweenManager();   window.animationFrame.then(update); }  num lastUpdate = 0; update(num delta){   num deltaTime = (delta - lastUpdate) / 1000;   lastUpdate = delta;    myManager.update(deltaTime);   window.animationFrame.then(update); } Next, send your objects to another position (here x=20 and y=30), with a smooth elastic transition, during 1 second. // Arguments are  // 1. the target // 2. the type of interpolation // 3. the duration in seconds // Additional methods specify the target values, and the easing function.   main(){   ...   Tween.to(myClass, MyAccessor.Type1, 1.0)     ..targetValues = [20, 30]     ..easing = Elastic.INOUT;   window.animationFrame.then(update); }  API Possibilities are: Tween.to(...);   // interpolates from the current values to the targets Tween.from(...); // interpolates from the given values to the current ones Tween.set(...);  // apply the target values without animation (useful with a delay) Tween.call(...); // calls a method (useful with a delay) Current options are: myTween.delay = 0.5; myTween.repeat(2, 0.5); myTween.repeatYoyo(2, 0.5);  myTween.pause(); myTween.resume(); myTween.callback = callback; myTween.callbackTriggers = flags; myTween.userData = obj; You can of course chain everything (with dart's method cascading): new Tween.to(...)  ..delay = 1  ..repeat(2, 0.5)  ..start(myManager); By altering the delta parameter, adding slow-motion, fast-motion or reverse play is easy, you just need to change the speed of the update: myManager.update(delta * speed); Create some powerful animation sequences! new Timeline.sequence()     // First, set all objects to their initial positions     ..push(Tween.set(...))     ..push(Tween.set(...))     ..push(Tween.set(...))      // Wait 1s     ..pushPause(1.0)      // Move the objects around, one after the other     ..push(Tween.to(...))     ..push(Tween.to(...))     ..push(Tween.to(...))      // Then, move the objects around at the same time     ..beginParallel()         ..push(Tween.to(...))         ..push(Tween.to(...))         ..push(Tween.to(...))     ..end()      // And repeat the whole sequence 2 times     // with a 0.5s pause between each iteration     ..repeatYoyo(2, 0.5)      // Let's go!     ..start(myManager); You can also quickly create timers: new Tween.call(myCallback)   ..delay = 3000   ..start(myManager); Main features Supports every interpolation function defined by Robert Penner. Can be used with any object. You just have to implement the TweenAccessor interface when you want interpolation capacities. Every attribute can be interpolated. The only requirement is that what you want to interpolate can be represented as a number. One line is sufficient to create and start a simple interpolation. Delays can be specified, to trigger the interpolation only after some time. Many callbacks can be specified (when tweens complete, start, end, etc.). Tweens and Timelines are pooled by default. If enabled, there won't be any object allocation during runtime! Tweens can be sequenced when used in Timelines. Tweens can act on more than one value at a time, so a single tween can change the whole position (X and Y) of a sprite for instance ! Tweens and Timelines can be repeated, with a yoyo style option. Simple timers can be built with Tween.callBack(). Source code extensively documented! Test suite included! Testing suite Since 0.10.0, tweenengine has a (crude) test suite. It leverages the unittest package. To run it, you'll either need Dartium or dart2js. Using Dartium Browse test/test.html. Using dart2js Compile test/test.dart to test/test.dart.js : $ dart2js test/test.dart -v -o test/test.dart.js Then, browse test/test.html. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/xaguzman/tween-engine-dart"	"A port of the original java Universal Tween Engine created by Aurelien Ribbon."	"true"
"Animation"	"Spine Dart"	"https://github.com/FedeOmoto/spine"	"An implementation of the Esoteric Software Spine runtime."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"4"	"1"	"1"	"GitHub - FedeOmoto/spine: A Dart implementation of the Esoteric Software Spine runtime. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 1 Star 4 Fork 1 FedeOmoto/spine Code Issues 0 Pull requests 0 Pulse Graphs A Dart implementation of the Esoteric Software Spine runtime. 4 commits 1 branch 0 releases Fetching contributors Dart 100.0% Dart Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Latest commit fb01582 Nov 28, 2014 Federico Omoto Require SDK 1.8 Permalink Failed to load latest commit information. lib .gitignore CHANGELOG.md LICENSE README.md pubspec.yaml README.md Spine Dart A Dart implementation of the Esoteric Software Spine runtime. Demos http://FedeOmoto.github.io/spine/ Demos source code Pub: http://pub.dartlang.org/packages/pixi_examples GitHub: https://github.com/FedeOmoto/pixi_examples/tree/master/web/12_spine/ Docs http://www.dartdocs.org/documentation/spine/0.1.0+2/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/FedeOmoto/spine"	"An implementation of the Esoteric Software Spine runtime."	"true"
"Template"	"mustache4dart"	"https://github.com/valotas/mustache4dart"	"A simple implementation of Mustache."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"33"	"4"	"8"	"GitHub - valotas/mustache4dart: mustache implementation for Dart Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 4 Star 33 Fork 8 valotas/mustache4dart Code Issues 4 Pull requests 1 Pulse Graphs mustache implementation for Dart 545 commits 6 branches 28 releases Fetching contributors Dart 99.2% Shell 0.8% Dart Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags issue36 master mixins refactoring unittest v1.1 Nothing to show v1.0.10 v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.0.24 v0.0.23 v0.0.22 v0.0.21 v0.0.20 v0.0.19 v0.0.18 v0.0.17 v0.0.16 v0.0.15 v0.0.14 v0.0.13 v0.0.12 v0.0.11 v0.0.10 v0.0.9 v0.0.8 v0.0.7 Nothing to show New pull request Latest commit b88e64c Apr 14, 2015 valotas Update CHANGELOG.md Permalink Failed to load latest commit information. example lib spec @ 72233f3 test .gitignore .gitmodules .travis.yml CHANGELOG.md LICENSE.txt README.md pubspec.yaml README.md Mustache for Dart A simple implementation of Mustache for the Dart language, which passes happily all the mustache specs. If you want to have a look at how it works, just check the tests. For more info, just read further. Using it In order to use the library, just add it to your pubspec.yaml as a dependency dependencies:   mustache4dart: '>= 1.0.0 < 2.0.0'  and then import the package import 'package:mustache4dart/mustache4dart.dart'; and you are good to go. You can use the render toplevel function to render your template. For example: var salutation = render('Hello {{name}}!', {'name': 'Bob'}); print(salutation); //shoud print Hello Bob! Context objects mustache4dart will look at your given object for operators, fields or methods. For example, if you give the template {{firstname}} for rendering, mustache4dart will try the followings use the [] operator with firstname as the parameter search for a field named firstname search for a getter named firstname search for a method named firstname search for a method named getFirstname in each case the first valid value will be used. @MirrorsUsed In order to do the stuff described above the mirror library is being used which could lead to big js files when compiling the library with dartjs. The implementation does use the @MirrorsUsed annotation but as documented this is experimental. In order to avoid the use of the mirrors package, make sure that you compile your library with dart2js -DMIRRORS=false. In that case though you must always make sure that your context object have a right implementation of the [] operator as it will be the only check made against them (from the ones described above) in order to define a value. Partials mustache4dart support partials but it needs somehow to know how to find a partial. You can do that by providing a function that returns a template given a name: String partialProvider(String partialName) => ""this is the partial with name: ${partialName}""; expect(render('[{{>p}}]', null, partial: partialProvider), '[this is the partial with name: p]')); Compiling to functions If you have a template that you are going to reuse with different contexts, you can compile it to a function using the toplevel function compile: var salut = compile('Hello {{name}}!'); print(salut({'name': 'Alice'})); //should print Hello Alice! Lambdas support The library passes all the optional lambda specs based on which lambdas must be treatable as arity 0 or 1 functions. As dart provides optional named parameters, you can pass to a given lambda function the nestedContext. In that case the current nested context will be given as parameter to the lambda function. Developing The project passes all the Mustache specs. You have to make sure though that you've downloaded them. Just make sure that you have done the steps described below. git clone git://github.com/valotas/mustache4dart.git git submodule init git submodule update pub get If you are with Linux, a script is provided to run all the test: test/run.sh Alternatively, if you have Dart Test Runner installed you can just do: pub global run test_runner  Contributing If you found a bug, just create a new issue or even better fork and issue a pull request with you fix. Versioning The library will follow a semantic versioning Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/valotas/mustache4dart"	"A simple implementation of Mustache."	"true"
"Template"	"jaded"	"https://github.com/dartist/jaded"	"Port of the excellent Jade view engine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"31"	"8"	"4"	"GitHub - dartist/jaded: Port of node.js jade view engine for Dart Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 31 Fork 4 dartist/jaded Code Issues 2 Pull requests 0 Pulse Graphs Port of node.js jade view engine for Dart 49 commits 1 branch 0 releases Fetching contributors Dart 100.0% Dart Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. bin lib test .DS_Store .gitignore LICENSE README.md pubspec.lock pubspec.yaml README.md jaded Port of the excellent Jade view engine in Dart. Now feature complete with the original jade view engine, begin by taking the comprehensive tour on learnjade.com and refer to jade's detailed documentation to learn about Jade's features and syntax. Although the aim was to have a high-fidelity port, the major syntactical difference compared with the original Jade (in JavaScript) is that the compiler only emits and executes Dart code, so any embedded code in views must be valid Dart (i.e. instead of JavaScript). Installing via Pub Add this to your package's pubspec.yaml file: dependencies:   jaded: 0.1.9  Public API Compile a Directory Add a pre-build step and use renderDirectory to statically compile all views into a single jade.views.dart file containing a Map of all compiled Jade views, e.g: import ""dart:io""; import ""package:jaded/jaded.dart"" as jade;  var jadeTemplates = jade.renderDirectory('.'); new File('jade.views.dart').writeAsString(jadeTemplates); Writes to jade.views.dart snippet: Map<String,Function> JADE_TEMPLATES = {   './index.jade': ([Map locals]){      ...   },   './dir/page.jade': ([Map locals]){     ...   }, } Usage: import ""jade.views.dart"";  var render = JADE_TEMPLATES['./index.jade']; var html = render({'title': 'Hello Jade!'}); Compile a jade view at runtime import ""package:jaded/jaded.dart"" as jade;  var renderAsync = jade.compile('string of jade', { //Optional Compiler Defaults:       Map locals,   String filename,   String basedir,   String doctype,   bool pretty:false,   bool compileDebug:false,   bool debug:false,   bool colons:false,   bool autoSemicolons:true   });  renderAsync(locals)   .then((html) => print(html)); Options locals Local variable object filename Used in exceptions, and required when using includes basedir The basedir where views start from doctype What doctype to use pretty Add pretty-indentation whitespace to output (false by default) debug Outputs tokens and function body generated compileDebug When false no debug instrumentation is compiled autoSemicolons Auto add missing semicolons at the end of new lines (true by default) Web Frameworks jaded is the de-facto HTML View Engine in Dart express web framework. Current Status All tests in jade.test.dart are now passing. All integration test cases in /test/cases that doesn't make use of an external DSL library are passing, specifically: filters.coffeescript.jade filters.less.jade filters.stylus.jade include-filter-stylus.jade  When they become available support for external Web DSL's can be added to transformers.dart in the same way as done inside Jade's feature-rich transformers.js. Markdown filter We've added the markdown filter which lets you include markdown inline: html   body     :markdown       This is _some_ awesome **markdown**  Or as an external include: html   body     include some.md  Pre-compilation of .jade templates The recommended way to execute .jade templates is to pre-compile all views with renderDirectory() out to a static file at design time. This can be automated using the Dart Editor build system /build.dart file, which can be used to trigger the background compilation of .jade views when it detects a .jade file was saved or deleted. This is the approach the Dart Express Web Framework takes with its express_build.dart helper that gets triggered when a '.jade' file is touched will scan all directories for an empty jade.yaml marker and recursively pre-compiles all .jade views in that directory into a single jade.views.dart file. Compile and execute at runtime - Missing eval Jade relies on eval'ing code-gen to work which is a limitation in Dart that lacks eval. To get around this when compiling on the fly, we're currently wrapping the code-gen Dart inside an Isolate and writing it out to a file then immediately reading it back in with spawnUri and invoking the new code asynchronously in the runCompiledDartInIsolate() method. Although this works, it forces us to have an async API to convert jade to html at runtime. When Dart offers a sync API for evaluating Dart code we'll convert it back to a sync API. Contributors mythz (Demis Bellot) MaxHorstmann (Max Horstmann) Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dartist/jaded"	"Port of the excellent Jade view engine."	"true"
"Database"	"SQLJockey"	"https://github.com/jamesots/sqljocky"	"MySQL connector."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"81"	"14"	"24"	"GitHub - jamesots/sqljocky: MySQL Connector for Dart Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 14 Star 81 Fork 24 jamesots/sqljocky Code Issues 11 Pull requests 3 Pulse Graphs MySQL Connector for Dart 416 commits 5 branches 47 releases Fetching contributors Dart 98.6% Java 1.2% Shell 0.2% Dart Java Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags async dev gh-pages master v0.4.3.1 Nothing to show v0.14.1 v0.14.0 v0.11.0 v0.10.0 v0.9.0 v0.8.3 v0.8.2 v0.8.1 v0.8.0+1 v0.8.0 v0.7.0 v0.6.2 v0.6.1 v0.6.0 v0.5.8 v0.5.7 v0.5.6 v0.5.5 v0.5.4 v0.5.3 v0.5.2 v0.5.1 v0.5.0 v0.4.4 v0.4.3 v0.4.2 v0.4.0 v0.3.4 v0.3.3 v0.3.2 v0.3.1 v0.3.0 v0.2.7 v0.2.6 v0.2.4 v0.2.3 v0.2.1 v0.2.0 v0.1.3 v0.1.2 v0.1.1 v0.1.0 v0.0.6 v0.0.4 v0.0.3 v0.0.2 0.2.4 Nothing to show New pull request Latest commit 944e6d2 Sep 22, 2015 jamesots Remove docker info from README.md Permalink Failed to load latest commit information. benchmark move benchmark code to benchmark directory Sep 20, 2015 example removed unused variables in test Sep 20, 2015 javaspeed lib dartfmt Sep 20, 2015 test tool .gitignore ignore .pub and .packages Sep 11, 2015 CHANGELOG.md LICENSE README.md Remove docker info from README.md Sep 22, 2015 connection.options.example Use options file for connection details Apr 18, 2012 pubspec.yaml Fix formatting in changelog. Bump version to 0.14.1 Sep 1, 2015 README.md SQLJocky This is a MySQL connector for the Dart programming language. It isn't finished, but should work for most normal use. The API is getting reasonably close to where I want it to be now, so hopefully there shouldn't be too many breaking changes in the future. It will only work in the command-line VM, not in a browser. News The changelog has now been moved to CHANGELOG.md Usage Create a connection pool: var pool = new ConnectionPool(     host: 'localhost', port: 3306,     user: 'bob', password: 'wibble',     db: 'stuff', max: 5); Execute a query: var results = await pool.query('select name, email from users'); Use the results: (Note: forEach is asynchronous.) results.forEach((row) {   print('Name: ${row[0]}, email: ${row[1]}'); }); Or access the fields by name: results.forEach((row) {   print('Name: ${row.name}, email: ${row.email}'); }); Prepare a query: var query = await pool.prepare(   'insert into users (name, email, age) values (?, ?, ?)'); Execute the query: var result = await query.execute(['Bob', 'bob@bob.com', 25]); An insert query's results will be empty, but will have an id if there was an auto-increment column in the table: print(""New user's id: ${result.insertId}""); Execute a query with multiple sets of parameters: var results = await query.executeMulti([['Bob', 'bob@bob.com', 25],     ['Bill', 'bill@bill.com', 26],     ['Joe', 'joe@joe.com', 37]]); Use the list of results: for (result in results) {   print(""New user's id: ${result.insertId}""); } Use a transaction: var trans = await pool.startTransaction(); var result = await trans.query('...'); await trans.commit(); Development To run the examples and tests, you'll need to create a 'connection.options' file by copying 'connection.options.example' and modifying the settings. Licence It is released under the GPL, because it uses a modified part of mysql's include/mysql_com.h in constants.dart, which is licensed under the GPL. I would prefer to release it under the BSD Licence, but there you go. The Name It is named after Jocky Wilson, the late, great darts player. (Hence the lack of an 'e' in Jocky.) Things to do Compression COM_SEND_LONG_DATA CLIENT_MULTI_STATEMENTS and CLIENT_MULTI_RESULTS for stored procedures More connection pool management (close after timeout, change pool size...) Better handling of various data types, especially BLOBs, which behave differently when using straight queries and prepared queries. Implement the rest of mysql's commands Handle character sets properly? Currently defaults to UTF8 for the connection character set. Is it necessary to support anything else? Improve performance where possible Geometry type Decimal type should probably use a bigdecimal type of some sort MySQL 4 types (old decimal, anything else?) Test against multiple mysql versions Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/jamesots/sqljocky"	"MySQL connector."	"true"
"Database"	"PostgreSQL"	"https://github.com/xxgreg/dart_postgresql"	"PostgreSQL database driver"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"67"	"11"	"27"	"GitHub - xxgreg/dart_postgresql: Dart Postgresql database library. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 67 Fork 27 xxgreg/dart_postgresql Code Issues 18 Pull requests 3 Pulse Graphs Dart Postgresql database library. 233 commits 4 branches 0 releases Fetching contributors Dart 99.7% Shell 0.3% Dart Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags ft-settings-uri-encoding master protocol-client refactor Nothing to show Nothing to show New pull request Latest commit 17d2fd5 May 23, 2016 xxgreg Merge pull request #77 from krrg/patch-1 … Update README.md Permalink Failed to load latest commit information. lib Fix #73: properly encode and decode uris Jan 25, 2016 test .gitignore CHANGELOG.md LICENSE README.md Update README.md May 21, 2016 check-all.sh pubspec.yaml Update change log, and bump version Jan 25, 2016 README.md PostgreSQL database driver for Dart Basic usage Obtaining a connection var uri = 'postgres://username:password@localhost:5432/database'; connect(uri).then((conn) {     // ... }); SSL connections Set the sslmode to require by appending this to the connection uri. This driver only supports sslmode=require, if sslmode is ommitted the driver will always connect without using SSL. var uri = 'postgres://username:password@localhost:5432/database?sslmode=require'; connect(uri).then((conn) {     // ... }); Querying conn.query('select color from crayons').toList().then((rows) {     for (var row in rows) {         print(row.color); // Refer to columns by name,         print(row[0]);    // Or by column index.     } }); Executing conn.execute(""update crayons set color = 'pink'"").then((rowsAffected) {     print(rowsAffected); }); Query Parameters Query parameters can be provided using a map. Strings will be escaped to prevent SQL injection vulnerabilities. conn.query('select color from crayons where id = @id', {'id': 5})   .toList()     .then((result) { print(result); });  conn.execute('insert into crayons values (@id, @color)',              {'id': 1, 'color': 'pink'})     .then((_) { print('done.'); }); Closing the connection You must remember to call Connection.close() when you're done. This won't be done automatically for you. Conversion of Postgresql datatypes. Below is the mapping from Postgresql types to Dart types. All types which do not have an explicit mapping will be returned as a String in Postgresql's standard text format. This means that it is still possible to handle all types, as you can parse the string yourself.      Postgresql type                 Dart type     boolean                         bool     int2, int4, int8                int     float4, float8                  double     numeric                         String     timestamp, timestamptz, date    Datetime     json, jsonb                     Map/List     All other types                 String  Mapping the results of a query to an object class Crayon {     String color;     int length; }  conn.query('select color, length from crayons')     .map((row) => new Crayon()                          ..color = row.color                          ..length = row.length)     .toList()     .then((List<Crayon> crayons) {         for (var c in crayons) {             print(c is Crayon);             print(c.color);             print(c.length);         }     }); Or for an immutable object: class ImmutableCrayon {     ImmutableCrayon(this.color, this.length);     final String color;     final int length; }  conn.query('select color, length from crayons')   .map((row) => new ImmutableCrayon(row.color, row.length))      .toList()     .then((List<ImmutableCrayon> crayons) {         for (var c in crayons) {             print(c is ImmutableCrayon);             print(c.color);             print(c.length);         }     }); Query queueing Queries are queued and executed in the order in which they were queued. So if you're not concerned about handling errors, you can write code like this: conn.execute(""create table crayons (color text, length int)""); conn.execute(""insert into crayons values ('pink', 5)""); conn.query(""select color from crayons"").single.then((crayon) {     print(crayon.color); // prints 'pink' }); Query streaming Connection.query() returns a Stream of results. You can use each row as soon as it is received, or you can wait till they all arrive by calling Stream.toList(). Connection pooling In server applications, a connection pool can be used to avoid the overhead of obtaining a connection for each request. import 'package:postgresql/pool.dart';  main() {   var uri = 'postgres://username:password@localhost:5432/database';   var pool = new Pool(uri, minConnections: 2, maxConnections: 5);   pool.messages.listen(print);   pool.start().then((_) {     print('Min connections established.');     pool.connect().then((conn) { // Obtain connection from pool       conn.query(""select 'oi';"")         .toList()         .then(print)         .then((_) => conn.close()) // Return connection to pool         .catchError((err) => print('Query error: $err'));     });   }); } Example program Add postgresql to your pubspec.yaml file, and run pub install. name: postgresql_example dependencies:   postgresql: any  import 'package:postgresql/postgresql.dart';  void main() {   var uri = 'postgres://testdb:password@localhost:5432/testdb';   var sql = ""select 'oi'"";    connect(uri).then((conn) {     conn.query(sql).toList()         .then((result) {             print('result: $result');         })         .whenComplete(() {             conn.close();         });   }); } Testing To run the unit tests you will need to create a database, and edit 'test/config.yaml' accordingly. Creating a database for testing Change to the postgres user and run the administration commands. sudo su postgres createuser --pwprompt testdb   Enter password for new role: password   Enter it again: password   Shall the new role be a superuser? (y/n) n   Shall the new role be allowed to create databases? (y/n) n   Shall the new role be allowed to create more new roles? (y/n) n createdb --owner testdb testdb exit Check that it worked by logging in. psql -h localhost -U testdb -W Enter ""\q"" to quit from the psql console. License BSD Links http://www.postgresql.org/docs/9.2/static/index.html http://www.dartlang.org/ Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/xxgreg/dart_postgresql"	"PostgreSQL database driver"	"true"
"Database"	"dartabase_model"	"https://pub.dartlang.org/packages/dartabase_model"	"Serverside Database Object Models for simple data manipulation using MySQL/PGSQL without having to write SQL"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"dartabase_model 1.0.0 | Pub Package Manager dartlang.org pub.dartlang.org Getting Started Docs Getting Started Dependencies Pubspec Format Package Layout Conventions Assets and Transformers Reference FAQ Glossary Versioning Philosophy Commands Pub Commands pub build pub cache pub deps pub get pub global pub publish pub run pub serve pub upgrade pub uploader Packages dartabase_model 1.0.0 README.md CHANGELOG.md Installing Versions Dartabase Model 1.0.0 Serverside Database Object Models for simple data manipulation using MySQL/PGSQL without having to write SQL inspired by Ruby on Rails models This requires the use of Dartabase Migration Tested on   Dart SDK version 1.16.0       Uses MYSQL via sqljocky version 0.14.1 PGSQL via postgresql version 0.3.3 TUTORIAL 1 HOW TO SETUP AND RUN MIGRATION AND MODEL HOW TO SETUP MODEL After you have successfully finished setting up 'Dartabase Migration' Install Dartabase Model the usual pubspec way Inside your project, at the beginning of the main method insert Model.initiate(""path-to-your-project"");  now it should look kinda like this: 	-----dataserver.dart--START--  	library dataServer;  	import 'package:dartabase_model/dartabase_model.dart';  	main(){ 	  Model.initiate(""C:\\darttestproject\\DartabaseServer""); 	  ... your code 	}  	-----dataserver.dart--END--   Imagine you have ONLY created one database table named 'account' with the column 'name'  You have to extend all classes that you want to connected to the database with 'Model'  in this case we create a class Account with id, name, created_at and updated_at 	-----account.dart--START-- 		 	part of dataServer; 	 	class Account extends Model{ 	  num id;// database column autogenerated by migration		 	  String name; 	  DateTime created_at;// database column autogenerated by migration       DateTime updated_at;// database column autogenerated by migration 	} 	 	-----account.dart--END--  Now add account.dart as part to dataServer so you can access Account -----dataserver.dart--START--  library dataServer;  import 'package:dartabase_model/dartabase_model.dart'; part ""account.dart"";	  main(){   Model.initiate(""C:\\darttestproject\\DartabaseServer"");   ... your code }  -----dataserver.dart--END--  HOW TO USE SIMPLE MODEL FUNCTIONS Future save() returns String ""created"" or ""updated""   var process = await player.save(); if(process == ""created"" || process == ""updated""){   //your code }  Future findBy(String column,var value) returns an (player) object if one exists  else  returns null  var player = await player.findBy(""name"",""tim""); if(player != null){   //your code }        Future findById(var id) accepted type of id is (String || int || num)   returns an (player) object if one exists  else  returns null  var player = await player.findById(""3""); if(player != null){   //your code }   Future findAllBy(String column, var value) returns a list of (player) objects if one exists  else  returns empty list  List players = await player.findAllBy(""name"",""tim""); if(!players.isEmpty){   //your code }  Future findAll() returns a list of all (player) objects if one exists  else  returns empty list  List players = await player.findAll(); if(!players.isEmpty){   //your code }   Future delete() deletes the object //TODO and all its relations  await player.delete(); //your code    RELATIONS Future receive(object) creates relation between the two objects (player and character)      var result = await player.receive(character); //your code   Future hasOne(object) returns an (character) object if one exists  else  returns null     var character = await player.hasOne(new Character()); if(character != null){   //your code }  Future hasMany(object) returns a list of (character) objects if one exists  else  returns empty list  List characters = await player.hasMany(new Character()); if(!characters.isEmpty){   //your code }  Future hasOneWith(object,String column,String value) returns an (character) object if one exists  else  returns null   var character = await player.hasOneWith(new Character(),'level','3'); if(character != null){   //your code }   Future hasManyWith(object,String column,String value) Returns a list of (character) objects if one exists  else  Returns empty list     List characters = await player.hasManyWith(new Character(),'level','3'); if(!characters.isEmpty){   //your code }   Future remove(object) remove relation between the two objects (player and character)  var result = await player.remove(character); //your code  TODO *test functionality in bigger project *add more features like implementing and removing dependencies *add automated tests *and much more  Please let me know about bugs you find and or improvements/features you would like to see in future. ENJOY VERSION 1.0.0 -cleaner code using await and async       -set min dart sdk to 1.8.0       -updated to work with dartabase core 0.4.0       -updated postgresql to 0.3.3        -updated sqlJocky to 0.14.1 0.7.0 -updated to work with dartabase core 0.3.0  0.6.3 -added ssl support! see Migration readme ->config file       -improved speed via single connection instead of multi pools       -updated postgresql to 0.2.13  0.6.2 -updated sqlJocky to 0.11.0       -fixed problem due to generation of table column created_at using now().        should work in mysql version >= 5.0 //tested on producktion 5.0 and 5.5        //pls file me a bug, if you still have problems creating tables via migration.  0.6.1 -added link to tutorial in readme.md   0.6.0 -required Migration 0.6.x       -fix major bug         apperently CamelCaseObject conversion to table_name was not done correct        now possible to habe server model with multiple capital letters         e.g. ""UserPicture.dart"" converts to table name ""user_picture""        before it converted to ""userpicture"" which did not exist       -adapt dartabaseCore    0.5.6 -added toJson() for custom classes extending model       -changed return value for save()       -accept string or int for findBy()       -fix bool problem when saving        -moved Version to CHANGELOG.md 0.5.5 -fixed issue with database type bool 0.5.4 -fix: return null instead of empty list in mysql when single object was requested  0.5.3 -added findAll()       -fixed code comments 0.5.2 -corrected spelling 0.5.1 -fixed README.md 0.5.0 -required Migration 0.5.x          see Migration readme.md         -added relations between tables 0.4.1 -adapted model to work with old and new migration files 0.4.0 -adapted model for migration 0.4.0 see compatibility below 0.3.0 -fixed possible crash in < 0.3.0 with mysql adapter,        -changed model method_names to methodNames (Dart Style Guide) 0.2.1 -added delete function to remove object from database  0.2.0 -added support for autogenerated created_at and updated_at columns         see changelog for dartabase migration 0.3.0  0.1.1 -fix discription 0.1.0 -ready for Dart 1.0  1. Depend on it Add this to your package's pubspec.yaml file:  dependencies:   dartabase_model:   2. Install it You can install packages from the command line:  $ pub get  Alternatively, your editor might support pub. Check the docs for your editor to learn more. Version Uploaded Documentation Archive 1.0.0 Jun 6, 2016 Go to the documentation of dartabase_model 1.0.0 Download dartabase_model 1.0.0 archive 0.7.0 Aug 8, 2014 Go to the documentation of dartabase_model 0.7.0 Download dartabase_model 0.7.0 archive 0.6.3 May 20, 2014 Go to the documentation of dartabase_model 0.6.3 Download dartabase_model 0.6.3 archive 0.6.2 May 13, 2014 Go to the documentation of dartabase_model 0.6.2 Download dartabase_model 0.6.2 archive 0.6.1 May 12, 2014 Go to the documentation of dartabase_model 0.6.1 Download dartabase_model 0.6.1 archive 0.6.0 May 9, 2014 Go to the documentation of dartabase_model 0.6.0 Download dartabase_model 0.6.0 archive 0.5.6 Mar 3, 2014 Go to the documentation of dartabase_model 0.5.6 Download dartabase_model 0.5.6 archive 0.5.5 Feb 6, 2014 Go to the documentation of dartabase_model 0.5.5 Download dartabase_model 0.5.5 archive 0.5.4 Feb 6, 2014 Go to the documentation of dartabase_model 0.5.4 Download dartabase_model 0.5.4 archive 0.5.3 Feb 6, 2014 Go to the documentation of dartabase_model 0.5.3 Download dartabase_model 0.5.3 archive All 21 versions... About Database Model is for simple dot notation data manipulation for MySQL and PGSQL without having to write SQL. Inspired by Ruby on Rails Author Email Hannes.Rammer@gmail.com Hannes Rammer Homepage github.com/HannesRammer/Dartabase/tree/master/dartabase_model Documentation www.dartdocs.org/documentation/dartabase_model/1.0.0/ Source code (hyperlinked) www.crossdart.info/p/dartabase_model/1.0.0/ Uploader Hannes.Rammer@gmail.com Share Tweet Dart Language — Site Map — Terms of Service — Privacy Policy π"	"null"	"null"	"Serverside Database Object Models for simple data manipulation using MySQL/PGSQL without having to write SQL"	"true"
"Database"	"dartabase_migration"	"https://pub.dartlang.org/packages/dartabase_migration"	"Serverside Database migration for simple version controlled database structure manipulation using MySQL/PGSQL without having to write SQL"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"dartabase_migration 1.0.0 | Pub Package Manager dartlang.org pub.dartlang.org Getting Started Docs Getting Started Dependencies Pubspec Format Package Layout Conventions Assets and Transformers Reference FAQ Glossary Versioning Philosophy Commands Pub Commands pub build pub cache pub deps pub get pub global pub publish pub run pub serve pub upgrade pub uploader Packages dartabase_migration 1.0.0 README.md CHANGELOG.md Installing Versions Dartabase Migration 1.0.0 GUI GUIDE Serverside Database migration for simple version controlled database structure manipulation using MySQL/PGSQL without having to write SQL combine the power of Dartabase Model and Dartabase Migration !!now supporting scaffolding!! see bottom of the page inspired by Ruby on Rails Tested on Dart SDK version 1.16.0  Uses Polymer version ""^1.0.0-rc.16"" MYSQL via sqljocky ""^0.14.1"" PGSQL via postgresql version ""^0.3.3"" Other Tutorials and readme's TUTORIAL 1 HOW TO SETUP AND RUN MIGRATION AND MODEL structure of this file 1.How to setup 2.How to update existing dartabase migration version 3.How to create migrations 4.How to run migrations 5.How to revert migrations About column id About create updated at column About up and down About order of execution About dartabase data types 1. HOW TO SETUP <a name=""how-to-setup""></a> USE THIS INSTALL GUIDE AND IGNORE THE INSTALL PAGE!!! This is a stand alone app! 1.Download dartabase_migration somewhere on your drive 2.run 'Pub Get' on dartabase_migration/pubspec.yaml 3.Execute dartabase_migration/bin/simpleServer.dart 4.Execute dartabase_migration/tool/index.html which will open in chromeium now you should see page with a button 5.click on add project, now you should see 6.fill in the form and click enhance or create 7.after reload you should see the created object 8.dartabase_migration will create files and folders below to do its magic   dartabase_migration/bin/projectsMapping.json            -maps project names to absolute project path   yourProject/db/   yourProject/db/config.json               -dartabase config file to connect IP/PORT/DBType   yourProject/db/schema.json               -current dartabase_migration structure as JSON used by Dartabase tools   yourProject/db/schemaVersion.json        -safes name of latest migrated version   yourProject/db/migrations                -folder for your database migration files  9.IMPORTANT if your config data is not correct it might be that dartabase will stop running in this case make sure to insert the correct data into the config.json file created in your project -yourProject/db/config.json file so dartabase_migration can connect to your existing database. and rerun simpleServer.dart and index.html eg. --------config.json--------- {     ""adapter"": ""MySQL"",     ""database"": ""dbName"",     ""username"": ""dbUsername"",     ""password"": ""dbPassword"",     ""host"": ""localhost"",     ""port"": ""3306"",     ""ssl"": ""false"" } ----------------------------   2. HOW TO UPDATE EXISTING DARTABASE MIGRATION VERSION <a name=""how-to-update-dartabase-migration""></a> GENEREL UPDATE it is important to keep a backup of 'dartabase_migration/bin/projectsMapping.json' 1.download the new version of dartabase migration   2a.replace all files from your current running version    (but not projectsMapping.json) 2b. extract all files into a new folder and paste a copy of bin/projectsMapping.json  LOST 'projectsMapping.json' DONT PAN!C 1.create a file named projectsMapping.json inside 'dartabase_migration/bin/'      inside the file enter a json key value pair of a projectname of your choice          keys    : project_names (your choice/short is good ;)       values  : project absolute project path      eg.   {      ""mysql"":""C:\\myServer"",      ""pgsql"":""C:\\pgServer""   }  MOVED/RENAMED project Rename the values when moving/renaming one of your projects     now you should be able to find your projects again when running dbUp or dbDown 3. HOW TO CREATE MIGRATIONS <a name=""how-to-create-migrations""></a> select the project you want to create a migration for open the ""create migration"" view, enter a migration name and click on the action you want to execute createTable enter a table name and additional columns if needed like seen below createColumn select an existing table name and add additional columns like seen below removeColumn select an existing table and the existing column you want to remove, like below removeTable select an existing table you want to remove, like below createRelation select two existing tables to create a relation between them like below removeRelation select two existing tables to create a relation between them like below click on ""create migration"" it will create a migration inside ""$yourProject/db/migrations/YYYYMMTTHHMMSS_migration_name.json"" if everything works it will show a text mesage inside a toast that asks you to reload the page 4. HOW TO RUN MIGRATIONS <a name=""how-to-run-migrations""></a> 1 . open the run migration view 2 . select the preferred migration that is newer than the one marked as current. in this case version 1 3 . now click on ""migrate to newer version"". dartabase_migration should have executed the actions specified inside the ""UP"" key for all files INCLUDING the goal migration version. Additionally it will update -yourProject/db/schema.json with the current database structure as JSON  -yourProject/db/schemaVersion.json with the name of latest migrated migration file  5. HOW TO REVERT MIGRATIONS <a name=""how-to-revert-migrations""></a> 1 . open the run migration view 2 . select the preferred migration that is older than the one marked as current. in this case version 1 3 . now click on ""migrate to older version"". dartabase_migration should have executed the actions specified inside the ""DOWN"" key for all files EXCLUDING the goal migration version. Additionally it will update -yourProject/db/schema.json with the current database structure as JSON  -yourProject/db/schemaVersion.json with the name of latest migrated migration file  ABOUT COLUMN ID <a name=""about-column-id""></a> The 'id' column will be generated by 'Dartabase Migration' for every table as primary key. Dont add 'id' in any of the migration files. This is to let 'Dartabase Model' decide when to create or update an Object on save() - see Dartabase Model ABOUT CREATED/UPDATED AT COLUMN <a name=""about-create-updated-at-column""></a> For each table a created_at and updated_at column will be generated automatically. created_at    will only be set to current datetime on creation of table row entry   updated_at    will be set to current datetime on creation of table row entry   PGSQL     will be updated when the row has been saved   MySQL     will be updated when the row has been saved and a value of the row changed         ABOUT UP AND DOWN <a name=""about-up-and-down""></a> Additionally to the ""UP"" key, migration automatically generates the opposite migration for reverting inside the ""DOWN"" key actions inside ""UP"" are executed during migration actions inside ""DOWN"" are executed when reverting migrations  since we created a table named ""user"", we might want to remove it once we want to revert the migration !!!ATTENTION be sure your don't need the data inside a table/column  before you remove it!!!  ABOUT ORDER OF EXECUTION <a name=""about-order-of-execution""></a> Once you have more than one action in the migration file eg.   adding a column   adding a table   removing a column  remember that the order of execution inside a migration will be createTable  ->  createColumn   ->   removeColumn    ->    createRelation     ->     removeRelation      ->      removeTable  its always best to keep migration files as simple as possible and therefore create more migration files ABOUT DARTABASE DATA TYPES <a name=""about-dartabase-data-types""></a> dartabase_migration types are Specified in capitals. on the left hand you see the dartabase_migration data type name on the right the data type your database will use ####MYSQL {   ""BINT"": ""BIGINT"",   ""BINT UNSIGNED"": ""BIGINT UNSIGNED"",   ""BINARY"": ""BINARY"",   ""BIT"": ""BIT"",   ""BLOB"": ""BLOB"",   ""BOOLEAN"": ""BOOLEAN"",   ""BYTEARRAY"": ""BLOB"",   ""CHAR"": ""CHAR(255)"",   ""DATE"": ""DATE"",   ""DATETIME"": ""DATETIME"",   ""DOUBLE"": ""DOUBLE"",   ""FLOAT"": ""FLOAT(2)"",   ""FLOAT UNSIGNED"": ""FLOAT(2) UNSIGNED"",   ""INT"": ""INT"",   ""INT"": ""INT"",   ""INT UNSIGNED"": ""INT UNSIGNED"",   ""LBLOB"": ""LONGBLOB"",   ""LTEXT"": ""LONGTEXT"",   ""MBLOB"": ""MEDIUMBLOB"",   ""MINT"": ""MEDIUMINT"",   ""MINT UNSIGNED"": ""MEDIUMINT UNSIGNED"",   ""MTEXT"": ""MEDIUMTEXT"",   ""SINT"": ""SMALLINT"",   ""SINT UNSIGNED"": ""SMALLINT UNSIGNED"",   ""TEXT"": ""TEXT"",   ""TIME"": ""TIME"",   ""TIMESTAMP"": ""TIMESTAMP"",   ""TBLOB"": ""TINYBLOB"",   ""TINT"": ""TINYINT"",   ""TINT UNSIGNED"": ""TINYINT UNSIGNED"",   ""TTEXT"": ""TINYTEXT"",   ""VARBINARY"": ""VARBINARY(255)"",   ""VARCHAR"": ""VARCHAR(255)""  } PGSQL {   ""BINT"": ""bigint"",   ""BINT UNSIGNED"": ""numeric(20)"",   ""BINARY"": ""bytea"",   ""BIT"": ""bytea"",   ""BLOB"": ""bytea"",   ""BOOLEAN"": ""boolean"",   ""BYTEARRAY"": ""bytea"",   ""CHAR"": ""char(255)"",   ""DATE"": ""date"",   ""DATETIME"": ""timestamp"",   ""DOUBLE"": ""double precision"",   ""FLOAT"": ""real"",   ""FLOAT UNSIGNED"": ""real"",   ""INT"": ""integer"",   ""INT UNSIGNED"": ""bigint"",   ""LBLOB"": ""bytea"",   ""LTEXT"": ""text"",   ""MBLOB"": ""bytea"",   ""MINT"": ""integer"",   ""MINT UNSIGNED"": ""integer"",   ""MTEXT"": ""text"",   ""SINT"": ""smallint"",   ""SINT UNSIGNED"": ""integer"",   ""TEXT"": ""text"",   ""TIME"": ""time"",   ""TIMESTAMP"": ""timestamp"",   ""TBLOB"": ""bytea"",   ""TINT"": ""smallint"",   ""TINT UNSIGNED"": ""smallint"",   ""TTEXT"": ""text"",   ""VARBINARY"": ""bytea"",   ""VARCHAR"": ""varchar(255)""  } SCAFFOLDING //IGNORE below HOW TO RUN SCAFFOLDING Scaffolding is the programmers best friend! run scaffolding and enter a table name, column names and their DARTABASE type, and scaffolding will generate most of the standard code needed to get started developing your app to generate the code we have to run 'dartabase_migration/bin/scaffolding.dart' Select the project we initialized with dartabase_migration let say we want to extend our (simple todo list)[https://github.com/HannesRammer/DartabaseTutorials/blob/master/tutorials/TUT1.md] example with a user type 'todo' and hit enter now type 'user_account[name:VARCHAR,active:BOOLEAN]-m-c-s' and hit enter scaffold will generate something like Migration (generated adding the -m ) -yourProject/db/migrations/20140512025616_create_user_account.json   A migration file, that will create a table user with the specified 2 columns (and the dartabase autogenerated columns)  Server model (generated adding the -s ) -yourProject/bin/userAccount.dart  The dart representation of its database table  with simple functions for   loading a list of all entries      -loadUserAccounts(HttpResponse res)   viewing, editing and deleting a single entry    -loadUserAccount(HttpResponse res,objectId)   -editUserAccounts(HttpRequest req,HttpResponse res)   -deleteUserAccounts(HttpRequest req,HttpResponse res)   Client view (generated adding the -c ) -yourProject/web/userAccount/create.dart  -yourProject/web/userAccount/create.html  -yourProject/web/userAccount/edit.dart  -yourProject/web/userAccount/edit.html  -yourProject/web/userAccount/view.dart  -yourProject/web/userAccount/view.html  -yourProject/web/userAccount/index.dart  -yourProject/web/userAccount/index.html   simple html views to display and manipulate the data from the database   **Poly view** (generated adding the -c )  -yourProject/web/poly/userAccount.dart  -yourProject/web/poly/userAccount.html  the client views all make use of its custom polymer elements   paths (generated adding the -c ) -yourProject/lib/paths.dart   since the client views, have links that connect the pages with each other, it is useful to handle the paths in a separate file and use vars instead of strings, so in case we want to change the path, we only need to change it in one place.   HOW TO USE SCAFFOLSING Migrate the new migration into the database follow the steps from HOW TO RUN MIGRATIONS If not already inside your dart server add the line import '../lib/paths.dart'; (you have to add ""library paths;"" at the top of the file if it didnt exisct before) Add the new object model to the dart server part 'userAccount.dart'; Add the following code inside the dart simpleServer inside handleGet add [else] if(path == ""/$userAccountsLoadUrl""){ UserAccount.loadUserAccounts(res); }else if(path.contains(""/$userAccountLoadUrl"")){ String id= path.split(""/$userAccountLoadUrl/"")[1]; UserAccount.loadUserAccount(res, id); } inside handlePost [else] if(path == ""/$userAccountSaveUrl""){ UserAccount.saveUserAccount(req, res); } else if(path == ""/$userAccountDeleteUrl""){ UserAccount.deleteUserAccount(req, res); } only add the first else if there is already an if statement .. obviously ;) now you only need to add a link like below inside your client views Element linkToUserAccounts = new Element.tag('div'); linkToUserAccounts.onClick.listen((e) => window.location.assign(userAccountsUrl)); content.append(linkToUserAccounts); run the dart server, run the client! Enjoy! ###TODO *workaround for database problems with reserved words  on creation or when switching DBAdapter from PG to MY.     eg. table name 'user' will break in MySQL     fix -> add '_' as prefix to all column and table names *test on other systems *adding rename action *adding option to specify variable length     currently VARCHAR fix at 255 *test functionality of all data types *and much more  Please let me know about bugs you find and or improvements/features you would like to see in future. ENJOY & BE NICE ;) VERSION 0.6.3 -added ssl support for Mysql and PGSQL via config file       -improved speed via single connection instead of multi pools       -updated postgresql to 0.2.13        -update scaffold using params 0.0.2 package 0.6.2 -updated sqlJocky to 0.11.0       -fixed problem due to generation of table column created_at using now().        should work in mysql version >= 5.0 //tested on producktion 5.0 and 5.5        //pls file me a bug, if you still have problems creating tables via migration.       -scaffolg now generates bin and a lib folder if not exists       -fixed some resource issues on load   0.6.1 -added link to tutorial in readme.md   0.6.0 -required Model 0.6.x       -added scaffolding for autogenerated dart/html code        see ""SCAFFOLDING""   0.5.4 -added logo in md format       -moved versions into changelog.md 0.5.3 -fixed ""stream.listen"" problem when calling dbUp.dart and dbDown.dart        problem seems to have appeared with Dart 1.4 changes// note to me CHECK WHY!! listen var on init seems to be string path to dart.exe 0.5.2 -updated core dependency to 0.2.4 0.5.1 -fixed README.md 0.5.0 -added migration functions createRelation and removeRelation        see createRelation and removeRelation        see ""Update to version 0.5.0"" for possible breaking change  0.4.3 -fixed crash when projectsMapping.json does not exist on dbInit.dart 0.4.2 -adapted column option to support old migration files        migrations now support '""column"" : ""INT""' and '""column"" : {""type"":""INT""}' 0.4.1 -added column options 'default' and 'null'        see ""COLUMN OPTIONS"" 0.4.0 -small breaking change -> added posibility for column options 0.3.0 -breaking change -> added autogenerated created_at and updated_at         see ""COLUMN CREATED/UPDATED"" info below 0.2.0 -breaking change -> added autogenerated id         see ""COLUMN ID"" info below  0.1.0 -updated for Dart 1.0, restructured code for use with Dartabase Models 0.0.5 -adapted breaking changes due to dart:encoder   1. Depend on it Add this to your package's pubspec.yaml file:  dependencies:   dartabase_migration:   2. Install it You can install packages from the command line:  $ pub get  Alternatively, your editor might support pub. Check the docs for your editor to learn more. Version Uploaded Documentation Archive 1.0.0 Jun 6, 2016 Go to the documentation of dartabase_migration 1.0.0 Download dartabase_migration 1.0.0 archive 0.6.3 May 20, 2014 Go to the documentation of dartabase_migration 0.6.3 Download dartabase_migration 0.6.3 archive 0.6.2 May 13, 2014 Go to the documentation of dartabase_migration 0.6.2 Download dartabase_migration 0.6.2 archive 0.6.1 May 12, 2014 Go to the documentation of dartabase_migration 0.6.1 Download dartabase_migration 0.6.1 archive 0.6.0 May 12, 2014 Go to the documentation of dartabase_migration 0.6.0 Download dartabase_migration 0.6.0 archive 0.5.4 May 3, 2014 Go to the documentation of dartabase_migration 0.5.4 Download dartabase_migration 0.5.4 archive 0.5.3 May 3, 2014 Go to the documentation of dartabase_migration 0.5.3 Download dartabase_migration 0.5.3 archive 0.5.2 Mar 3, 2014 Go to the documentation of dartabase_migration 0.5.2 Download dartabase_migration 0.5.2 archive 0.5.1 Jan 14, 2014 Go to the documentation of dartabase_migration 0.5.1 Download dartabase_migration 0.5.1 archive 0.5.0 Jan 14, 2014 Go to the documentation of dartabase_migration 0.5.0 Download dartabase_migration 0.5.0 archive All 18 versions... About Database Migration ia a version-controlled database structure manipulation tool for MySQL and PGSQL without having to write SQL. inspired by Ruby on Rails Author Email Hannes.Rammer@gmail.com Hannes Rammer Homepage github.com/HannesRammer/Dartabase/tree/master/dartabase_migration Documentation www.dartdocs.org/documentation/dartabase_migration/1.0.0/ Source code (hyperlinked) www.crossdart.info/p/dartabase_migration/1.0.0/ Uploader Hannes.Rammer@googlemail.com Hannes.Rammer@gmail.com Share Tweet Dart Language — Site Map — Terms of Service — Privacy Policy π"	"null"	"null"	"Serverside Database migration for simple version controlled database structure manipulation using MySQL/PGSQL without having to write SQL"	"true"
"Package Managers"	"Pub"	"https://pub.dartlang.org/"	"Pub is used to manage packages."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Pub Package Manager dartlang.org pub.dartlang.org Getting Started Docs Getting Started Dependencies Pubspec Format Package Layout Conventions Assets and Transformers Reference FAQ Glossary Versioning Philosophy Commands Pub Commands pub build pub cache pub deps pub get pub global pub publish pub run pub serve pub upgrade pub uploader Packages Welcome to pub.dartlang.org! This is your friendly repository of packages of software for the Dart programming language. Explore packages here and install them using pub, the package manager for Dart. Get started Recently updated packages Package Version Description Updated built_collection 1.0.4 Builder pattern wrappers for core Dart collections. Jul 15, 2016 firebase_encode 0.0.0 Encode strings to escape characters disallowed in Firebase keys Jul 15, 2016 bootstrap 3.3.6 Bootstrap's files, in a pub package. Contains Bootstrap 3.3.6 Included is a transformer to swap the CSS for a CDN version. Jul 15, 2016 markd 0.8.1 A fork of dart-markdown for easy customizing markdown syntaxes. Jul 15, 2016 mdl 1.17.4 Material Design Lite for Dart Jul 14, 2016 More packages... Dart Language — Site Map — Terms of Service — Privacy Policy π"	"null"	"null"	"Pub is used to manage packages."	"true"
"Utilities"	"Flutter"	"https://github.com/flutter/engine"	"Flutter is a new way to build high-performance, cross-platform mobile apps, allowing you to write applications for Android and iOS."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"876"	"105"	"147"	"GitHub - flutter/engine: The Flutter engine Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 105 Star 876 Fork 147 flutter/engine Code Pull requests 1 Wiki Pulse Graphs The Flutter engine http://flutter.io 6,996 commits 2 branches 6 releases 64 contributors C++ 71.6% Python 15.7% Dart 5.1% Java 3.5% Shell 1.4% Objective-C++ 1.3% Other 1.4% C++ Python Dart Java Shell Objective-C++ Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master yjbanov-ios-build-instructions Nothing to show fitness_apk_4 fitness_apk_3 fitness_apk_2 demo_apk_24 demo_apk_23 demo_apk_22 Nothing to show New pull request Latest commit 3291ede Jul 15, 2016 abarth committed on GitHub Add Rect.fromPoints (#2799) … Fixes flutter/flutter#4926 Permalink Failed to load latest commit information. build Do not upgrade the version of google_play_services in third_party/and… Jul 13, 2016 flow clang -Wextra (more all that -Wall) (#2766) Jun 17, 2016 flutter Add Rect.fromPoints (#2799) Jul 15, 2016 mojo Remove dependencies on ui, third_party/mesa and mojo/convertors. Prov… Jul 12, 2016 services Move //mojo/icu to //services/icu (#2757) Jun 15, 2016 skia Remove unused code in //skia (#2746) Jun 11, 2016 sky Drop GCM (#2795) Jul 13, 2016 testing Update to chromium 9659b08ea5a34f889dc4166217f438095ddc10d2 Jul 16, 2015 third_party Remove third_party/mesa. (#2797) Jul 13, 2016 tools Revert ""Remove vendored dart-sdk (#2688)"" May 16, 2016 travis Start moving dart:ui into //flutter/lib/ui (#2750) Jun 13, 2016 .clang-format Top-level files Jul 16, 2015 .gitattributes Top-level files Jul 16, 2015 .gitignore Drop GCM (#2795) Jul 13, 2016 .gn Top-level files Jul 16, 2015 .travis.yml Have Travis check the build for Dart errors. Nov 25, 2015 AUTHORS Updated AUTHORS Jul 24, 2015 BUILD.gn Create an Xcode project template for dynamic service creation. (#2695) May 18, 2016 CONTRIBUTING.md Better explain how to use a local engine Jul 6, 2016 DEPS Drop GCM (#2795) Jul 13, 2016 LICENSE Top-level files Jul 16, 2015 README.md Update CONTRIBUTING.md to account for flutter.git Nov 8, 2015 README.md Flutter Engine Flutter is a new way to build high-performance, cross-platform mobile apps. Flutter is optimized for today's, and tomorrow's, mobile devices. We are focused on low-latency input and high frame rates on Android and iOS. Flutter is an early-stage open-source project. We are still missing core features like accessibility, text input, localization, and more. However, you can build demos and examples today. We hope you try it out and send us feedback. For information about using Flutter to build apps, please see the getting started guide. For information about contributing to the Flutter framework, please see the main Flutter repository. For information about contributing code to the engine itself, please see CONTRIBUTING.md. Community Join us on IRC at #flutter on Freenode or join our mailing list, flutter-dev@googlegroups.com. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/flutter/engine"	"Flutter is a new way to build high-performance, cross-platform mobile apps, allowing you to write applications for Android and iOS."	"true"
"Utilities"	"Quiver"	"https://github.com/google/quiver-dart"	"A set of utility libraries that makes using many libraries easier and more convenient, or adds additional functionality."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"122"	"26"	"59"	"GitHub - google/quiver-dart: A set of utility libraries for Dart Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 26 Star 122 Fork 59 google/quiver-dart Code Issues 45 Pull requests 22 Wiki Pulse Graphs A set of utility libraries for Dart https://pub.dartlang.org/packages/quiver 416 commits 2 branches 10 releases Fetching contributors Dart 99.8% Shell 0.2% Dart Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags await master Nothing to show 0.22.0 0.21.4 0.21.3+1 0.21.3 0.21.2 0.21.1 0.21.0+3 0.21.0+2 0.21.0+1 0.21.0 Nothing to show New pull request Latest commit 1c7d0f5 Apr 26, 2016 munificent committed with yjbanov Remove an unnecessary cast. (#296) … * Remove an unnecessary cast.  Also add an analysis_options file to enable strong mode for everyone who hacks on quiver.  * Don't add analysis-options file since it isn't clean on stable yet. Permalink Failed to load latest commit information. lib Remove an unnecessary cast. (#296) Apr 26, 2016 test Fixes the strong-mode analysis errors. (#290) Apr 21, 2016 tool Revert Travis script to ./tool/travis.sh to ensure analysis and cover… May 8, 2015 .gitattributes Force normalization to UNIX (LF) line-endings. Jan 30, 2015 .gitignore Make Optional implement Iterable Apr 2, 2016 .travis.yml Revert Travis script to ./tool/travis.sh to ensure analysis and cover… May 8, 2015 CHANGELOG.md Update 0.22.0 changelog Apr 21, 2016 CONTRIBUTING.md Specify that tests should pass in checked mode. Jan 30, 2015 LICENSE Initial commit of project and iterables.dart Aug 14, 2013 PATENTS Initial commit of project and iterables.dart Aug 15, 2013 README.md merge quiver.streams into quiver.async (fixes #177) Jun 17, 2015 pubspec.yaml open up 0.23.0-dev Apr 22, 2016 README.md Quiver Quiver is a set of utility libraries for Dart that makes using many Dart libraries easier and more convenient, or adds additional functionality. Documentation API Docs are available. Installation Add Quiver to your project's pubspec.yaml file and run pub get. We recommend the following version constraint: dependencies:   quiver: '>=0.21.0<0.22.0'  Main Libraries quiver.async Utilities for working with Futures, Streams and async computations. collect collects the completion events of an Iterable of Futures into a Stream. enumerate and concat represent Stream versions of the same-named quiver.iterables methods. doWhileAsync, reduceAsync and forEachAsync perform async computations on the elements of on Iterables, waiting for the computation to complete before processing the next element. StreamBuffer allows for the orderly reading of elements from a stream, such as a socket. FutureGroup is collection of Futures that signals when all its child futures have completed. Allows adding new Futures as long as it hasn't completed yet. Useful when async tasks can spwn new async tasks and you need to wait for all of them to complete. FutureStream turns a Future<Stream> into a Stream which emits the same events as the stream returned from the future. StreamRouter splits a Stream into mulltiple streams based on a set of predicates. CountdownTimer is a simple countdown timer that fires events in regular increments. CreateTimer and CreateTimerPeriodic are typedefs that are useful for passing Timer factories to classes and functions, increasing the testability of code that depends on Timer. Metronome is a self-correcting alternative to Timer.periodic. It provides a simple, tracking periodic stream of DateTime events with optional anchor time. quiver.cache Cache is a semi-persistent, asynchronously accessed, mapping of keys to values. Caches are similar to Maps, except that the cache implementation might store values in a remote system, so all operations are asynchronous, and caches might have eviction policies. MapCache is a Cache implementation backed by a Map. quiver.check checkArgument throws ArgumentError if the specifed argument check expression is false. checkListIndex throws RangeError if the specified index is out of bounds. checkNotNull throws ArgumentError if the specified argument is null. checkState throws StateError if the specifed state check expression is false. quiver.collection listsEqual, mapsEqual and setsEqual check collections for equality. LruMap is a map that removes the least recently used item when a threshold length is exceeded. Multimap is an associative collection that maps keys to collections of values. BiMap is a bidirectional map and provides an inverse view, allowing lookup of key by value. TreeSet is a balanced binary tree that offers a bidirectional iterator, the ability to iterate from an arbitrary anchor, and 'nearest' search. quiver.core Optional is a way to represent optional values without allowing null. firstNonNull returns its first non-null argument. hashObjects, hash2, hash3, and hash4 generate high-quality hashCodes for a list of objects, or 2, 3, or 4 arguments respectively. quiver.io visitDirectory is a recursive directory lister that conditionally recurses into sub-directories based on the result of a handler function. quiver.iterables concat, count, cycle, enumerate, merge, partition, range, and zip create, transform, or combine Iterables in different ways, similar to Python's itertools. min, max, and extent retreive the minimum and maximum elements from an iterable. GeneratingIterable is an easy way to create lazy iterables that produce elements by calling a function. A common use-case is to traverse properties in an object graph, like the parent relationship in a tree. InfiniteIterable is a base class for Iterables that throws on operations that require a finite length. quiver.mirrors getTypeName returns the name of a Type instance. implements and classImplements determine if an instance or ClassMirror, respectively, implement the interface represented by a Type instance. They implement the behavior of is for mirrors, except for generics. getMemberMirror searches though a ClassMirror and its class hierarchy for a member. This makes up for the fact that ClassMirror.members doesn't contain members from interfaces or superclasses. Method wraps an InstanceMirror and Symbol to create a callable that invokes a method on the instance. It in effect closurizes a method reflectively. quiver.pattern pattern.dart container utilities for work with Patterns and RegExps. Glob implements glob patterns that are commonly used with filesystem paths. matchesAny combines multiple Patterns into one, and allows for exclusions. matchesFull returns true if a Pattern matches an entire String. escapeRegex escapes special regex characters in a String so that it can be used as a literal match inside of a RegExp. quiver.strings isBlank checks if a string is null, empty or made of whitespace characters. isEmpty checks if a string is null or empty. equalsIgnoreCase checks if two strings are equal, ignoring case. compareIgnoreCase compares two strings, ignoring case. flip flips the order of characters in a string. nullToEmpty turns null to empty string, and returns non-empty strings unchanged. emptyToNull turns empty string to null, and returns non-empty strings unchanged. repeat concatenates a string to itself a given number of times. loop allows you to loop through characters in a string starting and ending at arbitrary indices. Out of bounds indices allow you to wrap around the string, supporting a number of use-cases, including: Rotating: loop('lohel', -3, 2) => 'hello' Repeating, like repeat, but with better character-level control, e.g.: loop('la ', 0, 8) => 'la la la' // no tailing space Tailing: loop('/path/to/some/file.txt', -3) => 'txt' Reversing: loop('top', 3, 0) => 'pot' quiver.time Clock provides points in time relative to the current point in time, for example: now, 2 days ago, 4 weeks from now, etc. For tesability, use Clock rather than other ways of accessing time, like new DateTime(), so that you can use a fake time function in your tests to control time. Now is a typedef for functions that return the current time in microseconds, since Clock deals in DateTime which only have millisecond accuracy. aMicrosecond, aMillisecond, aSecond, aMinute, anHour, aDay, and aWeek are unit duration constants to allow writing for example: aDay vs. const Duration(days: 1) aSecond * 30 vs. const Duration(seconds: 30) Testing Libraries The Quiver testing libraries are intended to be used in testing code, not production code. It currently consists of fake implementations of some Quiver interfaces. quiver.testing.async FakeAsync enables testing of units which depend upon timers and microtasks. It supports fake advancements of time and the microtask queue, which cause fake timers and microtasks to be processed. A Clock is provided from which to read the current fake time. Faking synchronous or blocking time advancement is also supported. quiver.testing.equality areEqualityGroups is a matcher that supports testing operator== and hashCode implementations. quiver.testing.runtime assertCheckedMode asserts the current runtime has checked mode enabled. quiver.testing.time FakeStopwatch is a Stopwatch that uses a provided now() function to get the current time. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/quiver-dart"	"A set of utility libraries that makes using many libraries easier and more convenient, or adds additional functionality."	"true"
"Utilities"	"route_hierarchical"	"https://github.com/angular/route.dart"	"Route is a client routing library for Dart that helps make building single-page web apps."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"29"	"11"	"33"	"GitHub - angular/route.dart Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 29 Fork 33 angular/route.dart Code Issues 21 Pull requests 3 Pulse Graphs No description or website provided. 249 commits 1 branch 8 releases 16 contributors Dart 93.7% Shell 3.9% JavaScript 1.3% HTML 1.1% Dart Shell JavaScript HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.4.13 0.6.1 0.6.0 0.5.0 0.4.22 0.4.21 0.4.20 0.4.19 Nothing to show New pull request Latest commit 4a18c32 Apr 14, 2016 pavelgj Bumped version to 0.7.0 Permalink Failed to load latest commit information. example/basic refactor(example) Feb 26, 2014 lib Strong-mode clean; convert tests Apr 1, 2016 scripts chore(travis): Fix, test with SauceLabs Aug 14, 2014 test Strong-mode clean; convert tests Apr 1, 2016 .gitignore Strong-mode clean; convert tests Apr 1, 2016 .travis.yml chore(travis): Fix, test with SauceLabs Aug 14, 2014 AUTHORS Initial check-in Jan 7, 2013 CHANGELOG.md Strong-mode clean; convert tests Apr 1, 2016 LICENSE Initial check-in Jan 8, 2013 PATENTS Initial check-in Jan 8, 2013 README.md fix(readme): removed uses of addDefaultRoute May 27, 2015 codereview.settings Initial check-in Jan 8, 2013 karma.conf.js chore(travis): Fix, test with SauceLabs Aug 14, 2014 package.json chore(travis): Fix, test with SauceLabs Aug 14, 2014 pubspec.yaml Bumped version to 0.7.0 Apr 14, 2016 README.md Route Route is a client routing library for Dart that helps make building single-page web apps. Installation Add this package to your pubspec.yaml file: dependencies:   route_hierarchical: any  Then, run pub install to download and link in the package. UrlMatcher Route is built around UrlMatcher, an interface that defines URL template parsing, matching and reversing. UrlTemplate The default implementation of the UrlMatcher is UrlTemplate. As an example, consider a blog with a home page and an article page. The article URL has the form /article/1234. It can matched by the following template: /article/:articleId. Router Router is a stateful object that contains routes and can perform URL routing on those routes. The Router can listen to Window.onPopState (or fallback to Window.onHashChange in older browsers) events and invoke the correct handler so that the back button seamlessly works. Example (client.dart): library client;  import 'package:route_hierarchical/client.dart';  main() {   var router = new Router();   router.root     ..addRoute(name: 'article', path: '/article/:articleId', enter: showArticle)     ..addRoute(name: 'home', defaultRoute: true, path: '/', enter: showHome);   router.listen(); }  void showHome(RouteEvent e) {   // nothing to parse from path, since there are no groups }  void showArticle(RouteEvent e) {   var articleId = e.parameters['articleId'];   // show article page with loading indicator   // load article from server, then render article } The client side router can let you define nested routes. var router = new Router(); router.root   ..addRoute(      name: 'usersList',      path: '/users',      defaultRoute: true,      enter: showUsersList)   ..addRoute(      name: 'user',      path: '/user/:userId',      mount: (router) =>        router          ..addRoute(              name: 'articleList',              path: '/acticles',              defaultRoute: true,              enter: showArticlesList)          ..addRoute(              name: 'article',              path: '/article/:articleId',              mount: (router) =>                router                  ..addRoute(                      name: 'view',                      path: '/view',                      defaultRoute: true,                      enter: viewArticle)                  ..addRoute(                      name: 'edit',                      path: '/edit',                      enter: editArticle))) The mount parameter takes either a function that accepts an instance of a new child router as the only parameter, or an instance of an object that implements Routable interface. typedef void MountFn(Router router); or abstract class Routable {   void configureRoute(Route router); } In either case, the child router is instantiated by the parent router an injected into the mount point, at which point child router can be configured with new routes. Routing with hierarchical router: when the parent router performs a prefix match on the URL, it removes the matched part from the URL and invokes the child router with the remaining tail. For instance, with the above example lets consider this URL: /user/jsmith/article/1234. Route ""user"" will match /user/jsmith and invoke the child router with /article/1234. Route ""article"" will match /article/1234 and invoke the child router with `. Route ""view"" will be matched as the default route. The resulting route path will be:user -> article -> view, or simplyuser.article.view` Named Routes in Hierarchical Routers router.go('usersList'); router.go('user.articles', {'userId': 'jsmith'}); router.go('user.article.view', {   'userId': 'jsmith',   'articleId', 1234} ); router.go('user.article.edit', {   'userId': 'jsmith',   'articleId', 1234} ); If ""go"" is invoked on child routers, the router can automatically reconstruct and generate the new URL from the state in the parent routers. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/angular/route.dart"	"Route is a client routing library for Dart that helps make building single-page web apps."	"true"
"Utilities"	"Archive"	"https://pub.dartlang.org/packages/archive"	"A library to encode and decode various archive and compression formats."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"33"	"5"	"12"	"GitHub - brendan-duncan/archive: Dart library to encode and decode various archive and compression formats, such as Zip and Tar. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 33 Fork 12 brendan-duncan/archive Code Issues 2 Pull requests 0 Wiki Pulse Graphs Dart library to encode and decode various archive and compression formats, such as Zip and Tar. 139 commits 2 branches 5 releases Fetching contributors Dart 99.9% HTML 0.1% Dart HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags input_stream master Nothing to show 1.0.23 1.0.22 1.0.20 1.0.19 1.0.18 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. bin example lib test .gitignore ChangeLog.txt LICENSE README.md pubspec.yaml README.md archive Overview A Dart library to encode and decode various archive and compression formats. The library has no reliance on dart:io, so it can be used for both server and web applications. The archive library currently supports the following decoders: Zip (Archive) Tar (Archive) ZLib [Inflate decompression] GZip [Inflate decompression] BZip2 [decompression] And the following encoders: Zip (Archive) Tar (Archive) ZLib [Deflate compression] GZip [Deflate compression] BZip2 [compression] Sample Extract the contents of a Zip file, and encode the contents as a BZip2 compressed Tar file: import 'dart:io' as Io; import 'package:archive/archive.dart'; void main() {   // Read the Zip file from disk.   List<int> bytes = new Io.File('test.zip').readAsBytesSync();    // Decode the Zip file   Archive archive = new ZipDecoder().decodeBytes(bytes);    // Extract the contents of the Zip archive to disk.   for (ArchiveFile file in archive) {     String filename = file.name;     List<int> data = file.content;     new Io.File('out/' + filename)           ..createSync(recursive: true)           ..writeAsBytesSync(data);   }    // Encode the archive as a BZip2 compressed Tar file.   List<int> tar_data = new TarEncoder().encode(archive);   List<int> tar_bz2 = new BZip2Encoder().encode(tar_data);    // Write the compressed tar file to disk.   Io.File fp = new Io.File(filename + '.tbz');   fp.writeAsBytesSync(tar_bz2); }  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/brendan-duncan/archive"	"A library to encode and decode various archive and compression formats."	"true"
"Utilities"	"Frappe"	"https://pub.dartlang.org/packages/frappe"	"A functional reactive programming library for Dart. Frappé extends the functionality of Dart's streams, and introduces new concepts like properties/signals."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"50"	"8"	"11"	"GitHub - danschultz/frappe: A Dart package for functional reactive programming Skip to content Personal Open source Business Explore Get started Sign in Pricing Blog Support Search GitHub This repository Watch 8 Star 50 Fork 11 danschultz/frappe Code Issues 9 Pull requests 1 Wiki Pulse Graphs A Dart package for functional reactive programming http://pub.dartlang.org/packages/frappe 172 commits 5 branches 0 releases Fetching contributors Dart 98.6% HTML 1.3% CSS 0.1% Dart HTML CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags dart2js-bug gh-pages master transformers v0.4 Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. example lib test tool .gitignore .travis.yml AUTHORS CHANGELOG.md CONTRIBUTING.md LICENSE README.md pubspec.yaml README.md Frappé A functional reactive programming library for Dart. Frappé extends the functionality of Dart's streams, and introduces new concepts like properties/signals. Why FRP? UI applications today are highly interactive and data driven. User input can trigger updates to the DOM, playing animations, invoking network requests, and modifying application state. Using the traditional form of event callbacks and modifying state variables can quickly become difficult to write and maintain. Functional reactive programming (FRP) makes it clearer to define user and system events that cause state changes. For instance, it's easy to define ""when a user performs A, do X and Y, then output Z."" When writing reactive code, you'll find yourself focusing more on the dependencies between events for business logic, and less time on their implementation details. Example Lets write an auto-complete movie widget with Frappé. The widget has an input field for the movie name, and a list element that displays movies that most closely match the user's input. A working version can be found here. var searchInput = document.querySelector(""#searchInput""); var suggestionsElement = document.querySelector(""#suggestions"");  var onInput = new EventStream(searchInput.onInput)     .debounce(new Duration(milliseconds: 250)) // Limit the number of network requests     .map((event) => event.target.value) // Get the text from the input field     .distinct(); // Ignore duplicate events with the same text  // Make a network request to get the list of movie suggestions. Because requests // are asynchronous, they can complete out of order. Use `flatMapLatest` to only // respond to request for the last text change. var suggestions = onInput.flatMapLatest((input) => querySuggestions(input));  suggestions.listen((movies) =>     suggestionsElement.children         ..clear()         ..addAll(movies.map((movie) => new LIElement()..text = movie));  // Show ""Searching ..."" feedback while the request is pending var isPending = searchInput.onInput.isWaitingOn(suggestions); isPending.where((value) => value).listen((_) {   suggestionsElement.children       ..clear()       ..add(new DivElement()..text = ""Searching ...""); });  Future<List<String>> querySuggestions(String input) {   // Query some API that returns suggestions for 'input' } API You can explore the full API here. Reactable The Reactable class extends from Stream and is inherited by EventStream and Property. Because these classes extend from Dart's Stream, you can pass them directly to other APIs that expect a Stream. EventStream An EventStream represents a series of discrete events. They're like a Stream in Dart, but extends its functionality with the methods found on Reactable. Event streams can be created from a property via Property.asEventStream(), or through one of its constructor methods. If an event stream is created from a property, its first event will be the property's current value. An EventStream will inherit the behavior of the stream from which it originated. So if an event stream was created from a broadcast stream, it can support multiple subscriptions. Likewise, if an event stream was created from a single-subscription stream, only one subscription can be added to it. Take a look at the article on single-subscription streams vs broadcast streams to learn more about their different behaviors. Property A Property represents a value that changes over time. They're similar to event streams, but they remember their current value. Whenever a subscription is added to a property, it will receive the property's current value as its first event. Properties can be created through one of its constructors, or from an event stream via EventStream.asProperty(). Depending on how the property was created, it may or may not have a starting value. Separate methods are available for creating properties with an initial value, i.e. Property.fromStreamWithInitialValue() and EventStream.asPropertyWithInitialValue(). Properties can support having a null initial value, and is partly the motivation for having separate construction methods. Internally, properties are implemented as broadcast streams and can receive multiple subscriptions. If you were to model text input using properties and streams, the individual key strokes would be events, and the resulting text is a property. Learning More Definitely take a look at the API documentation, and play around with some of the examples. It's also worth checking out BaconJS and RxJS. They're both mature FRP libraries, and offer some great resourses on the subject. Running Tests Tests are run through the Grinder build task. This will run the Dart Analyzer, linter and unit tests. Install grinder: pub global activate grinder Run grinder: grind build Features and bugs Please file feature requests and bugs at the issue tracker. Contributing Take a look here on ways to contribute to Frappé. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/danschultz/frappe"	"A functional reactive programming library for Dart. Frappé extends the functionality of Dart's streams, and introduces new concepts like properties/signals."	"true"
"Dependency Injection"	"DI"	"https://github.com/angular/di.dart"	"Dependency Injection framework by Angular"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"56"	"21"	"53"	"GitHub - angular/di.dart: Dependency Injection framework for Dart. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 21 Star 56 Fork 53 angular/di.dart Code Issues 34 Pull requests 12 Wiki Pulse Graphs Dependency Injection framework for Dart. 314 commits 7 branches 25 releases Fetching contributors Dart 89.0% JavaScript 8.0% Shell 2.6% Other 0.4% Dart JavaScript Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags fix_travis master pubspec rado_test release.3.3.3 v1_x_x v2 Nothing to show v0.0.30 3.3.9 3.3.5+1 3.3.4 3.3.3 3.3.2 3.3.1 3.3.0 3.2.0 3.1.1 3.1.0 3.0.0 2.0.2 2.0.1 2.0.0 2.0.0-alpha.1 1.2.1 1.2.0 1.1.0 1.0.0 0.0.40 0.0.39 0.0.38 0.0.37 0.0.36 Nothing to show New pull request Latest commit 073f473 Apr 27, 2016 hterkelsen committed with rkirov Return parent getter to Injector API Permalink Failed to load latest commit information. benchmark Cleanup errors, warnings and hints from the analyzer and from strong … Apr 25, 2016 bin Cleanup errors, warnings and hints from the analyzer and from strong … Apr 26, 2016 example Return parent getter to Injector API Apr 28, 2016 lib Return parent getter to Injector API Apr 28, 2016 scripts Cleanup errors, warnings and hints from the analyzer and from strong … Apr 26, 2016 test chore: move to analyzer 0.27.1, guinness2 Jan 19, 2016 test_assets chore(deferred_libs): support spec'ed syntax for deferred libraries. Sep 11, 2014 .analysis_options Cleanup errors, warnings and hints from the analyzer and from strong … Apr 26, 2016 .gitignore chore(tests): fix travis runs. Apr 28, 2016 .travis.yml chore(travis): initial travis setup Feb 4, 2014 CHANGELOG.md chore(release): release 3.3.7 Feb 1, 2016 Gruntfile.coffee Initial super lame version Apr 8, 2013 LICENSE refactor: Simpler, Faster injector Jul 23, 2014 README.md docs(README): fix to Engine example Mar 16, 2015 TODO chore(TODO): cleaning up TODO items Dec 20, 2013 package.json chore(changelog): added changelog and script to generate it Apr 16, 2014 pubspec.lock chore(tests): fix travis runs. Apr 28, 2016 pubspec.yaml Return parent getter to Injector API Apr 28, 2016 run-benchmarks.sh fix(benchmarks): Get dart2js'ed benchmarks running on node Oct 30, 2014 run-tests.sh chore(tests): fix travis runs. Apr 28, 2016 test_tf_gen.sh refactor: Simpler, Faster injector Jul 23, 2014 README.md Dependency Injection (DI) framework Installation Add dependency to your pubspec.yaml. dependencies:   di: "">=3.3.4 <4.0.0""  Then, run pub install. Import di. import 'package:di/di.dart';  Example import 'package:di/di.dart';  abstract class Engine {   go(); }  class Fuel {}  class V8Engine implements Engine {   Fuel fuel;   V8Engine(this.fuel);    go() {     print('Vroom...');   } }  class ElectricEngine implements Engine {   go() {     print('Hum...');   } }  // Annotation class Electric {   const Electric(); }  class GenericCar {   Engine engine;    GenericCar(this.engine);    drive() {     engine.go();   } }  class ElectricCar {   Engine engine;    ElectricCar(@Electric() this.engine);    drive() {     engine.go();   } }  void main() {   var injector = new ModuleInjector([new Module()       ..bind(Fuel)       ..bind(GenericCar)       ..bind(ElectricCar)       ..bind(Engine, toFactory: (fuel) => new V8Engine(fuel), inject: [Fuel])       ..bind(Engine, toImplementation: ElectricEngine, withAnnotation: const Electric())   ]);   injector.get(GenericCar).drive(); // Vroom...   injector.get(ElectricCar).drive(); // Hum... } Contributing Refer to the guidelines for contributing to AngularDart. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/angular/di.dart"	"Dependency Injection framework by Angular"	"true"
"Parsers"	"html"	"https://pub.dartlang.org/packages/html"	"A library for working with HTML documents. Previously known as html5lib."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"html 0.13.0 | Pub Package Manager dartlang.org pub.dartlang.org Getting Started Docs Getting Started Dependencies Pubspec Format Package Layout Conventions Assets and Transformers Reference FAQ Glossary Versioning Philosophy Commands Pub Commands pub build pub cache pub deps pub get pub global pub publish pub run pub serve pub upgrade pub uploader Packages html 0.13.0 README.md CHANGELOG.md Installing Versions html5 parser in dart This is a pure Dart html5 parser. It's a port of html5lib from Python. Since it's 100% Dart you can use it safely from a script or server side app. Eventually the parse tree API will be compatible with dart:html, so the same code will work on the client and the server. (Formerly known as html5lib.) Installation Add this to your pubspec.yaml (or create it): dependencies:   html: any  Then run the Pub Package Manager (comes with the Dart SDK): pub install  Usage Parsing HTML is easy! import 'package:html/parser.dart' show parse; import 'package:html/dom.dart';  main() {   var document = parse(       '<body>Hello world! <a href=""www.html5rocks.com"">HTML5 rocks!');   print(document.outerHtml); } You can pass a String or list of bytes to parse. There's also parseFragment for parsing a document fragment, and HtmlParser if you want more low level control. Running Tests ./test/run.sh  changelog This file contains highlights of what changes on each version of the html package. 0.13.0 BREAKING Fix all strong mode errors and warnings. This involved adding more precise types on some public APIs, which is why it may break users. Pub version 0.12.2+2 Support csslib versions 0.13.x. Pub version 0.12.2+1 Exclude .packages file from the published package. Pub version 0.12.2 Added Element.endSourceSpan, containing the span of a closing tag. Pub version 0.12.0+1 Support csslib version 0.12.0. Rename to package:html 0.12.0 package has been renamed to html Pub version 0.12.0 switch from source_maps' Span class to source_span's SourceSpan class. Pub version 0.11.0+2 expand the version constraint for csslib. Pub version 0.10.0+1 use a more recent source_maps version. Pub version 0.10.0 fix how document fragments are added in NodeList.add/addAll/insertAll. Pub version 0.9.2-dev add Node.text, Node.append, Document.documentElement add Text.data, deprecate Node.value and Text.value. deprecate Node.$dom_nodeType added querySelector/querySelectorAll, deprecated query/queryAll. This matches the current APIs in dart:html. 1. Depend on it Add this to your package's pubspec.yaml file:  dependencies:   html:   2. Install it You can install packages from the command line:  $ pub get  Alternatively, your editor might support pub. Check the docs for your editor to learn more. Version Uploaded Documentation Archive 0.13.0 May 11, 2016 Go to the documentation of html 0.13.0 Download html 0.13.0 archive 0.12.2+2 Apr 21, 2016 Go to the documentation of html 0.12.2+2 Download html 0.12.2+2 archive 0.12.2+1 Dec 17, 2015 Go to the documentation of html 0.12.2+1 Download html 0.12.2+1 archive 0.12.2 Aug 28, 2015 Go to the documentation of html 0.12.2 Download html 0.12.2 archive 0.12.1+2 Jul 6, 2015 Go to the documentation of html 0.12.1+2 Download html 0.12.1+2 archive 0.12.1+1 Apr 3, 2015 Go to the documentation of html 0.12.1+1 Download html 0.12.1+1 archive 0.12.1 Mar 5, 2015 Go to the documentation of html 0.12.1 Download html 0.12.1 archive About A library for working with HTML documents. Previously known as html5lib. Author Email misc@dartlang.org Dart Team Homepage github.com/dart-lang/html Documentation www.dartdocs.org/documentation/html/0.13.0/ Source code (hyperlinked) www.crossdart.info/p/html/0.13.0/ Uploader jmesserly@google.com sigmund@google.com terry@google.com dgrove@google.com nweiz@google.com kevmoo@google.com rnystrom@google.com Share Tweet Dart Language — Site Map — Terms of Service — Privacy Policy π"	"null"	"null"	"A library for working with HTML documents. Previously known as html5lib."	"true"
"Parsers"	"markdown"	"https://github.com/dart-lang/markdown"	"Parse markdown into HTML on both the client and server."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"42"	"44"	"22"	"GitHub - dart-lang/markdown: A Dart markdown library Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 44 Star 42 Fork 22 dart-lang/markdown Code Issues 4 Pull requests 2 Pulse Graphs A Dart markdown library https://pub.dartlang.org/packages/markdown 188 commits 1 branch 14 releases Fetching contributors Dart 79.3% HTML 20.7% Dart HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v0.7.1+2 v0.7.1+1 v0.7.0 0.10.1 0.10.0 0.9.0 0.8.0 0.7.2 0.6.0+1 0.6.0 0.5.1 0.5.0 0.4.0 0.3.6 Nothing to show New pull request Latest commit e9b893b Jul 11, 2016 srawlins committed with kevmoo Print caught errors in CommonMark script (#108) Permalink Failed to load latest commit information. benchmark Add newline to benchmark output. Sep 14, 2015 bin eliminate analyzer warnings Oct 25, 2015 lib Fix image alt text Jul 10, 2016 test Fix image alt text Jul 10, 2016 tool Print caught errors in CommonMark script (#108) Jul 11, 2016 .analysis_options Make it strong mode clean. Mar 24, 2016 .gitignore ignore pubspec.lock Oct 25, 2015 .travis.yml add travis support Oct 26, 2015 AUTHORS Add a dartdoc-compare.dart script Jan 21, 2016 CHANGELOG.md Bumping CHANGELOG and common_mark_stats.txt Jul 7, 2016 LICENSE Imported markdown library from dartdoc Feb 20, 2013 README.md Document how to update CommonMark files Jul 11, 2016 pubspec.yaml Bumping CHANGELOG and common_mark_stats.txt Jul 7, 2016 README.md A portable Markdown library written in Dart. It can parse Markdown into HTML on both the client and server. Usage import 'package:markdown/markdown.dart';  void main() {   print(markdownToHtml('Hello *Markdown*'));   //=> <p>Hello <em>Markdown</em></p> } Syntax extensions A few Markdown extensions, beyond what was specified in the original Perl Markdown implementation, are supported. By default, the ones supported in CommonMark are enabled. Any individual extension can be enabled by specifying an Array of extension syntaxes in the blockSyntaxes or inlineSyntaxes argument of markdownToHtml. The currently supported inline extension syntaxes are: new InlineHtmlSyntax() - approximately CommonMark's definition of ""Raw HTML"". The currently supported block extension syntaxes are: const FencedCodeBlockSyntax() - Code blocks familiar to Pandoc and PHP Markdown Extra users. const HeaderWithIdSyntax() - ATX-style headers have generated IDs, for link anchors (akin to Pandoc's auto_identifiers). const SetextHeaderWithIdSyntax() - Setext-style headers have generated IDs for link anchors (akin to Pandoc's auto_identifiers). For example: import 'package:markdown/markdown.dart';  void main() {   print(markdownToHtml('Hello <span class=""green"">Markdown</span>',       inlineSyntaxes: [new InlineHtmlSyntax()]));   //=> <p>Hello <span class=""green"">Markdown</span></p> } Extension Sets To make extension management easy, you can also just specify an extension set. Both markdownToHtml() and new Document() accept an extensionSet named parameter. Right now there are two extension sets: ExtensionSet.none includes no extensions. With no extensions, Markdown documents will be parsed closely to how they might be parsed by the original Perl Markdown implementation. ExtensionSet.commonMark includes two extensions so far, which bring this package's Markdown parsing closer to what is found in the CommonMark spec: new InlineHtmlSyntax() const FencedCodeBlockSyntax() Custom syntax extensions You can create and use your own syntaxes. import 'package:markdown/markdown.dart';  void main() {   var syntaxes = [new TextSyntax('nyan', sub: '~=[,,_,,]:3')];   print(markdownToHtml('nyan', inlineSyntaxes: syntaxes));   //=> <p>~=[,,_,,]:3</p> } CommonMark compliance This package contains a number of files in the tool directory for tracking compliance with CommonMark. Updating CommonMark stats when changing the implementation Update the library and test code, making sure that tests still pass. Run dart tool/common_mark_stats.dart --update-files to update the per-test results tool/common_mark_stats.json and the test summary tool/common_mark_stats.txt. Verify that more tests now pass – or at least, no more tests fail. Make sure you include the updated stats files in your commit. Updating the CommonMark test file for a spec update Check out the CommonMark source. Make sure you checkout a major release. Dump the test output overwriting the existing tests file. /path/to/common_mark_dir> python3 test/spec_tests.py --dump-tests \   > /path/to/markdown.dart/tool/common_mark_tests.json  Update the stats files as described above. Note any changes in the results. Update any references to the existing spec by search for http://spec.commonmark.org/0.25 in the repository. (Including this one.) Verify the updated links are still valid. Commit changes, including a corresponding note in CHANGELOG.md. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dart-lang/markdown"	"Parse markdown into HTML on both the client and server."	"true"
"Parsers"	"PetitParser"	"https://github.com/petitparser/dart-petitparser"	"PetitParser combines ideas from scannerless parsing, parser combinators, parsing expression grammars and packrat parsers to model grammars and parsers as objects that can be reconfigured dynamically."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"73"	"5"	"23"	"GitHub - petitparser/dart-petitparser: Dynamic Grammars in Dart Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 5 Star 73 Fork 23 petitparser/dart-petitparser Code Issues 1 Pull requests 1 Pulse Graphs Dynamic Grammars in Dart 580 commits 2 branches 43 releases Fetching contributors Dart 97.9% CSS 1.7% Other 0.4% Dart CSS Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags builder master Nothing to show 1.5.3 1.5.1 1.5.0 1.4.3 1.4.2 1.4.1 1.4.0 1.3.7 1.3.6 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.2.2 1.2.1 1.2.0 1.1.3 1.1.2 1.1.1 1.1.0 1.0.1 1.0.0 0.5.7 0.5.6 0.5.5 0.5.4 0.5.3 0.5.2 0.5.1 0.5.0 0.4.3 0.4.2 0.4.1 0.4.0 0.3.0 0.2.5+m4 0.2.4+m4 0.2.3+m3 0.2.2+m3 0.2.1 0.2.0 0.1.0 Nothing to show New pull request Latest commit 4466783 Jun 24, 2016 renggli Fix some dart analyzer warnings in Lisp interpreter Permalink Failed to load latest commit information. example Fix some dart analyzer warnings in Lisp interpreter Jun 24, 2016 lib test tool .analysis_options Enable strong mode in IDEs, make tests strongly typed. Apr 5, 2016 .gitignore .travis.yml AUTHORS - fixed AUTHORS, README and LICENSE Jan 17, 2013 CHANGELOG.md LICENSE Updated date in LICENSE Mar 15, 2016 README.md pubspec.yaml Bumped to 1.5.3 Apr 5, 2016 README.md PetitParser for Dart Grammars for programming languages are traditionally specified statically. They are hard to compose and reuse due to ambiguities that inevitably arise. PetitParser combines ideas from scannnerless parsing, parser combinators, parsing expression grammars and packrat parsers to model grammars and parsers as objects that can be reconfigured dynamically. This library is open source, stable and well tested. Development happens on GitHub. Feel free to report issues or create a pull-request there. General questions are best asked on StackOverflow. Up-to-date class documentation is created with every release. Tutorial Installation Follow the Installing instructions on https://pub.dartlang.org/packages/petitparser. Import the package into your Dart code using: import 'package:petitparser/petitparser.dart'; Writing a Simple Grammar Writing grammars with PetitParser is simple as writing Dart code. For example, to write a grammar that can parse identifiers that start with a letter followed by zero or more letter or digits is defined as follows: Parser id = letter() & (letter() | digit()).star(); If you look at the object id in the debugger, you'll notice that the code above builds a tree of parser objects: Sequence: This parser accepts a sequence of parsers. Predicate: This parser accepts a single letter. Repeater: This parser accepts zero or more times another parser. Choice: This parser accepts a single word character. Predicate: This parser accepts a single letter. Predicate: This parser accepts a single digit. The operators & and | are overloaded and create a sequence and a choice parser respectively. In some contexts it might be more convenient to use chained function calls: Parser id = letter().seq(letter().or(digit()).star()); Parsing Some Input To actually parse a String (or List) we can use the method Parser.parse: Result id1 = id.parse('yeah'); Result id2 = id.parse('f12'); The method Parser.parse returns a parse Result, which is either an instance of Success or Failure. In both examples above we are successful and can retrieve the parse result using Success.value: print(id1.value);                   // ['y', ['e', 'a', 'h']] print(id2.value);                   // ['f', ['1', '2']] While it seems odd to get these nested arrays with characters as a return value, this is the default decomposition of the input into a parse tree. We'll see in a while how that can be customized. If we try to parse something invalid we get an instance of Failure as an answer and we can retrieve a descriptive error message using Failure.message: Result id3 = id.parse('123'); print(id3.message);                 // 'letter expected' print(id3.position);                // 0 Trying to retrieve the parse result by calling Failure.value would throw the exception ParserError. Context.isSuccess and Context.isFailure can be used to decide if the parse was successful. If you are only interested if a given string matches or not you can use the helper method Parser.accept: print(id.accept('foo'));            // true print(id.accept('123'));            // false Different Kinds of Parsers PetitParser provide a large set of ready-made parser that you can compose to consume and transform arbitrarily complex languages. The terminal parsers are the most simple ones. We've already seen a few of those: char('a') parses the character a. string('abc') parses the string abc. any() parses any character. digit() parses any digit from 0 to 9. letter() parses any letter from a to z and A to Z. word() parses any letter or digit. So instead of using the letter and digit predicate, we could have written our identifier parser like this: var id = letter() & word().star(); The next set of parsers are used to combine other parsers together: p1 & p2 and p1.seq(p2) parse p1 followed by p2 (sequence). p1 | p2 and p1.or(p2) parse p1, if that doesn't work parse p2 (ordered choice). p.star() parses p zero or more times. p.plus() parses p one or more times. p.optional() parses p, if possible. p.and() parses p, but does not consume its input. p.not() parses p and succeed when p fails, but does not consume its input. p.end() parses p and succeed at the end of the input. To attach an action or transformation to a parser we can use the following methods: p.map((value) => ...) performs the transformation given the function. p.pick(n) returns the n-th element of the list p returns. p.flatten() creates a string from the result of p. p.token() creates a token from the result of p. p.trim() trims whitespaces before and after p. To return a string of the parsed identifier, we can modify our parser like this: var id = letter().seq(word().star()).flatten(); To conveniently find all matches in a given input string you can use Parser.matchesSkipping: var matches = id.matchesSkipping('foo 123 bar4'); print(matches);                     // ['foo', 'bar4'] These are the basic elements to build parsers. There are a few more well documented and tested factory methods in the Parser class. If you want browse their documentation and tests. Writing a More Complicated Grammar Now we are able to write a more complicated grammar for evaluating simple arithmetic expressions. Within a file we start with the grammar for a number (actually an integer): var number = digit().plus().flatten().trim().map(int.parse); Then we define the productions for addition and multiplication in order of precedence. Note that we instantiate the productions with undefined parsers upfront, because they recursively refer to each other. Later on we can resolve this recursion by setting their reference: var term = undefined(); var prod = undefined(); var prim = undefined();  term.set(prod.seq(char('+').trim()).seq(term).map((values) {   return values[0] + values[2]; }).or(prod)); prod.set(prim.seq(char('*').trim()).seq(prod).map((values) {   return values[0] * values[2]; }).or(prim)); prim.set(char('(').trim().seq(term).seq(char(')'.trim())).map((values) {   return values[1]; }).or(number)); To make sure that our parser consumes all input we wrap it with the end() parser into the start production: var start = term.end(); That's it, now we can test our parser and evaluator: print(start.parse('1 + 2 * 3').value);        // 7 print(start.parse('(1 + 2) * 3').value);      // 9 As an exercise we could extend the parser to also accept negative numbers and floating point numbers, not only integers. Furthermore it would be useful to support subtraction and division as well. All these features can be added with a few lines of PetitParser code. Misc Examples The package comes with a large collections of grammars and language experiments ready to explore: lib/dart.dart contains an experimental Dart grammar. lib/json.dart contains a complete JSON grammar and parser. lib/lisp.dart contains a complete Lisp grammar, parser and evaluator: example/lisphell contains a command line lisp interpreter. example/lispweb contains a web based lisp interpreter. lib/smalltalk.dart contains a complete Smalltalk grammar. Furthermore, there are various open source projects using PetitParser: Badger is an experimental programming language. dart-xml is a lightweight library for parsing, traversing, and querying XML documents. InQlik is a parser for QlikView load script files. intl provides internationalization and localization support to Dart. PowerConfig is a power config implementation. RythmDart is a rich featured, high performance template engine. SharkDart is a small template engine. History PetitParser was originally implemented in Smalltalk. Later on, as a mean to learn these languages, I reimplemented PetitParser in Java and Dart. The implementations are very similar in their API and the supported features. If possible, the implementations adopt best practises of the target language. Ports Java PHP Smalltalk TypeScript License The MIT License, see LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/petitparser/dart-petitparser"	"PetitParser combines ideas from scannerless parsing, parser combinators, parsing expression grammars and packrat parsers to model grammars and parsers as objects that can be reconfigured dynamically."	"true"
"Parsers"	"xmlstream"	"https://pub.dartlang.org/packages/xml"	"A streaming event-based XML Parser."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"xml 2.4.3 | Pub Package Manager dartlang.org pub.dartlang.org Getting Started Docs Getting Started Dependencies Pubspec Format Package Layout Conventions Assets and Transformers Reference FAQ Glossary Versioning Philosophy Commands Pub Commands pub build pub cache pub deps pub get pub global pub publish pub run pub serve pub upgrade pub uploader Packages xml 2.4.3 README.md Installing Versions Dart XML Dart XML is a lightweight library for parsing, traversing, querying and building XML documents. This library is open source, stable and well tested. Development happens on GitHub. Feel free to report issues or create a pull-request there. General questions are best asked on StackOverflow. Up-to-date class documentation is created with every release. Tutorial Follow the Installing instructions on https://pub.dartlang.org/packages/xml. Import the package into your Dart code using: import 'package:xml/xml.dart' as xml; Reading and Writing To read XML input use the top-level function parse(String input): var bookshelfXml = '''<?xml version=""1.0""?>     <bookshelf>       <book>         <title lang=""english"">Growing a Language</title>         <price>29.99</price>       </book>       <book>         <title lang=""english"">Learning XML</title>         <price>39.95</price>       </book>       <price>132.00</price>     </bookshelf>'''; var document = xml.parse(bookshelfXml); The resulting object is an instance of XmlDocument. In case the document cannot be parsed, a ParserError is thrown. To write back the parsed XML document simply call toString(): print(document.toString()); Traversing and Querying Accessors allow to access nodes in the XML tree: attributes returns an iterable over the attributes of the current node. children returns an iterable over the children of the current node. There are various methods to traverse the XML tree along its axes: preceding returns an iterable over nodes preceding the opening tag of the current node in document order. descendants returns an iterable over the descendants of the current node in document order. This includes the attributes of the current node, its children, the grandchildren, and so on. following the nodes following the closing tag of the current node in document order. ancestors returns an iterable over the ancestor nodes of the current node, that is the parent, the grandparent, and so on. Note that this is the only iterable that traverses nodes in reverse document order. For example, the descendants iterator could be used to extract all textual contents from an XML tree: var textual = document.descendants     .where((node) => node is XmlText && !node.text.trim().isEmpty)     .join('\n'); print(textual); Additionally, there are helpers to find elements with a specific tag: findElements(String name) finds direct children of the current node with the provided tag name. findAllElements(String name) finds direct and indirect children of the current node with the provided tag name. For example, to find all the nodes with the <title> tag you could write: var titles = document.findAllElements('title'); The above code returns a lazy iterator that recursively walks the XML document and yields all the element nodes with the requested tag name. To extract the textual contents call text: titles     .map((node) => node.text)     .forEach(print); This prints Growing a Language and Learning XML. Similarly, to compute the total price of all the books one could write the following expression: var total = document.findAllElements('book')     .map((node) => double.parse(node.findElements('price').single.text))     .reduce((a, b) => a + b); print(total); Note that this first finds all the books, and then extracts the price to avoid counting the price tag that is included in the bookshelf. Building To build a new XML document use an XmlBuilder. The builder implements a small set of methods to build complete XML trees. To create the above bookshelf example one would write: var builder = new XmlBuilder(); builder.processing('xml', 'version=""1.0""'); builder.element('bookshelf', nest: () {   builder.element('book', nest: () {     builder.element('title', nest: () {       builder.attribute('lang', 'english');       builder.text('Growing a Language');     });     builder.element('price', nest: 29.99);   });   builder.element('book', nest: () {     builder.element('title', nest: () {       builder.attribute('lang', 'english');       builder.text('Learning XML');     });     builder.element('price', nest: 39.95);   });   builder.element('price', nest: 132.00); }); var xml = builder.build(); Note the element method. It is quite sophisticated and supports many different optional named arguments: The most common is the nest: argument which is used to insert contents into the element. In most cases this will be a function that calls more methods on the builder to define attributes, declare namespaces and add child elements. However, the argument can also be a string or an arbitrary Dart object that is converted to a string and added as a text node. While attributes can be defined from within the element, for simplicity there is also an argument attributes: that takes a map to define simple name-value pairs. Furthermore we can provide an URI as the namespace of the element using namespace: and declare new namespace prefixes using namespaces:. For details see the documentation of the method. The builder pattern allows you to easily extract repeated parts into specific methods. In the example above, one could put the part that writes a book into a separate method as follows: buildBook(XmlBuilder builder, String title, String language, num price) {   builder.element('book', nest: () {     builder.element('title', nest: () {       builder.attribute('lang', 'english');       builder.text(title);     });     builder.element('price', nest: price);   }); } Misc Examples There are various open source projects using this package: csv2xml is a library to convert between CSV and XML. dart-xrd is a library to read Extensible Resource Descriptors. Supports Standard well-formed XML and HTML. Decodes and encodes commonly used character entities. Querying and traversing API using Dart iterators. Building XML trees using a builder API. Limitations Doesn't validate namespace declarations. Doesn't validate schema declarations. Doesn't parse and enforce DTD. History This library started as an example of the PetitParser library. To my own surprise various people started to use it to read XML files. In April 2014 I was asked to replace the original dart-xml library from John Evans. License The MIT License, see LICENSE. 1. Depend on it Add this to your package's pubspec.yaml file:  dependencies:   xml:   2. Install it You can install packages from the command line:  $ pub get  Alternatively, your editor might support pub. Check the docs for your editor to learn more. Version Uploaded Documentation Archive 2.4.3 Apr 5, 2016 Go to the documentation of xml 2.4.3 Download xml 2.4.3 archive 2.4.2 Mar 7, 2016 Go to the documentation of xml 2.4.2 Download xml 2.4.2 archive 2.4.1 Jan 17, 2016 Go to the documentation of xml 2.4.1 Download xml 2.4.1 archive 2.4.0 Oct 6, 2015 Go to the documentation of xml 2.4.0 Download xml 2.4.0 archive 2.3.2 May 15, 2015 Go to the documentation of xml 2.3.2 Download xml 2.3.2 archive 2.3.1 May 15, 2015 Go to the documentation of xml 2.3.1 Download xml 2.3.1 archive 2.3.0 May 15, 2015 Go to the documentation of xml 2.3.0 Download xml 2.3.0 archive 2.2.3 Feb 2, 2015 Go to the documentation of xml 2.2.3 Download xml 2.2.3 archive 2.2.2 Jan 23, 2015 Go to the documentation of xml 2.2.2 Download xml 2.2.2 archive 2.2.1 Dec 14, 2014 Go to the documentation of xml 2.2.1 Download xml 2.2.1 archive All 36 versions... About A lightweight library for parsing, traversing, querying and building XML documents. Author Email renggli@gmail.com Lukas Renggli Homepage github.com/renggli/dart-xml Documentation www.dartdocs.org/documentation/xml/2.4.3/ Source code (hyperlinked) www.crossdart.info/p/xml/2.4.3/ Uploader prujohn@gmail.com renggli@gmail.com Share Tweet Dart Language — Site Map — Terms of Service — Privacy Policy π"	"null"	"null"	"A streaming event-based XML Parser."	"true"
"Parsers"	"YAML"	"https://pub.dartlang.org/packages/yaml"	"A parser for YAML."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"12"	"35"	"4"	"GitHub - dart-lang/yaml: A Dart YAML parser. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 35 Star 12 Fork 4 dart-lang/yaml Code Issues 2 Pull requests 0 Pulse Graphs A Dart YAML parser. https://pub.dartlang.org/packages/yaml 68 commits 1 branch 8 releases Fetching contributors Dart 100.0% Dart Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 2.1.10 2.1.9 2.1.8 2.1.7 2.1.6 2.1.5 2.1.4 2.1.3 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. benchmark lib test .analysis_options .gitignore .test_config CHANGELOG.md LICENSE README.md yaml: reformat, fix README and homepage link, bump version Jan 20, 2015 codereview.settings libyaml-license.txt pubspec.yaml README.md A parser for YAML. Use loadYaml to load a single document, or loadYamlStream to load a stream of documents. For example: import 'package:yaml/yaml.dart';  main() {   var doc = loadYaml(""YAML: YAML Ain't Markup Language"");   print(doc['YAML']); } This library currently doesn't support dumping to YAML. You should use JSON.encode from dart:convert instead: import 'dart:convert'; import 'package:yaml/yaml.dart';  main() {   var doc = loadYaml(""YAML: YAML Ain't Markup Language"");   print(JSON.encode(doc)); } Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dart-lang/yaml"	"A parser for YAML."	"true"
"Validation"	"Constrain"	"https://pub.dartlang.org/packages/constrain"	"Provides a constraint based Validation library inspired by Java Bean Validation but leveraging the superior language capabilities of Dart."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"constrain 0.2.8 | Pub Package Manager dartlang.org pub.dartlang.org Getting Started Docs Getting Started Dependencies Pubspec Format Package Layout Conventions Assets and Transformers Reference FAQ Glossary Versioning Philosophy Commands Pub Commands pub build pub cache pub deps pub get pub global pub publish pub run pub serve pub upgrade pub uploader Packages constrain 0.2.8 README.md CHANGELOG.md Installing Versions Constrain: Object Constraints for Dart Introduction Provides a constraint based Validation library inspired by Java Bean Validation but leveraging the superior language capabilities of Dart. In particular: much more powerful annotations functions and an extensive matcher library Warning: Runtime Mirrors Used. Features Class level constraints for cross field validation Property constraints (also via getter) Constraint Inheritance Cascading validation Constraint Groups Constraints can be specified with: Dart functions matchers from the matchers library Detailed constraint violation model * with json support Constraints on function parameters and returns Constraints on method parameters and returns with inheritance A core set of common constraints such as Min, Max and Pattern Usage Key Concept - Mandatoriness One of the most important concepts to remember is that all constraints on a property (other than @NotNull) are only applied to a property when its value is not null. So for example, you may have a constraint that defines what makes an email address valid. You can apply this to optional properties as well as mandatory ones. So for example if you have a mandatory home email and an optional work email you may have something like class Contacts {   @NotNull()   @Ensure(isValidEmail)   String homeEmail;      @Ensure(isValidEmail)   String workEmail; }    In effect constraints are applied as follows (illustrative only): if the @NotNull constraint is present apply that if the value is not null apply all other constraints So in the case of Contacts the homeEmail property must have a value and it must satisfy isValidEmail. However, workEmail is valid if it is null, but if it does have a value it must also satisfy isValidEmail. Define Constraints On Your Objects Note: It is recommended that you use one of the core constraints when one exists for your need. This will allow you to take advantage of packages that may be built in the future such as code generators from JSON schema that support them. See the section on Core Constraints below The following (rather contrived) example illustrates several features of constraints, which are described below. class Primate {   @Ensure(isPositive)   int age; }  @Ensure(eitherOlderThan20OrHasAtLeastTwoAddresses,     description: 'Must be either older than twenty or have at least two adresses') class Person extends Primate {   @Ensure(isBetween10and90)   int get age => super.age;    @NotNull()   @Ensure(allStreetsStartWith15, group: const Detailed())   List<Address> addresses;    @Ensure(cantBeYourOwnParent,       description: ""A person cannot be their own parent"")   Set<Person> parents;     String toString() => 'Person[age: $age, addressses: $addresses]'; }  class Address {   @Ensure(streetIsAtLeast10Characters)   String street;    String toString() => 'Address[street: $street]'; }  Matcher Constraints The first constraint we see is on the Primate's age property   @Ensure(isPositive)   int age;  isPositive is a const matcher that comes with the matcher library. In short a primate's age will satisfy this constraint if it is greater than 0. Using matchers is a common way to specify constraints. When matcher based constraints are violated they provide details about what went wrong. Constraint Inheritance If you look at the Person class you will see that it extends Primate. This means that it will automatically inherit the age property and the isPositive constraint on it. That is, Persons will also be subject to this constraint. You can also see that Person has a getter on age as follows   @Ensure(isBetween10and90)   int get age => super.age;  It simply redirects to the primate's age and exists soley so that we can further constrain age (admittedly with a rather silly constraint). isBetween10and90 is another matcher but this time not a const so we must use a function to wrap it as follows Matcher isBetween10and90() =>     allOf(greaterThanOrEqualTo(10), lessThanOrEqualTo(90));  Note there is no NotNull constraint on age. This means it is allowed to be null and the other constraints (isPositive and isBetween10and90) will only be applied if it is non null. Next we can see that the addresses property has two constraints   @NotNull()   @Ensure(allStreetsStartWith15, group: const Detailed())   List<Address> addresses;  NotNull NotNull indicates a property is mandatory. allStreetsStartWith15 illustrates two more features. Constraint Groups Firstly it specifies a group called Detailed. This means that this constraint will only be validated when that group is validated (as covered in the Validation section below). Boolean Function Constraints Secondly, it is an example of a boolean expression based constraint bool allStreetsStartWith15(List<Address> addresses) =>   addresses.every((a) => a.street == null || a.street.startsWith(""15""));  In addition to matchers, you can also use plain ol' Dart code for your constraints. Note: as Dart does not have null safe path expressions you need to check each segment or risk an NPE Note that even though this constraint depends only on a single field of the Address class it is not defined on the Address class's street property. The reason is, that it is not intended to be true for all uses of Address, just those that are owned by Persons. Keep this in mind when you decide where constraints should live. The parents property illustrates yet another two features   @Ensure(cantBeYourOwnParent,       description: ""A person cannot be their own parent"")   Set<Person> parents;  Constraint Descriptions Firstly, it contains a description named argument. This controls how the constraint will be referred to (e.g. when it is violated). Boolean Expressions with Owner Secondly, it is another form of boolean function constraint bool cantBeYourOwnParent(Set<Person> parents, Person person) =>     !parents.contains(person);  Note the second argument person. This is the Person object that owns the parents field being validated. As you can see, this was needed to express this constraint. Most constraints don't need it but it's very useful at times. Class Based Constraints If we jump back to the Person class you will notice a constraint on the class itself @Ensure(eitherOlderThan20OrHasAtLeastTwoAddresses,     description: 'Must be either older than twenty or have at least two adresses')  This is where you put cross field constraints. In other words, constraints that require more than one field of the class to express. Matcher eitherOlderThan20OrHasAtLeastTwoAddresses() =>     anyOf(hasAge(greaterThan(20)),         hasAddresses(hasLength(greaterThanOrEqualTo(""two""))));  Note that class based constraints are also inherited. Cascading Lastly, we come to the Address class and the constraint on street   @Ensure(streetIsAtLeast10Characters)   String street;  There is nothing terribly interesting about the constraint itself. What's interesting is in the context of validating a Person. In order for the addresses property of Person to be considered valid it requires that each Address object is also valid. This means that the street property of each address must be at least 10 characters in length. Validate your Constrained Objects Now you can create instances of your objects and validate them. final Person person = new Person()   ..age = -22   ..addresses = [new Address()..street = ""16 blah st""];  Validator v = new Validator(); Set<ConstraintViolation> violations = v.validate(person); print(violations);   This prints Constraint violated at path Symbol(""addresses"").Symbol(""street"") Expected: an object with length of a value greater than or equal to <10>   Actual: '15 x st'    Which: has length of <9>  Constraint violated at path Symbol(""parents"") A person cannot be their own parent  Constraint violated at path Symbol(""age"") Expected: (a value greater than or equal to <10> and a value less than or equal to <90>)   Actual: <-22>    Which: is not a value greater than or equal to <10>  Constraint violated at path Symbol(""age"") Expected: a positive value   Actual: <-22>    Which: is not a positive value  Constraint violated at path Must be either older than twenty or have at least two adresses Expected: (Person with age that a value greater than <20> or Person with addresses that an object with length of a value greater than or equal to 'two')   Actual: Person:<Person[age: -22, addressses: [Address[street: 15 x st]]]>   Note, depending on the audience you may not simply print the violations like this. Just like in Java the ConstraintViolation class is a structured object so in addition to a message you can get lots of details about exactly what was violated where. When integrating with UI frameworks like polymer, you would typically use the structured information to provide better error messages. Specifying Constraint descriptions provide you complete control the wording of a constraint and is typically what you would want to show to the user. Validating Groups The model contained a single group called Detailed that was applied to the addresses property. It was excluded from validation in the previous example which was validating against the DefaultGroup To include this constraint too specify the groups as follows   final violations = v.validate(person, groups: [const Detailed()]);  Core Constraints Core constraints are useful to simplify adding common constraints and also for integrating with external constraint defintions (for example JSON Schema, XML Schema, HTML / Polymer Input Fields). Constrain provides a core set of constraints. Currently this includes Min and Max @Min(10.2) @Max(40.7, isInclusive: false) double foo;  Min and Max can be applied to any Comparable that has a meaningful sense of ordering and can be made a const This includes all nums (int, double). Unfortunately DateTime doesn't have const construcutor. New constraints will likely be created for the DateTime equivalents of Min and Max in the future (like Before and After) Both Min and Max provide a bool property called isInclusive. Pattern @Pattern(r'[\w]+-[\d]+') String id;  Pattern allows you to constrain a String field with anything that implements the Pattern class. By default it assumes you give it a RegExp and does the conversion (because RegExp does not have a const constructor) You can prevent the conversion to RegExp with th isRegExp parameter @Pattern('a plain ol string', isRegExp: false) String id;  Note: dart:core defines a class called Pattern. Using constrains Pattern will result in a warning that it is hiding the dart:core version. To get rid of this warning you need to add import 'dart:core' hide Pattern; or else import constrain with a prefix like import 'package:constrain/constrain.dart' as c;. To avoid this name clash Pattern will likely be renamed in the future JSON Encoding The rich model for constraint violations can be converted to JSON, for example to send it between a server and client. The detailed information allows clients to be intelligent about how they report the errors to the user final Person person = new Person()   ..age = -22   ..addresses = [new Address()..street = ""16 blah st""];  Validator v = new Validator(); Set<ConstraintViolation> violations = v.validate(person); print(JSON.encode(violations));   prints (abbreviated) [   {     ""constraint"": {       ""type"": ""Ensure"",       ""description"": null,       ""group"": ""DefaultGroup""     },     ""message"": ""Constraint violated at path age\nExpected: (a value greater than or equal to <10> and a value less than or equal to <90>)\n  Actual: <-22>\n   Which: is not a value greater than or equal to <10>\n"",     ""rootObject"": {       ""type"": ""Person"",       ""value"": {         ""age"": -22,         ""parents"": null,         ""addresses"": [           {             ""street"": ""16 blah st""           }         ]       }     },     ""leafObject"": {       ""type"": ""Person"",       ""value"": {         ""age"": -22,         ""parents"": null,         ""addresses"": [           {             ""street"": ""16 blah st""           }         ]       }     },     ""invalidValue"": {       ""type"": ""int"",       ""value"": -22     },     ""propertyPath"": ""age"",     ""details"": {       ""expected"": ""(a value greater than or equal to <10> and a value less than or equal to <90>)"",       ""actual"": ""<-22>"",       ""mismatchDescription"": ""is not a value greater than or equal to <10>""     },     ""reason"": null   },   ......  Function Constraints You can add constraints to function parameters (positional and named) and return values   @NotNull() String bar(@NotNull() int blah, String foo) => '$blah';  Similarly you can add constraints to class methods. Constraints will be inherited from: super classes interfaces mixins class Foo {   String bar(@NotNull() int blah, String foo) => '$blah'; }  class Blah extends Object with Foo {   @NotNull() String bar(@Ensure(isBetween10and90) int blah,                           @NotNull() String foo) => '$blah'; }  Validating Parameters validator.validateFunctionParameters(bar, [1, ""foo""])  or for methods validator.validateFunctionParameters(new Foo().bar, [1, ""foo""])  Validating Returns validator.validateFunctionReturn(new Foo().bar, ""some return value"")  Details Constraints The Constraint Class All constraints must implement (typically indirectly) the Constraint class. It's key method is void validate(T value, ConstraintValidationContext context);  It is passed the value to be validated and a context. If the constraint is violated then it creates a ConstraintViolation by calling the contexts addViolation method void addViolation({String reason, ViolationDetails details});  optionally providing details and a reason. Typically you will not use Constraint directly or subclass it directly. The only two subtypes currently (and likely to remain that way) are: NotNull and Ensure If you do directly subtype Constraint then you will need to deal with a possible null value being passed to validate. This is not the case with Ensure. NotNull The NotNull constraint indicates the field is mandatory. It is somewhat special as it directly subclasses Constraint. Ensure Ensure is the main constraint subclass that the vast majority of constraints are likely to use. Ensure delegates the actual validation to it's validator object. Note that the validator will only be called if the value passed to Ensure's validate method is not null. The validator can be any of the following: 1. A ConstraintValidator function The ConstraintValidator function is the same signature as the validate method on Constraint. It is defined as typedef void ConstraintValidator(dynamic value,                                  ConstraintValidationContext context);   This is best used when you want control over the creation of the ConstraintViolation object. Note the owner of the value is available via the context 2. A SimpleConstraintValidator function This is a simplified form of validator function which is just a boolean expression indicating whether the constraint is valid. typedef bool SimpleConstraintValidator(dynamic value);   This is typically used in preference to ConstraintValidator. 3. A SimplePropertyConstraintValidator function Contains the owner of the value as an additional argument. typedef bool SimplePropertyConstraintValidator(dynamic value, dynamic owner);  4. A Matcher Any const matcher can be used such as isEmpty. 5. A function that returns a Matcher Specically a function that adheres to typedef Matcher MatcherCreator();  This is the more common way to use matchers as most matchers take an argument and are accessed via function. These cannot currently be const in Dart so the workaround is to use a function that returns the matcher. Constraint Groups ConstraintGroups are used to restrict which constraints are validated during a validation. The ConstraintGroup is defined as abstract class ConstraintGroup {   bool implies(ConstraintGroup other); }  Matching for ConstraintGroups is done via the implies method. This method should return true to indicate that the constraint should be validated. To define your own simple group extend SimpleConstraintGroup and make sure you inclued a const constructor. class Detailed extends SimpleConstraintGroup {   const Detailed(); }  To compose a group out of other groups extend CompositeConstraintGroup class GroupOneAndTwo extends CompositeGroup {   const GroupOneAndTwo() : super(const [const GroupOne(), const GroupTwo()]); }  Looking up Constraints If you want to do something fancier, for example, integrate with some library (like Polymer, Json Schema etc.) then you may need to directly work with the constraints. final resolver = new TypeDescriptorResolver(); final typeDescriptor = resolver.resolveFor(Person); // now you can tranverse the descriptor to get all the constraints on this class and as transitively reachable.  Further Reading Blog on Constraints TODO See open issues 0.2.8 added logging increased lower bound of sdk version 0.2.7 allow description and group to be overridden for core constraints 0.2.6 increase upper bound on quiver package 0.2.5 fix issue with reflecting on generic classes 0.2.1 ported to option version >1.0.0 unittest replaced with test 0.2.0+2 increased upper bound of quiver dependency 0.2.0+1 increased upper bound of collections dependency 0.2.0 Ignore private members Note: private members cannot be accessed (when in different libraries). This release is only backwards incompatible if you put constraints on private members 0.1.4+3 Fixed bug when running dart2js. Thanks to Robert Akerblom-Andersson for the contribution 0.1.4+2 Fixed bug in core constraints that stopped them validating without a group. Thanks to Robert Akerblom-Andersson for the contribution 0.1.4+1 Exported Pattern from constrain.dart 0.1.4 Added Min, Max and Pattern as core constraints 0.1.3 Added ConstrainedFunctionProxy as a reflective wrapper for validating functions 0.1.2 Added support for constraining functions and methods both parameters and return values can be constrained and validated methods inherit constraints from super classes, interfaces and mixins * parameters and return values will be deeply validated, including all constraints on type  for example class Foo {   String bar(@NotNull() int blah, String foo) => '$blah'; }  class Blah extends Object with Foo {   @NotNull() String bar(@Ensure(isBetween10and90) int blah,                           @NotNull() String foo) => '$blah'; }  0.1.1+1 Bug Fix. Ignore static fields and methods 0.1.1 JSON support. Constraint violations can be converted to JSON, for example to send to the client 0.1.0+1 Fixed bugs with mirrors 0.1.0 Implemented most features. Should be highly useable now. Added Class based constraints handling of collections validator functions groups much more 0.0.1 Basic strawman 1. Depend on it Add this to your package's pubspec.yaml file:  dependencies:   constrain:   2. Install it You can install packages from the command line:  $ pub get  Alternatively, your editor might support pub. Check the docs for your editor to learn more. Version Uploaded Documentation Archive 0.2.8 Apr 10, 2016 Go to the documentation of constrain 0.2.8 Download constrain 0.2.8 archive 0.2.7 Jan 19, 2016 Go to the documentation of constrain 0.2.7 Download constrain 0.2.7 archive 0.2.6 Jan 6, 2016 Go to the documentation of constrain 0.2.6 Download constrain 0.2.6 archive 0.2.5 Aug 12, 2015 Go to the documentation of constrain 0.2.5 Download constrain 0.2.5 archive 0.2.4 Jun 25, 2015 Go to the documentation of constrain 0.2.4 Download constrain 0.2.4 archive 0.2.3 Jun 25, 2015 Go to the documentation of constrain 0.2.3 Download constrain 0.2.3 archive 0.2.2 Jun 25, 2015 Go to the documentation of constrain 0.2.2 Download constrain 0.2.2 archive 0.2.1 Jun 23, 2015 Go to the documentation of constrain 0.2.1 Download constrain 0.2.1 archive 0.2.0+2 Jan 17, 2015 Go to the documentation of constrain 0.2.0+2 Download constrain 0.2.0+2 archive 0.2.0+1 Oct 25, 2014 Go to the documentation of constrain 0.2.0+1 Download constrain 0.2.0+1 archive All 23 versions... About Object Constraints for Dart Author Email andersmholmgren@gmail.com Anders Holmgren Homepage bitbucket.org/andersmholmgren/constrain Documentation www.dartdocs.org/documentation/constrain/0.2.8/ Source code (hyperlinked) www.crossdart.info/p/constrain/0.2.8/ Uploader andersmholmgren@gmail.com Share Tweet Dart Language — Site Map — Terms of Service — Privacy Policy π"	"null"	"null"	"Provides a constraint based Validation library inspired by Java Bean Validation but leveraging the superior language capabilities of Dart."	"true"
"Validation"	"validator.dart"	"https://github.com/karan/validator.dart"	"String validation and sanitization for Dart."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"18"	"2"	"3"	"GitHub - karan/validator.dart: String validation and sanitization for Dart. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 18 Fork 3 karan/validator.dart Code Issues 0 Pull requests 0 Pulse Graphs 🐢 String validation and sanitization for Dart. https://pub.dartlang.org/packages/validator 139 commits 1 branch 0 releases Fetching contributors Dart 99.5% Shell 0.5% Dart Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. lib test tool .gitignore LICENSE README.md pubspec.yaml README.md validator.dart String validation and sanitization for Dart. Port of chriso's library. Usage Documentation Complete documentation of the package is available at http://www.dartdocs.org/documentation/validator/0.0.7/index.html#validator/validator For a list of methods, refer to the sections below. 1. Depend on it Add this to your package's pubspec.yaml file: dependencies:   validator: "">=0.0.4 <0.1.0""  2. Install it You can install packages from the command line: $ pub get  Alternatively, your editor might support pub. Check the docs for your editor to learn more. 3. Import it Now in your Dart code, you can use: import 'package:validator/validator.dart';  Validators equals(String str, comparison) - check if the string matches the comparison. contains(String str, seed) - check if the string contains the seed. matches(String str, pattern) - check if string matches the pattern. matches('foobar', 'foo'). isEmail(String str) - check if the string is an email. isURL(String str [, options]) - check if the string is an URL. options is an object which defaults to { protocols: ['http','https','ftp'], require_tld: true, require_protocol: false, allow_underscores: false, host_whitelist: false, host_blacklist: false }. isFQDN(String str [, options]) - check if the string is a fully qualified domain name (e.g. domain.com). options is an object which defaults to { require_tld: true, allow_underscores: false }. isIP(String str [, version]) - check if the string is an IP (version 4 or 6). isAlpha(String str) - check if the string contains only letters (a-zA-Z). isNumeric(String str) - check if the string contains only numbers. isAlphanumeric(String str) - check if the string contains only letters and numbers. isBase64(String str) - check if a string is base64 encoded. isHexadecimal(String str) - check if the string is a hexadecimal number. isHexColor(String str) - check if the string is a hexadecimal color. isLowercase(String str) - check if the string is lowercase. isUppercase(String str) - check if the string is uppercase. isInt(String str) - check if the string is an integer. isFloat(String str) - check if the string is a float. isDivisibleBy(String str, number) - check if the string is a number that's divisible by another. isNull(String str) - check if the string is null. isLength(String str, min [, max]) - check if the string's length falls in a range. Note: this function takes into account surrogate pairs. isByteLength(String str, min [, max]) - check if the string's length (in bytes) falls in a range. isUUID(String str [, version]) - check if the string is a UUID (version 3, 4 or 5). isDate(String str) - check if the string is a date. isAfter(String str [, date]) - check if the string is a date that's after the specified date (defaults to now). isBefore(String str [, date]) - check if the string is a date that's before the specified date. isIn(String str, values) - check if the string is in a array of allowed values. isCreditCard(String str) - check if the string is a credit card. isISBN(String str [, version]) - check if the string is an ISBN (version 10 or 13). isJSON(String str) - check if the string is valid JSON (note: uses JSON.parse). isMultibyte(String str) - check if the string contains one or more multibyte chars. isAscii(String str) - check if the string contains ASCII chars only. isFullWidth(String str) - check if the string contains any full-width chars. isHalfWidth(String str) - check if the string contains any half-width chars. isVariableWidth(String str) - check if the string contains a mixture of full and half-width chars. isSurrogatePair(String str) - check if the string contains any surrogate pairs chars. isMongoId(String str) - check if the string is a valid hex-encoded representation of a [MongoDB ObjectId][mongoid]. Sanitizers toString(String input) - convert the input to a string. toDate(String input) - convert the input to a date, or null if the input is not a date. toFloat(String input) - convert the input to a float, or NaN if the input is not a float. toInt(String input [, radix]) - convert the input to an integer, or NaN if the input is not an integer. toBoolean(String input [, strict]) - convert the input to a boolean. Everything except for '0', 'false' and '' returns true. In strict mode only '1' and 'true' return true. trim(String input [, chars]) - trim characters (whitespace by default) from both sides of the input. ltrim(String input [, chars]) - trim characters from the left-side of the input. rtrim(String input [, chars]) - trim characters from the right-side of the input. escape(String input) - replace <, >, &, ' and "" with HTML entities. stripLow(String input [, keep_new_lines]) - remove characters with a numerical value < 32 and 127, mostly control characters. If keep_new_lines is true, newline characters are preserved (\n and \r, hex 0xA and 0xD). Unicode-safe in JavaScript. whitelist(String input, chars) - remove characters that do not appear in the whitelist. The characters are used in a RegExp and so you will need to escape some chars, e.g. whitelist(String input, '\[\]'). blacklist(String input, chars) - remove characters that appear in the blacklist. The characters are used in a RegExp and so you will need to escape some chars, e.g. blacklist(String input, '\[\]'). normalizeEmail(String email [, options]) - canonicalize an email address. options is an object which defaults to { lowercase: true }. With lowercase set to true, the local part of the email address is lowercased for all domains; the hostname is always lowercased and the local part of the email address is always lowercased for hosts that are known to be case-insensitive (currently only GMail). Normalization follows special rules for known providers: currently, GMail addresses have dots removed in the local part and are stripped of tags (e.g. some.one+tag@gmail.com becomes someone@gmail.com) and all @googlemail.com addresses are normalized to @gmail.com. Tests To test the package, run: $ ./tool/run_tests.sh  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/karan/validator.dart"	"String validation and sanitization for Dart."	"true"
"ORM"	"Objectory"	"https://github.com/vadimtsushko/objectory"	"Objectory provides typed, checked environment to model, save and query data persisted on MongoDb."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"44"	"12"	"12"	"GitHub - vadimtsushko/objectory: Objectory is a dart package that provide typed, checked environment to model, save and query data persisted on MongoDb Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 12 Star 44 Fork 12 vadimtsushko/objectory Code Issues 8 Pull requests 0 Pulse Graphs Objectory is a dart package that provide typed, checked environment to model, save and query data persisted on MongoDb 232 commits 3 branches 12 releases 6 contributors Dart 99.2% Other 0.8% Dart Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages master postgress Nothing to show v02.2 v0.3.8 v0.3.2 v0.1.9 v0.1.2 v0.1.1 v0.0.9 v0.0.8 v0.0.6 v0.0.5 v0.0.4 v0.0.3 Nothing to show New pull request Latest commit 9454c15 Jun 4, 2016 vadimtsushko Setting SDK constraint Permalink Failed to load latest commit information. bin Some tests, v0.5.1 Mar 23, 2016 doc More formatting and typos fixes for the quick tour. Jun 19, 2014 example Some tests, v0.5.1 Mar 23, 2016 lib Some tests, v0.5.1 Mar 23, 2016 test Some tests, v0.5.1 Mar 23, 2016 tool bugfix in ObjectoryServerImpl. Addressed [issue 64](#64) May 2, 2014 .gitignore Dirty row-change logging with a history tables Oct 29, 2015 .project RootPersistentObject ==> PersistentObject Oct 9, 2012 CHANGELOG.md Objectory cache separated by collections Aug 22, 2015 LICENSE Initial commit Sep 14, 2012 README.md 11 Dec 3, 2015 dart-sdk-revision bugfix in ObjectoryServerImpl. Addressed [issue 64](#64) May 2, 2014 pubspec.yaml Setting SDK constraint Jun 4, 2016 README.md Objectory - object document mapper for server-side and client side Dart applications Update: Please consider that library as unsuppoprted and not in active developement. Current updates (>0.3.22 published to pub) are mostly suited for usage in concrete scenario of internal project. Objectory provides typed, checked environment to model, save and query data persisted on MongoDb. Objectory provides identical API for server side and browser applications (both Dartium and dart2js supported). Getting started Clone Objectory from github repository Run pub install in the root of Objectory. Now you may run server-side blog example: /example/console/blog_console.dart. This example uses connection to free MongoLab account Install MongoDb locally. Ensure that MongoDB is running with default parameters (host 127.0.0.7, port 27017, authentication disabled) Now you may run server side objectory tests: test/base_objectory_tests.dart and test/vm_implementation_tests.dart While running local MongoDB process, start websocket objectory server: bin/objectory_server.dart Configure Dartium launches for test/objectory_test.html and /example/blog.html In group Dartium settings uncheck Run in checked mode and Enable debugging. Now you may run browser tests and blog example (port of server-side example to browser) both in Dartium and as JavaScript. JavaScript launches do not require any special setup. See Quick tour and API documentation for futher information See also Sample full stack application with Angular.dart as primary framework MongoDb as backend DB Objectory as object/document mapper Rikulo Stream Web server to serve static content and as a container for Objectory WebSocket handler. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vadimtsushko/objectory"	"Objectory provides typed, checked environment to model, save and query data persisted on MongoDb."	"true"
"Image"	"image"	"https://github.com/brendan-duncan/image"	"Provides server and web apps the ability to load, manipulate, and save images with various image file formats including PNG, JPEG, GIF, WebP, TIFF, TGA, PSD, PVR, and OpenEXR."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"58"	"11"	"18"	"GitHub - brendan-duncan/image: Dart library for decoding/encoding image formats, and image processing. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 11 Star 58 Fork 18 brendan-duncan/image Code Issues 9 Pull requests 0 Wiki Pulse Graphs Dart library for decoding/encoding image formats, and image processing. 386 commits 1 branch 15 releases Fetching contributors Dart 98.8% Other 1.2% Dart Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show v1.1.23 v1.1.22 v1.1.21 v1.1.20 v1.1.19 v1.1.18 v1.1.17 v1.1.16 v1.1.15 v1.1.14 v1.1.13 v1.1.12 1.1.26 1.1.25 1.1.24 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. lib test web .gitignore ChangeLog.txt LICENSE README.md pubspec.yaml README.md image Overview A Dart library providing the ability to load, save and manipulate images in a variety of different file formats. The library has no reliance on dart:io, so it can be used for both server and web applications. Supported Image Formats: Read/Write: PNG / Animated APNG JPEG Targa GIF / Animated GIF PVR(PVRTC) Read Only: WebP / Animated WebP TIFF Photoshop PSD OpenEXR Documentation API Examples Format Decoding Functions Samples Load an image, resize it, and save it as a png: import 'dart:io' as Io; import 'package:image/image.dart'; void main() {   // Read an image from file (webp in this case).   // decodeImage will identify the format of the image and use the appropriate   // decoder.   Image image = decodeImage(new Io.File('test.webp').readAsBytesSync());    // Resize the image to a 120x? thumbnail (maintaining the aspect ratio).   Image thumbnail = copyResize(image, 120);    // Save the thumbnail as a PNG.   new Io.File('thumbnail.png')         ..writeAsBytesSync(encodePng(thumbnail)); }  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/brendan-duncan/image"	"Provides server and web apps the ability to load, manipulate, and save images with various image file formats including PNG, JPEG, GIF, WebP, TIFF, TGA, PSD, PVR, and OpenEXR."	"true"
"Algorithms"	"cassowary"	"https://github.com/domokit/cassowary"	"Implements a subset of the functionality described in the Cassowary paper. Accepts constraints and updates member variables in an attempt to satisfy the same."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"https://github.com/domokit/cassowary"	"Implements a subset of the functionality described in the Cassowary paper. Accepts constraints and updates member variables in an attempt to satisfy the same."	"false"
"Testing"	"Guinness"	"https://github.com/vsavkin/guinness"	"A port of the Jasmine library."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"38"	"6"	"10"	"GitHub - vsavkin/guinness: A port of the Jasmine testing framework to Dart. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 38 Fork 10 vsavkin/guinness Code Issues 7 Pull requests 1 Pulse Graphs A port of the Jasmine testing framework to Dart. 167 commits 23 branches 0 releases Fetching contributors Dart 96.9% Shell 2.0% Other 1.1% Dart Shell Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags add_dartanalyzer_to_build_script add_spy_objects add_stats add_support_for_named_parameters_rebased add_support_for_named_parameters add_to_be_true_and_to_be_false_matchers add_to_have_same_props add_travis_ci add_travis_status_image allow_non_string_names handle_async_before_each handle_error_in_after_each handle_private_and_static_variables implement_throw_where improve_handling_of_shadow_dom improve_karma_support instance_of_matcher karma_dart2js master more_stats pending_specs remove_no_such_method revert-34-add_support_for_named_parameters Nothing to show Nothing to show New pull request Latest commit 8b0528a Nov 6, 2015 vsavkin bump up the version number Permalink Failed to load latest commit information. example format Apr 3, 2015 lib fix(unittest_backend): support using the same nested list 2x. Nov 6, 2015 scripts Add support for running tests in the Dart2js mode Jun 12, 2014 test fix(unittest_backend): support using the same nested list 2x. Nov 6, 2015 .gitignore add .packages to gitignore Nov 6, 2015 .travis.yml change node version Mar 13, 2015 CHANGELOG.md bump up the version number Nov 6, 2015 CONTRIBUTORS add Tobias Bosch to the list of contributors Nov 6, 2015 LICENSE update licence Jun 10, 2014 NOTICES add CONTRIBUTORS and NOTICES May 15, 2014 README.md update README Sep 4, 2014 karma.conf.js Add support for running tests in the Dart2js mode Jun 12, 2014 package.json Added toContainText and notToContainText html matchers Oct 20, 2014 pubspec.yaml bump up the version number Nov 6, 2015 README.md Guinness Guinness is a port of the Jasmine library to Dart. It is based on the AngularDart implementation of Jasmine. Installation You can find the Guinness installation instructions here. Importing the Library import 'package:guinness/guinness.dart';  main() {   //you specs } If you are testing a client-side application, and you want to use html matchers, import the guinness_html library. import 'package:guinness/guinness_html.dart';  main() {   guinnessEnableHtmlMatchers();   //you specs } Syntax Guinness specs are comprised of describe, it, beforeEach, and afterEach blocks. import 'package:guinness/guinness.dart';  main(){   describe(""syntax"", () {     beforeEach(() {       print(""outer before"");     });      afterEach(() {       print(""outer after"");     });      it(""runs first"", () {       print(""first"");     });      describe(""nested describe"", () {       beforeEach(() {         print(""inner before"");       });        afterEach(() {         print(""inner after"");       });        it(""runs second"", () {         print(""second"");       });     });   }); } This will print: outer before, first, outer after outer before, inner before, second, inner after, outer after  To exclude a describe, change it to xdescribe. To exclude an it, change it to xit. To make a describe exclusive, change it to ddescribe. To make an it exclusive, change it to iit. If there is an iit in your spec files, Guinness will run only iits. In this case ddescribes will be ignored. Pending Specs Guinness supports pending describe and it blocks (blocks without a callback). describe(""pending describe""); xdescribe(""pending xdescribe""); ddescribe(""pending ddescribe"");  it(""pending it""); xit(""pending xit""); iit(""pending iit""); Async Since Dart has built-in futures, the Guinness framework makes a good use out of them. If you return a future from beforeEach, afterEach, or it, the framework will wait for that future to be resolved. For instance: beforeEach(connectToTheDatabase); where connectToTheDatabase returns a future. Similarly, you can write: afterEach(releaseConnection); You can also write async specs using the following technique: it(""should return an empty list when the database is empty"", () {   return queryDatabase().then((results){     expect(results).toEqual([]);   }); }); If a returned future gets rejected, the test fails. Expect They way you write assertions in Guinness is by using the expect function, as follows: expect(2).toEqual(2); These are a few examples: expect(2).toEqual(2); expect([1,2]).toContain(2); expect(2).toBe(2); expect(()=> throw ""BOOM"").toThrow(); expect(()=> throw ""BOOM"").toThrow(""BOOM""); expect(()=> throw ""Invalid Argument"").toThrowWith(message: ""Invalid""); expect(()=> throw new InvalidArgument()).toThrowWith(anInstanceOf: InvalidArgument); expect(()=> throw new InvalidArgument()).toThrowWith(type: ArgumentException); expect(false).toBeFalsy(); expect(null).toBeFalsy(); expect(true).toBeTruthy(); expect(""any object"").toBeTruthy(); expect(""any object"").toBeDefined(); expect(null).toBeNull(); expect(""not null"").toBeNotNull();  expect(2).not.toEqual(1); expect([1,2]).not.toContain(3); expect([1,2]).not.toBe([1,2]); expect((){}).not.toThrow(); expect(null).not.toBeDefined();  expect(new DocumentFragment.html(""<div>some html</div>""))     .toHaveHtml(""<div>some html</div>"");  expect(new DocumentFragment.html(""<div>some text</div>""))     .toHaveText(""some text"");  expect(new DivElement()..classes.add('abc'))     .toHaveClass(""abc"");  expect(new DivElement()..attributes['attr'] = 'value')     .toHaveAttribute(""attr"");  expect(new DocumentFragment.html(""<div>some html</div>""))     .not.toHaveHtml(""<div>some other html</div>"");  expect(new DocumentFragment.html(""<div>some text</div>""))     .not.toHaveText(""some other text"");  expect(new DivElement()..classes.add('abc'))     .not.toHaveClass(""def"");  expect(new DivElement()..attributes['attr'] = 'value')     .not.toHaveAttribute(""other-attr"");  final select = new SelectElement(); select.children   ..add(new OptionElement(value: ""1""))   ..add(new OptionElement(value: ""2"", selected: true))   ..add(new OptionElement(value: ""3"")); expect(select).toEqualSelect([""1"", [""2""], ""3""]); You can also use unittest matchers, like this: expect(myObject).to(beValid); //where beValid is a unittest matcher Migrating from Unittest To make migration from the unittest library to Guinness easier, expect supports an optional second argument. expect(myObject, beValid); //same as expect(myObject).to(beValid); This keeps your unittest assertions working, so you can change them one by one. While transitioning you can have both the unittest and guinness libraries imported: import 'package:unittest/unittest.dart' hide expect; import 'package:guinness/guinness.dart'; Extending Guinness If you are using a lot of custom matchers, and using expect(object).to(matcher) is tedious, you can extend the library, as follows: library test_helper;  import 'guinness.dart' as gns; export 'guinness.dart';  final _m = gns.guinness.matchers;  class CustomExpect extends gns.Expect {   CustomExpect(actual) : super(actual);    toBePositive() => _m.expect(actual > 0, true, reason: 'is not positive'); }  CustomExpect expect(actual) => new CustomExpect(actual); Spy Guinness supports Jasmine-like spy functions: final s = guinness.createSpy(""my spy""); expect(s).not.toHaveBeenCalled();  s(1); expect(s).toHaveBeenCalled(); expect(s).toHaveBeenCalledOnce(); expect(s).toHaveBeenCalledWith(1); expect(s).toHaveBeenCalledOnceWith(1); expect(s).not.toHaveBeenCalledWith(2);  s(2); expect((){   expect(s).toHaveBeenCalledOnce(); }).toThrow();  expect((){   expect(s).toHaveBeenCalledOnceWith(1); }).toThrow(); In addition, Guinness support spy objects: class SomeSpy extends SpyObject implements SomeInterface {}  ...  final s = new SomeSpy(); s.invoke(1,2); s.name; s.name = 'some name';  expect(s.spy(""invoke"")).toHaveBeenCalled(); expect(s.spy(""get:name"")).toHaveBeenCalled(); expect(s.spy(""set:name"")).toHaveBeenCalled(); And: final s = new SomeSpy(); s.spy(""invoke"").andCallFake((a,b) => a + b);  expect(s.invoke(1,2)).toEqual(3); You can also use the mock and dart_mocks libraries with it. Guinness and Unittest Guinness supports pluggable backends, but by default runs on top of the unittest library. Which means that if unittest.autoStart is set to true, your specs will run automatically. You can always initialize specs manually: guinness.initSpecs(); You can also run the specs, like this: guinness.runSpecs(); Usually, you don't need to worry about it. Guinness and Karma Guinness works with Karma. Just include initSpecs, as follows: files: [   ""test/main1_test.dart"",   ""test/main2_test.dart"",   ""packages/guinness/init_specs.dart"",   {pattern: '**/*.dart', watched: true, included: false, served: true} ] Status There are a few things that are still not supported (e.g., handling named parameters in expectations). Implementation Details Key Ideas The main idea is to treat the Jasmine syntax as a domain specific language. Therefore, the implementation clearly separates such things as: syntax, semantic model, and execution model. Let's quickly look at the benefits this approach provides: The semantic model is separate from the syntax. The semantic model consists of It, Describe, Suite, BeforeEach, and AfterEach objects. You can create and analyse them without using the context-dependent nested Jasmine syntax. The parsing of specs is separate from the execution of specs. The library builds a tree of the It, Describe, Suite, BeforeEach, and AfterEach objects first. And after that, as a separate step, executes them. It enables all sorts of preprocessing (e.g., filtering, reordering). Pluggable backends. Since the library is a DSL, there can be multiple backend libraries actually executing the specs. By default, the library comes with the unittest backend. Contributors Google Inc Victor Savkin Victor Berchet Marko Vuksanovic Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vsavkin/guinness"	"A port of the Jasmine library."	"true"
"Testing"	"test"	"https://pub.dartlang.org/packages/test"	"Provides a standard way of writing and running tests in Dart."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"test 0.12.15+1 | Pub Package Manager dartlang.org pub.dartlang.org Getting Started Docs Getting Started Dependencies Pubspec Format Package Layout Conventions Assets and Transformers Reference FAQ Glossary Versioning Philosophy Commands Pub Commands pub build pub cache pub deps pub get pub global pub publish pub run pub serve pub upgrade pub uploader Packages test 0.12.15+1 README.md CHANGELOG.md Installing Versions test provides a standard way of writing and running tests in Dart. Writing Tests Running Tests Restricting Tests to Certain Platforms Platform Selectors Running Tests on Dartium Asynchronous Tests Running Tests With Custom HTML Configuring Tests Skipping Tests Timeouts Platform-Specific Configuration Whole-Package Configuration Tagging Tests Debugging Testing with barback Further Reading Writing Tests Tests are specified using the top-level test() function, and test assertions are made using expect(): import ""package:test/test.dart"";  void main() {   test(""String.split() splits the string on the delimiter"", () {     var string = ""foo,bar,baz"";     expect(string.split("",""), equals([""foo"", ""bar"", ""baz""]));   });    test(""String.trim() removes surrounding whitespace"", () {     var string = ""  foo "";     expect(string.trim(), equals(""foo""));   }); } Tests can be grouped together using the group() function. Each group's description is added to the beginning of its test's descriptions. import ""package:test/test.dart"";  void main() {   group(""String"", () {     test("".split() splits the string on the delimiter"", () {       var string = ""foo,bar,baz"";       expect(string.split("",""), equals([""foo"", ""bar"", ""baz""]));     });      test("".trim() removes surrounding whitespace"", () {       var string = ""  foo "";       expect(string.trim(), equals(""foo""));     });   });    group(""int"", () {     test("".remainder() returns the remainder of division"", () {       expect(11.remainder(3), equals(2));     });      test("".toRadixString() returns a hex string"", () {       expect(11.toRadixString(16), equals(""b""));     });   }); } Any matchers from the matcher package can be used with expect() to do complex validations: import ""package:test/test.dart"";  void main() {   test("".split() splits the string on the delimiter"", () {     expect(""foo,bar,baz"", allOf([       contains(""foo""),       isNot(startsWith(""bar"")),       endsWith(""baz"")     ]));   }); } You can use the setUp() and tearDown() functions to share code between tests. The setUp() callback will run before every test in a group or test suite, and tearDown() will run after. tearDown() will run even if a test fails, to ensure that it has a chance to clean up after itself. import ""package:test/test.dart"";  void main() {   var server;   var url;   setUp(() async {     server = await HttpServer.bind('localhost', 0);     url = Uri.parse(""http://${server.address.host}:${server.port}"");   });    tearDown(() async {     await server.close(force: true);     server = null;     url = null;   });    // ... } Running Tests A single test file can be run just using pub run test path/to/test.dart. Many tests can be run at a time using pub run test path/to/dir. It's also possible to run a test on the Dart VM only by invoking it using dart path/to/test.dart, but this doesn't load the full test runner and will be missing some features. The test runner considers any file that ends with _test.dart to be a test file. If you don't pass any paths, it will run all the test files in your test/ directory, making it easy to test your entire application at once. You can select specific tests cases to run by name using pub run test -n ""test name"". The string is interpreted as a regular expression, and only tests whose description (including any group descriptions) match that regular expression will be run. You can also use the -N flag to run tests whose names contain a plain-text string. By default, tests are run in the Dart VM, but you can run them in the browser as well by passing pub run test -p chrome path/to/test.dart. test will take care of starting the browser and loading the tests, and all the results will be reported on the command line just like for VM tests. In fact, you can even run tests on both platforms with a single command: pub run test -p ""chrome,vm"" path/to/test.dart. Restricting Tests to Certain Platforms Some test files only make sense to run on particular platforms. They may use dart:html or dart:io, they might test Windows' particular filesystem behavior, or they might use a feature that's only available in Chrome. The @TestOn annotation makes it easy to declare exactly which platforms a test file should run on. Just put it at the top of your file, before any library or import declarations: @TestOn(""vm"")  import ""dart:io"";  import ""package:test/test.dart"";  void main() {   // ... } The string you pass to @TestOn is what's called a ""platform selector"", and it specifies exactly which platforms a test can run on. It can be as simple as the name of a platform, or a more complex Dart-like boolean expression involving these platform names. You can also declare that your entire package only works on certain platforms by adding a test_on field to your package config file. Platform Selectors Platform selectors use the boolean selector syntax defined in the boolean_selector package, which is a subset of Dart's expression syntax that only supports boolean operations. The following identifiers are defined: vm: Whether the test is running on the command-line Dart VM. dartium: Whether the test is running on Dartium. content-shell: Whether the test is running on the headless Dartium content shell. chrome: Whether the test is running on Google Chrome. phantomjs: Whether the test is running on PhantomJS. firefox: Whether the test is running on Mozilla Firefox. safari: Whether the test is running on Apple Safari. ie: Whether the test is running on Microsoft Internet Explorer. dart-vm: Whether the test is running on the Dart VM in any context, including Dartium. It's identical to !js. browser: Whether the test is running in any browser. js: Whether the test has been compiled to JS. This is identical to !dart-vm. blink: Whether the test is running in a browser that uses the Blink rendering engine. windows: Whether the test is running on Windows. If vm is false, this will be false as well. mac-os: Whether the test is running on Mac OS. If vm is false, this will be false as well. linux: Whether the test is running on Linux. If vm is false, this will be false as well. android: Whether the test is running on Android. If vm is false, this will be false as well, which means that this won't be true if the test is running on an Android browser. ios: Whether the test is running on iOS. If vm is false, this will be false as well, which means that this won't be true if the test is running on an iOS browser. posix: Whether the test is running on a POSIX operating system. This is equivalent to !windows. For example, if you wanted to run a test on every browser but Chrome, you would write @TestOn(""browser && !chrome""). Running Tests on Dartium Tests can be run on Dartium by passing the -p dartium flag. If you're using the Dart Editor, the test runner will be able to find Dartium automatically. On Mac OS, you can also install it using Homebrew. Otherwise, make sure there's an executable called dartium (on Mac OS or Linux) or dartium.exe (on Windows) on your system path. Similarly, tests can be run on the headless Dartium content shell by passing -p content-shell. The content shell is installed along with Dartium when using Homebrew. Otherwise, you can downloaded it manually from this page; if you do, make sure the executable named content_shell (on Mac OS or Linux) or content_shell.exe (on Windows) is on your system path. In the future, there will be a more explicit way to configure the location of both the Dartium and content shell executables. Asynchronous Tests Tests written with async/await will work automatically. The test runner won't consider the test finished until the returned Future completes. import ""dart:async"";  import ""package:test/test.dart"";  void main() {   test(""new Future.value() returns the value"", () async {     var value = await new Future.value(10);     expect(value, equals(10));   }); } There are also a number of useful functions and matchers for more advanced asynchrony. The completion() matcher can be used to test Futures; it ensures that the test doesn't finish until the Future completes, and runs a matcher against that Future's value. import ""dart:async"";  import ""package:test/test.dart"";  void main() {   test(""new Future.value() returns the value"", () {     expect(new Future.value(10), completion(equals(10)));   }); } The throwsA() matcher and the various throwsExceptionType matchers work with both synchronous callbacks and asynchronous Futures. They ensure that a particular type of exception is thrown: import ""dart:async"";  import ""package:test/test.dart"";  void main() {   test(""new Future.error() throws the error"", () {     expect(new Future.error(""oh no""), throwsA(equals(""oh no"")));     expect(new Future.error(new StateError(""bad state"")), throwsStateError);   }); } The expectAsync() function wraps another function and has two jobs. First, it asserts that the wrapped function is called a certain number of times, and will cause the test to fail if it's called too often; second, it keeps the test from finishing until the function is called the requisite number of times. import ""dart:async"";  import ""package:test/test.dart"";  void main() {   test(""Stream.fromIterable() emits the values in the iterable"", () {     var stream = new Stream.fromIterable([1, 2, 3]);      stream.listen(expectAsync((number) {       expect(number, inInclusiveRange(1, 3));     }, count: 3));   }); } Running Tests With Custom HTML By default, the test runner will generate its own empty HTML file for browser tests. However, tests that need custom HTML can create their own files. These files have three requirements: They must have the same name as the test, with .dart replaced by .html. They must contain a link tag with rel=""x-dart-test"" and an href attribute pointing to the test script. They must contain <script src=""packages/test/dart.js""></script>. For example, if you had a test called custom_html_test.dart, you might write the following HTML file: <!doctype html> <!-- custom_html_test.html --> <html>   <head>     <title>Custom HTML Test</title>     <link rel=""x-dart-test"" href=""custom_html_test.dart"">     <script src=""packages/test/dart.js""></script>   </head>   <body>     // ...   </body> </html>  Configuring Tests Skipping Tests If a test, group, or entire suite isn't working yet and you just want it to stop complaining, you can mark it as ""skipped"". The test or tests won't be run, and, if you supply a reason why, that reason will be printed. In general, skipping tests indicates that they should run but is temporarily not working. If they're is fundamentally incompatible with a platform, @TestOn/testOn should be used instead. To skip a test suite, put a @Skip annotation at the top of the file: @Skip(""currently failing (see issue 1234)"")  import ""package:test/test.dart"";  void main() {   // ... } The string you pass should describe why the test is skipped. You don't have to include it, but it's a good idea to document why the test isn't running. Groups and individual tests can be skipped by passing the skip parameter. This can be either true or a String describing why the test is skipped. For example: import ""package:test/test.dart"";  void main() {   group(""complicated algorithm tests"", () {     // ...   }, skip: ""the algorithm isn't quite right"");    test(""error-checking test"", () {     // ...   }, skip: ""TODO: add error-checking.""); } Timeouts By default, tests will time out after 30 seconds of inactivity. However, this can be configured on a per-test, -group, or -suite basis. To change the timeout for a test suite, put a @Timeout annotation at the top of the file: @Timeout(const Duration(seconds: 45))  import ""package:test/test.dart"";  void main() {   // ... } In addition to setting an absolute timeout, you can set the timeout relative to the default using @Timeout.factor. For example, @Timeout.factor(1.5) will set the timeout to one and a half times as long as the default—45 seconds. Timeouts can be set for tests and groups using the timeout parameter. This parameter takes a Timeout object just like the annotation. For example: import ""package:test/test.dart"";  void main() {   group(""slow tests"", () {     // ...      test(""even slower test"", () {       // ...     }, timeout: new Timeout.factor(2))   }, timeout: new Timeout(new Duration(minutes: 1))); } Nested timeouts apply in order from outermost to innermost. That means that ""even slower test"" will take two minutes to time out, since it multiplies the group's timeout by 2. Platform-Specific Configuration Sometimes a test may need to be configured differently for different platforms. Windows might run your code slower than other platforms, or your DOM manipulation might not work right on Safari yet. For these cases, you can use the @OnPlatform annotation and the onPlatform named parameter to test() and group(). For example: @OnPlatform(const {   // Give Windows some extra wiggle-room before timing out.   ""windows"": const Timeout.factor(2) })  import ""package:test/test.dart"";  void main() {   test(""do a thing"", () {     // ...   }, onPlatform: {     ""safari"": new Skip(""Safari is currently broken (see #1234)"")   }); } Both the annotation and the parameter take a map. The map's keys are platform selectors which describe the platforms for which the specialized configuration applies. Its values are instances of some of the same annotation classes that can be used for a suite: Skip and Timeout. A value can also be a list of these values. If multiple platforms match, the configuration is applied in order from first to last, just as they would in nested groups. This means that for configuration like duration-based timeouts, the last matching value wins. You can also set up global platform-specific configuration using the package configuration file. Tagging Tests Tags are short strings that you can associate with tests, groups, and suites. They don't have any built-in meaning, but they're very useful nonetheless: you can associate your own custom configuration with them, or you can use them to easily filter tests so you only run the ones you need to. Tags are defined using the @Tags annotation for suites and the tags named parameter to test() and group(). For example: @Tags([""browser""])  import ""package:test/test.dart"";  void main() {   test(""successfully launches Chrome"", () {     // ...   }, tags: ""chrome"");    test(""launches two browsers at once"", () {     // ...   }, tags: [""chrome"", ""firefox""]); } If the test runner encounters a tag that wasn't declared in the package configuration file, it'll print a warning, so be sure to include all your tags there. You can also use the file to provide default configuration for tags, like giving all browser tests twice as much time before they time out. Tests can be filtered based on their tags by passing command line flags. The --tags or -t flag will cause the test runner to only run tests with the given tags, and the --exclude-tags or -x flag will cause it to only run tests without the given tags. These flags also support boolean selector syntax. For example, you can pass --tags ""(chrome || firefox) && !slow"" to select quick Chrome or Firefox tests. Note that tags must be valid Dart identifiers, although they may also contain hyphens. Whole-Package Configuration For configuration that applies across multiple files, or even the entire package, test supports a configuration file called dart_test.yaml. At its simplest, this file can contain the same sort of configuration that can be passed as command-line arguments: # This package's tests are very slow. Double the default timeout. timeout: 2x  # This is a browser-only package, so test on content shell by default. platforms: [content-shell]  The configuration file sets new defaults. These defaults can still be overridden by command-line arguments, just like the built-in defaults. In the example above, you could pass --platform chrome to run on Chrome instead of the Dartium content shell. A configuration file can do much more than just set global defaults. See the full documentation for more details. Debugging Tests can be debugged interactively using browsers' built-in development tools, including Observatory when you're using Dartium. Currently there's no support for interactively debugging command-line VM tests, but it will be added in the future. The first step when debugging is to pass the --pause-after-load flag to the test runner. This pauses the browser after each test suite has loaded, so that you have time to open the development tools and set breakpoints. For Dartium, the test runner will print the Observatory URL for you. For PhantomJS, it will print the remote debugger URL. For content shell, it'll print both! Once you've set breakpoints, either click the big arrow in the middle of the web page or press Enter in your terminal to start the tests running. When you hit a breakpoint, the runner will open its own debugging console in the terminal that controls how tests are run. You can type ""restart"" there to re-run your test as many times as you need to figure out what's going on. Testing With barback Packages using the barback transformer system may need to test code that's created or modified using transformers. The test runner handles this using the --pub-serve option, which tells it to load the test code from a pub serve instance rather than from the filesystem. Before using the --pub-serve option, add the test/pub_serve transformer to your pubspec.yaml. This transformer adds the necessary bootstrapping code that allows the test runner to load your tests properly: transformers: - test/pub_serve:     $include: test/**_test{.*,}.dart  Note that if you're using the test runner along with polymer, you have to make sure that the test/pub_serve transformer comes after the polymer transformer: transformers: - polymer - test/pub_serve:     $include: test/**_test{.*,}.dart  Then, start up pub serve. Make sure to pay attention to which port it's using to serve your test/ directory: $ pub serve Loading source assets... Loading test/pub_serve transformers... Serving my_app web on http://localhost:8080 Serving my_app test on http://localhost:8081 Build completed successfully  In this case, the port is 8081. In another terminal, pass this port to --pub-serve and otherwise invoke pub run test as normal: $ pub run test --pub-serve=8081 -p chrome ""pub serve"" is compiling test/my_app_test.dart... ""pub serve"" is compiling test/utils_test.dart... 00:00 +42: All tests passed!  Further Reading Check out the API docs for detailed information about all the functions available to tests. The test runner also supports a machine-readable JSON-based reporter. This reporter allows the test runner to be wrapped and its progress presented in custom ways (for example, in an IDE). See the protocol documentation for more details. 0.12.15+1 Declare support for version 1.19 of the Dart SDK. 0.12.15 Add a skip parameter to expect(). Marking a single expect as skipped will cause the test itself to be marked as skipped. Add a --run-skipped parameter and run_skipped configuration field that cause tests to be run even if they're marked as skipped. 0.12.14+1 Narrow the constraint on yaml. 0.12.14 Add test and group location information to the JSON reporter. 0.12.13+5 Declare support for version 1.18 of the Dart SDK. Use the latest collection package. 0.12.13+4 Compatibility with an upcoming release of the collection package. 0.12.13+3 Internal changes only. 0.12.13+2 Fix all strong-mode errors and warnings. 0.12.13+1 Declare support for version 1.17 of the Dart SDK. 0.12.13 Add support for a global configuration file. On Windows, this file defaults to %LOCALAPPDATA%\DartTest.yaml. On Unix, it defaults to ~/.dart_test.yaml. It can also be explicitly set using the DART_TEST_CONFIG environment variable. See the configuration documentation for details. The --name and --plain-name arguments may be passed more than once, and may be passed together. A test must match all name constraints in order to be run. Add names and plain_names fields to the package configuration file. These allow presets to control which tests are run based on their names. Add include_tags and exclude_tags fields to the package configuration file. These allow presets to control which tests are run based on their tags. Add a pause_after_load field to the package configuration file. This allows presets to enable debugging mode. 0.12.12 Add support for test presets. These are defined using the presets field in the package configuration file. They can be selected by passing --preset or -P, or by using the add_presets field in the package configuration file. Add an on_os field to the package configuration file that allows users to select different configuration for different operating systems. Add an on_platform field to the package configuration file that allows users to configure all tests differently depending on which platform they run on. Add an ios platform selector variable. This variable will only be true when the test executable itself is running on iOS, not when it's running browser tests on an iOS browser. 0.12.11+2 Update to shelf_web_socket 0.2.0. 0.12.11+1 Purely internal change. 0.12.11 Add a tags field to the package configuration file that allows users to provide configuration for specific tags. The --tags and --exclude-tags command-line flags now allow boolean selector syntax. For example, you can now pass --tags ""(chrome || firefox) && !slow"" to select quick Chrome or Firefox tests. 0.12.10+2 Re-add help output separators. Tighten the constraint on args. 0.12.10+1 Temporarily remove separators from the help output. Version 0.12.8 was erroneously released without an appropriate args constraint for the features it used; this version will help ensure that users who can't use args 0.13.1 will get a working version of test. 0.12.10 Add support for a package-level configuration file called dart_test.yaml. 0.12.9 Add SuiteEvent to the JSON reporter, which reports data about the suites in which tests are run. Add AllSuitesEvent to the JSON reporter, which reports the total number of suites that will be run. Add Group.testCount to the JSON reporter, which reports the total number of tests in each group. 0.12.8 Organize the --help output into sections. Add a --timeout flag. 0.12.7 Add the ability to re-run tests while debugging. When the browser is paused at a breakpoint, the test runner will open an interactive console on the command line that can be used to restart the test. Add support for passing any object as a description to test() and group(). These objects will be converted to strings. Add the ability to tag tests. Tests with specific tags may be run by passing the --tags command-line argument, or excluded by passing the --exclude-tags parameter. This feature is not yet complete. For now, tags are only intended to be added temporarily to enable use-cases like focusing on a specific test or group. Further development can be followed on the issue tracker. Wait for a test's tear-down logic to run, even if it times out. 0.12.6+2 Declare compatibility with http_parser 2.0.0. 0.12.6+1 Declare compatibility with http_multi_server 2.0.0. 0.12.6 Add a machine-readable JSON reporter. For details, see the protocol documentation. Skipped groups now properly print skip messages. 0.12.5+2 Declare compatibility with Dart 1.14 and 1.15. 0.12.5+1 Fixed a deadlock bug when using setUpAll() and tearDownAll(). 0.12.5 Add setUpAll() and tearDownAll() methods that run callbacks before and after all tests in a group or suite. Note that these methods are for special cases and should be avoided—they make it very easy to accidentally introduce dependencies between tests. Use setUp() and tearDown() instead if possible. Allow setUp() and tearDown() to be called multiple times within the same group. When a tearDown() callback runs after a signal has been caught, it can now schedule out-of-band asynchronous callbacks normally rather than having them throw exceptions. Don't show package warnings when compiling tests with dart2js. This was accidentally enabled in 0.12.2, but was never intended. 0.12.4+9 If a tearDown() callback throws an error, outer tearDown() callbacks are still executed. 0.12.4+8 Don't compile tests to JavaScript when running via pub serve on Dartium or content shell. 0.12.4+7 Support http_parser 1.0.0. 0.12.4+6 Fix a broken link in the README. 0.12.4+5 Internal changes only. 0.12.4+4 Widen the Dart SDK constraint to include 1.13.0. 0.12.4+3 Make source maps work properly in the browser when not using --pub-serve. 0.12.4+2 Fix a memory leak when running many browser tests where old test suites failed to be unloaded when they were supposed to. 0.12.4+1 Require Dart SDK >= 1.11.0 and shelf >= 0.6.0, allowing test to remove various hacks and workarounds. 0.12.4 Add a --pause-after-load flag that pauses the test runner after each suite is loaded so that breakpoints and other debugging annotations can be added. Currently this is only supported on browsers. Add a Timeout.none value indicating that a test should never time out. The dart-vm platform selector variable is now true for Dartium and content shell. The compact reporter no longer prints status lines that only update the clock if they would get in the way of messages or errors from a test. The expanded reporter no longer double-prints the descriptions of skipped tests. 0.12.3+9 Widen the constraint on analyzer to include 0.26.0. 0.12.3+8 Fix an uncaught error that could crop up when killing the test runner process at the wrong time. 0.12.3+7 Add a missing dependency on the collection package. 0.12.3+6 This version was unpublished due to issue 287. Properly report load errors caused by failing to start browsers. Substantially increase browser timeouts. These timeouts are the cause of a lot of flakiness, and now that they don't block test running there's less harm in making them longer. 0.12.3+5 This version was unpublished due to issue 287. Fix a crash when skipping tests because their platforms don't match. 0.12.3+4 This version was unpublished due to issue 287. The compact reporter will update the timer every second, rather than only updating it occasionally. The compact reporter will now print the full, untruncated test name before any errors or prints emitted by a test. The expanded reporter will now always print the full, untruncated test name. 0.12.3+3 This version was unpublished due to issue 287. Limit the number of test suites loaded at once. This helps ensure that the test runner won't run out of memory when running many test suites that each load a large amount of code. 0.12.3+2 This version was unpublished due to issue 287. Improve the display of syntax errors in VM tests. Work around a Firefox bug. Computed styles now work in tests on Firefox. Fix a bug where VM tests would be loaded from the wrong URLs on Windows (or in special circumstances on other operating systems). 0.12.3+1 Fix a bug that caused the test runner to crash on Windows because symlink resolution failed. 0.12.3 If a future matched against the completes or completion() matcher throws an error, that error is printed directly rather than being wrapped in a string. This allows such errors to be captured using the Zone API and improves formatting. Improve support for Polymer tests. This fixes a flaky time-out error and adds support for Dartifying JavaScript stack traces when running Polymer tests via pub serve. In order to be more extensible, all exception handling within tests now uses the Zone API. Add a heartbeat to reset a test's timeout whenever the test interacts with the test infrastructure. expect(), expectAsync(), and expectAsyncUntil() throw more useful errors if called outside a test body. 0.12.2 Convert JavaScript stack traces into Dart stack traces using source maps. This can be disabled with the new --js-trace flag. Improve the browser test suite timeout logic to avoid timeouts when running many browser suites at once. 0.12.1 Add a --verbose-trace flag to include core library frames in stack traces. 0.12.0 Test Runner 0.12.0 adds support for a test runner, which can be run via pub run test:test (or pub run test in Dart 1.10). By default it runs all files recursively in the test/ directory that end in _test.dart and aren't in a packages/ directory. The test runner supports running tests on the Dart VM and many different browsers. Test files can use the @TestOn annotation to declare which platforms they support. For more information on this and many more new features, see the README. Removed and Changed APIs As part of moving to a runner-based model, most test configuration is moving out of the test file and into the runner. As such, many ancillary APIs have been removed. These APIs include skip_ and solo_ functions, Configuration and all its subclasses, TestCase, TestFunction, testConfiguration, formatStacks, filterStacks, groupSep, logMessage, testCases, BREATH_INTERVAL, currentTestCase, PASS, FAIL, ERROR, filterTests, runTests, ensureInitialized, setSoloTest, enableTest, disableTest, and withTestEnvironment. FailureHandler, DefaultFailureHandler, configureExpectFailureHandler, and getOrCreateExpectFailureHandler which used to be exported from the matcher package have also been removed. They existed to enable integration between test and matcher that has been streamlined. A number of APIs from matcher have been into test, including: completes, completion, ErrorFormatter, expect,fail, prints, TestFailure, Throws, and all of the throws methods. Some of these have changed slightly: expect no longer has a named failureHandler argument. expect added an optional formatter argument. completion argument id renamed to description. ##0.11.6+4 Fix some strong mode warnings we missed in the vm_config.dart and html_config.dart libraries. ##0.11.6+3 Fix a bug introduced in 0.11.6+2 in which operator matchers broke when taking lists of matchers. ##0.11.6+2 Fix all strong mode warnings. ##0.11.6+1 Give tests more time to start running. ##0.11.6 Merge in the last 0.11.x release of matcher to allow projects to use both test and unittest without conflicts. Fix running individual tests with HtmlIndividualConfiguration when the test name contains URI-escaped values and is provided with the group query parameter. ##0.11.5+1 Internal code cleanups and documentation improvements. ##0.11.5 Bumped the version constraint for matcher. ##0.11.4 Bump the version constraint for matcher. ##0.11.3 Narrow the constraint on matcher to ensure that new features are reflected in unittest's version. ##0.11.2 Prints a warning instead of throwing an error when setting the test configuration after it has already been set. The first configuration is always used. ##0.11.1+1 Fix bug in withTestEnvironment where test cases were not reinitialized if called multiple times. ##0.11.1 Add reason named argument to expectAsync and expectAsyncUntil, which has the same definition as expect's reason argument. Added support for private test environments. ##0.11.0+6 Refactored package tests. ##0.11.0+5 Release test functions after each test is run. ##0.11.0+4 Fix for 20153 ##0.11.0+3 Updated maximum matcher version. ##0.11.0+2 Removed unused files from tests and standardized remaining test file names. ##0.11.0+1 Widen the version constraint for stack_trace. ##0.11.0 Deprecated methods have been removed: expectAsync0, expectAsync1, and expectAsync2 - use expectAsync instead expectAsyncUntil0, expectAsyncUntil1, and expectAsyncUntil2 - use expectAsyncUntil instead guardAsync - no longer needed protectAsync0, protectAsync1, and protectAsync2 - no longer needed matcher.dart and mirror_matchers.dart have been removed. They are now in the matcher package. mock.dart has been removed. It is now in the mock package. ##0.10.1+2 Fixed deprecation message for mock. ##0.10.1+1 Fixed CHANGELOG Moved to triple-slash for all doc comments. ##0.10.1 DEPRECATED matcher.dart and mirror_matchers.dart are now in the matcher package. mock.dart is now in the mock package. equals now allows a nested matcher as an expected list element or map value when doing deep matching. expectAsync and expectAsyncUntil now support up to 6 positional arguments and correctly handle functions with optional positional arguments with default values. ##0.10.0 Each test is run in a separate Zone. This ensures that any exceptions that occur is async operations are reported back to the source test case. DEPRECATED guardAsync, protectAsync0, protectAsync1, and protectAsync2 * Running each test in a Zone addresses the need for these methods. NEW! expectAsync replaces the now deprecated expectAsync0, expectAsync1 and expectAsync2 NEW! expectAsyncUntil replaces the now deprecated expectAsyncUntil0, expectAsyncUntil1 and expectAsyncUntil2 TestCase: Removed properties: setUp, tearDown, testFunction enabled is now get-only * Removed methods: pass, fail, error interactive_html_config.dart has been removed. runTests, tearDown, setUp, test, group, solo_test, and solo_group now throw a StateError if called while tests are running. rerunTests has been removed. 1. Depend on it Add this to your package's pubspec.yaml file:  dependencies:   test:   2. Install it You can install packages from the command line:  $ pub get  Alternatively, your editor might support pub. Check the docs for your editor to learn more. Version Uploaded Documentation Archive 0.12.15+1 Jul 7, 2016 Go to the documentation of test 0.12.15+1 Download test 0.12.15+1 archive 0.12.15 Jul 6, 2016 Go to the documentation of test 0.12.15 Download test 0.12.15 archive 0.12.14+1 Jun 22, 2016 Go to the documentation of test 0.12.14+1 Download test 0.12.14+1 archive 0.12.14 Jun 21, 2016 Go to the documentation of test 0.12.14 Download test 0.12.14 archive 0.12.13+5 Jun 7, 2016 Go to the documentation of test 0.12.13+5 Download test 0.12.13+5 archive 0.12.13+4 May 19, 2016 Go to the documentation of test 0.12.13+4 Download test 0.12.13+4 archive 0.12.13+3 May 18, 2016 Go to the documentation of test 0.12.13+3 Download test 0.12.13+3 archive 0.12.13+1 Apr 27, 2016 Go to the documentation of test 0.12.13+1 Download test 0.12.13+1 archive 0.12.13 Mar 23, 2016 Go to the documentation of test 0.12.13 Download test 0.12.13 archive 0.12.12 Mar 10, 2016 Go to the documentation of test 0.12.12 Download test 0.12.12 archive All 54 versions... About A library for writing dart unit tests. Author Email misc@dartlang.org Dart Team Homepage github.com/dart-lang/test Documentation www.dartdocs.org/documentation/test/0.12.15%2B1/ Source code (hyperlinked) www.crossdart.info/p/test/0.12.15%2B1/ Uploader kevmoo@google.com nweiz@google.com rnystrom@google.com Share Tweet Dart Language — Site Map — Terms of Service — Privacy Policy π"	"null"	"null"	"Provides a standard way of writing and running tests in Dart."	"true"
"Tools"	"Observatory"	"https://www.dartlang.org/tools/observatory/"	"Observatory is a tool for profiling and debugging your Dart applications."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"Observatory is a tool for profiling and debugging your Dart applications."	"false"
"Tools"	"dart2js"	"https://www.dartlang.org/tools/dart2js/"	"compiles Dart code to JavaScript"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"dart2js | webdev.dartlang.org Get Started Libraries Tools Search Quick Start Get Started Write an Angular App Libraries Overview Angular 2 for Dart Tools Dart Tools for the Web Community Community and Support Tutorials Overview Articles Overview On this page Basic usage Usage in pubspec Options Helping dart2js generate better code Debugging Chrome Internet Explorer Firefox Safari dart2js: The Dart-to-JavaScript Compiler Send feedback Use the dart2js tool to compile Dart code to JavaScript. The pub serve, pub run, and pub build commands use dart2js. If you are using dart2js through one of the pub commands, see Configuring the Built-in dart2js Transformer for Pub for information on how to specify dart2js flags in your pubspec file. The dart2js tool provides hints for improving your Dart code and removing unused code. You can get these hints for all kinds of code—even command-line apps. Also see dartanalyzer, which performs a similar analysis but has a different implementation. This page tells you how to use dart2js on the command line. It also give tips on debugging the JavaScript that dart2js generates. Basic usage Here’s an example of compiling a Dart file to JavaScript:  dart2js --out=test.js test.dart  This command produces a file that contains the JavaScript equivalent of your Dart code. It also produces a source map, which can help you debug the JavaScript version of the app more easily. Usage in pubspec You can also configure dart2js options in the pubspec file. For more information, see Configuring the Built-in dart2js Transformer for Pub. Options Common command-line options for dart2js include: -o <file> or --out=<file> Generate the output into <file>. If not specified, the output goes in a file named out.js. -c or --checked Insert runtime type checks, and enable assertions (checked mode). -m or --minify Generate minified output. -h or --help Display help. (Use -vh for information about all options.) Some other handy options include: --packages=<path> Specify the path to the package resolution configuration file. For more information, see Package Resolution Configuration File. This option cannot be used with --package-root. -p <path> or --package-root=<path> Specify where to find “package:” imports. This option cannot be used with --packages. -D<flag>=<value> Define an environment variable. --version Display version information for dart2js. The following options help you control the output of dart2js: --suppress-warnings Don’t display warnings. --suppress-hints Don’t display hints. --terse Emit diagnostics, but don’t suggest how to get rid of the diagnosed problems. -v or --verbose Display lots of information. The following options control the analysis that dart2js performs on Dart code: --analyze-all Analyze even the code that isn’t reachable from main(). This option is useful for finding errors in libraries, but using it can result in bigger and slower output. -analyze-only Analyze the code, but don’t generate code. --analyze-signatures-only Like --analyze-only, but skip analysis of method bodies and field initializers. --enable-diagnostic-colors Add colors to diagnostic messages. --show-package-warnings Show warnings and hints generated from packages. --csp If true, disables dynamic generation of code in the generated output. This is necessary to satisfy CSP restrictions (see W3C Content Security Policy). The default is false. --dump-info Generates a file (with the suffix .info.json) that contains information about the generated code. You can inspect the generated file with the Dump Info Visualizer. Helping dart2js generate better code You can do a couple of things to improve the code that dart2js generates: Write your code in a way that makes type inference easier. Once you’re ready to deploy your app, use the dart2js --minify option to reduce code size. Note: Don’t worry about the size of your app’s included libraries. The dart2js tool performs tree shaking to omit unused classes, functions, methods, and so on. Just import the libraries you need, and let dart2js get rid of what you don’t need. Follow these practices to help dart2js do better type inference, so it can generate smaller and faster JavaScript code: Avoid using the dart:mirrors library, directly or indirectly. If you must use it, provide @MirrorsUsed annotations. Don’t use Function.apply(). Don’t override noSuchMethod(). Avoid setting variables to null. Be consistent with the types of arguments you pass into each function or method. Debugging This section gives tips for debugging dart2js-produced code in Chrome, Firefox, and Safari. Debugging the JavaScript produced by dart2js is easiest in browsers such as Chrome that support source maps. Whichever browser you use, you should enable pausing on at least uncaught exceptions, and perhaps on all exceptions. For frameworks such as dart:isolate and dart:async that wrap user code in try-catch, we recommend pausing on all exceptions. Chrome To debug in Chrome: Open the Developer Tools window, as described in the Chrome DevTools documentation. Turn on source maps, as described in the video SourceMaps in Chrome. Enable debugging, either on all exceptions or only on uncaught exceptions, as described in How to set breakpoints. Reload your application. Internet Explorer To debug in Internet Explorer: Update to the latest version of Internet Explorer. (Source-map support was added to IE in April 2014). Load Developer Tools (F12). For more information, see Using the F12 developer tools. Reload the application. The debugger tab shows source-mapped files. Exception behavior can be controlled through Ctrl+Shift+E; the default is Break on unhandled exceptions. Firefox Firefox doesn’t yet support source maps (see bug #771597). To debug in Firefox: Enable the Developer Toolbar, as described in Kevin Dangoor’s blog post, New Firefox Command Line Helps You Develop Faster"". Click Pause on exceptions, as shown in the following figure. Reload your application. Safari To debug in Safari: Turn on the Develop menu, as described in the Safari Web Inspector Guide. Enable breaks, either on all exceptions or only on uncaught exceptions. See Figure 4-2 on the Safari Debugging page. Reload your application. Technologies Dart Angular Dart Polymer Dart Resources DartPad Code labs API reference Community Mailing lists Stack Overflow Slack (register) Problems with this site? File a bug Terms | Privacy Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code samples are licensed under the BSD License."	"null"	"null"	"compiles Dart code to JavaScript"	"true"
"Tools"	"js2dart"	"https://github.com/vojtajina/js2dart"	"compiles Javascript code to Dart"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"15"	"3"	"3"	"GitHub - vojtajina/js2dart: Compile JavaScript to Dart so that you can compile it back to JavaScript and run. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 3 Star 15 Fork 3 vojtajina/js2dart Code Issues 2 Pull requests 1 Pulse Graphs Compile JavaScript to Dart so that you can compile it back to JavaScript and run. 22 commits 2 branches 0 releases Fetching contributors JavaScript 83.6% Dart 16.4% JavaScript Dart Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master with-hacked-traceur Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. spec src .gitignore compile.js gulp-js2dart.js gulpfile.js package.json pubspec.yaml run_specs.dart Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/vojtajina/js2dart"	"compiles Javascript code to Dart"	"true"
"Tools"	"Stagehand"	"https://github.com/google/stagehand"	"A project scaffolding generator, inspired by tools like Web Starter Kit and Yeoman."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"127"	"25"	"55"	"GitHub - google/stagehand: Dart project generator - web apps, console apps, servers, and more. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 25 Star 127 Fork 55 google/stagehand Code Issues 2 Pull requests 0 Wiki Pulse Graphs Dart project generator - web apps, console apps, servers, and more. http://stagehand.pub 580 commits 3 branches 30 releases Fetching contributors Dart 90.5% HTML 7.3% CSS 1.5% Shell 0.7% Dart HTML CSS Shell Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags gh-pages gnome_template_updates master Nothing to show v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.5 v1.0.4 v1.0.3 v1.0.2 v1.0.1 v1.0.0 v0.2.6 v0.2.5+4 v0.2.5+3 v0.2.5+2 v0.2.4 v0.2.2+1 v0.2.2 v0.2.1 v0.2.0+1 v0.2.0 v0.1.5+3 v0.1.5+2 v0.1.5+1 v0.1.5 v0.1.3+2 v0.1.3+1 v0.1.3 v0.1.2 v0.1.1 1.0.2 Nothing to show New pull request Latest commit 34e583b May 16, 2016 kwalrath Update stagehand version to 1.0.9 Permalink Failed to load latest commit information. bin remove all library keyword Feb 12, 2016 lib Update stagehand version to 1.0.9 May 31, 2016 site Fix example on stagehand.pub Mar 29, 2016 templates Listen on ""any"" by default in shelf May 27, 2016 test remove all library keyword Feb 12, 2016 tool re-gen sources Oct 16, 2015 .analysis_options analysis_options Jul 31, 2015 .gitignore ignore .packages Aug 17, 2015 .project sort file listings Dec 18, 2014 .travis.yml test on Dart stable and dev May 12, 2015 AUTHORS Use git user name for author name May 16, 2016 CHANGELOG.md Update stagehand version to 1.0.9 May 31, 2016 LICENSE Update LICENSE Mar 11, 2016 README.md hello world for angular 2 Dec 2, 2015 pubspec.yaml Update stagehand version to 1.0.9 May 31, 2016 README.md Stagehand - A Dart project generator Helps you get set up! Stagehand helps you get your Dart projects set up and ready for the big show. It is a Dart project scaffolding generator, inspired by tools like Web Starter Kit and Yeoman. Stagehand templates console-full - A larger command-line application sample. console-simple - A simple command-line application. package-simple - A starting point for Dart libraries or applications. server-appengine - A simple App Engine application. server-shelf - A web server built using the shelf package. web-angular - A web app built using Angular 2. web-polymer - A web app built using polymer.dart. web-simple - An absolute bare-bones web app. Installation Requirements: To install: > pub global activate stagehand To update, run activate again: > pub global activate stagehand Usage Stagehand will generate a project skeleton into the current directory. As an example, here is how you create a package with Stagehand: > mkdir fancy_project > cd fancy_project > stagehand package-simple And to list all of the project templates: > stagehand Goals Opinionated and prescriptive; minimal to no options Mobile-first Support server and client apps Becomes the best way to create a new Dart project Used by Atom, WebStorm, Sublime, and more Distributed as a pub package Issues and bugs Please file reports on the GitHub Issue Tracker. Contributing Contributions welcome! Please read this short guide first. Analytics and crash reports Learn more about how Stagehand uses Google Analytics for measuring usage and error reporting, and how you can opt-out. Disclaimer This is not an official Google product. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/google/stagehand"	"A project scaffolding generator, inspired by tools like Web Starter Kit and Yeoman."	"true"
"Tools"	"Crossdart"	"http://crossdart.info"	"Cross-referenced source code of the packages from Pub."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"10"	"2"	"2"	"GitHub - astashov/crossdart: Cross-reference of Dart packages Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 10 Fork 2 astashov/crossdart Code Issues 3 Pull requests 0 Pulse Graphs Cross-reference of Dart packages http://crossdart.info 145 commits 4 branches 4 releases Fetching contributors Dart 76.6% JavaScript 14.5% CSS 8.6% HTML 0.3% Dart JavaScript CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags add-filetree add-find-usages-to-chrome-extension master v2 Nothing to show 0.1.2 0.1.1 0.1.0 0.0.8 Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. bin lib test .gitignore LICENSE README.md demo.html pubspec.lock pubspec.yaml README.md Crossdart Note: If you're looking the source code for Crossdart Chrome Extension, it's there: https://github.com/astashov/crossdart-chrome-extension Analyzes source code of a given project, and emits one of the following: HTML pages with hyperlinked source code of the project. JSON file with the analysis data. Github version of the JSON file with the analysis data (for Crossdart Chrome Extension) Installation Install it via pub global activate crossdart. Usage Run it as pub global run crossdart. Required arguments: --input - path to your project --dart-sdk - path to Dart SDK Optional arguments: --output - where to place the output (HTML or JSON). Will be the same as --input if omitted. --hosted-url - URL of Crossdart's site. https://www.crossdart.info by default. --url-path-prefix - path prefix on the Crossdart's site. p by default. --output-format - output format. Could be github, html or json. github by default. Example $ pub global run crossdart --input=/home/john/my_dart_project --dart-sdk=/usr/lib/dart $ pub global run crossdart --input=/home/john/my_dart_project --dart-sdk=/usr/lib/dart --output=/home/john/crossdart-output --output-format=html Contributing Please use Github's bug tracker for bugs. Pull Requests are welcome. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/astashov/crossdart"	"Cross-referenced source code of the packages from Pub."	"true"
"Tools"	"Crossdart Github Chrome Extension"	"https://chrome.google.com/webstore/detail/crossdart-chrome-extensio/jmdjoliiaibifkklhipgmnciiealomhd"	"Adds ""Go to declaration"" and ""Find Usages"" functionality to your Dart projects on Github (both in tree views and pull requests)."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"7"	"2"	"0"	"GitHub - astashov/crossdart-chrome-extension: Crossdart Chrome Extension, adds ""Go to Declaration"" and ""Find Usages"" to Dart projects on Github. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 7 Fork 0 astashov/crossdart-chrome-extension Code Issues 0 Pull requests 0 Pulse Graphs Crossdart Chrome Extension, adds ""Go to Declaration"" and ""Find Usages"" to Dart projects on Github. https://chrome.google.com/webstore/detail/crossdart-chrome-extensio/jmdjoliiaibifkklhipgmnciiealomhd 5 commits 1 branch 0 releases Fetching contributors JavaScript 85.5% CSS 12.3% HTML 2.2% JavaScript CSS HTML Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. crossdart github Fix bug with supporting pull requests from other users' forked projects Jun 5, 2016 .gitignore Initial commit Jun 2, 2016 README.md Add some examples to README Jun 5, 2016 background.js constants.js crossdart.css crossdart.js errors.js github.js icon128.png icon38.png location_change_detector.js manifest.json path.js popup.css popup.html popup.js request.js status.js tooltip.css tooltip.js utils.js README.md Crossdart Chrome Extension This extension adds ""Go to definition"" and ""Find usages"" functionality to Dart projects on Github, to the tree views and pull requests. You can take it there: https://chrome.google.com/webstore/detail/crossdart-chrome-extensio/jmdjoliiaibifkklhipgmnciiealomhd Demo Here (1.7MB) Some examples Make sure you have the extension installed, then go to one of the following links, click on 'XD' icon in the toolbar, and check ""Enable Crossdart for this project"", and click ""Apply"" Pull Request for the 'logging' package IOClient class in the 'http' package Pull Request for the 'sqljocky' package Installation Simple way If you have a public project, or a private project without other private dependencies, you can just install the extension into Chrome, go to a repo on Github, click on ""XD"" icon in the Chrome toolbar, and check the checkbox ""Enable Crossdart for this project"". That's it, the extension will send a request to analyze the source code to https://metadata.crossdart.com/analyze, and it will analyze the source code and upload the analysis data to Google Cloud Storage, where the extension will take it from. The extension will show the progress of the operations in a popup in the right top corner. You can preventively send the JSON request to POST https://metadata.crossdart.com/analyze, to speed up the analyzing process (e.g. on commit or pull request hook). It accepts JSON payload, which look like this: url - required, String, the url of the project, looks like https://github.com/johnsmith/my-dart-project sha - required, String, full SHA of the commit token - optional, String, personal access token in case your project is private Example: {""url"":""https://github.com/johnsmith/my-dart-project"",""sha"":""62e3956d59878f24dd0bdb042e2f3bc320bf159f""} More complicated, but private and secure way (for super private projects) We destroy the cloned repo on metadata.crossdart.com as soon as possible right after finishing analyzing, but in case you don't want to give access to your code to anything at all, or you have private dependencies in your project, you'll have to build the analysis data and upload them to some publicly available place (e.g. S3 or GCS) by yourself. Unfortunately, for now this is not just one-click installation, you have to do plenty of steps to make it work. I'll try to document them here in details, to simplify the ramp up process. Install it globally: $ pub global activate crossdart and then run as $ pub global run crossdart --input=/path/to/your/project --dart-sdk=/path/to/dart-sdk for example: $ pub global run crossdart --input=/home/john/my_dart_project --dart-sdk=/usr/lib/dart It will generate the crossdart.json file in the --input directory, which you will need to put somewhere, for example, to S3 (see below). Uploading metadata You need some publicly available place to store metadatas for every single commit for your project. You can use S3 for that. It's cheap and relatively easy to configure. You probably may want to create a separate bucket on S3 for crossdart metadata files, and then set correct CORS configuration for it. For that, click to the bucket in AWS S3 console, and in the ""Properties"" tab find ""Add CORS Configuration"". You can add something like this there: <?xml version=""1.0"" encoding=""UTF-8""?> <CORSConfiguration xmlns=""http://s3.amazonaws.com/doc/2006-03-01/"">   <CORSRule>     <AllowedOrigin>*</AllowedOrigin>     <AllowedMethod>GET</AllowedMethod>   </CORSRule> </CORSConfiguration> To deliver your metadata files to S3, you can use s3cmd tool. Create a file .s3cfg with the contents: [default] access_key = YourAccessKey secret_key = YourSecretKey use_https = True  and then run s3cmd to put newly created file. Something like: $ s3cmd -P -c /path/to/.s3cfg put /path/to/crossdart.json s3://my-bucket/my-github-name/my-project/32c139a7775736e96e476b1e0c89dd20e6588155/crossdart.json The structure of the URL on S3 is important. It should always end with the github name, project name, git sha and crossdart.json. Like above, the URL ends with my-github-name/my-project/32c139a7775736e96e476b1e0c89dd20e6588155/crossdart.json Integrating with Travis CI Doing all the uploads to S3 manually is very cumbersome, so better to use some machinery, like CI or build server, to do that stuff for you, for example Travis CI. Here's how the configuration could look like: .travis.yml file: language: dart dart:   - stable install:   # Here are other stuff to install   - travis_retry sudo apt-get install --yes s3cmd # ... # Other sections if needed # ... after_success:   - tool/crossdart_runner tool/crossdart_runner file: #!/bin/bash # # This script is invoked by Travis CI to generate Crossdart metadata for the Crossdart Chrome extension if [ ""$TRAVIS_PULL_REQUEST"" != ""false"" ] then   CROSSDART_HASH=""${TRAVIS_COMMIT_RANGE#*...}"" else   CROSSDART_HASH=""${TRAVIS_COMMIT}"" fi echo ""Installing crossdart"" pub global activate crossdart echo ""Generating metadata for crossdart"" pub global run crossdart --input=. --dart-sdk=$DART_SDK echo ""Copying the crossdart json file to S3 ($CROSSDART_HASH)"" s3cmd -P -c ./.s3cfg put ./crossdart.json s3://my-bucket/crossdart/my-github-name/my-project/$CROSSDART_HASH/crossdart.json Now, every time somebody pushes to 'master', after Travis run, I'll have hyperlinked code of my project on Github. And every time somebody creates a pull request for me on Github, it's code also going to be hyperlinked. How cool is that! :) Setting up the Crossdart Chrome extension: After installing Crossdart Chrome Extension, you'll see a little ""XD"" icon in Chrome's URL bar on Github pages. If you click to it, you'll see a little popup, where you can turn Crossdart on for the current project, and also specify the URL where it should get the analysis data from (in case you generated and uploaded it by yourself. If you don't - just leave it empty). You only should provide a base for this URL, the extension will later append git sha and 'crossdart.json' to it. I.e. if you specify URL in this field like: https://my-bucket.s3.amazonaws.com/crossdart  then the extension will try to find crossdart.json files by URLs, which will look like: https://my-bucket.s3.amazonaws.com/crossdart/my-github-name/my-project/4a9f8b41d042183116bbfaba31bdea109cc3080d/crossdart.json  If your project is private, you also will need to create access token, and paste it into the field in the popup as well. You can do that there: https://github.com/settings/tokens/new. Contributing Please use Github's bug tracker for bugs. Pull Requests are welcome. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/astashov/crossdart-chrome-extension"	"Adds ""Go to declaration"" and ""Find Usages"" functionality to your Dart projects on Github (both in tree views and pull requests)."	"true"
"Tools"	"gulp-dart"	"https://github.com/agudulin/gulp-dart"	"A gulp plugin for compiling Dart code to JavaScript using dart2js."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"2"	"2"	"2"	"GitHub - agudulin/gulp-dart: Gulp plugin for Dart Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 2 Star 2 Fork 2 agudulin/gulp-dart Code Issues 1 Pull requests 2 Pulse Graphs Gulp plugin for Dart 31 commits 9 branches 0 releases Fetching contributors JavaScript 99.3% Dart 0.7% JavaScript Dart Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags greenkeeper-gulp-util-3.0.7 greenkeeper-mocha-2.3.4 greenkeeper-mocha-2.4.5 greenkeeper-path-0.12.7 greenkeeper-pin greenkeeper-through2-2.0.1 greenkeeper-vinyl-file-1.3.0 greenkeeper-vinyl-file-2.0.0 master Nothing to show Nothing to show New pull request Fetching latest commit… Cannot retrieve the latest commit at this time. Permalink Failed to load latest commit information. test-files .editorconfig .gitignore index.js license package.json readme.md test.js readme.md gulp-dart Compile Dart to JavaScript using dart2js Preinstall You need install dartsdk at first. Go to https://www.dartlang.org/downloads/ for more information. If you already have it installed and got ENOENT error then read this thread. Install $ npm install --save gulp-dart Usage var gulp = require(""gulp""); var dart = require(""gulp-dart"");  gulp.task(""default"", function() {   return gulp     .src('web/*.dart')     .pipe(dart({       ""dest"": ""./dist"",       ""minify"": ""true""     }))     .pipe(gulp.dest('./')) }); Supported dart2js options checked                  // Insert runtime type checks and enable assertions (checked mode) minify                   // Generate minified output verbose                  // Display verbose information analyze-all              // Analyze all code analyze-only             // Analyze but do not generate code analyze-signatures-only  // Skip analysis of method bodies and field initializers suppress-warnings        // Do not display any warnings fatal-warnings           // Treat warnings as compilation errors suppress-hints           // Do not display any hints enable-diagnostic-colors // Add colors to diagnostic messages no-source-maps           // Do not generate a source map file terse                    // Emit diagnostics without suggestions for how to get rid of the diagnosed problems csp                      // Disables dynamic generation of code in the generated output preserve-uris            // Preserve the source URIs in the reflection data show-package-warnings    // Show warnings and hints generated from packages License MIT © Alexander Gudulin Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/agudulin/gulp-dart"	"A gulp plugin for compiling Dart code to JavaScript using dart2js."	"true"
"Tools"	"dev_compiler"	"https://github.com/dart-lang/dev_compiler"	"Dart to JavaScript compiler designed to create idiomatic, readable JavaScript output."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"126"	"59"	"25"	"GitHub - dart-lang/dev_compiler: Experimental Dart to JavaScript compiler designed to create idiomatic, readable JavaScript output. Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 59 Star 126 Fork 25 dart-lang/dev_compiler Code Issues 145 Pull requests 1 Pulse Graphs Experimental Dart to JavaScript compiler designed to create idiomatic, readable JavaScript output. https://pub.dartlang.org/packages/dev_compiler 1,084 commits 42 branches 28 releases Fetching contributors Dart 51.7% JavaScript 48.2% Other 0.1% Dart JavaScript Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags backends checked_task citizenship closure-annotations-no-generics closure-backends closure-modules closure-qualify2 debugger-global dependency-overrides es6-modules fix-modules fix-param-destructuring fix-runtime-classes fix-transformer-e2e-test fix_summaries gh-pages html_report log-level-karma master nametypes no-reify-generic-class-type-args node-modules node_modules notnull-special-case-plus-zero notnull-special-case-plus-zero2 param-nodes specialized-map static-length static-length2 test-latest-deps transformer-e2e-test-travis transformer-e2e-test transformer-log-source-span transformer-pub-serve-test transformer transformer2-angular tree-shaking tree-shaking2 tree-shaking3 type-annotations vsm-global vsm-gt-hacks Nothing to show v0.1.1 v0.1.0 0.1.24 0.1.23 0.1.22 0.1.21 0.1.20 0.1.19 0.1.18 0.1.17 0.1.16 0.1.15 0.1.14 0.1.13 0.1.12 0.1.11 0.1.10 0.1.9 0.1.8 0.1.7 0.1.6 0.1.5+1 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1+1 0.1.1 Nothing to show New pull request Latest commit fd3e332 Jul 13, 2016 jmesserly committed on GitHub Merge pull request #602 from dart-lang/patch-sdk-change … Update patch_sdk.sh Permalink Failed to load latest commit information. bin make ""compile"" command optional to address #505 Jun 14, 2016 doc Remove the experimental tag from the flag header Jul 13, 2016 lib Custom formatter popup booleans Jul 11, 2016 test Check in codegen test expectations. Jul 7, 2016 tool Update patch_sdk.sh Jul 13, 2016 .analysis_options Enable strong mode in DDC, fix all warnings/errors May 26, 2016 .gitignore Check in a lockfile. May 18, 2016 .travis.yml Allow node tests to break on travis Mar 31, 2016 CHANGELOG.md Update CHANGELOG.md Apr 1, 2016 LICENSE.md Add LICENSE and corresponding headers Feb 24, 2015 README.md minor usage and readme fixes Nov 16, 2015 STRONG_MODE.md Update STRONG_MODE.md Mar 2, 2016 USAGE.md Update USAGE.md Jul 1, 2016 codereview.settings Update codereview.settings Feb 24, 2015 karma.conf.js Verify status of statically failing tests Jun 22, 2016 package.json Update package.json Apr 1, 2016 pubspec.lock Verify status of statically failing tests Jun 22, 2016 pubspec.yaml upgrade analyzer version Jun 14, 2016 test-main.js Automated runtime tests using Karma Apr 20, 2015 README.md dev_compiler The Dart Dev Compiler (DDC) is an experimental development tool and transpiler. It is at a very early stage today. Its aims include the following: A static checker based on stricter-than-standard-Dart type rules. A modular Dart-to-ES6 transpiler for Dart programs that statically check. DDC attempts to map to idiomatic EcmaScript 6 (ES6) as cleanly as possible. To do this while cohering to Dart semantics, DDC relies heavily on static type information, static checking, and runtime assertions. DDC is intended to support a very large subset of Dart. If a program does not statically check, DDC will not result in valid generated code. Our goal is that a program execution (of a valid program) that runs without triggering runtime assertions should run the same on other Dart platforms under checked mode or production mode. DDC does support untyped Dart code, but it will typically result in less readable and less efficient ES6 output. DDC has the following project goals: Effective static checking and error detection. A debugging solution for all modern browsers. Readable output. Fast, modular compilation of Dart code. Easy use of generated code from JavaScript. DDC is still in a very early stage as highlighted by our choice of ES6. ES6 itself is in active development across all modern browsers, but at various stages of support: kangax.github.io/compat-table/es6. We are targeting the subset of ES6 supported in Chrome. To try out DDC and/or give feedback, please read our usage page. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dart-lang/dev_compiler"	"Dart to JavaScript compiler designed to create idiomatic, readable JavaScript output."	"true"
"IDEs, Editors, and Plugins"	"IntelliJ Plugin"	"https://www.dartlang.org/tools/webstorm/"	"Dart plugin from JetBrains for WebStorm, IntelliJ IDEA, PhpStorm, PyCharm, and RubyMine."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"WebStorm | webdev.dartlang.org Get Started Libraries Tools Search Quick Start Get Started Write an Angular App Libraries Overview Angular 2 for Dart Tools Dart Tools for the Web Community Community and Support Tutorials Overview Articles Overview On this page Getting started Installing software Configuring Dart support Running a web app Reporting issues More information Installing and Using WebStorm Send feedback WebStorm is an IDE from JetBrains for client-side development. It comes with the Dart plugin pre-installed. Note: If you’re interested in using Dart with another JetBrains IDE such as IntelliJ IDEA, see the page Dart Plugin from JetBrains. Getting started To get started with WebStorm, install it and then tell it where to find the Dart SDK and Dartium. Installing software Install WebStorm or, to try out the latest Dart language features, Install WebStorm EAP Install the Dart SDK Install Dartium Configuring Dart support Here’s one way to configure Dart support in WebStorm: Create a new Dart project: From the Welcome screen, click Create New Project. In the next dialog, click Dart. If you don't see values for the Dart SDK path and (optional) Dartium path, enter them. For example, the SDK path might be <dart installation directory>/dart/dart-sdk, and the Dartium path might be <dartium installation directory>/Chromium. Note: The Dart SDK path specifies the directory that contains the SDK’s bin and lib directories; the bin directory contains tools such as dart and dart2js. The Dartium path specifies the full path to the Chromium executable that contains the Dart VM. WebStorm ensures that the paths are valid. An alternative to Step 1 is to open an existing Dart project, and then open its pubspec.yaml file or any of its Dart files. Running a web app To run a web app in Dartium, right-click the main HTML file (for example, web/index.html), and choose Run ‘index.html’. To run a web app in another browser (or in Dartium), right-click the main HTML file (for example, web/index.html) and choose Open in browser. Then choose the browser you want to run the app. A browser window opens and, after the app is compiled to JavaScript, displays the app. Reporting issues Please report issues and feedback via the official JetBrains issue tracker for Dart. Include details of the expected behavior, the actual behavior, and screenshots if appropriate. Your questions are welcome in the Dart plugin for WebStorm/IntelliJ editors mailing list. More information See the JetBrains website for more information. WebStorm Getting started with Dart Features Quick start Dart Plugin by JetBrains FAQ for Eclipse users migrating to WebStorm/IntelliJ Technologies Dart Angular Dart Polymer Dart Resources DartPad Code labs API reference Community Mailing lists Stack Overflow Slack (register) Problems with this site? File a bug Terms | Privacy Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code samples are licensed under the BSD License."	"null"	"null"	"Dart plugin from JetBrains for WebStorm, IntelliJ IDEA, PhpStorm, PyCharm, and RubyMine."	"true"
"IDEs, Editors, and Plugins"	"Sublime Text Package"	"https://github.com/guillermooo/dart-sublime-bundle"	"Sublime Text 3 Dart Package"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"187"	"38"	"34"	"GitHub - guillermooo/dart-sublime-bundle: Sublime Text 3 Dart Package Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 38 Star 187 Fork 34 guillermooo/dart-sublime-bundle Code Issues 54 Pull requests 2 Wiki Pulse Graphs Sublime Text 3 Dart Package 1,081 commits 1 branch 48 releases 17 contributors Python 96.2% JavaScript 1.9% Dart 1.3% Other 0.6% Python JavaScript Dart Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 1.5.1 1.5.0 1.4.1 1.4.0 1.3.8 1.3.7 1.3.6 1.3.5 1.3.4 1.3.3 1.3.2 1.3.1 1.3.0 1.2.3 1.2.2 1.2.1 1.2.0 1.1.1 1.1.0 1.0.0 0.3500.14 0.3500.13 0.3500.12 0.3500.11 0.3500.10 0.3500.9 0.3500.8 0.3500.7 0.3500.6 0.3500.5 0.3500.4 0.3500.3 0.3500.2 0.3500.1 0.3500.0 0.3000.6 0.3000.5 0.3000.4 0.3000.3 0.3000.2 0.3000.1 0.3000.0 0.2500.4 0.2500.3 0.2500.2 0.2500.1 0.2500.0 0.1.0 Nothing to show New pull request Latest commit d891fb3 Oct 19, 2015 guillermooo update submodule Permalink Failed to load latest commit information. Snippets Reorganize files Jun 1, 2014 Support show errors panel only on demand Sep 9, 2015 bin/deployment_tool change default logging level Aug 23, 2015 gutter Cleaning up unused gutter icons Apr 11, 2014 lib Merge pull request #570 from guillermooo-forks/refactor-autocomplete Sep 11, 2015 messages prep release Aug 23, 2015 out_there fix #418 - refactor supporting code into its own library Nov 6, 2014 repository/images edit readme Aug 23, 2015 scripts fix publish script Aug 23, 2015 sublime_plugin_lib @ f20bb4d update submodule Oct 19, 2015 tests refactor server code Aug 23, 2015 .gitattributes edit .gitattributes Feb 24, 2015 .gitignore ignore more files Aug 25, 2015 .gitmodules manage deps as submodules Oct 18, 2015 .no-sublime-package Added file-switch to uncompress the package on install Apr 17, 2014 .travis.yml edit travis script Jan 12, 2015 AUTHORS Added common Dart commands to the build system config Feb 28, 2013 Build.ps1 fix build script Mar 3, 2015 CHANGELOG.txt prep release Aug 23, 2015 Dart Doc Comments.tmLanguage fix #433 - greedy comments Nov 22, 2014 Dart.sublime-project housekeeping Feb 24, 2015 Dart.tmLanguage Add support for assert keyword May 29, 2015 LICENSE version 1.0.0 Oct 14, 2014 Pubspec.tmLanguage add Pubspec.tmLanguage Oct 15, 2014 README.md edit readme Aug 23, 2015 __init__.py move log initialization to _init_ Jul 6, 2015 _init_.py move log initialization to _init_ Jul 6, 2015 _init_check.py rename file, reorder code Jul 8, 2015 analyzer.py refactor Aug 23, 2015 appveyor.yml edit appveyor config Oct 18, 2014 autocomplete.py close auto complete list when needed; refactor Sep 11, 2015 browser.py fix encoding: Windows-1252 => UTF-8 Oct 18, 2014 build.sh fix build script May 9, 2015 cmds_search.py fix #418 - refactor supporting code into its own library Nov 6, 2014 config_check.py fix encoding: Windows-1252 => UTF-8 Oct 18, 2014 dev_cmds.py fix encoding: Windows-1252 => UTF-8 Oct 18, 2014 docgen.py retire dartlint Jun 13, 2015 edit.py add 'stagehand' command and navigation keys Oct 26, 2014 execute.py tweak aesthetics Mar 2, 2015 format.py format code via edit.format request Jul 6, 2015 messages.json prep release Aug 23, 2015 misc.py fix imports Nov 10, 2014 navigation.py update imports Jul 6, 2015 polymer.py fix #418 - refactor supporting code into its own library Nov 6, 2014 pub_support.py do not require 'pub' to be on PATH Feb 26, 2015 run.py fix bugs on OSX Jun 17, 2015 stagehand.py catch error when Stagehand isn't available on the system Feb 13, 2015 test_runner.py fix #418 - refactor supporting code into its own library Nov 6, 2014 README.md Dart plugin for Sublime Text 3 Features Syntax highlighting Live code analysis powered by the Dart Analysis Server Integrated package management via pub Multiple editing features: snippets, comment/uncomment, etc. Integrated source code formatter Run server apps in the console Run web apps in Dartium Run web apps in any browser Run apps through Observatory Generate new projects from templates using Stagehand Much more! Most features are only enabled in files with a .dart extension. Documentation Check our wiki for full documentation on how to install and use this package. License See LICENSE. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/guillermooo/dart-sublime-bundle"	"Sublime Text 3 Dart Package"	"true"
"IDEs, Editors, and Plugins"	"Emacs Plugin"	"https://github.com/nex3/dart-mode"	"An Emacs mode for the Dart language"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"45"	"6"	"8"	"GitHub - nex3/dart-mode: An Emacs mode for the Dart language Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 6 Star 45 Fork 8 nex3/dart-mode Code Issues 9 Pull requests 4 Pulse Graphs An Emacs mode for the Dart language http://code.google.com/p/dart-mode 81 commits 1 branch 13 releases 6 contributors Emacs Lisp 100.0% Emacs Lisp Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.14 0.13 0.12 0.10 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 Nothing to show New pull request Latest commit 05fbd30 Feb 12, 2016 nex3 Merge pull request #24 from phst/master … Make version check work in Emacs 25. Permalink Failed to load latest commit information. COPYING Add a license (GPL3). Oct 13, 2011 GPL3-LICENSE Add a license (GPL3). Oct 13, 2011 README.md Only mention marmalade in the README. Sep 11, 2015 dart-mode.el Make version check work in Emacs 25. Feb 9, 2016 README.md Dart Mode Dart Mode is a major mode for editing Dart files in Emacs. Installation Add Marmalade to your package-archives if you don't already have it. Install dart-mode via: M-x package-refresh-contents [RET] M-x package-install [RET] dart-mode  OPTIONAL: To enable on-the-fly syntax checking, add the following to your .emacs file: (setq dart-enable-analysis-server t) (add-hook 'dart-mode-hook 'flycheck-mode)  Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/nex3/dart-mode"	"An Emacs mode for the Dart language"	"true"
"IDEs, Editors, and Plugins"	"Vim Plugin"	"https://github.com/dart-lang/dart-vim-plugin"	"Syntax highlighting for Dart in Vim"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"138"	"37"	"20"	"GitHub - dart-lang/dart-vim-plugin: Syntax highlighting for Dart in Vim Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 37 Star 138 Fork 20 dart-lang/dart-vim-plugin Code Issues 3 Pull requests 1 Pulse Graphs Syntax highlighting for Dart in Vim 52 commits 1 branch 1 release 12 contributors VimL 100.0% VimL Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags master Nothing to show 0.1.0 Nothing to show New pull request Latest commit 18ca401 Jun 14, 2016 Stan Manilov committed with cbracken Replace GIF demos of the provided vim commands … The following (subjective) problems with the original GIFs are addressed:  - The resolution of the images is higher than necessary which incurs    extra web traffic and doesn't reflect the importance of the    animations (it is shouldn't be as high as the size suggests);  - The font used in the editor has serifs which makes the code harder to    read than if a conventional sans-serif font was used;  - The keystroke window is confusing/distracting and doesn't help    illustrate the functionality being demoed. Permalink Failed to load latest commit information. autoload Rename DartFormat to DartFmt. Dec 6, 2015 ftdetect Merge pull request #7 (refactoring. add errorformat and commentstring.) Jun 19, 2014 ftplugin Add triple dash to the list of comment formats Dec 17, 2014 indent Set standard options (fo, com, cms) and add guards and undo Jun 17, 2014 plugin Rename DartFormat to DartFmt. Dec 5, 2015 syntax Fix #23 Dec 16, 2015 AUTHORS added rbtnn to AUTHORS May 4, 2014 CHANGELOG.md Rename DartFormat to DartFmt. Dec 5, 2015 CONTRIBUTING.md Add CONTRIBUTING.md Feb 3, 2015 Dart2Js.gif Replace GIF demos of the provided vim commands Jun 15, 2016 DartAnalyzer.gif Replace GIF demos of the provided vim commands Jun 16, 2016 DartFmt.gif Replace GIF demos of the provided vim commands Jun 16, 2016 LICENSE for vim Oct 31, 2012 README.md Fix IDE references in VIM readme to be more current with new IDE reco… Dec 16, 2015 README.md Dart Support for Vim dart-vim-plugin provides filytype detection, syntax highlighting, and indentation for Dart code in Vim. Looking for an IDE experience? See the Dart Tools page.. Prerequisites You need to install pathogen.vim in order to install and user dart-vim-plugin. Pathogen makes it super easy to install plugins and runtime files under ~./vim/bundle or in their own private directories Installation Make a directory. mkdir -p ~/.vim/bundle  Clone a repository. cd ~/.vim/bundle git clone https://github.com/dart-lang/dart-vim-plugin  Put following codes in your ~/.vimrc. if has('vim_starting')   set nocompatible   set runtimepath+=~/.vim/bundle/dart-vim-plugin endif filetype plugin indent on  Commands You can use following vim commands: :Dart2Js :DartAnalyzer :DartFmt Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/dart-lang/dart-vim-plugin"	"Syntax highlighting for Dart in Vim"	"true"
"IDEs, Editors, and Plugins"	"Atom Plugin"	"https://atom.io/packages/atom-dart"	"Dart support for Atom."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"594"	"47"	"162"	"GitHub - atom/autocomplete-plus: View and insert possible completions in the editor while typing Skip to content Personal Open source Business Explore Sign up Sign in Pricing Blog Support Search GitHub This repository Watch 47 Star 594 Fork 162 atom/autocomplete-plus Code Issues 105 Pull requests 6 Wiki Pulse Graphs View and insert possible completions in the editor while typing 1,268 commits 7 branches 119 releases 55 contributors CoffeeScript 95.7% JavaScript 2.4% CSS 1.9% CoffeeScript JavaScript CSS Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Find file Branch: master Switch branches/tags Branches Tags as-use-on-did-update-cursors bo-display-selector bo-fix-specs-master bo-word-regex jf-investigate-autocomplete-snippets-39 master sm-overflow-flexbox Nothing to show v2.31.1 v2.31.0 v2.30.0 v2.29.2 v2.29.1 v2.29.0 v2.28.0 v2.27.1 v2.27.0 v2.26.1 v2.26.0 v2.25.0 v2.24.0 v2.23.1 v2.23.0 v2.22.0 v2.21.0 v2.20.0 v2.19.1 v2.19.0 v2.18.1 v2.18.0 v2.17.4 v2.17.3 v2.17.2 v2.17.1 v2.17.0 v2.16.3 v2.16.2 v2.16.1 v2.16.0 v2.15.2 v2.15.1 v2.15.0 v2.14.2 v2.14.1 v2.14.0 v2.13.1 v2.13.0 v2.12.1 v2.12.0 v2.11.0 v2.10.0 v2.9.0 v2.8.0 v2.7.1 v2.7.0 v2.6.0 v2.5.0 v2.4.2 v2.4.1 v2.4.0 v2.3.1 v2.3.0 v2.2.0 v2.1.6 v2.1.5 v2.1.4 v2.1.3 v2.1.2 v2.1.1 v2.1.0 v2.0.12 v2.0.11 v2.0.10 v2.0.9 v2.0.8 v2.0.7 v2.0.6 v2.0.5 v2.0.4 v2.0.3 v2.0.2 v2.0.1 v2.0.0 v1.1.0 v1.0.0 v0.27.0 v0.26.0 v0.25.0 v0.24.0 v0.23.0 v0.22.14 v0.22.13 v0.22.12 v0.22.11 v0.22.10 v0.22.9 v0.22.8 v0.22.7 v0.22.6 v0.22.5 v0.22.4 v0.22.3 v0.22.2 v0.22.1 v0.22.0 v0.21.0 v0.20.0 v0.19.0 Nothing to show New pull request Latest commit 9e0f919 Jul 2, 2016 simurai Prepare 2.31.1 release Permalink Failed to load latest commit information. keymaps Move the esc keybinding out into the the keymap Jul 22, 2015 lib Fixes #728 - Use table-cell display for right label Jun 8, 2016 spec Merge pull request #671 from pfitzseb/altkeyint Apr 27, 2016 styles Added margin-right to ol.list-group to prevent h scroll Jun 9, 2016 .coffeelintignore Add coffeelint support May 27, 2015 .gitignore Ignore npm-debug.log Dec 20, 2014 .pairs Further Synchronize With autocomplete Dec 10, 2014 .travis.yml Only build pushes on Travis for master branch [ci skip] Jul 30, 2015 CONTRIBUTING.md Upgrade license and contributing guide Feb 23, 2014 LICENSE.md Fix all the lint errors in spec Jan 29, 2015 README.md Update README.md Jun 10, 2016 appveyor.yml Test against both channels on AppVeyor Jun 24, 2016 coffeelint.json Add coffeelint support May 27, 2015 package.json Prepare 2.31.1 release Jul 2, 2016 README.md autocomplete+ package Displays possible autocomplete suggestions on keystroke (or manually by typing ctrl-space) and inserts a suggestion in the editor if confirmed. Changelog Installation autocomplete+ is bundled with Atom. You don't have to do anything to install it. Providers autocomplete+ has a powerful autocomplete provider API, allowing provider authors to add language-specific behavior to this package. You should definitely install additional providers (the default provider bundled with this package is somewhat crude): https://github.com/atom/autocomplete-plus/wiki/Autocomplete-Providers Usage Just type some stuff, and autocomplete+ will automatically show you some suggestions. Press UP and DOWN to select another suggestion, press TAB or ENTER to confirm your selection. You can change the default keymap in Preferences: Keymap For Confirming A Suggestion Additionally, the confirm keymap can be customized in your keymap.cson: 'atom-text-editor.autocomplete-active':   'tab': 'unset!'   'ctrl-shift-a': 'autocomplete-plus:confirm' Remapping Movement Commands By default, autocomplete-plus commandeers the editor's core movement commands when the suggestion list is open. You may want to change these movement commands to use your own keybindings. First you need to set the autocomplete-plus.useCoreMovementCommands setting to false, which you can do from the autocomplete-plus settings in the settings view. Or by adding this to your config file: ""*"":   ""autocomplete-plus"":     ""useCoreMovementCommands"": false Then add these to your keymap file: 'body atom-text-editor.autocomplete-active':   'ctrl-p': 'autocomplete-plus:move-up'   'ctrl-n': 'autocomplete-plus:move-down'   'pageup': 'autocomplete-plus:page-up'   'pagedown': 'autocomplete-plus:page-down'   'home': 'autocomplete-plus:move-to-top'   'end': 'autocomplete-plus:move-to-bottom' Features Shows suggestions while typing Includes a default provider (SymbolProvider): Wordlist generation happens when you open a file, while editing the file, and on save Suggestions are calculated using fuzzaldrin Exposes a provider API which can be used to extend the functionality of the package and provide targeted / contextually correct suggestions Disable autocomplete for file(s) via blacklisting, e.g. *.md to blacklist Markdown files Disable autocomplete for editor scope(s) via blacklisting Expands a snippet if an autocomplete+ provider includes one in a suggestion Provider API Great autocomplete depends on having great autocomplete providers. If there is not already a great provider for the language / grammar that you are working in, please consider creating a provider. Read the Provider API documentation to learn how to create a new autocomplete provider. SymbolProvider Configuration If the default SymbolProvider is missing useful information for the language / grammar you're working with, please take a look at the SymbolProvider Config API. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session."	"null"	"https://github.com/atom/autocomplete-plus"	"Dart support for Atom."	"true"
"IDEs, Editors, and Plugins"	"DartPad"	"https://dartpad.dartlang.org/"	"Online lightweight editor."	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"null"	"DartPad DartPad New Pad… Reset… Share… Samples Bootstrap Fibonacci Hello World Hello World HTML Solar Spirodraw Sunflower WebSockets Dart HTML CSS Run HTML Output Console Privacy policy Send feedback Strong mode (What's this?)"	"null"	"null"	"Online lightweight editor."	"true"
